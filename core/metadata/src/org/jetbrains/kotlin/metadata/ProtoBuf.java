// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: core/metadata/src/metadata.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.metadata;

public final class ProtoBuf {
  private ProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.Modality}
   */
  public enum Modality
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>FINAL = 0;</code>
     */
    FINAL(0),
    /**
     * <code>OPEN = 1;</code>
     */
    OPEN(1),
    /**
     * <code>ABSTRACT = 2;</code>
     */
    ABSTRACT(2),
    /**
     * <code>SEALED = 3;</code>
     */
    SEALED(3),
    ;

    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>FINAL = 0;</code>
     */
    public static final int FINAL_VALUE = 0;
    /**
     * <code>OPEN = 1;</code>
     */
    public static final int OPEN_VALUE = 1;
    /**
     * <code>ABSTRACT = 2;</code>
     */
    public static final int ABSTRACT_VALUE = 2;
    /**
     * <code>SEALED = 3;</code>
     */
    public static final int SEALED_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Modality valueOf(int value) {
      return forNumber(value);
    }

    public static Modality forNumber(int value) {
      switch (value) {
        case 0: return FINAL;
        case 1: return OPEN;
        case 2: return ABSTRACT;
        case 3: return SEALED;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modality>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        Modality> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modality>() {
            @java.lang.Override
            public Modality findValueByNumber(int number) {
              return Modality.forNumber(number);
            }
          };

    public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ModalityVerifier.INSTANCE;
    }

    private static final class ModalityVerifier implements 
         org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
            static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new ModalityVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Modality.forNumber(number) != null;
            }
          };

    private final int value;

    private Modality(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Modality)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.Visibility}
   */
  public enum Visibility
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * 3 bits
     * </pre>
     *
     * <code>INTERNAL = 0;</code>
     */
    INTERNAL(0),
    /**
     * <code>PRIVATE = 1;</code>
     */
    PRIVATE(1),
    /**
     * <code>PROTECTED = 2;</code>
     */
    PROTECTED(2),
    /**
     * <code>PUBLIC = 3;</code>
     */
    PUBLIC(3),
    /**
     * <code>PRIVATE_TO_THIS = 4;</code>
     */
    PRIVATE_TO_THIS(4),
    /**
     * <code>LOCAL = 5;</code>
     */
    LOCAL(5),
    ;

    /**
     * <pre>
     * 3 bits
     * </pre>
     *
     * <code>INTERNAL = 0;</code>
     */
    public static final int INTERNAL_VALUE = 0;
    /**
     * <code>PRIVATE = 1;</code>
     */
    public static final int PRIVATE_VALUE = 1;
    /**
     * <code>PROTECTED = 2;</code>
     */
    public static final int PROTECTED_VALUE = 2;
    /**
     * <code>PUBLIC = 3;</code>
     */
    public static final int PUBLIC_VALUE = 3;
    /**
     * <code>PRIVATE_TO_THIS = 4;</code>
     */
    public static final int PRIVATE_TO_THIS_VALUE = 4;
    /**
     * <code>LOCAL = 5;</code>
     */
    public static final int LOCAL_VALUE = 5;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Visibility valueOf(int value) {
      return forNumber(value);
    }

    public static Visibility forNumber(int value) {
      switch (value) {
        case 0: return INTERNAL;
        case 1: return PRIVATE;
        case 2: return PROTECTED;
        case 3: return PUBLIC;
        case 4: return PRIVATE_TO_THIS;
        case 5: return LOCAL;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Visibility>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        Visibility> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Visibility>() {
            @java.lang.Override
            public Visibility findValueByNumber(int number) {
              return Visibility.forNumber(number);
            }
          };

    public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return VisibilityVerifier.INSTANCE;
    }

    private static final class VisibilityVerifier implements 
         org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
            static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new VisibilityVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Visibility.forNumber(number) != null;
            }
          };

    private final int value;

    private Visibility(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Visibility)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.MemberKind}
   */
  public enum MemberKind
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>DECLARATION = 0;</code>
     */
    DECLARATION(0),
    /**
     * <code>FAKE_OVERRIDE = 1;</code>
     */
    FAKE_OVERRIDE(1),
    /**
     * <code>DELEGATION = 2;</code>
     */
    DELEGATION(2),
    /**
     * <code>SYNTHESIZED = 3;</code>
     */
    SYNTHESIZED(3),
    ;

    /**
     * <pre>
     * 2 bits
     * </pre>
     *
     * <code>DECLARATION = 0;</code>
     */
    public static final int DECLARATION_VALUE = 0;
    /**
     * <code>FAKE_OVERRIDE = 1;</code>
     */
    public static final int FAKE_OVERRIDE_VALUE = 1;
    /**
     * <code>DELEGATION = 2;</code>
     */
    public static final int DELEGATION_VALUE = 2;
    /**
     * <code>SYNTHESIZED = 3;</code>
     */
    public static final int SYNTHESIZED_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MemberKind valueOf(int value) {
      return forNumber(value);
    }

    public static MemberKind forNumber(int value) {
      switch (value) {
        case 0: return DECLARATION;
        case 1: return FAKE_OVERRIDE;
        case 2: return DELEGATION;
        case 3: return SYNTHESIZED;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<MemberKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        MemberKind> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<MemberKind>() {
            @java.lang.Override
            public MemberKind findValueByNumber(int number) {
              return MemberKind.forNumber(number);
            }
          };

    public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return MemberKindVerifier.INSTANCE;
    }

    private static final class MemberKindVerifier implements 
         org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
            static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new MemberKindVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return MemberKind.forNumber(number) != null;
            }
          };

    private final int value;

    private MemberKind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.MemberKind)
  }

  public interface StringTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.StringTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated string string = 1;</code>
     * @return A list containing the string.
     */
    java.util.List<java.lang.String>
        getStringList();
    /**
     * <code>repeated string string = 1;</code>
     * @return The count of string.
     */
    int getStringCount();
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    java.lang.String getString(int index);
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.StringTable}
   */
  public  static final class StringTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          StringTable, StringTable.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.StringTable)
      StringTableOrBuilder {
    private StringTable() {
      string_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    public static final int STRING_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> string_;
    /**
     * <code>repeated string string = 1;</code>
     * @return A list containing the string.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getStringList() {
      return string_;
    }
    /**
     * <code>repeated string string = 1;</code>
     * @return The count of string.
     */
    @java.lang.Override
    public int getStringCount() {
      return string_.size();
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the element to return.
     * @return The string at the given index.
     */
    @java.lang.Override
    public java.lang.String getString(int index) {
      return string_.get(index);
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the string at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getStringBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          string_.get(index));
    }
    private void ensureStringIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          string_;  if (!tmp.isModifiable()) {
        string_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param index The index to set the value at.
     * @param value The string to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setString(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureStringIsMutable();
      string_.set(index, value);
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param value The string to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addString(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureStringIsMutable();
      string_.add(value);
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param values The string to add.
     */
    private void addAllString(
        java.lang.Iterable<java.lang.String> values) {
      ensureStringIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, string_);
    }
    /**
     * <code>repeated string string = 1;</code>
     */
    private void clearString() {
      string_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string string = 1;</code>
     * @param value The bytes of the string to add.
     */
    private void addStringBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureStringIsMutable();
      string_.add(value.toStringUtf8());
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.StringTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.StringTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.StringTableOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated string string = 1;</code>
       * @return A list containing the string.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getStringList() {
        return java.util.Collections.unmodifiableList(
            instance.getStringList());
      }
      /**
       * <code>repeated string string = 1;</code>
       * @return The count of string.
       */
      @java.lang.Override
      public int getStringCount() {
        return instance.getStringCount();
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param index The index of the element to return.
       * @return The string at the given index.
       */
      @java.lang.Override
      public java.lang.String getString(int index) {
        return instance.getString(index);
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the string at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes(int index) {
        return instance.getStringBytes(index);
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param index The index to set the value at.
       * @param value The string to set.
       * @return This builder for chaining.
       */
      public Builder setString(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setString(index, value);
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param value The string to add.
       * @return This builder for chaining.
       */
      public Builder addString(
          java.lang.String value) {
        copyOnWrite();
        instance.addString(value);
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param values The string to add.
       * @return This builder for chaining.
       */
      public Builder addAllString(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllString(values);
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearString() {
        copyOnWrite();
        instance.clearString();
        return this;
      }
      /**
       * <code>repeated string string = 1;</code>
       * @param value The bytes of the string to add.
       * @return This builder for chaining.
       */
      public Builder addStringBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addStringBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.StringTable)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.StringTable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "string_",
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001a";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.StringTable> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.StringTable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.StringTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.StringTable DEFAULT_INSTANCE;
    static {
      StringTable defaultInstance = new StringTable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        StringTable.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<StringTable> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<StringTable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface QualifiedNameTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.QualifiedNameTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> 
        getQualifiedNameList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    int getQualifiedNameCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable}
   */
  public  static final class QualifiedNameTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          QualifiedNameTable, QualifiedNameTable.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable)
      QualifiedNameTableOrBuilder {
    private QualifiedNameTable() {
      qualifiedName_ = emptyProtobufList();
    }
    public interface QualifiedNameOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
        org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return Whether the parentQualifiedName field is set.
       */
      boolean hasParentQualifiedName();
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return The parentQualifiedName.
       */
      int getParentQualifiedName();

      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return Whether the shortName field is set.
       */
      boolean hasShortName();
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return The shortName.
       */
      int getShortName();

      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return Whether the kind field is set.
       */
      boolean hasKind();
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return The kind.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName}
     */
    public  static final class QualifiedName extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
            QualifiedName, QualifiedName.Builder> implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
        QualifiedNameOrBuilder {
      private QualifiedName() {
        parentQualifiedName_ = -1;
        kind_ = 1;
      }
      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind}
       */
      public enum Kind
          implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
        /**
         * <code>CLASS = 0;</code>
         */
        CLASS(0),
        /**
         * <code>PACKAGE = 1;</code>
         */
        PACKAGE(1),
        /**
         * <code>LOCAL = 2;</code>
         */
        LOCAL(2),
        ;

        /**
         * <code>CLASS = 0;</code>
         */
        public static final int CLASS_VALUE = 0;
        /**
         * <code>PACKAGE = 1;</code>
         */
        public static final int PACKAGE_VALUE = 1;
        /**
         * <code>LOCAL = 2;</code>
         */
        public static final int LOCAL_VALUE = 2;


        @java.lang.Override
        public final int getNumber() {
          return value;
        }

        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Kind valueOf(int value) {
          return forNumber(value);
        }

        public static Kind forNumber(int value) {
          switch (value) {
            case 0: return CLASS;
            case 1: return PACKAGE;
            case 2: return LOCAL;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
            Kind> internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
                @java.lang.Override
                public Kind findValueByNumber(int number) {
                  return Kind.forNumber(number);
                }
              };

        public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
            internalGetVerifier() {
          return KindVerifier.INSTANCE;
        }

        private static final class KindVerifier implements 
             org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
                static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new KindVerifier();
                @java.lang.Override
                public boolean isInRange(int number) {
                  return Kind.forNumber(number) != null;
                }
              };

        private final int value;

        private Kind(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind)
      }

      private int bitField0_;
      public static final int PARENT_QUALIFIED_NAME_FIELD_NUMBER = 1;
      private int parentQualifiedName_;
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return Whether the parentQualifiedName field is set.
       */
      @java.lang.Override
      public boolean hasParentQualifiedName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @return The parentQualifiedName.
       */
      @java.lang.Override
      public int getParentQualifiedName() {
        return parentQualifiedName_;
      }
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       * @param value The parentQualifiedName to set.
       */
      private void setParentQualifiedName(int value) {
        bitField0_ |= 0x00000001;
        parentQualifiedName_ = value;
      }
      /**
       * <code>int32 parent_qualified_name = 1 [default = -1];</code>
       */
      private void clearParentQualifiedName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        parentQualifiedName_ = -1;
      }

      public static final int SHORT_NAME_FIELD_NUMBER = 2;
      private int shortName_;
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return Whether the shortName field is set.
       */
      @java.lang.Override
      public boolean hasShortName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @return The shortName.
       */
      @java.lang.Override
      public int getShortName() {
        return shortName_;
      }
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       * @param value The shortName to set.
       */
      private void setShortName(int value) {
        bitField0_ |= 0x00000002;
        shortName_ = value;
      }
      /**
       * <pre>
       * id in the StringTable
       * </pre>
       *
       * <code>int32 short_name = 2 [features = { ... }</code>
       */
      private void clearShortName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        shortName_ = 0;
      }

      public static final int KIND_FIELD_NUMBER = 3;
      private int kind_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return Whether the kind field is set.
       */
      @java.lang.Override
      public boolean hasKind() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @return The kind.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind() {
        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind result = org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.forNumber(kind_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.PACKAGE : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       * @param value The kind to set.
       */
      private void setKind(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind value) {
        kind_ = value.getNumber();
        bitField0_ |= 0x00000004;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
       */
      private void clearKind() {
        bitField0_ = (bitField0_ & ~0x00000004);
        kind_ = 1;
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          java.nio.ByteBuffer data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          java.nio.ByteBuffer data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName prototype) {
        return DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
            org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName, Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder {
        // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @return Whether the parentQualifiedName field is set.
         */
        @java.lang.Override
        public boolean hasParentQualifiedName() {
          return instance.hasParentQualifiedName();
        }
        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @return The parentQualifiedName.
         */
        @java.lang.Override
        public int getParentQualifiedName() {
          return instance.getParentQualifiedName();
        }
        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @param value The parentQualifiedName to set.
         * @return This builder for chaining.
         */
        public Builder setParentQualifiedName(int value) {
          copyOnWrite();
          instance.setParentQualifiedName(value);
          return this;
        }
        /**
         * <code>int32 parent_qualified_name = 1 [default = -1];</code>
         * @return This builder for chaining.
         */
        public Builder clearParentQualifiedName() {
          copyOnWrite();
          instance.clearParentQualifiedName();
          return this;
        }

        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @return Whether the shortName field is set.
         */
        @java.lang.Override
        public boolean hasShortName() {
          return instance.hasShortName();
        }
        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @return The shortName.
         */
        @java.lang.Override
        public int getShortName() {
          return instance.getShortName();
        }
        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @param value The shortName to set.
         * @return This builder for chaining.
         */
        public Builder setShortName(int value) {
          copyOnWrite();
          instance.setShortName(value);
          return this;
        }
        /**
         * <pre>
         * id in the StringTable
         * </pre>
         *
         * <code>int32 short_name = 2 [features = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearShortName() {
          copyOnWrite();
          instance.clearShortName();
          return this;
        }

        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @return Whether the kind field is set.
         */
        @java.lang.Override
        public boolean hasKind() {
          return instance.hasKind();
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @return The kind.
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind getKind() {
          return instance.getKind();
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @param value The enum numeric value on the wire for kind to set.
         * @return This builder for chaining.
         */
        public Builder setKind(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind value) {
          copyOnWrite();
          instance.setKind(value);
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName.Kind kind = 3 [default = PACKAGE];</code>
         * @return This builder for chaining.
         */
        public Builder clearKind() {
          copyOnWrite();
          instance.clearKind();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
      }
      private byte memoizedIsInitialized = 2;
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "parentQualifiedName_",
                "shortName_",
                "kind_",
                org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Kind.internalGetVerifier(),
              };
              java.lang.String info =
                  "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0001\u0001\u1004\u0000\u0002" +
                  "\u1504\u0001\u0003\u180c\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> parser = PARSER;
            if (parser == null) {
              synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName)
      private static final org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName DEFAULT_INSTANCE;
      static {
        QualifiedName defaultInstance = new QualifiedName();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
          QualifiedName.class, defaultInstance);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile org.jetbrains.kotlin.protobuf.Parser<QualifiedName> PARSER;

      public static org.jetbrains.kotlin.protobuf.Parser<QualifiedName> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public static final int QUALIFIED_NAME_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> qualifiedName_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> getQualifiedNameList() {
      return qualifiedName_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder> 
        getQualifiedNameOrBuilderList() {
      return qualifiedName_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public int getQualifiedNameCount() {
      return qualifiedName_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index) {
      return qualifiedName_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedNameOrBuilder getQualifiedNameOrBuilder(
        int index) {
      return qualifiedName_.get(index);
    }
    private void ensureQualifiedNameIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> tmp = qualifiedName_;
      if (!tmp.isModifiable()) {
        qualifiedName_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setQualifiedName(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
      value.getClass();  // minimal bytecode null check
      ensureQualifiedNameIsMutable();
      qualifiedName_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addQualifiedName(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
      value.getClass();  // minimal bytecode null check
      ensureQualifiedNameIsMutable();
      qualifiedName_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addQualifiedName(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
      value.getClass();  // minimal bytecode null check
      ensureQualifiedNameIsMutable();
      qualifiedName_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    private void addAllQualifiedName(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> values) {
      ensureQualifiedNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, qualifiedName_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    private void clearQualifiedName() {
      qualifiedName_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
     */
    private void removeQualifiedName(int index) {
      ensureQualifiedNameIsMutable();
      qualifiedName_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.QualifiedNameTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.QualifiedNameTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTableOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> getQualifiedNameList() {
        return java.util.Collections.unmodifiableList(
            instance.getQualifiedNameList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      @java.lang.Override
      public int getQualifiedNameCount() {
        return instance.getQualifiedNameCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName getQualifiedName(int index) {
        return instance.getQualifiedName(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder setQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
        copyOnWrite();
        instance.setQualifiedName(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder setQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        copyOnWrite();
        instance.setQualifiedName(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
        copyOnWrite();
        instance.addQualifiedName(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName value) {
        copyOnWrite();
        instance.addQualifiedName(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        copyOnWrite();
        instance.addQualifiedName(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addQualifiedName(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.Builder builderForValue) {
        copyOnWrite();
        instance.addQualifiedName(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder addAllQualifiedName(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName> values) {
        copyOnWrite();
        instance.addAllQualifiedName(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder clearQualifiedName() {
        copyOnWrite();
        instance.clearQualifiedName();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.QualifiedNameTable.QualifiedName qualified_name = 1;</code>
       */
      public Builder removeQualifiedName(int index) {
        copyOnWrite();
        instance.removeQualifiedName(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "qualifiedName_",
              org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.QualifiedName.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.QualifiedNameTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable DEFAULT_INSTANCE;
    static {
      QualifiedNameTable defaultInstance = new QualifiedNameTable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        QualifiedNameTable.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<QualifiedNameTable> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<QualifiedNameTable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AnnotationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    int getId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    int getArgumentCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation}
   */
  public  static final class Annotation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Annotation, Annotation.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation)
      AnnotationOrBuilder {
    private Annotation() {
      argument_ = emptyProtobufList();
    }
    public interface ArgumentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation.Argument)
        org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      boolean hasNameId();
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      int getNameId();

      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       * @return Whether the value field is set.
       */
      boolean hasValue();
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       * @return The value.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getValue();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument}
     */
    public  static final class Argument extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
            Argument, Argument.Builder> implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation.Argument)
        ArgumentOrBuilder {
      private Argument() {
      }
      public interface ValueOrBuilder extends
          // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
          org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return Whether the type field is set.
         */
        boolean hasType();
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return The type.
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type getType();

        /**
         * <code>sint64 int_value = 2;</code>
         * @return Whether the intValue field is set.
         */
        boolean hasIntValue();
        /**
         * <code>sint64 int_value = 2;</code>
         * @return The intValue.
         */
        long getIntValue();

        /**
         * <code>float float_value = 3;</code>
         * @return Whether the floatValue field is set.
         */
        boolean hasFloatValue();
        /**
         * <code>float float_value = 3;</code>
         * @return The floatValue.
         */
        float getFloatValue();

        /**
         * <code>double double_value = 4;</code>
         * @return Whether the doubleValue field is set.
         */
        boolean hasDoubleValue();
        /**
         * <code>double double_value = 4;</code>
         * @return The doubleValue.
         */
        double getDoubleValue();

        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return Whether the stringValue field is set.
         */
        boolean hasStringValue();
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return The stringValue.
         */
        int getStringValue();

        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return Whether the classId field is set.
         */
        boolean hasClassId();
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return The classId.
         */
        int getClassId();

        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return Whether the enumValueId field is set.
         */
        boolean hasEnumValueId();
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return The enumValueId.
         */
        int getEnumValueId();

        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         * @return Whether the annotation field is set.
         */
        boolean hasAnnotation();
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         * @return The annotation.
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation();

        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> 
            getArrayElementList();
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getArrayElement(int index);
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        int getArrayElementCount();

        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return Whether the arrayDimensionCount field is set.
         */
        boolean hasArrayDimensionCount();
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return The arrayDimensionCount.
         */
        int getArrayDimensionCount();

        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return Whether the flags field is set.
         */
        boolean hasFlags();
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return The flags.
         */
        int getFlags();
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value}
       */
      public  static final class Value extends
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
              Value, Value.Builder> implements
          // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
          ValueOrBuilder {
        private Value() {
          arrayElement_ = emptyProtobufList();
        }
        /**
         * Protobuf enum {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type}
         */
        public enum Type
            implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
          /**
           * <code>BYTE = 0;</code>
           */
          BYTE(0),
          /**
           * <code>CHAR = 1;</code>
           */
          CHAR(1),
          /**
           * <code>SHORT = 2;</code>
           */
          SHORT(2),
          /**
           * <code>INT = 3;</code>
           */
          INT(3),
          /**
           * <code>LONG = 4;</code>
           */
          LONG(4),
          /**
           * <code>FLOAT = 5;</code>
           */
          FLOAT(5),
          /**
           * <code>DOUBLE = 6;</code>
           */
          DOUBLE(6),
          /**
           * <code>BOOLEAN = 7;</code>
           */
          BOOLEAN(7),
          /**
           * <code>STRING = 8;</code>
           */
          STRING(8),
          /**
           * <code>CLASS = 9;</code>
           */
          CLASS(9),
          /**
           * <code>ENUM = 10;</code>
           */
          ENUM(10),
          /**
           * <code>ANNOTATION = 11;</code>
           */
          ANNOTATION(11),
          /**
           * <code>ARRAY = 12;</code>
           */
          ARRAY(12),
          ;

          /**
           * <code>BYTE = 0;</code>
           */
          public static final int BYTE_VALUE = 0;
          /**
           * <code>CHAR = 1;</code>
           */
          public static final int CHAR_VALUE = 1;
          /**
           * <code>SHORT = 2;</code>
           */
          public static final int SHORT_VALUE = 2;
          /**
           * <code>INT = 3;</code>
           */
          public static final int INT_VALUE = 3;
          /**
           * <code>LONG = 4;</code>
           */
          public static final int LONG_VALUE = 4;
          /**
           * <code>FLOAT = 5;</code>
           */
          public static final int FLOAT_VALUE = 5;
          /**
           * <code>DOUBLE = 6;</code>
           */
          public static final int DOUBLE_VALUE = 6;
          /**
           * <code>BOOLEAN = 7;</code>
           */
          public static final int BOOLEAN_VALUE = 7;
          /**
           * <code>STRING = 8;</code>
           */
          public static final int STRING_VALUE = 8;
          /**
           * <code>CLASS = 9;</code>
           */
          public static final int CLASS_VALUE = 9;
          /**
           * <code>ENUM = 10;</code>
           */
          public static final int ENUM_VALUE = 10;
          /**
           * <code>ANNOTATION = 11;</code>
           */
          public static final int ANNOTATION_VALUE = 11;
          /**
           * <code>ARRAY = 12;</code>
           */
          public static final int ARRAY_VALUE = 12;


          @java.lang.Override
          public final int getNumber() {
            return value;
          }

          /**
           * @param value The number of the enum to look for.
           * @return The enum associated with the given number.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static Type valueOf(int value) {
            return forNumber(value);
          }

          public static Type forNumber(int value) {
            switch (value) {
              case 0: return BYTE;
              case 1: return CHAR;
              case 2: return SHORT;
              case 3: return INT;
              case 4: return LONG;
              case 5: return FLOAT;
              case 6: return DOUBLE;
              case 7: return BOOLEAN;
              case 8: return STRING;
              case 9: return CLASS;
              case 10: return ENUM;
              case 11: return ANNOTATION;
              case 12: return ARRAY;
              default: return null;
            }
          }

          public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
              Type> internalValueMap =
                new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>() {
                  @java.lang.Override
                  public Type findValueByNumber(int number) {
                    return Type.forNumber(number);
                  }
                };

          public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
              internalGetVerifier() {
            return TypeVerifier.INSTANCE;
          }

          private static final class TypeVerifier implements 
               org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
                  static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new TypeVerifier();
                  @java.lang.Override
                  public boolean isInRange(int number) {
                    return Type.forNumber(number) != null;
                  }
                };

          private final int value;

          private Type(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type)
        }

        private int bitField0_;
        public static final int TYPE_FIELD_NUMBER = 1;
        private int type_;
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return Whether the type field is set.
         */
        @java.lang.Override
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @return The type.
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type getType() {
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type result = org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.forNumber(type_);
          return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.BYTE : result;
        }
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         * @param value The type to set.
         */
        private void setType(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type value) {
          type_ = value.getNumber();
          bitField0_ |= 0x00000001;
        }
        /**
         * <pre>
         * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
         * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
         * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
         */
        private void clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
        }

        public static final int INT_VALUE_FIELD_NUMBER = 2;
        private long intValue_;
        /**
         * <code>sint64 int_value = 2;</code>
         * @return Whether the intValue field is set.
         */
        @java.lang.Override
        public boolean hasIntValue() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>sint64 int_value = 2;</code>
         * @return The intValue.
         */
        @java.lang.Override
        public long getIntValue() {
          return intValue_;
        }
        /**
         * <code>sint64 int_value = 2;</code>
         * @param value The intValue to set.
         */
        private void setIntValue(long value) {
          bitField0_ |= 0x00000002;
          intValue_ = value;
        }
        /**
         * <code>sint64 int_value = 2;</code>
         */
        private void clearIntValue() {
          bitField0_ = (bitField0_ & ~0x00000002);
          intValue_ = 0L;
        }

        public static final int FLOAT_VALUE_FIELD_NUMBER = 3;
        private float floatValue_;
        /**
         * <code>float float_value = 3;</code>
         * @return Whether the floatValue field is set.
         */
        @java.lang.Override
        public boolean hasFloatValue() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>float float_value = 3;</code>
         * @return The floatValue.
         */
        @java.lang.Override
        public float getFloatValue() {
          return floatValue_;
        }
        /**
         * <code>float float_value = 3;</code>
         * @param value The floatValue to set.
         */
        private void setFloatValue(float value) {
          bitField0_ |= 0x00000004;
          floatValue_ = value;
        }
        /**
         * <code>float float_value = 3;</code>
         */
        private void clearFloatValue() {
          bitField0_ = (bitField0_ & ~0x00000004);
          floatValue_ = 0F;
        }

        public static final int DOUBLE_VALUE_FIELD_NUMBER = 4;
        private double doubleValue_;
        /**
         * <code>double double_value = 4;</code>
         * @return Whether the doubleValue field is set.
         */
        @java.lang.Override
        public boolean hasDoubleValue() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>double double_value = 4;</code>
         * @return The doubleValue.
         */
        @java.lang.Override
        public double getDoubleValue() {
          return doubleValue_;
        }
        /**
         * <code>double double_value = 4;</code>
         * @param value The doubleValue to set.
         */
        private void setDoubleValue(double value) {
          bitField0_ |= 0x00000008;
          doubleValue_ = value;
        }
        /**
         * <code>double double_value = 4;</code>
         */
        private void clearDoubleValue() {
          bitField0_ = (bitField0_ & ~0x00000008);
          doubleValue_ = 0D;
        }

        public static final int STRING_VALUE_FIELD_NUMBER = 5;
        private int stringValue_;
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return Whether the stringValue field is set.
         */
        @java.lang.Override
        public boolean hasStringValue() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @return The stringValue.
         */
        @java.lang.Override
        public int getStringValue() {
          return stringValue_;
        }
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         * @param value The stringValue to set.
         */
        private void setStringValue(int value) {
          bitField0_ |= 0x00000010;
          stringValue_ = value;
        }
        /**
         * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
         */
        private void clearStringValue() {
          bitField0_ = (bitField0_ & ~0x00000010);
          stringValue_ = 0;
        }

        public static final int CLASS_ID_FIELD_NUMBER = 6;
        private int classId_;
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return Whether the classId field is set.
         */
        @java.lang.Override
        public boolean hasClassId() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @return The classId.
         */
        @java.lang.Override
        public int getClassId() {
          return classId_;
        }
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         * @param value The classId to set.
         */
        private void setClassId(int value) {
          bitField0_ |= 0x00000020;
          classId_ = value;
        }
        /**
         * <pre>
         * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
         * </pre>
         *
         * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
         */
        private void clearClassId() {
          bitField0_ = (bitField0_ & ~0x00000020);
          classId_ = 0;
        }

        public static final int ENUM_VALUE_ID_FIELD_NUMBER = 7;
        private int enumValueId_;
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return Whether the enumValueId field is set.
         */
        @java.lang.Override
        public boolean hasEnumValueId() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @return The enumValueId.
         */
        @java.lang.Override
        public int getEnumValueId() {
          return enumValueId_;
        }
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         * @param value The enumValueId to set.
         */
        private void setEnumValueId(int value) {
          bitField0_ |= 0x00000040;
          enumValueId_ = value;
        }
        /**
         * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
         */
        private void clearEnumValueId() {
          bitField0_ = (bitField0_ & ~0x00000040);
          enumValueId_ = 0;
        }

        public static final int ANNOTATION_FIELD_NUMBER = 8;
        private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation annotation_;
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        @java.lang.Override
        public boolean hasAnnotation() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation() {
          return annotation_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance() : annotation_;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        @java.lang.SuppressWarnings("ReturnValueIgnored")
        private void setAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
          value.getClass();  // minimal bytecode null check
          annotation_ = value;
          bitField0_ |= 0x00000080;
          }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
        private void mergeAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
          value.getClass();  // minimal bytecode null check
          if (annotation_ != null &&
              annotation_ != org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance()) {
            annotation_ =
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.newBuilder(annotation_).mergeFrom(value).buildPartial();
          } else {
            annotation_ = value;
          }
          bitField0_ |= 0x00000080;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
         */
        private void clearAnnotation() {  annotation_ = null;
          bitField0_ = (bitField0_ & ~0x00000080);
        }

        public static final int ARRAY_ELEMENT_FIELD_NUMBER = 9;
        private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> arrayElement_;
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> getArrayElementList() {
          return arrayElement_;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder> 
            getArrayElementOrBuilderList() {
          return arrayElement_;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public int getArrayElementCount() {
          return arrayElement_.size();
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getArrayElement(int index) {
          return arrayElement_.get(index);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder getArrayElementOrBuilder(
            int index) {
          return arrayElement_.get(index);
        }
        private void ensureArrayElementIsMutable() {
          org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> tmp = arrayElement_;
          if (!tmp.isModifiable()) {
            arrayElement_ =
                org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
           }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.SuppressWarnings("ReturnValueIgnored")
        private void setArrayElement(
            int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
          value.getClass();  // minimal bytecode null check
          ensureArrayElementIsMutable();
          arrayElement_.set(index, value);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.SuppressWarnings("ReturnValueIgnored")
        private void addArrayElement(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
          value.getClass();  // minimal bytecode null check
          ensureArrayElementIsMutable();
          arrayElement_.add(value);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        @java.lang.SuppressWarnings("ReturnValueIgnored")
        private void addArrayElement(
            int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
          value.getClass();  // minimal bytecode null check
          ensureArrayElementIsMutable();
          arrayElement_.add(index, value);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        private void addAllArrayElement(
            java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> values) {
          ensureArrayElementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
              values, arrayElement_);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        private void clearArrayElement() {
          arrayElement_ = emptyProtobufList();
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
         */
        private void removeArrayElement(int index) {
          ensureArrayElementIsMutable();
          arrayElement_.remove(index);
        }

        public static final int ARRAY_DIMENSION_COUNT_FIELD_NUMBER = 11;
        private int arrayDimensionCount_;
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return Whether the arrayDimensionCount field is set.
         */
        @java.lang.Override
        public boolean hasArrayDimensionCount() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @return The arrayDimensionCount.
         */
        @java.lang.Override
        public int getArrayDimensionCount() {
          return arrayDimensionCount_;
        }
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         * @param value The arrayDimensionCount to set.
         */
        private void setArrayDimensionCount(int value) {
          bitField0_ |= 0x00000100;
          arrayDimensionCount_ = value;
        }
        /**
         * <pre>
         * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
         * E.g. if class_id = kotlin/String, this annotation argument value denotes:
         * - String::class, if array_dimension_count = 0
         * - Array&lt;String&gt;::class, if array_dimension_count = 1
         * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
         * - etc.
         * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
         * in class literals on JVM, we don't bother to do represent this in our format as well.
         * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
         * </pre>
         *
         * <code>int32 array_dimension_count = 11 [default = 0];</code>
         */
        private void clearArrayDimensionCount() {
          bitField0_ = (bitField0_ & ~0x00000100);
          arrayDimensionCount_ = 0;
        }

        public static final int FLAGS_FIELD_NUMBER = 10;
        private int flags_;
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return Whether the flags field is set.
         */
        @java.lang.Override
        public boolean hasFlags() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @return The flags.
         */
        @java.lang.Override
        public int getFlags() {
          return flags_;
        }
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         * @param value The flags to set.
         */
        private void setFlags(int value) {
          bitField0_ |= 0x00000200;
          flags_ = value;
        }
        /**
         * <pre>
         *
         * isUnsigned
         * </pre>
         *
         * <code>int32 flags = 10 [default = 0];</code>
         */
        private void clearFlags() {
          bitField0_ = (bitField0_ & ~0x00000200);
          flags_ = 0;
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            java.nio.ByteBuffer data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            java.nio.ByteBuffer data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.ByteString data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.ByteString data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(byte[] data)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            byte[] data,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            java.io.InputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseDelimitedFrom(
            java.io.InputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input);
        }
        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value parseFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
          return (Builder) DEFAULT_INSTANCE.createBuilder();
        }
        public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value prototype) {
          return DEFAULT_INSTANCE.createBuilder(prototype);
        }

        /**
         * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument.Value}
         */
        public static final class Builder extends
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value, Builder> implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.ValueOrBuilder {
          // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.newBuilder()
          private Builder() {
            super(DEFAULT_INSTANCE);
          }


          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @return Whether the type field is set.
           */
          @java.lang.Override
          public boolean hasType() {
            return instance.hasType();
          }
          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @return The type.
           */
          @java.lang.Override
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type getType() {
            return instance.getType();
          }
          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @param value The enum numeric value on the wire for type to set.
           * @return This builder for chaining.
           */
          public Builder setType(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type value) {
            copyOnWrite();
            instance.setType(value);
            return this;
          }
          /**
           * <pre>
           * Note: a *Value* has a Type, not an Argument! This is done for future language features which may involve using arrays
           * of elements of different types. Such entries are allowed in the constant pool of JVM class files.
           * However, to save space, this field is optional: in case of homogeneous arrays, only the type of the first element is required
           * </pre>
           *
           * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value.Type type = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearType() {
            copyOnWrite();
            instance.clearType();
            return this;
          }

          /**
           * <code>sint64 int_value = 2;</code>
           * @return Whether the intValue field is set.
           */
          @java.lang.Override
          public boolean hasIntValue() {
            return instance.hasIntValue();
          }
          /**
           * <code>sint64 int_value = 2;</code>
           * @return The intValue.
           */
          @java.lang.Override
          public long getIntValue() {
            return instance.getIntValue();
          }
          /**
           * <code>sint64 int_value = 2;</code>
           * @param value The intValue to set.
           * @return This builder for chaining.
           */
          public Builder setIntValue(long value) {
            copyOnWrite();
            instance.setIntValue(value);
            return this;
          }
          /**
           * <code>sint64 int_value = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearIntValue() {
            copyOnWrite();
            instance.clearIntValue();
            return this;
          }

          /**
           * <code>float float_value = 3;</code>
           * @return Whether the floatValue field is set.
           */
          @java.lang.Override
          public boolean hasFloatValue() {
            return instance.hasFloatValue();
          }
          /**
           * <code>float float_value = 3;</code>
           * @return The floatValue.
           */
          @java.lang.Override
          public float getFloatValue() {
            return instance.getFloatValue();
          }
          /**
           * <code>float float_value = 3;</code>
           * @param value The floatValue to set.
           * @return This builder for chaining.
           */
          public Builder setFloatValue(float value) {
            copyOnWrite();
            instance.setFloatValue(value);
            return this;
          }
          /**
           * <code>float float_value = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearFloatValue() {
            copyOnWrite();
            instance.clearFloatValue();
            return this;
          }

          /**
           * <code>double double_value = 4;</code>
           * @return Whether the doubleValue field is set.
           */
          @java.lang.Override
          public boolean hasDoubleValue() {
            return instance.hasDoubleValue();
          }
          /**
           * <code>double double_value = 4;</code>
           * @return The doubleValue.
           */
          @java.lang.Override
          public double getDoubleValue() {
            return instance.getDoubleValue();
          }
          /**
           * <code>double double_value = 4;</code>
           * @param value The doubleValue to set.
           * @return This builder for chaining.
           */
          public Builder setDoubleValue(double value) {
            copyOnWrite();
            instance.setDoubleValue(value);
            return this;
          }
          /**
           * <code>double double_value = 4;</code>
           * @return This builder for chaining.
           */
          public Builder clearDoubleValue() {
            copyOnWrite();
            instance.clearDoubleValue();
            return this;
          }

          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @return Whether the stringValue field is set.
           */
          @java.lang.Override
          public boolean hasStringValue() {
            return instance.hasStringValue();
          }
          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @return The stringValue.
           */
          @java.lang.Override
          public int getStringValue() {
            return instance.getStringValue();
          }
          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @param value The stringValue to set.
           * @return This builder for chaining.
           */
          public Builder setStringValue(int value) {
            copyOnWrite();
            instance.setStringValue(value);
            return this;
          }
          /**
           * <code>int32 string_value = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
           * @return This builder for chaining.
           */
          public Builder clearStringValue() {
            copyOnWrite();
            instance.clearStringValue();
            return this;
          }

          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @return Whether the classId field is set.
           */
          @java.lang.Override
          public boolean hasClassId() {
            return instance.hasClassId();
          }
          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @return The classId.
           */
          @java.lang.Override
          public int getClassId() {
            return instance.getClassId();
          }
          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @param value The classId to set.
           * @return This builder for chaining.
           */
          public Builder setClassId(int value) {
            copyOnWrite();
            instance.setClassId(value);
            return this;
          }
          /**
           * <pre>
           * If type = CLASS, FQ name of the referenced class; if type = ENUM, FQ name of the enum class
           * </pre>
           *
           * <code>int32 class_id = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
           * @return This builder for chaining.
           */
          public Builder clearClassId() {
            copyOnWrite();
            instance.clearClassId();
            return this;
          }

          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @return Whether the enumValueId field is set.
           */
          @java.lang.Override
          public boolean hasEnumValueId() {
            return instance.hasEnumValueId();
          }
          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @return The enumValueId.
           */
          @java.lang.Override
          public int getEnumValueId() {
            return instance.getEnumValueId();
          }
          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @param value The enumValueId to set.
           * @return This builder for chaining.
           */
          public Builder setEnumValueId(int value) {
            copyOnWrite();
            instance.setEnumValueId(value);
            return this;
          }
          /**
           * <code>int32 enum_value_id = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
           * @return This builder for chaining.
           */
          public Builder clearEnumValueId() {
            copyOnWrite();
            instance.clearEnumValueId();
            return this;
          }

          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          @java.lang.Override
          public boolean hasAnnotation() {
            return instance.hasAnnotation();
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          @java.lang.Override
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation() {
            return instance.getAnnotation();
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder setAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
            copyOnWrite();
            instance.setAnnotation(value);
            return this;
            }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder setAnnotation(
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
            copyOnWrite();
            instance.setAnnotation(builderForValue.build());
            return this;
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder mergeAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
            copyOnWrite();
            instance.mergeAnnotation(value);
            return this;
          }
          /**
           * <code>.org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
           */
          public Builder clearAnnotation() {  copyOnWrite();
            instance.clearAnnotation();
            return this;
          }

          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          @java.lang.Override
          public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> getArrayElementList() {
            return java.util.Collections.unmodifiableList(
                instance.getArrayElementList());
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          @java.lang.Override
          public int getArrayElementCount() {
            return instance.getArrayElementCount();
          }/**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          @java.lang.Override
          public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getArrayElement(int index) {
            return instance.getArrayElement(index);
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder setArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
            copyOnWrite();
            instance.setArrayElement(index, value);
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder setArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            copyOnWrite();
            instance.setArrayElement(index,
                builderForValue.build());
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
            copyOnWrite();
            instance.addArrayElement(value);
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
            copyOnWrite();
            instance.addArrayElement(index, value);
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            copyOnWrite();
            instance.addArrayElement(builderForValue.build());
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addArrayElement(
              int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
            copyOnWrite();
            instance.addArrayElement(index,
                builderForValue.build());
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder addAllArrayElement(
              java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> values) {
            copyOnWrite();
            instance.addAllArrayElement(values);
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder clearArrayElement() {
            copyOnWrite();
            instance.clearArrayElement();
            return this;
          }
          /**
           * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument.Value array_element = 9;</code>
           */
          public Builder removeArrayElement(int index) {
            copyOnWrite();
            instance.removeArrayElement(index);
            return this;
          }

          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @return Whether the arrayDimensionCount field is set.
           */
          @java.lang.Override
          public boolean hasArrayDimensionCount() {
            return instance.hasArrayDimensionCount();
          }
          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @return The arrayDimensionCount.
           */
          @java.lang.Override
          public int getArrayDimensionCount() {
            return instance.getArrayDimensionCount();
          }
          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @param value The arrayDimensionCount to set.
           * @return This builder for chaining.
           */
          public Builder setArrayDimensionCount(int value) {
            copyOnWrite();
            instance.setArrayDimensionCount(value);
            return this;
          }
          /**
           * <pre>
           * If type = CLASS, the number of dimensions of the array of the class specified in class_id.
           * E.g. if class_id = kotlin/String, this annotation argument value denotes:
           * - String::class, if array_dimension_count = 0
           * - Array&lt;String&gt;::class, if array_dimension_count = 1
           * - Array&lt;Array&lt;String&gt;&gt;::class, if array_dimension_count = 2
           * - etc.
           * Since it's very difficult to represent Kotlin-specific type aspects (nullability, type projections) of array arguments
           * in class literals on JVM, we don't bother to do represent this in our format as well.
           * So, for example, values `Array&lt;Array&lt;in B?&gt;&gt;::class` and `Array&lt;out Array&lt;B&gt;&gt;?&gt;::class` will be represented exactly the same here.
           * </pre>
           *
           * <code>int32 array_dimension_count = 11 [default = 0];</code>
           * @return This builder for chaining.
           */
          public Builder clearArrayDimensionCount() {
            copyOnWrite();
            instance.clearArrayDimensionCount();
            return this;
          }

          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @return Whether the flags field is set.
           */
          @java.lang.Override
          public boolean hasFlags() {
            return instance.hasFlags();
          }
          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @return The flags.
           */
          @java.lang.Override
          public int getFlags() {
            return instance.getFlags();
          }
          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @param value The flags to set.
           * @return This builder for chaining.
           */
          public Builder setFlags(int value) {
            copyOnWrite();
            instance.setFlags(value);
            return this;
          }
          /**
           * <pre>
           *
           * isUnsigned
           * </pre>
           *
           * <code>int32 flags = 10 [default = 0];</code>
           * @return This builder for chaining.
           */
          public Builder clearFlags() {
            copyOnWrite();
            instance.clearFlags();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
        }
        private byte memoizedIsInitialized = 2;
        @java.lang.Override
        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
            java.lang.Object arg0, java.lang.Object arg1) {
          switch (method) {
            case NEW_MUTABLE_INSTANCE: {
              return new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value();
            }
            case NEW_BUILDER: {
              return new Builder();
            }
            case BUILD_MESSAGE_INFO: {
                java.lang.Object[] objects = new java.lang.Object[] {
                  "bitField0_",
                  "type_",
                  org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Type.internalGetVerifier(),
                  "intValue_",
                  "floatValue_",
                  "doubleValue_",
                  "stringValue_",
                  "classId_",
                  "enumValueId_",
                  "annotation_",
                  "arrayElement_",
                  org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.class,
                  "flags_",
                  "arrayDimensionCount_",
                };
                java.lang.String info =
                    "\u0004\u000b\u0000\u0001\u0001\u000b\u000b\u0000\u0001\u0002\u0001\u180c\u0000\u0002" +
                    "\u1010\u0001\u0003\u1001\u0002\u0004\u1000\u0003\u0005\u1004\u0004\u0006\u1004\u0005" +
                    "\u0007\u1004\u0006\b\u1409\u0007\t\u041b\n\u1004\t\u000b\u1004\b";
                return newMessageInfo(DEFAULT_INSTANCE, info, objects);
            }
            // fall through
            case GET_DEFAULT_INSTANCE: {
              return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
              org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value> parser = PARSER;
              if (parser == null) {
                synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.class) {
                  parser = PARSER;
                  if (parser == null) {
                    parser =
                        new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value>(
                            DEFAULT_INSTANCE);
                    PARSER = parser;
                  }
                }
              }
              return parser;
          }
          case GET_MEMOIZED_IS_INITIALIZED: {
            return memoizedIsInitialized;
          }
          case SET_MEMOIZED_IS_INITIALIZED: {
            memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
            return null;
          }
          }
          throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation.Argument.Value)
        private static final org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value DEFAULT_INSTANCE;
        static {
          Value defaultInstance = new Value();
          // New instances are implicitly immutable so no need to make
          // immutable.
          DEFAULT_INSTANCE = defaultInstance;
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
            Value.class, defaultInstance);
        }

        public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static volatile org.jetbrains.kotlin.protobuf.Parser<Value> PARSER;

        public static org.jetbrains.kotlin.protobuf.Parser<Value> parser() {
          return DEFAULT_INSTANCE.getParserForType();
        }
      }

      private int bitField0_;
      public static final int NAME_ID_FIELD_NUMBER = 1;
      private int nameId_;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       */
      private void setNameId(int value) {
        bitField0_ |= 0x00000001;
        nameId_ = value;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       */
      private void clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getValue() {
        return value_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : value_;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       */
      @java.lang.SuppressWarnings("ReturnValueIgnored")
      private void setValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
        value.getClass();  // minimal bytecode null check
        value_ = value;
        bitField0_ |= 0x00000002;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
      private void mergeValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
        value.getClass();  // minimal bytecode null check
        if (value_ != null &&
            value_ != org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance()) {
          value_ =
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.newBuilder(value_).mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
       */
      private void clearValue() {  value_ = null;
        bitField0_ = (bitField0_ & ~0x00000002);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          java.nio.ByteBuffer data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          java.nio.ByteBuffer data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument prototype) {
        return DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation.Argument}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument, Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation.Argument)
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder {
        // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @return Whether the nameId field is set.
         */
        @java.lang.Override
        public boolean hasNameId() {
          return instance.hasNameId();
        }
        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @return The nameId.
         */
        @java.lang.Override
        public int getNameId() {
          return instance.getNameId();
        }
        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @param value The nameId to set.
         * @return This builder for chaining.
         */
        public Builder setNameId(int value) {
          copyOnWrite();
          instance.setNameId(value);
          return this;
        }
        /**
         * <code>int32 name_id = 1 [features = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearNameId() {
          copyOnWrite();
          instance.clearNameId();
          return this;
        }

        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        @java.lang.Override
        public boolean hasValue() {
          return instance.hasValue();
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getValue() {
          return instance.getValue();
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder setValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
          copyOnWrite();
          instance.setValue(value);
          return this;
          }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder setValue(
            org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
          copyOnWrite();
          instance.setValue(builderForValue.build());
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder mergeValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
          copyOnWrite();
          instance.mergeValue(value);
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value value = 2 [features = { ... }</code>
         */
        public Builder clearValue() {  copyOnWrite();
          instance.clearValue();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation.Argument)
      }
      private byte memoizedIsInitialized = 2;
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "nameId_",
                "value_",
              };
              java.lang.String info =
                  "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                  "\u1509\u0001";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> parser = PARSER;
            if (parser == null) {
              synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation.Argument)
      private static final org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument DEFAULT_INSTANCE;
      static {
        Argument defaultInstance = new Argument();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Argument.class, defaultInstance);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile org.jetbrains.kotlin.protobuf.Parser<Argument> PARSER;

      public static org.jetbrains.kotlin.protobuf.Parser<Argument> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @param value The id to set.
     */
    private void setId(int value) {
      bitField0_ |= 0x00000001;
      id_ = value;
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     */
    private void clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = 0;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.ArgumentOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }
    private void ensureArgumentIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> tmp = argument_;
      if (!tmp.isModifiable()) {
        argument_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    private void addAllArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> values) {
      ensureArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, argument_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    private void clearArgument() {
      argument_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
     */
    private void removeArgument(int index) {
      ensureArgumentIsMutable();
      argument_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Annotation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Annotation)
        org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return instance.hasId();
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return instance.getId();
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> getArgumentList() {
        return java.util.Collections.unmodifiableList(
            instance.getArgumentList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      @java.lang.Override
      public int getArgumentCount() {
        return instance.getArgumentCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument getArgument(int index) {
        return instance.getArgument(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
        copyOnWrite();
        instance.setArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder builderForValue) {
        copyOnWrite();
        instance.setArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
        copyOnWrite();
        instance.addArgument(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument value) {
        copyOnWrite();
        instance.addArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument> values) {
        copyOnWrite();
        instance.addAllArgument(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder clearArgument() {
        copyOnWrite();
        instance.clearArgument();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation.Argument argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        copyOnWrite();
        instance.removeArgument(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Annotation)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Annotation();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "id_",
              "argument_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.class,
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0002\u0001\u1504\u0000\u0002" +
                "\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Annotation)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Annotation DEFAULT_INSTANCE;
    static {
      Annotation defaultInstance = new Annotation();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Annotation.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Annotation> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Annotation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TypeOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Type)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Type, Type.Builder> {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    int getArgumentCount();

    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return Whether the nullable field is set.
     */
    boolean hasNullable();
    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return The nullable.
     */
    boolean getNullable();

    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the flexibleTypeCapabilitiesId field is set.
     */
    boolean hasFlexibleTypeCapabilitiesId();
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The flexibleTypeCapabilitiesId.
     */
    int getFlexibleTypeCapabilitiesId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     * @return Whether the flexibleUpperBound field is set.
     */
    boolean hasFlexibleUpperBound();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     * @return The flexibleUpperBound.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getFlexibleUpperBound();

    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the flexibleUpperBoundId field is set.
     */
    boolean hasFlexibleUpperBoundId();
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The flexibleUpperBoundId.
     */
    int getFlexibleUpperBoundId();

    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the className field is set.
     */
    boolean hasClassName();
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The className.
     */
    int getClassName();

    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return Whether the typeParameter field is set.
     */
    boolean hasTypeParameter();
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return The typeParameter.
     */
    int getTypeParameter();

    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the typeParameterName field is set.
     */
    boolean hasTypeParameterName();
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The typeParameterName.
     */
    int getTypeParameterName();

    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the typeAliasName field is set.
     */
    boolean hasTypeAliasName();
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The typeAliasName.
     */
    int getTypeAliasName();

    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     * @return Whether the outerType field is set.
     */
    boolean hasOuterType();
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     * @return The outerType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getOuterType();

    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the outerTypeId field is set.
     */
    boolean hasOuterTypeId();
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The outerTypeId.
     */
    int getOuterTypeId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     * @return Whether the abbreviatedType field is set.
     */
    boolean hasAbbreviatedType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     * @return The abbreviatedType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getAbbreviatedType();

    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the abbreviatedTypeId field is set.
     */
    boolean hasAbbreviatedTypeId();
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The abbreviatedTypeId.
     */
    int getAbbreviatedTypeId();

    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return The flags.
     */
    int getFlags();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Type}
   */
  public  static final class Type extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        Type, Type.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Type)
      TypeOrBuilder {
    private Type() {
      argument_ = emptyProtobufList();
    }
    public interface ArgumentOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Type.Argument)
        org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return Whether the projection field is set.
       */
      boolean hasProjection();
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return The projection.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection getProjection();

      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       * @return The type.
       */
      org.jetbrains.kotlin.metadata.ProtoBuf.Type getType();

      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the typeId field is set.
       */
      boolean hasTypeId();
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The typeId.
       */
      int getTypeId();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Type.Argument}
     */
    public  static final class Argument extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
            Argument, Argument.Builder> implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Type.Argument)
        ArgumentOrBuilder {
      private Argument() {
        projection_ = 2;
      }
      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.Type.Argument.Projection}
       */
      public enum Projection
          implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
        /**
         * <code>IN = 0;</code>
         */
        IN(0),
        /**
         * <code>OUT = 1;</code>
         */
        OUT(1),
        /**
         * <code>INV = 2;</code>
         */
        INV(2),
        /**
         * <code>STAR = 3;</code>
         */
        STAR(3),
        ;

        /**
         * <code>IN = 0;</code>
         */
        public static final int IN_VALUE = 0;
        /**
         * <code>OUT = 1;</code>
         */
        public static final int OUT_VALUE = 1;
        /**
         * <code>INV = 2;</code>
         */
        public static final int INV_VALUE = 2;
        /**
         * <code>STAR = 3;</code>
         */
        public static final int STAR_VALUE = 3;


        @java.lang.Override
        public final int getNumber() {
          return value;
        }

        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Projection valueOf(int value) {
          return forNumber(value);
        }

        public static Projection forNumber(int value) {
          switch (value) {
            case 0: return IN;
            case 1: return OUT;
            case 2: return INV;
            case 3: return STAR;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Projection>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
            Projection> internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Projection>() {
                @java.lang.Override
                public Projection findValueByNumber(int number) {
                  return Projection.forNumber(number);
                }
              };

        public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
            internalGetVerifier() {
          return ProjectionVerifier.INSTANCE;
        }

        private static final class ProjectionVerifier implements 
             org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
                static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new ProjectionVerifier();
                @java.lang.Override
                public boolean isInRange(int number) {
                  return Projection.forNumber(number) != null;
                }
              };

        private final int value;

        private Projection(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Type.Argument.Projection)
      }

      private int bitField0_;
      public static final int PROJECTION_FIELD_NUMBER = 1;
      private int projection_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return Whether the projection field is set.
       */
      @java.lang.Override
      public boolean hasProjection() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @return The projection.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection getProjection() {
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection result = org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.forNumber(projection_);
        return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.INV : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       * @param value The projection to set.
       */
      private void setProjection(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection value) {
        projection_ = value.getNumber();
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
       */
      private void clearProjection() {
        bitField0_ = (bitField0_ & ~0x00000001);
        projection_ = 2;
      }

      public static final int TYPE_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.metadata.ProtoBuf.Type type_;
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       */
      @java.lang.Override
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
        return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
      }
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       */
      @java.lang.SuppressWarnings("ReturnValueIgnored")
      private void setType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        value.getClass();  // minimal bytecode null check
        type_ = value;
        bitField0_ |= 0x00000002;
        }
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
      private void mergeType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        value.getClass();  // minimal bytecode null check
        if (type_ != null &&
            type_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
          type_ =
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(type_).mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * When projection is STAR, no type is written, otherwise type must be specified
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
       */
      private void clearType() {  type_ = null;
        bitField0_ = (bitField0_ & ~0x00000002);
      }

      public static final int TYPE_ID_FIELD_NUMBER = 3;
      private int typeId_;
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the typeId field is set.
       */
      @java.lang.Override
      public boolean hasTypeId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The typeId.
       */
      @java.lang.Override
      public int getTypeId() {
        return typeId_;
      }
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The typeId to set.
       */
      private void setTypeId(int value) {
        bitField0_ |= 0x00000004;
        typeId_ = value;
      }
      /**
       * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       */
      private void clearTypeId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        typeId_ = 0;
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          java.nio.ByteBuffer data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          java.nio.ByteBuffer data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument prototype) {
        return DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.Type.Argument}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument, Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Type.Argument)
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder {
        // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @return Whether the projection field is set.
         */
        @java.lang.Override
        public boolean hasProjection() {
          return instance.hasProjection();
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @return The projection.
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection getProjection() {
          return instance.getProjection();
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @param value The enum numeric value on the wire for projection to set.
         * @return This builder for chaining.
         */
        public Builder setProjection(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection value) {
          copyOnWrite();
          instance.setProjection(value);
          return this;
        }
        /**
         * <code>.org.jetbrains.kotlin.metadata.Type.Argument.Projection projection = 1 [default = INV];</code>
         * @return This builder for chaining.
         */
        public Builder clearProjection() {
          copyOnWrite();
          instance.clearProjection();
          return this;
        }

        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        @java.lang.Override
        public boolean hasType() {
          return instance.hasType();
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
          return instance.getType();
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder setType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
          copyOnWrite();
          instance.setType(value);
          return this;
          }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder setType(
            org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
          copyOnWrite();
          instance.setType(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder mergeType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
          copyOnWrite();
          instance.mergeType(value);
          return this;
        }
        /**
         * <pre>
         * When projection is STAR, no type is written, otherwise type must be specified
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.Type type = 2;</code>
         */
        public Builder clearType() {  copyOnWrite();
          instance.clearType();
          return this;
        }

        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @return Whether the typeId field is set.
         */
        @java.lang.Override
        public boolean hasTypeId() {
          return instance.hasTypeId();
        }
        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @return The typeId.
         */
        @java.lang.Override
        public int getTypeId() {
          return instance.getTypeId();
        }
        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @param value The typeId to set.
         * @return This builder for chaining.
         */
        public Builder setTypeId(int value) {
          copyOnWrite();
          instance.setTypeId(value);
          return this;
        }
        /**
         * <code>int32 type_id = 3 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
         * @return This builder for chaining.
         */
        public Builder clearTypeId() {
          copyOnWrite();
          instance.clearTypeId();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Type.Argument)
      }
      private byte memoizedIsInitialized = 2;
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "projection_",
                org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Projection.internalGetVerifier(),
                "type_",
                "typeId_",
              };
              java.lang.String info =
                  "\u0004\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0001\u0001\u180c\u0000\u0002" +
                  "\u1409\u0001\u0003\u1004\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> parser = PARSER;
            if (parser == null) {
              synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Type.Argument)
      private static final org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument DEFAULT_INSTANCE;
      static {
        Argument defaultInstance = new Argument();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Argument.class, defaultInstance);
      }

      public static org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile org.jetbrains.kotlin.protobuf.Parser<Argument> PARSER;

      public static org.jetbrains.kotlin.protobuf.Parser<Argument> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int ARGUMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type.ArgumentOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }
    private void ensureArgumentIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> tmp = argument_;
      if (!tmp.isModifiable()) {
        argument_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
      value.getClass();  // minimal bytecode null check
      ensureArgumentIsMutable();
      argument_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    private void addAllArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> values) {
      ensureArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, argument_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    private void clearArgument() {
      argument_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
     */
    private void removeArgument(int index) {
      ensureArgumentIsMutable();
      argument_.remove(index);
    }

    public static final int NULLABLE_FIELD_NUMBER = 3;
    private boolean nullable_;
    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return Whether the nullable field is set.
     */
    @java.lang.Override
    public boolean hasNullable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @return The nullable.
     */
    @java.lang.Override
    public boolean getNullable() {
      return nullable_;
    }
    /**
     * <code>bool nullable = 3 [default = false];</code>
     * @param value The nullable to set.
     */
    private void setNullable(boolean value) {
      bitField0_ |= 0x00000001;
      nullable_ = value;
    }
    /**
     * <code>bool nullable = 3 [default = false];</code>
     */
    private void clearNullable() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nullable_ = false;
    }

    public static final int FLEXIBLE_TYPE_CAPABILITIES_ID_FIELD_NUMBER = 4;
    private int flexibleTypeCapabilitiesId_;
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the flexibleTypeCapabilitiesId field is set.
     */
    @java.lang.Override
    public boolean hasFlexibleTypeCapabilitiesId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The flexibleTypeCapabilitiesId.
     */
    @java.lang.Override
    public int getFlexibleTypeCapabilitiesId() {
      return flexibleTypeCapabilitiesId_;
    }
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @param value The flexibleTypeCapabilitiesId to set.
     */
    private void setFlexibleTypeCapabilitiesId(int value) {
      bitField0_ |= 0x00000002;
      flexibleTypeCapabilitiesId_ = value;
    }
    /**
     * <pre>
     * If this field is set, the type is flexible.
     * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
     * </pre>
     *
     * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     */
    private void clearFlexibleTypeCapabilitiesId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      flexibleTypeCapabilitiesId_ = 0;
    }

    public static final int FLEXIBLE_UPPER_BOUND_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type flexibleUpperBound_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    @java.lang.Override
    public boolean hasFlexibleUpperBound() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getFlexibleUpperBound() {
      return flexibleUpperBound_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : flexibleUpperBound_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFlexibleUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      flexibleUpperBound_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeFlexibleUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (flexibleUpperBound_ != null &&
          flexibleUpperBound_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        flexibleUpperBound_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(flexibleUpperBound_).mergeFrom(value).buildPartial();
      } else {
        flexibleUpperBound_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
     */
    private void clearFlexibleUpperBound() {  flexibleUpperBound_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int FLEXIBLE_UPPER_BOUND_ID_FIELD_NUMBER = 8;
    private int flexibleUpperBoundId_;
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the flexibleUpperBoundId field is set.
     */
    @java.lang.Override
    public boolean hasFlexibleUpperBoundId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The flexibleUpperBoundId.
     */
    @java.lang.Override
    public int getFlexibleUpperBoundId() {
      return flexibleUpperBoundId_;
    }
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The flexibleUpperBoundId to set.
     */
    private void setFlexibleUpperBoundId(int value) {
      bitField0_ |= 0x00000008;
      flexibleUpperBoundId_ = value;
    }
    /**
     * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearFlexibleUpperBoundId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      flexibleUpperBoundId_ = 0;
    }

    public static final int CLASS_NAME_FIELD_NUMBER = 6;
    private int className_;
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the className field is set.
     */
    @java.lang.Override
    public boolean hasClassName() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The className.
     */
    @java.lang.Override
    public int getClassName() {
      return className_;
    }
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param value The className to set.
     */
    private void setClassName(int value) {
      bitField0_ |= 0x00000010;
      className_ = value;
    }
    /**
     * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     */
    private void clearClassName() {
      bitField0_ = (bitField0_ & ~0x00000010);
      className_ = 0;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 7;
    private int typeParameter_;
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return Whether the typeParameter field is set.
     */
    @java.lang.Override
    public boolean hasTypeParameter() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @return The typeParameter.
     */
    @java.lang.Override
    public int getTypeParameter() {
      return typeParameter_;
    }
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     * @param value The typeParameter to set.
     */
    private void setTypeParameter(int value) {
      bitField0_ |= 0x00000020;
      typeParameter_ = value;
    }
    /**
     * <pre>
     * id of the type parameter
     * </pre>
     *
     * <code>int32 type_parameter = 7;</code>
     */
    private void clearTypeParameter() {
      bitField0_ = (bitField0_ & ~0x00000020);
      typeParameter_ = 0;
    }

    public static final int TYPE_PARAMETER_NAME_FIELD_NUMBER = 9;
    private int typeParameterName_;
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the typeParameterName field is set.
     */
    @java.lang.Override
    public boolean hasTypeParameterName() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The typeParameterName.
     */
    @java.lang.Override
    public int getTypeParameterName() {
      return typeParameterName_;
    }
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param value The typeParameterName to set.
     */
    private void setTypeParameterName(int value) {
      bitField0_ |= 0x00000040;
      typeParameterName_ = value;
    }
    /**
     * <pre>
     * Name of the type parameter in the immediate owner
     * </pre>
     *
     * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     */
    private void clearTypeParameterName() {
      bitField0_ = (bitField0_ & ~0x00000040);
      typeParameterName_ = 0;
    }

    public static final int TYPE_ALIAS_NAME_FIELD_NUMBER = 12;
    private int typeAliasName_;
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return Whether the typeAliasName field is set.
     */
    @java.lang.Override
    public boolean hasTypeAliasName() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The typeAliasName.
     */
    @java.lang.Override
    public int getTypeAliasName() {
      return typeAliasName_;
    }
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param value The typeAliasName to set.
     */
    private void setTypeAliasName(int value) {
      bitField0_ |= 0x00000080;
      typeAliasName_ = value;
    }
    /**
     * <pre>
     * Note that this may be present only for abbreviated_type
     * Top level types are always fully expanded
     * </pre>
     *
     * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     */
    private void clearTypeAliasName() {
      bitField0_ = (bitField0_ & ~0x00000080);
      typeAliasName_ = 0;
    }

    public static final int OUTER_TYPE_FIELD_NUMBER = 10;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type outerType_;
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     */
    @java.lang.Override
    public boolean hasOuterType() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getOuterType() {
      return outerType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : outerType_;
    }
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setOuterType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      outerType_ = value;
      bitField0_ |= 0x00000100;
      }
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeOuterType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (outerType_ != null &&
          outerType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        outerType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(outerType_).mergeFrom(value).buildPartial();
      } else {
        outerType_ = value;
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <pre>
     * Outer type may be present only if class_name or type_alias_name is present
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
     */
    private void clearOuterType() {  outerType_ = null;
      bitField0_ = (bitField0_ & ~0x00000100);
    }

    public static final int OUTER_TYPE_ID_FIELD_NUMBER = 11;
    private int outerTypeId_;
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the outerTypeId field is set.
     */
    @java.lang.Override
    public boolean hasOuterTypeId() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The outerTypeId.
     */
    @java.lang.Override
    public int getOuterTypeId() {
      return outerTypeId_;
    }
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The outerTypeId to set.
     */
    private void setOuterTypeId(int value) {
      bitField0_ |= 0x00000200;
      outerTypeId_ = value;
    }
    /**
     * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearOuterTypeId() {
      bitField0_ = (bitField0_ & ~0x00000200);
      outerTypeId_ = 0;
    }

    public static final int ABBREVIATED_TYPE_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type abbreviatedType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    @java.lang.Override
    public boolean hasAbbreviatedType() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getAbbreviatedType() {
      return abbreviatedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : abbreviatedType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAbbreviatedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      abbreviatedType_ = value;
      bitField0_ |= 0x00000400;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeAbbreviatedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (abbreviatedType_ != null &&
          abbreviatedType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        abbreviatedType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(abbreviatedType_).mergeFrom(value).buildPartial();
      } else {
        abbreviatedType_ = value;
      }
      bitField0_ |= 0x00000400;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
     */
    private void clearAbbreviatedType() {  abbreviatedType_ = null;
      bitField0_ = (bitField0_ & ~0x00000400);
    }

    public static final int ABBREVIATED_TYPE_ID_FIELD_NUMBER = 14;
    private int abbreviatedTypeId_;
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the abbreviatedTypeId field is set.
     */
    @java.lang.Override
    public boolean hasAbbreviatedTypeId() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The abbreviatedTypeId.
     */
    @java.lang.Override
    public int getAbbreviatedTypeId() {
      return abbreviatedTypeId_;
    }
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The abbreviatedTypeId to set.
     */
    private void setAbbreviatedTypeId(int value) {
      bitField0_ |= 0x00000800;
      abbreviatedTypeId_ = value;
    }
    /**
     * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearAbbreviatedTypeId() {
      bitField0_ = (bitField0_ & ~0x00000800);
      abbreviatedTypeId_ = 0;
    }

    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00001000;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * suspend
     * definitelyNonNull
     * </pre>
     *
     * <code>int32 flags = 1;</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00001000);
      flags_ = 0;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Type prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Type}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Type, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Type)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> getArgumentList() {
        return java.util.Collections.unmodifiableList(
            instance.getArgumentList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      @java.lang.Override
      public int getArgumentCount() {
        return instance.getArgumentCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument getArgument(int index) {
        return instance.getArgument(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
        copyOnWrite();
        instance.setArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder builderForValue) {
        copyOnWrite();
        instance.setArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
        copyOnWrite();
        instance.addArgument(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument value) {
        copyOnWrite();
        instance.addArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.Builder builderForValue) {
        copyOnWrite();
        instance.addArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument> values) {
        copyOnWrite();
        instance.addAllArgument(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder clearArgument() {
        copyOnWrite();
        instance.clearArgument();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type.Argument argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        copyOnWrite();
        instance.removeArgument(index);
        return this;
      }

      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @return Whether the nullable field is set.
       */
      @java.lang.Override
      public boolean hasNullable() {
        return instance.hasNullable();
      }
      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @return The nullable.
       */
      @java.lang.Override
      public boolean getNullable() {
        return instance.getNullable();
      }
      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @param value The nullable to set.
       * @return This builder for chaining.
       */
      public Builder setNullable(boolean value) {
        copyOnWrite();
        instance.setNullable(value);
        return this;
      }
      /**
       * <code>bool nullable = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearNullable() {
        copyOnWrite();
        instance.clearNullable();
        return this;
      }

      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the flexibleTypeCapabilitiesId field is set.
       */
      @java.lang.Override
      public boolean hasFlexibleTypeCapabilitiesId() {
        return instance.hasFlexibleTypeCapabilitiesId();
      }
      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The flexibleTypeCapabilitiesId.
       */
      @java.lang.Override
      public int getFlexibleTypeCapabilitiesId() {
        return instance.getFlexibleTypeCapabilitiesId();
      }
      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The flexibleTypeCapabilitiesId to set.
       * @return This builder for chaining.
       */
      public Builder setFlexibleTypeCapabilitiesId(int value) {
        copyOnWrite();
        instance.setFlexibleTypeCapabilitiesId(value);
        return this;
      }
      /**
       * <pre>
       * If this field is set, the type is flexible.
       * All the other fields and extensions represent its lower bound, and flexible_upper_bound must be set and represents its upper bound.
       * </pre>
       *
       * <code>int32 flexible_type_capabilities_id = 4 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlexibleTypeCapabilitiesId() {
        copyOnWrite();
        instance.clearFlexibleTypeCapabilitiesId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      @java.lang.Override
      public boolean hasFlexibleUpperBound() {
        return instance.hasFlexibleUpperBound();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getFlexibleUpperBound() {
        return instance.getFlexibleUpperBound();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder setFlexibleUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setFlexibleUpperBound(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder setFlexibleUpperBound(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setFlexibleUpperBound(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder mergeFlexibleUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeFlexibleUpperBound(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type flexible_upper_bound = 5;</code>
       */
      public Builder clearFlexibleUpperBound() {  copyOnWrite();
        instance.clearFlexibleUpperBound();
        return this;
      }

      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the flexibleUpperBoundId field is set.
       */
      @java.lang.Override
      public boolean hasFlexibleUpperBoundId() {
        return instance.hasFlexibleUpperBoundId();
      }
      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The flexibleUpperBoundId.
       */
      @java.lang.Override
      public int getFlexibleUpperBoundId() {
        return instance.getFlexibleUpperBoundId();
      }
      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The flexibleUpperBoundId to set.
       * @return This builder for chaining.
       */
      public Builder setFlexibleUpperBoundId(int value) {
        copyOnWrite();
        instance.setFlexibleUpperBoundId(value);
        return this;
      }
      /**
       * <code>int32 flexible_upper_bound_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlexibleUpperBoundId() {
        copyOnWrite();
        instance.clearFlexibleUpperBoundId();
        return this;
      }

      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return Whether the className field is set.
       */
      @java.lang.Override
      public boolean hasClassName() {
        return instance.hasClassName();
      }
      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return The className.
       */
      @java.lang.Override
      public int getClassName() {
        return instance.getClassName();
      }
      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param value The className to set.
       * @return This builder for chaining.
       */
      public Builder setClassName(int value) {
        copyOnWrite();
        instance.setClassName(value);
        return this;
      }
      /**
       * <code>int32 class_name = 6 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearClassName() {
        copyOnWrite();
        instance.clearClassName();
        return this;
      }

      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @return Whether the typeParameter field is set.
       */
      @java.lang.Override
      public boolean hasTypeParameter() {
        return instance.hasTypeParameter();
      }
      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @return The typeParameter.
       */
      @java.lang.Override
      public int getTypeParameter() {
        return instance.getTypeParameter();
      }
      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @param value The typeParameter to set.
       * @return This builder for chaining.
       */
      public Builder setTypeParameter(int value) {
        copyOnWrite();
        instance.setTypeParameter(value);
        return this;
      }
      /**
       * <pre>
       * id of the type parameter
       * </pre>
       *
       * <code>int32 type_parameter = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeParameter() {
        copyOnWrite();
        instance.clearTypeParameter();
        return this;
      }

      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the typeParameterName field is set.
       */
      @java.lang.Override
      public boolean hasTypeParameterName() {
        return instance.hasTypeParameterName();
      }
      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The typeParameterName.
       */
      @java.lang.Override
      public int getTypeParameterName() {
        return instance.getTypeParameterName();
      }
      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The typeParameterName to set.
       * @return This builder for chaining.
       */
      public Builder setTypeParameterName(int value) {
        copyOnWrite();
        instance.setTypeParameterName(value);
        return this;
      }
      /**
       * <pre>
       * Name of the type parameter in the immediate owner
       * </pre>
       *
       * <code>int32 type_parameter_name = 9 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeParameterName() {
        copyOnWrite();
        instance.clearTypeParameterName();
        return this;
      }

      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return Whether the typeAliasName field is set.
       */
      @java.lang.Override
      public boolean hasTypeAliasName() {
        return instance.hasTypeAliasName();
      }
      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return The typeAliasName.
       */
      @java.lang.Override
      public int getTypeAliasName() {
        return instance.getTypeAliasName();
      }
      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param value The typeAliasName to set.
       * @return This builder for chaining.
       */
      public Builder setTypeAliasName(int value) {
        copyOnWrite();
        instance.setTypeAliasName(value);
        return this;
      }
      /**
       * <pre>
       * Note that this may be present only for abbreviated_type
       * Top level types are always fully expanded
       * </pre>
       *
       * <code>int32 type_alias_name = 12 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeAliasName() {
        copyOnWrite();
        instance.clearTypeAliasName();
        return this;
      }

      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      @java.lang.Override
      public boolean hasOuterType() {
        return instance.hasOuterType();
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getOuterType() {
        return instance.getOuterType();
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder setOuterType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setOuterType(value);
        return this;
        }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder setOuterType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setOuterType(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder mergeOuterType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeOuterType(value);
        return this;
      }
      /**
       * <pre>
       * Outer type may be present only if class_name or type_alias_name is present
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type outer_type = 10;</code>
       */
      public Builder clearOuterType() {  copyOnWrite();
        instance.clearOuterType();
        return this;
      }

      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the outerTypeId field is set.
       */
      @java.lang.Override
      public boolean hasOuterTypeId() {
        return instance.hasOuterTypeId();
      }
      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The outerTypeId.
       */
      @java.lang.Override
      public int getOuterTypeId() {
        return instance.getOuterTypeId();
      }
      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The outerTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setOuterTypeId(int value) {
        copyOnWrite();
        instance.setOuterTypeId(value);
        return this;
      }
      /**
       * <code>int32 outer_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearOuterTypeId() {
        copyOnWrite();
        instance.clearOuterTypeId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      @java.lang.Override
      public boolean hasAbbreviatedType() {
        return instance.hasAbbreviatedType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getAbbreviatedType() {
        return instance.getAbbreviatedType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder setAbbreviatedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setAbbreviatedType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder setAbbreviatedType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setAbbreviatedType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder mergeAbbreviatedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeAbbreviatedType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type abbreviated_type = 13;</code>
       */
      public Builder clearAbbreviatedType() {  copyOnWrite();
        instance.clearAbbreviatedType();
        return this;
      }

      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the abbreviatedTypeId field is set.
       */
      @java.lang.Override
      public boolean hasAbbreviatedTypeId() {
        return instance.hasAbbreviatedTypeId();
      }
      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The abbreviatedTypeId.
       */
      @java.lang.Override
      public int getAbbreviatedTypeId() {
        return instance.getAbbreviatedTypeId();
      }
      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The abbreviatedTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setAbbreviatedTypeId(int value) {
        copyOnWrite();
        instance.setAbbreviatedTypeId(value);
        return this;
      }
      /**
       * <code>int32 abbreviated_type_id = 14 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearAbbreviatedTypeId() {
        copyOnWrite();
        instance.clearAbbreviatedTypeId();
        return this;
      }

      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * suspend
       * definitelyNonNull
       * </pre>
       *
       * <code>int32 flags = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Type)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Type();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "flags_",
              "argument_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.Argument.class,
              "nullable_",
              "flexibleTypeCapabilitiesId_",
              "flexibleUpperBound_",
              "className_",
              "typeParameter_",
              "flexibleUpperBoundId_",
              "typeParameterName_",
              "outerType_",
              "outerTypeId_",
              "typeAliasName_",
              "abbreviatedType_",
              "abbreviatedTypeId_",
            };
            java.lang.String info =
                "\u0004\u000e\u0000\u0001\u0001\u000e\u000e\u0000\u0001\u0004\u0001\u1004\f\u0002" +
                "\u041b\u0003\u1007\u0000\u0004\u1004\u0001\u0005\u1409\u0002\u0006\u1004\u0004\u0007" +
                "\u1004\u0005\b\u1004\u0003\t\u1004\u0006\n\u1409\b\u000b\u1004\t\f\u1004\u0007\r" +
                "\u1409\n\u000e\u1004\u000b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Type> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Type.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Type>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Type)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Type DEFAULT_INSTANCE;
    static {
      Type defaultInstance = new Type();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Type.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Type getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Type> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Type> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TypeParameterOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeParameter)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                TypeParameter, TypeParameter.Builder> {

    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    int getId();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return Whether the reified field is set.
     */
    boolean hasReified();
    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return The reified.
     */
    boolean getReified();

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return Whether the variance field is set.
     */
    boolean hasVariance();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return The variance.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance getVariance();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getUpperBoundList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getUpperBound(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    int getUpperBoundCount();

    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the upperBoundId.
     */
    java.util.List<java.lang.Integer> getUpperBoundIdList();
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of upperBoundId.
     */
    int getUpperBoundIdCount();
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The upperBoundId at the given index.
     */
    int getUpperBoundId(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeParameter}
   */
  public  static final class TypeParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        TypeParameter, TypeParameter.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeParameter)
      TypeParameterOrBuilder {
    private TypeParameter() {
      variance_ = 2;
      upperBound_ = emptyProtobufList();
      upperBoundId_ = emptyIntList();
    }
    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.TypeParameter.Variance}
     */
    public enum Variance
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>IN = 0;</code>
       */
      IN(0),
      /**
       * <code>OUT = 1;</code>
       */
      OUT(1),
      /**
       * <code>INV = 2;</code>
       */
      INV(2),
      ;

      /**
       * <code>IN = 0;</code>
       */
      public static final int IN_VALUE = 0;
      /**
       * <code>OUT = 1;</code>
       */
      public static final int OUT_VALUE = 1;
      /**
       * <code>INV = 2;</code>
       */
      public static final int INV_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Variance valueOf(int value) {
        return forNumber(value);
      }

      public static Variance forNumber(int value) {
        switch (value) {
          case 0: return IN;
          case 1: return OUT;
          case 2: return INV;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Variance>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Variance> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Variance>() {
              @java.lang.Override
              public Variance findValueByNumber(int number) {
                return Variance.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return VarianceVerifier.INSTANCE;
      }

      private static final class VarianceVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new VarianceVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Variance.forNumber(number) != null;
              }
            };

      private final int value;

      private Variance(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.TypeParameter.Variance)
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     * @param value The id to set.
     */
    private void setId(int value) {
      bitField0_ |= 0x00000001;
      id_ = value;
    }
    /**
     * <code>int32 id = 1 [features = { ... }</code>
     */
    private void clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = 0;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     */
    private void setName(int value) {
      bitField0_ |= 0x00000002;
      name_ = value;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      name_ = 0;
    }

    public static final int REIFIED_FIELD_NUMBER = 3;
    private boolean reified_;
    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return Whether the reified field is set.
     */
    @java.lang.Override
    public boolean hasReified() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool reified = 3 [default = false];</code>
     * @return The reified.
     */
    @java.lang.Override
    public boolean getReified() {
      return reified_;
    }
    /**
     * <code>bool reified = 3 [default = false];</code>
     * @param value The reified to set.
     */
    private void setReified(boolean value) {
      bitField0_ |= 0x00000004;
      reified_ = value;
    }
    /**
     * <code>bool reified = 3 [default = false];</code>
     */
    private void clearReified() {
      bitField0_ = (bitField0_ & ~0x00000004);
      reified_ = false;
    }

    public static final int VARIANCE_FIELD_NUMBER = 4;
    private int variance_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return Whether the variance field is set.
     */
    @java.lang.Override
    public boolean hasVariance() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @return The variance.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance getVariance() {
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance result = org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.forNumber(variance_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.INV : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     * @param value The variance to set.
     */
    private void setVariance(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance value) {
      variance_ = value.getNumber();
      bitField0_ |= 0x00000008;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
     */
    private void clearVariance() {
      bitField0_ = (bitField0_ & ~0x00000008);
      variance_ = 2;
    }

    public static final int UPPER_BOUND_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> upperBound_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getUpperBoundList() {
      return upperBound_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getUpperBoundOrBuilderList() {
      return upperBound_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public int getUpperBoundCount() {
      return upperBound_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUpperBound(int index) {
      return upperBound_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getUpperBoundOrBuilder(
        int index) {
      return upperBound_.get(index);
    }
    private void ensureUpperBoundIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> tmp = upperBound_;
      if (!tmp.isModifiable()) {
        upperBound_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setUpperBound(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureUpperBoundIsMutable();
      upperBound_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureUpperBoundIsMutable();
      upperBound_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addUpperBound(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureUpperBoundIsMutable();
      upperBound_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    private void addAllUpperBound(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
      ensureUpperBoundIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, upperBound_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    private void clearUpperBound() {
      upperBound_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
     */
    private void removeUpperBound(int index) {
      ensureUpperBoundIsMutable();
      upperBound_.remove(index);
    }

    public static final int UPPER_BOUND_ID_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.IntList upperBoundId_;
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the upperBoundId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getUpperBoundIdList() {
      return upperBoundId_;
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of upperBoundId.
     */
    @java.lang.Override
    public int getUpperBoundIdCount() {
      return upperBoundId_.size();
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The upperBoundId at the given index.
     */
    @java.lang.Override
    public int getUpperBoundId(int index) {
      return upperBoundId_.getInt(index);
    }
    private int upperBoundIdMemoizedSerializedSize = -1;
    private void ensureUpperBoundIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = upperBoundId_;
      if (!tmp.isModifiable()) {
        upperBoundId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index to set the value at.
     * @param value The upperBoundId to set.
     */
    private void setUpperBoundId(
        int index, int value) {
      ensureUpperBoundIdIsMutable();
      upperBoundId_.setInt(index, value);
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The upperBoundId to add.
     */
    private void addUpperBoundId(int value) {
      ensureUpperBoundIdIsMutable();
      upperBoundId_.addInt(value);
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param values The upperBoundId to add.
     */
    private void addAllUpperBoundId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureUpperBoundIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, upperBoundId_);
    }
    /**
     * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearUpperBoundId() {
      upperBoundId_ = emptyIntList();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeParameter)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return instance.hasId();
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return instance.getId();
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <code>int32 id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }

      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return instance.getName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }

      /**
       * <code>bool reified = 3 [default = false];</code>
       * @return Whether the reified field is set.
       */
      @java.lang.Override
      public boolean hasReified() {
        return instance.hasReified();
      }
      /**
       * <code>bool reified = 3 [default = false];</code>
       * @return The reified.
       */
      @java.lang.Override
      public boolean getReified() {
        return instance.getReified();
      }
      /**
       * <code>bool reified = 3 [default = false];</code>
       * @param value The reified to set.
       * @return This builder for chaining.
       */
      public Builder setReified(boolean value) {
        copyOnWrite();
        instance.setReified(value);
        return this;
      }
      /**
       * <code>bool reified = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearReified() {
        copyOnWrite();
        instance.clearReified();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @return Whether the variance field is set.
       */
      @java.lang.Override
      public boolean hasVariance() {
        return instance.hasVariance();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @return The variance.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance getVariance() {
        return instance.getVariance();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @param value The enum numeric value on the wire for variance to set.
       * @return This builder for chaining.
       */
      public Builder setVariance(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance value) {
        copyOnWrite();
        instance.setVariance(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeParameter.Variance variance = 4 [default = INV];</code>
       * @return This builder for chaining.
       */
      public Builder clearVariance() {
        copyOnWrite();
        instance.clearVariance();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getUpperBoundList() {
        return java.util.Collections.unmodifiableList(
            instance.getUpperBoundList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      @java.lang.Override
      public int getUpperBoundCount() {
        return instance.getUpperBoundCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUpperBound(int index) {
        return instance.getUpperBound(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder setUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setUpperBound(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder setUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setUpperBound(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addUpperBound(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addUpperBound(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addUpperBound(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addUpperBound(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addUpperBound(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder addAllUpperBound(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        copyOnWrite();
        instance.addAllUpperBound(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder clearUpperBound() {
        copyOnWrite();
        instance.clearUpperBound();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type upper_bound = 5;</code>
       */
      public Builder removeUpperBound(int index) {
        copyOnWrite();
        instance.removeUpperBound(index);
        return this;
      }

      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the upperBoundId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getUpperBoundIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getUpperBoundIdList());
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of upperBoundId.
       */
      @java.lang.Override
      public int getUpperBoundIdCount() {
        return instance.getUpperBoundIdCount();
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The upperBoundId at the given index.
       */
      @java.lang.Override
      public int getUpperBoundId(int index) {
        return instance.getUpperBoundId(index);
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The upperBoundId to set.
       * @return This builder for chaining.
       */
      public Builder setUpperBoundId(
          int index, int value) {
        copyOnWrite();
        instance.setUpperBoundId(index, value);
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The upperBoundId to add.
       * @return This builder for chaining.
       */
      public Builder addUpperBoundId(int value) {
        copyOnWrite();
        instance.addUpperBoundId(value);
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The upperBoundId to add.
       * @return This builder for chaining.
       */
      public Builder addAllUpperBoundId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllUpperBoundId(values);
        return this;
      }
      /**
       * <code>repeated int32 upper_bound_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearUpperBoundId() {
        copyOnWrite();
        instance.clearUpperBoundId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeParameter)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "id_",
              "name_",
              "reified_",
              "variance_",
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Variance.internalGetVerifier(),
              "upperBound_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.class,
              "upperBoundId_",
            };
            java.lang.String info =
                "\u0004\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0002\u0003\u0001\u1504\u0000\u0002" +
                "\u1504\u0001\u0003\u1007\u0002\u0004\u180c\u0003\u0005\u041b\u0006\'";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeParameter)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter DEFAULT_INSTANCE;
    static {
      TypeParameter defaultInstance = new TypeParameter();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TypeParameter.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<TypeParameter> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<TypeParameter> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ClassOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Class)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Class, Class.Builder> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return Whether the fqName field is set.
     */
    boolean hasFqName();
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return The fqName.
     */
    int getFqName();

    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the companionObjectName field is set.
     */
    boolean hasCompanionObjectName();
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The companionObjectName.
     */
    int getCompanionObjectName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    int getTypeParameterCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getSupertypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getSupertype(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    int getSupertypeCount();

    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the supertypeId.
     */
    java.util.List<java.lang.Integer> getSupertypeIdList();
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of supertypeId.
     */
    int getSupertypeIdCount();
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The supertypeId at the given index.
     */
    int getSupertypeId(int index);

    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return A list containing the nestedClassName.
     */
    java.util.List<java.lang.Integer> getNestedClassNameList();
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The count of nestedClassName.
     */
    int getNestedClassNameCount();
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The nestedClassName at the given index.
     */
    int getNestedClassName(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getContextReceiverTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    int getContextReceiverTypeCount();

    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    java.util.List<java.lang.Integer> getContextReceiverTypeIdList();
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    int getContextReceiverTypeIdCount();
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    int getContextReceiverTypeId(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> 
        getConstructorList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getConstructor(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    int getConstructorCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> 
        getFunctionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    int getFunctionCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> 
        getPropertyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    int getPropertyCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> 
        getTypeAliasList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    int getTypeAliasCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> 
        getEnumEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getEnumEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    int getEnumEntryCount();

    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return A list containing the sealedSubclassFqName.
     */
    java.util.List<java.lang.Integer> getSealedSubclassFqNameList();
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The count of sealedSubclassFqName.
     */
    int getSealedSubclassFqNameCount();
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The sealedSubclassFqName at the given index.
     */
    int getSealedSubclassFqName(int index);

    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingPropertyName field is set.
     */
    boolean hasInlineClassUnderlyingPropertyName();
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingPropertyName.
     */
    int getInlineClassUnderlyingPropertyName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     * @return Whether the inlineClassUnderlyingType field is set.
     */
    boolean hasInlineClassUnderlyingType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     * @return The inlineClassUnderlyingType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getInlineClassUnderlyingType();

    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingTypeId field is set.
     */
    boolean hasInlineClassUnderlyingTypeId();
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingTypeId.
     */
    int getInlineClassUnderlyingTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    int getAnnotationCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    boolean hasTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return Whether the versionRequirementTable field is set.
     */
    boolean hasVersionRequirementTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return The versionRequirementTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    int getCompilerPluginDataCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Class}
   */
  public  static final class Class extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        Class, Class.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Class)
      ClassOrBuilder {
    private Class() {
      flags_ = 6;
      typeParameter_ = emptyProtobufList();
      supertype_ = emptyProtobufList();
      supertypeId_ = emptyIntList();
      nestedClassName_ = emptyIntList();
      contextReceiverType_ = emptyProtobufList();
      contextReceiverTypeId_ = emptyIntList();
      constructor_ = emptyProtobufList();
      function_ = emptyProtobufList();
      property_ = emptyProtobufList();
      typeAlias_ = emptyProtobufList();
      enumEntry_ = emptyProtobufList();
      sealedSubclassFqName_ = emptyIntList();
      annotation_ = emptyProtobufList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = emptyProtobufList();
    }
    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Class.Kind}
     */
    public enum Kind
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * 3 bits
       * </pre>
       *
       * <code>CLASS = 0;</code>
       */
      CLASS(0),
      /**
       * <code>INTERFACE = 1;</code>
       */
      INTERFACE(1),
      /**
       * <code>ENUM_CLASS = 2;</code>
       */
      ENUM_CLASS(2),
      /**
       * <code>ENUM_ENTRY = 3;</code>
       */
      ENUM_ENTRY(3),
      /**
       * <code>ANNOTATION_CLASS = 4;</code>
       */
      ANNOTATION_CLASS(4),
      /**
       * <code>OBJECT = 5;</code>
       */
      OBJECT(5),
      /**
       * <code>COMPANION_OBJECT = 6;</code>
       */
      COMPANION_OBJECT(6),
      ;

      /**
       * <pre>
       * 3 bits
       * </pre>
       *
       * <code>CLASS = 0;</code>
       */
      public static final int CLASS_VALUE = 0;
      /**
       * <code>INTERFACE = 1;</code>
       */
      public static final int INTERFACE_VALUE = 1;
      /**
       * <code>ENUM_CLASS = 2;</code>
       */
      public static final int ENUM_CLASS_VALUE = 2;
      /**
       * <code>ENUM_ENTRY = 3;</code>
       */
      public static final int ENUM_ENTRY_VALUE = 3;
      /**
       * <code>ANNOTATION_CLASS = 4;</code>
       */
      public static final int ANNOTATION_CLASS_VALUE = 4;
      /**
       * <code>OBJECT = 5;</code>
       */
      public static final int OBJECT_VALUE = 5;
      /**
       * <code>COMPANION_OBJECT = 6;</code>
       */
      public static final int COMPANION_OBJECT_VALUE = 6;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Kind valueOf(int value) {
        return forNumber(value);
      }

      public static Kind forNumber(int value) {
        switch (value) {
          case 0: return CLASS;
          case 1: return INTERFACE;
          case 2: return ENUM_CLASS;
          case 3: return ENUM_ENTRY;
          case 4: return ANNOTATION_CLASS;
          case 5: return OBJECT;
          case 6: return COMPANION_OBJECT;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Kind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
              @java.lang.Override
              public Kind findValueByNumber(int number) {
                return Kind.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return KindVerifier.INSTANCE;
      }

      private static final class KindVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new KindVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Kind.forNumber(number) != null;
              }
            };

      private final int value;

      private Kind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Class.Kind)
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00000001;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * ClassKind
     * isInner
     * isData
     * isExternal
     * isExpect
     * isInline
     * isFun
     * hasEnumEntries
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000001);
      flags_ = 6;
    }

    public static final int FQ_NAME_FIELD_NUMBER = 3;
    private int fqName_;
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return Whether the fqName field is set.
     */
    @java.lang.Override
    public boolean hasFqName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @return The fqName.
     */
    @java.lang.Override
    public int getFqName() {
      return fqName_;
    }
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     * @param value The fqName to set.
     */
    private void setFqName(int value) {
      bitField0_ |= 0x00000002;
      fqName_ = value;
    }
    /**
     * <code>int32 fq_name = 3 [features = { ... }</code>
     */
    private void clearFqName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      fqName_ = 0;
    }

    public static final int COMPANION_OBJECT_NAME_FIELD_NUMBER = 4;
    private int companionObjectName_;
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the companionObjectName field is set.
     */
    @java.lang.Override
    public boolean hasCompanionObjectName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The companionObjectName.
     */
    @java.lang.Override
    public int getCompanionObjectName() {
      return companionObjectName_;
    }
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param value The companionObjectName to set.
     */
    private void setCompanionObjectName(int value) {
      bitField0_ |= 0x00000004;
      companionObjectName_ = value;
    }
    /**
     * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     */
    private void clearCompanionObjectName() {
      bitField0_ = (bitField0_ & ~0x00000004);
      companionObjectName_ = 0;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }
    private void ensureTypeParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> tmp = typeParameter_;
      if (!tmp.isModifiable()) {
        typeParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    private void addAllTypeParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
      ensureTypeParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, typeParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    private void clearTypeParameter() {
      typeParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
     */
    private void removeTypeParameter(int index) {
      ensureTypeParameterIsMutable();
      typeParameter_.remove(index);
    }

    public static final int SUPERTYPE_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> supertype_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getSupertypeList() {
      return supertype_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getSupertypeOrBuilderList() {
      return supertype_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public int getSupertypeCount() {
      return supertype_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getSupertype(int index) {
      return supertype_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getSupertypeOrBuilder(
        int index) {
      return supertype_.get(index);
    }
    private void ensureSupertypeIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> tmp = supertype_;
      if (!tmp.isModifiable()) {
        supertype_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSupertype(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureSupertypeIsMutable();
      supertype_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addSupertype(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureSupertypeIsMutable();
      supertype_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addSupertype(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureSupertypeIsMutable();
      supertype_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    private void addAllSupertype(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
      ensureSupertypeIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, supertype_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    private void clearSupertype() {
      supertype_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
     */
    private void removeSupertype(int index) {
      ensureSupertypeIsMutable();
      supertype_.remove(index);
    }

    public static final int SUPERTYPE_ID_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.IntList supertypeId_;
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the supertypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getSupertypeIdList() {
      return supertypeId_;
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of supertypeId.
     */
    @java.lang.Override
    public int getSupertypeIdCount() {
      return supertypeId_.size();
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The supertypeId at the given index.
     */
    @java.lang.Override
    public int getSupertypeId(int index) {
      return supertypeId_.getInt(index);
    }
    private int supertypeIdMemoizedSerializedSize = -1;
    private void ensureSupertypeIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = supertypeId_;
      if (!tmp.isModifiable()) {
        supertypeId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index to set the value at.
     * @param value The supertypeId to set.
     */
    private void setSupertypeId(
        int index, int value) {
      ensureSupertypeIdIsMutable();
      supertypeId_.setInt(index, value);
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The supertypeId to add.
     */
    private void addSupertypeId(int value) {
      ensureSupertypeIdIsMutable();
      supertypeId_.addInt(value);
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param values The supertypeId to add.
     */
    private void addAllSupertypeId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureSupertypeIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, supertypeId_);
    }
    /**
     * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearSupertypeId() {
      supertypeId_ = emptyIntList();
    }

    public static final int NESTED_CLASS_NAME_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.protobuf.Internal.IntList nestedClassName_;
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return A list containing the nestedClassName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getNestedClassNameList() {
      return nestedClassName_;
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The count of nestedClassName.
     */
    @java.lang.Override
    public int getNestedClassNameCount() {
      return nestedClassName_.size();
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The nestedClassName at the given index.
     */
    @java.lang.Override
    public int getNestedClassName(int index) {
      return nestedClassName_.getInt(index);
    }
    private int nestedClassNameMemoizedSerializedSize = -1;
    private void ensureNestedClassNameIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = nestedClassName_;
      if (!tmp.isModifiable()) {
        nestedClassName_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param index The index to set the value at.
     * @param value The nestedClassName to set.
     */
    private void setNestedClassName(
        int index, int value) {
      ensureNestedClassNameIsMutable();
      nestedClassName_.setInt(index, value);
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param value The nestedClassName to add.
     */
    private void addNestedClassName(int value) {
      ensureNestedClassNameIsMutable();
      nestedClassName_.addInt(value);
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param values The nestedClassName to add.
     */
    private void addAllNestedClassName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureNestedClassNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, nestedClassName_);
    }
    /**
     * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     */
    private void clearNestedClassName() {
      nestedClassName_ = emptyIntList();
    }

    public static final int CONTEXT_RECEIVER_TYPE_FIELD_NUMBER = 20;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public int getContextReceiverTypeCount() {
      return contextReceiverType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
      return contextReceiverType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index) {
      return contextReceiverType_.get(index);
    }
    private void ensureContextReceiverTypeIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> tmp = contextReceiverType_;
      if (!tmp.isModifiable()) {
        contextReceiverType_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setContextReceiverType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextReceiverType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    private void addAllContextReceiverType(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
      ensureContextReceiverTypeIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextReceiverType_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    private void clearContextReceiverType() {
      contextReceiverType_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
     */
    private void removeContextReceiverType(int index) {
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.remove(index);
    }

    public static final int CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER = 21;
    private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_;
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getContextReceiverTypeIdList() {
      return contextReceiverTypeId_;
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    @java.lang.Override
    public int getContextReceiverTypeIdCount() {
      return contextReceiverTypeId_.size();
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    @java.lang.Override
    public int getContextReceiverTypeId(int index) {
      return contextReceiverTypeId_.getInt(index);
    }
    private int contextReceiverTypeIdMemoizedSerializedSize = -1;
    private void ensureContextReceiverTypeIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = contextReceiverTypeId_;
      if (!tmp.isModifiable()) {
        contextReceiverTypeId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index to set the value at.
     * @param value The contextReceiverTypeId to set.
     */
    private void setContextReceiverTypeId(
        int index, int value) {
      ensureContextReceiverTypeIdIsMutable();
      contextReceiverTypeId_.setInt(index, value);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The contextReceiverTypeId to add.
     */
    private void addContextReceiverTypeId(int value) {
      ensureContextReceiverTypeIdIsMutable();
      contextReceiverTypeId_.addInt(value);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param values The contextReceiverTypeId to add.
     */
    private void addAllContextReceiverTypeId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureContextReceiverTypeIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextReceiverTypeId_);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearContextReceiverTypeId() {
      contextReceiverTypeId_ = emptyIntList();
    }

    public static final int CONSTRUCTOR_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> constructor_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> getConstructorList() {
      return constructor_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder> 
        getConstructorOrBuilderList() {
      return constructor_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public int getConstructorCount() {
      return constructor_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getConstructor(int index) {
      return constructor_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder getConstructorOrBuilder(
        int index) {
      return constructor_.get(index);
    }
    private void ensureConstructorIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> tmp = constructor_;
      if (!tmp.isModifiable()) {
        constructor_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setConstructor(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
      value.getClass();  // minimal bytecode null check
      ensureConstructorIsMutable();
      constructor_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addConstructor(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
      value.getClass();  // minimal bytecode null check
      ensureConstructorIsMutable();
      constructor_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addConstructor(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
      value.getClass();  // minimal bytecode null check
      ensureConstructorIsMutable();
      constructor_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    private void addAllConstructor(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> values) {
      ensureConstructorIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, constructor_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    private void clearConstructor() {
      constructor_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
     */
    private void removeConstructor(int index) {
      ensureConstructorIsMutable();
      constructor_.remove(index);
    }

    public static final int FUNCTION_FIELD_NUMBER = 9;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Function> function_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public int getFunctionCount() {
      return function_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
      return function_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index) {
      return function_.get(index);
    }
    private void ensureFunctionIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Function> tmp = function_;
      if (!tmp.isModifiable()) {
        function_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFunction(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureFunctionIsMutable();
      function_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addFunction(org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureFunctionIsMutable();
      function_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addFunction(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureFunctionIsMutable();
      function_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    private void addAllFunction(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Function> values) {
      ensureFunctionIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, function_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    private void clearFunction() {
      function_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
     */
    private void removeFunction(int index) {
      ensureFunctionIsMutable();
      function_.remove(index);
    }

    public static final int PROPERTY_FIELD_NUMBER = 10;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Property> property_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public int getPropertyCount() {
      return property_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
      return property_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index) {
      return property_.get(index);
    }
    private void ensurePropertyIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Property> tmp = property_;
      if (!tmp.isModifiable()) {
        property_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setProperty(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
      value.getClass();  // minimal bytecode null check
      ensurePropertyIsMutable();
      property_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addProperty(org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
      value.getClass();  // minimal bytecode null check
      ensurePropertyIsMutable();
      property_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addProperty(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
      value.getClass();  // minimal bytecode null check
      ensurePropertyIsMutable();
      property_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    private void addAllProperty(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Property> values) {
      ensurePropertyIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, property_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    private void clearProperty() {
      property_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
     */
    private void removeProperty(int index) {
      ensurePropertyIsMutable();
      property_.remove(index);
    }

    public static final int TYPE_ALIAS_FIELD_NUMBER = 11;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> typeAlias_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public int getTypeAliasCount() {
      return typeAlias_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
      return typeAlias_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index) {
      return typeAlias_.get(index);
    }
    private void ensureTypeAliasIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> tmp = typeAlias_;
      if (!tmp.isModifiable()) {
        typeAlias_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeAlias(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeAliasIsMutable();
      typeAlias_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeAlias(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeAliasIsMutable();
      typeAlias_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeAlias(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeAliasIsMutable();
      typeAlias_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    private void addAllTypeAlias(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> values) {
      ensureTypeAliasIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, typeAlias_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    private void clearTypeAlias() {
      typeAlias_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
     */
    private void removeTypeAlias(int index) {
      ensureTypeAliasIsMutable();
      typeAlias_.remove(index);
    }

    public static final int ENUM_ENTRY_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> enumEntry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> getEnumEntryList() {
      return enumEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder> 
        getEnumEntryOrBuilderList() {
      return enumEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public int getEnumEntryCount() {
      return enumEntry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getEnumEntry(int index) {
      return enumEntry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder getEnumEntryOrBuilder(
        int index) {
      return enumEntry_.get(index);
    }
    private void ensureEnumEntryIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> tmp = enumEntry_;
      if (!tmp.isModifiable()) {
        enumEntry_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEnumEntry(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEnumEntryIsMutable();
      enumEntry_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEnumEntry(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEnumEntryIsMutable();
      enumEntry_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEnumEntry(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
      value.getClass();  // minimal bytecode null check
      ensureEnumEntryIsMutable();
      enumEntry_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    private void addAllEnumEntry(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> values) {
      ensureEnumEntryIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, enumEntry_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    private void clearEnumEntry() {
      enumEntry_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
     */
    private void removeEnumEntry(int index) {
      ensureEnumEntryIsMutable();
      enumEntry_.remove(index);
    }

    public static final int SEALED_SUBCLASS_FQ_NAME_FIELD_NUMBER = 16;
    private org.jetbrains.kotlin.protobuf.Internal.IntList sealedSubclassFqName_;
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return A list containing the sealedSubclassFqName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getSealedSubclassFqNameList() {
      return sealedSubclassFqName_;
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @return The count of sealedSubclassFqName.
     */
    @java.lang.Override
    public int getSealedSubclassFqNameCount() {
      return sealedSubclassFqName_.size();
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The sealedSubclassFqName at the given index.
     */
    @java.lang.Override
    public int getSealedSubclassFqName(int index) {
      return sealedSubclassFqName_.getInt(index);
    }
    private int sealedSubclassFqNameMemoizedSerializedSize = -1;
    private void ensureSealedSubclassFqNameIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = sealedSubclassFqName_;
      if (!tmp.isModifiable()) {
        sealedSubclassFqName_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param index The index to set the value at.
     * @param value The sealedSubclassFqName to set.
     */
    private void setSealedSubclassFqName(
        int index, int value) {
      ensureSealedSubclassFqNameIsMutable();
      sealedSubclassFqName_.setInt(index, value);
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param value The sealedSubclassFqName to add.
     */
    private void addSealedSubclassFqName(int value) {
      ensureSealedSubclassFqNameIsMutable();
      sealedSubclassFqName_.addInt(value);
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     * @param values The sealedSubclassFqName to add.
     */
    private void addAllSealedSubclassFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureSealedSubclassFqNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, sealedSubclassFqName_);
    }
    /**
     * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
     */
    private void clearSealedSubclassFqName() {
      sealedSubclassFqName_ = emptyIntList();
    }

    public static final int INLINE_CLASS_UNDERLYING_PROPERTY_NAME_FIELD_NUMBER = 17;
    private int inlineClassUnderlyingPropertyName_;
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingPropertyName field is set.
     */
    @java.lang.Override
    public boolean hasInlineClassUnderlyingPropertyName() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingPropertyName.
     */
    @java.lang.Override
    public int getInlineClassUnderlyingPropertyName() {
      return inlineClassUnderlyingPropertyName_;
    }
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param value The inlineClassUnderlyingPropertyName to set.
     */
    private void setInlineClassUnderlyingPropertyName(int value) {
      bitField0_ |= 0x00000008;
      inlineClassUnderlyingPropertyName_ = value;
    }
    /**
     * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     */
    private void clearInlineClassUnderlyingPropertyName() {
      bitField0_ = (bitField0_ & ~0x00000008);
      inlineClassUnderlyingPropertyName_ = 0;
    }

    public static final int INLINE_CLASS_UNDERLYING_TYPE_FIELD_NUMBER = 18;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type inlineClassUnderlyingType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     */
    @java.lang.Override
    public boolean hasInlineClassUnderlyingType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getInlineClassUnderlyingType() {
      return inlineClassUnderlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : inlineClassUnderlyingType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setInlineClassUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      inlineClassUnderlyingType_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeInlineClassUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (inlineClassUnderlyingType_ != null &&
          inlineClassUnderlyingType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        inlineClassUnderlyingType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(inlineClassUnderlyingType_).mergeFrom(value).buildPartial();
      } else {
        inlineClassUnderlyingType_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
     */
    private void clearInlineClassUnderlyingType() {  inlineClassUnderlyingType_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int INLINE_CLASS_UNDERLYING_TYPE_ID_FIELD_NUMBER = 19;
    private int inlineClassUnderlyingTypeId_;
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the inlineClassUnderlyingTypeId field is set.
     */
    @java.lang.Override
    public boolean hasInlineClassUnderlyingTypeId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The inlineClassUnderlyingTypeId.
     */
    @java.lang.Override
    public int getInlineClassUnderlyingTypeId() {
      return inlineClassUnderlyingTypeId_;
    }
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The inlineClassUnderlyingTypeId to set.
     */
    private void setInlineClassUnderlyingTypeId(int value) {
      bitField0_ |= 0x00000020;
      inlineClassUnderlyingTypeId_ = value;
    }
    /**
     * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearInlineClassUnderlyingTypeId() {
      bitField0_ = (bitField0_ & ~0x00000020);
      inlineClassUnderlyingTypeId_ = 0;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 25;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
      value.getClass();  // minimal bytecode null check
      typeTable_ = value;
      bitField0_ |= 0x00000040;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
      value.getClass();  // minimal bytecode null check
      if (typeTable_ != null &&
          typeTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance()) {
        typeTable_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
      } else {
        typeTable_ = value;
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    private void clearTypeTable() {  typeTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000040);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_;
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    @java.lang.Override
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    @java.lang.Override
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }
    private void ensureVersionRequirementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = versionRequirement_;
      if (!tmp.isModifiable()) {
        versionRequirement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The versionRequirement to set.
     */
    private void setVersionRequirement(
        int index, int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.setInt(index, value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param value The versionRequirement to add.
     */
    private void addVersionRequirement(int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.addInt(value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param values The versionRequirement to add.
     */
    private void addAllVersionRequirement(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureVersionRequirementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, versionRequirement_);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     */
    private void clearVersionRequirement() {
      versionRequirement_ = emptyIntList();
    }

    public static final int VERSION_REQUIREMENT_TABLE_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable versionRequirementTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.Override
    public boolean hasVersionRequirementTable() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
      return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
      value.getClass();  // minimal bytecode null check
      versionRequirementTable_ = value;
      bitField0_ |= 0x00000080;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
      value.getClass();  // minimal bytecode null check
      if (versionRequirementTable_ != null &&
          versionRequirementTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance()) {
        versionRequirementTable_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.newBuilder(versionRequirementTable_).mergeFrom(value).buildPartial();
      } else {
        versionRequirementTable_ = value;
      }
      bitField0_ |= 0x00000080;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    private void clearVersionRequirementTable() {  versionRequirementTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000080);
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 33;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }
    private void ensureCompilerPluginDataIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> tmp = compilerPluginData_;
      if (!tmp.isModifiable()) {
        compilerPluginData_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    private void addAllCompilerPluginData(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
      ensureCompilerPluginDataIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, compilerPluginData_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    private void clearCompilerPluginData() {
      compilerPluginData_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    private void removeCompilerPluginData(int index) {
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Class prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Class}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Class, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Class)
        org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Class.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * ClassKind
       * isInner
       * isData
       * isExternal
       * isExpect
       * isInline
       * isFun
       * hasEnumEntries
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @return Whether the fqName field is set.
       */
      @java.lang.Override
      public boolean hasFqName() {
        return instance.hasFqName();
      }
      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @return The fqName.
       */
      @java.lang.Override
      public int getFqName() {
        return instance.getFqName();
      }
      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @param value The fqName to set.
       * @return This builder for chaining.
       */
      public Builder setFqName(int value) {
        copyOnWrite();
        instance.setFqName(value);
        return this;
      }
      /**
       * <code>int32 fq_name = 3 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFqName() {
        copyOnWrite();
        instance.clearFqName();
        return this;
      }

      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the companionObjectName field is set.
       */
      @java.lang.Override
      public boolean hasCompanionObjectName() {
        return instance.hasCompanionObjectName();
      }
      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The companionObjectName.
       */
      @java.lang.Override
      public int getCompanionObjectName() {
        return instance.getCompanionObjectName();
      }
      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The companionObjectName to set.
       * @return This builder for chaining.
       */
      public Builder setCompanionObjectName(int value) {
        copyOnWrite();
        instance.setCompanionObjectName(value);
        return this;
      }
      /**
       * <code>int32 companion_object_name = 4 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearCompanionObjectName() {
        copyOnWrite();
        instance.clearCompanionObjectName();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      @java.lang.Override
      public int getTypeParameterCount() {
        return instance.getTypeParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        return instance.getTypeParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.setTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        copyOnWrite();
        instance.addAllTypeParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder clearTypeParameter() {
        copyOnWrite();
        instance.clearTypeParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 5;</code>
       */
      public Builder removeTypeParameter(int index) {
        copyOnWrite();
        instance.removeTypeParameter(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getSupertypeList() {
        return java.util.Collections.unmodifiableList(
            instance.getSupertypeList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      @java.lang.Override
      public int getSupertypeCount() {
        return instance.getSupertypeCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getSupertype(int index) {
        return instance.getSupertype(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder setSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setSupertype(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder setSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setSupertype(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addSupertype(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addSupertype(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addSupertype(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addSupertype(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addSupertype(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder addAllSupertype(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        copyOnWrite();
        instance.addAllSupertype(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder clearSupertype() {
        copyOnWrite();
        instance.clearSupertype();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type supertype = 6;</code>
       */
      public Builder removeSupertype(int index) {
        copyOnWrite();
        instance.removeSupertype(index);
        return this;
      }

      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the supertypeId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getSupertypeIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getSupertypeIdList());
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of supertypeId.
       */
      @java.lang.Override
      public int getSupertypeIdCount() {
        return instance.getSupertypeIdCount();
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The supertypeId at the given index.
       */
      @java.lang.Override
      public int getSupertypeId(int index) {
        return instance.getSupertypeId(index);
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The supertypeId to set.
       * @return This builder for chaining.
       */
      public Builder setSupertypeId(
          int index, int value) {
        copyOnWrite();
        instance.setSupertypeId(index, value);
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The supertypeId to add.
       * @return This builder for chaining.
       */
      public Builder addSupertypeId(int value) {
        copyOnWrite();
        instance.addSupertypeId(value);
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The supertypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllSupertypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllSupertypeId(values);
        return this;
      }
      /**
       * <code>repeated int32 supertype_id = 2 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearSupertypeId() {
        copyOnWrite();
        instance.clearSupertypeId();
        return this;
      }

      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return A list containing the nestedClassName.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getNestedClassNameList() {
        return java.util.Collections.unmodifiableList(
            instance.getNestedClassNameList());
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The count of nestedClassName.
       */
      @java.lang.Override
      public int getNestedClassNameCount() {
        return instance.getNestedClassNameCount();
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The nestedClassName at the given index.
       */
      @java.lang.Override
      public int getNestedClassName(int index) {
        return instance.getNestedClassName(index);
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The nestedClassName to set.
       * @return This builder for chaining.
       */
      public Builder setNestedClassName(
          int index, int value) {
        copyOnWrite();
        instance.setNestedClassName(index, value);
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The nestedClassName to add.
       * @return This builder for chaining.
       */
      public Builder addNestedClassName(int value) {
        copyOnWrite();
        instance.addNestedClassName(value);
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param values The nestedClassName to add.
       * @return This builder for chaining.
       */
      public Builder addAllNestedClassName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllNestedClassName(values);
        return this;
      }
      /**
       * <code>repeated int32 nested_class_name = 7 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearNestedClassName() {
        copyOnWrite();
        instance.clearNestedClassName();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextReceiverTypeList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      @java.lang.Override
      public int getContextReceiverTypeCount() {
        return instance.getContextReceiverTypeCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
        return instance.getContextReceiverType(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setContextReceiverType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setContextReceiverType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addContextReceiverType(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addContextReceiverType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addContextReceiverType(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addContextReceiverType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder addAllContextReceiverType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        copyOnWrite();
        instance.addAllContextReceiverType(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder clearContextReceiverType() {
        copyOnWrite();
        instance.clearContextReceiverType();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 20;</code>
       */
      public Builder removeContextReceiverType(int index) {
        copyOnWrite();
        instance.removeContextReceiverType(index);
        return this;
      }

      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the contextReceiverTypeId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getContextReceiverTypeIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextReceiverTypeIdList());
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of contextReceiverTypeId.
       */
      @java.lang.Override
      public int getContextReceiverTypeIdCount() {
        return instance.getContextReceiverTypeIdCount();
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The contextReceiverTypeId at the given index.
       */
      @java.lang.Override
      public int getContextReceiverTypeId(int index) {
        return instance.getContextReceiverTypeId(index);
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setContextReceiverTypeId(
          int index, int value) {
        copyOnWrite();
        instance.setContextReceiverTypeId(index, value);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addContextReceiverTypeId(int value) {
        copyOnWrite();
        instance.addContextReceiverTypeId(value);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllContextReceiverTypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllContextReceiverTypeId(values);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 21 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearContextReceiverTypeId() {
        copyOnWrite();
        instance.clearContextReceiverTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> getConstructorList() {
        return java.util.Collections.unmodifiableList(
            instance.getConstructorList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      @java.lang.Override
      public int getConstructorCount() {
        return instance.getConstructorCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getConstructor(int index) {
        return instance.getConstructor(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder setConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
        copyOnWrite();
        instance.setConstructor(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder setConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder builderForValue) {
        copyOnWrite();
        instance.setConstructor(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
        copyOnWrite();
        instance.addConstructor(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor value) {
        copyOnWrite();
        instance.addConstructor(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder builderForValue) {
        copyOnWrite();
        instance.addConstructor(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addConstructor(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.Builder builderForValue) {
        copyOnWrite();
        instance.addConstructor(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder addAllConstructor(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> values) {
        copyOnWrite();
        instance.addAllConstructor(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder clearConstructor() {
        copyOnWrite();
        instance.clearConstructor();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Constructor constructor = 8;</code>
       */
      public Builder removeConstructor(int index) {
        copyOnWrite();
        instance.removeConstructor(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
        return java.util.Collections.unmodifiableList(
            instance.getFunctionList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      @java.lang.Override
      public int getFunctionCount() {
        return instance.getFunctionCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
        return instance.getFunction(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        copyOnWrite();
        instance.setFunction(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.setFunction(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        copyOnWrite();
        instance.addFunction(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        copyOnWrite();
        instance.addFunction(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.addFunction(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.addFunction(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder addAllFunction(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Function> values) {
        copyOnWrite();
        instance.addAllFunction(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder clearFunction() {
        copyOnWrite();
        instance.clearFunction();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 9;</code>
       */
      public Builder removeFunction(int index) {
        copyOnWrite();
        instance.removeFunction(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
        return java.util.Collections.unmodifiableList(
            instance.getPropertyList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      @java.lang.Override
      public int getPropertyCount() {
        return instance.getPropertyCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
        return instance.getProperty(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        copyOnWrite();
        instance.setProperty(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        copyOnWrite();
        instance.setProperty(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        copyOnWrite();
        instance.addProperty(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        copyOnWrite();
        instance.addProperty(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        copyOnWrite();
        instance.addProperty(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        copyOnWrite();
        instance.addProperty(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder addAllProperty(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Property> values) {
        copyOnWrite();
        instance.addAllProperty(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder clearProperty() {
        copyOnWrite();
        instance.clearProperty();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 10;</code>
       */
      public Builder removeProperty(int index) {
        copyOnWrite();
        instance.removeProperty(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeAliasList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      @java.lang.Override
      public int getTypeAliasCount() {
        return instance.getTypeAliasCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
        return instance.getTypeAlias(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        copyOnWrite();
        instance.setTypeAlias(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeAlias(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        copyOnWrite();
        instance.addTypeAlias(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        copyOnWrite();
        instance.addTypeAlias(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeAlias(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeAlias(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder addAllTypeAlias(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> values) {
        copyOnWrite();
        instance.addAllTypeAlias(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder clearTypeAlias() {
        copyOnWrite();
        instance.clearTypeAlias();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 11;</code>
       */
      public Builder removeTypeAlias(int index) {
        copyOnWrite();
        instance.removeTypeAlias(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> getEnumEntryList() {
        return java.util.Collections.unmodifiableList(
            instance.getEnumEntryList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      @java.lang.Override
      public int getEnumEntryCount() {
        return instance.getEnumEntryCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getEnumEntry(int index) {
        return instance.getEnumEntry(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder setEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
        copyOnWrite();
        instance.setEnumEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder setEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder builderForValue) {
        copyOnWrite();
        instance.setEnumEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
        copyOnWrite();
        instance.addEnumEntry(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry value) {
        copyOnWrite();
        instance.addEnumEntry(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addEnumEntry(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addEnumEntry(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.Builder builderForValue) {
        copyOnWrite();
        instance.addEnumEntry(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder addAllEnumEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> values) {
        copyOnWrite();
        instance.addAllEnumEntry(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder clearEnumEntry() {
        copyOnWrite();
        instance.clearEnumEntry();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.EnumEntry enum_entry = 13;</code>
       */
      public Builder removeEnumEntry(int index) {
        copyOnWrite();
        instance.removeEnumEntry(index);
        return this;
      }

      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return A list containing the sealedSubclassFqName.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getSealedSubclassFqNameList() {
        return java.util.Collections.unmodifiableList(
            instance.getSealedSubclassFqNameList());
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return The count of sealedSubclassFqName.
       */
      @java.lang.Override
      public int getSealedSubclassFqNameCount() {
        return instance.getSealedSubclassFqNameCount();
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The sealedSubclassFqName at the given index.
       */
      @java.lang.Override
      public int getSealedSubclassFqName(int index) {
        return instance.getSealedSubclassFqName(index);
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param value The sealedSubclassFqName to set.
       * @return This builder for chaining.
       */
      public Builder setSealedSubclassFqName(
          int index, int value) {
        copyOnWrite();
        instance.setSealedSubclassFqName(index, value);
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param value The sealedSubclassFqName to add.
       * @return This builder for chaining.
       */
      public Builder addSealedSubclassFqName(int value) {
        copyOnWrite();
        instance.addSealedSubclassFqName(value);
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @param values The sealedSubclassFqName to add.
       * @return This builder for chaining.
       */
      public Builder addAllSealedSubclassFqName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllSealedSubclassFqName(values);
        return this;
      }
      /**
       * <code>repeated int32 sealed_subclass_fq_name = 16 [(.org.jetbrains.kotlin.metadata.fq_name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearSealedSubclassFqName() {
        copyOnWrite();
        instance.clearSealedSubclassFqName();
        return this;
      }

      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the inlineClassUnderlyingPropertyName field is set.
       */
      @java.lang.Override
      public boolean hasInlineClassUnderlyingPropertyName() {
        return instance.hasInlineClassUnderlyingPropertyName();
      }
      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The inlineClassUnderlyingPropertyName.
       */
      @java.lang.Override
      public int getInlineClassUnderlyingPropertyName() {
        return instance.getInlineClassUnderlyingPropertyName();
      }
      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The inlineClassUnderlyingPropertyName to set.
       * @return This builder for chaining.
       */
      public Builder setInlineClassUnderlyingPropertyName(int value) {
        copyOnWrite();
        instance.setInlineClassUnderlyingPropertyName(value);
        return this;
      }
      /**
       * <code>int32 inline_class_underlying_property_name = 17 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineClassUnderlyingPropertyName() {
        copyOnWrite();
        instance.clearInlineClassUnderlyingPropertyName();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      @java.lang.Override
      public boolean hasInlineClassUnderlyingType() {
        return instance.hasInlineClassUnderlyingType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getInlineClassUnderlyingType() {
        return instance.getInlineClassUnderlyingType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder setInlineClassUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setInlineClassUnderlyingType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder setInlineClassUnderlyingType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setInlineClassUnderlyingType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder mergeInlineClassUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeInlineClassUnderlyingType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type inline_class_underlying_type = 18;</code>
       */
      public Builder clearInlineClassUnderlyingType() {  copyOnWrite();
        instance.clearInlineClassUnderlyingType();
        return this;
      }

      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the inlineClassUnderlyingTypeId field is set.
       */
      @java.lang.Override
      public boolean hasInlineClassUnderlyingTypeId() {
        return instance.hasInlineClassUnderlyingTypeId();
      }
      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The inlineClassUnderlyingTypeId.
       */
      @java.lang.Override
      public int getInlineClassUnderlyingTypeId() {
        return instance.getInlineClassUnderlyingTypeId();
      }
      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The inlineClassUnderlyingTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setInlineClassUnderlyingTypeId(int value) {
        copyOnWrite();
        instance.setInlineClassUnderlyingTypeId(value);
        return this;
      }
      /**
       * <code>int32 inline_class_underlying_type_id = 19 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineClassUnderlyingTypeId() {
        copyOnWrite();
        instance.clearInlineClassUnderlyingTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 25;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      @java.lang.Override
      public boolean hasTypeTable() {
        return instance.hasTypeTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
        return instance.getTypeTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        copyOnWrite();
        instance.setTypeTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        copyOnWrite();
        instance.mergeTypeTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {  copyOnWrite();
        instance.clearTypeTable();
        return this;
      }

      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        return java.util.Collections.unmodifiableList(
            instance.getVersionRequirementList());
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      @java.lang.Override
      public int getVersionRequirementCount() {
        return instance.getVersionRequirementCount();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      @java.lang.Override
      public int getVersionRequirement(int index) {
        return instance.getVersionRequirement(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {
        copyOnWrite();
        instance.setVersionRequirement(index, value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {
        copyOnWrite();
        instance.addVersionRequirement(value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllVersionRequirement(values);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        copyOnWrite();
        instance.clearVersionRequirement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      @java.lang.Override
      public boolean hasVersionRequirementTable() {
        return instance.hasVersionRequirementTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
        return instance.getVersionRequirementTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        copyOnWrite();
        instance.setVersionRequirementTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder builderForValue) {
        copyOnWrite();
        instance.setVersionRequirementTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        copyOnWrite();
        instance.mergeVersionRequirementTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder clearVersionRequirementTable() {  copyOnWrite();
        instance.clearVersionRequirementTable();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        return java.util.Collections.unmodifiableList(
            instance.getCompilerPluginDataList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      @java.lang.Override
      public int getCompilerPluginDataCount() {
        return instance.getCompilerPluginDataCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        return instance.getCompilerPluginData(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.setCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.setCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        copyOnWrite();
        instance.addAllCompilerPluginData(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder clearCompilerPluginData() {
        copyOnWrite();
        instance.clearCompilerPluginData();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        copyOnWrite();
        instance.removeCompilerPluginData(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Class)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Class();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "flags_",
              "supertypeId_",
              "fqName_",
              "companionObjectName_",
              "typeParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.class,
              "supertype_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.class,
              "nestedClassName_",
              "constructor_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.class,
              "function_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Function.class,
              "property_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Property.class,
              "typeAlias_",
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.class,
              "enumEntry_",
              org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.class,
              "sealedSubclassFqName_",
              "inlineClassUnderlyingPropertyName_",
              "inlineClassUnderlyingType_",
              "inlineClassUnderlyingTypeId_",
              "contextReceiverType_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.class,
              "contextReceiverTypeId_",
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "typeTable_",
              "versionRequirement_",
              "versionRequirementTable_",
              "compilerPluginData_",
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class,
            };
            java.lang.String info =
                "\u0004\u0017\u0000\u0001\u0001!\u0017\u0000\u000f\r\u0001\u1004\u0000\u0002\'\u0003" +
                "\u1504\u0001\u0004\u1004\u0002\u0005\u041b\u0006\u041b\u0007\'\b\u041b\t\u041b\n" +
                "\u041b\u000b\u041b\r\u041b\u0010\'\u0011\u1004\u0003\u0012\u1409\u0004\u0013\u1004" +
                "\u0005\u0014\u041b\u0015\'\u0019\u041b\u001e\u1409\u0006\u001f\u0016 \u1009\u0007" +
                "!\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Class> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Class.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Class>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Class)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Class DEFAULT_INSTANCE;
    static {
      Class defaultInstance = new Class();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Class.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Class getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Class> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Class> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PackageOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Package)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Package, Package.Builder> {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> 
        getFunctionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    int getFunctionCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> 
        getPropertyList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    int getPropertyCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> 
        getTypeAliasList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    int getTypeAliasCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    boolean hasTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable();

    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return Whether the versionRequirementTable field is set.
     */
    boolean hasVersionRequirementTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     * @return The versionRequirementTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Package}
   */
  public  static final class Package extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        Package, Package.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Package)
      PackageOrBuilder {
    private Package() {
      function_ = emptyProtobufList();
      property_ = emptyProtobufList();
      typeAlias_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FUNCTION_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Function> function_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder> 
        getFunctionOrBuilderList() {
      return function_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public int getFunctionCount() {
      return function_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
      return function_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder getFunctionOrBuilder(
        int index) {
      return function_.get(index);
    }
    private void ensureFunctionIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Function> tmp = function_;
      if (!tmp.isModifiable()) {
        function_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setFunction(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureFunctionIsMutable();
      function_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addFunction(org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureFunctionIsMutable();
      function_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addFunction(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
      value.getClass();  // minimal bytecode null check
      ensureFunctionIsMutable();
      function_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    private void addAllFunction(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Function> values) {
      ensureFunctionIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, function_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    private void clearFunction() {
      function_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
     */
    private void removeFunction(int index) {
      ensureFunctionIsMutable();
      function_.remove(index);
    }

    public static final int PROPERTY_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Property> property_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder> 
        getPropertyOrBuilderList() {
      return property_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public int getPropertyCount() {
      return property_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
      return property_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder getPropertyOrBuilder(
        int index) {
      return property_.get(index);
    }
    private void ensurePropertyIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Property> tmp = property_;
      if (!tmp.isModifiable()) {
        property_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setProperty(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
      value.getClass();  // minimal bytecode null check
      ensurePropertyIsMutable();
      property_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addProperty(org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
      value.getClass();  // minimal bytecode null check
      ensurePropertyIsMutable();
      property_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addProperty(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
      value.getClass();  // minimal bytecode null check
      ensurePropertyIsMutable();
      property_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    private void addAllProperty(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Property> values) {
      ensurePropertyIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, property_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    private void clearProperty() {
      property_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
     */
    private void removeProperty(int index) {
      ensurePropertyIsMutable();
      property_.remove(index);
    }

    public static final int TYPE_ALIAS_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> typeAlias_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder> 
        getTypeAliasOrBuilderList() {
      return typeAlias_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public int getTypeAliasCount() {
      return typeAlias_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
      return typeAlias_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder getTypeAliasOrBuilder(
        int index) {
      return typeAlias_.get(index);
    }
    private void ensureTypeAliasIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> tmp = typeAlias_;
      if (!tmp.isModifiable()) {
        typeAlias_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeAlias(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeAliasIsMutable();
      typeAlias_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeAlias(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeAliasIsMutable();
      typeAlias_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeAlias(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeAliasIsMutable();
      typeAlias_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    private void addAllTypeAlias(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> values) {
      ensureTypeAliasIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, typeAlias_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    private void clearTypeAlias() {
      typeAlias_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
     */
    private void removeTypeAlias(int index) {
      ensureTypeAliasIsMutable();
      typeAlias_.remove(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
      value.getClass();  // minimal bytecode null check
      typeTable_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
      value.getClass();  // minimal bytecode null check
      if (typeTable_ != null &&
          typeTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance()) {
        typeTable_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
      } else {
        typeTable_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    private void clearTypeTable() {  typeTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int VERSION_REQUIREMENT_TABLE_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable versionRequirementTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.Override
    public boolean hasVersionRequirementTable() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
      return versionRequirementTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance() : versionRequirementTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
      value.getClass();  // minimal bytecode null check
      versionRequirementTable_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
      value.getClass();  // minimal bytecode null check
      if (versionRequirementTable_ != null &&
          versionRequirementTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.getDefaultInstance()) {
        versionRequirementTable_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.newBuilder(versionRequirementTable_).mergeFrom(value).buildPartial();
      } else {
        versionRequirementTable_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
     */
    private void clearVersionRequirementTable() {  versionRequirementTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Package prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Package}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Package, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Package)
        org.jetbrains.kotlin.metadata.ProtoBuf.PackageOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Package.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Function> getFunctionList() {
        return java.util.Collections.unmodifiableList(
            instance.getFunctionList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      @java.lang.Override
      public int getFunctionCount() {
        return instance.getFunctionCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Function getFunction(int index) {
        return instance.getFunction(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        copyOnWrite();
        instance.setFunction(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder setFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.setFunction(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        copyOnWrite();
        instance.addFunction(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function value) {
        copyOnWrite();
        instance.addFunction(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.addFunction(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addFunction(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Function.Builder builderForValue) {
        copyOnWrite();
        instance.addFunction(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder addAllFunction(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Function> values) {
        copyOnWrite();
        instance.addAllFunction(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder clearFunction() {
        copyOnWrite();
        instance.clearFunction();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Function function = 3;</code>
       */
      public Builder removeFunction(int index) {
        copyOnWrite();
        instance.removeFunction(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property> getPropertyList() {
        return java.util.Collections.unmodifiableList(
            instance.getPropertyList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      @java.lang.Override
      public int getPropertyCount() {
        return instance.getPropertyCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Property getProperty(int index) {
        return instance.getProperty(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        copyOnWrite();
        instance.setProperty(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder setProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        copyOnWrite();
        instance.setProperty(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        copyOnWrite();
        instance.addProperty(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property value) {
        copyOnWrite();
        instance.addProperty(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        copyOnWrite();
        instance.addProperty(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addProperty(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Property.Builder builderForValue) {
        copyOnWrite();
        instance.addProperty(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder addAllProperty(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Property> values) {
        copyOnWrite();
        instance.addAllProperty(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder clearProperty() {
        copyOnWrite();
        instance.clearProperty();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Property property = 4;</code>
       */
      public Builder removeProperty(int index) {
        copyOnWrite();
        instance.removeProperty(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> getTypeAliasList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeAliasList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      @java.lang.Override
      public int getTypeAliasCount() {
        return instance.getTypeAliasCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getTypeAlias(int index) {
        return instance.getTypeAlias(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        copyOnWrite();
        instance.setTypeAlias(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder setTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeAlias(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        copyOnWrite();
        instance.addTypeAlias(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias value) {
        copyOnWrite();
        instance.addTypeAlias(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeAlias(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addTypeAlias(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeAlias(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder addAllTypeAlias(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> values) {
        copyOnWrite();
        instance.addAllTypeAlias(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder clearTypeAlias() {
        copyOnWrite();
        instance.clearTypeAlias();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeAlias type_alias = 5;</code>
       */
      public Builder removeTypeAlias(int index) {
        copyOnWrite();
        instance.removeTypeAlias(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      @java.lang.Override
      public boolean hasTypeTable() {
        return instance.hasTypeTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
        return instance.getTypeTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        copyOnWrite();
        instance.setTypeTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        copyOnWrite();
        instance.mergeTypeTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {  copyOnWrite();
        instance.clearTypeTable();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      @java.lang.Override
      public boolean hasVersionRequirementTable() {
        return instance.hasVersionRequirementTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getVersionRequirementTable() {
        return instance.getVersionRequirementTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        copyOnWrite();
        instance.setVersionRequirementTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder setVersionRequirementTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.Builder builderForValue) {
        copyOnWrite();
        instance.setVersionRequirementTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder mergeVersionRequirementTable(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable value) {
        copyOnWrite();
        instance.mergeVersionRequirementTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirementTable version_requirement_table = 32;</code>
       */
      public Builder clearVersionRequirementTable() {  copyOnWrite();
        instance.clearVersionRequirementTable();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Package)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Package();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "function_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Function.class,
              "property_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Property.class,
              "typeAlias_",
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.class,
              "typeTable_",
              "versionRequirementTable_",
            };
            java.lang.String info =
                "\u0004\u0005\u0000\u0001\u0003 \u0005\u0000\u0003\u0004\u0003\u041b\u0004\u041b\u0005" +
                "\u041b\u001e\u1409\u0000 \u1009\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Package> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Package.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Package>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Package)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Package DEFAULT_INSTANCE;
    static {
      Package defaultInstance = new Package();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Package.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Package getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Package> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Package> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TypeTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    int getTypeCount();

    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return Whether the firstNullable field is set.
     */
    boolean hasFirstNullable();
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return The firstNullable.
     */
    int getFirstNullable();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeTable}
   */
  public  static final class TypeTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          TypeTable, TypeTable.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeTable)
      TypeTableOrBuilder {
    private TypeTable() {
      type_ = emptyProtobufList();
      firstNullable_ = -1;
    }
    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> type_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getTypeList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getTypeOrBuilderList() {
      return type_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public int getTypeCount() {
      return type_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType(int index) {
      return type_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getTypeOrBuilder(
        int index) {
      return type_.get(index);
    }
    private void ensureTypeIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> tmp = type_;
      if (!tmp.isModifiable()) {
        type_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeIsMutable();
      type_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeIsMutable();
      type_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeIsMutable();
      type_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    private void addAllType(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
      ensureTypeIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, type_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    private void clearType() {
      type_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
     */
    private void removeType(int index) {
      ensureTypeIsMutable();
      type_.remove(index);
    }

    public static final int FIRST_NULLABLE_FIELD_NUMBER = 2;
    private int firstNullable_;
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return Whether the firstNullable field is set.
     */
    @java.lang.Override
    public boolean hasFirstNullable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @return The firstNullable.
     */
    @java.lang.Override
    public int getFirstNullable() {
      return firstNullable_;
    }
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     * @param value The firstNullable to set.
     */
    private void setFirstNullable(int value) {
      bitField0_ |= 0x00000001;
      firstNullable_ = value;
    }
    /**
     * <pre>
     * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
     * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
     * </pre>
     *
     * <code>int32 first_nullable = 2 [default = -1];</code>
     */
    private void clearFirstNullable() {
      bitField0_ = (bitField0_ & ~0x00000001);
      firstNullable_ = -1;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeTableOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getTypeList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      @java.lang.Override
      public int getTypeCount() {
        return instance.getTypeCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType(int index) {
        return instance.getType(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addType(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addType(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder addAllType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        copyOnWrite();
        instance.addAllType(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type type = 1;</code>
       */
      public Builder removeType(int index) {
        copyOnWrite();
        instance.removeType(index);
        return this;
      }

      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @return Whether the firstNullable field is set.
       */
      @java.lang.Override
      public boolean hasFirstNullable() {
        return instance.hasFirstNullable();
      }
      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @return The firstNullable.
       */
      @java.lang.Override
      public int getFirstNullable() {
        return instance.getFirstNullable();
      }
      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @param value The firstNullable to set.
       * @return This builder for chaining.
       */
      public Builder setFirstNullable(int value) {
        copyOnWrite();
        instance.setFirstNullable(value);
        return this;
      }
      /**
       * <pre>
       * Index starting from which all types are nullable, or nothing if all types in this table are non-null.
       * Note that the 'nullable' field of Type messages is ignored and shouldn't be written because it wastes too much space
       * </pre>
       *
       * <code>int32 first_nullable = 2 [default = -1];</code>
       * @return This builder for chaining.
       */
      public Builder clearFirstNullable() {
        copyOnWrite();
        instance.clearFirstNullable();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeTable)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "type_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.class,
              "firstNullable_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0001\u0001\u041b\u0002\u1004" +
                "\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable DEFAULT_INSTANCE;
    static {
      TypeTable defaultInstance = new TypeTable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TypeTable.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<TypeTable> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<TypeTable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ConstructorOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Constructor)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Constructor, Constructor.Builder> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getValueParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    int getValueParameterCount();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    int getCompilerPluginDataCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    int getAnnotationCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Constructor}
   */
  public  static final class Constructor extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        Constructor, Constructor.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Constructor)
      ConstructorOrBuilder {
    private Constructor() {
      flags_ = 6;
      valueParameter_ = emptyProtobufList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = emptyProtobufList();
      annotation_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00000001;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * isSecondary
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000001);
      flags_ = 6;
    }

    public static final int VALUE_PARAMETER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> valueParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public int getValueParameterCount() {
      return valueParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
      return valueParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index) {
      return valueParameter_.get(index);
    }
    private void ensureValueParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> tmp = valueParameter_;
      if (!tmp.isModifiable()) {
        valueParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setValueParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureValueParameterIsMutable();
      valueParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureValueParameterIsMutable();
      valueParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addValueParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureValueParameterIsMutable();
      valueParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    private void addAllValueParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
      ensureValueParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, valueParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    private void clearValueParameter() {
      valueParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
     */
    private void removeValueParameter(int index) {
      ensureValueParameterIsMutable();
      valueParameter_.remove(index);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_;
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    @java.lang.Override
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    @java.lang.Override
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }
    private void ensureVersionRequirementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = versionRequirement_;
      if (!tmp.isModifiable()) {
        versionRequirement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The versionRequirement to set.
     */
    private void setVersionRequirement(
        int index, int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.setInt(index, value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param value The versionRequirement to add.
     */
    private void addVersionRequirement(int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.addInt(value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param values The versionRequirement to add.
     */
    private void addAllVersionRequirement(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureVersionRequirementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, versionRequirement_);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     */
    private void clearVersionRequirement() {
      versionRequirement_ = emptyIntList();
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }
    private void ensureCompilerPluginDataIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> tmp = compilerPluginData_;
      if (!tmp.isModifiable()) {
        compilerPluginData_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void addAllCompilerPluginData(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
      ensureCompilerPluginDataIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, compilerPluginData_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void clearCompilerPluginData() {
      compilerPluginData_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void removeCompilerPluginData(int index) {
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.remove(index);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Constructor prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Constructor}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Constructor, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Constructor)
        org.jetbrains.kotlin.metadata.ProtoBuf.ConstructorOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * isSecondary
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getValueParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      @java.lang.Override
      public int getValueParameterCount() {
        return instance.getValueParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
        return instance.getValueParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.setValueParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setValueParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addValueParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addValueParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addValueParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addValueParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder addAllValueParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        copyOnWrite();
        instance.addAllValueParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder clearValueParameter() {
        copyOnWrite();
        instance.clearValueParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 2;</code>
       */
      public Builder removeValueParameter(int index) {
        copyOnWrite();
        instance.removeValueParameter(index);
        return this;
      }

      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        return java.util.Collections.unmodifiableList(
            instance.getVersionRequirementList());
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      @java.lang.Override
      public int getVersionRequirementCount() {
        return instance.getVersionRequirementCount();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      @java.lang.Override
      public int getVersionRequirement(int index) {
        return instance.getVersionRequirement(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {
        copyOnWrite();
        instance.setVersionRequirement(index, value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {
        copyOnWrite();
        instance.addVersionRequirement(value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllVersionRequirement(values);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        copyOnWrite();
        instance.clearVersionRequirement();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        return java.util.Collections.unmodifiableList(
            instance.getCompilerPluginDataList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public int getCompilerPluginDataCount() {
        return instance.getCompilerPluginDataCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        return instance.getCompilerPluginData(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.setCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.setCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        copyOnWrite();
        instance.addAllCompilerPluginData(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder clearCompilerPluginData() {
        copyOnWrite();
        instance.clearCompilerPluginData();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        copyOnWrite();
        instance.removeCompilerPluginData(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 3;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Constructor)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Constructor();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "flags_",
              "valueParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.class,
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "versionRequirement_",
              "compilerPluginData_",
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class,
            };
            java.lang.String info =
                "\u0004\u0005\u0000\u0001\u0001 \u0005\u0000\u0004\u0003\u0001\u1004\u0000\u0002\u041b" +
                "\u0003\u041b\u001f\u0016 \u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Constructor.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Constructor>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Constructor)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Constructor DEFAULT_INSTANCE;
    static {
      Constructor defaultInstance = new Constructor();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Constructor.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Constructor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Constructor> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Constructor> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FunctionOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Function)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Function, Function.Builder> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return Whether the oldFlags field is set.
     */
    boolean hasOldFlags();
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return The oldFlags.
     */
    int getOldFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return Whether the returnType field is set.
     */
    boolean hasReturnType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return The returnType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType();

    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    boolean hasReturnTypeId();
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    int getReturnTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    int getTypeParameterCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return Whether the receiverType field is set.
     */
    boolean hasReceiverType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return The receiverType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType();

    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    boolean hasReceiverTypeId();
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    int getReceiverTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getContextReceiverTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    int getContextReceiverTypeCount();

    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    java.util.List<java.lang.Integer> getContextReceiverTypeIdList();
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    int getContextReceiverTypeIdCount();
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    int getContextReceiverTypeId(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getContextParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    int getContextParameterCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getValueParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    int getValueParameterCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return Whether the typeTable field is set.
     */
    boolean hasTypeTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     * @return The typeTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     * @return Whether the contract field is set.
     */
    boolean hasContract();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     * @return The contract.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Contract getContract();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    int getCompilerPluginDataCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    int getAnnotationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getExtensionReceiverAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    int getExtensionReceiverAnnotationCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Function}
   */
  public  static final class Function extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        Function, Function.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Function)
      FunctionOrBuilder {
    private Function() {
      flags_ = 6;
      oldFlags_ = 6;
      typeParameter_ = emptyProtobufList();
      contextReceiverType_ = emptyProtobufList();
      contextReceiverTypeId_ = emptyIntList();
      contextParameter_ = emptyProtobufList();
      valueParameter_ = emptyProtobufList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = emptyProtobufList();
      annotation_ = emptyProtobufList();
      extensionReceiverAnnotation_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 9;
    private int flags_;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00000001;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isOperator
     * isInfix
     * isInline
     * isTailrec
     * isExternal
     * isSuspend
     * isExpect
     * hasNonStableParameterNames
     * </pre>
     *
     * <code>int32 flags = 9 [default = 6];</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000001);
      flags_ = 6;
    }

    public static final int OLD_FLAGS_FIELD_NUMBER = 1;
    private int oldFlags_;
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return Whether the oldFlags field is set.
     */
    @java.lang.Override
    public boolean hasOldFlags() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @return The oldFlags.
     */
    @java.lang.Override
    public int getOldFlags() {
      return oldFlags_;
    }
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     * @param value The oldFlags to set.
     */
    private void setOldFlags(int value) {
      bitField0_ |= 0x00000002;
      oldFlags_ = value;
    }
    /**
     * <code>int32 old_flags = 1 [default = 6];</code>
     */
    private void clearOldFlags() {
      bitField0_ = (bitField0_ & ~0x00000002);
      oldFlags_ = 6;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     */
    private void setName(int value) {
      bitField0_ |= 0x00000004;
      name_ = value;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000004);
      name_ = 0;
    }

    public static final int RETURN_TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type returnType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.Override
    public boolean hasReturnType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
      return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      returnType_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (returnType_ != null &&
          returnType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        returnType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(returnType_).mergeFrom(value).buildPartial();
      } else {
        returnType_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    private void clearReturnType() {  returnType_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static final int RETURN_TYPE_ID_FIELD_NUMBER = 7;
    private int returnTypeId_;
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReturnTypeId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    @java.lang.Override
    public int getReturnTypeId() {
      return returnTypeId_;
    }
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The returnTypeId to set.
     */
    private void setReturnTypeId(int value) {
      bitField0_ |= 0x00000010;
      returnTypeId_ = value;
    }
    /**
     * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearReturnTypeId() {
      bitField0_ = (bitField0_ & ~0x00000010);
      returnTypeId_ = 0;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }
    private void ensureTypeParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> tmp = typeParameter_;
      if (!tmp.isModifiable()) {
        typeParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    private void addAllTypeParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
      ensureTypeParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, typeParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    private void clearTypeParameter() {
      typeParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    private void removeTypeParameter(int index) {
      ensureTypeParameterIsMutable();
      typeParameter_.remove(index);
    }

    public static final int RECEIVER_TYPE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type receiverType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.Override
    public boolean hasReceiverType() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
      return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      receiverType_ = value;
      bitField0_ |= 0x00000020;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (receiverType_ != null &&
          receiverType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        receiverType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(receiverType_).mergeFrom(value).buildPartial();
      } else {
        receiverType_ = value;
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    private void clearReceiverType() {  receiverType_ = null;
      bitField0_ = (bitField0_ & ~0x00000020);
    }

    public static final int RECEIVER_TYPE_ID_FIELD_NUMBER = 8;
    private int receiverTypeId_;
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReceiverTypeId() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    @java.lang.Override
    public int getReceiverTypeId() {
      return receiverTypeId_;
    }
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The receiverTypeId to set.
     */
    private void setReceiverTypeId(int value) {
      bitField0_ |= 0x00000040;
      receiverTypeId_ = value;
    }
    /**
     * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearReceiverTypeId() {
      bitField0_ = (bitField0_ & ~0x00000040);
      receiverTypeId_ = 0;
    }

    public static final int CONTEXT_RECEIVER_TYPE_FIELD_NUMBER = 10;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public int getContextReceiverTypeCount() {
      return contextReceiverType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
      return contextReceiverType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index) {
      return contextReceiverType_.get(index);
    }
    private void ensureContextReceiverTypeIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> tmp = contextReceiverType_;
      if (!tmp.isModifiable()) {
        contextReceiverType_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setContextReceiverType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextReceiverType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    private void addAllContextReceiverType(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
      ensureContextReceiverTypeIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextReceiverType_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    private void clearContextReceiverType() {
      contextReceiverType_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
     */
    private void removeContextReceiverType(int index) {
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.remove(index);
    }

    public static final int CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER = 11;
    private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_;
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getContextReceiverTypeIdList() {
      return contextReceiverTypeId_;
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    @java.lang.Override
    public int getContextReceiverTypeIdCount() {
      return contextReceiverTypeId_.size();
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    @java.lang.Override
    public int getContextReceiverTypeId(int index) {
      return contextReceiverTypeId_.getInt(index);
    }
    private int contextReceiverTypeIdMemoizedSerializedSize = -1;
    private void ensureContextReceiverTypeIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = contextReceiverTypeId_;
      if (!tmp.isModifiable()) {
        contextReceiverTypeId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index to set the value at.
     * @param value The contextReceiverTypeId to set.
     */
    private void setContextReceiverTypeId(
        int index, int value) {
      ensureContextReceiverTypeIdIsMutable();
      contextReceiverTypeId_.setInt(index, value);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The contextReceiverTypeId to add.
     */
    private void addContextReceiverTypeId(int value) {
      ensureContextReceiverTypeIdIsMutable();
      contextReceiverTypeId_.addInt(value);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param values The contextReceiverTypeId to add.
     */
    private void addAllContextReceiverTypeId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureContextReceiverTypeIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextReceiverTypeId_);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearContextReceiverTypeId() {
      contextReceiverTypeId_ = emptyIntList();
    }

    public static final int CONTEXT_PARAMETER_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> contextParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getContextParameterOrBuilderList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public int getContextParameterCount() {
      return contextParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
      return contextParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
        int index) {
      return contextParameter_.get(index);
    }
    private void ensureContextParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> tmp = contextParameter_;
      if (!tmp.isModifiable()) {
        contextParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setContextParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureContextParameterIsMutable();
      contextParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureContextParameterIsMutable();
      contextParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureContextParameterIsMutable();
      contextParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    private void addAllContextParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
      ensureContextParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    private void clearContextParameter() {
      contextParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
     */
    private void removeContextParameter(int index) {
      ensureContextParameterIsMutable();
      contextParameter_.remove(index);
    }

    public static final int VALUE_PARAMETER_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> valueParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getValueParameterOrBuilderList() {
      return valueParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public int getValueParameterCount() {
      return valueParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
      return valueParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getValueParameterOrBuilder(
        int index) {
      return valueParameter_.get(index);
    }
    private void ensureValueParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> tmp = valueParameter_;
      if (!tmp.isModifiable()) {
        valueParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setValueParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureValueParameterIsMutable();
      valueParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureValueParameterIsMutable();
      valueParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addValueParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureValueParameterIsMutable();
      valueParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    private void addAllValueParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
      ensureValueParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, valueParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    private void clearValueParameter() {
      valueParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
     */
    private void removeValueParameter(int index) {
      ensureValueParameterIsMutable();
      valueParameter_.remove(index);
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 30;
    private org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable typeTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
      return typeTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance() : typeTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
      value.getClass();  // minimal bytecode null check
      typeTable_ = value;
      bitField0_ |= 0x00000080;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
      value.getClass();  // minimal bytecode null check
      if (typeTable_ != null &&
          typeTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.getDefaultInstance()) {
        typeTable_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
      } else {
        typeTable_ = value;
      }
      bitField0_ |= 0x00000080;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
     */
    private void clearTypeTable() {  typeTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000080);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_;
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    @java.lang.Override
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    @java.lang.Override
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }
    private void ensureVersionRequirementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = versionRequirement_;
      if (!tmp.isModifiable()) {
        versionRequirement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The versionRequirement to set.
     */
    private void setVersionRequirement(
        int index, int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.setInt(index, value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param value The versionRequirement to add.
     */
    private void addVersionRequirement(int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.addInt(value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param values The versionRequirement to add.
     */
    private void addAllVersionRequirement(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureVersionRequirementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, versionRequirement_);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     */
    private void clearVersionRequirement() {
      versionRequirement_ = emptyIntList();
    }

    public static final int CONTRACT_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Contract contract_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    @java.lang.Override
    public boolean hasContract() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Contract getContract() {
      return contract_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance() : contract_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setContract(org.jetbrains.kotlin.metadata.ProtoBuf.Contract value) {
      value.getClass();  // minimal bytecode null check
      contract_ = value;
      bitField0_ |= 0x00000100;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeContract(org.jetbrains.kotlin.metadata.ProtoBuf.Contract value) {
      value.getClass();  // minimal bytecode null check
      if (contract_ != null &&
          contract_ != org.jetbrains.kotlin.metadata.ProtoBuf.Contract.getDefaultInstance()) {
        contract_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Contract.newBuilder(contract_).mergeFrom(value).buildPartial();
      } else {
        contract_ = value;
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
     */
    private void clearContract() {  contract_ = null;
      bitField0_ = (bitField0_ & ~0x00000100);
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 33;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }
    private void ensureCompilerPluginDataIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> tmp = compilerPluginData_;
      if (!tmp.isModifiable()) {
        compilerPluginData_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    private void addAllCompilerPluginData(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
      ensureCompilerPluginDataIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, compilerPluginData_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    private void clearCompilerPluginData() {
      compilerPluginData_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
     */
    private void removeCompilerPluginData(int index) {
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.remove(index);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 12;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static final int EXTENSION_RECEIVER_ANNOTATION_FIELD_NUMBER = 34;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> extensionReceiverAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getExtensionReceiverAnnotationOrBuilderList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public int getExtensionReceiverAnnotationCount() {
      return extensionReceiverAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
      return extensionReceiverAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
        int index) {
      return extensionReceiverAnnotation_.get(index);
    }
    private void ensureExtensionReceiverAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = extensionReceiverAnnotation_;
      if (!tmp.isModifiable()) {
        extensionReceiverAnnotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExtensionReceiverAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addExtensionReceiverAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addExtensionReceiverAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    private void addAllExtensionReceiverAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureExtensionReceiverAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, extensionReceiverAnnotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    private void clearExtensionReceiverAnnotation() {
      extensionReceiverAnnotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
     */
    private void removeExtensionReceiverAnnotation(int index) {
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Function prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Function}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Function, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Function)
        org.jetbrains.kotlin.metadata.ProtoBuf.FunctionOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Function.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isOperator
       * isInfix
       * isInline
       * isTailrec
       * isExternal
       * isSuspend
       * isExpect
       * hasNonStableParameterNames
       * </pre>
       *
       * <code>int32 flags = 9 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @return Whether the oldFlags field is set.
       */
      @java.lang.Override
      public boolean hasOldFlags() {
        return instance.hasOldFlags();
      }
      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @return The oldFlags.
       */
      @java.lang.Override
      public int getOldFlags() {
        return instance.getOldFlags();
      }
      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @param value The oldFlags to set.
       * @return This builder for chaining.
       */
      public Builder setOldFlags(int value) {
        copyOnWrite();
        instance.setOldFlags(value);
        return this;
      }
      /**
       * <code>int32 old_flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearOldFlags() {
        copyOnWrite();
        instance.clearOldFlags();
        return this;
      }

      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return instance.getName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      @java.lang.Override
      public boolean hasReturnType() {
        return instance.hasReturnType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
        return instance.getReturnType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setReturnType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setReturnType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder mergeReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeReturnType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder clearReturnType() {  copyOnWrite();
        instance.clearReturnType();
        return this;
      }

      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the returnTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReturnTypeId() {
        return instance.hasReturnTypeId();
      }
      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The returnTypeId.
       */
      @java.lang.Override
      public int getReturnTypeId() {
        return instance.getReturnTypeId();
      }
      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The returnTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReturnTypeId(int value) {
        copyOnWrite();
        instance.setReturnTypeId(value);
        return this;
      }
      /**
       * <code>int32 return_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReturnTypeId() {
        copyOnWrite();
        instance.clearReturnTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      @java.lang.Override
      public int getTypeParameterCount() {
        return instance.getTypeParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        return instance.getTypeParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.setTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        copyOnWrite();
        instance.addAllTypeParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder clearTypeParameter() {
        copyOnWrite();
        instance.clearTypeParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder removeTypeParameter(int index) {
        copyOnWrite();
        instance.removeTypeParameter(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      @java.lang.Override
      public boolean hasReceiverType() {
        return instance.hasReceiverType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
        return instance.getReceiverType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setReceiverType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setReceiverType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder mergeReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeReceiverType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder clearReceiverType() {  copyOnWrite();
        instance.clearReceiverType();
        return this;
      }

      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the receiverTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReceiverTypeId() {
        return instance.hasReceiverTypeId();
      }
      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The receiverTypeId.
       */
      @java.lang.Override
      public int getReceiverTypeId() {
        return instance.getReceiverTypeId();
      }
      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The receiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReceiverTypeId(int value) {
        copyOnWrite();
        instance.setReceiverTypeId(value);
        return this;
      }
      /**
       * <code>int32 receiver_type_id = 8 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReceiverTypeId() {
        copyOnWrite();
        instance.clearReceiverTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextReceiverTypeList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      @java.lang.Override
      public int getContextReceiverTypeCount() {
        return instance.getContextReceiverTypeCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
        return instance.getContextReceiverType(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setContextReceiverType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setContextReceiverType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addContextReceiverType(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addContextReceiverType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addContextReceiverType(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addContextReceiverType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder addAllContextReceiverType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        copyOnWrite();
        instance.addAllContextReceiverType(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder clearContextReceiverType() {
        copyOnWrite();
        instance.clearContextReceiverType();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 10;</code>
       */
      public Builder removeContextReceiverType(int index) {
        copyOnWrite();
        instance.removeContextReceiverType(index);
        return this;
      }

      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the contextReceiverTypeId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getContextReceiverTypeIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextReceiverTypeIdList());
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of contextReceiverTypeId.
       */
      @java.lang.Override
      public int getContextReceiverTypeIdCount() {
        return instance.getContextReceiverTypeIdCount();
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The contextReceiverTypeId at the given index.
       */
      @java.lang.Override
      public int getContextReceiverTypeId(int index) {
        return instance.getContextReceiverTypeId(index);
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setContextReceiverTypeId(
          int index, int value) {
        copyOnWrite();
        instance.setContextReceiverTypeId(index, value);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addContextReceiverTypeId(int value) {
        copyOnWrite();
        instance.addContextReceiverTypeId(value);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllContextReceiverTypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllContextReceiverTypeId(values);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 11 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearContextReceiverTypeId() {
        copyOnWrite();
        instance.clearContextReceiverTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      @java.lang.Override
      public int getContextParameterCount() {
        return instance.getContextParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
        return instance.getContextParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.setContextParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setContextParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addContextParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addContextParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addContextParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addContextParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder addAllContextParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        copyOnWrite();
        instance.addAllContextParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder clearContextParameter() {
        copyOnWrite();
        instance.clearContextParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 13;</code>
       */
      public Builder removeContextParameter(int index) {
        copyOnWrite();
        instance.removeContextParameter(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getValueParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getValueParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      @java.lang.Override
      public int getValueParameterCount() {
        return instance.getValueParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getValueParameter(int index) {
        return instance.getValueParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.setValueParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder setValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setValueParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addValueParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addValueParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addValueParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addValueParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addValueParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder addAllValueParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        copyOnWrite();
        instance.addAllValueParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder clearValueParameter() {
        copyOnWrite();
        instance.clearValueParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter value_parameter = 6;</code>
       */
      public Builder removeValueParameter(int index) {
        copyOnWrite();
        instance.removeValueParameter(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      @java.lang.Override
      public boolean hasTypeTable() {
        return instance.hasTypeTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable getTypeTable() {
        return instance.getTypeTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        copyOnWrite();
        instance.setTypeTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.metadata.ProtoBuf.TypeTable value) {
        copyOnWrite();
        instance.mergeTypeTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.TypeTable type_table = 30;</code>
       */
      public Builder clearTypeTable() {  copyOnWrite();
        instance.clearTypeTable();
        return this;
      }

      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        return java.util.Collections.unmodifiableList(
            instance.getVersionRequirementList());
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      @java.lang.Override
      public int getVersionRequirementCount() {
        return instance.getVersionRequirementCount();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      @java.lang.Override
      public int getVersionRequirement(int index) {
        return instance.getVersionRequirement(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {
        copyOnWrite();
        instance.setVersionRequirement(index, value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {
        copyOnWrite();
        instance.addVersionRequirement(value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllVersionRequirement(values);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        copyOnWrite();
        instance.clearVersionRequirement();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      @java.lang.Override
      public boolean hasContract() {
        return instance.hasContract();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Contract getContract() {
        return instance.getContract();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder setContract(org.jetbrains.kotlin.metadata.ProtoBuf.Contract value) {
        copyOnWrite();
        instance.setContract(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder setContract(
          org.jetbrains.kotlin.metadata.ProtoBuf.Contract.Builder builderForValue) {
        copyOnWrite();
        instance.setContract(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder mergeContract(org.jetbrains.kotlin.metadata.ProtoBuf.Contract value) {
        copyOnWrite();
        instance.mergeContract(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Contract contract = 32;</code>
       */
      public Builder clearContract() {  copyOnWrite();
        instance.clearContract();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        return java.util.Collections.unmodifiableList(
            instance.getCompilerPluginDataList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      @java.lang.Override
      public int getCompilerPluginDataCount() {
        return instance.getCompilerPluginDataCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        return instance.getCompilerPluginData(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.setCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.setCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        copyOnWrite();
        instance.addAllCompilerPluginData(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder clearCompilerPluginData() {
        copyOnWrite();
        instance.clearCompilerPluginData();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 33;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        copyOnWrite();
        instance.removeCompilerPluginData(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 12;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getExtensionReceiverAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      @java.lang.Override
      public int getExtensionReceiverAnnotationCount() {
        return instance.getExtensionReceiverAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
        return instance.getExtensionReceiverAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setExtensionReceiverAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setExtensionReceiverAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder addAllExtensionReceiverAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllExtensionReceiverAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder clearExtensionReceiverAnnotation() {
        copyOnWrite();
        instance.clearExtensionReceiverAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 34;</code>
       */
      public Builder removeExtensionReceiverAnnotation(int index) {
        copyOnWrite();
        instance.removeExtensionReceiverAnnotation(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Function)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Function();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "oldFlags_",
              "name_",
              "returnType_",
              "typeParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.class,
              "receiverType_",
              "valueParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.class,
              "returnTypeId_",
              "receiverTypeId_",
              "flags_",
              "contextReceiverType_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.class,
              "contextReceiverTypeId_",
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "contextParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.class,
              "typeTable_",
              "versionRequirement_",
              "contract_",
              "compilerPluginData_",
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class,
              "extensionReceiverAnnotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
            };
            java.lang.String info =
                "\u0004\u0012\u0000\u0001\u0001\"\u0012\u0000\t\f\u0001\u1004\u0001\u0002\u1504\u0002" +
                "\u0003\u1409\u0003\u0004\u041b\u0005\u1409\u0005\u0006\u041b\u0007\u1004\u0004\b" +
                "\u1004\u0006\t\u1004\u0000\n\u041b\u000b\'\f\u041b\r\u041b\u001e\u1409\u0007\u001f" +
                "\u0016 \u1409\b!\u041b\"\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Function> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Function.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Function>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Function)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Function DEFAULT_INSTANCE;
    static {
      Function defaultInstance = new Function();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Function.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Function getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Function> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Function> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PropertyOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Property)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Property, Property.Builder> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return Whether the oldFlags field is set.
     */
    boolean hasOldFlags();
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return The oldFlags.
     */
    int getOldFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return Whether the returnType field is set.
     */
    boolean hasReturnType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     * @return The returnType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType();

    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    boolean hasReturnTypeId();
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    int getReturnTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    int getTypeParameterCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return Whether the receiverType field is set.
     */
    boolean hasReceiverType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     * @return The receiverType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType();

    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    boolean hasReceiverTypeId();
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    int getReceiverTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> 
        getContextReceiverTypeList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    int getContextReceiverTypeCount();

    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    java.util.List<java.lang.Integer> getContextReceiverTypeIdList();
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    int getContextReceiverTypeIdCount();
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    int getContextReceiverTypeId(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> 
        getContextParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    int getContextParameterCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     * @return Whether the setterValueParameter field is set.
     */
    boolean hasSetterValueParameter();
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     * @return The setterValueParameter.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getSetterValueParameter();

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return Whether the getterFlags field is set.
     */
    boolean hasGetterFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return The getterFlags.
     */
    int getGetterFlags();

    /**
     * <code>int32 setter_flags = 8;</code>
     * @return Whether the setterFlags field is set.
     */
    boolean hasSetterFlags();
    /**
     * <code>int32 setter_flags = 8;</code>
     * @return The setterFlags.
     */
    int getSetterFlags();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    int getCompilerPluginDataCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    int getAnnotationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getGetterAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getGetterAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    int getGetterAnnotationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getSetterAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getSetterAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    int getSetterAnnotationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getExtensionReceiverAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    int getExtensionReceiverAnnotationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getBackingFieldAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getBackingFieldAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    int getBackingFieldAnnotationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getDelegateFieldAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDelegateFieldAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    int getDelegateFieldAnnotationCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Property}
   */
  public  static final class Property extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        Property, Property.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Property)
      PropertyOrBuilder {
    private Property() {
      flags_ = 518;
      oldFlags_ = 2054;
      typeParameter_ = emptyProtobufList();
      contextReceiverType_ = emptyProtobufList();
      contextReceiverTypeId_ = emptyIntList();
      contextParameter_ = emptyProtobufList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = emptyProtobufList();
      annotation_ = emptyProtobufList();
      getterAnnotation_ = emptyProtobufList();
      setterAnnotation_ = emptyProtobufList();
      extensionReceiverAnnotation_ = emptyProtobufList();
      backingFieldAnnotation_ = emptyProtobufList();
      delegateFieldAnnotation_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 11;
    private int flags_;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00000001;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * MemberKind
     * isVar
     * hasGetter
     * hasSetter
     * isConst
     * isLateinit
     * hasConstant
     * isExternal
     * isDelegated
     * isExpect
     * </pre>
     *
     * <code>int32 flags = 11 [default = 518];</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000001);
      flags_ = 518;
    }

    public static final int OLD_FLAGS_FIELD_NUMBER = 1;
    private int oldFlags_;
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return Whether the oldFlags field is set.
     */
    @java.lang.Override
    public boolean hasOldFlags() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @return The oldFlags.
     */
    @java.lang.Override
    public int getOldFlags() {
      return oldFlags_;
    }
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     * @param value The oldFlags to set.
     */
    private void setOldFlags(int value) {
      bitField0_ |= 0x00000002;
      oldFlags_ = value;
    }
    /**
     * <code>int32 old_flags = 1 [default = 2054];</code>
     */
    private void clearOldFlags() {
      bitField0_ = (bitField0_ & ~0x00000002);
      oldFlags_ = 2054;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     */
    private void setName(int value) {
      bitField0_ |= 0x00000004;
      name_ = value;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000004);
      name_ = 0;
    }

    public static final int RETURN_TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type returnType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.Override
    public boolean hasReturnType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
      return returnType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : returnType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      returnType_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (returnType_ != null &&
          returnType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        returnType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(returnType_).mergeFrom(value).buildPartial();
      } else {
        returnType_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
     */
    private void clearReturnType() {  returnType_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static final int RETURN_TYPE_ID_FIELD_NUMBER = 9;
    private int returnTypeId_;
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the returnTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReturnTypeId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The returnTypeId.
     */
    @java.lang.Override
    public int getReturnTypeId() {
      return returnTypeId_;
    }
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The returnTypeId to set.
     */
    private void setReturnTypeId(int value) {
      bitField0_ |= 0x00000010;
      returnTypeId_ = value;
    }
    /**
     * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearReturnTypeId() {
      bitField0_ = (bitField0_ & ~0x00000010);
      returnTypeId_ = 0;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }
    private void ensureTypeParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> tmp = typeParameter_;
      if (!tmp.isModifiable()) {
        typeParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    private void addAllTypeParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
      ensureTypeParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, typeParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    private void clearTypeParameter() {
      typeParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
     */
    private void removeTypeParameter(int index) {
      ensureTypeParameterIsMutable();
      typeParameter_.remove(index);
    }

    public static final int RECEIVER_TYPE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type receiverType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.Override
    public boolean hasReceiverType() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
      return receiverType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : receiverType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      receiverType_ = value;
      bitField0_ |= 0x00000020;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (receiverType_ != null &&
          receiverType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        receiverType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(receiverType_).mergeFrom(value).buildPartial();
      } else {
        receiverType_ = value;
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
     */
    private void clearReceiverType() {  receiverType_ = null;
      bitField0_ = (bitField0_ & ~0x00000020);
    }

    public static final int RECEIVER_TYPE_ID_FIELD_NUMBER = 10;
    private int receiverTypeId_;
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the receiverTypeId field is set.
     */
    @java.lang.Override
    public boolean hasReceiverTypeId() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The receiverTypeId.
     */
    @java.lang.Override
    public int getReceiverTypeId() {
      return receiverTypeId_;
    }
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The receiverTypeId to set.
     */
    private void setReceiverTypeId(int value) {
      bitField0_ |= 0x00000040;
      receiverTypeId_ = value;
    }
    /**
     * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearReceiverTypeId() {
      bitField0_ = (bitField0_ & ~0x00000040);
      receiverTypeId_ = 0;
    }

    public static final int CONTEXT_RECEIVER_TYPE_FIELD_NUMBER = 12;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> contextReceiverType_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder> 
        getContextReceiverTypeOrBuilderList() {
      return contextReceiverType_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public int getContextReceiverTypeCount() {
      return contextReceiverType_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
      return contextReceiverType_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeOrBuilder getContextReceiverTypeOrBuilder(
        int index) {
      return contextReceiverType_.get(index);
    }
    private void ensureContextReceiverTypeIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Type> tmp = contextReceiverType_;
      if (!tmp.isModifiable()) {
        contextReceiverType_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setContextReceiverType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextReceiverType(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    private void addAllContextReceiverType(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
      ensureContextReceiverTypeIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextReceiverType_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    private void clearContextReceiverType() {
      contextReceiverType_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
     */
    private void removeContextReceiverType(int index) {
      ensureContextReceiverTypeIsMutable();
      contextReceiverType_.remove(index);
    }

    public static final int CONTEXT_RECEIVER_TYPE_ID_FIELD_NUMBER = 13;
    private org.jetbrains.kotlin.protobuf.Internal.IntList contextReceiverTypeId_;
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return A list containing the contextReceiverTypeId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getContextReceiverTypeIdList() {
      return contextReceiverTypeId_;
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The count of contextReceiverTypeId.
     */
    @java.lang.Override
    public int getContextReceiverTypeIdCount() {
      return contextReceiverTypeId_.size();
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index of the element to return.
     * @return The contextReceiverTypeId at the given index.
     */
    @java.lang.Override
    public int getContextReceiverTypeId(int index) {
      return contextReceiverTypeId_.getInt(index);
    }
    private int contextReceiverTypeIdMemoizedSerializedSize = -1;
    private void ensureContextReceiverTypeIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = contextReceiverTypeId_;
      if (!tmp.isModifiable()) {
        contextReceiverTypeId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param index The index to set the value at.
     * @param value The contextReceiverTypeId to set.
     */
    private void setContextReceiverTypeId(
        int index, int value) {
      ensureContextReceiverTypeIdIsMutable();
      contextReceiverTypeId_.setInt(index, value);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The contextReceiverTypeId to add.
     */
    private void addContextReceiverTypeId(int value) {
      ensureContextReceiverTypeIdIsMutable();
      contextReceiverTypeId_.addInt(value);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param values The contextReceiverTypeId to add.
     */
    private void addAllContextReceiverTypeId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureContextReceiverTypeIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextReceiverTypeId_);
    }
    /**
     * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearContextReceiverTypeId() {
      contextReceiverTypeId_ = emptyIntList();
    }

    public static final int CONTEXT_PARAMETER_FIELD_NUMBER = 17;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> contextParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder> 
        getContextParameterOrBuilderList() {
      return contextParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public int getContextParameterCount() {
      return contextParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
      return contextParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder getContextParameterOrBuilder(
        int index) {
      return contextParameter_.get(index);
    }
    private void ensureContextParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> tmp = contextParameter_;
      if (!tmp.isModifiable()) {
        contextParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setContextParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureContextParameterIsMutable();
      contextParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureContextParameterIsMutable();
      contextParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addContextParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureContextParameterIsMutable();
      contextParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    private void addAllContextParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
      ensureContextParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, contextParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    private void clearContextParameter() {
      contextParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
     */
    private void removeContextParameter(int index) {
      ensureContextParameterIsMutable();
      contextParameter_.remove(index);
    }

    public static final int SETTER_VALUE_PARAMETER_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter setterValueParameter_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    @java.lang.Override
    public boolean hasSetterValueParameter() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getSetterValueParameter() {
      return setterValueParameter_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance() : setterValueParameter_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSetterValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      setterValueParameter_ = value;
      bitField0_ |= 0x00000080;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeSetterValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
      value.getClass();  // minimal bytecode null check
      if (setterValueParameter_ != null &&
          setterValueParameter_ != org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.getDefaultInstance()) {
        setterValueParameter_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.newBuilder(setterValueParameter_).mergeFrom(value).buildPartial();
      } else {
        setterValueParameter_ = value;
      }
      bitField0_ |= 0x00000080;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
     */
    private void clearSetterValueParameter() {  setterValueParameter_ = null;
      bitField0_ = (bitField0_ & ~0x00000080);
    }

    public static final int GETTER_FLAGS_FIELD_NUMBER = 7;
    private int getterFlags_;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return Whether the getterFlags field is set.
     */
    @java.lang.Override
    public boolean hasGetterFlags() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @return The getterFlags.
     */
    @java.lang.Override
    public int getGetterFlags() {
      return getterFlags_;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     * @param value The getterFlags to set.
     */
    private void setGetterFlags(int value) {
      bitField0_ |= 0x00000100;
      getterFlags_ = value;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * Modality
     * isNotDefault
     * isExternal
     * isInline
     *
     * If getter_flags or setter_flags are absent, their value should be computed as follows:
     * - hasAnnotations, Visibility, Modality have the same value as in the property flags
     * - all other flags are false
     * </pre>
     *
     * <code>int32 getter_flags = 7;</code>
     */
    private void clearGetterFlags() {
      bitField0_ = (bitField0_ & ~0x00000100);
      getterFlags_ = 0;
    }

    public static final int SETTER_FLAGS_FIELD_NUMBER = 8;
    private int setterFlags_;
    /**
     * <code>int32 setter_flags = 8;</code>
     * @return Whether the setterFlags field is set.
     */
    @java.lang.Override
    public boolean hasSetterFlags() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>int32 setter_flags = 8;</code>
     * @return The setterFlags.
     */
    @java.lang.Override
    public int getSetterFlags() {
      return setterFlags_;
    }
    /**
     * <code>int32 setter_flags = 8;</code>
     * @param value The setterFlags to set.
     */
    private void setSetterFlags(int value) {
      bitField0_ |= 0x00000200;
      setterFlags_ = value;
    }
    /**
     * <code>int32 setter_flags = 8;</code>
     */
    private void clearSetterFlags() {
      bitField0_ = (bitField0_ & ~0x00000200);
      setterFlags_ = 0;
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_;
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    @java.lang.Override
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    @java.lang.Override
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }
    private void ensureVersionRequirementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = versionRequirement_;
      if (!tmp.isModifiable()) {
        versionRequirement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The versionRequirement to set.
     */
    private void setVersionRequirement(
        int index, int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.setInt(index, value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param value The versionRequirement to add.
     */
    private void addVersionRequirement(int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.addInt(value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param values The versionRequirement to add.
     */
    private void addAllVersionRequirement(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureVersionRequirementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, versionRequirement_);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     */
    private void clearVersionRequirement() {
      versionRequirement_ = emptyIntList();
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }
    private void ensureCompilerPluginDataIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> tmp = compilerPluginData_;
      if (!tmp.isModifiable()) {
        compilerPluginData_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void addAllCompilerPluginData(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
      ensureCompilerPluginDataIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, compilerPluginData_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void clearCompilerPluginData() {
      compilerPluginData_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void removeCompilerPluginData(int index) {
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.remove(index);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 14;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static final int GETTER_ANNOTATION_FIELD_NUMBER = 15;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getterAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getGetterAnnotationList() {
      return getterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getGetterAnnotationOrBuilderList() {
      return getterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public int getGetterAnnotationCount() {
      return getterAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getGetterAnnotation(int index) {
      return getterAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getGetterAnnotationOrBuilder(
        int index) {
      return getterAnnotation_.get(index);
    }
    private void ensureGetterAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = getterAnnotation_;
      if (!tmp.isModifiable()) {
        getterAnnotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setGetterAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureGetterAnnotationIsMutable();
      getterAnnotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addGetterAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureGetterAnnotationIsMutable();
      getterAnnotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addGetterAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureGetterAnnotationIsMutable();
      getterAnnotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    private void addAllGetterAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureGetterAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, getterAnnotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    private void clearGetterAnnotation() {
      getterAnnotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
     */
    private void removeGetterAnnotation(int index) {
      ensureGetterAnnotationIsMutable();
      getterAnnotation_.remove(index);
    }

    public static final int SETTER_ANNOTATION_FIELD_NUMBER = 16;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> setterAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getSetterAnnotationList() {
      return setterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getSetterAnnotationOrBuilderList() {
      return setterAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public int getSetterAnnotationCount() {
      return setterAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getSetterAnnotation(int index) {
      return setterAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getSetterAnnotationOrBuilder(
        int index) {
      return setterAnnotation_.get(index);
    }
    private void ensureSetterAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = setterAnnotation_;
      if (!tmp.isModifiable()) {
        setterAnnotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setSetterAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureSetterAnnotationIsMutable();
      setterAnnotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addSetterAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureSetterAnnotationIsMutable();
      setterAnnotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addSetterAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureSetterAnnotationIsMutable();
      setterAnnotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    private void addAllSetterAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureSetterAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, setterAnnotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    private void clearSetterAnnotation() {
      setterAnnotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
     */
    private void removeSetterAnnotation(int index) {
      ensureSetterAnnotationIsMutable();
      setterAnnotation_.remove(index);
    }

    public static final int EXTENSION_RECEIVER_ANNOTATION_FIELD_NUMBER = 33;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> extensionReceiverAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getExtensionReceiverAnnotationOrBuilderList() {
      return extensionReceiverAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public int getExtensionReceiverAnnotationCount() {
      return extensionReceiverAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
      return extensionReceiverAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getExtensionReceiverAnnotationOrBuilder(
        int index) {
      return extensionReceiverAnnotation_.get(index);
    }
    private void ensureExtensionReceiverAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = extensionReceiverAnnotation_;
      if (!tmp.isModifiable()) {
        extensionReceiverAnnotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExtensionReceiverAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addExtensionReceiverAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addExtensionReceiverAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    private void addAllExtensionReceiverAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureExtensionReceiverAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, extensionReceiverAnnotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    private void clearExtensionReceiverAnnotation() {
      extensionReceiverAnnotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
     */
    private void removeExtensionReceiverAnnotation(int index) {
      ensureExtensionReceiverAnnotationIsMutable();
      extensionReceiverAnnotation_.remove(index);
    }

    public static final int BACKING_FIELD_ANNOTATION_FIELD_NUMBER = 34;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> backingFieldAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getBackingFieldAnnotationList() {
      return backingFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getBackingFieldAnnotationOrBuilderList() {
      return backingFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public int getBackingFieldAnnotationCount() {
      return backingFieldAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getBackingFieldAnnotation(int index) {
      return backingFieldAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getBackingFieldAnnotationOrBuilder(
        int index) {
      return backingFieldAnnotation_.get(index);
    }
    private void ensureBackingFieldAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = backingFieldAnnotation_;
      if (!tmp.isModifiable()) {
        backingFieldAnnotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setBackingFieldAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureBackingFieldAnnotationIsMutable();
      backingFieldAnnotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBackingFieldAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureBackingFieldAnnotationIsMutable();
      backingFieldAnnotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addBackingFieldAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureBackingFieldAnnotationIsMutable();
      backingFieldAnnotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    private void addAllBackingFieldAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureBackingFieldAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, backingFieldAnnotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    private void clearBackingFieldAnnotation() {
      backingFieldAnnotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
     */
    private void removeBackingFieldAnnotation(int index) {
      ensureBackingFieldAnnotationIsMutable();
      backingFieldAnnotation_.remove(index);
    }

    public static final int DELEGATE_FIELD_ANNOTATION_FIELD_NUMBER = 35;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> delegateFieldAnnotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getDelegateFieldAnnotationList() {
      return delegateFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getDelegateFieldAnnotationOrBuilderList() {
      return delegateFieldAnnotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public int getDelegateFieldAnnotationCount() {
      return delegateFieldAnnotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDelegateFieldAnnotation(int index) {
      return delegateFieldAnnotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getDelegateFieldAnnotationOrBuilder(
        int index) {
      return delegateFieldAnnotation_.get(index);
    }
    private void ensureDelegateFieldAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = delegateFieldAnnotation_;
      if (!tmp.isModifiable()) {
        delegateFieldAnnotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setDelegateFieldAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureDelegateFieldAnnotationIsMutable();
      delegateFieldAnnotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addDelegateFieldAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureDelegateFieldAnnotationIsMutable();
      delegateFieldAnnotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addDelegateFieldAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureDelegateFieldAnnotationIsMutable();
      delegateFieldAnnotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    private void addAllDelegateFieldAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureDelegateFieldAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, delegateFieldAnnotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    private void clearDelegateFieldAnnotation() {
      delegateFieldAnnotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
     */
    private void removeDelegateFieldAnnotation(int index) {
      ensureDelegateFieldAnnotationIsMutable();
      delegateFieldAnnotation_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Property prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Property}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Property, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Property)
        org.jetbrains.kotlin.metadata.ProtoBuf.PropertyOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Property.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * MemberKind
       * isVar
       * hasGetter
       * hasSetter
       * isConst
       * isLateinit
       * hasConstant
       * isExternal
       * isDelegated
       * isExpect
       * </pre>
       *
       * <code>int32 flags = 11 [default = 518];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @return Whether the oldFlags field is set.
       */
      @java.lang.Override
      public boolean hasOldFlags() {
        return instance.hasOldFlags();
      }
      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @return The oldFlags.
       */
      @java.lang.Override
      public int getOldFlags() {
        return instance.getOldFlags();
      }
      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @param value The oldFlags to set.
       * @return This builder for chaining.
       */
      public Builder setOldFlags(int value) {
        copyOnWrite();
        instance.setOldFlags(value);
        return this;
      }
      /**
       * <code>int32 old_flags = 1 [default = 2054];</code>
       * @return This builder for chaining.
       */
      public Builder clearOldFlags() {
        copyOnWrite();
        instance.clearOldFlags();
        return this;
      }

      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return instance.getName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      @java.lang.Override
      public boolean hasReturnType() {
        return instance.hasReturnType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReturnType() {
        return instance.getReturnType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setReturnType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder setReturnType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setReturnType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder mergeReturnType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeReturnType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type return_type = 3;</code>
       */
      public Builder clearReturnType() {  copyOnWrite();
        instance.clearReturnType();
        return this;
      }

      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the returnTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReturnTypeId() {
        return instance.hasReturnTypeId();
      }
      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The returnTypeId.
       */
      @java.lang.Override
      public int getReturnTypeId() {
        return instance.getReturnTypeId();
      }
      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The returnTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReturnTypeId(int value) {
        copyOnWrite();
        instance.setReturnTypeId(value);
        return this;
      }
      /**
       * <code>int32 return_type_id = 9 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReturnTypeId() {
        copyOnWrite();
        instance.clearReturnTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      @java.lang.Override
      public int getTypeParameterCount() {
        return instance.getTypeParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        return instance.getTypeParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.setTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        copyOnWrite();
        instance.addAllTypeParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder clearTypeParameter() {
        copyOnWrite();
        instance.clearTypeParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 4;</code>
       */
      public Builder removeTypeParameter(int index) {
        copyOnWrite();
        instance.removeTypeParameter(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      @java.lang.Override
      public boolean hasReceiverType() {
        return instance.hasReceiverType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getReceiverType() {
        return instance.getReceiverType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setReceiverType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder setReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setReceiverType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder mergeReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeReceiverType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type receiver_type = 5;</code>
       */
      public Builder clearReceiverType() {  copyOnWrite();
        instance.clearReceiverType();
        return this;
      }

      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the receiverTypeId field is set.
       */
      @java.lang.Override
      public boolean hasReceiverTypeId() {
        return instance.hasReceiverTypeId();
      }
      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The receiverTypeId.
       */
      @java.lang.Override
      public int getReceiverTypeId() {
        return instance.getReceiverTypeId();
      }
      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The receiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setReceiverTypeId(int value) {
        copyOnWrite();
        instance.setReceiverTypeId(value);
        return this;
      }
      /**
       * <code>int32 receiver_type_id = 10 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearReceiverTypeId() {
        copyOnWrite();
        instance.clearReceiverTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Type> getContextReceiverTypeList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextReceiverTypeList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      @java.lang.Override
      public int getContextReceiverTypeCount() {
        return instance.getContextReceiverTypeCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getContextReceiverType(int index) {
        return instance.getContextReceiverType(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setContextReceiverType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder setContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setContextReceiverType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addContextReceiverType(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.addContextReceiverType(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addContextReceiverType(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addContextReceiverType(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.addContextReceiverType(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder addAllContextReceiverType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Type> values) {
        copyOnWrite();
        instance.addAllContextReceiverType(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder clearContextReceiverType() {
        copyOnWrite();
        instance.clearContextReceiverType();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Type context_receiver_type = 12;</code>
       */
      public Builder removeContextReceiverType(int index) {
        copyOnWrite();
        instance.removeContextReceiverType(index);
        return this;
      }

      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return A list containing the contextReceiverTypeId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getContextReceiverTypeIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextReceiverTypeIdList());
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The count of contextReceiverTypeId.
       */
      @java.lang.Override
      public int getContextReceiverTypeIdCount() {
        return instance.getContextReceiverTypeIdCount();
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param index The index of the element to return.
       * @return The contextReceiverTypeId at the given index.
       */
      @java.lang.Override
      public int getContextReceiverTypeId(int index) {
        return instance.getContextReceiverTypeId(index);
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setContextReceiverTypeId(
          int index, int value) {
        copyOnWrite();
        instance.setContextReceiverTypeId(index, value);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addContextReceiverTypeId(int value) {
        copyOnWrite();
        instance.addContextReceiverTypeId(value);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param values The contextReceiverTypeId to add.
       * @return This builder for chaining.
       */
      public Builder addAllContextReceiverTypeId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllContextReceiverTypeId(values);
        return this;
      }
      /**
       * <code>repeated int32 context_receiver_type_id = 13 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearContextReceiverTypeId() {
        copyOnWrite();
        instance.clearContextReceiverTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> getContextParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getContextParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      @java.lang.Override
      public int getContextParameterCount() {
        return instance.getContextParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getContextParameter(int index) {
        return instance.getContextParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.setContextParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder setContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setContextParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addContextParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.addContextParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addContextParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addContextParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addContextParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder addAllContextParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> values) {
        copyOnWrite();
        instance.addAllContextParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder clearContextParameter() {
        copyOnWrite();
        instance.clearContextParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.ValueParameter context_parameter = 17;</code>
       */
      public Builder removeContextParameter(int index) {
        copyOnWrite();
        instance.removeContextParameter(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      @java.lang.Override
      public boolean hasSetterValueParameter() {
        return instance.hasSetterValueParameter();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getSetterValueParameter() {
        return instance.getSetterValueParameter();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder setSetterValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.setSetterValueParameter(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder setSetterValueParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setSetterValueParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder mergeSetterValueParameter(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter value) {
        copyOnWrite();
        instance.mergeSetterValueParameter(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.ValueParameter setter_value_parameter = 6;</code>
       */
      public Builder clearSetterValueParameter() {  copyOnWrite();
        instance.clearSetterValueParameter();
        return this;
      }

      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @return Whether the getterFlags field is set.
       */
      @java.lang.Override
      public boolean hasGetterFlags() {
        return instance.hasGetterFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @return The getterFlags.
       */
      @java.lang.Override
      public int getGetterFlags() {
        return instance.getGetterFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @param value The getterFlags to set.
       * @return This builder for chaining.
       */
      public Builder setGetterFlags(int value) {
        copyOnWrite();
        instance.setGetterFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * Modality
       * isNotDefault
       * isExternal
       * isInline
       *
       * If getter_flags or setter_flags are absent, their value should be computed as follows:
       * - hasAnnotations, Visibility, Modality have the same value as in the property flags
       * - all other flags are false
       * </pre>
       *
       * <code>int32 getter_flags = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearGetterFlags() {
        copyOnWrite();
        instance.clearGetterFlags();
        return this;
      }

      /**
       * <code>int32 setter_flags = 8;</code>
       * @return Whether the setterFlags field is set.
       */
      @java.lang.Override
      public boolean hasSetterFlags() {
        return instance.hasSetterFlags();
      }
      /**
       * <code>int32 setter_flags = 8;</code>
       * @return The setterFlags.
       */
      @java.lang.Override
      public int getSetterFlags() {
        return instance.getSetterFlags();
      }
      /**
       * <code>int32 setter_flags = 8;</code>
       * @param value The setterFlags to set.
       * @return This builder for chaining.
       */
      public Builder setSetterFlags(int value) {
        copyOnWrite();
        instance.setSetterFlags(value);
        return this;
      }
      /**
       * <code>int32 setter_flags = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearSetterFlags() {
        copyOnWrite();
        instance.clearSetterFlags();
        return this;
      }

      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        return java.util.Collections.unmodifiableList(
            instance.getVersionRequirementList());
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      @java.lang.Override
      public int getVersionRequirementCount() {
        return instance.getVersionRequirementCount();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      @java.lang.Override
      public int getVersionRequirement(int index) {
        return instance.getVersionRequirement(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {
        copyOnWrite();
        instance.setVersionRequirement(index, value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {
        copyOnWrite();
        instance.addVersionRequirement(value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllVersionRequirement(values);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        copyOnWrite();
        instance.clearVersionRequirement();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        return java.util.Collections.unmodifiableList(
            instance.getCompilerPluginDataList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public int getCompilerPluginDataCount() {
        return instance.getCompilerPluginDataCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        return instance.getCompilerPluginData(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.setCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.setCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        copyOnWrite();
        instance.addAllCompilerPluginData(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder clearCompilerPluginData() {
        copyOnWrite();
        instance.clearCompilerPluginData();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        copyOnWrite();
        instance.removeCompilerPluginData(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 14;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getGetterAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getGetterAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      @java.lang.Override
      public int getGetterAnnotationCount() {
        return instance.getGetterAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getGetterAnnotation(int index) {
        return instance.getGetterAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder setGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setGetterAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder setGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setGetterAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addGetterAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addGetterAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addGetterAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addGetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addGetterAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder addAllGetterAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllGetterAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder clearGetterAnnotation() {
        copyOnWrite();
        instance.clearGetterAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation getter_annotation = 15;</code>
       */
      public Builder removeGetterAnnotation(int index) {
        copyOnWrite();
        instance.removeGetterAnnotation(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getSetterAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getSetterAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      @java.lang.Override
      public int getSetterAnnotationCount() {
        return instance.getSetterAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getSetterAnnotation(int index) {
        return instance.getSetterAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder setSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setSetterAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder setSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setSetterAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addSetterAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addSetterAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addSetterAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addSetterAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addSetterAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder addAllSetterAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllSetterAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder clearSetterAnnotation() {
        copyOnWrite();
        instance.clearSetterAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation setter_annotation = 16;</code>
       */
      public Builder removeSetterAnnotation(int index) {
        copyOnWrite();
        instance.removeSetterAnnotation(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getExtensionReceiverAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getExtensionReceiverAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      @java.lang.Override
      public int getExtensionReceiverAnnotationCount() {
        return instance.getExtensionReceiverAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getExtensionReceiverAnnotation(int index) {
        return instance.getExtensionReceiverAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setExtensionReceiverAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder setExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setExtensionReceiverAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addExtensionReceiverAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addExtensionReceiverAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder addAllExtensionReceiverAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllExtensionReceiverAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder clearExtensionReceiverAnnotation() {
        copyOnWrite();
        instance.clearExtensionReceiverAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation extension_receiver_annotation = 33;</code>
       */
      public Builder removeExtensionReceiverAnnotation(int index) {
        copyOnWrite();
        instance.removeExtensionReceiverAnnotation(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getBackingFieldAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getBackingFieldAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      @java.lang.Override
      public int getBackingFieldAnnotationCount() {
        return instance.getBackingFieldAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getBackingFieldAnnotation(int index) {
        return instance.getBackingFieldAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder setBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setBackingFieldAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder setBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setBackingFieldAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addBackingFieldAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addBackingFieldAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addBackingFieldAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addBackingFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addBackingFieldAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder addAllBackingFieldAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllBackingFieldAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder clearBackingFieldAnnotation() {
        copyOnWrite();
        instance.clearBackingFieldAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation backing_field_annotation = 34;</code>
       */
      public Builder removeBackingFieldAnnotation(int index) {
        copyOnWrite();
        instance.removeBackingFieldAnnotation(index);
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getDelegateFieldAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getDelegateFieldAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      @java.lang.Override
      public int getDelegateFieldAnnotationCount() {
        return instance.getDelegateFieldAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getDelegateFieldAnnotation(int index) {
        return instance.getDelegateFieldAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder setDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setDelegateFieldAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder setDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setDelegateFieldAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addDelegateFieldAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addDelegateFieldAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addDelegateFieldAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addDelegateFieldAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addDelegateFieldAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder addAllDelegateFieldAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllDelegateFieldAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder clearDelegateFieldAnnotation() {
        copyOnWrite();
        instance.clearDelegateFieldAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation delegate_field_annotation = 35;</code>
       */
      public Builder removeDelegateFieldAnnotation(int index) {
        copyOnWrite();
        instance.removeDelegateFieldAnnotation(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Property)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Property();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "oldFlags_",
              "name_",
              "returnType_",
              "typeParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.class,
              "receiverType_",
              "setterValueParameter_",
              "getterFlags_",
              "setterFlags_",
              "returnTypeId_",
              "receiverTypeId_",
              "flags_",
              "contextReceiverType_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Type.class,
              "contextReceiverTypeId_",
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "getterAnnotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "setterAnnotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "contextParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.class,
              "versionRequirement_",
              "compilerPluginData_",
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class,
              "extensionReceiverAnnotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "backingFieldAnnotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "delegateFieldAnnotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
            };
            java.lang.String info =
                "\u0004\u0016\u0000\u0001\u0001#\u0016\u0000\f\u000e\u0001\u1004\u0001\u0002\u1504" +
                "\u0002\u0003\u1409\u0003\u0004\u041b\u0005\u1409\u0005\u0006\u1409\u0007\u0007\u1004" +
                "\b\b\u1004\t\t\u1004\u0004\n\u1004\u0006\u000b\u1004\u0000\f\u041b\r\'\u000e\u041b" +
                "\u000f\u041b\u0010\u041b\u0011\u041b\u001f\u0016 \u041b!\u041b\"\u041b#\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Property> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Property.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Property>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Property)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Property DEFAULT_INSTANCE;
    static {
      Property defaultInstance = new Property();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Property.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Property getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Property> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Property> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ValueParameterOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.ValueParameter)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                ValueParameter, ValueParameter.Builder> {

    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     * @return The type.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getType();

    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the typeId field is set.
     */
    boolean hasTypeId();
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The typeId.
     */
    int getTypeId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     * @return Whether the varargElementType field is set.
     */
    boolean hasVarargElementType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     * @return The varargElementType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getVarargElementType();

    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the varargElementTypeId field is set.
     */
    boolean hasVarargElementTypeId();
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The varargElementTypeId.
     */
    int getVarargElementTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    int getAnnotationCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     * @return Whether the annotationParameterDefaultValue field is set.
     */
    boolean hasAnnotationParameterDefaultValue();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     * @return The annotationParameterDefaultValue.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getAnnotationParameterDefaultValue();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.ValueParameter}
   */
  public  static final class ValueParameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        ValueParameter, ValueParameter.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.ValueParameter)
      ValueParameterOrBuilder {
    private ValueParameter() {
      annotation_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00000001;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * declaresDefault
     * isCrossinline
     * isNoinline
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000001);
      flags_ = 0;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     */
    private void setName(int value) {
      bitField0_ |= 0x00000002;
      name_ = value;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      name_ = 0;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type type_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    @java.lang.Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
      return type_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : type_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      type_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (type_ != null &&
          type_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        type_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(type_).mergeFrom(value).buildPartial();
      } else {
        type_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
     */
    private void clearType() {  type_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int TYPE_ID_FIELD_NUMBER = 5;
    private int typeId_;
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the typeId field is set.
     */
    @java.lang.Override
    public boolean hasTypeId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The typeId.
     */
    @java.lang.Override
    public int getTypeId() {
      return typeId_;
    }
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The typeId to set.
     */
    private void setTypeId(int value) {
      bitField0_ |= 0x00000008;
      typeId_ = value;
    }
    /**
     * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearTypeId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      typeId_ = 0;
    }

    public static final int VARARG_ELEMENT_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type varargElementType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    @java.lang.Override
    public boolean hasVarargElementType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getVarargElementType() {
      return varargElementType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : varargElementType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setVarargElementType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      varargElementType_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeVarargElementType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (varargElementType_ != null &&
          varargElementType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        varargElementType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(varargElementType_).mergeFrom(value).buildPartial();
      } else {
        varargElementType_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
     */
    private void clearVarargElementType() {  varargElementType_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int VARARG_ELEMENT_TYPE_ID_FIELD_NUMBER = 6;
    private int varargElementTypeId_;
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the varargElementTypeId field is set.
     */
    @java.lang.Override
    public boolean hasVarargElementTypeId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The varargElementTypeId.
     */
    @java.lang.Override
    public int getVarargElementTypeId() {
      return varargElementTypeId_;
    }
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The varargElementTypeId to set.
     */
    private void setVarargElementTypeId(int value) {
      bitField0_ |= 0x00000020;
      varargElementTypeId_ = value;
    }
    /**
     * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearVarargElementTypeId() {
      bitField0_ = (bitField0_ & ~0x00000020);
      varargElementTypeId_ = 0;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static final int ANNOTATION_PARAMETER_DEFAULT_VALUE_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value annotationParameterDefaultValue_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     */
    @java.lang.Override
    public boolean hasAnnotationParameterDefaultValue() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getAnnotationParameterDefaultValue() {
      return annotationParameterDefaultValue_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance() : annotationParameterDefaultValue_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotationParameterDefaultValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
      value.getClass();  // minimal bytecode null check
      annotationParameterDefaultValue_ = value;
      bitField0_ |= 0x00000040;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeAnnotationParameterDefaultValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
      value.getClass();  // minimal bytecode null check
      if (annotationParameterDefaultValue_ != null &&
          annotationParameterDefaultValue_ != org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.getDefaultInstance()) {
        annotationParameterDefaultValue_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.newBuilder(annotationParameterDefaultValue_).mergeFrom(value).buildPartial();
      } else {
        annotationParameterDefaultValue_ = value;
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
     */
    private void clearAnnotationParameterDefaultValue() {  annotationParameterDefaultValue_ = null;
      bitField0_ = (bitField0_ & ~0x00000040);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.ValueParameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.ValueParameter)
        org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameterOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * declaresDefault
       * isCrossinline
       * isNoinline
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return instance.getName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      @java.lang.Override
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getType() {
        return instance.getType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder setType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder setType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder mergeType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type type = 3;</code>
       */
      public Builder clearType() {  copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the typeId field is set.
       */
      @java.lang.Override
      public boolean hasTypeId() {
        return instance.hasTypeId();
      }
      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The typeId.
       */
      @java.lang.Override
      public int getTypeId() {
        return instance.getTypeId();
      }
      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The typeId to set.
       * @return This builder for chaining.
       */
      public Builder setTypeId(int value) {
        copyOnWrite();
        instance.setTypeId(value);
        return this;
      }
      /**
       * <code>int32 type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeId() {
        copyOnWrite();
        instance.clearTypeId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      @java.lang.Override
      public boolean hasVarargElementType() {
        return instance.hasVarargElementType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getVarargElementType() {
        return instance.getVarargElementType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder setVarargElementType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setVarargElementType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder setVarargElementType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setVarargElementType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder mergeVarargElementType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeVarargElementType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type vararg_element_type = 4;</code>
       */
      public Builder clearVarargElementType() {  copyOnWrite();
        instance.clearVarargElementType();
        return this;
      }

      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the varargElementTypeId field is set.
       */
      @java.lang.Override
      public boolean hasVarargElementTypeId() {
        return instance.hasVarargElementTypeId();
      }
      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The varargElementTypeId.
       */
      @java.lang.Override
      public int getVarargElementTypeId() {
        return instance.getVarargElementTypeId();
      }
      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The varargElementTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setVarargElementTypeId(int value) {
        copyOnWrite();
        instance.setVarargElementTypeId(value);
        return this;
      }
      /**
       * <code>int32 vararg_element_type_id = 6 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearVarargElementTypeId() {
        copyOnWrite();
        instance.clearVarargElementTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 7;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      @java.lang.Override
      public boolean hasAnnotationParameterDefaultValue() {
        return instance.hasAnnotationParameterDefaultValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value getAnnotationParameterDefaultValue() {
        return instance.getAnnotationParameterDefaultValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder setAnnotationParameterDefaultValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
        copyOnWrite();
        instance.setAnnotationParameterDefaultValue(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder setAnnotationParameterDefaultValue(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotationParameterDefaultValue(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder mergeAnnotationParameterDefaultValue(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Argument.Value value) {
        copyOnWrite();
        instance.mergeAnnotationParameterDefaultValue(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Annotation.Argument.Value annotation_parameter_default_value = 8;</code>
       */
      public Builder clearAnnotationParameterDefaultValue() {  copyOnWrite();
        instance.clearAnnotationParameterDefaultValue();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.ValueParameter)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "flags_",
              "name_",
              "type_",
              "varargElementType_",
              "typeId_",
              "varargElementTypeId_",
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "annotationParameterDefaultValue_",
            };
            java.lang.String info =
                "\u0004\b\u0000\u0001\u0001\b\b\u0000\u0001\u0005\u0001\u1004\u0000\u0002\u1504\u0001" +
                "\u0003\u1409\u0002\u0004\u1409\u0004\u0005\u1004\u0003\u0006\u1004\u0005\u0007\u041b" +
                "\b\u1409\u0006";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.ValueParameter)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter DEFAULT_INSTANCE;
    static {
      ValueParameter defaultInstance = new ValueParameter();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ValueParameter.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.ValueParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<ValueParameter> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<ValueParameter> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TypeAliasOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.TypeAlias)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                TypeAlias, TypeAlias.Builder> {

    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> 
        getTypeParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    int getTypeParameterCount();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     * @return Whether the underlyingType field is set.
     */
    boolean hasUnderlyingType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     * @return The underlyingType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getUnderlyingType();

    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the underlyingTypeId field is set.
     */
    boolean hasUnderlyingTypeId();
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The underlyingTypeId.
     */
    int getUnderlyingTypeId();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     * @return Whether the expandedType field is set.
     */
    boolean hasExpandedType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     * @return The expandedType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getExpandedType();

    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the expandedTypeId field is set.
     */
    boolean hasExpandedTypeId();
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The expandedTypeId.
     */
    int getExpandedTypeId();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    int getAnnotationCount();

    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    java.util.List<java.lang.Integer> getVersionRequirementList();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    int getVersionRequirementCount();
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    int getVersionRequirement(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> 
        getCompilerPluginDataList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    int getCompilerPluginDataCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeAlias}
   */
  public  static final class TypeAlias extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        TypeAlias, TypeAlias.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.TypeAlias)
      TypeAliasOrBuilder {
    private TypeAlias() {
      flags_ = 6;
      typeParameter_ = emptyProtobufList();
      annotation_ = emptyProtobufList();
      versionRequirement_ = emptyIntList();
      compilerPluginData_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00000001;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * hasAnnotations
     * Visibility
     * </pre>
     *
     * <code>int32 flags = 1 [default = 6];</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000001);
      flags_ = 6;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private int name_;
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     */
    private void setName(int value) {
      bitField0_ |= 0x00000002;
      name_ = value;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000002);
      name_ = 0;
    }

    public static final int TYPE_PARAMETER_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> typeParameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder> 
        getTypeParameterOrBuilderList() {
      return typeParameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public int getTypeParameterCount() {
      return typeParameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
      return typeParameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameterOrBuilder getTypeParameterOrBuilder(
        int index) {
      return typeParameter_.get(index);
    }
    private void ensureTypeParameterIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> tmp = typeParameter_;
      if (!tmp.isModifiable()) {
        typeParameter_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addTypeParameter(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
      value.getClass();  // minimal bytecode null check
      ensureTypeParameterIsMutable();
      typeParameter_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    private void addAllTypeParameter(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
      ensureTypeParameterIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, typeParameter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    private void clearTypeParameter() {
      typeParameter_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
     */
    private void removeTypeParameter(int index) {
      ensureTypeParameterIsMutable();
      typeParameter_.remove(index);
    }

    public static final int UNDERLYING_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type underlyingType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    @java.lang.Override
    public boolean hasUnderlyingType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUnderlyingType() {
      return underlyingType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : underlyingType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      underlyingType_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (underlyingType_ != null &&
          underlyingType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        underlyingType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(underlyingType_).mergeFrom(value).buildPartial();
      } else {
        underlyingType_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
     */
    private void clearUnderlyingType() {  underlyingType_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int UNDERLYING_TYPE_ID_FIELD_NUMBER = 5;
    private int underlyingTypeId_;
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the underlyingTypeId field is set.
     */
    @java.lang.Override
    public boolean hasUnderlyingTypeId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The underlyingTypeId.
     */
    @java.lang.Override
    public int getUnderlyingTypeId() {
      return underlyingTypeId_;
    }
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The underlyingTypeId to set.
     */
    private void setUnderlyingTypeId(int value) {
      bitField0_ |= 0x00000008;
      underlyingTypeId_ = value;
    }
    /**
     * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearUnderlyingTypeId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      underlyingTypeId_ = 0;
    }

    public static final int EXPANDED_TYPE_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type expandedType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    @java.lang.Override
    public boolean hasExpandedType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getExpandedType() {
      return expandedType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : expandedType_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setExpandedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      expandedType_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeExpandedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (expandedType_ != null &&
          expandedType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        expandedType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(expandedType_).mergeFrom(value).buildPartial();
      } else {
        expandedType_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
     */
    private void clearExpandedType() {  expandedType_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int EXPANDED_TYPE_ID_FIELD_NUMBER = 7;
    private int expandedTypeId_;
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the expandedTypeId field is set.
     */
    @java.lang.Override
    public boolean hasExpandedTypeId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The expandedTypeId.
     */
    @java.lang.Override
    public int getExpandedTypeId() {
      return expandedTypeId_;
    }
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The expandedTypeId to set.
     */
    private void setExpandedTypeId(int value) {
      bitField0_ |= 0x00000020;
      expandedTypeId_ = value;
    }
    /**
     * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearExpandedTypeId() {
      bitField0_ = (bitField0_ & ~0x00000020);
      expandedTypeId_ = 0;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 8;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static final int VERSION_REQUIREMENT_FIELD_NUMBER = 31;
    private org.jetbrains.kotlin.protobuf.Internal.IntList versionRequirement_;
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return A list containing the versionRequirement.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getVersionRequirementList() {
      return versionRequirement_;
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @return The count of versionRequirement.
     */
    @java.lang.Override
    public int getVersionRequirementCount() {
      return versionRequirement_.size();
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The versionRequirement at the given index.
     */
    @java.lang.Override
    public int getVersionRequirement(int index) {
      return versionRequirement_.getInt(index);
    }
    private void ensureVersionRequirementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = versionRequirement_;
      if (!tmp.isModifiable()) {
        versionRequirement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param index The index to set the value at.
     * @param value The versionRequirement to set.
     */
    private void setVersionRequirement(
        int index, int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.setInt(index, value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param value The versionRequirement to add.
     */
    private void addVersionRequirement(int value) {
      ensureVersionRequirementIsMutable();
      versionRequirement_.addInt(value);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     * @param values The versionRequirement to add.
     */
    private void addAllVersionRequirement(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureVersionRequirementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, versionRequirement_);
    }
    /**
     * <pre>
     * Index into the VersionRequirementTable
     * </pre>
     *
     * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
     */
    private void clearVersionRequirement() {
      versionRequirement_ = emptyIntList();
    }

    public static final int COMPILER_PLUGIN_DATA_FIELD_NUMBER = 32;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> compilerPluginData_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder> 
        getCompilerPluginDataOrBuilderList() {
      return compilerPluginData_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public int getCompilerPluginDataCount() {
      return compilerPluginData_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
      return compilerPluginData_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder getCompilerPluginDataOrBuilder(
        int index) {
      return compilerPluginData_.get(index);
    }
    private void ensureCompilerPluginDataIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> tmp = compilerPluginData_;
      if (!tmp.isModifiable()) {
        compilerPluginData_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addCompilerPluginData(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
      value.getClass();  // minimal bytecode null check
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void addAllCompilerPluginData(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
      ensureCompilerPluginDataIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, compilerPluginData_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void clearCompilerPluginData() {
      compilerPluginData_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
     */
    private void removeCompilerPluginData(int index) {
      ensureCompilerPluginDataIsMutable();
      compilerPluginData_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.TypeAlias}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.TypeAlias)
        org.jetbrains.kotlin.metadata.ProtoBuf.TypeAliasOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * hasAnnotations
       * Visibility
       * </pre>
       *
       * <code>int32 flags = 1 [default = 6];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return instance.getName();
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>int32 name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> getTypeParameterList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypeParameterList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      @java.lang.Override
      public int getTypeParameterCount() {
        return instance.getTypeParameterCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter getTypeParameter(int index) {
        return instance.getTypeParameter(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.setTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder setTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter value) {
        copyOnWrite();
        instance.addTypeParameter(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addTypeParameter(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeParameter(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder addAllTypeParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter> values) {
        copyOnWrite();
        instance.addAllTypeParameter(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder clearTypeParameter() {
        copyOnWrite();
        instance.clearTypeParameter();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.TypeParameter type_parameter = 3;</code>
       */
      public Builder removeTypeParameter(int index) {
        copyOnWrite();
        instance.removeTypeParameter(index);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      @java.lang.Override
      public boolean hasUnderlyingType() {
        return instance.hasUnderlyingType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getUnderlyingType() {
        return instance.getUnderlyingType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder setUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setUnderlyingType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder setUnderlyingType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setUnderlyingType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder mergeUnderlyingType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeUnderlyingType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type underlying_type = 4;</code>
       */
      public Builder clearUnderlyingType() {  copyOnWrite();
        instance.clearUnderlyingType();
        return this;
      }

      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the underlyingTypeId field is set.
       */
      @java.lang.Override
      public boolean hasUnderlyingTypeId() {
        return instance.hasUnderlyingTypeId();
      }
      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The underlyingTypeId.
       */
      @java.lang.Override
      public int getUnderlyingTypeId() {
        return instance.getUnderlyingTypeId();
      }
      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The underlyingTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setUnderlyingTypeId(int value) {
        copyOnWrite();
        instance.setUnderlyingTypeId(value);
        return this;
      }
      /**
       * <code>int32 underlying_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnderlyingTypeId() {
        copyOnWrite();
        instance.clearUnderlyingTypeId();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      @java.lang.Override
      public boolean hasExpandedType() {
        return instance.hasExpandedType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getExpandedType() {
        return instance.getExpandedType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder setExpandedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setExpandedType(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder setExpandedType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setExpandedType(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder mergeExpandedType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeExpandedType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Type expanded_type = 6;</code>
       */
      public Builder clearExpandedType() {  copyOnWrite();
        instance.clearExpandedType();
        return this;
      }

      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the expandedTypeId field is set.
       */
      @java.lang.Override
      public boolean hasExpandedTypeId() {
        return instance.hasExpandedTypeId();
      }
      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The expandedTypeId.
       */
      @java.lang.Override
      public int getExpandedTypeId() {
        return instance.getExpandedTypeId();
      }
      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The expandedTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setExpandedTypeId(int value) {
        copyOnWrite();
        instance.setExpandedTypeId(value);
        return this;
      }
      /**
       * <code>int32 expanded_type_id = 7 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearExpandedTypeId() {
        copyOnWrite();
        instance.clearExpandedTypeId();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 8;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return A list containing the versionRequirement.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getVersionRequirementList() {
        return java.util.Collections.unmodifiableList(
            instance.getVersionRequirementList());
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return The count of versionRequirement.
       */
      @java.lang.Override
      public int getVersionRequirementCount() {
        return instance.getVersionRequirementCount();
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The versionRequirement at the given index.
       */
      @java.lang.Override
      public int getVersionRequirement(int index) {
        return instance.getVersionRequirement(index);
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setVersionRequirement(
          int index, int value) {
        copyOnWrite();
        instance.setVersionRequirement(index, value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param value The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addVersionRequirement(int value) {
        copyOnWrite();
        instance.addVersionRequirement(value);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @param values The versionRequirement to add.
       * @return This builder for chaining.
       */
      public Builder addAllVersionRequirement(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllVersionRequirement(values);
        return this;
      }
      /**
       * <pre>
       * Index into the VersionRequirementTable
       * </pre>
       *
       * <code>repeated int32 version_requirement = 31 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionRequirement() {
        copyOnWrite();
        instance.clearVersionRequirement();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> getCompilerPluginDataList() {
        return java.util.Collections.unmodifiableList(
            instance.getCompilerPluginDataList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public int getCompilerPluginDataCount() {
        return instance.getCompilerPluginDataCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getCompilerPluginData(int index) {
        return instance.getCompilerPluginData(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.setCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder setCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.setCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData value) {
        copyOnWrite();
        instance.addCompilerPluginData(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addCompilerPluginData(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.Builder builderForValue) {
        copyOnWrite();
        instance.addCompilerPluginData(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder addAllCompilerPluginData(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> values) {
        copyOnWrite();
        instance.addAllCompilerPluginData(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder clearCompilerPluginData() {
        copyOnWrite();
        instance.clearCompilerPluginData();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.CompilerPluginData compiler_plugin_data = 32;</code>
       */
      public Builder removeCompilerPluginData(int index) {
        copyOnWrite();
        instance.removeCompilerPluginData(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.TypeAlias)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "flags_",
              "name_",
              "typeParameter_",
              org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter.class,
              "underlyingType_",
              "underlyingTypeId_",
              "expandedType_",
              "expandedTypeId_",
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "versionRequirement_",
              "compilerPluginData_",
              org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class,
            };
            java.lang.String info =
                "\u0004\n\u0000\u0001\u0001 \n\u0000\u0004\u0006\u0001\u1004\u0000\u0002\u1504\u0001" +
                "\u0003\u041b\u0004\u1409\u0002\u0005\u1004\u0003\u0006\u1409\u0004\u0007\u1004\u0005" +
                "\b\u041b\u001f\u0016 \u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.TypeAlias)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias DEFAULT_INSTANCE;
    static {
      TypeAlias defaultInstance = new TypeAlias();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TypeAlias.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.TypeAlias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<TypeAlias> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<TypeAlias> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EnumEntryOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.EnumEntry)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                EnumEntry, EnumEntry.Builder> {

    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The name.
     */
    int getName();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    int getAnnotationCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.EnumEntry}
   */
  public  static final class EnumEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        EnumEntry, EnumEntry.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.EnumEntry)
      EnumEntryOrBuilder {
    private EnumEntry() {
      annotation_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private int name_;
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     * @param value The name to set.
     */
    private void setName(int value) {
      bitField0_ |= 0x00000001;
      name_ = value;
    }
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = 0;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.EnumEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.EnumEntry)
        org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntryOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return instance.getName();
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.name_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 2;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.EnumEntry)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "name_",
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0001\u0001\u1004\u0000\u0002" +
                "\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.EnumEntry)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry DEFAULT_INSTANCE;
    static {
      EnumEntry defaultInstance = new EnumEntry();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        EnumEntry.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.EnumEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<EnumEntry> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<EnumEntry> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VersionRequirementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.VersionRequirement)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return Whether the versionFull field is set.
     */
    boolean hasVersionFull();
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return The versionFull.
     */
    int getVersionFull();

    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return Whether the level field is set.
     */
    boolean hasLevel();
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return The level.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level getLevel();

    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return Whether the errorCode field is set.
     */
    boolean hasErrorCode();
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return The errorCode.
     */
    int getErrorCode();

    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The message.
     */
    int getMessage();

    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return Whether the versionKind field is set.
     */
    boolean hasVersionKind();
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return The versionKind.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind getVersionKind();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirement}
   */
  public  static final class VersionRequirement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          VersionRequirement, VersionRequirement.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.VersionRequirement)
      VersionRequirementOrBuilder {
    private VersionRequirement() {
      level_ = 1;
    }
    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.VersionRequirement.Level}
     */
    public enum Level
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>WARNING = 0;</code>
       */
      WARNING(0),
      /**
       * <code>ERROR = 1;</code>
       */
      ERROR(1),
      /**
       * <code>HIDDEN = 2;</code>
       */
      HIDDEN(2),
      ;

      /**
       * <code>WARNING = 0;</code>
       */
      public static final int WARNING_VALUE = 0;
      /**
       * <code>ERROR = 1;</code>
       */
      public static final int ERROR_VALUE = 1;
      /**
       * <code>HIDDEN = 2;</code>
       */
      public static final int HIDDEN_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Level valueOf(int value) {
        return forNumber(value);
      }

      public static Level forNumber(int value) {
        switch (value) {
          case 0: return WARNING;
          case 1: return ERROR;
          case 2: return HIDDEN;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Level>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Level> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Level>() {
              @java.lang.Override
              public Level findValueByNumber(int number) {
                return Level.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return LevelVerifier.INSTANCE;
      }

      private static final class LevelVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new LevelVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Level.forNumber(number) != null;
              }
            };

      private final int value;

      private Level(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.VersionRequirement.Level)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind}
     */
    public enum VersionKind
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>LANGUAGE_VERSION = 0;</code>
       */
      LANGUAGE_VERSION(0),
      /**
       * <code>COMPILER_VERSION = 1;</code>
       */
      COMPILER_VERSION(1),
      /**
       * <code>API_VERSION = 2;</code>
       */
      API_VERSION(2),
      ;

      /**
       * <code>LANGUAGE_VERSION = 0;</code>
       */
      public static final int LANGUAGE_VERSION_VALUE = 0;
      /**
       * <code>COMPILER_VERSION = 1;</code>
       */
      public static final int COMPILER_VERSION_VALUE = 1;
      /**
       * <code>API_VERSION = 2;</code>
       */
      public static final int API_VERSION_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static VersionKind valueOf(int value) {
        return forNumber(value);
      }

      public static VersionKind forNumber(int value) {
        switch (value) {
          case 0: return LANGUAGE_VERSION;
          case 1: return COMPILER_VERSION;
          case 2: return API_VERSION;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<VersionKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          VersionKind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<VersionKind>() {
              @java.lang.Override
              public VersionKind findValueByNumber(int number) {
                return VersionKind.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return VersionKindVerifier.INSTANCE;
      }

      private static final class VersionKindVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new VersionKindVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return VersionKind.forNumber(number) != null;
              }
            };

      private final int value;

      private VersionKind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind)
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     * @param value The version to set.
     */
    private void setVersion(int value) {
      bitField0_ |= 0x00000001;
      version_ = value;
    }
    /**
     * <pre>
     * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
     * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
     * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
     * </pre>
     *
     * <code>int32 version = 1;</code>
     */
    private void clearVersion() {
      bitField0_ = (bitField0_ & ~0x00000001);
      version_ = 0;
    }

    public static final int VERSION_FULL_FIELD_NUMBER = 2;
    private int versionFull_;
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return Whether the versionFull field is set.
     */
    @java.lang.Override
    public boolean hasVersionFull() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @return The versionFull.
     */
    @java.lang.Override
    public int getVersionFull() {
      return versionFull_;
    }
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     * @param value The versionFull to set.
     */
    private void setVersionFull(int value) {
      bitField0_ |= 0x00000002;
      versionFull_ = value;
    }
    /**
     * <pre>
     * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     *
     * <code>int32 version_full = 2;</code>
     */
    private void clearVersionFull() {
      bitField0_ = (bitField0_ & ~0x00000002);
      versionFull_ = 0;
    }

    public static final int LEVEL_FIELD_NUMBER = 3;
    private int level_;
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return Whether the level field is set.
     */
    @java.lang.Override
    public boolean hasLevel() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @return The level.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level getLevel() {
      org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level result = org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.forNumber(level_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.ERROR : result;
    }
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     * @param value The level to set.
     */
    private void setLevel(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level value) {
      level_ = value.getNumber();
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Level of the reported diagnostic
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
     */
    private void clearLevel() {
      bitField0_ = (bitField0_ & ~0x00000004);
      level_ = 1;
    }

    public static final int ERROR_CODE_FIELD_NUMBER = 4;
    private int errorCode_;
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return Whether the errorCode field is set.
     */
    @java.lang.Override
    public boolean hasErrorCode() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @return The errorCode.
     */
    @java.lang.Override
    public int getErrorCode() {
      return errorCode_;
    }
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     * @param value The errorCode to set.
     */
    private void setErrorCode(int value) {
      bitField0_ |= 0x00000008;
      errorCode_ = value;
    }
    /**
     * <pre>
     * Error code, to be looked up on the website
     * </pre>
     *
     * <code>int32 error_code = 4;</code>
     */
    private void clearErrorCode() {
      bitField0_ = (bitField0_ & ~0x00000008);
      errorCode_ = 0;
    }

    public static final int MESSAGE_FIELD_NUMBER = 5;
    private int message_;
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The message.
     */
    @java.lang.Override
    public int getMessage() {
      return message_;
    }
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @param value The message to set.
     */
    private void setMessage(int value) {
      bitField0_ |= 0x00000010;
      message_ = value;
    }
    /**
     * <pre>
     * Diagnostic message
     * </pre>
     *
     * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     */
    private void clearMessage() {
      bitField0_ = (bitField0_ & ~0x00000010);
      message_ = 0;
    }

    public static final int VERSION_KIND_FIELD_NUMBER = 6;
    private int versionKind_;
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return Whether the versionKind field is set.
     */
    @java.lang.Override
    public boolean hasVersionKind() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @return The versionKind.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind getVersionKind() {
      org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind result = org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.forNumber(versionKind_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION : result;
    }
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     * @param value The versionKind to set.
     */
    private void setVersionKind(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind value) {
      versionKind_ = value.getNumber();
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
     * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
     */
    private void clearVersionKind() {
      bitField0_ = (bitField0_ & ~0x00000020);
      versionKind_ = 0;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.VersionRequirement)
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @return Whether the version field is set.
       */
      @java.lang.Override
      public boolean hasVersion() {
        return instance.hasVersion();
      }
      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return instance.getVersion();
      }
      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {
        copyOnWrite();
        instance.setVersion(value);
        return this;
      }
      /**
       * <pre>
       * Kotlin version, since which this declaration is accessible, in the following format (encoded version is "major.minor.patch"):
       * (patch &lt;&lt; 7) + (minor &lt;&lt; 3) + major
       * Compilers with version less than this value should report a diagnostic if this declaration is selected as the resolution result
       * </pre>
       *
       * <code>int32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        copyOnWrite();
        instance.clearVersion();
        return this;
      }

      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @return Whether the versionFull field is set.
       */
      @java.lang.Override
      public boolean hasVersionFull() {
        return instance.hasVersionFull();
      }
      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @return The versionFull.
       */
      @java.lang.Override
      public int getVersionFull() {
        return instance.getVersionFull();
      }
      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @param value The versionFull to set.
       * @return This builder for chaining.
       */
      public Builder setVersionFull(int value) {
        copyOnWrite();
        instance.setVersionFull(value);
        return this;
      }
      /**
       * <pre>
       * Version in base 256, in case we run out of space to store the version in the optimized form. Has priority over 'version'.
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       *
       * <code>int32 version_full = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionFull() {
        copyOnWrite();
        instance.clearVersionFull();
        return this;
      }

      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @return Whether the level field is set.
       */
      @java.lang.Override
      public boolean hasLevel() {
        return instance.hasLevel();
      }
      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @return The level.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level getLevel() {
        return instance.getLevel();
      }
      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @param value The enum numeric value on the wire for level to set.
       * @return This builder for chaining.
       */
      public Builder setLevel(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level value) {
        copyOnWrite();
        instance.setLevel(value);
        return this;
      }
      /**
       * <pre>
       * Level of the reported diagnostic
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.Level level = 3 [default = ERROR];</code>
       * @return This builder for chaining.
       */
      public Builder clearLevel() {
        copyOnWrite();
        instance.clearLevel();
        return this;
      }

      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @return Whether the errorCode field is set.
       */
      @java.lang.Override
      public boolean hasErrorCode() {
        return instance.hasErrorCode();
      }
      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @return The errorCode.
       */
      @java.lang.Override
      public int getErrorCode() {
        return instance.getErrorCode();
      }
      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @param value The errorCode to set.
       * @return This builder for chaining.
       */
      public Builder setErrorCode(int value) {
        copyOnWrite();
        instance.setErrorCode(value);
        return this;
      }
      /**
       * <pre>
       * Error code, to be looked up on the website
       * </pre>
       *
       * <code>int32 error_code = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorCode() {
        copyOnWrite();
        instance.clearErrorCode();
        return this;
      }

      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the message field is set.
       */
      @java.lang.Override
      public boolean hasMessage() {
        return instance.hasMessage();
      }
      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The message.
       */
      @java.lang.Override
      public int getMessage() {
        return instance.getMessage();
      }
      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(int value) {
        copyOnWrite();
        instance.setMessage(value);
        return this;
      }
      /**
       * <pre>
       * Diagnostic message
       * </pre>
       *
       * <code>int32 message = 5 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        copyOnWrite();
        instance.clearMessage();
        return this;
      }

      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @return Whether the versionKind field is set.
       */
      @java.lang.Override
      public boolean hasVersionKind() {
        return instance.hasVersionKind();
      }
      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @return The versionKind.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind getVersionKind() {
        return instance.getVersionKind();
      }
      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @param value The enum numeric value on the wire for versionKind to set.
       * @return This builder for chaining.
       */
      public Builder setVersionKind(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind value) {
        copyOnWrite();
        instance.setVersionKind(value);
        return this;
      }
      /**
       * <pre>
       * Which version is this requirement for. For example, if version_kind = API_VERSION, this declaration requires the API version
       * (the "-api-version" argument value when compiling the call site) to be of at least the specified value
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.VersionRequirement.VersionKind version_kind = 6 [default = LANGUAGE_VERSION];</code>
       * @return This builder for chaining.
       */
      public Builder clearVersionKind() {
        copyOnWrite();
        instance.clearVersionKind();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.VersionRequirement)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "version_",
              "versionFull_",
              "level_",
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Level.internalGetVerifier(),
              "errorCode_",
              "message_",
              "versionKind_",
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.VersionKind.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0004\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0000\u0000\u0001\u1004\u0000\u0002" +
                "\u1004\u0001\u0003\u180c\u0002\u0004\u1004\u0003\u0005\u1004\u0004\u0006\u180c\u0005" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.VersionRequirement)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement DEFAULT_INSTANCE;
    static {
      VersionRequirement defaultInstance = new VersionRequirement();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        VersionRequirement.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<VersionRequirement> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<VersionRequirement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VersionRequirementTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.VersionRequirementTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> 
        getRequirementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getRequirement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    int getRequirementCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirementTable}
   */
  public  static final class VersionRequirementTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          VersionRequirementTable, VersionRequirementTable.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.VersionRequirementTable)
      VersionRequirementTableOrBuilder {
    private VersionRequirementTable() {
      requirement_ = emptyProtobufList();
    }
    public static final int REQUIREMENT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> requirement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> getRequirementList() {
      return requirement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder> 
        getRequirementOrBuilderList() {
      return requirement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public int getRequirementCount() {
      return requirement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getRequirement(int index) {
      return requirement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementOrBuilder getRequirementOrBuilder(
        int index) {
      return requirement_.get(index);
    }
    private void ensureRequirementIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> tmp = requirement_;
      if (!tmp.isModifiable()) {
        requirement_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setRequirement(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
      value.getClass();  // minimal bytecode null check
      ensureRequirementIsMutable();
      requirement_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addRequirement(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
      value.getClass();  // minimal bytecode null check
      ensureRequirementIsMutable();
      requirement_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addRequirement(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
      value.getClass();  // minimal bytecode null check
      ensureRequirementIsMutable();
      requirement_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    private void addAllRequirement(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> values) {
      ensureRequirementIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, requirement_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    private void clearRequirement() {
      requirement_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
     */
    private void removeRequirement(int index) {
      ensureRequirementIsMutable();
      requirement_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.VersionRequirementTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.VersionRequirementTable)
        org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTableOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> getRequirementList() {
        return java.util.Collections.unmodifiableList(
            instance.getRequirementList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      @java.lang.Override
      public int getRequirementCount() {
        return instance.getRequirementCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement getRequirement(int index) {
        return instance.getRequirement(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder setRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
        copyOnWrite();
        instance.setRequirement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder setRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder builderForValue) {
        copyOnWrite();
        instance.setRequirement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
        copyOnWrite();
        instance.addRequirement(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement value) {
        copyOnWrite();
        instance.addRequirement(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder builderForValue) {
        copyOnWrite();
        instance.addRequirement(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addRequirement(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.Builder builderForValue) {
        copyOnWrite();
        instance.addRequirement(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder addAllRequirement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement> values) {
        copyOnWrite();
        instance.addAllRequirement(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder clearRequirement() {
        copyOnWrite();
        instance.clearRequirement();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.VersionRequirement requirement = 1;</code>
       */
      public Builder removeRequirement(int index) {
        copyOnWrite();
        instance.removeRequirement(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.VersionRequirementTable)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "requirement_",
              org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirement.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.VersionRequirementTable)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable DEFAULT_INSTANCE;
    static {
      VersionRequirementTable defaultInstance = new VersionRequirementTable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        VersionRequirementTable.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.VersionRequirementTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<VersionRequirementTable> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<VersionRequirementTable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PackageFragmentOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.PackageFragment)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                PackageFragment, PackageFragment.Builder> {

    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     * @return Whether the strings field is set.
     */
    boolean hasStrings();
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     * @return The strings.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStrings();

    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     * @return Whether the qualifiedNames field is set.
     */
    boolean hasQualifiedNames();
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     * @return The qualifiedNames.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNames();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     * @return Whether the package field is set.
     */
    boolean hasPackage();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     * @return The package.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Package getPackage();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> 
        getClass_List();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Class getClass_(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    int getClass_Count();
  }
  /**
   * <pre>
   * A part of the package, which is used to serialize .kjsm/.meta.js, .kotlin_builtins and .kotlin_metadata files.
   * Is not used in the JVM back-end
   * </pre>
   *
   * Protobuf type {@code org.jetbrains.kotlin.metadata.PackageFragment}
   */
  public  static final class PackageFragment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        PackageFragment, PackageFragment.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.PackageFragment)
      PackageFragmentOrBuilder {
    private PackageFragment() {
      class__ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int STRINGS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.metadata.ProtoBuf.StringTable strings_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    @java.lang.Override
    public boolean hasStrings() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStrings() {
      return strings_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance() : strings_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setStrings(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
      value.getClass();  // minimal bytecode null check
      strings_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeStrings(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
      value.getClass();  // minimal bytecode null check
      if (strings_ != null &&
          strings_ != org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance()) {
        strings_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.newBuilder(strings_).mergeFrom(value).buildPartial();
      } else {
        strings_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
     */
    private void clearStrings() {  strings_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int QUALIFIED_NAMES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable qualifiedNames_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    @java.lang.Override
    public boolean hasQualifiedNames() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNames() {
      return qualifiedNames_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance() : qualifiedNames_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setQualifiedNames(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
      value.getClass();  // minimal bytecode null check
      qualifiedNames_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeQualifiedNames(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
      value.getClass();  // minimal bytecode null check
      if (qualifiedNames_ != null &&
          qualifiedNames_ != org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance()) {
        qualifiedNames_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.newBuilder(qualifiedNames_).mergeFrom(value).buildPartial();
      } else {
        qualifiedNames_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
     */
    private void clearQualifiedNames() {  qualifiedNames_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int PACKAGE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Package package_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    @java.lang.Override
    public boolean hasPackage() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Package getPackage() {
      return package_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance() : package_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPackage(org.jetbrains.kotlin.metadata.ProtoBuf.Package value) {
      value.getClass();  // minimal bytecode null check
      package_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergePackage(org.jetbrains.kotlin.metadata.ProtoBuf.Package value) {
      value.getClass();  // minimal bytecode null check
      if (package_ != null &&
          package_ != org.jetbrains.kotlin.metadata.ProtoBuf.Package.getDefaultInstance()) {
        package_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Package.newBuilder(package_).mergeFrom(value).buildPartial();
      } else {
        package_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
     */
    private void clearPackage() {  package_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int CLASS_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Class> class__;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> getClass_List() {
      return class__;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder> 
        getClass_OrBuilderList() {
      return class__;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public int getClass_Count() {
      return class__.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Class getClass_(int index) {
      return class__.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder getClass_OrBuilder(
        int index) {
      return class__.get(index);
    }
    private void ensureClass_IsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Class> tmp = class__;
      if (!tmp.isModifiable()) {
        class__ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setClass_(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      ensureClass_IsMutable();
      class__.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addClass_(org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      ensureClass_IsMutable();
      class__.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addClass_(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      ensureClass_IsMutable();
      class__.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    private void addAllClass_(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Class> values) {
      ensureClass_IsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, class__);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    private void clearClass_() {
      class__ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
     */
    private void removeClass_(int index) {
      ensureClass_IsMutable();
      class__.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A part of the package, which is used to serialize .kjsm/.meta.js, .kotlin_builtins and .kotlin_metadata files.
     * Is not used in the JVM back-end
     * </pre>
     *
     * Protobuf type {@code org.jetbrains.kotlin.metadata.PackageFragment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.PackageFragment)
        org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragmentOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      @java.lang.Override
      public boolean hasStrings() {
        return instance.hasStrings();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStrings() {
        return instance.getStrings();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder setStrings(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
        copyOnWrite();
        instance.setStrings(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder setStrings(
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder builderForValue) {
        copyOnWrite();
        instance.setStrings(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder mergeStrings(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
        copyOnWrite();
        instance.mergeStrings(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable strings = 1;</code>
       */
      public Builder clearStrings() {  copyOnWrite();
        instance.clearStrings();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      @java.lang.Override
      public boolean hasQualifiedNames() {
        return instance.hasQualifiedNames();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNames() {
        return instance.getQualifiedNames();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder setQualifiedNames(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
        copyOnWrite();
        instance.setQualifiedNames(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder setQualifiedNames(
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder builderForValue) {
        copyOnWrite();
        instance.setQualifiedNames(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder mergeQualifiedNames(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
        copyOnWrite();
        instance.mergeQualifiedNames(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_names = 2;</code>
       */
      public Builder clearQualifiedNames() {  copyOnWrite();
        instance.clearQualifiedNames();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      @java.lang.Override
      public boolean hasPackage() {
        return instance.hasPackage();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Package getPackage() {
        return instance.getPackage();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder setPackage(org.jetbrains.kotlin.metadata.ProtoBuf.Package value) {
        copyOnWrite();
        instance.setPackage(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder setPackage(
          org.jetbrains.kotlin.metadata.ProtoBuf.Package.Builder builderForValue) {
        copyOnWrite();
        instance.setPackage(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder mergePackage(org.jetbrains.kotlin.metadata.ProtoBuf.Package value) {
        copyOnWrite();
        instance.mergePackage(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Package package = 3;</code>
       */
      public Builder clearPackage() {  copyOnWrite();
        instance.clearPackage();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> getClass_List() {
        return java.util.Collections.unmodifiableList(
            instance.getClass_List());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      @java.lang.Override
      public int getClass_Count() {
        return instance.getClass_Count();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class getClass_(int index) {
        return instance.getClass_(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder setClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        copyOnWrite();
        instance.setClass_(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder setClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        copyOnWrite();
        instance.setClass_(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        copyOnWrite();
        instance.addClass_(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        copyOnWrite();
        instance.addClass_(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        copyOnWrite();
        instance.addClass_(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addClass_(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        copyOnWrite();
        instance.addClass_(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder addAllClass_(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Class> values) {
        copyOnWrite();
        instance.addAllClass_(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder clearClass_() {
        copyOnWrite();
        instance.clearClass_();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Class class = 4;</code>
       */
      public Builder removeClass_(int index) {
        copyOnWrite();
        instance.removeClass_(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.PackageFragment)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "strings_",
              "qualifiedNames_",
              "package_",
              "class__",
              org.jetbrains.kotlin.metadata.ProtoBuf.Class.class,
            };
            java.lang.String info =
                "\u0004\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0001\u0003\u0001\u1009\u0000\u0002" +
                "\u1409\u0001\u0003\u1409\u0002\u0004\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.PackageFragment)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment DEFAULT_INSTANCE;
    static {
      PackageFragment defaultInstance = new PackageFragment();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PackageFragment.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.PackageFragment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<PackageFragment> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<PackageFragment> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ContractOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Contract)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> 
        getEffectList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect getEffect(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    int getEffectCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Contract}
   */
  public  static final class Contract extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Contract, Contract.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Contract)
      ContractOrBuilder {
    private Contract() {
      effect_ = emptyProtobufList();
    }
    public static final int EFFECT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> effect_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> getEffectList() {
      return effect_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder> 
        getEffectOrBuilderList() {
      return effect_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public int getEffectCount() {
      return effect_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Effect getEffect(int index) {
      return effect_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder getEffectOrBuilder(
        int index) {
      return effect_.get(index);
    }
    private void ensureEffectIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> tmp = effect_;
      if (!tmp.isModifiable()) {
        effect_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEffect(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
      value.getClass();  // minimal bytecode null check
      ensureEffectIsMutable();
      effect_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
      value.getClass();  // minimal bytecode null check
      ensureEffectIsMutable();
      effect_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEffect(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
      value.getClass();  // minimal bytecode null check
      ensureEffectIsMutable();
      effect_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    private void addAllEffect(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Effect> values) {
      ensureEffectIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, effect_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    private void clearEffect() {
      effect_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
     */
    private void removeEffect(int index) {
      ensureEffectIsMutable();
      effect_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Contract prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Contract}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Contract, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Contract)
        org.jetbrains.kotlin.metadata.ProtoBuf.ContractOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Contract.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> getEffectList() {
        return java.util.Collections.unmodifiableList(
            instance.getEffectList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      @java.lang.Override
      public int getEffectCount() {
        return instance.getEffectCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect getEffect(int index) {
        return instance.getEffect(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder setEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
        copyOnWrite();
        instance.setEffect(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder setEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder builderForValue) {
        copyOnWrite();
        instance.setEffect(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
        copyOnWrite();
        instance.addEffect(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect value) {
        copyOnWrite();
        instance.addEffect(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder builderForValue) {
        copyOnWrite();
        instance.addEffect(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addEffect(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Effect.Builder builderForValue) {
        copyOnWrite();
        instance.addEffect(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder addAllEffect(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Effect> values) {
        copyOnWrite();
        instance.addAllEffect(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder clearEffect() {
        copyOnWrite();
        instance.clearEffect();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Effect effect = 1;</code>
       */
      public Builder removeEffect(int index) {
        copyOnWrite();
        instance.removeEffect(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Contract)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Contract();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "effect_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Effect.class,
            };
            java.lang.String info =
                "\u0004\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Contract> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Contract.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Contract>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Contract)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Contract DEFAULT_INSTANCE;
    static {
      Contract defaultInstance = new Contract();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Contract.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Contract getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Contract> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Contract> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EffectOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Effect)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return Whether the effectType field is set.
     */
    boolean hasEffectType();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return The effectType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType getEffectType();

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> 
        getEffectConstructorArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getEffectConstructorArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    int getEffectConstructorArgumentCount();

    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     * @return Whether the conclusionOfConditionalEffect field is set.
     */
    boolean hasConclusionOfConditionalEffect();
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     * @return The conclusionOfConditionalEffect.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getConclusionOfConditionalEffect();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return Whether the kind field is set.
     */
    boolean hasKind();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return The kind.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind getKind();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return Whether the conditionKind field is set.
     */
    boolean hasConditionKind();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return The enum numeric value on the wire for conditionKind.
     */
    int getConditionKindValue();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return The conditionKind.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind getConditionKind();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Effect}
   */
  public  static final class Effect extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Effect, Effect.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Effect)
      EffectOrBuilder {
    private Effect() {
      effectConstructorArgument_ = emptyProtobufList();
    }
    /**
     * <pre>
     * This enum controls which effect this message contains and how 'effectConstructorArguments'
     * should be parsed.
     * Each enum value documented in the following syntax: "EffectName(arg1: T1, arg2: T2, ...)"
     * Those arguments are expected to be found in 'effectConstructorArguments' in exactly the same
     * order and amount as defined by signature, otherwise message should be dropped.
     * </pre>
     *
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.EffectType}
     */
    public enum EffectType
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * Returns(value: ConstantValue?)
       * </pre>
       *
       * <code>RETURNS_CONSTANT = 0;</code>
       */
      RETURNS_CONSTANT(0),
      /**
       * <pre>
       * CallsInPlace(callable: ParameterReference)
       * Additionally, InvocationKind in the field 'kind' may be provided to define exact amount of invocations.
       * </pre>
       *
       * <code>CALLS = 1;</code>
       */
      CALLS(1),
      /**
       * <pre>
       * ReturnsNotNull()
       * </pre>
       *
       * <code>RETURNS_NOT_NULL = 2;</code>
       */
      RETURNS_NOT_NULL(2),
      ;

      /**
       * <pre>
       * Returns(value: ConstantValue?)
       * </pre>
       *
       * <code>RETURNS_CONSTANT = 0;</code>
       */
      public static final int RETURNS_CONSTANT_VALUE = 0;
      /**
       * <pre>
       * CallsInPlace(callable: ParameterReference)
       * Additionally, InvocationKind in the field 'kind' may be provided to define exact amount of invocations.
       * </pre>
       *
       * <code>CALLS = 1;</code>
       */
      public static final int CALLS_VALUE = 1;
      /**
       * <pre>
       * ReturnsNotNull()
       * </pre>
       *
       * <code>RETURNS_NOT_NULL = 2;</code>
       */
      public static final int RETURNS_NOT_NULL_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EffectType valueOf(int value) {
        return forNumber(value);
      }

      public static EffectType forNumber(int value) {
        switch (value) {
          case 0: return RETURNS_CONSTANT;
          case 1: return CALLS;
          case 2: return RETURNS_NOT_NULL;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          EffectType> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectType>() {
              @java.lang.Override
              public EffectType findValueByNumber(int number) {
                return EffectType.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return EffectTypeVerifier.INSTANCE;
      }

      private static final class EffectTypeVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new EffectTypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return EffectType.forNumber(number) != null;
              }
            };

      private final int value;

      private EffectType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.EffectType)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.InvocationKind}
     */
    public enum InvocationKind
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>AT_MOST_ONCE = 0;</code>
       */
      AT_MOST_ONCE(0),
      /**
       * <code>EXACTLY_ONCE = 1;</code>
       */
      EXACTLY_ONCE(1),
      /**
       * <code>AT_LEAST_ONCE = 2;</code>
       */
      AT_LEAST_ONCE(2),
      ;

      /**
       * <code>AT_MOST_ONCE = 0;</code>
       */
      public static final int AT_MOST_ONCE_VALUE = 0;
      /**
       * <code>EXACTLY_ONCE = 1;</code>
       */
      public static final int EXACTLY_ONCE_VALUE = 1;
      /**
       * <code>AT_LEAST_ONCE = 2;</code>
       */
      public static final int AT_LEAST_ONCE_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InvocationKind valueOf(int value) {
        return forNumber(value);
      }

      public static InvocationKind forNumber(int value) {
        switch (value) {
          case 0: return AT_MOST_ONCE;
          case 1: return EXACTLY_ONCE;
          case 2: return AT_LEAST_ONCE;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InvocationKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          InvocationKind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InvocationKind>() {
              @java.lang.Override
              public InvocationKind findValueByNumber(int number) {
                return InvocationKind.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return InvocationKindVerifier.INSTANCE;
      }

      private static final class InvocationKindVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new InvocationKindVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return InvocationKind.forNumber(number) != null;
              }
            };

      private final int value;

      private InvocationKind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.InvocationKind)
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Effect.EffectConditionKind}
     */
    public enum EffectConditionKind
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * also default
       * </pre>
       *
       * <code>CONCLUSION_CONDITION = 0;</code>
       */
      CONCLUSION_CONDITION(0),
      /**
       * <pre>
       * "implies returns" condition. If condition_kind set to it, then then whole message is clause of form
       * </pre>
       *
       * <code>RETURNS_CONDITION = 1;</code>
       */
      RETURNS_CONDITION(1),
      /**
       * <pre>
       * 'Expression -&gt; ReturnsEffect', where 'ReturnsEffect' is given by other fields
       * and 'Expression' is stored in the conclusion_of_conditional_effect
       * </pre>
       *
       * <code>HOLDSIN_CONDITION = 2;</code>
       */
      HOLDSIN_CONDITION(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * also default
       * </pre>
       *
       * <code>CONCLUSION_CONDITION = 0;</code>
       */
      public static final int CONCLUSION_CONDITION_VALUE = 0;
      /**
       * <pre>
       * "implies returns" condition. If condition_kind set to it, then then whole message is clause of form
       * </pre>
       *
       * <code>RETURNS_CONDITION = 1;</code>
       */
      public static final int RETURNS_CONDITION_VALUE = 1;
      /**
       * <pre>
       * 'Expression -&gt; ReturnsEffect', where 'ReturnsEffect' is given by other fields
       * and 'Expression' is stored in the conclusion_of_conditional_effect
       * </pre>
       *
       * <code>HOLDSIN_CONDITION = 2;</code>
       */
      public static final int HOLDSIN_CONDITION_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EffectConditionKind valueOf(int value) {
        return forNumber(value);
      }

      public static EffectConditionKind forNumber(int value) {
        switch (value) {
          case 0: return CONCLUSION_CONDITION;
          case 1: return RETURNS_CONDITION;
          case 2: return HOLDSIN_CONDITION;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectConditionKind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          EffectConditionKind> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<EffectConditionKind>() {
              @java.lang.Override
              public EffectConditionKind findValueByNumber(int number) {
                return EffectConditionKind.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return EffectConditionKindVerifier.INSTANCE;
      }

      private static final class EffectConditionKindVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new EffectConditionKindVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return EffectConditionKind.forNumber(number) != null;
              }
            };

      private final int value;

      private EffectConditionKind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Effect.EffectConditionKind)
    }

    private int bitField0_;
    public static final int EFFECT_TYPE_FIELD_NUMBER = 1;
    private int effectType_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return Whether the effectType field is set.
     */
    @java.lang.Override
    public boolean hasEffectType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @return The effectType.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType getEffectType() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.forNumber(effectType_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.RETURNS_CONSTANT : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     * @param value The effectType to set.
     */
    private void setEffectType(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType value) {
      effectType_ = value.getNumber();
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
     */
    private void clearEffectType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      effectType_ = 0;
    }

    public static final int EFFECT_CONSTRUCTOR_ARGUMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> effectConstructorArgument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getEffectConstructorArgumentList() {
      return effectConstructorArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getEffectConstructorArgumentOrBuilderList() {
      return effectConstructorArgument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public int getEffectConstructorArgumentCount() {
      return effectConstructorArgument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getEffectConstructorArgument(int index) {
      return effectConstructorArgument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getEffectConstructorArgumentOrBuilder(
        int index) {
      return effectConstructorArgument_.get(index);
    }
    private void ensureEffectConstructorArgumentIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> tmp = effectConstructorArgument_;
      if (!tmp.isModifiable()) {
        effectConstructorArgument_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setEffectConstructorArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureEffectConstructorArgumentIsMutable();
      effectConstructorArgument_.set(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEffectConstructorArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureEffectConstructorArgumentIsMutable();
      effectConstructorArgument_.add(value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addEffectConstructorArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureEffectConstructorArgumentIsMutable();
      effectConstructorArgument_.add(index, value);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    private void addAllEffectConstructorArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
      ensureEffectConstructorArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, effectConstructorArgument_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    private void clearEffectConstructorArgument() {
      effectConstructorArgument_ = emptyProtobufList();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
     */
    private void removeEffectConstructorArgument(int index) {
      ensureEffectConstructorArgumentIsMutable();
      effectConstructorArgument_.remove(index);
    }

    public static final int CONCLUSION_OF_CONDITIONAL_EFFECT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Expression conclusionOfConditionalEffect_;
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     */
    @java.lang.Override
    public boolean hasConclusionOfConditionalEffect() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getConclusionOfConditionalEffect() {
      return conclusionOfConditionalEffect_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance() : conclusionOfConditionalEffect_;
    }
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      conclusionOfConditionalEffect_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      if (conclusionOfConditionalEffect_ != null &&
          conclusionOfConditionalEffect_ != org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance()) {
        conclusionOfConditionalEffect_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.newBuilder(conclusionOfConditionalEffect_).mergeFrom(value).buildPartial();
      } else {
        conclusionOfConditionalEffect_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
     * is given by other fields in this message, and 'Expression' is stored in this field.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
     */
    private void clearConclusionOfConditionalEffect() {  conclusionOfConditionalEffect_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int KIND_FIELD_NUMBER = 4;
    private int kind_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return Whether the kind field is set.
     */
    @java.lang.Override
    public boolean hasKind() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @return The kind.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind getKind() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.forNumber(kind_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.AT_MOST_ONCE : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     * @param value The kind to set.
     */
    private void setKind(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind value) {
      kind_ = value.getNumber();
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
     */
    private void clearKind() {
      bitField0_ = (bitField0_ & ~0x00000004);
      kind_ = 0;
    }

    public static final int CONDITION_KIND_FIELD_NUMBER = 5;
    private int conditionKind_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return Whether the conditionKind field is set.
     */
    @java.lang.Override
    public boolean hasConditionKind() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return The enum numeric value on the wire for conditionKind.
     */
    @java.lang.Override
    public int getConditionKindValue() {
      return conditionKind_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @return The conditionKind.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind getConditionKind() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind result = org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind.forNumber(conditionKind_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind.UNRECOGNIZED : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @param value The enum numeric value on the wire for conditionKind to set.
     */
    private void setConditionKindValue(int value) {
      bitField0_ |= 0x00000008;  conditionKind_ = value;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     * @param value The conditionKind to set.
     */
    private void setConditionKind(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind value) {
      conditionKind_ = value.getNumber();
      bitField0_ |= 0x00000008;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
     */
    private void clearConditionKind() {
      bitField0_ = (bitField0_ & ~0x00000008);
      conditionKind_ = 0;
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Effect prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Effect}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Effect, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Effect)
        org.jetbrains.kotlin.metadata.ProtoBuf.EffectOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Effect.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @return Whether the effectType field is set.
       */
      @java.lang.Override
      public boolean hasEffectType() {
        return instance.hasEffectType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @return The effectType.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType getEffectType() {
        return instance.getEffectType();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @param value The enum numeric value on the wire for effectType to set.
       * @return This builder for chaining.
       */
      public Builder setEffectType(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType value) {
        copyOnWrite();
        instance.setEffectType(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectType effect_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEffectType() {
        copyOnWrite();
        instance.clearEffectType();
        return this;
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getEffectConstructorArgumentList() {
        return java.util.Collections.unmodifiableList(
            instance.getEffectConstructorArgumentList());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      @java.lang.Override
      public int getEffectConstructorArgumentCount() {
        return instance.getEffectConstructorArgumentCount();
      }/**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getEffectConstructorArgument(int index) {
        return instance.getEffectConstructorArgument(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder setEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.setEffectConstructorArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder setEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setEffectConstructorArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.addEffectConstructorArgument(value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.addEffectConstructorArgument(index, value);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addEffectConstructorArgument(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addEffectConstructorArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addEffectConstructorArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder addAllEffectConstructorArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
        copyOnWrite();
        instance.addAllEffectConstructorArgument(values);
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder clearEffectConstructorArgument() {
        copyOnWrite();
        instance.clearEffectConstructorArgument();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression effect_constructor_argument = 2;</code>
       */
      public Builder removeEffectConstructorArgument(int index) {
        copyOnWrite();
        instance.removeEffectConstructorArgument(index);
        return this;
      }

      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      @java.lang.Override
      public boolean hasConclusionOfConditionalEffect() {
        return instance.hasConclusionOfConditionalEffect();
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getConclusionOfConditionalEffect() {
        return instance.getConclusionOfConditionalEffect();
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder setConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.setConclusionOfConditionalEffect(value);
        return this;
        }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder setConclusionOfConditionalEffect(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setConclusionOfConditionalEffect(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder mergeConclusionOfConditionalEffect(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.mergeConclusionOfConditionalEffect(value);
        return this;
      }
      /**
       * <pre>
       * If present and condition_kind is 0 or absent, then whole message is clause of form 'Effect -&gt; Expression', where 'Effect'
       * is given by other fields in this message, and 'Expression' is stored in this field.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Expression conclusion_of_conditional_effect = 3;</code>
       */
      public Builder clearConclusionOfConditionalEffect() {  copyOnWrite();
        instance.clearConclusionOfConditionalEffect();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @return Whether the kind field is set.
       */
      @java.lang.Override
      public boolean hasKind() {
        return instance.hasKind();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @return The kind.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind getKind() {
        return instance.getKind();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @param value The enum numeric value on the wire for kind to set.
       * @return This builder for chaining.
       */
      public Builder setKind(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind value) {
        copyOnWrite();
        instance.setKind(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.InvocationKind kind = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearKind() {
        copyOnWrite();
        instance.clearKind();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @return Whether the conditionKind field is set.
       */
      @java.lang.Override
      public boolean hasConditionKind() {
        return instance.hasConditionKind();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @return The enum numeric value on the wire for conditionKind.
       */
      @java.lang.Override
      public int getConditionKindValue() {
        return instance.getConditionKindValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @param value The conditionKind to set.
       * @return This builder for chaining.
       */
      public Builder setConditionKindValue(int value) {
        copyOnWrite();
        instance.setConditionKindValue(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @return The conditionKind.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind getConditionKind() {
        return instance.getConditionKind();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @param value The enum numeric value on the wire for conditionKind to set.
       * @return This builder for chaining.
       */
      public Builder setConditionKind(org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectConditionKind value) {
        copyOnWrite();
        instance.setConditionKind(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Effect.EffectConditionKind condition_kind = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearConditionKind() {
        copyOnWrite();
        instance.clearConditionKind();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Effect)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Effect();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "effectType_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Effect.EffectType.internalGetVerifier(),
              "effectConstructorArgument_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class,
              "conclusionOfConditionalEffect_",
              "kind_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.internalGetVerifier(),
              "conditionKind_",
            };
            java.lang.String info =
                "\u0004\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0001\u0002\u0001\u180c\u0000\u0002" +
                "\u041b\u0003\u1409\u0001\u0004\u180c\u0002\u0005\u100c\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Effect> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Effect.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Effect>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Effect)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Effect DEFAULT_INSTANCE;
    static {
      Effect defaultInstance = new Effect();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Effect.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Effect getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Effect> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Effect> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.Expression)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    int getFlags();

    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return Whether the valueParameterReference field is set.
     */
    boolean hasValueParameterReference();
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return The valueParameterReference.
     */
    int getValueParameterReference();

    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return Whether the constantValue field is set.
     */
    boolean hasConstantValue();
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return The constantValue.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue getConstantValue();

    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     * @return Whether the isInstanceType field is set.
     */
    boolean hasIsInstanceType();
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     * @return The isInstanceType.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Type getIsInstanceType();

    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the isInstanceTypeId field is set.
     */
    boolean hasIsInstanceTypeId();
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The isInstanceTypeId.
     */
    int getIsInstanceTypeId();

    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> 
        getAndArgumentList();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getAndArgument(int index);
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    int getAndArgumentCount();

    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> 
        getOrArgumentList();
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Expression getOrArgument(int index);
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    int getOrArgumentCount();
  }
  /**
   * <pre>
   * We use some trickery to optimize memory footprint of contract-expressions:
   * exact type of Expression is determined based on its contents.
   * </pre>
   *
   * Protobuf type {@code org.jetbrains.kotlin.metadata.Expression}
   */
  public  static final class Expression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Expression, Expression.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.Expression)
      ExpressionOrBuilder {
    private Expression() {
      andArgument_ = emptyProtobufList();
      orArgument_ = emptyProtobufList();
    }
    /**
     * Protobuf enum {@code org.jetbrains.kotlin.metadata.Expression.ConstantValue}
     */
    public enum ConstantValue
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      /**
       * <code>TRUE = 0;</code>
       */
      TRUE(0),
      /**
       * <code>FALSE = 1;</code>
       */
      FALSE(1),
      /**
       * <code>NULL = 2;</code>
       */
      NULL(2),
      ;

      /**
       * <code>TRUE = 0;</code>
       */
      public static final int TRUE_VALUE = 0;
      /**
       * <code>FALSE = 1;</code>
       */
      public static final int FALSE_VALUE = 1;
      /**
       * <code>NULL = 2;</code>
       */
      public static final int NULL_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConstantValue valueOf(int value) {
        return forNumber(value);
      }

      public static ConstantValue forNumber(int value) {
        switch (value) {
          case 0: return TRUE;
          case 1: return FALSE;
          case 2: return NULL;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ConstantValue>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          ConstantValue> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ConstantValue>() {
              @java.lang.Override
              public ConstantValue findValueByNumber(int number) {
                return ConstantValue.forNumber(number);
              }
            };

      public static org.jetbrains.kotlin.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return ConstantValueVerifier.INSTANCE;
      }

      private static final class ConstantValueVerifier implements 
           org.jetbrains.kotlin.protobuf.Internal.EnumVerifier { 
              static final org.jetbrains.kotlin.protobuf.Internal.EnumVerifier           INSTANCE = new ConstantValueVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return ConstantValue.forNumber(number) != null;
              }
            };

      private final int value;

      private ConstantValue(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.Expression.ConstantValue)
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     * @param value The flags to set.
     */
    private void setFlags(int value) {
      bitField0_ |= 0x00000001;
      flags_ = value;
    }
    /**
     * <pre>
     *
     * isNegated =&gt; this expression should be negated
     * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
     * </pre>
     *
     * <code>int32 flags = 1 [default = 0];</code>
     */
    private void clearFlags() {
      bitField0_ = (bitField0_ & ~0x00000001);
      flags_ = 0;
    }

    public static final int VALUE_PARAMETER_REFERENCE_FIELD_NUMBER = 2;
    private int valueParameterReference_;
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return Whether the valueParameterReference field is set.
     */
    @java.lang.Override
    public boolean hasValueParameterReference() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @return The valueParameterReference.
     */
    @java.lang.Override
    public int getValueParameterReference() {
      return valueParameterReference_;
    }
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     * @param value The valueParameterReference to set.
     */
    private void setValueParameterReference(int value) {
      bitField0_ |= 0x00000002;
      valueParameterReference_ = value;
    }
    /**
     * <pre>
     * stored as index in valueParameters list of owner-function in 1-indexation
     * Index '0' is reserved for extension receiver
     * </pre>
     *
     * <code>int32 value_parameter_reference = 2;</code>
     */
    private void clearValueParameterReference() {
      bitField0_ = (bitField0_ & ~0x00000002);
      valueParameterReference_ = 0;
    }

    public static final int CONSTANT_VALUE_FIELD_NUMBER = 3;
    private int constantValue_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return Whether the constantValue field is set.
     */
    @java.lang.Override
    public boolean hasConstantValue() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @return The constantValue.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue getConstantValue() {
      org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue result = org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.forNumber(constantValue_);
      return result == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.TRUE : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     * @param value The constantValue to set.
     */
    private void setConstantValue(org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue value) {
      constantValue_ = value.getNumber();
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
     */
    private void clearConstantValue() {
      bitField0_ = (bitField0_ & ~0x00000004);
      constantValue_ = 0;
    }

    public static final int IS_INSTANCE_TYPE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.ProtoBuf.Type isInstanceType_;
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     */
    @java.lang.Override
    public boolean hasIsInstanceType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Type getIsInstanceType() {
      return isInstanceType_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance() : isInstanceType_;
    }
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setIsInstanceType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      isInstanceType_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeIsInstanceType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
      value.getClass();  // minimal bytecode null check
      if (isInstanceType_ != null &&
          isInstanceType_ != org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance()) {
        isInstanceType_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.newBuilder(isInstanceType_).mergeFrom(value).buildPartial();
      } else {
        isInstanceType_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
     * and with type encoded in either one of next two fields as RHS.
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
     */
    private void clearIsInstanceType() {  isInstanceType_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static final int IS_INSTANCE_TYPE_ID_FIELD_NUMBER = 5;
    private int isInstanceTypeId_;
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return Whether the isInstanceTypeId field is set.
     */
    @java.lang.Override
    public boolean hasIsInstanceTypeId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @return The isInstanceTypeId.
     */
    @java.lang.Override
    public int getIsInstanceTypeId() {
      return isInstanceTypeId_;
    }
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     * @param value The isInstanceTypeId to set.
     */
    private void setIsInstanceTypeId(int value) {
      bitField0_ |= 0x00000010;
      isInstanceTypeId_ = value;
    }
    /**
     * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
     */
    private void clearIsInstanceTypeId() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isInstanceTypeId_ = 0;
    }

    public static final int AND_ARGUMENT_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> andArgument_;
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getAndArgumentList() {
      return andArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getAndArgumentOrBuilderList() {
      return andArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public int getAndArgumentCount() {
      return andArgument_.size();
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getAndArgument(int index) {
      return andArgument_.get(index);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getAndArgumentOrBuilder(
        int index) {
      return andArgument_.get(index);
    }
    private void ensureAndArgumentIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> tmp = andArgument_;
      if (!tmp.isModifiable()) {
        andArgument_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAndArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureAndArgumentIsMutable();
      andArgument_.set(index, value);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAndArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureAndArgumentIsMutable();
      andArgument_.add(value);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAndArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureAndArgumentIsMutable();
      andArgument_.add(index, value);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    private void addAllAndArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
      ensureAndArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, andArgument_);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    private void clearAndArgument() {
      andArgument_ = emptyProtobufList();
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
     */
    private void removeAndArgument(int index) {
      ensureAndArgumentIsMutable();
      andArgument_.remove(index);
    }

    public static final int OR_ARGUMENT_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> orArgument_;
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getOrArgumentList() {
      return orArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder> 
        getOrArgumentOrBuilderList() {
      return orArgument_;
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public int getOrArgumentCount() {
      return orArgument_.size();
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getOrArgument(int index) {
      return orArgument_.get(index);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder getOrArgumentOrBuilder(
        int index) {
      return orArgument_.get(index);
    }
    private void ensureOrArgumentIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> tmp = orArgument_;
      if (!tmp.isModifiable()) {
        orArgument_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setOrArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureOrArgumentIsMutable();
      orArgument_.set(index, value);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addOrArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureOrArgumentIsMutable();
      orArgument_.add(value);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addOrArgument(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
      value.getClass();  // minimal bytecode null check
      ensureOrArgumentIsMutable();
      orArgument_.add(index, value);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    private void addAllOrArgument(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
      ensureOrArgumentIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, orArgument_);
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    private void clearOrArgument() {
      orArgument_ = emptyProtobufList();
    }
    /**
     * <pre>
     * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
     * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
     * it is optimized and embedded straight into this message.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
     */
    private void removeOrArgument(int index) {
      ensureOrArgumentIsMutable();
      orArgument_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.Expression prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * We use some trickery to optimize memory footprint of contract-expressions:
     * exact type of Expression is determined based on its contents.
     * </pre>
     *
     * Protobuf type {@code org.jetbrains.kotlin.metadata.Expression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.Expression)
        org.jetbrains.kotlin.metadata.ProtoBuf.ExpressionOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.Expression.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return instance.hasFlags();
      }
      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return instance.getFlags();
      }
      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {
        copyOnWrite();
        instance.setFlags(value);
        return this;
      }
      /**
       * <pre>
       *
       * isNegated =&gt; this expression should be negated
       * isIsNullPredicate =&gt; this expression is IsNullPredicate with 'variableName' as argument
       * </pre>
       *
       * <code>int32 flags = 1 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        copyOnWrite();
        instance.clearFlags();
        return this;
      }

      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @return Whether the valueParameterReference field is set.
       */
      @java.lang.Override
      public boolean hasValueParameterReference() {
        return instance.hasValueParameterReference();
      }
      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @return The valueParameterReference.
       */
      @java.lang.Override
      public int getValueParameterReference() {
        return instance.getValueParameterReference();
      }
      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @param value The valueParameterReference to set.
       * @return This builder for chaining.
       */
      public Builder setValueParameterReference(int value) {
        copyOnWrite();
        instance.setValueParameterReference(value);
        return this;
      }
      /**
       * <pre>
       * stored as index in valueParameters list of owner-function in 1-indexation
       * Index '0' is reserved for extension receiver
       * </pre>
       *
       * <code>int32 value_parameter_reference = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValueParameterReference() {
        copyOnWrite();
        instance.clearValueParameterReference();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @return Whether the constantValue field is set.
       */
      @java.lang.Override
      public boolean hasConstantValue() {
        return instance.hasConstantValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @return The constantValue.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue getConstantValue() {
        return instance.getConstantValue();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @param value The enum numeric value on the wire for constantValue to set.
       * @return This builder for chaining.
       */
      public Builder setConstantValue(org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue value) {
        copyOnWrite();
        instance.setConstantValue(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.Expression.ConstantValue constant_value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearConstantValue() {
        copyOnWrite();
        instance.clearConstantValue();
        return this;
      }

      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      @java.lang.Override
      public boolean hasIsInstanceType() {
        return instance.hasIsInstanceType();
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Type getIsInstanceType() {
        return instance.getIsInstanceType();
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder setIsInstanceType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.setIsInstanceType(value);
        return this;
        }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder setIsInstanceType(
          org.jetbrains.kotlin.metadata.ProtoBuf.Type.Builder builderForValue) {
        copyOnWrite();
        instance.setIsInstanceType(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder mergeIsInstanceType(org.jetbrains.kotlin.metadata.ProtoBuf.Type value) {
        copyOnWrite();
        instance.mergeIsInstanceType(value);
        return this;
      }
      /**
       * <pre>
       * present =&gt; this expression is IsInstancePredicate,  with 'variableName' as LHS
       * and with type encoded in either one of next two fields as RHS.
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.Type is_instance_type = 4;</code>
       */
      public Builder clearIsInstanceType() {  copyOnWrite();
        instance.clearIsInstanceType();
        return this;
      }

      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return Whether the isInstanceTypeId field is set.
       */
      @java.lang.Override
      public boolean hasIsInstanceTypeId() {
        return instance.hasIsInstanceTypeId();
      }
      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return The isInstanceTypeId.
       */
      @java.lang.Override
      public int getIsInstanceTypeId() {
        return instance.getIsInstanceTypeId();
      }
      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @param value The isInstanceTypeId to set.
       * @return This builder for chaining.
       */
      public Builder setIsInstanceTypeId(int value) {
        copyOnWrite();
        instance.setIsInstanceTypeId(value);
        return this;
      }
      /**
       * <code>int32 is_instance_type_id = 5 [(.org.jetbrains.kotlin.metadata.type_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsInstanceTypeId() {
        copyOnWrite();
        instance.clearIsInstanceTypeId();
        return this;
      }

      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getAndArgumentList() {
        return java.util.Collections.unmodifiableList(
            instance.getAndArgumentList());
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      @java.lang.Override
      public int getAndArgumentCount() {
        return instance.getAndArgumentCount();
      }/**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getAndArgument(int index) {
        return instance.getAndArgument(index);
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder setAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.setAndArgument(index, value);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder setAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setAndArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.addAndArgument(value);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.addAndArgument(index, value);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addAndArgument(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAndArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addAndArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder addAllAndArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
        copyOnWrite();
        instance.addAllAndArgument(values);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder clearAndArgument() {
        copyOnWrite();
        instance.clearAndArgument();
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'andArguments[0] &amp;&amp; andArguments[1] &amp;&amp; ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression and_argument = 6;</code>
       */
      public Builder removeAndArgument(int index) {
        copyOnWrite();
        instance.removeAndArgument(index);
        return this;
      }

      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> getOrArgumentList() {
        return java.util.Collections.unmodifiableList(
            instance.getOrArgumentList());
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      @java.lang.Override
      public int getOrArgumentCount() {
        return instance.getOrArgumentCount();
      }/**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Expression getOrArgument(int index) {
        return instance.getOrArgument(index);
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder setOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.setOrArgument(index, value);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder setOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.setOrArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.addOrArgument(value);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression value) {
        copyOnWrite();
        instance.addOrArgument(index, value);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(
          org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addOrArgument(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addOrArgument(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Expression.Builder builderForValue) {
        copyOnWrite();
        instance.addOrArgument(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder addAllOrArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Expression> values) {
        copyOnWrite();
        instance.addAllOrArgument(values);
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder clearOrArgument() {
        copyOnWrite();
        instance.clearOrArgument();
        return this;
      }
      /**
       * <pre>
       * non-empty =&gt; this expression is boolean formula of form 'orArguments[0] || andArguments[1] || ...'
       * Additionally, if first argument of formula is primitive expression (i.e. predicate or value),
       * it is optimized and embedded straight into this message.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Expression or_argument = 7;</code>
       */
      public Builder removeOrArgument(int index) {
        copyOnWrite();
        instance.removeOrArgument(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.Expression)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.Expression();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "flags_",
              "valueParameterReference_",
              "constantValue_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression.ConstantValue.internalGetVerifier(),
              "isInstanceType_",
              "isInstanceTypeId_",
              "andArgument_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class,
              "orArgument_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class,
            };
            java.lang.String info =
                "\u0004\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0002\u0003\u0001\u1004\u0000\u0002" +
                "\u1004\u0001\u0003\u180c\u0002\u0004\u1409\u0003\u0005\u1004\u0004\u0006\u041b\u0007" +
                "\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.Expression> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.Expression>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.Expression)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.Expression DEFAULT_INSTANCE;
    static {
      Expression defaultInstance = new Expression();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Expression.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.Expression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Expression> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Expression> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CompilerPluginDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.CompilerPluginData)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return Whether the pluginId field is set.
     */
    boolean hasPluginId();
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return The pluginId.
     */
    int getPluginId();

    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return Whether the data field is set.
     */
    boolean hasData();
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return The data.
     */
    org.jetbrains.kotlin.protobuf.ByteString getData();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.CompilerPluginData}
   */
  public  static final class CompilerPluginData extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          CompilerPluginData, CompilerPluginData.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.CompilerPluginData)
      CompilerPluginDataOrBuilder {
    private CompilerPluginData() {
      data_ = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;
    }
    private int bitField0_;
    public static final int PLUGIN_ID_FIELD_NUMBER = 1;
    private int pluginId_;
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return Whether the pluginId field is set.
     */
    @java.lang.Override
    public boolean hasPluginId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @return The pluginId.
     */
    @java.lang.Override
    public int getPluginId() {
      return pluginId_;
    }
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     * @param value The pluginId to set.
     */
    private void setPluginId(int value) {
      bitField0_ |= 0x00000001;
      pluginId_ = value;
    }
    /**
     * <code>int32 plugin_id = 1 [features = { ... }</code>
     */
    private void clearPluginId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      pluginId_ = 0;
    }

    public static final int DATA_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.ByteString data_;
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return Whether the data field is set.
     */
    @java.lang.Override
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @return The data.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString getData() {
      return data_;
    }
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     * @param value The data to set.
     */
    private void setData(org.jetbrains.kotlin.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000002;
      data_ = value;
    }
    /**
     * <code>bytes data = 2 [features = { ... }</code>
     */
    private void clearData() {
      bitField0_ = (bitField0_ & ~0x00000002);
      data_ = getDefaultInstance().getData();
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.CompilerPluginData}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.CompilerPluginData)
        org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginDataOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @return Whether the pluginId field is set.
       */
      @java.lang.Override
      public boolean hasPluginId() {
        return instance.hasPluginId();
      }
      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @return The pluginId.
       */
      @java.lang.Override
      public int getPluginId() {
        return instance.getPluginId();
      }
      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @param value The pluginId to set.
       * @return This builder for chaining.
       */
      public Builder setPluginId(int value) {
        copyOnWrite();
        instance.setPluginId(value);
        return this;
      }
      /**
       * <code>int32 plugin_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPluginId() {
        copyOnWrite();
        instance.clearPluginId();
        return this;
      }

      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @return Whether the data field is set.
       */
      @java.lang.Override
      public boolean hasData() {
        return instance.hasData();
      }
      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @return The data.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString getData() {
        return instance.getData();
      }
      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <code>bytes data = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.CompilerPluginData)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "pluginId_",
              "data_",
            };
            java.lang.String info =
                "\u0004\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0002\u0001\u1504\u0000\u0002" +
                "\u150a\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.CompilerPluginData)
    private static final org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData DEFAULT_INSTANCE;
    static {
      CompilerPluginData defaultInstance = new CompilerPluginData();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CompilerPluginData.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.ProtoBuf.CompilerPluginData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<CompilerPluginData> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<CompilerPluginData> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}