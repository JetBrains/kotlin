//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

val property: @Composable (Int) -> Int = ::Fn

@Composable
fun Ref(content: @Composable (Int) -> Int) {
    Ref(property)
}

//
// Transformed IR
// ------------------------------------------

val property: Function3<Int, Composer, Int, Int> = @Composable
fun Fn(int: Int, %composer: Composer?, %changed: Int): Int {
  %composer.startReplaceGroup(<>)
  sourceInformation(%composer, "C(Fn)N(int):Test.kt")
  val tmp0 = Fn(int, %composer, 0b1110 and %changed)
  %composer.endReplaceGroup()
  return tmp0
}
::Fn
@Composable
@FunctionKeyMeta(key = -165560361, startOffset = 143, endOffset = 231)
fun Ref(content: Function3<Int, Composer, Int, Int>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Ref)N(content)<Ref(pr...>:Test.kt")
  if (%composer.shouldExecute(%changed and 0b0001 != 0, %changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    Ref(property, %composer, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Ref(content, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
