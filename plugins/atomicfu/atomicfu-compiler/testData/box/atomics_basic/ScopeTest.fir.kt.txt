class AA {
  val value: Int
    field = value
    get

  val b: B
    field = B(value = <this>.<get-value>().plus(other = 1))
    get

  val c: C
    field = C(d = D(e = E(x = <this>.<get-value>().plus(other = 1))))
    get

  constructor(value: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun manyProperties(affected: Any): Boolean {
    compareAndSetField<Any?>(/* <this> = AtomicStateaffected as AtomicState::state$volatile, */ expectedValue = <this>, newValue = <this>.<get-c>().<get-d>().<get-e>()) /*~> Unit */
    return when {
      atomicGetField<Any?>(/* <this> = AtomicStateaffected /*as AtomicState */::state$volatile */) as Any? is E -> EQEQ(arg0 = atomicGetField<Any?>(/* <this> = AtomicStateaffected /*as AtomicState */::state$volatile */) as Any? as E.<get-x>(), arg1 = <this>.<get-value>().plus(other = 1))
      else -> false
    }
  }

  fun updateToB(affected: Any): Boolean {
    compareAndSetField<Any?>(/* <this> = AtomicStateaffected as AtomicState::state$volatile, */ expectedValue = <this>, newValue = <this>.<get-b>()) /*~> Unit */
    return when {
      atomicGetField<Any?>(/* <this> = AtomicStateaffected /*as AtomicState */::state$volatile */) as Any? is B -> EQEQ(arg0 = atomicGetField<Any?>(/* <this> = AtomicStateaffected /*as AtomicState */::state$volatile */) as Any? as B.<get-value>(), arg1 = <this>.<get-value>().plus(other = 1))
      else -> false
    }
  }

}

private class AtomicState {
  var state$volatile: Any?
    field = value
    get(): Any? {
      return <this>.#state$volatile
    }
    set(value: Any?) {
      return <this>.#state$volatile = value
    }

  constructor(value: Any) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class B {
  val value: Int
    field = value
    get

  constructor(value: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class C {
  val d: D
    field = d
    get

  constructor(d: D) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class D {
  val e: E
    field = e
    get

  constructor(e: E) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class E {
  val x: Int
    field = x
    get

  constructor(x: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class ScopeTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun scopeTest() {
    val a: AA = AA(value = 0)
    val affected: Any = AtomicState(value = a)
    check(value = a.updateToB(affected = affected))
    val a1: AA = AA(value = 0)
    val affected1: Any = AtomicState(value = a1)
    check(value = a1.manyProperties(affected = affected1))
  }

}

fun box(): String {
  val testClass: ScopeTest = ScopeTest()
  testClass.scopeTest()
  return "OK"
}
