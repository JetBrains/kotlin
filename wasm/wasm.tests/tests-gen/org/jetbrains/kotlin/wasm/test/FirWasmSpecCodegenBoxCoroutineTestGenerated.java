/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.wasm.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateWasmTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box/coroutines")
@TestDataPath("$PROJECT_ROOT")
public class FirWasmSpecCodegenBoxCoroutineTestGenerated extends AbstractFirWasmSpecCodegenBoxCoroutineTest {
  @Test
  @TestMetadata("32defaultParametersInSuspend.kt")
  public void test32defaultParametersInSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/32defaultParametersInSuspend.kt");
  }

  @Test
  @TestMetadata("accessorForSuspend.kt")
  public void testAccessorForSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/accessorForSuspend.kt");
  }

  @Test
  public void testAllFilesPresentInCoroutines() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines"), Pattern.compile("^([^_](.+))\\.kt$"), null, true, "compileKotlinAgainstKotlin", "multiplatform/k1");
  }

  @Test
  @TestMetadata("anonymousObject.kt")
  public void testAnonymousObject() {
    runTest("compiler/testData/codegen/box/coroutines/anonymousObject.kt");
  }

  @Test
  @TestMetadata("async.kt")
  public void testAsync() {
    runTest("compiler/testData/codegen/box/coroutines/async.kt");
  }

  @Test
  @TestMetadata("asyncException.kt")
  public void testAsyncException() {
    runTest("compiler/testData/codegen/box/coroutines/asyncException.kt");
  }

  @Test
  @TestMetadata("asyncIteratorNullMerge_1_3.kt")
  public void testAsyncIteratorNullMerge_1_3() {
    runTest("compiler/testData/codegen/box/coroutines/asyncIteratorNullMerge_1_3.kt");
  }

  @Test
  @TestMetadata("asyncIteratorToList_1_3.kt")
  public void testAsyncIteratorToList_1_3() {
    runTest("compiler/testData/codegen/box/coroutines/asyncIteratorToList_1_3.kt");
  }

  @Test
  @TestMetadata("asyncIterator_1_3.kt")
  public void testAsyncIterator_1_3() {
    runTest("compiler/testData/codegen/box/coroutines/asyncIterator_1_3.kt");
  }

  @Test
  @TestMetadata("await.kt")
  public void testAwait() {
    runTest("compiler/testData/codegen/box/coroutines/await.kt");
  }

  @Test
  @TestMetadata("beginWithException.kt")
  public void testBeginWithException() {
    runTest("compiler/testData/codegen/box/coroutines/beginWithException.kt");
  }

  @Test
  @TestMetadata("beginWithExceptionNoHandleException.kt")
  public void testBeginWithExceptionNoHandleException() {
    runTest("compiler/testData/codegen/box/coroutines/beginWithExceptionNoHandleException.kt");
  }

  @Test
  @TestMetadata("builderInferenceAndGenericArrayAcessCall.kt")
  public void testBuilderInferenceAndGenericArrayAcessCall() {
    runTest("compiler/testData/codegen/box/coroutines/builderInferenceAndGenericArrayAcessCall.kt");
  }

  @Test
  @TestMetadata("captureInfixFun.kt")
  public void testCaptureInfixFun() {
    runTest("compiler/testData/codegen/box/coroutines/captureInfixFun.kt");
  }

  @Test
  @TestMetadata("captureMutableLocalVariableInsideCoroutineBlock.kt")
  public void testCaptureMutableLocalVariableInsideCoroutineBlock() {
    runTest("compiler/testData/codegen/box/coroutines/captureMutableLocalVariableInsideCoroutineBlock.kt");
  }

  @Test
  @TestMetadata("captureUnaryOperator.kt")
  public void testCaptureUnaryOperator() {
    runTest("compiler/testData/codegen/box/coroutines/captureUnaryOperator.kt");
  }

  @Test
  @TestMetadata("capturedVarInSuspendLambda.kt")
  public void testCapturedVarInSuspendLambda() {
    runTest("compiler/testData/codegen/box/coroutines/capturedVarInSuspendLambda.kt");
  }

  @Test
  @TestMetadata("castWithSuspend.kt")
  public void testCastWithSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/castWithSuspend.kt");
  }

  @Test
  @TestMetadata("catchWithInlineInsideSuspend.kt")
  public void testCatchWithInlineInsideSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/catchWithInlineInsideSuspend.kt");
  }

  @Test
  @TestMetadata("coercionToUnit.kt")
  public void testCoercionToUnit() {
    runTest("compiler/testData/codegen/box/coroutines/coercionToUnit.kt");
  }

  @Test
  @TestMetadata("controlFlow_chain.kt")
  public void testControlFlow_chain() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_chain.kt");
  }

  @Test
  @TestMetadata("controlFlow_finally1.kt")
  public void testControlFlow_finally1() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally1.kt");
  }

  @Test
  @TestMetadata("controlFlow_finally2.kt")
  public void testControlFlow_finally2() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally2.kt");
  }

  @Test
  @TestMetadata("controlFlow_finally3.kt")
  public void testControlFlow_finally3() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally3.kt");
  }

  @Test
  @TestMetadata("controlFlow_finally4.kt")
  public void testControlFlow_finally4() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally4.kt");
  }

  @Test
  @TestMetadata("controlFlow_finally5.kt")
  public void testControlFlow_finally5() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally5.kt");
  }

  @Test
  @TestMetadata("controlFlow_finally6.kt")
  public void testControlFlow_finally6() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally6.kt");
  }

  @Test
  @TestMetadata("controlFlow_finally7.kt")
  public void testControlFlow_finally7() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_finally7.kt");
  }

  @Test
  @TestMetadata("controlFlow_if1.kt")
  public void testControlFlow_if1() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_if1.kt");
  }

  @Test
  @TestMetadata("controlFlow_if2.kt")
  public void testControlFlow_if2() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_if2.kt");
  }

  @Test
  @TestMetadata("controlFlow_inline1.kt")
  public void testControlFlow_inline1() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_inline1.kt");
  }

  @Test
  @TestMetadata("controlFlow_inline2.kt")
  public void testControlFlow_inline2() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_inline2.kt");
  }

  @Test
  @TestMetadata("controlFlow_inline3.kt")
  public void testControlFlow_inline3() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_inline3.kt");
  }

  @Test
  @TestMetadata("controlFlow_tryCatch1.kt")
  public void testControlFlow_tryCatch1() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch1.kt");
  }

  @Test
  @TestMetadata("controlFlow_tryCatch2.kt")
  public void testControlFlow_tryCatch2() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch2.kt");
  }

  @Test
  @TestMetadata("controlFlow_tryCatch3.kt")
  public void testControlFlow_tryCatch3() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch3.kt");
  }

  @Test
  @TestMetadata("controlFlow_tryCatch4.kt")
  public void testControlFlow_tryCatch4() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch4.kt");
  }

  @Test
  @TestMetadata("controlFlow_tryCatch5.kt")
  public void testControlFlow_tryCatch5() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_tryCatch5.kt");
  }

  @Test
  @TestMetadata("controlFlow_while1.kt")
  public void testControlFlow_while1() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_while1.kt");
  }

  @Test
  @TestMetadata("controlFlow_while2.kt")
  public void testControlFlow_while2() {
    runTest("compiler/testData/codegen/box/coroutines/controlFlow_while2.kt");
  }

  @Test
  @TestMetadata("controllerAccessFromInnerLambda.kt")
  public void testControllerAccessFromInnerLambda() {
    runTest("compiler/testData/codegen/box/coroutines/controllerAccessFromInnerLambda.kt");
  }

  @Test
  @TestMetadata("coroutineContext1.kt")
  public void testCoroutineContext1() {
    runTest("compiler/testData/codegen/box/coroutines/coroutineContext1.kt");
  }

  @Test
  @TestMetadata("coroutineContext2.kt")
  public void testCoroutineContext2() {
    runTest("compiler/testData/codegen/box/coroutines/coroutineContext2.kt");
  }

  @Test
  @TestMetadata("coroutineContextInInlinedLambda.kt")
  public void testCoroutineContextInInlinedLambda() {
    runTest("compiler/testData/codegen/box/coroutines/coroutineContextInInlinedLambda.kt");
  }

  @Test
  @TestMetadata("coroutineToString.kt")
  public void testCoroutineToString() {
    runTest("compiler/testData/codegen/box/coroutines/coroutineToString.kt");
  }

  @Test
  @TestMetadata("correctOrder1.kt")
  public void testCorrectOrder1() {
    runTest("compiler/testData/codegen/box/coroutines/correctOrder1.kt");
  }

  @Test
  @TestMetadata("createCoroutineSafe.kt")
  public void testCreateCoroutineSafe() {
    runTest("compiler/testData/codegen/box/coroutines/createCoroutineSafe.kt");
  }

  @Test
  @TestMetadata("createCoroutinesOnManualInstances.kt")
  public void testCreateCoroutinesOnManualInstances() {
    runTest("compiler/testData/codegen/box/coroutines/createCoroutinesOnManualInstances.kt");
  }

  @Test
  @TestMetadata("crossInlineWithCapturedOuterReceiver.kt")
  public void testCrossInlineWithCapturedOuterReceiver() {
    runTest("compiler/testData/codegen/box/coroutines/crossInlineWithCapturedOuterReceiver.kt");
  }

  @Test
  @TestMetadata("defaultParameterLambdaInSuspend.kt")
  public void testDefaultParameterLambdaInSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/defaultParameterLambdaInSuspend.kt");
  }

  @Test
  @TestMetadata("defaultParametersInSuspend.kt")
  public void testDefaultParametersInSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspend.kt");
  }

  @Test
  @TestMetadata("defaultParametersInSuspendWithJvmOverloads.kt")
  public void testDefaultParametersInSuspendWithJvmOverloads() {
    runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspendWithJvmOverloads.kt");
  }

  @Test
  @TestMetadata("degenerate1.kt")
  public void testDegenerate1() {
    runTest("compiler/testData/codegen/box/coroutines/degenerate1.kt");
  }

  @Test
  @TestMetadata("degenerate2.kt")
  public void testDegenerate2() {
    runTest("compiler/testData/codegen/box/coroutines/degenerate2.kt");
  }

  @Test
  @TestMetadata("delegatedSuspendMember.kt")
  public void testDelegatedSuspendMember() {
    runTest("compiler/testData/codegen/box/coroutines/delegatedSuspendMember.kt");
  }

  @Test
  @TestMetadata("deserializedSuspendFunctionProperty.kt")
  public void testDeserializedSuspendFunctionProperty() {
    runTest("compiler/testData/codegen/box/coroutines/deserializedSuspendFunctionProperty.kt");
  }

  @Test
  @TestMetadata("dispatchResume.kt")
  public void testDispatchResume() {
    runTest("compiler/testData/codegen/box/coroutines/dispatchResume.kt");
  }

  @Test
  @TestMetadata("doubleColonExpressionsGenerationInBuilderInference.kt")
  public void testDoubleColonExpressionsGenerationInBuilderInference() {
    runTest("compiler/testData/codegen/box/coroutines/doubleColonExpressionsGenerationInBuilderInference.kt");
  }

  @Test
  @TestMetadata("emptyClosure.kt")
  public void testEmptyClosure() {
    runTest("compiler/testData/codegen/box/coroutines/emptyClosure.kt");
  }

  @Test
  @TestMetadata("emptyCommonConstraintSystemForCoroutineInferenceCall.kt")
  public void testEmptyCommonConstraintSystemForCoroutineInferenceCall() {
    runTest("compiler/testData/codegen/box/coroutines/emptyCommonConstraintSystemForCoroutineInferenceCall.kt");
  }

  @Test
  @TestMetadata("epam.kt")
  public void testEpam() {
    runTest("compiler/testData/codegen/box/coroutines/epam.kt");
  }

  @Test
  @TestMetadata("falseUnitCoercion.kt")
  public void testFalseUnitCoercion() {
    runTest("compiler/testData/codegen/box/coroutines/falseUnitCoercion.kt");
  }

  @Test
  @TestMetadata("functionReference_eqeq_name.kt")
  public void testFunctionReference_eqeq_name() {
    runTest("compiler/testData/codegen/box/coroutines/functionReference_eqeq_name.kt");
  }

  @Test
  @TestMetadata("functionReference_invokeAsFunction.kt")
  public void testFunctionReference_invokeAsFunction() {
    runTest("compiler/testData/codegen/box/coroutines/functionReference_invokeAsFunction.kt");
  }

  @Test
  @TestMetadata("functionReference_lambdaAsSuspendLambda.kt")
  public void testFunctionReference_lambdaAsSuspendLambda() {
    runTest("compiler/testData/codegen/box/coroutines/functionReference_lambdaAsSuspendLambda.kt");
  }

  @Test
  @TestMetadata("functionReference_simple.kt")
  public void testFunctionReference_simple() {
    runTest("compiler/testData/codegen/box/coroutines/functionReference_simple.kt");
  }

  @Test
  @TestMetadata("generate.kt")
  public void testGenerate() {
    runTest("compiler/testData/codegen/box/coroutines/generate.kt");
  }

  @Test
  @TestMetadata("genericSignatureForSuspendImpl.kt")
  public void testGenericSignatureForSuspendImpl() {
    runTest("compiler/testData/codegen/box/coroutines/genericSignatureForSuspendImpl.kt");
  }

  @Test
  @TestMetadata("handleException.kt")
  public void testHandleException() {
    runTest("compiler/testData/codegen/box/coroutines/handleException.kt");
  }

  @Test
  @TestMetadata("handleResultCallEmptyBody.kt")
  public void testHandleResultCallEmptyBody() {
    runTest("compiler/testData/codegen/box/coroutines/handleResultCallEmptyBody.kt");
  }

  @Test
  @TestMetadata("handleResultNonUnitExpression.kt")
  public void testHandleResultNonUnitExpression() {
    runTest("compiler/testData/codegen/box/coroutines/handleResultNonUnitExpression.kt");
  }

  @Test
  @TestMetadata("handleResultSuspended.kt")
  public void testHandleResultSuspended() {
    runTest("compiler/testData/codegen/box/coroutines/handleResultSuspended.kt");
  }

  @Test
  @TestMetadata("illegalState.kt")
  public void testIllegalState() {
    runTest("compiler/testData/codegen/box/coroutines/illegalState.kt");
  }

  @Test
  @TestMetadata("implicitUnitReturn.kt")
  public void testImplicitUnitReturn() {
    runTest("compiler/testData/codegen/box/coroutines/implicitUnitReturn.kt");
  }

  @Test
  @TestMetadata("indirectInlineUsedAsNonInline.kt")
  public void testIndirectInlineUsedAsNonInline() {
    runTest("compiler/testData/codegen/box/coroutines/indirectInlineUsedAsNonInline.kt");
  }

  @Test
  @TestMetadata("infiniteLoopInNextMeaningful.kt")
  public void testInfiniteLoopInNextMeaningful() {
    runTest("compiler/testData/codegen/box/coroutines/infiniteLoopInNextMeaningful.kt");
  }

  @Test
  @TestMetadata("inlineCallWithReturns.kt")
  public void testInlineCallWithReturns() {
    runTest("compiler/testData/codegen/box/coroutines/inlineCallWithReturns.kt");
  }

  @Test
  @TestMetadata("inlineFunInGenericClass.kt")
  public void testInlineFunInGenericClass() {
    runTest("compiler/testData/codegen/box/coroutines/inlineFunInGenericClass.kt");
  }

  @Test
  @TestMetadata("inlineFunctionInMultifileClass.kt")
  public void testInlineFunctionInMultifileClass() {
    runTest("compiler/testData/codegen/box/coroutines/inlineFunctionInMultifileClass.kt");
  }

  @Test
  @TestMetadata("inlineFunctionInMultifileClassUnoptimized.kt")
  public void testInlineFunctionInMultifileClassUnoptimized() {
    runTest("compiler/testData/codegen/box/coroutines/inlineFunctionInMultifileClassUnoptimized.kt");
  }

  @Test
  @TestMetadata("inlineGenericFunCalledFromSubclass.kt")
  public void testInlineGenericFunCalledFromSubclass() {
    runTest("compiler/testData/codegen/box/coroutines/inlineGenericFunCalledFromSubclass.kt");
  }

  @Test
  @TestMetadata("inlineSuspendFunction.kt")
  public void testInlineSuspendFunction() {
    runTest("compiler/testData/codegen/box/coroutines/inlineSuspendFunction.kt");
  }

  @Test
  @TestMetadata("inlineSuspendLambdaNonLocalReturn.kt")
  public void testInlineSuspendLambdaNonLocalReturn() {
    runTest("compiler/testData/codegen/box/coroutines/inlineSuspendLambdaNonLocalReturn.kt");
  }

  @Test
  @TestMetadata("inlineSuspendTypealias.kt")
  public void testInlineSuspendTypealias() {
    runTest("compiler/testData/codegen/box/coroutines/inlineSuspendTypealias.kt");
  }

  @Test
  @TestMetadata("inlinedTryCatchFinally.kt")
  public void testInlinedTryCatchFinally() {
    runTest("compiler/testData/codegen/box/coroutines/inlinedTryCatchFinally.kt");
  }

  @Test
  @TestMetadata("innerSuspensionCalls.kt")
  public void testInnerSuspensionCalls() {
    runTest("compiler/testData/codegen/box/coroutines/innerSuspensionCalls.kt");
  }

  @Test
  @TestMetadata("instanceOfContinuation.kt")
  public void testInstanceOfContinuation() {
    runTest("compiler/testData/codegen/box/coroutines/instanceOfContinuation.kt");
  }

  @Test
  @TestMetadata("iterateOverArray.kt")
  public void testIterateOverArray() {
    runTest("compiler/testData/codegen/box/coroutines/iterateOverArray.kt");
  }

  @Test
  @TestMetadata("jvmStaticAndJvmInline.kt")
  public void testJvmStaticAndJvmInline() {
    runTest("compiler/testData/codegen/box/coroutines/jvmStaticAndJvmInline.kt");
  }

  @Test
  @TestMetadata("kt12958.kt")
  public void testKt12958() {
    runTest("compiler/testData/codegen/box/coroutines/kt12958.kt");
  }

  @Test
  @TestMetadata("kt15016.kt")
  public void testKt15016() {
    runTest("compiler/testData/codegen/box/coroutines/kt15016.kt");
  }

  @Test
  @TestMetadata("kt15017.kt")
  public void testKt15017() {
    runTest("compiler/testData/codegen/box/coroutines/kt15017.kt");
  }

  @Test
  @TestMetadata("kt15930.kt")
  public void testKt15930() {
    runTest("compiler/testData/codegen/box/coroutines/kt15930.kt");
  }

  @Test
  @TestMetadata("kt21080.kt")
  public void testKt21080() {
    runTest("compiler/testData/codegen/box/coroutines/kt21080.kt");
  }

  @Test
  @TestMetadata("kt21605.kt")
  public void testKt21605() {
    runTest("compiler/testData/codegen/box/coroutines/kt21605.kt");
  }

  @Test
  @TestMetadata("kt24135.kt")
  public void testKt24135() {
    runTest("compiler/testData/codegen/box/coroutines/kt24135.kt");
  }

  @Test
  @TestMetadata("kt25912.kt")
  public void testKt25912() {
    runTest("compiler/testData/codegen/box/coroutines/kt25912.kt");
  }

  @Test
  @TestMetadata("kt28844.kt")
  public void testKt28844() {
    runTest("compiler/testData/codegen/box/coroutines/kt28844.kt");
  }

  @Test
  @TestMetadata("kt30858.kt")
  public void testKt30858() {
    runTest("compiler/testData/codegen/box/coroutines/kt30858.kt");
  }

  @Test
  @TestMetadata("kt31784.kt")
  public void testKt31784() {
    runTest("compiler/testData/codegen/box/coroutines/kt31784.kt");
  }

  @Test
  @TestMetadata("kt35967.kt")
  public void testKt35967() {
    runTest("compiler/testData/codegen/box/coroutines/kt35967.kt");
  }

  @Test
  @TestMetadata("kt38099.kt")
  public void testKt38099() {
    runTest("compiler/testData/codegen/box/coroutines/kt38099.kt");
  }

  @Test
  @TestMetadata("kt41394.kt")
  public void testKt41394() {
    runTest("compiler/testData/codegen/box/coroutines/kt41394.kt");
  }

  @Test
  @TestMetadata("kt42028.kt")
  public void testKt42028() {
    runTest("compiler/testData/codegen/box/coroutines/kt42028.kt");
  }

  @Test
  @TestMetadata("kt42554.kt")
  public void testKt42554() {
    runTest("compiler/testData/codegen/box/coroutines/kt42554.kt");
  }

  @Test
  @TestMetadata("kt44221.kt")
  public void testKt44221() {
    runTest("compiler/testData/codegen/box/coroutines/kt44221.kt");
  }

  @Test
  @TestMetadata("kt44710.kt")
  public void testKt44710() {
    runTest("compiler/testData/codegen/box/coroutines/kt44710.kt");
  }

  @Test
  @TestMetadata("kt44781.kt")
  public void testKt44781() {
    runTest("compiler/testData/codegen/box/coroutines/kt44781.kt");
  }

  @Test
  @TestMetadata("kt45377.kt")
  public void testKt45377() {
    runTest("compiler/testData/codegen/box/coroutines/kt45377.kt");
  }

  @Test
  @TestMetadata("kt46813.kt")
  public void testKt46813() {
    runTest("compiler/testData/codegen/box/coroutines/kt46813.kt");
  }

  @Test
  @TestMetadata("kt49168.kt")
  public void testKt49168() {
    runTest("compiler/testData/codegen/box/coroutines/kt49168.kt");
  }

  @Test
  @TestMetadata("kt49317.kt")
  public void testKt49317() {
    runTest("compiler/testData/codegen/box/coroutines/kt49317.kt");
  }

  @Test
  @TestMetadata("kt50277.kt")
  public void testKt50277() {
    runTest("compiler/testData/codegen/box/coroutines/kt50277.kt");
  }

  @Test
  @TestMetadata("kt51530.kt")
  public void testKt51530() {
    runTest("compiler/testData/codegen/box/coroutines/kt51530.kt");
  }

  @Test
  @TestMetadata("kt51718.kt")
  public void testKt51718() {
    runTest("compiler/testData/codegen/box/coroutines/kt51718.kt");
  }

  @Test
  @TestMetadata("kt52311_nullOnLeft.kt")
  public void testKt52311_nullOnLeft() {
    runTest("compiler/testData/codegen/box/coroutines/kt52311_nullOnLeft.kt");
  }

  @Test
  @TestMetadata("kt52311_nullOnRight.kt")
  public void testKt52311_nullOnRight() {
    runTest("compiler/testData/codegen/box/coroutines/kt52311_nullOnRight.kt");
  }

  @Test
  @TestMetadata("kt52561.kt")
  public void testKt52561() {
    runTest("compiler/testData/codegen/box/coroutines/kt52561.kt");
  }

  @Test
  @TestMetadata("kt55494.kt")
  public void testKt55494() {
    runTest("compiler/testData/codegen/box/coroutines/kt55494.kt");
  }

  @Test
  @TestMetadata("kt56407.kt")
  public void testKt56407() {
    runTest("compiler/testData/codegen/box/coroutines/kt56407.kt");
  }

  @Test
  @TestMetadata("lastExpressionIsLoop.kt")
  public void testLastExpressionIsLoop() {
    runTest("compiler/testData/codegen/box/coroutines/lastExpressionIsLoop.kt");
  }

  @Test
  @TestMetadata("lastStatementInc.kt")
  public void testLastStatementInc() {
    runTest("compiler/testData/codegen/box/coroutines/lastStatementInc.kt");
  }

  @Test
  @TestMetadata("lastStementAssignment.kt")
  public void testLastStementAssignment() {
    runTest("compiler/testData/codegen/box/coroutines/lastStementAssignment.kt");
  }

  @Test
  @TestMetadata("lastUnitExpression.kt")
  public void testLastUnitExpression() {
    runTest("compiler/testData/codegen/box/coroutines/lastUnitExpression.kt");
  }

  @Test
  @TestMetadata("localCallableRef.kt")
  public void testLocalCallableRef() {
    runTest("compiler/testData/codegen/box/coroutines/localCallableRef.kt");
  }

  @Test
  @TestMetadata("localDelegate.kt")
  public void testLocalDelegate() {
    runTest("compiler/testData/codegen/box/coroutines/localDelegate.kt");
  }

  @Test
  @TestMetadata("longRangeInSuspendCall.kt")
  public void testLongRangeInSuspendCall() {
    runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendCall.kt");
  }

  @Test
  @TestMetadata("longRangeInSuspendFun.kt")
  public void testLongRangeInSuspendFun() {
    runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendFun.kt");
  }

  @Test
  @TestMetadata("mergeNullAndString.kt")
  public void testMergeNullAndString() {
    runTest("compiler/testData/codegen/box/coroutines/mergeNullAndString.kt");
  }

  @Test
  @TestMetadata("multipleInvokeCalls.kt")
  public void testMultipleInvokeCalls() {
    runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCalls.kt");
  }

  @Test
  @TestMetadata("multipleInvokeCallsInsideInlineLambda1.kt")
  public void testMultipleInvokeCallsInsideInlineLambda1() {
    runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda1.kt");
  }

  @Test
  @TestMetadata("multipleInvokeCallsInsideInlineLambda2.kt")
  public void testMultipleInvokeCallsInsideInlineLambda2() {
    runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda2.kt");
  }

  @Test
  @TestMetadata("multipleInvokeCallsInsideInlineLambda3.kt")
  public void testMultipleInvokeCallsInsideInlineLambda3() {
    runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda3.kt");
  }

  @Test
  @TestMetadata("nestedTryCatch.kt")
  public void testNestedTryCatch() {
    runTest("compiler/testData/codegen/box/coroutines/nestedTryCatch.kt");
  }

  @Test
  @TestMetadata("noSuspensionPoints.kt")
  public void testNoSuspensionPoints() {
    runTest("compiler/testData/codegen/box/coroutines/noSuspensionPoints.kt");
  }

  @Test
  @TestMetadata("nonLocalReturn.kt")
  public void testNonLocalReturn() {
    runTest("compiler/testData/codegen/box/coroutines/nonLocalReturn.kt");
  }

  @Test
  @TestMetadata("nonLocalReturnFromInlineLambda.kt")
  public void testNonLocalReturnFromInlineLambda() {
    runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambda.kt");
  }

  @Test
  @TestMetadata("nonLocalReturnFromInlineLambdaDeep.kt")
  public void testNonLocalReturnFromInlineLambdaDeep() {
    runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambdaDeep.kt");
  }

  @Test
  @TestMetadata("nullableSuspendFunctionType.kt")
  public void testNullableSuspendFunctionType() {
    runTest("compiler/testData/codegen/box/coroutines/nullableSuspendFunctionType.kt");
  }

  @Test
  @TestMetadata("overrideDefaultArgument.kt")
  public void testOverrideDefaultArgument() {
    runTest("compiler/testData/codegen/box/coroutines/overrideDefaultArgument.kt");
  }

  @Test
  @TestMetadata("recursiveSuspend.kt")
  public void testRecursiveSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/recursiveSuspend.kt");
  }

  @Test
  @TestMetadata("restrictedSuspendLambda.kt")
  public void testRestrictedSuspendLambda() {
    runTest("compiler/testData/codegen/box/coroutines/restrictedSuspendLambda.kt");
  }

  @Test
  @TestMetadata("returnByLabel.kt")
  public void testReturnByLabel() {
    runTest("compiler/testData/codegen/box/coroutines/returnByLabel.kt");
  }

  @Test
  @TestMetadata("returnsNothing1.kt")
  public void testReturnsNothing1() {
    runTest("compiler/testData/codegen/box/coroutines/returnsNothing1.kt");
  }

  @Test
  @TestMetadata("returnsUnit1.kt")
  public void testReturnsUnit1() {
    runTest("compiler/testData/codegen/box/coroutines/returnsUnit1.kt");
  }

  @Test
  @TestMetadata("simple.kt")
  public void testSimple() {
    runTest("compiler/testData/codegen/box/coroutines/simple.kt");
  }

  @Test
  @TestMetadata("simple2.kt")
  public void testSimple2() {
    runTest("compiler/testData/codegen/box/coroutines/simple2.kt");
  }

  @Test
  @TestMetadata("simpleException.kt")
  public void testSimpleException() {
    runTest("compiler/testData/codegen/box/coroutines/simpleException.kt");
  }

  @Test
  @TestMetadata("simpleSuspendCallableReference.kt")
  public void testSimpleSuspendCallableReference() {
    runTest("compiler/testData/codegen/box/coroutines/simpleSuspendCallableReference.kt");
  }

  @Test
  @TestMetadata("simpleWithDefaultValue.kt")
  public void testSimpleWithDefaultValue() {
    runTest("compiler/testData/codegen/box/coroutines/simpleWithDefaultValue.kt");
  }

  @Test
  @TestMetadata("simpleWithHandleResult.kt")
  public void testSimpleWithHandleResult() {
    runTest("compiler/testData/codegen/box/coroutines/simpleWithHandleResult.kt");
  }

  @Test
  @TestMetadata("statementLikeLastExpression.kt")
  public void testStatementLikeLastExpression() {
    runTest("compiler/testData/codegen/box/coroutines/statementLikeLastExpression.kt");
  }

  @Test
  @TestMetadata("stopAfter.kt")
  public void testStopAfter() {
    runTest("compiler/testData/codegen/box/coroutines/stopAfter.kt");
  }

  @Test
  @TestMetadata("suspendCallInSuperInterfaceCallArguments.kt")
  public void testSuspendCallInSuperInterfaceCallArguments() {
    runTest("compiler/testData/codegen/box/coroutines/suspendCallInSuperInterfaceCallArguments.kt");
  }

  @Test
  @TestMetadata("suspendCallsInArguments.kt")
  public void testSuspendCallsInArguments() {
    runTest("compiler/testData/codegen/box/coroutines/suspendCallsInArguments.kt");
  }

  @Test
  @TestMetadata("suspendConversion.kt")
  public void testSuspendConversion() {
    runTest("compiler/testData/codegen/box/coroutines/suspendConversion.kt");
  }

  @Test
  @TestMetadata("suspendCoroutineFromStateMachine.kt")
  public void testSuspendCoroutineFromStateMachine() {
    runTest("compiler/testData/codegen/box/coroutines/suspendCoroutineFromStateMachine.kt");
  }

  @Test
  @TestMetadata("suspendCovariantJavaOverrides.kt")
  public void testSuspendCovariantJavaOverrides() {
    runTest("compiler/testData/codegen/box/coroutines/suspendCovariantJavaOverrides.kt");
  }

  @Test
  @TestMetadata("suspendDefaultImpl.kt")
  public void testSuspendDefaultImpl() {
    runTest("compiler/testData/codegen/box/coroutines/suspendDefaultImpl.kt");
  }

  @Test
  @TestMetadata("suspendDelegation.kt")
  public void testSuspendDelegation() {
    runTest("compiler/testData/codegen/box/coroutines/suspendDelegation.kt");
  }

  @Test
  @TestMetadata("suspendFromInlineLambda.kt")
  public void testSuspendFromInlineLambda() {
    runTest("compiler/testData/codegen/box/coroutines/suspendFromInlineLambda.kt");
  }

  @Test
  @TestMetadata("suspendFunImportedFromObject.kt")
  public void testSuspendFunImportedFromObject() {
    runTest("compiler/testData/codegen/box/coroutines/suspendFunImportedFromObject.kt");
  }

  @Test
  @TestMetadata("suspendFunctionAsSupertype.kt")
  public void testSuspendFunctionAsSupertype() {
    runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsSupertype.kt");
  }

  @Test
  @TestMetadata("suspendFunctionAsSupertypeCall.kt")
  public void testSuspendFunctionAsSupertypeCall() {
    runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsSupertypeCall.kt");
  }

  @Test
  @TestMetadata("suspendFunctionAsSupertypeWithInlinedFunInKlib.kt")
  public void testSuspendFunctionAsSupertypeWithInlinedFunInKlib() {
    runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsSupertypeWithInlinedFunInKlib.kt");
  }

  @Test
  @TestMetadata("suspendFunctionMethodReference.kt")
  public void testSuspendFunctionMethodReference() {
    runTest("compiler/testData/codegen/box/coroutines/suspendFunctionMethodReference.kt");
  }

  @Test
  @TestMetadata("suspendImplBridge.kt")
  public void testSuspendImplBridge() {
    runTest("compiler/testData/codegen/box/coroutines/suspendImplBridge.kt");
  }

  @Test
  @TestMetadata("suspendImplTypeParameters.kt")
  public void testSuspendImplTypeParameters() {
    runTest("compiler/testData/codegen/box/coroutines/suspendImplTypeParameters.kt");
  }

  @Test
  @TestMetadata("suspendImplTypeParametersOuterClass.kt")
  public void testSuspendImplTypeParametersOuterClass() {
    runTest("compiler/testData/codegen/box/coroutines/suspendImplTypeParametersOuterClass.kt");
  }

  @Test
  @TestMetadata("suspendInCycle.kt")
  public void testSuspendInCycle() {
    runTest("compiler/testData/codegen/box/coroutines/suspendInCycle.kt");
  }

  @Test
  @TestMetadata("suspendInTheMiddleOfObjectConstruction.kt")
  public void testSuspendInTheMiddleOfObjectConstruction() {
    runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstruction.kt");
  }

  @Test
  @TestMetadata("suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt")
  public void testSuspendInTheMiddleOfObjectConstructionEvaluationOrder() {
    runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt");
  }

  @Test
  @TestMetadata("suspendInTheMiddleOfObjectConstructionWithJumpOut.kt")
  public void testSuspendInTheMiddleOfObjectConstructionWithJumpOut() {
    runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionWithJumpOut.kt");
  }

  @Test
  @TestMetadata("suspendInlineReference.kt")
  public void testSuspendInlineReference() {
    runTest("compiler/testData/codegen/box/coroutines/suspendInlineReference.kt");
  }

  @Test
  @TestMetadata("suspendJavaOverrides.kt")
  public void testSuspendJavaOverrides() {
    runTest("compiler/testData/codegen/box/coroutines/suspendJavaOverrides.kt");
  }

  @Test
  @TestMetadata("suspendLambdaInInterface.kt")
  public void testSuspendLambdaInInterface() {
    runTest("compiler/testData/codegen/box/coroutines/suspendLambdaInInterface.kt");
  }

  @Test
  @TestMetadata("suspendLambdaWithArgumentRearrangement.kt")
  public void testSuspendLambdaWithArgumentRearrangement() {
    runTest("compiler/testData/codegen/box/coroutines/suspendLambdaWithArgumentRearrangement.kt");
  }

  @Test
  @TestMetadata("suspendReturningPlatformType.kt")
  public void testSuspendReturningPlatformType() {
    runTest("compiler/testData/codegen/box/coroutines/suspendReturningPlatformType.kt");
  }

  @Test
  @TestMetadata("suspensionInsideSafeCall.kt")
  public void testSuspensionInsideSafeCall() {
    runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCall.kt");
  }

  @Test
  @TestMetadata("suspensionInsideSafeCallWithElvis.kt")
  public void testSuspensionInsideSafeCallWithElvis() {
    runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCallWithElvis.kt");
  }

  @Test
  @TestMetadata("tailCallToNothing.kt")
  public void testTailCallToNothing() {
    runTest("compiler/testData/codegen/box/coroutines/tailCallToNothing.kt");
  }

  @Test
  @TestMetadata("tryCatchFinallyWithHandleResult.kt")
  public void testTryCatchFinallyWithHandleResult() {
    runTest("compiler/testData/codegen/box/coroutines/tryCatchFinallyWithHandleResult.kt");
  }

  @Test
  @TestMetadata("tryCatchWithHandleResult.kt")
  public void testTryCatchWithHandleResult() {
    runTest("compiler/testData/codegen/box/coroutines/tryCatchWithHandleResult.kt");
  }

  @Test
  @TestMetadata("tryFinallyInsideInlineLambda.kt")
  public void testTryFinallyInsideInlineLambda() {
    runTest("compiler/testData/codegen/box/coroutines/tryFinallyInsideInlineLambda.kt");
  }

  @Test
  @TestMetadata("tryFinallyWithHandleResult.kt")
  public void testTryFinallyWithHandleResult() {
    runTest("compiler/testData/codegen/box/coroutines/tryFinallyWithHandleResult.kt");
  }

  @Test
  @TestMetadata("unsafeTransform.kt")
  public void testUnsafeTransform() {
    runTest("compiler/testData/codegen/box/coroutines/unsafeTransform.kt");
  }

  @Test
  @TestMetadata("varCaptuedInCoroutineIntrinsic.kt")
  public void testVarCaptuedInCoroutineIntrinsic() {
    runTest("compiler/testData/codegen/box/coroutines/varCaptuedInCoroutineIntrinsic.kt");
  }

  @Test
  @TestMetadata("varValueConflictsWithTable.kt")
  public void testVarValueConflictsWithTable() {
    runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTable.kt");
  }

  @Test
  @TestMetadata("varValueConflictsWithTableSameSort.kt")
  public void testVarValueConflictsWithTableSameSort() {
    runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTableSameSort.kt");
  }

  @Test
  @TestMetadata("varargCallFromSuspend.kt")
  public void testVarargCallFromSuspend() {
    runTest("compiler/testData/codegen/box/coroutines/varargCallFromSuspend.kt");
  }

  @Test
  @TestMetadata("withReceiver.kt")
  public void testWithReceiver() {
    runTest("compiler/testData/codegen/box/coroutines/withReceiver.kt");
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/bridges")
  @TestDataPath("$PROJECT_ROOT")
  public class Bridges {
    @Test
    public void testAllFilesPresentInBridges() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/bridges"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("interfaceGenericDefault.kt")
    public void testInterfaceGenericDefault() {
      runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceGenericDefault.kt");
    }

    @Test
    @TestMetadata("interfaceSpecialization.kt")
    public void testInterfaceSpecialization() {
      runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceSpecialization.kt");
    }

    @Test
    @TestMetadata("interfaceWithTwoDefaultFunsReturnValueType.kt")
    public void testInterfaceWithTwoDefaultFunsReturnValueType() {
      runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceWithTwoDefaultFunsReturnValueType.kt");
    }

    @Test
    @TestMetadata("lambdaWithLongReceiver.kt")
    public void testLambdaWithLongReceiver() {
      runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithLongReceiver.kt");
    }

    @Test
    @TestMetadata("lambdaWithMultipleParameters.kt")
    public void testLambdaWithMultipleParameters() {
      runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithMultipleParameters.kt");
    }

    @Test
    @TestMetadata("mapSuspendAbstractClear.kt")
    public void testMapSuspendAbstractClear() {
      runTest("compiler/testData/codegen/box/coroutines/bridges/mapSuspendAbstractClear.kt");
    }

    @Test
    @TestMetadata("mapSuspendClear.kt")
    public void testMapSuspendClear() {
      runTest("compiler/testData/codegen/box/coroutines/bridges/mapSuspendClear.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/controlFlow")
  @TestDataPath("$PROJECT_ROOT")
  public class ControlFlow {
    @Test
    public void testAllFilesPresentInControlFlow() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/controlFlow"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("breakFinally.kt")
    public void testBreakFinally() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakFinally.kt");
    }

    @Test
    @TestMetadata("breakStatement.kt")
    public void testBreakStatement() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakStatement.kt");
    }

    @Test
    @TestMetadata("complexChainSuspend.kt")
    public void testComplexChainSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/complexChainSuspend.kt");
    }

    @Test
    @TestMetadata("doWhileStatement.kt")
    public void testDoWhileStatement() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileStatement.kt");
    }

    @Test
    @TestMetadata("doWhileWithInline.kt")
    public void testDoWhileWithInline() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileWithInline.kt");
    }

    @Test
    @TestMetadata("doubleBreak.kt")
    public void testDoubleBreak() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/doubleBreak.kt");
    }

    @Test
    @TestMetadata("finallyCatch.kt")
    public void testFinallyCatch() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/finallyCatch.kt");
    }

    @Test
    @TestMetadata("forContinue.kt")
    public void testForContinue() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/forContinue.kt");
    }

    @Test
    @TestMetadata("forStatement.kt")
    public void testForStatement() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/forStatement.kt");
    }

    @Test
    @TestMetadata("forWithStep.kt")
    public void testForWithStep() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/forWithStep.kt");
    }

    @Test
    @TestMetadata("ifStatement.kt")
    public void testIfStatement() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/ifStatement.kt");
    }

    @Test
    @TestMetadata("kt22694_1_3.kt")
    public void testKt22694_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/kt22694_1_3.kt");
    }

    @Test
    @TestMetadata("labeledWhile.kt")
    public void testLabeledWhile() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/labeledWhile.kt");
    }

    @Test
    @TestMetadata("multipleCatchBlocksSuspend.kt")
    public void testMultipleCatchBlocksSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/multipleCatchBlocksSuspend.kt");
    }

    @Test
    @TestMetadata("returnFromFinally.kt")
    public void testReturnFromFinally() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnFromFinally.kt");
    }

    @Test
    @TestMetadata("returnWithFinally.kt")
    public void testReturnWithFinally() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnWithFinally.kt");
    }

    @Test
    @TestMetadata("suspendInStringTemplate.kt")
    public void testSuspendInStringTemplate() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/suspendInStringTemplate.kt");
    }

    @Test
    @TestMetadata("switchLikeWhen.kt")
    public void testSwitchLikeWhen() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/switchLikeWhen.kt");
    }

    @Test
    @TestMetadata("throwFromCatch.kt")
    public void testThrowFromCatch() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromCatch.kt");
    }

    @Test
    @TestMetadata("throwFromFinally.kt")
    public void testThrowFromFinally() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromFinally.kt");
    }

    @Test
    @TestMetadata("throwInTryWithHandleResult.kt")
    public void testThrowInTryWithHandleResult() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwInTryWithHandleResult.kt");
    }

    @Test
    @TestMetadata("whenWithSuspensions.kt")
    public void testWhenWithSuspensions() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/whenWithSuspensions.kt");
    }

    @Test
    @TestMetadata("whileStatement.kt")
    public void testWhileStatement() {
      runTest("compiler/testData/codegen/box/coroutines/controlFlow/whileStatement.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/debug")
  @TestDataPath("$PROJECT_ROOT")
  public class Debug {
    @Test
    public void testAllFilesPresentInDebug() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/debug"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("debugMetadata_av22.kt")
    public void testDebugMetadata_av22() {
      runTest("compiler/testData/codegen/box/coroutines/debug/debugMetadata_av22.kt");
    }

    @Test
    @TestMetadata("debuggerMetadata.kt")
    public void testDebuggerMetadata() {
      runTest("compiler/testData/codegen/box/coroutines/debug/debuggerMetadata.kt");
    }

    @Test
    @TestMetadata("elvisLineNumber.kt")
    public void testElvisLineNumber() {
      runTest("compiler/testData/codegen/box/coroutines/debug/elvisLineNumber.kt");
    }

    @Test
    @TestMetadata("firstSuspensionPoint.kt")
    public void testFirstSuspensionPoint() {
      runTest("compiler/testData/codegen/box/coroutines/debug/firstSuspensionPoint.kt");
    }

    @Test
    @TestMetadata("fqName.kt")
    public void testFqName() {
      runTest("compiler/testData/codegen/box/coroutines/debug/fqName.kt");
    }

    @Test
    @TestMetadata("linenumberDoesNotDuplicate.kt")
    public void testLinenumberDoesNotDuplicate() {
      runTest("compiler/testData/codegen/box/coroutines/debug/linenumberDoesNotDuplicate.kt");
    }

    @Test
    @TestMetadata("multipleSuspendCallsOnSameLine.kt")
    public void testMultipleSuspendCallsOnSameLine() {
      runTest("compiler/testData/codegen/box/coroutines/debug/multipleSuspendCallsOnSameLine.kt");
    }

    @Test
    @TestMetadata("nextLineNumber.kt")
    public void testNextLineNumber() {
      runTest("compiler/testData/codegen/box/coroutines/debug/nextLineNumber.kt");
    }

    @Test
    @TestMetadata("runtimeDebugMetadata.kt")
    public void testRuntimeDebugMetadata() {
      runTest("compiler/testData/codegen/box/coroutines/debug/runtimeDebugMetadata.kt");
    }

    @Test
    @TestMetadata("throwsOnSameLine.kt")
    public void testThrowsOnSameLine() {
      runTest("compiler/testData/codegen/box/coroutines/debug/throwsOnSameLine.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection")
  @TestDataPath("$PROJECT_ROOT")
  public class FeatureIntersection {
    @Test
    public void testAllFilesPresentInFeatureIntersection() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("breakWithNonEmptyStack.kt")
    public void testBreakWithNonEmptyStack() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/breakWithNonEmptyStack.kt");
    }

    @Test
    @TestMetadata("defaultExpect.kt")
    public void testDefaultExpect() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/defaultExpect.kt");
    }

    @Test
    @TestMetadata("delegate.kt")
    public void testDelegate() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/delegate.kt");
    }

    @Test
    @TestMetadata("destructuringInLambdas.kt")
    public void testDestructuringInLambdas() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/destructuringInLambdas.kt");
    }

    @Test
    @TestMetadata("funInterface.kt")
    public void testFunInterface() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface.kt");
    }

    @Test
    @TestMetadata("inlineSuspendFinally.kt")
    public void testInlineSuspendFinally() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/inlineSuspendFinally.kt");
    }

    @Test
    @TestMetadata("interfaceMethodWithBody.kt")
    public void testInterfaceMethodWithBody() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBody.kt");
    }

    @Test
    @TestMetadata("interfaceMethodWithBodyGeneric.kt")
    public void testInterfaceMethodWithBodyGeneric() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBodyGeneric.kt");
    }

    @Test
    @TestMetadata("overrideInInlineClass.kt")
    public void testOverrideInInlineClass() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/overrideInInlineClass.kt");
    }

    @Test
    @TestMetadata("overrideInInnerClass.kt")
    public void testOverrideInInnerClass() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/overrideInInnerClass.kt");
    }

    @Test
    @TestMetadata("safeCallOnTwoReceivers.kt")
    public void testSafeCallOnTwoReceivers() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceivers.kt");
    }

    @Test
    @TestMetadata("safeCallOnTwoReceiversLong.kt")
    public void testSafeCallOnTwoReceiversLong() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceiversLong.kt");
    }

    @Test
    @TestMetadata("suspendDestructuringInLambdas.kt")
    public void testSuspendDestructuringInLambdas() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendDestructuringInLambdas.kt");
    }

    @Test
    @TestMetadata("suspendFunctionAsSupertypeIsCheck.kt")
    public void testSuspendFunctionAsSupertypeIsCheck() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionAsSupertypeIsCheck.kt");
    }

    @Test
    @TestMetadata("suspendFunctionAsSupertypeIsCheckWithArity.kt")
    public void testSuspendFunctionAsSupertypeIsCheckWithArity() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionAsSupertypeIsCheckWithArity.kt");
    }

    @Test
    @TestMetadata("suspendFunctionIsAs.kt")
    public void testSuspendFunctionIsAs() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionIsAs.kt");
    }

    @Test
    @TestMetadata("suspendInlineSuspendFinally.kt")
    public void testSuspendInlineSuspendFinally() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendInlineSuspendFinally.kt");
    }

    @Test
    @TestMetadata("suspendOperatorPlus.kt")
    public void testSuspendOperatorPlus() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlus.kt");
    }

    @Test
    @TestMetadata("suspendOperatorPlusAssign.kt")
    public void testSuspendOperatorPlusAssign() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusAssign.kt");
    }

    @Test
    @TestMetadata("suspendOperatorPlusCallFromLambda.kt")
    public void testSuspendOperatorPlusCallFromLambda() {
      runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusCallFromLambda.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReference {
      @Test
      public void testAllFilesPresentInCallableReference() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("bigArity.kt")
      public void testBigArity() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bigArity.kt");
      }

      @Test
      @TestMetadata("fromJava.kt")
      public void testFromJava() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/fromJava.kt");
      }

      @Test
      @TestMetadata("kt48732_genericSignature.kt")
      public void testKt48732_genericSignature() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/kt48732_genericSignature.kt");
      }

      @Test
      @TestMetadata("lambdaParameterUsed.kt")
      public void testLambdaParameterUsed() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/lambdaParameterUsed.kt");
      }

      @Test
      @TestMetadata("longArgs.kt")
      public void testLongArgs() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/longArgs.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound")
      @TestDataPath("$PROJECT_ROOT")
      public class Bound {
        @Test
        public void testAllFilesPresentInBound() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("emptyLHS.kt")
        public void testEmptyLHS() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound/emptyLHS.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function")
      @TestDataPath("$PROJECT_ROOT")
      public class Function {
        @Test
        @TestMetadata("adapted.kt")
        public void testAdapted() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/adapted.kt");
        }

        @Test
        public void testAllFilesPresentInFunction() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("genericCallableReferenceArguments.kt")
        public void testGenericCallableReferenceArguments() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/genericCallableReferenceArguments.kt");
        }

        @Test
        @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
        public void testGenericCallableReferencesWithNullableTypes() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/genericCallableReferencesWithNullableTypes.kt");
        }

        @Test
        @TestMetadata("getArityViaFunctionImpl.kt")
        public void testGetArityViaFunctionImpl() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/getArityViaFunctionImpl.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local")
        @TestDataPath("$PROJECT_ROOT")
        public class Local {
          @Test
          public void testAllFilesPresentInLocal() {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
          }

          @Test
          @TestMetadata("equalsHashCode.kt")
          public void testEqualsHashCode() {
            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local/equalsHashCode.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface")
    @TestDataPath("$PROJECT_ROOT")
    public class FunInterface {
      @Test
      public void testAllFilesPresentInFunInterface() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("kt47549.kt")
      public void testKt47549() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt47549.kt");
      }

      @Test
      @TestMetadata("kt47549_1.kt")
      public void testKt47549_1() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt47549_1.kt");
      }

      @Test
      @TestMetadata("kt49294.kt")
      public void testKt49294() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt49294.kt");
      }

      @Test
      @TestMetadata("kt50950.kt")
      public void testKt50950() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface/kt50950.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmDefault {
      @Test
      public void testAllFilesPresentInJvmDefault() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("noCompatibility.kt")
      public void testNoCompatibility() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/noCompatibility.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007")
      @TestDataPath("$PROJECT_ROOT")
      public class Kt46007 {
        @Test
        public void testAllFilesPresentInKt46007() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("disable.kt")
        public void testDisable() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007/disable.kt");
        }

        @Test
        @TestMetadata("enable.kt")
        public void testEnable() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007/enable.kt");
        }

        @Test
        @TestMetadata("noCompatibility.kt")
        public void testNoCompatibility() {
          runTest("compiler/testData/codegen/box/coroutines/featureIntersection/jvmDefault/kt46007/noCompatibility.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec")
    @TestDataPath("$PROJECT_ROOT")
    public class Tailrec {
      @Test
      public void testAllFilesPresentInTailrec() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("controlFlowIf.kt")
      public void testControlFlowIf() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowIf.kt");
      }

      @Test
      @TestMetadata("controlFlowWhen.kt")
      public void testControlFlowWhen() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowWhen.kt");
      }

      @Test
      @TestMetadata("extention.kt")
      public void testExtention() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/extention.kt");
      }

      @Test
      @TestMetadata("infixCall.kt")
      public void testInfixCall() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixCall.kt");
      }

      @Test
      @TestMetadata("infixRecursiveCall.kt")
      public void testInfixRecursiveCall() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixRecursiveCall.kt");
      }

      @Test
      @TestMetadata("kt38920_localTailrec.kt")
      public void testKt38920_localTailrec() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/kt38920_localTailrec.kt");
      }

      @Test
      @TestMetadata("realIteratorFoldl.kt")
      public void testRealIteratorFoldl() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realIteratorFoldl.kt");
      }

      @Test
      @TestMetadata("realStringEscape.kt")
      public void testRealStringEscape() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringEscape.kt");
      }

      @Test
      @TestMetadata("realStringRepeat.kt")
      public void testRealStringRepeat() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringRepeat.kt");
      }

      @Test
      @TestMetadata("returnInParentheses.kt")
      public void testReturnInParentheses() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/returnInParentheses.kt");
      }

      @Test
      @TestMetadata("sum.kt")
      public void testSum() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/sum.kt");
      }

      @Test
      @TestMetadata("tailCallInBlockInParentheses.kt")
      public void testTailCallInBlockInParentheses() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInBlockInParentheses.kt");
      }

      @Test
      @TestMetadata("tailCallInParentheses.kt")
      public void testTailCallInParentheses() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInParentheses.kt");
      }

      @Test
      @TestMetadata("whenWithIs.kt")
      public void testWhenWithIs() {
        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/whenWithIs.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/generatedCodeMarkers")
  @TestDataPath("$PROJECT_ROOT")
  public class GeneratedCodeMarkers {
    @Test
    public void testAllFilesPresentInGeneratedCodeMarkers() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/generatedCodeMarkers"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/generatedCodeMarkers/simple.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class InlineClasses {
    @Test
    public void testAllFilesPresentInInlineClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("genericParameterResult.kt")
    public void testGenericParameterResult() {
      runTest("compiler/testData/codegen/box/coroutines/inlineClasses/genericParameterResult.kt");
    }

    @Test
    @TestMetadata("interfaceFakeOverride.kt")
    public void testInterfaceFakeOverride() {
      runTest("compiler/testData/codegen/box/coroutines/inlineClasses/interfaceFakeOverride.kt");
    }

    @Test
    @TestMetadata("interfaceFakeOverrideJvmDefaultDisable.kt")
    public void testInterfaceFakeOverrideJvmDefaultDisable() {
      runTest("compiler/testData/codegen/box/coroutines/inlineClasses/interfaceFakeOverrideJvmDefaultDisable.kt");
    }

    @Test
    @TestMetadata("interfaceFakeOverrideJvmDefaultNoCompatibility.kt")
    public void testInterfaceFakeOverrideJvmDefaultNoCompatibility() {
      runTest("compiler/testData/codegen/box/coroutines/inlineClasses/interfaceFakeOverrideJvmDefaultNoCompatibility.kt");
    }

    @Test
    @TestMetadata("kt47129.kt")
    public void testKt47129() {
      runTest("compiler/testData/codegen/box/coroutines/inlineClasses/kt47129.kt");
    }

    @Test
    @TestMetadata("nonLocalReturn.kt")
    public void testNonLocalReturn() {
      runTest("compiler/testData/codegen/box/coroutines/inlineClasses/nonLocalReturn.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/direct")
    @TestDataPath("$PROJECT_ROOT")
    public class Direct {
      @Test
      public void testAllFilesPresentInDirect() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/direct"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
      public void testBoxReturnValueOfSuspendFunctionReference() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendFunctionReference.kt");
      }

      @Test
      @TestMetadata("boxReturnValueOfSuspendLambda.kt")
      public void testBoxReturnValueOfSuspendLambda() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendLambda.kt");
      }

      @Test
      @TestMetadata("boxTypeParameterOfSuperType.kt")
      public void testBoxTypeParameterOfSuperType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxTypeParameterOfSuperType.kt");
      }

      @Test
      @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
      public void testBoxTypeParameterOfSuperTypeResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxTypeParameterOfSuperTypeResult.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine.kt")
      public void testBoxUnboxInsideCoroutine() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
      public void testBoxUnboxInsideCoroutine_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Any.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
      public void testBoxUnboxInsideCoroutine_InlineAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineAny.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
      public void testBoxUnboxInsideCoroutine_InlineInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineInt.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
      public void testBoxUnboxInsideCoroutine_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Int.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
      public void testBoxUnboxInsideCoroutine_Long() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Long.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
      public void testBoxUnboxInsideCoroutine_NAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_NAny.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
      public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_nonLocalReturn.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
      public void testBoxUnboxInsideCoroutine_suspendFunType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_suspendFunType.kt");
      }

      @Test
      @TestMetadata("bridgeGenerationCrossinline.kt")
      public void testBridgeGenerationCrossinline() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationCrossinline.kt");
      }

      @Test
      @TestMetadata("bridgeGenerationNonInline.kt")
      public void testBridgeGenerationNonInline() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationNonInline.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun.kt")
      public void testCovariantOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
      public void testCovariantOverrideSuspendFunSameJvmType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunSameJvmType.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun_Any.kt")
      public void testCovariantOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun_Int.kt")
      public void testCovariantOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("createMangling.kt")
      public void testCreateMangling() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createMangling.kt");
      }

      @Test
      @TestMetadata("createOverride.kt")
      public void testCreateOverride() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createOverride.kt");
      }

      @Test
      @TestMetadata("defaultStub.kt")
      public void testDefaultStub() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/defaultStub.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun.kt")
      public void testGenericOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Any.kt")
      public void testGenericOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
      public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Int.kt")
      public void testGenericOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
      public void testGenericOverrideSuspendFun_NullableAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
      public void testGenericOverrideSuspendFun_NullableAny_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny_null.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
      public void testGenericOverrideSuspendFun_NullableInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
      public void testGenericOverrideSuspendFun_NullableInt_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt_null.kt");
      }

      @Test
      @TestMetadata("interfaceDelegateWithInlineClass.kt")
      public void testInterfaceDelegateWithInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/interfaceDelegateWithInlineClass.kt");
      }

      @Test
      @TestMetadata("invokeOperator.kt")
      public void testInvokeOperator() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/invokeOperator.kt");
      }

      @Test
      @TestMetadata("multifileBridge.kt")
      public void testMultifileBridge() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/multifileBridge.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun.kt")
      public void testOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any.kt")
      public void testOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any_itf.kt")
      public void testOverrideSuspendFun_Any_itf() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_itf.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any_this.kt")
      public void testOverrideSuspendFun_Any_this() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_this.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Int.kt")
      public void testOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("returnResult.kt")
      public void testReturnResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/returnResult.kt");
      }

      @Test
      @TestMetadata("syntheticAccessor.kt")
      public void testSyntheticAccessor() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/syntheticAccessor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resume")
    @TestDataPath("$PROJECT_ROOT")
    public class Resume {
      @Test
      public void testAllFilesPresentInResume() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resume"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
      public void testBoxReturnValueOfSuspendFunctionReference() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendFunctionReference.kt");
      }

      @Test
      @TestMetadata("boxReturnValueOfSuspendLambda.kt")
      public void testBoxReturnValueOfSuspendLambda() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendLambda.kt");
      }

      @Test
      @TestMetadata("boxTypeParameterOfSuperType.kt")
      public void testBoxTypeParameterOfSuperType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxTypeParameterOfSuperType.kt");
      }

      @Test
      @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
      public void testBoxTypeParameterOfSuperTypeResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxTypeParameterOfSuperTypeResult.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine.kt")
      public void testBoxUnboxInsideCoroutine() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
      public void testBoxUnboxInsideCoroutine_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Any.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
      public void testBoxUnboxInsideCoroutine_InlineAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineAny.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
      public void testBoxUnboxInsideCoroutine_InlineInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineInt.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
      public void testBoxUnboxInsideCoroutine_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Int.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
      public void testBoxUnboxInsideCoroutine_Long() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Long.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
      public void testBoxUnboxInsideCoroutine_NAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_NAny.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
      public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_nonLocalReturn.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
      public void testBoxUnboxInsideCoroutine_suspendFunType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_suspendFunType.kt");
      }

      @Test
      @TestMetadata("bridgeGenerationCrossinline.kt")
      public void testBridgeGenerationCrossinline() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationCrossinline.kt");
      }

      @Test
      @TestMetadata("bridgeGenerationNonInline.kt")
      public void testBridgeGenerationNonInline() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationNonInline.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun.kt")
      public void testCovariantOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
      public void testCovariantOverrideSuspendFunSameJvmType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunSameJvmType.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun_Any.kt")
      public void testCovariantOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun_Int.kt")
      public void testCovariantOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("createMangling.kt")
      public void testCreateMangling() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createMangling.kt");
      }

      @Test
      @TestMetadata("createOverride.kt")
      public void testCreateOverride() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createOverride.kt");
      }

      @Test
      @TestMetadata("defaultStub.kt")
      public void testDefaultStub() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/defaultStub.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun.kt")
      public void testGenericOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Any.kt")
      public void testGenericOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
      public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Int.kt")
      public void testGenericOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
      public void testGenericOverrideSuspendFun_NullableAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
      public void testGenericOverrideSuspendFun_NullableAny_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny_null.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
      public void testGenericOverrideSuspendFun_NullableInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
      public void testGenericOverrideSuspendFun_NullableInt_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt_null.kt");
      }

      @Test
      @TestMetadata("interfaceDelegateWithInlineClass.kt")
      public void testInterfaceDelegateWithInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/interfaceDelegateWithInlineClass.kt");
      }

      @Test
      @TestMetadata("invokeOperator.kt")
      public void testInvokeOperator() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/invokeOperator.kt");
      }

      @Test
      @TestMetadata("multifileBridge.kt")
      public void testMultifileBridge() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/multifileBridge.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun.kt")
      public void testOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any.kt")
      public void testOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any_itf.kt")
      public void testOverrideSuspendFun_Any_itf() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_itf.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any_this.kt")
      public void testOverrideSuspendFun_Any_this() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_this.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Int.kt")
      public void testOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("returnResult.kt")
      public void testReturnResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/returnResult.kt");
      }

      @Test
      @TestMetadata("syntheticAccessor.kt")
      public void testSyntheticAccessor() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/syntheticAccessor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException")
    @TestDataPath("$PROJECT_ROOT")
    public class ResumeWithException {
      @Test
      public void testAllFilesPresentInResumeWithException() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
      public void testBoxReturnValueOfSuspendFunctionReference() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendFunctionReference.kt");
      }

      @Test
      @TestMetadata("boxReturnValueOfSuspendLambda.kt")
      public void testBoxReturnValueOfSuspendLambda() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendLambda.kt");
      }

      @Test
      @TestMetadata("boxTypeParameterOfSuperType.kt")
      public void testBoxTypeParameterOfSuperType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxTypeParameterOfSuperType.kt");
      }

      @Test
      @TestMetadata("boxTypeParameterOfSuperTypeResult.kt")
      public void testBoxTypeParameterOfSuperTypeResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxTypeParameterOfSuperTypeResult.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine.kt")
      public void testBoxUnboxInsideCoroutine() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
      public void testBoxUnboxInsideCoroutine_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Any.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
      public void testBoxUnboxInsideCoroutine_InlineAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineAny.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
      public void testBoxUnboxInsideCoroutine_InlineInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineInt.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
      public void testBoxUnboxInsideCoroutine_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Int.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
      public void testBoxUnboxInsideCoroutine_Long() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Long.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
      public void testBoxUnboxInsideCoroutine_NAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_NAny.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
      public void testBoxUnboxInsideCoroutine_nonLocalReturn() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_nonLocalReturn.kt");
      }

      @Test
      @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
      public void testBoxUnboxInsideCoroutine_suspendFunType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_suspendFunType.kt");
      }

      @Test
      @TestMetadata("bridgeGenerationCrossinline.kt")
      public void testBridgeGenerationCrossinline() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationCrossinline.kt");
      }

      @Test
      @TestMetadata("bridgeGenerationNonInline.kt")
      public void testBridgeGenerationNonInline() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationNonInline.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun.kt")
      public void testCovariantOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
      public void testCovariantOverrideSuspendFunSameJvmType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunSameJvmType.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
      public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun_Any.kt")
      public void testCovariantOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("covariantOverrideSuspendFun_Int.kt")
      public void testCovariantOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("createMangling.kt")
      public void testCreateMangling() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createMangling.kt");
      }

      @Test
      @TestMetadata("createOverride.kt")
      public void testCreateOverride() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createOverride.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun.kt")
      public void testGenericOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Any.kt")
      public void testGenericOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
      public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_Int.kt")
      public void testGenericOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
      public void testGenericOverrideSuspendFun_NullableAny() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableAny.kt");
      }

      @Test
      @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
      public void testGenericOverrideSuspendFun_NullableInt() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableInt.kt");
      }

      @Test
      @TestMetadata("interfaceDelegateWithInlineClass.kt")
      public void testInterfaceDelegateWithInlineClass() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/interfaceDelegateWithInlineClass.kt");
      }

      @Test
      @TestMetadata("invokeOperator.kt")
      public void testInvokeOperator() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/invokeOperator.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun.kt")
      public void testOverrideSuspendFun() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any.kt")
      public void testOverrideSuspendFun_Any() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any_itf.kt")
      public void testOverrideSuspendFun_Any_itf() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_itf.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Any_this.kt")
      public void testOverrideSuspendFun_Any_this() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_this.kt");
      }

      @Test
      @TestMetadata("overrideSuspendFun_Int.kt")
      public void testOverrideSuspendFun_Int() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Int.kt");
      }

      @Test
      @TestMetadata("returnResult.kt")
      public void testReturnResult() {
        runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/returnResult.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/intLikeVarSpilling")
  @TestDataPath("$PROJECT_ROOT")
  public class IntLikeVarSpilling {
    @Test
    public void testAllFilesPresentInIntLikeVarSpilling() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intLikeVarSpilling"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("complicatedMerge.kt")
    public void testComplicatedMerge() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/complicatedMerge.kt");
    }

    @Test
    @TestMetadata("i2bResult.kt")
    public void testI2bResult() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/i2bResult.kt");
    }

    @Test
    @TestMetadata("listThrowablePairInOneSlot.kt")
    public void testListThrowablePairInOneSlot() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/listThrowablePairInOneSlot.kt");
    }

    @Test
    @TestMetadata("loadFromBooleanArray.kt")
    public void testLoadFromBooleanArray() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromBooleanArray.kt");
    }

    @Test
    @TestMetadata("loadFromByteArray.kt")
    public void testLoadFromByteArray() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromByteArray.kt");
    }

    @Test
    @TestMetadata("noVariableInTable.kt")
    public void testNoVariableInTable() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/noVariableInTable.kt");
    }

    @Test
    @TestMetadata("sameIconst1ManyVars.kt")
    public void testSameIconst1ManyVars() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/sameIconst1ManyVars.kt");
    }

    @Test
    @TestMetadata("unusedCatchVar.kt")
    public void testUnusedCatchVar() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/unusedCatchVar.kt");
    }

    @Test
    @TestMetadata("usedInArrayStore.kt")
    public void testUsedInArrayStore() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInArrayStore.kt");
    }

    @Test
    @TestMetadata("usedInMethodCall.kt")
    public void testUsedInMethodCall() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInMethodCall.kt");
    }

    @Test
    @TestMetadata("usedInPutfield.kt")
    public void testUsedInPutfield() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInPutfield.kt");
    }

    @Test
    @TestMetadata("usedInVarStore.kt")
    public void testUsedInVarStore() {
      runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInVarStore.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/intrinsicSemantics")
  @TestDataPath("$PROJECT_ROOT")
  public class IntrinsicSemantics {
    @Test
    public void testAllFilesPresentInIntrinsicSemantics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intrinsicSemantics"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("coroutineContext.kt")
    public void testCoroutineContext() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContext.kt");
    }

    @Test
    @TestMetadata("coroutineContextReceiver.kt")
    public void testCoroutineContextReceiver() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiver.kt");
    }

    @Test
    @TestMetadata("coroutineContextReceiverNotIntrinsic.kt")
    public void testCoroutineContextReceiverNotIntrinsic() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiverNotIntrinsic.kt");
    }

    @Test
    @TestMetadata("intercepted.kt")
    public void testIntercepted() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/intercepted.kt");
    }

    @Test
    @TestMetadata("releaseIntercepted.kt")
    public void testReleaseIntercepted() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/releaseIntercepted.kt");
    }

    @Test
    @TestMetadata("resultExceptionOrNullInLambda.kt")
    public void testResultExceptionOrNullInLambda() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/resultExceptionOrNullInLambda.kt");
    }

    @Test
    @TestMetadata("startCoroutine.kt")
    public void testStartCoroutine() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutine.kt");
    }

    @Test
    @TestMetadata("startCoroutineUninterceptedOrReturn.kt")
    public void testStartCoroutineUninterceptedOrReturn() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturn.kt");
    }

    @Test
    @TestMetadata("startCoroutineUninterceptedOrReturnInterception.kt")
    public void testStartCoroutineUninterceptedOrReturnInterception() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturnInterception.kt");
    }

    @Test
    @TestMetadata("suspendCoroutineUninterceptedOrReturn.kt")
    public void testSuspendCoroutineUninterceptedOrReturn() {
      runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/suspendCoroutineUninterceptedOrReturn.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/javaInterop")
  @TestDataPath("$PROJECT_ROOT")
  public class JavaInterop {
    @Test
    public void testAllFilesPresentInJavaInterop() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/javaInterop"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("objectWithSeveralSuspends.kt")
    public void testObjectWithSeveralSuspends() {
      runTest("compiler/testData/codegen/box/coroutines/javaInterop/objectWithSeveralSuspends.kt");
    }

    @Test
    @TestMetadata("returnLambda.kt")
    public void testReturnLambda() {
      runTest("compiler/testData/codegen/box/coroutines/javaInterop/returnLambda.kt");
    }

    @Test
    @TestMetadata("returnObject.kt")
    public void testReturnObject() {
      runTest("compiler/testData/codegen/box/coroutines/javaInterop/returnObject.kt");
    }

    @Test
    @TestMetadata("severalCaptures.kt")
    public void testSeveralCaptures() {
      runTest("compiler/testData/codegen/box/coroutines/javaInterop/severalCaptures.kt");
    }

    @Test
    @TestMetadata("suspendInlineWithCrossinline.kt")
    public void testSuspendInlineWithCrossinline() {
      runTest("compiler/testData/codegen/box/coroutines/javaInterop/suspendInlineWithCrossinline.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions")
  @TestDataPath("$PROJECT_ROOT")
  public class LocalFunctions {
    @Test
    public void testAllFilesPresentInLocalFunctions() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions/named")
    @TestDataPath("$PROJECT_ROOT")
    public class Named {
      @Test
      public void testAllFilesPresentInNamed() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions/named"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("callTopLevelFromLocal.kt")
      public void testCallTopLevelFromLocal() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/callTopLevelFromLocal.kt");
      }

      @Test
      @TestMetadata("capturedParameters.kt")
      public void testCapturedParameters() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedParameters.kt");
      }

      @Test
      @TestMetadata("capturedVariables.kt")
      public void testCapturedVariables() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedVariables.kt");
      }

      @Test
      @TestMetadata("defaultArgument.kt")
      public void testDefaultArgument() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/defaultArgument.kt");
      }

      @Test
      @TestMetadata("extension.kt")
      public void testExtension() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/extension.kt");
      }

      @Test
      @TestMetadata("infix.kt")
      public void testInfix() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/infix.kt");
      }

      @Test
      @TestMetadata("insideLambda.kt")
      public void testInsideLambda() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/insideLambda.kt");
      }

      @Test
      @TestMetadata("nestedLocals.kt")
      public void testNestedLocals() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/nestedLocals.kt");
      }

      @Test
      @TestMetadata("rec.kt")
      public void testRec() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/rec.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simple.kt");
      }

      @Test
      @TestMetadata("simpleSuspensionPoint.kt")
      public void testSimpleSuspensionPoint() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simpleSuspensionPoint.kt");
      }

      @Test
      @TestMetadata("stateMachine.kt")
      public void testStateMachine() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/stateMachine.kt");
      }

      @Test
      @TestMetadata("withArguments.kt")
      public void testWithArguments() {
        runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/withArguments.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/multiModule")
  @TestDataPath("$PROJECT_ROOT")
  public class MultiModule {
    @Test
    public void testAllFilesPresentInMultiModule() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/multiModule"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("inheritFromAnotherModule.kt")
    public void testInheritFromAnotherModule() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inheritFromAnotherModule.kt");
    }

    @Test
    @TestMetadata("inlineCrossModule.kt")
    public void testInlineCrossModule() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineCrossModule.kt");
    }

    @Test
    @TestMetadata("inlineFunctionWithOptionalParam.kt")
    public void testInlineFunctionWithOptionalParam() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineFunctionWithOptionalParam.kt");
    }

    @Test
    @TestMetadata("inlineMultiModule.kt")
    public void testInlineMultiModule() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModule.kt");
    }

    @Test
    @TestMetadata("inlineMultiModuleOverride.kt")
    public void testInlineMultiModuleOverride() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleOverride.kt");
    }

    @Test
    @TestMetadata("inlineMultiModuleWithController.kt")
    public void testInlineMultiModuleWithController() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithController.kt");
    }

    @Test
    @TestMetadata("inlineMultiModuleWithInnerInlining.kt")
    public void testInlineMultiModuleWithInnerInlining() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithInnerInlining.kt");
    }

    @Test
    @TestMetadata("inlineTailCall.kt")
    public void testInlineTailCall() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineTailCall.kt");
    }

    @Test
    @TestMetadata("inlineWithJava.kt")
    public void testInlineWithJava() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineWithJava.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/multiModule/simple.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/redundantLocalsElimination")
  @TestDataPath("$PROJECT_ROOT")
  public class RedundantLocalsElimination {
    @Test
    public void testAllFilesPresentInRedundantLocalsElimination() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/redundantLocalsElimination"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("ktor_receivedMessage.kt")
    public void testKtor_receivedMessage() {
      runTest("compiler/testData/codegen/box/coroutines/redundantLocalsElimination/ktor_receivedMessage.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/reflect")
  @TestDataPath("$PROJECT_ROOT")
  public class Reflect {
    @Test
    public void testAllFilesPresentInReflect() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/reflect"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("bigArity.kt")
    public void testBigArity() {
      runTest("compiler/testData/codegen/box/coroutines/reflect/bigArity.kt");
    }

    @Test
    @TestMetadata("bigArityLambda.kt")
    public void testBigArityLambda() {
      runTest("compiler/testData/codegen/box/coroutines/reflect/bigArityLambda.kt");
    }

    @Test
    @TestMetadata("callSuspend.kt")
    public void testCallSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/reflect/callSuspend.kt");
    }

    @Test
    @TestMetadata("callSuspendBy.kt")
    public void testCallSuspendBy() {
      runTest("compiler/testData/codegen/box/coroutines/reflect/callSuspendBy.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/stackUnwinding")
  @TestDataPath("$PROJECT_ROOT")
  public class StackUnwinding {
    @Test
    public void testAllFilesPresentInStackUnwinding() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/stackUnwinding"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("exception.kt")
    public void testException() {
      runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/exception.kt");
    }

    @Test
    @TestMetadata("inlineSuspendFunction.kt")
    public void testInlineSuspendFunction() {
      runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/inlineSuspendFunction.kt");
    }

    @Test
    @TestMetadata("rethrowInFinally.kt")
    public void testRethrowInFinally() {
      runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinally.kt");
    }

    @Test
    @TestMetadata("rethrowInFinallyWithSuspension.kt")
    public void testRethrowInFinallyWithSuspension() {
      runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinallyWithSuspension.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/simple.kt");
    }

    @Test
    @TestMetadata("suspendInCycle.kt")
    public void testSuspendInCycle() {
      runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/suspendInCycle.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/suspendConversion")
  @TestDataPath("$PROJECT_ROOT")
  public class SuspendConversion {
    @Test
    public void testAllFilesPresentInSuspendConversion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendConversion"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("intersectionTypeToSubtypeConversion.kt")
    public void testIntersectionTypeToSubtypeConversion() {
      runTest("compiler/testData/codegen/box/coroutines/suspendConversion/intersectionTypeToSubtypeConversion.kt");
    }

    @Test
    @TestMetadata("onArgument.kt")
    public void testOnArgument() {
      runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onArgument.kt");
    }

    @Test
    @TestMetadata("onInlineArgument.kt")
    public void testOnInlineArgument() {
      runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onInlineArgument.kt");
    }

    @Test
    @TestMetadata("onNullableArgument.kt")
    public void testOnNullableArgument() {
      runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onNullableArgument.kt");
    }

    @Test
    @TestMetadata("subtypeOfFunctionalTypeToSuspendConversion.kt")
    public void testSubtypeOfFunctionalTypeToSuspendConversion() {
      runTest("compiler/testData/codegen/box/coroutines/suspendConversion/subtypeOfFunctionalTypeToSuspendConversion.kt");
    }

    @Test
    @TestMetadata("suspendConversionBetweenFunInterfaces.kt")
    public void testSuspendConversionBetweenFunInterfaces() {
      runTest("compiler/testData/codegen/box/coroutines/suspendConversion/suspendConversionBetweenFunInterfaces.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine")
  @TestDataPath("$PROJECT_ROOT")
  public class SuspendFunctionAsCoroutine {
    @Test
    public void testAllFilesPresentInSuspendFunctionAsCoroutine() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("dispatchResume.kt")
    public void testDispatchResume() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/dispatchResume.kt");
    }

    @Test
    @TestMetadata("handleException.kt")
    public void testHandleException() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/handleException.kt");
    }

    @Test
    @TestMetadata("ifExpressionInsideCoroutine_1_3.kt")
    public void testIfExpressionInsideCoroutine_1_3() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/ifExpressionInsideCoroutine_1_3.kt");
    }

    @Test
    @TestMetadata("inline.kt")
    public void testInline() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inline.kt");
    }

    @Test
    @TestMetadata("inlineTwoReceivers.kt")
    public void testInlineTwoReceivers() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inlineTwoReceivers.kt");
    }

    @Test
    @TestMetadata("member.kt")
    public void testMember() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/member.kt");
    }

    @Test
    @TestMetadata("noinlineTwoReceivers.kt")
    public void testNoinlineTwoReceivers() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/noinlineTwoReceivers.kt");
    }

    @Test
    @TestMetadata("openFunWithJava.kt")
    public void testOpenFunWithJava() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/openFunWithJava.kt");
    }

    @Test
    @TestMetadata("operators.kt")
    public void testOperators() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/operators.kt");
    }

    @Test
    @TestMetadata("privateFunctions.kt")
    public void testPrivateFunctions() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateFunctions.kt");
    }

    @Test
    @TestMetadata("privateInFile.kt")
    public void testPrivateInFile() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateInFile.kt");
    }

    @Test
    @TestMetadata("returnNoSuspend.kt")
    public void testReturnNoSuspend() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/returnNoSuspend.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/simple.kt");
    }

    @Test
    @TestMetadata("superCall.kt")
    public void testSuperCall() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCall.kt");
    }

    @Test
    @TestMetadata("superCallAbstractClass.kt")
    public void testSuperCallAbstractClass() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallAbstractClass.kt");
    }

    @Test
    @TestMetadata("superCallInterface.kt")
    public void testSuperCallInterface() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallInterface.kt");
    }

    @Test
    @TestMetadata("superCallOverload.kt")
    public void testSuperCallOverload() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallOverload.kt");
    }

    @Test
    @TestMetadata("withVariables.kt")
    public void testWithVariables() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/withVariables.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall")
  @TestDataPath("$PROJECT_ROOT")
  public class SuspendFunctionTypeCall {
    @Test
    public void testAllFilesPresentInSuspendFunctionTypeCall() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("localVal.kt")
    public void testLocalVal() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/localVal.kt");
    }

    @Test
    @TestMetadata("manyParameters.kt")
    public void testManyParameters() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParameters.kt");
    }

    @Test
    @TestMetadata("manyParametersNoCapture.kt")
    public void testManyParametersNoCapture() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParametersNoCapture.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/simple.kt");
    }

    @Test
    @TestMetadata("suspendModifier.kt")
    public void testSuspendModifier() {
      runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/suspendModifier.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations")
  @TestDataPath("$PROJECT_ROOT")
  public class TailCallOptimizations {
    @Test
    public void testAllFilesPresentInTailCallOptimizations() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("also.kt")
    public void testAlso() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/also.kt");
    }

    @Test
    @TestMetadata("checkcast.kt")
    public void testCheckcast() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/checkcast.kt");
    }

    @Test
    @TestMetadata("checkcast2.kt")
    public void testCheckcast2() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/checkcast2.kt");
    }

    @Test
    @TestMetadata("crossinline.kt")
    public void testCrossinline() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/crossinline.kt");
    }

    @Test
    @TestMetadata("deferredAwaitSuspendImpl.kt")
    public void testDeferredAwaitSuspendImpl() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/deferredAwaitSuspendImpl.kt");
    }

    @Test
    @TestMetadata("inlineWithStateMachine.kt")
    public void testInlineWithStateMachine() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithStateMachine.kt");
    }

    @Test
    @TestMetadata("inlineWithoutStateMachine.kt")
    public void testInlineWithoutStateMachine() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithoutStateMachine.kt");
    }

    @Test
    @TestMetadata("innerObjectRetransformation.kt")
    public void testInnerObjectRetransformation() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/innerObjectRetransformation.kt");
    }

    @Test
    @TestMetadata("interfaceDelegation.kt")
    public void testInterfaceDelegation() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/interfaceDelegation.kt");
    }

    @Test
    @TestMetadata("lambdaParameterInlining.kt")
    public void testLambdaParameterInlining() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/lambdaParameterInlining.kt");
    }

    @Test
    @TestMetadata("returnInlineClass.kt")
    public void testReturnInlineClass() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/returnInlineClass.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/simple.kt");
    }

    @Test
    @TestMetadata("tailCallIfReturnUnit.kt")
    public void testTailCallIfReturnUnit() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailCallIfReturnUnit.kt");
    }

    @Test
    @TestMetadata("tailCallIntrinsics.kt")
    public void testTailCallIntrinsics() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailCallIntrinsics.kt");
    }

    @Test
    @TestMetadata("tailSuspendUnitFun.kt")
    public void testTailSuspendUnitFun() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailSuspendUnitFun.kt");
    }

    @Test
    @TestMetadata("tryCatch.kt")
    public void testTryCatch() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatch.kt");
    }

    @Test
    @TestMetadata("tryCatchTailCall.kt")
    public void testTryCatchTailCall() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatchTailCall.kt");
    }

    @Test
    @TestMetadata("unreachable.kt")
    public void testUnreachable() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unreachable.kt");
    }

    @Test
    @TestMetadata("whenUnit.kt")
    public void testWhenUnit() {
      runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/whenUnit.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit")
    @TestDataPath("$PROJECT_ROOT")
    public class Unit {
      @Test
      public void testAllFilesPresentInUnit() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("functionReference.kt")
      public void testFunctionReference() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/functionReference.kt");
      }

      @Test
      @TestMetadata("inline.kt")
      public void testInline() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/inline.kt");
      }

      @Test
      @TestMetadata("override.kt")
      public void testOverride() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override.kt");
      }

      @Test
      @TestMetadata("override2.kt")
      public void testOverride2() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override2.kt");
      }

      @Test
      @TestMetadata("override3.kt")
      public void testOverride3() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override3.kt");
      }

      @Test
      @TestMetadata("override4.kt")
      public void testOverride4() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override4.kt");
      }

      @Test
      @TestMetadata("override5.kt")
      public void testOverride5() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override5.kt");
      }

      @Test
      @TestMetadata("override6.kt")
      public void testOverride6() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override6.kt");
      }

      @Test
      @TestMetadata("overrideCrossinline.kt")
      public void testOverrideCrossinline() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/overrideCrossinline.kt");
      }

      @Test
      @TestMetadata("overrideOverriden.kt")
      public void testOverrideOverriden() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/overrideOverriden.kt");
      }

      @Test
      @TestMetadata("reflection.kt")
      public void testReflection() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/reflection.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/simple.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/tailOperations")
  @TestDataPath("$PROJECT_ROOT")
  public class TailOperations {
    @Test
    public void testAllFilesPresentInTailOperations() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailOperations"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("suspendWithIf.kt")
    public void testSuspendWithIf() {
      runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithIf.kt");
    }

    @Test
    @TestMetadata("suspendWithTryCatch.kt")
    public void testSuspendWithTryCatch() {
      runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithTryCatch.kt");
    }

    @Test
    @TestMetadata("suspendWithWhen.kt")
    public void testSuspendWithWhen() {
      runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithWhen.kt");
    }

    @Test
    @TestMetadata("tailInlining.kt")
    public void testTailInlining() {
      runTest("compiler/testData/codegen/box/coroutines/tailOperations/tailInlining.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/unitTypeReturn")
  @TestDataPath("$PROJECT_ROOT")
  public class UnitTypeReturn {
    @Test
    public void testAllFilesPresentInUnitTypeReturn() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/unitTypeReturn"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("coroutineNonLocalReturn.kt")
    public void testCoroutineNonLocalReturn() {
      runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineNonLocalReturn.kt");
    }

    @Test
    @TestMetadata("coroutineReturn.kt")
    public void testCoroutineReturn() {
      runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineReturn.kt");
    }

    @Test
    @TestMetadata("inlineUnitFunction.kt")
    public void testInlineUnitFunction() {
      runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/inlineUnitFunction.kt");
    }

    @Test
    @TestMetadata("interfaceDelegation.kt")
    public void testInterfaceDelegation() {
      runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/interfaceDelegation.kt");
    }

    @Test
    @TestMetadata("suspendNonLocalReturn.kt")
    public void testSuspendNonLocalReturn() {
      runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendNonLocalReturn.kt");
    }

    @Test
    @TestMetadata("suspendReturn.kt")
    public void testSuspendReturn() {
      runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendReturn.kt");
    }

    @Test
    @TestMetadata("unitSafeCall.kt")
    public void testUnitSafeCall() {
      runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/unitSafeCall.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling")
  @TestDataPath("$PROJECT_ROOT")
  public class VarSpilling {
    @Test
    public void testAllFilesPresentInVarSpilling() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("fakeInlinerVariables.kt")
    public void testFakeInlinerVariables() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/fakeInlinerVariables.kt");
    }

    @Test
    @TestMetadata("inlineClassAsLambdaParameter.kt")
    public void testInlineClassAsLambdaParameter() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/inlineClassAsLambdaParameter.kt");
    }

    @Test
    @TestMetadata("inlineClassAsLambdaParameterWithoutCreate.kt")
    public void testInlineClassAsLambdaParameterWithoutCreate() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/inlineClassAsLambdaParameterWithoutCreate.kt");
    }

    @Test
    @TestMetadata("kt19475.kt")
    public void testKt19475() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt19475.kt");
    }

    @Test
    @TestMetadata("kt38925.kt")
    public void testKt38925() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt38925.kt");
    }

    @Test
    @TestMetadata("kt49834.kt")
    public void testKt49834() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt49834.kt");
    }

    @Test
    @TestMetadata("kt64139.kt")
    public void testKt64139() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt64139.kt");
    }

    @Test
    @TestMetadata("kt75926.kt")
    public void testKt75926() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt75926.kt");
    }

    @Test
    @TestMetadata("kt79276.kt")
    public void testKt79276() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt79276.kt");
    }

    @Test
    @TestMetadata("lambdaInlineClassParamUnspill.kt")
    public void testLambdaInlineClassParamUnspill() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/lambdaInlineClassParamUnspill.kt");
    }

    @Test
    @TestMetadata("lambdaInlineClassParamUnspillWithoutCreate.kt")
    public void testLambdaInlineClassParamUnspillWithoutCreate() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/lambdaInlineClassParamUnspillWithoutCreate.kt");
    }

    @Test
    @TestMetadata("lvtWithInlineOnly.kt")
    public void testLvtWithInlineOnly() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/lvtWithInlineOnly.kt");
    }

    @Test
    @TestMetadata("nullSpilling.kt")
    public void testNullSpilling() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/nullSpilling.kt");
    }

    @Test
    @TestMetadata("refinedIntTypesAnalysis.kt")
    public void testRefinedIntTypesAnalysis() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/refinedIntTypesAnalysis.kt");
    }

    @Test
    @TestMetadata("safeCallElvis.kt")
    public void testSafeCallElvis() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/safeCallElvis.kt");
    }

    @Test
    @TestMetadata("thisUnspill.kt")
    public void testThisUnspill() {
      runTest("compiler/testData/codegen/box/coroutines/varSpilling/thisUnspill.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/cleanup")
    @TestDataPath("$PROJECT_ROOT")
    public class Cleanup {
      @Test
      public void testAllFilesPresentInCleanup() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/cleanup"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("backEdge.kt")
      public void testBackEdge() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/backEdge.kt");
      }

      @Test
      @TestMetadata("if.kt")
      public void testIf() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/if.kt");
      }

      @Test
      @TestMetadata("nullCleanup.kt")
      public void testNullCleanup() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/nullCleanup.kt");
      }

      @Test
      @TestMetadata("nullNotSpill.kt")
      public void testNullNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/nullNotSpill.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/simple.kt");
      }

      @Test
      @TestMetadata("twoRefs.kt")
      public void testTwoRefs() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/twoRefs.kt");
      }

      @Test
      @TestMetadata("unusedParamNotSpill.kt")
      public void testUnusedParamNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/unusedParamNotSpill.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanup/when.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction")
    @TestDataPath("$PROJECT_ROOT")
    public class CleanupWithoutStdlibFunction {
      @Test
      public void testAllFilesPresentInCleanupWithoutStdlibFunction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("backEdge.kt")
      public void testBackEdge() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/backEdge.kt");
      }

      @Test
      @TestMetadata("deadArgument.kt")
      public void testDeadArgument() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/deadArgument.kt");
      }

      @Test
      @TestMetadata("if.kt")
      public void testIf() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/if.kt");
      }

      @Test
      @TestMetadata("nullCleanup.kt")
      public void testNullCleanup() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/nullCleanup.kt");
      }

      @Test
      @TestMetadata("nullNotSpill.kt")
      public void testNullNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/nullNotSpill.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/simple.kt");
      }

      @Test
      @TestMetadata("twoRefs.kt")
      public void testTwoRefs() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/twoRefs.kt");
      }

      @Test
      @TestMetadata("unusedParamNotSpill.kt")
      public void testUnusedParamNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/unusedParamNotSpill.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/cleanupWithoutStdlibFunction/when.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/debugMode")
    @TestDataPath("$PROJECT_ROOT")
    public class DebugMode {
      @Test
      public void testAllFilesPresentInDebugMode() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/debugMode"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("backEdge.kt")
      public void testBackEdge() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/backEdge.kt");
      }

      @Test
      @TestMetadata("if.kt")
      public void testIf() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/if.kt");
      }

      @Test
      @TestMetadata("inlineOnly.kt")
      public void testInlineOnly() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/inlineOnly.kt");
      }

      @Test
      @TestMetadata("kt63954.kt")
      public void testKt63954() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/kt63954.kt");
      }

      @Test
      @TestMetadata("nullCleanup.kt")
      public void testNullCleanup() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/nullCleanup.kt");
      }

      @Test
      @TestMetadata("nullNotSpill.kt")
      public void testNullNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/nullNotSpill.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/simple.kt");
      }

      @Test
      @TestMetadata("twoRefs.kt")
      public void testTwoRefs() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/twoRefs.kt");
      }

      @Test
      @TestMetadata("unusedParamNotSpill.kt")
      public void testUnusedParamNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/unusedParamNotSpill.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/debugMode/when.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup")
    @TestDataPath("$PROJECT_ROOT")
    public class NoCleanup {
      @Test
      public void testAllFilesPresentInNoCleanup() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup"), Pattern.compile("^([^_](.+))\\.kt$"), null, true);
      }

      @Test
      @TestMetadata("backEdge.kt")
      public void testBackEdge() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/backEdge.kt");
      }

      @Test
      @TestMetadata("if.kt")
      public void testIf() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/if.kt");
      }

      @Test
      @TestMetadata("inlineOnly.kt")
      public void testInlineOnly() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/inlineOnly.kt");
      }

      @Test
      @TestMetadata("kt63954.kt")
      public void testKt63954() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/kt63954.kt");
      }

      @Test
      @TestMetadata("nullCleanup.kt")
      public void testNullCleanup() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/nullCleanup.kt");
      }

      @Test
      @TestMetadata("nullNotSpill.kt")
      public void testNullNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/nullNotSpill.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/simple.kt");
      }

      @Test
      @TestMetadata("twoRefs.kt")
      public void testTwoRefs() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/twoRefs.kt");
      }

      @Test
      @TestMetadata("unusedParamNotSpill.kt")
      public void testUnusedParamNotSpill() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/unusedParamNotSpill.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("compiler/testData/codegen/box/coroutines/varSpilling/noCleanup/when.kt");
      }
    }
  }
}
