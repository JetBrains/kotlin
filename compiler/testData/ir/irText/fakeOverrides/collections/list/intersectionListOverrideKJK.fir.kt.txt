class A : LinkedList<Int>, List<Int> {
  constructor() /* primary */ {
    super/*LinkedList*/<Int>()
    /* <init>() */

  }

}

class B : LinkedList<Int>, List<Int> {
  constructor() /* primary */ {
    super/*LinkedList*/<Int>()
    /* <init>() */

  }

  override fun remove(): Int {
    return 1
  }

  override fun remove(element: Int): Boolean {
    return true
  }

  override operator fun removeAt(index: Int): Int {
    return 1
  }

  override val size: Int
    override get(): Int {
      return 2
    }

}

class C : LinkedList<Int?>, MutableList<Int?> {
  constructor() /* primary */ {
    super/*LinkedList*/<Int?>()
    /* <init>() */

  }

}

class D : LinkedList<Int?>, MutableList<Int?> {
  constructor() /* primary */ {
    super/*LinkedList*/<Int?>()
    /* <init>() */

  }

  override operator fun get(index: Int): Int? {
    return 2
  }

  override fun remove(): Int? {
    return 2
  }

  override fun remove(element: Int?): Boolean {
    return true
  }

  override operator fun removeAt(index: Int): Int? {
    return 2
  }

}

fun test(a: A, b: B, c: C, d: D) {
  a.<get-size>() /*~> Unit */
  a.add(p0 = 1) /*~> Unit */
  a.get(p0 = 0) /*~> Unit */
  a.remove() /*~> Unit */
  a.removeAt(p0 = 1) /*~> Unit */
  a.remove(p0 = 1) /*~> Unit */
  b.<get-size>() /*~> Unit */
  b.add(p0 = 1) /*~> Unit */
  b.get(p0 = 0) /*~> Unit */
  b.remove() /*~> Unit */
  b.removeAt(index = 1) /*~> Unit */
  b.remove(element = 1) /*~> Unit */
  c.<get-size>() /*~> Unit */
  c.add(p0 = 1) /*~> Unit */
  c.get(p0 = 0) /*~> Unit */
  c.remove() /*~> Unit */
  c.removeAt(p0 = 1) /*~> Unit */
  c.remove(p0 = 1) /*~> Unit */
  d.<get-size>() /*~> Unit */
  d.add(p0 = 1) /*~> Unit */
  d.get(index = 0) /*~> Unit */
  d.remove() /*~> Unit */
  d.removeAt(index = 1) /*~> Unit */
  d.remove(element = 1) /*~> Unit */
}
