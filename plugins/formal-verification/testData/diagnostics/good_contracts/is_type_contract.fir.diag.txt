/is_type_contract.kt:(157,165): info: Generated Viper text for isString:
field pkg$kotlin$class_scope_pkg$kotlin$global$class_String$member_length: Int

method pkg$kotlin$class_scope_pkg$kotlin$global$class_CharSequence$getter_length(this: Ref)
  returns (ret: Int)


method global$fun_isString$fun_take$NT_Any$return$T_Boolean(local$x: dom$Nullable[dom$Any])
  returns (ret: Bool)
  ensures ret == true ==>
    dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$pkg$kotlin$global$class_String())
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Any()))
  ret := dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$pkg$kotlin$global$class_String())
  goto label$ret$0
  label label$ret$0
}

/is_type_contract.kt:(322,330): info: Generated Viper text for isString:
field pkg$kotlin$class_scope_pkg$kotlin$global$class_String$member_length: Int

method pkg$kotlin$class_scope_pkg$kotlin$global$class_CharSequence$getter_length(this: Ref)
  returns (ret: Int)


method global$fun_isString$fun_take$T_Any$return$T_Boolean(this: dom$Any)
  returns (ret: Bool)
  ensures ret == true ==>
    dom$Type$isSubtype((dom$TypeOf$typeOf(this): dom$Type), dom$Type$pkg$kotlin$global$class_String())
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(this): dom$Type), dom$Type$Any())
  ret := dom$Type$isSubtype((dom$TypeOf$typeOf(this): dom$Type), dom$Type$pkg$kotlin$global$class_String())
  goto label$ret$0
  label label$ret$0
}

/is_type_contract.kt:(491,508): info: Generated Viper text for subtypeTransitive:
method global$fun_subtypeTransitive$fun_take$T_Unit$return$T_Unit(local$x: dom$Unit)
  returns (ret: dom$Unit)
  ensures true ==>
    dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Any()))
{
  label label$ret$0
}

/is_type_contract.kt:(686,707): info: Generated Viper text for constructorReturnType:
field class_scope_global$class_Foo$member_bar: Ref

method global$fun_constructorReturnType$fun_take$$return$T_Boolean()
  returns (ret: Bool)
  ensures ret == true
{
  var anonymous$0: Ref
  anonymous$0 := class_scope_global$class_Foo$constructor$fun_take$$return$T_class_global$class_Foo()
  ret := dom$Type$isSubtype((dom$TypeOf$typeOf(anonymous$0): dom$Type), dom$Type$global$class_Foo())
  goto label$ret$0
  label label$ret$0
}

method class_scope_global$class_Foo$constructor$fun_take$$return$T_class_global$class_Foo()
  returns (ret: Ref)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$global$class_Foo())


/is_type_contract.kt:(832,848): info: Generated Viper text for subtypeSuperType:
field class_scope_global$class_Foo$member_bar: Ref

method global$fun_subtypeSuperType$fun_take$T_class_global$class_Bar$return$T_Unit(local$bar: Ref)
  returns (ret: dom$Unit)
  ensures true ==>
    dom$Type$isSubtype((dom$TypeOf$typeOf(local$bar): dom$Type), dom$Type$global$class_Foo())
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$bar): dom$Type), dom$Type$global$class_Bar())
  label label$ret$0
}

/is_type_contract.kt:(965,976): info: Generated Viper text for typeOfField:
field class_scope_global$class_Foo$member_bar: Ref

method global$fun_typeOfField$fun_take$T_class_global$class_Foo$return$T_Boolean(local$foo: Ref)
  returns (ret: Bool)
  ensures ret == true
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$global$class_Foo())
  if (true) {
    var anonymous$0: Ref
    inhale acc(local$foo.class_scope_global$class_Foo$member_bar, write)
    anonymous$0 := local$foo.class_scope_global$class_Foo$member_bar
    inhale dom$Type$isSubtype((dom$TypeOf$typeOf(anonymous$0): dom$Type), dom$Type$global$class_Bar())
    exhale acc(local$foo.class_scope_global$class_Foo$member_bar, write)
    if (dom$Type$isSubtype((dom$TypeOf$typeOf(anonymous$0): dom$Type), dom$Type$global$class_Bar())) {
      ret := true
      goto label$ret$0
    } else {
      ret := false
      goto label$ret$0
    }
  }
  label label$ret$0
}
