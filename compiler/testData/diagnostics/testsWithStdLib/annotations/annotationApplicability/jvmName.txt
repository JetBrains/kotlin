package

@kotlin.jvm.JvmName(name = "c") public val px: kotlin.Int = 1
@get:kotlin.jvm.JvmName(name = "e") public val valx: kotlin.Int
@get:kotlin.jvm.JvmName(name = "h") @set:kotlin.jvm.JvmName(name = "i") public var vardef: kotlin.Int
@get:kotlin.jvm.JvmName(name = "f") @set:kotlin.jvm.JvmName(name = "g") public var varx: kotlin.Int
@kotlin.jvm.JvmName(name = "d") public val kotlin.Any.px: kotlin.Int
@kotlin.jvm.JvmName(name = "a") public fun foo(): kotlin.Unit
public fun foo1(): kotlin.Unit
@kotlin.jvm.JvmName(name = "b") public fun kotlin.Any.foo(): kotlin.Unit

public abstract class AB {
    public constructor AB()
    @kotlin.jvm.JvmName(name = "AB_absFun1") public abstract fun absFun1(): kotlin.Unit
    public abstract fun absFun2(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    @kotlin.jvm.JvmName(name = "AB_internalAbstractFun") internal abstract fun internalAbstractFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_internalFinalFun") internal final fun internalFinalFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_internalOpenFun") internal open fun internalOpenFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_openFun") public open fun openFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_privateAbstractFun") private abstract fun privateAbstractFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_privateFinalFun") private final fun privateFinalFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_privateOpenFun") private open fun privateOpenFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_protectedAbstractFun") protected abstract fun protectedAbstractFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_protectedFinalFun") protected final fun protectedFinalFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_protectedOpenFun") protected open fun protectedOpenFun(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.jvm.JvmName(name = "C") public final class C {
    @kotlin.jvm.JvmName(name = "primary") public constructor C()
    @kotlin.jvm.JvmName(name = "ctr") public constructor C(/*0*/ x: kotlin.Int)
    @kotlin.jvm.JvmName(name = "c") public final val px: kotlin.Int = 1
    @get:kotlin.jvm.JvmName(name = "e") public final val valx: kotlin.Int
    @get:kotlin.jvm.JvmName(name = "f") @set:kotlin.jvm.JvmName(name = "g") public final var varx: kotlin.Int
    @kotlin.jvm.JvmName(name = "d") public final val kotlin.Any.px: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    @kotlin.jvm.JvmName(name = "a") public final fun foo(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    @kotlin.jvm.JvmName(name = "b") public final fun kotlin.Any.foo(): kotlin.Unit
}

public final class D : AB {
    public constructor D()
    public open override /*1*/ fun absFun1(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "D_absFun2") public open override /*1*/ fun absFun2(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    @kotlin.jvm.JvmName(name = "D_finalFun") public final fun finalFun(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal open override /*1*/ fun internalAbstractFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_internalFinalFun") internal final override /*1*/ /*fake_override*/ fun internalFinalFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_internalOpenFun") internal open override /*1*/ /*fake_override*/ fun internalOpenFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "D_openFun") public final override /*1*/ fun openFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_privateAbstractFun") invisible_fake abstract override /*1*/ /*fake_override*/ fun privateAbstractFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_privateFinalFun") invisible_fake final override /*1*/ /*fake_override*/ fun privateFinalFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_privateOpenFun") invisible_fake open override /*1*/ /*fake_override*/ fun privateOpenFun(): kotlin.Unit
    protected open override /*1*/ fun protectedAbstractFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_protectedFinalFun") protected final override /*1*/ /*fake_override*/ fun protectedFinalFun(): kotlin.Unit
    @kotlin.jvm.JvmName(name = "AB_protectedOpenFun") protected open override /*1*/ /*fake_override*/ fun protectedOpenFun(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface Intf {
    @get:kotlin.jvm.JvmName(name = "getBar") @set:kotlin.jvm.JvmName(name = "setBar") public abstract var foo: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
