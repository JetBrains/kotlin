FILE: [ResolvedTo(BODY_RESOLVE)] annotationOnDelegatedInterface.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Base : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun print(): R|kotlin/Unit|

    }
    public final [ResolvedTo(BODY_RESOLVE)] class BaseImpl : R|Base| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BaseImpl] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/BaseImpl.x] x: R|kotlin/Int|): R|BaseImpl| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val x: R|kotlin/Int| = R|<local>/x|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BaseImpl] get(): R|kotlin/Int|

        public open override [ResolvedTo(ANNOTATION_ARGUMENTS)] fun print(): R|kotlin/Unit| { LAZY_BLOCK }

    }
    @R|kotlin/annotation/Target|[Types](allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.EXPRESSION|)) public final [ResolvedTo(BODY_RESOLVE)] annotation class Some : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/Some.s] s: R|kotlin/String|): R|Some| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Some] get(): R|kotlin/String|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] [DelegateFieldsMapKey={0=FirFieldSymbol /Derived.$$delegate_0}] class Derived : R|Base| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Derived] constructor([ResolvedTo(BODY_RESOLVE)] b: R|Base|): R|Derived| {
            super<R|kotlin/Any|>()
        }

        private final [ResolvedTo(ANNOTATION_ARGUMENTS)] field $$delegate_0: R|Base| = LAZY_EXPRESSION

    }