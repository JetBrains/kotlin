== UnitIncDec ==
class UnitIncDec() {
    fun inc() : Unit {}
    fun dec() : Unit {}
}
---------------------
L0:
  1 <START>
L1:
    <END>      NEXT:[<SINK>]
error:
    <ERROR>    PREV:[]
sink:
    <SINK>     PREV:[<ERROR>, <END>]
=====================
== inc ==
fun inc() : Unit {}
---------------------
L0:
  1 <START>
  2 mark({})
    read (Unit)
L1:
  1 <END>          NEXT:[<SINK>]
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== dec ==
fun dec() : Unit {}
---------------------
L0:
  1 <START>
  2 mark({})
    read (Unit)
L1:
  1 <END>          NEXT:[<SINK>]
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== testUnitIncDec ==
fun testUnitIncDec() {
    var x = UnitIncDec()
    x = <warning>x<error>++</error></warning>
}
---------------------
L0:
  1 <START>
  2 mark({ var x = UnitIncDec() x = <warning>x<error>++</error></warning> })
    v(var x = UnitIncDec())
    mark(UnitIncDec())
    call(UnitIncDec(), <init>) -> <v0>
    w(x|<v0>)
    mark(<warning>)
    magic[UNRESOLVED_CALL](<warning>) -> <v1>
    mark(<warning>x<)
    magic[UNRESOLVED_CALL](<warning>x<|<v1>) -> <v2>
    mark(<warning>x<error>++)
    magic[UNRESOLVED_CALL](<warning>x<error>++|<v2>, !<v3>) -> <v4>
    mark(/error>)
    magic[UNRESOLVED_CALL](/error>) -> <v5>
    mark(<warning>x<error>++</error>)
    magic[UNRESOLVED_CALL](<warning>x<error>++</error>|<v4>, <v5>) -> <v6>
    mark(/warning>)
    magic[UNRESOLVED_CALL](/warning>) -> <v7>
    mark(<warning>x<error>++</error></warning>)
    magic[UNRESOLVED_CALL](<warning>x<error>++</error></warning>|<v6>, <v7>) -> <v8>
    w(x|<v8>)
L1:
  1 <END>                                                                               NEXT:[<SINK>]
error:
    <ERROR>                                                                             PREV:[]
sink:
    <SINK>                                                                              PREV:[<ERROR>, <END>]
=====================
