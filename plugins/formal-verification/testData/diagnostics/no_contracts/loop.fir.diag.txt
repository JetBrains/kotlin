/loop.kt:(4,14): info: Generated Viper text for while_loop:
method global$fun_while_loop$fun_take$T_Boolean$return$T_Boolean(local$b: Ref)
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
{
  var anonymous$0: Ref
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(local$b), dom$RuntimeType$boolType())
  label label$continue$0
  anonymous$0 := local$b
  while (dom$RuntimeType$boolFromRef(anonymous$0))
    invariant dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
  {
    var local1$a: Ref
    var local1$c: Ref
    local1$a := dom$RuntimeType$intToRef(1)
    local1$c := dom$RuntimeType$intToRef(2)
    anonymous$0 := local$b
  }
  label label$break$0
  ret$0 := dom$RuntimeType$boolToRef(false)
  goto label$ret$0
  label label$ret$0
}

/loop.kt:(120,144): info: Generated Viper text for while_function_condition:
method global$fun_while_function_condition$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var anonymous$0: Ref
  ret$0 := dom$RuntimeType$unitValue()
  label label$continue$0
  anonymous$0 := global$fun_while_loop$fun_take$T_Boolean$return$T_Boolean(dom$RuntimeType$boolToRef(true))
  while (dom$RuntimeType$boolFromRef(anonymous$0))
    invariant dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
  {
    anonymous$0 := global$fun_while_loop$fun_take$T_Boolean$return$T_Boolean(dom$RuntimeType$boolToRef(true))
  }
  label label$break$0
  label label$ret$0
}

method global$fun_while_loop$fun_take$T_Boolean$return$T_Boolean(local$b: Ref)
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$boolType())
