KtFile: MultiDollarBacktick.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('parserBug')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      PsiComment(EOL_COMMENT)('// No closing backtick — not an identifier')
      PsiWhiteSpace('\n    ')
      DOT_QUALIFIED_EXPRESSION
        STRING_TEMPLATE
          PsiElement(OPEN_QUOTE)('"""')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('        ')
          LONG_STRING_TEMPLATE_ENTRY
            PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              LONG_STRING_TEMPLATE_ENTRY
                PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
                STRING_TEMPLATE
                  PsiElement(OPEN_QUOTE)('"')
                  LITERAL_STRING_TEMPLATE_ENTRY
                    PsiElement(REGULAR_STRING_PART)('$')
                  LITERAL_STRING_TEMPLATE_ENTRY
                    PsiElement(REGULAR_STRING_PART)('`identifier')
                  PsiElement(CLOSING_QUOTE)('"')
                PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
              PsiElement(CLOSING_QUOTE)('"')
            PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)(' ')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('    ')
          PsiElement(CLOSING_QUOTE)('"""')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('trimIndent')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Two backticks — everything inside is an identifier')
      PsiWhiteSpace('\n    ')
      DOT_QUALIFIED_EXPRESSION
        STRING_TEMPLATE
          PsiElement(OPEN_QUOTE)('"""')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('        ')
          LONG_STRING_TEMPLATE_ENTRY
            PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              LONG_STRING_TEMPLATE_ENTRY
                PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
                STRING_TEMPLATE
                  PsiElement(OPEN_QUOTE)('"')
                  SHORT_STRING_TEMPLATE_ENTRY
                    PsiElement(SHORT_TEMPLATE_ENTRY_START)('$')
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('`identifier"}"} `')
                  PsiElement(CLOSING_QUOTE)('"')
                PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
              PsiElement(CLOSING_QUOTE)('"')
            PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('    ')
          PsiElement(CLOSING_QUOTE)('"""')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('trimIndent')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Escaped dollar, not an identifier')
      PsiWhiteSpace('\n    ')
      DOT_QUALIFIED_EXPRESSION
        STRING_TEMPLATE
          PsiElement(OPEN_QUOTE)('"""')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('        ')
          LONG_STRING_TEMPLATE_ENTRY
            PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              LONG_STRING_TEMPLATE_ENTRY
                PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
                STRING_TEMPLATE
                  PsiElement(OPEN_QUOTE)('"')
                  ESCAPE_STRING_TEMPLATE_ENTRY
                    PsiElement(ESCAPE_SEQUENCE)('\$')
                  LITERAL_STRING_TEMPLATE_ENTRY
                    PsiElement(REGULAR_STRING_PART)('`identifier')
                  PsiElement(CLOSING_QUOTE)('"')
                PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
              PsiElement(CLOSING_QUOTE)('"')
            PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)(' `')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('    ')
          PsiElement(CLOSING_QUOTE)('"""')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('trimIndent')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Innermost string should not grab too much')
      PsiWhiteSpace('\n    ')
      DOT_QUALIFIED_EXPRESSION
        STRING_TEMPLATE
          PsiElement(OPEN_QUOTE)('"""')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('        ')
          LONG_STRING_TEMPLATE_ENTRY
            PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              LONG_STRING_TEMPLATE_ENTRY
                PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
                STRING_TEMPLATE
                  PsiElement(INTERPOLATION_PREFIX)('$$$')
                  PsiElement(OPEN_QUOTE)('"')
                  LITERAL_STRING_TEMPLATE_ENTRY
                    PsiElement(REGULAR_STRING_PART)('$$')
                  LITERAL_STRING_TEMPLATE_ENTRY
                    PsiElement(REGULAR_STRING_PART)('`identifier')
                  PsiElement(CLOSING_QUOTE)('"')
                PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
              PsiElement(CLOSING_QUOTE)('"')
            PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)(' `')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('    ')
          PsiElement(CLOSING_QUOTE)('"""')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('trimIndent')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Three dollars is the escape sequence, everything inside the backticks is an identifier')
      PsiWhiteSpace('\n    ')
      DOT_QUALIFIED_EXPRESSION
        STRING_TEMPLATE
          PsiElement(OPEN_QUOTE)('"""')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('        ')
          LONG_STRING_TEMPLATE_ENTRY
            PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              LONG_STRING_TEMPLATE_ENTRY
                PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
                STRING_TEMPLATE
                  PsiElement(INTERPOLATION_PREFIX)('$$$')
                  PsiElement(OPEN_QUOTE)('"')
                  SHORT_STRING_TEMPLATE_ENTRY
                    PsiElement(SHORT_TEMPLATE_ENTRY_START)('$$$')
                    REFERENCE_EXPRESSION
                      PsiElement(IDENTIFIER)('`identifier"}"} `')
                  PsiElement(CLOSING_QUOTE)('"')
                PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
              PsiElement(CLOSING_QUOTE)('"')
            PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('    ')
          PsiElement(CLOSING_QUOTE)('"""')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('trimIndent')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Without the closing backtick the innermost string stops where expected')
      PsiWhiteSpace('\n    ')
      DOT_QUALIFIED_EXPRESSION
        STRING_TEMPLATE
          PsiElement(OPEN_QUOTE)('"""')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('        ')
          LONG_STRING_TEMPLATE_ENTRY
            PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
            STRING_TEMPLATE
              PsiElement(OPEN_QUOTE)('"')
              LONG_STRING_TEMPLATE_ENTRY
                PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
                STRING_TEMPLATE
                  PsiElement(INTERPOLATION_PREFIX)('$$$')
                  PsiElement(OPEN_QUOTE)('"')
                  LITERAL_STRING_TEMPLATE_ENTRY
                    PsiElement(REGULAR_STRING_PART)('$$')
                  LITERAL_STRING_TEMPLATE_ENTRY
                    PsiElement(REGULAR_STRING_PART)('`identifier')
                  PsiElement(CLOSING_QUOTE)('"')
                PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
              PsiElement(CLOSING_QUOTE)('"')
            PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)(' ')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('}')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('\n')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('    ')
          PsiElement(CLOSING_QUOTE)('"""')
        PsiElement(DOT)('.')
        CALL_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('trimIndent')
          VALUE_ARGUMENT_LIST
            PsiElement(LPAR)('(')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// on simple strings')
      PsiWhiteSpace('\n    ')
      STRING_TEMPLATE
        PsiElement(INTERPOLATION_PREFIX)('$$$')
        PsiElement(OPEN_QUOTE)('"')
        LITERAL_STRING_TEMPLATE_ENTRY
          PsiElement(REGULAR_STRING_PART)('$$')
        LITERAL_STRING_TEMPLATE_ENTRY
          PsiElement(REGULAR_STRING_PART)('`identifier')
        PsiElement(CLOSING_QUOTE)('"')
      PsiWhiteSpace('\n    ')
      STRING_TEMPLATE
        PsiElement(OPEN_QUOTE)('"')
        LONG_STRING_TEMPLATE_ENTRY
          PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
          STRING_TEMPLATE
            PsiElement(INTERPOLATION_PREFIX)('$$$')
            PsiElement(OPEN_QUOTE)('"')
            LITERAL_STRING_TEMPLATE_ENTRY
              PsiElement(REGULAR_STRING_PART)('$$')
            LITERAL_STRING_TEMPLATE_ENTRY
              PsiElement(REGULAR_STRING_PART)('`identifier')
            PsiElement(CLOSING_QUOTE)('"')
          PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
        PsiErrorElement:Expecting '"'
          <empty list>
      PsiWhiteSpace('\n    ')
      STRING_TEMPLATE
        PsiElement(OPEN_QUOTE)('"')
        LONG_STRING_TEMPLATE_ENTRY
          PsiElement(LONG_TEMPLATE_ENTRY_START)('${')
          STRING_TEMPLATE
            PsiElement(INTERPOLATION_PREFIX)('$$$')
            PsiElement(OPEN_QUOTE)('"')
            SHORT_STRING_TEMPLATE_ENTRY
              PsiElement(SHORT_TEMPLATE_ENTRY_START)('$$$')
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('`identifier`')
            PsiElement(CLOSING_QUOTE)('"')
          PsiElement(LONG_TEMPLATE_ENTRY_END)('}')
        PsiErrorElement:Expecting '"'
          <empty list>
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')