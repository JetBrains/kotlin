<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude" version="2" url="http://kotlinlang.org" allow-bundled-update="true">
    <id>org.jetbrains.kotlin</id>

  <name>Kotlin</name>
  <description>Kotlin language support</description>
  <version>@snapshot@</version>
  <vendor url="http://www.jetbrains.com">JetBrains s.r.o.</vendor>

  <idea-version since-build="172.1" until-build="172.*"/>

  <depends>com.intellij.modules.java</depends>

  <depends optional="true" config-file="junit.xml">JUnit</depends>
  <depends optional="true" config-file="gradle.xml">org.jetbrains.plugins.gradle</depends>
  <depends optional="true" config-file="maven.xml">org.jetbrains.idea.maven</depends>
  <depends optional="true" config-file="testng-j.xml">TestNG-J</depends>
  <depends optional="true" config-file="kotlin-copyright.xml">com.intellij.copyright</depends>
  <depends optional="true" config-file="javaScriptDebug.xml">JavaScriptDebugger</depends>
  <depends optional="true" config-file="android.xml">org.jetbrains.android</depends>
  <depends optional="true" config-file="coverage.xml">Coverage</depends>
  <depends optional="true" config-file="i18n.xml">com.intellij.java-i18n</depends>
  <depends optional="true" config-file="injection.xml">org.intellij.intelliLang</depends>
  <depends optional="true" config-file="decompiler.xml">org.jetbrains.java.decompiler</depends>

  <!-- ULTIMATE-PLUGIN-PLACEHOLDER -->

  <project-components>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.compiler.KotlinCompilerManager</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.configuration.ui.KotlinConfigurationCheckerComponent</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.highlighter.KotlinBeforeResolveHighlightingPass$Factory</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.refactoring.cutPaste.MoveDeclarationsPassFactory</implementation-class>
      <skipForDefaultProject/>
    </component>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.highlighter.ScriptExternalHighlightingPass$Factory</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.completion.LookupCancelWatcher</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.project.KotlinCodeBlockModificationListener</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.caches.KotlinPackageContentModificationListener</implementation-class>
    </component>
    <component>
      <interface-class>org.jetbrains.kotlin.idea.completion.CompletionBindingContextProvider</interface-class>
      <implementation-class>org.jetbrains.kotlin.idea.completion.CompletionBindingContextProvider</implementation-class>
    </component>
  </project-components>

  <application-components>
    <component>
      <implementation-class>org.jetbrains.kotlin.idea.PluginStartupComponent</implementation-class>
    </component>

    <component>
      <implementation-class>org.jetbrains.kotlin.idea.versions.KotlinUpdatePluginComponent</implementation-class>
    </component>

  </application-components>

  <actions>
    <action id="Kotlin.NewFile" class="org.jetbrains.kotlin.idea.actions.NewKotlinFileAction">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewGroup1"/>
    </action>

    <action id="ConvertJavaToKotlin" class="org.jetbrains.kotlin.idea.actions.JavaToKotlinAction"
            text="Convert Java File to Kotlin File">
      <keyboard-shortcut keymap="$default" first-keystroke="control alt shift K"/>
      <add-to-group group-id="CodeMenu" anchor="last"/>
    </action>

    <group id="KotlinToolsGroup" popup="true" text="Kotlin" icon="/org/jetbrains/kotlin/idea/icons/kotlin13.png"
           class="org.jetbrains.kotlin.idea.actions.KotlinActionGroup">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="ConfigureKotlinInProject" class="org.jetbrains.kotlin.idea.actions.ConfigureKotlinJavaInProjectAction"
            text="Configure Kotlin in Project">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="ConfigureKotlinJsInProject" class="org.jetbrains.kotlin.idea.actions.ConfigureKotlinJsInProjectAction"
            text="Configure Kotlin (JavaScript) in Project">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="KotlinConfigureUpdates" class="org.jetbrains.kotlin.idea.actions.ConfigurePluginUpdatesAction"
            text="Configure Kotlin Plugin Updates"
            description="Configure automatic updates for the Kotlin plugin">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="ShowKotlinBytecode" class="org.jetbrains.kotlin.idea.actions.ShowKotlinBytecodeAction"
            text="Show Kotlin Bytecode">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="DecompileKotlinToJava" class="org.jetbrains.kotlin.idea.actions.DecompileKotlinToJavaAction"
            text="Decompile Kotlin To Java">
      <add-to-group group-id="KotlinToolsGroup"/>
    </action>

    <action id="ExtractFunction" class="org.jetbrains.kotlin.idea.refactoring.introduce.extractFunction.ExtractFunctionAction"
            text="_Function..." use-shortcut-of="ExtractMethod">
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractMethod"/>
    </action>

    <action id="IntroduceProperty" class="org.jetbrains.kotlin.idea.refactoring.introduce.introduceProperty.IntroducePropertyAction"
            text="P_roperty..." use-shortcut-of="IntroduceField">
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="IntroduceField"/>
    </action>

    <action id="CopyAsDiagnosticTest" class="org.jetbrains.kotlin.idea.actions.internal.CopyAsDiagnosticTestAction"
            text="Copy Current File As Diagnostic Test">
      <keyboard-shortcut keymap="$default" first-keystroke="control alt shift T"/>
      <add-to-group group-id="KotlinToolsGroup" anchor="last"/>
    </action>

    <action id="KotlinInternalMode" class="org.jetbrains.kotlin.idea.actions.internal.KotlinInternalModeToggleAction">
      <add-to-group group-id="KotlinToolsGroup" anchor="last"/>
    </action>



    <group id="KotlinInternalGroup" popup="true" text="Internal" icon="/general/balloonWarning.png"
           class="org.jetbrains.kotlin.idea.actions.internal.KotlinInternalActionGroup">

      <group id="KotlinCompletionBenchmarkGroup" popup="true" text="Benchmark completion"
             class="org.jetbrains.kotlin.idea.actions.internal.KotlinInternalActionGroup" >

        <action id="TopLevelCompletionBenchmarkAction"
                class="org.jetbrains.kotlin.idea.actions.internal.benchmark.TopLevelCompletionBenchmarkAction"
                text="Top-level scenario"/>

        <action id="LocalCompletionBenchmarkAction"
                class="org.jetbrains.kotlin.idea.actions.internal.benchmark.LocalCompletionBenchmarkAction"
                text="Local scenario"/>
      </group>

      <action id="HighlightingBenchmarkAction"
              class="org.jetbrains.kotlin.idea.actions.internal.benchmark.HighlightingBenchmarkAction"
              text="Benchmark highlighting"/>

      <action id="CacheResetOnProcessCanceledToggleAction"
              class="org.jetbrains.kotlin.idea.actions.internal.CacheResetOnProcessCanceledToggleAction"
              text="Reset caches on ProcessCanceledException"/>

      <action id="CheckComponentsUsageSearchAction" class="org.jetbrains.kotlin.idea.actions.internal.CheckComponentsUsageSearchAction"
              text="Check Component Functions Usage Search"/>

      <action id="FindImplicitNothingAction" class="org.jetbrains.kotlin.idea.actions.internal.FindImplicitNothingAction"
              text="Find Implicit Nothing Calls"/>

      <action id="PrintOutNotPropertyMatches" class="org.jetbrains.kotlin.idea.actions.internal.SearchNotPropertyCandidatesAction"
              text="Search Not Property Candidates"/>

      <action id="CreateIncrementalCompilationBackup"
              class="org.jetbrains.kotlin.idea.internal.makeBackup.CreateIncrementalCompilationBackup"/>

      <action id="StoredExceptionsThrowToggleAction" class="org.jetbrains.kotlin.idea.actions.internal.StoredExceptionsThrowToggleAction"
              text="Throw cached PCE"/>

      <add-to-group group-id="KotlinToolsGroup" anchor="last"/>
    </group>


    <action id="ExtractFunctionToScope" class="org.jetbrains.kotlin.idea.refactoring.introduce.extractFunction.ExtractFunctionToScopeAction"
            text="Function to _Scope...">
      <keyboard-shortcut keymap="$default" first-keystroke="control alt shift M"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractFunction"/>
    </action>

    <action id="IntroduceTypeParameter" class="org.jetbrains.kotlin.idea.refactoring.introduce.introduceTypeParameter.IntroduceTypeParameterAction"
            text="T_ype Parameter...">
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractFunctionToScope"/>
    </action>

    <action id="IntroduceTypeAlias" class="org.jetbrains.kotlin.idea.refactoring.introduce.introduceTypeAlias.IntroduceTypeAliasAction"
            text="Type _Alias...">
      <keyboard-shortcut keymap="$default" first-keystroke="control alt shift A"/>
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="IntroduceTypeParameter"/>
    </action>

    <!-- Kotlin Console REPL-->
    <action id="KotlinConsoleREPL" class="org.jetbrains.kotlin.console.actions.RunKotlinConsoleAction"
            text="Kotlin REPL"
            icon="/org/jetbrains/kotlin/idea/icons/kotlin_launch_configuration.png">
      <add-to-group group-id="KotlinToolsGroup" anchor="last"/>
    </action>

    <action id="KotlinShellExecute" class="com.intellij.openapi.actionSystem.EmptyAction"
            text="Execute Kotlin Code"
            description="Execute Kotlin code in console">
      <keyboard-shortcut first-keystroke="control ENTER" keymap="$default"/>
    </action>

    <group id="KotlinGenerateGroup">
      <action id="KotlinGenerateTestMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$Test"
              text="Test Function" />
      <action id="KotlinGenerateSetUpMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$SetUp"
              text="SetUp Function" />
      <action id="KotlinGenerateTearDownMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$TearDown"
              text="TearDown Function" />
      <action id="KotlinGenerateDataMethod"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateTestSupportActionBase$Data"
              text="Parameters Function" />
      <separator />
      <action id="KotlinGenerateSecondaryConstructor"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateSecondaryConstructorAction"
              text="Secondary Constructor" />
      <action id="KotlinGenerateEqualsAndHashCode"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateEqualsAndHashcodeAction"
              text="equals() and hashCode()" />
      <action id="KotlinGenerateToString"
              class="org.jetbrains.kotlin.idea.actions.generate.KotlinGenerateToStringAction"
              text="toString()" />

      <add-to-group group-id="GenerateGroup" anchor="first"/>
    </group>
  </actions>

  <extensions defaultExtensionNs="com.intellij">
    <applicationService serviceInterface="org.jetbrains.kotlin.psi.stubs.elements.StubIndexService"
                        serviceImplementation="org.jetbrains.kotlin.idea.stubindex.IdeStubIndexService"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.load.kotlin.KotlinBinaryClassCache"
                        serviceImplementation="org.jetbrains.kotlin.load.kotlin.KotlinBinaryClassCache"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.configuration.KotlinModuleTypeManager"
                        serviceImplementation="org.jetbrains.kotlin.idea.KotlinModuleTypeManagerImpl"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.quickfix.QuickFixes"
                        serviceImplementation="org.jetbrains.kotlin.idea.quickfix.QuickFixes"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.caches.FileAttributeService"
                        serviceImplementation="org.jetbrains.kotlin.idea.caches.FileAttributeServiceImpl"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.KotlinPluginUpdater"
                        serviceImplementation="org.jetbrains.kotlin.idea.KotlinPluginUpdater"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.util.ImportInsertHelper"
                    serviceImplementation="org.jetbrains.kotlin.util.ImportInsertHelperImpl"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.psi.KotlinDeclarationNavigationPolicy"
                        serviceImplementation="org.jetbrains.kotlin.idea.decompiler.navigation.KotlinDeclarationNavigationPolicyImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.caches.resolve.KotlinCacheService"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.KotlinCacheServiceImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.load.kotlin.MetadataFinderFactory"
                    serviceImplementation="org.jetbrains.kotlin.idea.vfilefinder.IDEVirtualFileFinderFactory"/>

    <projectService serviceInterface="org.jetbrains.kotlin.load.kotlin.VirtualFileFinderFactory"
                    serviceImplementation="org.jetbrains.kotlin.idea.vfilefinder.IDEVirtualFileFinderFactory"/>

    <projectService serviceInterface="org.jetbrains.kotlin.load.kotlin.ModuleVisibilityManager"
                    serviceImplementation="org.jetbrains.kotlin.idea.util.IdeModuleVisibilityManagerImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.jvm.modules.JavaModuleResolver"
                    serviceImplementation="org.jetbrains.kotlin.idea.modules.IdeJavaModuleResolver"/>

    <projectService serviceInterface="org.jetbrains.kotlin.asJava.LightClassGenerationSupport"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.IDELightClassGenerationSupport"/>

    <projectService serviceInterface="org.jetbrains.kotlin.psi.KtFileClassProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.KtFileClassProviderImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.CodeAnalyzerInitializer"
                    serviceImplementation="org.jetbrains.kotlin.resolve.DummyCodeAnalyzerInitializer"/>

    <projectService serviceInterface="org.jetbrains.kotlin.script.ScriptDefinitionProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.ScriptDefinitionsManager"/>

    <projectService serviceInterface="org.jetbrains.kotlin.script.ScriptDependenciesProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.IdeScriptDependenciesProvider"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesManager"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesCache"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesCache"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesUpdater"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesUpdater"/>

    <projectService serviceInterface="org.jetbrains.kotlin.script.ScriptReportSink"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.IdeScriptReportSink"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCommonCompilerArgumentsHolder"
                    serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCommonCompilerArgumentsHolder"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JvmCompilerArgumentsHolder"
                    serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JvmCompilerArgumentsHolder"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JsCompilerArgumentsHolder"
                    serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.Kotlin2JsCompilerArgumentsHolder"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerSettings"
                    serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerSettings"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerWorkspaceSettings"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.versions.SuppressNotificationState"/>

    <projectService serviceInterface="org.jetbrains.kotlin.asJava.classes.KtLightClassForFacade$FacadeStubCache"
                    serviceImplementation="org.jetbrains.kotlin.asJava.classes.KtLightClassForFacade$FacadeStubCache"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.debugger.evaluate.KotlinDebuggerCaches"
                    serviceImplementation="org.jetbrains.kotlin.idea.debugger.evaluate.KotlinDebuggerCaches"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.lazy.declarations.DeclarationProviderFactoryService"
                    serviceImplementation="org.jetbrains.kotlin.idea.stubindex.resolve.PluginDeclarationProviderFactoryService"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.stubindex.SubpackagesIndexService"
                    serviceImplementation="org.jetbrains.kotlin.idea.stubindex.SubpackagesIndexService"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.caches.resolve.LibraryModificationTracker"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.LibraryModificationTracker"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesModificationTracker"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.script.ScriptDependenciesModificationTracker"/>

    <projectService serviceInterface="org.jetbrains.kotlin.resolve.jvm.KotlinJavaPsiFacade"
                    serviceImplementation="org.jetbrains.kotlin.resolve.jvm.KotlinJavaPsiFacade"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.caches.resolve.lightClasses.ClsJavaStubByVirtualFileCache"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.lightClasses.ClsJavaStubByVirtualFileCache"/>

    <projectService serviceInterface="org.jetbrains.kotlin.console.KotlinConsoleKeeper"
                    serviceImplementation="org.jetbrains.kotlin.console.KotlinConsoleKeeper"/>

    <projectService serviceInterface="org.jetbrains.kotlin.asJava.classes.LightClassInheritanceHelper"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.lightClasses.IdeLightClassInheritanceHelper"/>

    <projectService serviceInterface="org.jetbrains.kotlin.config.KotlinFacetSettingsProvider"
                    serviceImplementation="org.jetbrains.kotlin.idea.facet.KotlinFacetSettingsProviderImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.NotPropertiesService"
                    serviceImplementation="org.jetbrains.kotlin.idea.intentions.NotPropertiesServiceImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.kdoc.SampleResolutionService"
                    serviceImplementation="org.jetbrains.kotlin.idea.kdoc.IdeSampleResolutionService"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.PerModulePackageCacheService"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.caches.resolve.LibraryDependenciesCache"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.LibraryDependenciesCacheImpl"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.caches.resolve.IdePackageOracleFactory"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.IdePackageOracleFactory"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.caches.resolve.ScriptBinariesScopeCache"
                    serviceImplementation="org.jetbrains.kotlin.idea.caches.resolve.ScriptBinariesScopeCache"/>

    <projectService serviceInterface="org.jetbrains.kotlin.idea.core.util.ProjectJob"
                    serviceImplementation="org.jetbrains.kotlin.idea.core.util.ProjectJob"/>

    <errorHandler implementation="org.jetbrains.kotlin.idea.reporter.KotlinReportSubmitter"/>

    <internalFileTemplate name="Kotlin File"/>
    <internalFileTemplate name="Kotlin Class"/>
    <internalFileTemplate name="Kotlin Enum"/>
    <internalFileTemplate name="Kotlin Interface"/>

    <gotoSymbolContributor implementation="org.jetbrains.kotlin.idea.goto.KotlinGotoSymbolContributor"/>
    <gotoClassContributor implementation="org.jetbrains.kotlin.idea.goto.KotlinGotoClassContributor"/>
    <searchEverywhereClassifier implementation="org.jetbrains.kotlin.idea.goto.KotlinSearchEverywhereClassifier"/>
    <lang.importOptimizer language="kotlin" implementationClass="org.jetbrains.kotlin.idea.imports.KotlinImportOptimizer"/>
    <lang.namesValidator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.refactoring.KotlinNamesValidator"/>

    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.KotlinFileTypeFactory"/>
    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.KotlinJavaScriptMetaFileTypeFactory"/>
    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.KotlinBuiltInFileTypeFactory"/>
    <fileTypeFactory implementation="org.jetbrains.kotlin.idea.KotlinModuleFileFactory"/>

    <compileServer.plugin classpath="jps/kotlin-jps-plugin.jar;kotlin-stdlib.jar;kotlin-reflect.jar;kotlin-plugin.jar;android-extensions-ide.jar;android-extensions-compiler.jar"/>
    <compiler.task execute="BEFORE" implementation="org.jetbrains.kotlin.idea.internal.makeBackup.MakeBackupCompileTask"/>
    <buildProcess.parametersProvider implementation="org.jetbrains.kotlin.idea.compiler.configuration.KotlinBuildProcessParametersProvider"/>
    <jps.plugin />

    <lang.syntaxHighlighterFactory key="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinSyntaxHighlighterFactory"/>
    <syntaxHighlighter factoryClass="org.jetbrains.kotlin.idea.decompiler.builtIns.KotlinSyntaxHighlighterProviderForDecompiledBuiltIns"/>
    <lang.braceMatcher language="kotlin" implementationClass="org.jetbrains.kotlin.idea.KotlinPairMatcher"/>
    <lang.parserDefinition language="kotlin" implementationClass="org.jetbrains.kotlin.parsing.KotlinParserDefinition"/>
    <lang.commenter language="kotlin" implementationClass="org.jetbrains.kotlin.idea.KotlinCommenter"/>
    <lang.psiStructureViewFactory language="kotlin" implementationClass="org.jetbrains.kotlin.idea.structureView.KotlinStructureViewFactory"/>
    <structureViewBuilder order="first" key="CLASS" factoryClass="org.jetbrains.kotlin.idea.structureView.KtClsStructureViewBuilderProvider"/>

    <lang.foldingBuilder language="kotlin" implementationClass="org.jetbrains.kotlin.idea.KotlinFoldingBuilder"/>
    <lang.formatter language="kotlin" implementationClass="org.jetbrains.kotlin.idea.formatter.KotlinFormattingModelBuilder"/>
    <preFormatProcessor implementation="org.jetbrains.kotlin.idea.formatter.KotlinPreFormatProcessor"/>
    <lang.findUsagesProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesProvider"/>
    <lang.elementManipulator forClass="org.jetbrains.kotlin.psi.KtStringTemplateExpression"
                             implementationClass="org.jetbrains.kotlin.psi.psiUtil.KtStringTemplateExpressionManipulator"/>
    <fileStructureGroupRuleProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinDeclarationGroupRuleProvider"/>
    <fileStructureGroupRuleProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinDeclarationSecondLevelGroupRuleProvider"/>
    <importFilteringRule implementation="org.jetbrains.kotlin.idea.findUsages.KotlinImportFilteringRule"/>
    <lang.refactoringSupport language="kotlin" implementationClass="org.jetbrains.kotlin.idea.refactoring.KotlinRefactoringSupportProvider"/>
    <lang.surroundDescriptor language="kotlin"
                             implementationClass="org.jetbrains.kotlin.idea.codeInsight.surroundWith.expression.KotlinExpressionSurroundDescriptor"/>
    <lang.surroundDescriptor language="kotlin"
                             implementationClass="org.jetbrains.kotlin.idea.codeInsight.surroundWith.statement.KotlinStatementSurroundDescriptor"/>
    <lang.unwrapDescriptor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.unwrap.KotlinUnwrapDescriptor"/>
    <quoteHandler fileType="Kotlin" className="org.jetbrains.kotlin.idea.editor.KotlinQuoteHandler"/>
    <refactoring.helper implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinRefactoringHelperForDelayedRequests"/>
    <refactoring.helper implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinOptimizeImportsRefactoringHelper"/>
    <refactoring.moveHandler
        id="kotlin.moveFilesOrDirectories"
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.KotlinMoveFilesOrDirectoriesHandler"
        order="first"/>
    <refactoring.moveHandler
        id="kotlin.moveTopLevelDeclarations"
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveDeclarations.MoveKotlinDeclarationsHandler"
        order="first,before kotlin.moveFilesOrDirectories"/>
    <refactoring.moveHandler
        id="kotlinAwareJavaMoveClassesOrPackagesHandler"
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveClassesOrPackages.KotlinAwareJavaMoveClassesOrPackagesHandler"
        order="first" />
    <moveFileHandler implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.MoveKotlinFileHandler" />
    <moveFileHandler
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.FqNameFixingMoveJavaFileHandler"
        order="before java" />
    <refactoring.moveDirectoryWithClassesHelper
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.KotlinMoveDirectoryWithClassesHelper"
        order="first" />
    <refactoring.moveClassHandler
        implementation="org.jetbrains.kotlin.idea.refactoring.move.moveFilesOrDirectories.MoveKotlinClassHandler"
        order="first"/>
    <refactoring.moveInnerClassUsagesHandler
        implementationClass="org.jetbrains.kotlin.idea.refactoring.move.MoveJavaInnerClassKotlinUsagesHandler"
        language="kotlin" />
    <refactoring.copyHandler
        id="kotlinClass"
        implementation="org.jetbrains.kotlin.idea.refactoring.copy.CopyKotlinDeclarationsHandler"
        order="first" />
    <refactoring.changeSignatureUsageProcessor
        implementation="org.jetbrains.kotlin.idea.refactoring.changeSignature.KotlinChangeSignatureUsageProcessor"
        order="after javaProcessor" />
    <refactoring.introduceParameterMethodUsagesProcessor
        implementation="org.jetbrains.kotlin.idea.refactoring.introduce.introduceParameter.KotlinIntroduceParameterMethodUsageProcessor"/>
    <inlineActionHandler implementation="org.jetbrains.kotlin.idea.refactoring.inline.KotlinInlineValHandler"/>
    <inlineActionHandler implementation="org.jetbrains.kotlin.idea.refactoring.inline.KotlinInlineFunctionHandler"/>
    <inlineActionHandler implementation="org.jetbrains.kotlin.idea.refactoring.inline.KotlinInlineTypeAliasHandler"/>
    <treeStructureProvider implementation="org.jetbrains.kotlin.idea.projectView.KotlinSelectInProjectViewProvider"/>
    <treeStructureProvider implementation="org.jetbrains.kotlin.idea.projectView.KotlinExpandNodeProjectViewProvider" order="last"/>

    <colorSettingsPage implementation="org.jetbrains.kotlin.idea.highlighter.KotlinColorSettingsPage"/>
    <additionalTextAttributes scheme="Default" file="colorScheme/Default_Kotlin.xml"/>
    <additionalTextAttributes scheme="Darcula" file="colorScheme/Darcula_Kotlin.xml"/>

    <codeStyleSettingsProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinCodeStyleSettingsProvider"/>
    <langCodeStyleSettingsProvider implementation="org.jetbrains.kotlin.idea.formatter.KotlinLanguageCodeStyleSettingsProvider"/>

    <projectConfigurable instance="org.jetbrains.kotlin.idea.compiler.configuration.KotlinCompilerConfigurableTab"
                         id="project.kotlinCompiler"
                         displayName="Kotlin Compiler"
                         parentId="project.propCompiler"/>

    <qualifiedNameProvider implementation="org.jetbrains.kotlin.idea.actions.KotlinQualifiedNameProvider"/>

    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinFunctionParameterInfoHandler"/>
    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinArrayAccessParameterInfoHandler"/>
    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinClassTypeArgumentInfoHandler"/>
    <codeInsight.parameterInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinFunctionTypeArgumentInfoHandler"/>
    <codeInsight.parameterNameHints language="kotlin" implementationClass="org.jetbrains.kotlin.idea.parameterInfo.KotlinInlayParameterHintsProvider"/>

    <codeInsight.gotoSuper language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.GotoSuperActionHandler"/>

    <codeInsight.template.postfixTemplateProvider language="kotlin"
                                                  implementationClass="org.jetbrains.kotlin.idea.codeInsight.postfix.KtPostfixTemplateProvider"/>


    <typeDeclarationProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinTypeDeclarationProvider"/>

    <completion.contributor language="kotlin"
                            id="KotlinCompletionContributor"
                            order="first"
                            implementationClass="org.jetbrains.kotlin.idea.completion.KotlinCompletionContributor"/>
    <completion.contributor language="kotlin"
                            implementationClass="org.jetbrains.kotlin.idea.completion.KDocCompletionContributor"/>

    <completion.confidence language="kotlin" implementationClass="com.intellij.codeInsight.completion.UnfocusedNameIdentifier"/>
    <completion.confidence language="kotlin"
                           implementationClass="org.jetbrains.kotlin.idea.completion.confidence.UnfocusedPossibleFunctionParameter"/>
    <completion.confidence language="kotlin" implementationClass="com.intellij.codeInsight.completion.AlwaysFocusLookup" order="last"/>
    <completion.confidence language="kotlin" implementationClass="org.jetbrains.kotlin.idea.completion.confidence.EnableAutopopupInStringTemplate"/>
    <completion.confidence language="kotlin" implementationClass="com.intellij.codeInsight.completion.SkipAutopopupInStrings"/>

    <lookup.charFilter implementation="org.jetbrains.kotlin.idea.completion.KotlinCompletionCharFilter"/>
    <lookup.actionProvider implementation="org.jetbrains.kotlin.idea.completion.KotlinExcludeFromCompletionLookupActionProvider"/>

    <statistician key="completion" implementationClass="org.jetbrains.kotlin.idea.completion.KotlinCompletionStatistician"/>
    <statistician key="proximity" implementationClass="org.jetbrains.kotlin.idea.completion.KotlinProximityStatistician"/>

    <weigher key="completion" implementationClass="org.jetbrains.kotlin.idea.completion.KotlinLookupElementProximityWeigher" id="kotlin.proximity" order="after proximity"/>

    <psi.referenceContributor language="kotlin" implementation="org.jetbrains.kotlin.idea.references.KotlinReferenceContributor"/>
    <psi.referenceContributor
        id="kotlinFilePathReferenceContributor"
        language="kotlin"
        implementation="org.jetbrains.kotlin.idea.references.KotlinFilePathReferenceContributor"/>
    <psi.referenceContributor
        id="kotlinDefaultAnnotationMethodImplicitReferenceContributor"
        language="kotlin"
        implementation="org.jetbrains.kotlin.idea.references.KotlinDefaultAnnotationMethodImplicitReferenceContributor"/>

    <psi.treeChangePreprocessor implementation="org.jetbrains.kotlin.idea.caches.KotlinPackageStatementPsiTreeChangePreprocessor"/>

    <renamePsiElementProcessor id="KotlinClass"
                               implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinClassProcessor"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinFunctionProcessor"
                               id="KotlinFunction"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinPropertyProcessor"
                               id="KotlinProperty"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinParameterProcessor"
                               id="KotlinParameter"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinFileProcessor"
                               id="KotlinFile"
                               order="first"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinTypeParameterProcessor"
                               id="KotlinTypeParameter"/>
    <renamePsiElementProcessor implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameJavaSyntheticPropertyHandler$Processor"
                               id="JavaSyntheticPropertyFromKotlin"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinRenameDispatcherHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinDirectoryAsPackageRenameHandler"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticVariableRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticVariableRenamerFactoryForJavaClass"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticVariableInJavaRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticInheritorRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticOverloadsRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinAutomaticTestRenamerFactory"/>
    <automaticRenamerFactory implementation="org.jetbrains.kotlin.idea.refactoring.rename.AutomaticParameterRenamerFactory"/>
    <vetoRenameCondition implementation="org.jetbrains.kotlin.idea.refactoring.KotlinVetoRenameCondition"/>
    <renameInputValidator implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinDeclarationRenameInputValidator"/>
    <rename.inplace.resolveSnapshotProvider
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.rename.KotlinResolveSnapshotProvider"/>

    <spellchecker.support implementationClass="org.jetbrains.kotlin.idea.KotlinSpellcheckingStrategy" language="kotlin"/>

    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Generic"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$TopLevel"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Statement"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Class"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Expression"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$Comment"/>
    <liveTemplateContext implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinTemplateContextType$ObjectDeclaration"/>
    <defaultLiveTemplatesProvider implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinLiveTemplatesProvider"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.AnyVariableMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.SuitableVariableMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.FunctionParametersMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.AnonymousSuperMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.SuggestVariableNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinClassNameMacro"/>
    <liveTemplateMacro implementation="org.jetbrains.kotlin.idea.liveTemplates.macro.KotlinFunctionNameMacro"/>
    <liveTemplateOptionalProcessor implementation="org.jetbrains.kotlin.idea.liveTemplates.KotlinShortenFQNamesProcessor"/>

    <annotator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinPsiCheckerAndHighlightingUpdater"/>
    <highlightRangeExtension implementation="org.jetbrains.kotlin.idea.highlighter.KotlinPsiChecker"/>
    <daemon.changeLocalityDetector implementation="org.jetbrains.kotlin.idea.highlighter.KotlinChangeLocalityDetector"/>

    <annotator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.DebugInfoAnnotator"/>
    <annotator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.DuplicateJvmSignatureAnnotator"/>
    <annotator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.PlatformExpectedAnnotator"/>
    <problemHighlightFilter implementation="org.jetbrains.kotlin.idea.highlighter.KotlinProblemHighlightFilter"/>

    <highlightVisitor implementation="org.jetbrains.kotlin.idea.highlighter.KotlinRainbowVisitor"/>

    <annotator language="JAVA" implementationClass="org.jetbrains.kotlin.idea.java.UnimplementedKotlinInterfaceMemberAnnotator"/>

    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinStatementGroupSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinCodeBlockSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinDocCommentSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinDeclarationSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinListSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinStringLiteralSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinInvokedExpressionSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinTypeSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinSuperTypeSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinBracketsSelectioner"/>
    <basicWordSelectionFilter implementation="org.jetbrains.kotlin.idea.editor.wordSelection.KotlinWordSelectionFilter"/>

    <typedHandler implementation="org.jetbrains.kotlin.idea.editor.KotlinTypedHandler"/>
    <typedHandler implementation="org.jetbrains.kotlin.idea.kdoc.KDocTypedHandler"/>
    <enterHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinEnterHandler"
                          id="KotlinEnterHandler" order="before EnterBetweenBracesHandler"/>
    <enterHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinMultilineStringEnterHandler"
                          id="KotlinMultilineStringEnterHandler" order="before EnterBetweenBracesHandler"/>
    <lang.smartEnterProcessor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.editor.KotlinSmartEnterHandler"/>
    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinBackspaceHandler"/>
    <backspaceHandlerDelegate implementation="org.jetbrains.kotlin.idea.editor.KotlinStringTemplateBackspaceHandler"/>

    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.conversion.copy.ConvertJavaCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.conversion.copy.ConvertTextJavaCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinCopyPasteReferenceProcessor"/>
    <copyPastePreProcessor implementation="org.jetbrains.kotlin.idea.editor.KotlinLiteralCopyPasteProcessor"/>
    <copyPastePostProcessor implementation="org.jetbrains.kotlin.idea.refactoring.cutPaste.MoveDeclarationsCopyPasteProcessor"/>

    <breadcrumbsInfoProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinBreadcrumbsInfoProvider"/>

    <lang.documentationProvider language="JAVA" implementationClass="org.jetbrains.kotlin.idea.KotlinQuickDocumentationProvider" order="first"/>
    <documentationProvider implementation="org.jetbrains.kotlin.idea.KotlinQuickDocumentationProvider"/>
    <configurationType implementation="org.jetbrains.kotlin.idea.run.KotlinRunConfigurationType"/>
    <configurationType implementation="org.jetbrains.kotlin.idea.run.script.standalone.KotlinStandaloneScriptRunConfigurationType"/>
    <configurationType implementation="org.jetbrains.kotlin.idea.k2jsrun.K2JSRunConfigurationType"/>
    <programRunner implementation="org.jetbrains.kotlin.idea.k2jsrun.K2JSBrowserProgramRunner"/>
    <runConfigurationProducer implementation="org.jetbrains.kotlin.idea.run.KotlinRunConfigurationProducer"/>
    <runConfigurationProducer implementation="org.jetbrains.kotlin.idea.run.script.standalone.KotlinStandaloneScriptRunConfigurationProducer"/>

    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.markers.KotlinLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinRecursiveCallLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinSuspendCallLineMarkerProvider"/>
    <runLineMarkerContributor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinRunLineMarkerContributor"/>
    <runLineMarkerContributor language="kotlin" implementationClass="org.jetbrains.kotlin.idea.highlighter.KotlinTestRunLineMarkerContributor"/>

    <iconProvider implementation="org.jetbrains.kotlin.idea.KotlinIconProvider"/>

    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtFunctionPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtFunction"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtClass"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtObjectDeclaration"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtProperty"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtParameter"/>
    <itemPresentationProvider implementationClass="org.jetbrains.kotlin.idea.presentation.KtDefaultDeclarationPresenter"
                              forClass="org.jetbrains.kotlin.psi.KtTypeAlias"/>

    <gotoTargetRendererProvider id="JetGotoTargetRenderProvider" implementation="org.jetbrains.kotlin.idea.KotlinGotoTargetRenderProvider"
                                order="first"/>
    <elementDescriptionProvider
        implementation="org.jetbrains.kotlin.idea.findUsages.KotlinElementDescriptionProvider"
        order="first"/>
    <elementDescriptionProvider
        implementation="org.jetbrains.kotlin.idea.findUsages.KotlinNonCodeSearchElementDescriptionProvider"/>
    <highlightUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.highlighter.KotlinHighlightExitPointsHandlerFactory"/>
    <highlightUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.highlighter.KotlinHighlightImplicitItHandlerFactory"/>
    <findUsagesHandlerFactory implementation="org.jetbrains.kotlin.idea.findUsages.KotlinFindUsagesHandlerFactory"/>
    <usageTypeProvider implementation="org.jetbrains.kotlin.idea.findUsages.KotlinUsageTypeProvider"/>

    <refactoring.safeDeleteProcessor
        id="kotlinProcessor"
        implementation="org.jetbrains.kotlin.idea.refactoring.safeDelete.KotlinSafeDeleteProcessor"
        order="before javaProcessor"/>
    <refactoring.safeDelete.JavaSafeDeleteDelegate
        id="kotlinJavaSafeDeleteDelegate"
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.safeDelete.KotlinJavaSafeDeleteDelegate"/>
    <debugger.jvmSmartStepIntoHandler implementation="org.jetbrains.kotlin.idea.debugger.stepping.KotlinSmartStepIntoHandler"/>
    <debugger.positionManagerFactory implementation="org.jetbrains.kotlin.idea.debugger.KotlinPositionManagerFactory"/>
    <debugger.codeFragmentFactory implementation="org.jetbrains.kotlin.idea.debugger.evaluate.KotlinCodeFragmentFactory"/>
    <debuggerEditorTextProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.debugger.KotlinEditorTextProvider"/>
    <debuggerClassFilterProvider implementation="org.jetbrains.kotlin.idea.debugger.filter.KotlinDebuggerInternalClassesFilterProvider"/>
    <debugger.nodeRenderer implementation="org.jetbrains.kotlin.idea.debugger.render.KotlinClassWithDelegatedPropertyRenderer"/>
    <debugger.sourcePositionProvider implementation="org.jetbrains.kotlin.idea.debugger.KotlinSourcePositionProvider"/>
    <debugger.sourcePositionHighlighter implementation="org.jetbrains.kotlin.idea.debugger.KotlinSourcePositionHighlighter"/>
    <debugger.frameExtraVarsProvider implementation="org.jetbrains.kotlin.idea.debugger.KotlinFrameExtraVariablesProvider"/>
    <debugger.extraSteppingFilter implementation="org.jetbrains.kotlin.idea.KotlinExtraSteppingFilter"/>
    <xdebugger.settings implementation="org.jetbrains.kotlin.idea.debugger.KotlinDebuggerSettings"/>
    <xdebugger.breakpointType implementation="org.jetbrains.kotlin.idea.debugger.breakpoints.KotlinFieldBreakpointType"/>
    <xdebugger.breakpointType implementation="org.jetbrains.kotlin.idea.debugger.breakpoints.KotlinLineBreakpointType" order="first"/>
    <debugger.syntheticProvider implementation="org.jetbrains.kotlin.idea.debugger.filter.KotlinSyntheticTypeComponentProvider"/>
    <debugger.javaBreakpointHandlerFactory implementation="org.jetbrains.kotlin.idea.debugger.breakpoints.KotlinFieldBreakpointHandlerFactory"/>
    <debugger.javaBreakpointHandlerFactory implementation="org.jetbrains.kotlin.idea.debugger.breakpoints.KotlinLineBreakpointHandlerFactory"/>
    <debugger.jvmSteppingCommandProvider implementation="org.jetbrains.kotlin.idea.debugger.stepping.KotlinSteppingCommandProvider"/>
    <debugger.simplePropertyGetterProvider implementation="org.jetbrains.kotlin.idea.debugger.stepping.KotlinSimpleGetterProvider"/>

    <codeInsight.implementMethod language="kotlin" implementationClass="org.jetbrains.kotlin.idea.core.overrideImplement.ImplementMembersHandler"/>
    <codeInsight.overrideMethod language="kotlin" implementationClass="org.jetbrains.kotlin.idea.core.overrideImplement.OverrideMembersHandler"/>

    <framework.type implementation="org.jetbrains.kotlin.idea.framework.JavaFrameworkType"/>
    <framework.type implementation="org.jetbrains.kotlin.idea.framework.JSFrameworkType"/>
    <projectTemplatesFactory implementation="org.jetbrains.kotlin.idea.framework.KotlinTemplatesFactory" />

    <library.presentationProvider implementation="org.jetbrains.kotlin.idea.framework.JavaRuntimePresentationProvider"/>

    <library.javaSourceRootDetector implementation="org.jetbrains.kotlin.idea.configuration.KotlinSourceRootDetector"/>

    <typeHierarchyProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProviderBySuperTypeCallEntry"/>
    <typeHierarchyProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProvider"/>
    <typeHierarchyProvider language="JAVA" implementationClass="org.jetbrains.kotlin.idea.hierarchy.KotlinTypeHierarchyProviderBySuperTypeCallEntry" order="last"/>
    <callHierarchyProvider
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.hierarchy.calls.KotlinCallHierarchyProvider" />
    <hierarchy.referenceProcessor implementation="org.jetbrains.kotlin.idea.hierarchy.calls.KotlinCallReferenceProcessor"/>
    <methodHierarchyProvider
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.hierarchy.overrides.KotlinOverrideHierarchyProvider" />

    <java.elementFinder implementation="org.jetbrains.kotlin.asJava.finder.JavaElementFinder"/>
    <java.elementFinder implementation="org.jetbrains.kotlin.idea.core.script.KotlinScriptDependenciesClassFinder"/>
    <java.shortNamesCache implementation="org.jetbrains.kotlin.idea.caches.KotlinShortNamesCache"/>

    <stubElementTypeHolder class="org.jetbrains.kotlin.psi.stubs.elements.KtStubElementTypes"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinExactPackagesIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelClassByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelFunctionByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelPropertyByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelTypeAliasByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinClassShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFullClassNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinPropertyShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFunctionShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTypeAliasShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinSuperClassIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelFunctionFqnNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelPropertyFqnNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelTypeAliasFqNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTopLevelExtensionsByReceiverTypeIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinAnnotationsIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinProbablyNothingFunctionShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinProbablyNothingPropertyShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFileFacadeFqNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFilePartClassIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFileFacadeClassByPackageIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinFileFacadeShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinMultifileClassPartIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinScriptFqnIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinTypeAliasByExpansionShortNameIndex"/>
    <stubIndex implementation="org.jetbrains.kotlin.idea.stubindex.KotlinOverridableInternalMembersShortNameIndex"/>

    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.classFile.KotlinClassFileDecompiler"/>
    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.js.KotlinJavaScriptMetaFileDecompiler"/>
    <psi.classFileDecompiler implementation="org.jetbrains.kotlin.idea.decompiler.builtIns.KotlinBuiltInDecompiler"/>

    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.versions.KotlinJvmMetadataVersionIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.versions.KotlinJsMetadataVersionIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinClassFileIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinJavaScriptMetaFileIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinMetadataFileIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinMetadataFilePackageIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinModuleMappingIndex"/>
    <fileBasedIndex implementation="org.jetbrains.kotlin.idea.vfilefinder.KotlinPackageSourcesMemberNamesIndex"/>

    <idIndexer filetype="Kotlin" implementationClass="org.jetbrains.kotlin.idea.search.KotlinIdIndexer"/>
    <todoIndexer filetype="Kotlin" implementationClass="org.jetbrains.kotlin.idea.search.KotlinTodoIndexer"/>
    <indexPatternBuilder implementation="org.jetbrains.kotlin.idea.search.KotlinIndexPatternBuilder"/>

    <editorNotificationProvider implementation="org.jetbrains.kotlin.idea.versions.UnsupportedAbiVersionNotificationPanelProvider"/>
    <editorNotificationProvider implementation="org.jetbrains.kotlin.idea.configuration.KotlinSetupEnvironmentNotificationProvider"/>

    <attachSourcesProvider implementation="org.jetbrains.kotlin.idea.actions.DecompileKotlinToJavaActionProvider"/>

    <referencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinReferencesSearcher"/>
    <directClassInheritorsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinDirectInheritorsSearcher"/>
    <overridingMethodsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinOverridingMethodsWithGenericsSearcher"/>
    <definitionsScopedSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinDefinitionsSearcher"/>
    <annotatedElementsSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinAnnotatedElementsSearcher"/>
    <classesWithAnnotatedMembersSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinClassesWithAnnotatedMembersSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinPropertyAccessorsReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinConstructorDelegationCallReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinOverridingMethodReferenceSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinConventionMethodReferencesSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.DefaultAnnotationMethodKotlinImplicitReferenceSearcher"/>

    <readWriteAccessDetector implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinReadWriteAccessDetector" id="kotlin"/>

    <exceptionFilter implementation="org.jetbrains.kotlin.idea.filters.KotlinExceptionFilterFactory" order="first"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.editor.KotlinEditorOptions"
                        serviceImplementation="org.jetbrains.kotlin.idea.editor.KotlinEditorOptions"/>
    <editorSmartKeysConfigurable instance="org.jetbrains.kotlin.idea.editor.KotlinEditorOptionsConfigurable"/>

    <applicationService serviceInterface="org.jetbrains.kotlin.idea.refactoring.KotlinRefactoringSettings"
                        serviceImplementation="org.jetbrains.kotlin.idea.refactoring.KotlinRefactoringSettings"/>

    <statementUpDownMover id="jetExpression"
                          implementation="org.jetbrains.kotlin.idea.codeInsight.upDownMover.KotlinExpressionMover"
                          order="before declaration" />

    <statementUpDownMover id="jetDeclaration"
                          implementation="org.jetbrains.kotlin.idea.codeInsight.upDownMover.KotlinDeclarationMover"
                          order="before jetExpression" />

    <moveLeftRightHandler language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinMoveLeftRightHandler"/>

    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinDeclarationAndAssignmentHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinBlockIntoSingleStatementHandler"/>
    <joinLinesHandler implementation="org.jetbrains.kotlin.idea.joinLines.JoinStatementsAddSemicolonHandler"/>

    <targetElementEvaluator
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinTargetElementEvaluator" />

    <targetElementUtilExtender implementation="org.jetbrains.kotlin.idea.search.ideaExtensions.KotlinTargetElementEvaluator"/>

    <refactoring.pullUpHelperFactory
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.pullUp.KotlinPullUpHelperFactory"/>
    <refactoring.pullUpHelperFactory
        language="JAVA"
        order="first"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.pullUp.JavaToKotlinPullUpHelperFactory"/>

    <lang.refactoringSupport.classMembersRefactoringSupport
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.memberInfo.KotlinClassMembersRefactoringSupport"/>

    <refactoring.pushDown
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.refactoring.pushDown.JavaToKotlinPushDownDelegate"/>

    <problemFileHighlightFilter implementation="org.jetbrains.kotlin.idea.projectView.KotlinProblemFileHighlightFilter"/>

    <consoleFilterProvider implementation="org.jetbrains.kotlin.idea.run.KotlinConsoleFilterProvider"/>

    <codeInsight.typeInfo language="kotlin" implementationClass="org.jetbrains.kotlin.idea.codeInsight.KotlinExpressionTypeProvider"/>

    <testCreator language="kotlin" implementationClass="org.jetbrains.kotlin.idea.testIntegration.KotlinTestCreator"/>
    <testFinder implementation="org.jetbrains.kotlin.idea.testIntegration.KotlinTestFinder"/>

    <constantExpressionEvaluator
        language="kotlin"
        implementationClass="org.jetbrains.kotlin.idea.KotlinLightConstantExpressionEvaluator"/>

    <annotationSupport language="kotlin" implementationClass="com.intellij.psi.impl.source.tree.java.JavaAnnotationSupport"/>

    <createFromTemplateHandler implementation="org.jetbrains.kotlin.idea.actions.KotlinCreateFromTemplateHandler"/>

    <nameSuggestionProvider implementation="org.jetbrains.kotlin.idea.core.KotlinNameSuggestionProvider"/>

    <usageToPsiElementProvider implementation="org.jetbrains.kotlin.idea.codeInsight.KotlinUsageToPsiElementProvider"/>

    <facetType implementation="org.jetbrains.kotlin.idea.facet.KotlinFacetType"/>

    <lang.sliceProvider language="kotlin" implementationClass="org.jetbrains.kotlin.idea.slicer.KotlinSliceProvider"/>

    <usageContextPanelProvider implementation="org.jetbrains.kotlin.idea.slicer.KotlinUsageContextDataInflowPanel$Provider"/>
    <usageContextPanelProvider implementation="org.jetbrains.kotlin.idea.slicer.KotlinUsageContextDataOutflowPanel$Provider"/>

    <library.type implementation="org.jetbrains.kotlin.idea.framework.JSLibraryType"/>
    <library.type implementation="org.jetbrains.kotlin.idea.framework.CommonLibraryType"/>

    <gotoRelatedProvider implementation="org.jetbrains.kotlin.idea.goto.KotlinExpectOrActualGotoRelatedProvider"/>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.FoldInitializerAndIfToElvisIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SimplifyAssertNotNullIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImportMemberIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImportAllMembersIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SpecifyTypeExplicitlyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitTypeIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToBlockBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceGetOrSetIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceContainsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceInvokeIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceCallWithUnaryOperatorIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceCallWithBinaryOperatorIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.FoldIfToReturnAsymmetricallyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldAssignmentToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldPropertyToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldAssignmentToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldPropertyToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldReturnToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.UnfoldReturnToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.DoubleBangToIfThenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.IfThenToDoubleBangIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.ElvisToIfThenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.SafeAccessToIfThenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.IfToWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.WhenToIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.FlattenWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.IntroduceWhenSubjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.EliminateWhenSubjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.MergeWhenIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SimplifyNegatedBinaryExpressionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveUnnecessaryParenthesesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitTypeArgumentsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitSuperQualifierIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveCurlyBracesFromTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InsertCurlyBracesToTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveLambdaInsideParenthesesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InsertExplicitTypeArgumentsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveLambdaOutsideParenthesesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.declarations.SplitPropertyDeclarationIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.declarations.ConvertMemberToExtensionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReconstructTypeInCastOrIsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InfixCallToOrdinaryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ToInfixCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceExplicitFunctionLiteralParamWithItIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceItWithExplicitFunctionLiteralParamIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSubstringWithDropLastIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSubstringWithSubstringAfterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSubstringWithSubstringBeforeIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSubstringWithTakeIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveBracesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddBracesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertNegatedBooleanSequenceIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertBinaryExpressionWithDemorgansLawIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SimplifyBooleanWithConstantsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddForLoopIndicesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveForLoopIndicesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.loopToCallChain.LoopToCallChainIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.loopToCallChain.LoopToLazyCallChainIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.loopToCallChain.UseWithIndexIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SwapBinaryExpressionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SwapStringEqualsIgnoreCaseIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SplitIfIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceWithOperatorAssignmentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceWithOrdinaryAssignmentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertAssertToIfWithThrowIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertIfWithThrowToAssertIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.SpecifyExplicitLambdaSignatureIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveExplicitLambdaParameterTypesIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertForEachToForLoopIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToForEachFunctionCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToStringTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToRawStringTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.OperatorToFunctionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToConcatenatedStringIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertFunctionToPropertyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertPropertyToFunctionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertReceiverToParameterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertParameterToReceiverIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertPropertyInitializerToGetterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.InvertIfConditionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.refactoring.move.changePackage.ChangePackageIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.refactoring.move.changePackage.MoveFileToPackageMatchingDirectoryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.refactoring.move.changePackage.ChangePackageToMatchDirectoryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.refactoring.move.moveDeclarations.MoveDeclarationToSeparateFileIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Public</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Private</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Protected</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChangeVisibilityModifierIntention$Internal</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.DeprecatedCallableAddReplaceWithIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddNameToArgumentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceUnderscoreWithParameterNameIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddJvmOverloadsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddJvmStaticIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveArgumentNameIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IterateExpressionIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.UsePropertyAccessSyntaxIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.quickfix.AddConstModifierIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IntroduceBackingPropertyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.JoinDeclarationAndAssignmentIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.testIntegration.KotlinCreateTestIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddOperatorModifierIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ObjectLiteralToLambdaIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.DestructureIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AnonymousFunctionToLambdaIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImplementAbstractMemberIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ImplementAbstractMemberAsConstructorParameterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddValVarToConstructorParameterAction$Intention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveMemberToCompanionObjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveMemberOutOfCompanionObjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.CreateKotlinSubClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ToRawStringLiteralIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ToOrdinaryStringLiteralIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.IntroduceVariableIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveSingleExpressionStringTemplateIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceUntilWithRangeToIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptyParenthesesFromLambdaCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceArrayEqualityOpWithArraysEqualsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertCamelCaseTestFunctionToSpacedIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSingleLineLetIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.copyConcatenatedStringToClipboard.CopyConcatenatedStringToClipboardIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceMathMaxWithCoerceAtLeastIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceMathMinWithCoerceAtMostIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertPrimaryConstructorToSecondaryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertSecondaryConstructorToPrimaryIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSizeCheckWithIsNotEmptyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceSizeZeroCheckWithIsEmptyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptyClassBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertEnumToSealedClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertSealedClassToEnumIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveRedundantCallsOfConversionMethodsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptyPrimaryConstructorIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RemoveEmptySecondaryConstructorBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertTryFinallyToUseCallIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddNamesToCallArgumentsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertFunctionTypeParameterToReceiverIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertFunctionTypeReceiverToParameterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertTwoComparisonsToRangeCheckIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertRangeCheckToTwoComparisonsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.RenameFileToMatchClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertObjectLiteralToClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MergeIfsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddMissingDestructuringIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToApplyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToWithIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertToRunIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MovePropertyToClassBodyIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MovePropertyToConstructorIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddOpenModifierIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ValToObjectIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChopParameterListIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ChopArgumentListIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.NullableBooleanEqualityCheckToElvisIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ReplaceAddWithPlusAssignIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.ConvertClassToSealedClassIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddPropertyAccessorsIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddPropertyGetterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.AddPropertySetterIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <intentionAction>
      <className>org.jetbrains.kotlin.idea.intentions.MoveMemberToTopLevelIntention</className>
      <category>Kotlin</category>
    </intentionAction>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ObjectLiteralToLambdaInspection"
                     displayName="Object literal can be converted to lambda"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.SimplifyAssertNotNullInspection"
                     displayName="‘assert’ call can be replaced with ‘!!’ or ‘?:'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReformatInspection"
                     displayName="File is not formatted according to project settings"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.DeprecatedCallableAddReplaceWithInspection"
                     displayName="@Deprecated annotation without 'replaceWith' argument"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertToStringTemplateInspection"
                     displayName="String concatenation that can be converted to string template"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceGetOrSetInspection"
                     displayName="Explicit 'get' or 'set' call"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.IfThenToElvisInspection"
                     displayName="If-Then foldable to '?:'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.IfThenToSafeAccessInspection"
                     displayName="If-Then foldable to '?.'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.FoldInitializerAndIfToElvisInspection"
                     displayName="If-Null return/break/... foldable to '?:'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveExplicitTypeArgumentsInspection"
                     displayName="Unnecessary type argument"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveExplicitSuperQualifierInspection"
                     displayName="Unnecessary supertype qualification"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.SimplifyNegatedBinaryExpressionInspection"
                     displayName="Negated boolean expression that can be simplified"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ReplaceWithOperatorAssignmentInspection"
                     displayName="Assignment that can be replaced with operator assignment"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.branchedTransformations.intentions.IntroduceWhenSubjectInspection"
                     displayName="'when' that can be simplified by introducing an argument"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveCurlyBracesFromTemplateInspection"
                     displayName="Redundant curly braces in string template"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.SimplifyBooleanWithConstantsInspection"
                     displayName="Boolean expression that can be simplified"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.UsePropertyAccessSyntaxInspection"
                     displayName="Accessor call that can be replaced with property access syntax"
                     shortName="UsePropertyAccessSyntax"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     cleanupTool="true"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedSymbolInspection"
                     displayName="Unused symbol"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     runForWholeFile="true"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedReceiverParameterInspection"
                     displayName="Unused receiver parameter"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinUnusedImportInspection"
                     displayName="Unused import directive"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     runForWholeFile="true"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSamConstructorInspection"
                     displayName="Redundant SAM constructor"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnsafeCastFromDynamicInspection"
                     displayName="Implicit (unsafe) cast from dynamic type"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.OverridingDeprecatedMemberInspection"
                     shortName="OverridingDeprecatedMember"
                     displayName="Overriding deprecated member"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.kdoc.KDocUnresolvedReferenceInspection"
                     displayName="Unresolved reference in KDoc"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.kdoc.KDocMissingDocumentationInspection"
                     displayName="Missing KDoc comments for public declarations"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="false"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.refactoring.move.changePackage.PackageDirectoryMismatchInspection"
                     displayName="Package name does not match containing directory"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinCleanupInspection"
                     shortName="KotlinDeprecation"
                     displayName="Usage of redundant or deprecated syntax or deprecated symbols"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveForLoopIndicesInspection"
                     displayName="Unused loop index"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.loopToCallChain.LoopToCallChainInspection"
                     displayName="Loop can be replaced with stdlib operations"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.loopToCallChain.UseWithIndexInspection"
                     displayName="Manually incremented index variable can be replaced with use of 'withIndex()'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConflictingExtensionPropertyInspection"
                     displayName="Extension property conflicting with synthetic one"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.EqualsOrHashCodeInspection"
                     displayName="equals() and hashCode() not paired"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantVisibilityModifierInspection"
                     displayName="Redundant visibility modifier"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.DestructureInspection"
                     displayName="Use destructuring declaration"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="false"
                     cleanupTool="false"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CanBeValInspection"
                     displayName="Local 'var' is never modified and can be declared as 'val'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ArrayInDataClassInspection"
                     displayName="Array property in data class"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ProtectedInFinalInspection"
                     displayName="'protected' visibility is effectively 'private' in a final class"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.AddVarianceModifierInspection"
                     displayName="Type parameter can have 'in' or 'out' variance"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CanBeParameterInspection"
                     displayName="Constructor parameter is never used as a property"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantModalityModifierInspection"
                     displayName="Redundant modality modifier"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSemicolonInspection"
                     displayName="Redundant semicolon"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantUnitReturnTypeInspection"
                     displayName="Redundant 'Unit' return type"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantIfInspection"
                     displayName="Redundant 'if' statement"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.LeakingThisInspection"
                     displayName="Leaking 'this' in constructor"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.HasPlatformTypeInspection"
                     displayName="Function or property has platform type"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CanBePrimaryConstructorPropertyInspection"
                     displayName="Property is explicitly assigned to constructor parameter"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertLambdaToReferenceInspection"
                     displayName="Can be replaced with function reference"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertReferenceToLambdaInspection"
                     displayName="Can be replaced with lambda"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveSetterParameterTypeInspection"
                     displayName="Redundant setter parameter type"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.conventionNameCalls.ReplaceCallWithComparisonInspection"
                     displayName="Can be replaced with comparison"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveSingleExpressionStringTemplateInspection"
                     displayName="Remove redundant string template"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveToStringInStringTemplateInspection"
                     displayName="Remove redundant call to 'toString()' in string template"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptyParenthesesFromLambdaCallInspection"
                     displayName="Remove unnecessary parentheses from function call with lambda"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ReplaceArrayEqualityOpWithArraysEqualsInspection"
                     displayName="Replace '==' with 'Arrays.equals'"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ReplaceSingleLineLetInspection"
                     displayName="Replace single line .let"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertSecondaryConstructorToPrimaryInspection"
                     displayName="Convert to primary constructor"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ReplaceSizeCheckWithIsNotEmptyInspection"
                     displayName="Replace size check with 'isNotEmpty()'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ReplaceSizeZeroCheckWithIsEmptyInspection"
                     displayName="Replace size zero check with 'isEmpty()'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptyClassBodyInspection"
                     displayName="Replace empty class body"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveRedundantCallsOfConversionMethodsInspection"
                     displayName="Remove redundant calls of conversion methods"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptyPrimaryConstructorInspection"
                     displayName="Remove empty primary constructor"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.RemoveEmptySecondaryConstructorBodyInspection"
                     displayName="Remove empty constructor body"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.JoinDeclarationAndAssignmentInspection"
                     displayName="Join declaration and assignment"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertTryFinallyToUseCallInspection"
                     displayName="Convert try / finally to use() call"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.intentions.ConvertTwoComparisonsToRangeCheckInspection"
                     displayName="Convert two comparisons to 'in'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedEqualsInspection"
                     displayName="Unused equals expression"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.DataClassPrivateConstructorInspection"
                     displayName="Private data class constructor is exposed via the 'copy' method"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.DestructuringWrongNameInspection"
                     displayName="Variable in destructuring declaration uses name of a wrong data class property"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnusedLambdaExpressionBodyInspection"
                     displayName="Unused return value of a function with lambda expression body"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinInternalInJavaInspection"
                     displayName="Usage of Kotlin internal declarations from Java"
                     groupPath="Kotlin"
                     groupName="Java interop issues"
                     enabledByDefault="true"
                     level="ERROR"
                     language="JAVA"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MoveSuspiciousCallableReferenceIntoParenthesesInspection"
                     displayName="Suspicious callable reference used as lambda result"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CopyWithoutNamedArgumentsInspection"
                     displayName="'copy' method of data class is called without named arguments"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceArrayOfWithLiteralInspection"
                     displayName="'arrayOf' call can be replaced with array literal [...]"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RecursivePropertyAccessorInspection"
                     displayName="Recursive property accessor"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplaceRangeToWithUntilInspection"
                     displayName="'rangeTo' or the '..' call can be replaced with 'until'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MemberVisibilityCanPrivateInspection"
                     displayName="Class member can have 'private' visibility"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.NullableBooleanElvisInspection"
                     displayName="Equality check can be used instead of elvis for nullable boolean check"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.WrapUnaryOperatorInspection"
                     displayName="Ambiguous unary operator use with number constant"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.EmptyRangeInspection"
                     displayName="Range with start greater than endInclusive is empty"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RemoveRedundantSpreadOperatorInspection"
                     displayName="Redundant spread operator"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.UselessCallOnNotNullInspection"
                     displayName="Useless call on not-null type"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantExplicitTypeInspection"
                     displayName="Explicitly given type is redundant here"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.UselessCallOnCollectionInspection"
                     displayName="Useless call on collection type"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.collections.SimplifiableCallChainInspection"
                     displayName="Call chain on collection type can be simplified"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UseExpressionBodyInspection"
                     displayName="Expression body syntax is preferable here"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.LiftReturnOrAssignmentInspection"
                     displayName="Return or assignment can be lifted out"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.CascadeIfInspection"
                     displayName="Cascade if can be replaced with when"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFO"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.NullChecksToSafeCallInspection"
                     displayName="Null-checks replaceable with safe-calls"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConstantConditionIfInspection"
                     displayName="Condition of 'if' expression is constant"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.UnnecessaryVariableInspection"
                     displayName="Unnecessary local variable"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinDoubleNegationInspection"
                     displayName="Redundant double negation"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.WhenWithOnlyElseInspection"
                     displayName="'when' has only 'else' branch and can be simplified"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantLambdaArrowInspection"
                     displayName="Redundant lambda arrow"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ClassNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Class naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.EnumEntryNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Enum entry naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.FunctionNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Function naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Property naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ObjectPropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Object property naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PrivatePropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Private property naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ConstPropertyNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Const property naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.LocalVariableNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Local variable naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.PackageNameInspection"
                     language="kotlin"
                     groupPath="Kotlin"
                     groupName="Naming conventions"
                     enabledByDefault="true"
                     displayName="Package naming convention"
                     level="WEAK WARNING"/>

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.KotlinRedundantOverrideInspection"
                     displayName="Redundant override"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SuspiciousEqualsCombination"
                     displayName="Suspicious combination of == and ==="
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantGetterInspection"
                     displayName="Redundant property getter"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSetterInspection"
                     displayName="Redundant property setter"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.MigrateDiagnosticSuppressionInspection"
                     displayName="Diagnostic name should be replaced"
                     groupPath="Kotlin"
                     groupName="Other problems"
                     enabledByDefault="true"
                     cleanupTool="true"
                     level="WARNING"
                     language="kotlin"
    />

	<localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ExplicitThisInspection"
                     displayName="Redundant explicit 'this'"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
    />


    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ImplicitThisInspection"
                     displayName="Implicit 'this'"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="INFORMATION"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantUnitExpressionInspection"
                     displayName="Redundant 'Unit'"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SelfAssignmentInspection"
                     displayName="Assignment of variable to itself"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ImplicitNullableNothingTypeInspection"
                     displayName="Implicit `Nothing?` type"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.SimplifyWhenWithBooleanConstantConditionInspection"
                     displayName="Simplifiable 'when'"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />


    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RecursiveEqualsCallInspection"
                     displayName="Recursive equals call"
                     groupPath="Kotlin"
                     groupName="Probable bugs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.ReplacePutWithAssignmentInspection"
                     displayName="map.put() can be converted to assignment"
                     groupPath="Kotlin"
                     groupName="Style issues"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     language="kotlin"
    />

    <localInspection implementationClass="org.jetbrains.kotlin.idea.inspections.RedundantSuspendModifierInspection"
                     displayName="Redundant 'suspend' modifier"
                     groupPath="Kotlin"
                     groupName="Redundant constructs"
                     enabledByDefault="true"
                     level="WARNING"
                     language="kotlin"
    />

    <referenceImporter implementation="org.jetbrains.kotlin.idea.quickfix.KotlinReferenceImporter"/>

    <fileType.fileViewProviderFactory filetype="KJSM" implementationClass="com.intellij.psi.ClassFileViewProviderFactory"/>
    <filetype.stubBuilder filetype="KJSM" implementationClass="com.intellij.psi.impl.compiled.ClassFileStubBuilder"/>
    <filetype.decompiler filetype="KJSM" implementationClass="com.intellij.psi.impl.compiled.ClassFileDecompiler"/>

    <fileType.fileViewProviderFactory filetype="kotlin_builtins" implementationClass="com.intellij.psi.ClassFileViewProviderFactory"/>
    <filetype.stubBuilder filetype="kotlin_builtins" implementationClass="com.intellij.psi.impl.compiled.ClassFileStubBuilder"/>
    <filetype.decompiler filetype="kotlin_builtins" implementationClass="com.intellij.psi.impl.compiled.ClassFileDecompiler"/>

    <pathMacroExpandableProtocol protocol="kotlin-js-meta"/>

    <deadCode implementation="org.jetbrains.kotlin.idea.inspections.KotlinJUnitStaticEntryPoint"/>

    <externalSystemTaskNotificationListener implementation="org.jetbrains.kotlin.idea.configuration.KotlinExternalSystemSyncListener"/>

    <!--kotlin script specific extensions-->
    <java.shortNamesCache implementation="org.jetbrains.kotlin.idea.core.script.dependencies.JavaClassesInScriptDependenciesShortNameCache"/>
    <indexedRootsProvider implementation="org.jetbrains.kotlin.idea.core.script.dependencies.KotlinScriptDependenciesIndexableSetContributor"/>
    <psi.clsCustomNavigationPolicy implementation="org.jetbrains.kotlin.idea.core.script.dependencies.ScriptDependencySourceNavigationPolicyForJavaClasses"/>
    <resolveScopeProvider implementation="org.jetbrains.kotlin.idea.core.script.dependencies.KotlinScriptResolveScopeProvider"/>
    <resolveScopeProvider implementation="org.jetbrains.kotlin.idea.core.script.dependencies.ScriptDependenciesResolveScopeProvider"/>

    <codeInsight.intention.jvmCommonIntentionActionsFactory language="kotlin" implementationClass="org.jetbrains.kotlin.idea.intentions.KotlinCommonIntentionActionsFactory"/>

    <projectService serviceInterface="org.jetbrains.uast.kotlin.KotlinUastBindingContextProviderService"
                  serviceImplementation="org.jetbrains.uast.kotlin.internal.IdeaKotlinUastBindingContextProviderService"/>
  </extensions>

  <extensions defaultExtensionNs="org.jetbrains.uast">
    <uastLanguagePlugin implementation="org.jetbrains.uast.kotlin.KotlinUastLanguagePlugin"/>
  </extensions>

  <xi:include href="tipsAndTricks.xml" xpointer="xpointer(/idea-plugin/*)"/>

  <xi:include href="extensions/ide.xml" xpointer="xpointer(/idea-plugin/*)"/>

  <extensionPoints>
    <xi:include href="extensions/compiler.xml" xpointer="xpointer(/idea-plugin/extensionPoints/*)"/>
  </extensionPoints>

  <extensions defaultExtensionNs="org.jetbrains.kotlin">
    <quickFixContributor implementation="org.jetbrains.kotlin.idea.quickfix.QuickFixRegistrar"/>

    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameKotlinImplicitLambdaParameter"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameDynamicMemberHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameOnSecondaryConstructorHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameJavaSyntheticPropertyHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.JavaMemberByKotlinReferenceInplaceRenameHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameJvmNameHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameBackingFieldReferenceHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameClassByCompanionObjectShortReferenceHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameByLabeledReferenceInLambdaArgumentHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.RenameImportAliasByReferenceHandler"/>
    <renameHandler implementation="org.jetbrains.kotlin.idea.refactoring.rename.KotlinMemberInplaceRenameHandler"/>

    <declarationAttributeAltererExtension implementation="org.jetbrains.kotlin.allopen.ide.IdeAllOpenDeclarationAttributeAltererExtension"/>

    <storageComponentContainerContributor implementation="org.jetbrains.kotlin.samWithReceiver.ide.IdeSamWithReceiverComponentContributor"/>

    <expressionCodegenExtension implementation="org.jetbrains.kotlin.noarg.NoArgExpressionCodegenExtension"/>
    <storageComponentContainerContributor implementation="org.jetbrains.kotlin.noarg.ide.IdeNoArgComponentContainerContributor"/>
    <versionInfoProvider implementation="org.jetbrains.kotlin.idea.facet.KotlinVersionInfoProviderByModuleDependencies"/>
  </extensions>

</idea-plugin>
