FILE: [ResolvedTo(BODY_RESOLVE)] dataClassWithAnnotations.kt
    @<ERROR TYPE REF: Symbol not found for Anno>[Types]() public final data [ResolvedTo(ANNOTATION_ARGUMENTS)] class Derived : @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for Base> {
        @<ERROR TYPE REF: Symbol not found for Anno>[Types]() public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Derived] constructor([ResolvedTo(ANNOTATION_ARGUMENTS)] [CorrespondingProperty=/Derived.b] @<ERROR TYPE REF: Symbol not found for Anno>[Types]() @CONSTRUCTOR_PARAMETER:<ERROR TYPE REF: Symbol not found for Anno>[Types]() b: @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for B>, [ResolvedTo(ANNOTATION_ARGUMENTS)] [CorrespondingProperty=/Derived.c] c: @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for C>): R|Derived| {
            LAZY_super<@<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for Base>>
        }

        @PROPERTY:<ERROR TYPE REF: Symbol not found for Anno>[Types]() public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Derived.component1, IsFromPrimaryConstructor=true] val b: @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for B> = R|<local>/b|
            @PROPERTY_GETTER:<ERROR TYPE REF: Symbol not found for Anno>[Types]() public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Derived] get(): @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for B>

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=/Derived.component2, IsFromPrimaryConstructor=true] val c: @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for C> = R|<local>/c|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Derived] get(): @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for C>

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component1(): @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for B>

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component2(): @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for C>

        public final [ResolvedTo(BODY_RESOLVE)] fun copy([ResolvedTo(BODY_RESOLVE)] @<ERROR TYPE REF: Symbol not found for Anno>[Types]() @<ERROR TYPE REF: Symbol not found for Anno>[Types]() b: @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for B> = this@R|/Derived|.R|/Derived.b|, [ResolvedTo(BODY_RESOLVE)] c: @<ERROR TYPE REF: Symbol not found for Anno>[Types]() <ERROR TYPE REF: Symbol not found for C> = this@R|/Derived|.R|/Derived.c|): R|Derived|

    }
