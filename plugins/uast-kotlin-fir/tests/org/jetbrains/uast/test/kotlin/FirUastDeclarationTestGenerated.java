/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.uast.test.kotlin;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class FirUastDeclarationTestGenerated extends AbstractFirUastDeclarationTest {
    @TestMetadata("plugins/uast-kotlin-fir/testData/declaration")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Declaration extends AbstractFirUastDeclarationTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInDeclaration() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/uast-kotlin-fir/testData/declaration"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @TestMetadata("facade.kt")
        public void testFacade() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/declaration/facade.kt");
        }

        @TestMetadata("importOnDemand.kt")
        public void testImportOnDemand() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/declaration/importOnDemand.kt");
        }

        @TestMetadata("objects.kt")
        public void testObjects() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/declaration/objects.kt");
        }
    }

    @TestMetadata("plugins/uast-kotlin-fir/testData/legacy")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Legacy extends AbstractFirUastDeclarationTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInLegacy() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/uast-kotlin-fir/testData/legacy"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @TestMetadata("Constructors.kt")
        public void testConstructors() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/legacy/Constructors.kt");
        }

        @TestMetadata("Imports.kt")
        public void testImports() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/legacy/Imports.kt");
        }

        @TestMetadata("PropertyAccessors.kt")
        public void testPropertyAccessors() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/legacy/PropertyAccessors.kt");
        }

        @TestMetadata("PropertyInitializer.kt")
        public void testPropertyInitializer() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/legacy/PropertyInitializer.kt");
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/uast-kotlin-fir/testData/legacy/Simple.kt");
        }
    }
}
