class C {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun bar(): C? {
    return <this>
  }

  fun foo(): C {
    return <this>
  }

}

fun test(nc: C?): C? {
  return { // BLOCK
    val tmp_0: C? = { // BLOCK
      val tmp_1: C? = { // BLOCK
        val tmp_2: C? = { // BLOCK
          val tmp_3: C? = nc
          when {
            EQEQ(arg0 = tmp_3, arg1 = null) -> null
            else -> tmp_3 /*as C */.foo()
          }
        }
        when {
          EQEQ(arg0 = tmp_2, arg1 = null) -> null
          else -> tmp_2 /*as C */.bar()
        }
      }
      when {
        EQEQ(arg0 = tmp_1, arg1 = null) -> null
        else -> tmp_1 /*as C */.foo()
      }
    }
    when {
      EQEQ(arg0 = tmp_0, arg1 = null) -> null
      else -> tmp_0 /*as C */.foo()
    }
  }
}
