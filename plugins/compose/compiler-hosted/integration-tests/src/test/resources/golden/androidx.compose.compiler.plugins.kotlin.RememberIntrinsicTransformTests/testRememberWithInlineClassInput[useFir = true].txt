//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember


@Composable
fun Test(inlineInt: InlineInt) {
    val a = InlineInt(123)
    val foo = remember(inlineInt, a) { Foo() }
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun Test(inlineInt: InlineInt, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)P(0:InlineInt)<rememb...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b1110 == 0) {
    %dirty = %dirty or if (%composer.changed(<unsafe-coerce>(inlineInt))) 0b0100 else 0b0010
  }
  if (%dirty and 0b1011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val a = InlineInt(123)
    val foo = <block>{
      sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
      val tmp0_group = %composer.cache(%dirty and 0b1110 == 0b0100) {
        Foo()
      }
      sourceInformationMarkerEnd(%composer)
      tmp0_group
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(inlineInt, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
