package

public fun </*0*/ T : kotlin.Any> kclass(/*0*/ k: kotlin.reflect.KClass<*>, /*1*/ kt: kotlin.reflect.KClass<T>): kotlin.Unit
public fun ktype(/*0*/ t: kotlin.reflect.KType, /*1*/ t2: kotlin.reflect.KType): kotlin.Unit
public fun n01(): kotlin.reflect.KProperty1<Foo, kotlin.Any>
public fun n02(): kotlin.reflect.KFunction1<Foo, kotlin.Unit>
public fun n03(): kotlin.reflect.KClass<Foo>
public fun n04(/*0*/ p: kotlin.reflect.KProperty0<kotlin.Int>): kotlin.Int
public fun n05(/*0*/ p: kotlin.reflect.KMutableProperty0<kotlin.String>): kotlin.Unit
public fun n07(/*0*/ p: kotlin.reflect.KFunction<kotlin.String>): kotlin.String
public fun n08(/*0*/ p: kotlin.reflect.KProperty1<kotlin.String, kotlin.Int>): kotlin.Int
public fun n09(/*0*/ p: kotlin.reflect.KProperty2<kotlin.String, kotlin.String, kotlin.Int>): kotlin.Int
public fun n10(): kotlin.Unit
public fun n11(): kotlin.Unit
public fun y01(): kotlin.reflect.KProperty1.Getter<Foo, kotlin.Any>
public fun y02(): kotlin.collections.Collection<kotlin.reflect.KCallable<*>>
public fun y03(): kotlin.String?
public fun y04(): [ERROR : Error function type]

public final class Foo {
    public constructor Foo(/*0*/ prop: kotlin.Any)
    public final val prop: kotlin.Any
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun func(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
