RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : Foo2 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : Foo3 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : Foo1 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : Foo2 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : Foo3 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : Foo1 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : Foo2 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : Foo3 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : Foo1 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(COMPANION_GENERATION)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : Foo2 {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : Foo3 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(RAW_FIR)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : Foo1 {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final? [ResolvedTo(TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(RAW_FIR)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(CONTRACTS)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(CONSTANT_EVALUATION)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }

        public final? [ResolvedTo(SUPER_TYPES)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] simpleLoopInOverride2Script.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-simpleLoopInOverride2Script.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo1 : <ERROR TYPE REF: Loop in supertypes involving /Foo1> {
            public abstract [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo2 : <ERROR TYPE REF: Loop in supertypes involving /Foo2> {
            public abstract override [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit|

        }

        public abstract [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-simpleLoopInOverride2Script.kts>] interface Foo3 : <ERROR TYPE REF: Loop in supertypes involving /Foo3> {
            public abstract override [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit|

        }

