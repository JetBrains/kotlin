/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners.codegen;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box")
@TestDataPath("$PROJECT_ROOT")
public class BlackBoxCodegenTestGenerated extends AbstractBlackBoxCodegenTest {
    @Test
    public void testAllFilesPresentInBox() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInAnnotations() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("annotatedAnnotationParameter.kt")
        public void testAnnotatedAnnotationParameter() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotatedAnnotationParameter.kt");
        }

        @Test
        @TestMetadata("annotatedEnumEntry.kt")
        public void testAnnotatedEnumEntry() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotatedEnumEntry.kt");
        }

        @Test
        @TestMetadata("annotatedObjectLiteral.kt")
        public void testAnnotatedObjectLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotatedObjectLiteral.kt");
        }

        @Test
        @TestMetadata("annotationProperty.kt")
        public void testAnnotationProperty() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationProperty.kt");
        }

        @Test
        @TestMetadata("annotationTargets.kt")
        public void testAnnotationTargets() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationTargets.kt");
        }

        @Test
        @TestMetadata("annotationWithKotlinProperty.kt")
        public void testAnnotationWithKotlinProperty() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationWithKotlinProperty.kt");
        }

        @Test
        @TestMetadata("annotationWithKotlinPropertyFromInterfaceCompanion.kt")
        public void testAnnotationWithKotlinPropertyFromInterfaceCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationWithKotlinPropertyFromInterfaceCompanion.kt");
        }

        @Test
        @TestMetadata("annotationsOnDefault.kt")
        public void testAnnotationsOnDefault() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationsOnDefault.kt");
        }

        @Test
        @TestMetadata("annotationsOnLateinitAccessors.kt")
        public void testAnnotationsOnLateinitAccessors() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationsOnLateinitAccessors.kt");
        }

        @Test
        @TestMetadata("annotationsOnLateinitFields.kt")
        public void testAnnotationsOnLateinitFields() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationsOnLateinitFields.kt");
        }

        @Test
        @TestMetadata("annotationsOnNonExistentAccessors.kt")
        public void testAnnotationsOnNonExistentAccessors() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationsOnNonExistentAccessors.kt");
        }

        @Test
        @TestMetadata("annotationsOnTypeAliases.kt")
        public void testAnnotationsOnTypeAliases() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/annotationsOnTypeAliases.kt");
        }

        @Test
        @TestMetadata("constValInAnnotation.kt")
        public void testConstValInAnnotation() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/constValInAnnotation.kt");
        }

        @Test
        @TestMetadata("defaultParameterValues.kt")
        public void testDefaultParameterValues() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/defaultParameterValues.kt");
        }

        @Test
        @TestMetadata("delegatedPropertySetter.kt")
        public void testDelegatedPropertySetter() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/delegatedPropertySetter.kt");
        }

        @Test
        @TestMetadata("fileClassWithFileAnnotation.kt")
        public void testFileClassWithFileAnnotation() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/fileClassWithFileAnnotation.kt");
        }

        @Test
        @TestMetadata("javaAnnotationOnProperty.kt")
        public void testJavaAnnotationOnProperty() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/javaAnnotationOnProperty.kt");
        }

        @Test
        @TestMetadata("jvmAnnotationFlags.kt")
        public void testJvmAnnotationFlags() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/jvmAnnotationFlags.kt");
        }

        @Test
        @TestMetadata("kotlinPropertyFromClassObjectAsParameter.kt")
        public void testKotlinPropertyFromClassObjectAsParameter() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/kotlinPropertyFromClassObjectAsParameter.kt");
        }

        @Test
        @TestMetadata("kotlinTopLevelPropertyAsParameter.kt")
        public void testKotlinTopLevelPropertyAsParameter() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/kotlinTopLevelPropertyAsParameter.kt");
        }

        @Test
        @TestMetadata("kt10136.kt")
        public void testKt10136() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/kt10136.kt");
        }

        @Test
        @TestMetadata("kt25489.kt")
        public void testKt25489() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/kt25489.kt");
        }

        @Test
        @TestMetadata("mustBeDocumented.kt")
        public void testMustBeDocumented() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/mustBeDocumented.kt");
        }

        @Test
        @TestMetadata("nestedAnnotation.kt")
        public void testNestedAnnotation() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/nestedAnnotation.kt");
        }

        @Test
        @TestMetadata("nestedClassPropertyAsParameter.kt")
        public void testNestedClassPropertyAsParameter() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/nestedClassPropertyAsParameter.kt");
        }

        @Test
        @TestMetadata("nestedClassesInAnnotations.kt")
        public void testNestedClassesInAnnotations() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/nestedClassesInAnnotations.kt");
        }

        @Test
        @TestMetadata("parameterAnnotationInDefaultImpls.kt")
        public void testParameterAnnotationInDefaultImpls() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/parameterAnnotationInDefaultImpls.kt");
        }

        @Test
        @TestMetadata("parameterWithPrimitiveType.kt")
        public void testParameterWithPrimitiveType() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/parameterWithPrimitiveType.kt");
        }

        @Test
        @TestMetadata("parameters.kt")
        public void testParameters() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/parameters.kt");
        }

        @Test
        @TestMetadata("propertyWithPropertyInInitializerAsParameter.kt")
        public void testPropertyWithPropertyInInitializerAsParameter() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/propertyWithPropertyInInitializerAsParameter.kt");
        }

        @Test
        @TestMetadata("resolveWithLowPriorityAnnotation.kt")
        public void testResolveWithLowPriorityAnnotation() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/resolveWithLowPriorityAnnotation.kt");
        }

        @Test
        @TestMetadata("singleAssignmentToVarargInAnnotation.kt")
        public void testSingleAssignmentToVarargInAnnotation() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/singleAssignmentToVarargInAnnotation.kt");
        }

        @Test
        @TestMetadata("syntheticMethodForJvmStaticProperty.kt")
        public void testSyntheticMethodForJvmStaticProperty() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/syntheticMethodForJvmStaticProperty.kt");
        }

        @Test
        @TestMetadata("syntheticMethodForProperty.kt")
        public void testSyntheticMethodForProperty() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/syntheticMethodForProperty.kt");
        }

        @Test
        @TestMetadata("typeAnnotationOnJdk6.kt")
        public void testTypeAnnotationOnJdk6() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/typeAnnotationOnJdk6.kt");
        }

        @Test
        @TestMetadata("useTypeParameterAnnotationFromJava.kt")
        public void testUseTypeParameterAnnotationFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/useTypeParameterAnnotationFromJava.kt");
        }

        @Test
        @TestMetadata("useTypeUseAnnotationFromJava.kt")
        public void testUseTypeUseAnnotationFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/useTypeUseAnnotationFromJava.kt");
        }

        @Test
        @TestMetadata("varargInAnnotationParameter.kt")
        public void testVarargInAnnotationParameter() throws Exception {
            runTest("compiler/testData/codegen/box/annotations/varargInAnnotationParameter.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/annotations/annotatedLambda")
        @TestDataPath("$PROJECT_ROOT")
        public class AnnotatedLambda extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInAnnotatedLambda() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/annotatedLambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("funExpression.kt")
            public void testFunExpression() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/annotatedLambda/funExpression.kt");
            }

            @Test
            @TestMetadata("lambda.kt")
            public void testLambda() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/annotatedLambda/lambda.kt");
            }

            @Test
            @TestMetadata("samFunExpression.kt")
            public void testSamFunExpression() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samFunExpression.kt");
            }

            @Test
            @TestMetadata("samFunReference.kt")
            public void testSamFunReference() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samFunReference.kt");
            }

            @Test
            @TestMetadata("samLambda.kt")
            public void testSamLambda() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/annotatedLambda/samLambda.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/annotations/typeAnnotations")
        @TestDataPath("$PROJECT_ROOT")
        public class TypeAnnotations extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInTypeAnnotations() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/annotations/typeAnnotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("checkingNotincorporatedInputTypes.kt")
            public void testCheckingNotincorporatedInputTypes() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/typeAnnotations/checkingNotincorporatedInputTypes.kt");
            }

            @Test
            @TestMetadata("implicitReturn.kt")
            public void testImplicitReturn() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/typeAnnotations/implicitReturn.kt");
            }

            @Test
            @TestMetadata("kt41484.kt")
            public void testKt41484() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/typeAnnotations/kt41484.kt");
            }

            @Test
            @TestMetadata("methodParameters.kt")
            public void testMethodParameters() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/typeAnnotations/methodParameters.kt");
            }

            @Test
            @TestMetadata("typeAnnotationTarget6.kt")
            public void testTypeAnnotationTarget6() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/typeAnnotations/typeAnnotationTarget6.kt");
            }

            @Test
            @TestMetadata("typeUseAnnotation.kt")
            public void testTypeUseAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/annotations/typeAnnotations/typeUseAnnotation.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/argumentOrder")
    @TestDataPath("$PROJECT_ROOT")
    public class ArgumentOrder extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInArgumentOrder() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/argumentOrder"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("argumentOrderInObjectSuperCall.kt")
        public void testArgumentOrderInObjectSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInObjectSuperCall.kt");
        }

        @Test
        @TestMetadata("argumentOrderInObjectSuperCallWithPlatformType.kt")
        public void testArgumentOrderInObjectSuperCallWithPlatformType() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInObjectSuperCallWithPlatformType.kt");
        }

        @Test
        @TestMetadata("argumentOrderInSuperCall.kt")
        public void testArgumentOrderInSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/argumentOrderInSuperCall.kt");
        }

        @Test
        @TestMetadata("arguments.kt")
        public void testArguments() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/arguments.kt");
        }

        @Test
        @TestMetadata("captured.kt")
        public void testCaptured() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/captured.kt");
        }

        @Test
        @TestMetadata("capturedInExtension.kt")
        public void testCapturedInExtension() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/capturedInExtension.kt");
        }

        @Test
        @TestMetadata("defaults.kt")
        public void testDefaults() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/defaults.kt");
        }

        @Test
        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/extension.kt");
        }

        @Test
        @TestMetadata("extensionInClass.kt")
        public void testExtensionInClass() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/extensionInClass.kt");
        }

        @Test
        @TestMetadata("kt17691.kt")
        public void testKt17691() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/kt17691.kt");
        }

        @Test
        @TestMetadata("kt17691WithEnabledFeature.kt")
        public void testKt17691WithEnabledFeature() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/kt17691WithEnabledFeature.kt");
        }

        @Test
        @TestMetadata("kt9277.kt")
        public void testKt9277() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/kt9277.kt");
        }

        @Test
        @TestMetadata("lambdaMigration.kt")
        public void testLambdaMigration() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigration.kt");
        }

        @Test
        @TestMetadata("lambdaMigrationInClass.kt")
        public void testLambdaMigrationInClass() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/lambdaMigrationInClass.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/simple.kt");
        }

        @Test
        @TestMetadata("simpleInClass.kt")
        public void testSimpleInClass() throws Exception {
            runTest("compiler/testData/codegen/box/argumentOrder/simpleInClass.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/arrays")
    @TestDataPath("$PROJECT_ROOT")
    public class Arrays extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInArrays() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("arrayConstructorWithNonInlineLambda.kt")
        public void testArrayConstructorWithNonInlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/arrayConstructorWithNonInlineLambda.kt");
        }

        @Test
        @TestMetadata("arrayConstructorsSimple.kt")
        public void testArrayConstructorsSimple() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/arrayConstructorsSimple.kt");
        }

        @Test
        @TestMetadata("arrayGetAssignMultiIndex.kt")
        public void testArrayGetAssignMultiIndex() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/arrayGetAssignMultiIndex.kt");
        }

        @Test
        @TestMetadata("arrayGetMultiIndex.kt")
        public void testArrayGetMultiIndex() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/arrayGetMultiIndex.kt");
        }

        @Test
        @TestMetadata("arrayInstanceOf.kt")
        public void testArrayInstanceOf() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/arrayInstanceOf.kt");
        }

        @Test
        @TestMetadata("arrayPlusAssign.kt")
        public void testArrayPlusAssign() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/arrayPlusAssign.kt");
        }

        @Test
        @TestMetadata("arraysAreCloneable.kt")
        public void testArraysAreCloneable() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/arraysAreCloneable.kt");
        }

        @Test
        @TestMetadata("cloneArray.kt")
        public void testCloneArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/cloneArray.kt");
        }

        @Test
        @TestMetadata("clonePrimitiveArrays.kt")
        public void testClonePrimitiveArrays() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/clonePrimitiveArrays.kt");
        }

        @Test
        @TestMetadata("collectionAssignGetMultiIndex.kt")
        public void testCollectionAssignGetMultiIndex() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/collectionAssignGetMultiIndex.kt");
        }

        @Test
        @TestMetadata("collectionGetMultiIndex.kt")
        public void testCollectionGetMultiIndex() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/collectionGetMultiIndex.kt");
        }

        @Test
        @TestMetadata("forEachBooleanArray.kt")
        public void testForEachBooleanArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachBooleanArray.kt");
        }

        @Test
        @TestMetadata("forEachByteArray.kt")
        public void testForEachByteArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachByteArray.kt");
        }

        @Test
        @TestMetadata("forEachCharArray.kt")
        public void testForEachCharArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachCharArray.kt");
        }

        @Test
        @TestMetadata("forEachDoubleArray.kt")
        public void testForEachDoubleArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachDoubleArray.kt");
        }

        @Test
        @TestMetadata("forEachFloatArray.kt")
        public void testForEachFloatArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachFloatArray.kt");
        }

        @Test
        @TestMetadata("forEachIntArray.kt")
        public void testForEachIntArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachIntArray.kt");
        }

        @Test
        @TestMetadata("forEachLongArray.kt")
        public void testForEachLongArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachLongArray.kt");
        }

        @Test
        @TestMetadata("forEachShortArray.kt")
        public void testForEachShortArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/forEachShortArray.kt");
        }

        @Test
        @TestMetadata("genericArrayInObjectLiteralConstructor.kt")
        public void testGenericArrayInObjectLiteralConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/genericArrayInObjectLiteralConstructor.kt");
        }

        @Test
        @TestMetadata("hashMap.kt")
        public void testHashMap() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/hashMap.kt");
        }

        @Test
        @TestMetadata("inProjectionAsParameter.kt")
        public void testInProjectionAsParameter() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/inProjectionAsParameter.kt");
        }

        @Test
        @TestMetadata("inProjectionOfArray.kt")
        public void testInProjectionOfArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/inProjectionOfArray.kt");
        }

        @Test
        @TestMetadata("inProjectionOfList.kt")
        public void testInProjectionOfList() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/inProjectionOfList.kt");
        }

        @Test
        @TestMetadata("indices.kt")
        public void testIndices() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/indices.kt");
        }

        @Test
        @TestMetadata("indicesChar.kt")
        public void testIndicesChar() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/indicesChar.kt");
        }

        @Test
        @TestMetadata("inlineInitializer.kt")
        public void testInlineInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/inlineInitializer.kt");
        }

        @Test
        @TestMetadata("iterator.kt")
        public void testIterator() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iterator.kt");
        }

        @Test
        @TestMetadata("iteratorBooleanArray.kt")
        public void testIteratorBooleanArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorBooleanArray.kt");
        }

        @Test
        @TestMetadata("iteratorByteArray.kt")
        public void testIteratorByteArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorByteArray.kt");
        }

        @Test
        @TestMetadata("iteratorByteArrayNextByte.kt")
        public void testIteratorByteArrayNextByte() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorByteArrayNextByte.kt");
        }

        @Test
        @TestMetadata("iteratorCharArray.kt")
        public void testIteratorCharArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorCharArray.kt");
        }

        @Test
        @TestMetadata("iteratorDoubleArray.kt")
        public void testIteratorDoubleArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorDoubleArray.kt");
        }

        @Test
        @TestMetadata("iteratorFloatArray.kt")
        public void testIteratorFloatArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorFloatArray.kt");
        }

        @Test
        @TestMetadata("iteratorIntArray.kt")
        public void testIteratorIntArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorIntArray.kt");
        }

        @Test
        @TestMetadata("iteratorLongArray.kt")
        public void testIteratorLongArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorLongArray.kt");
        }

        @Test
        @TestMetadata("iteratorLongArrayNextLong.kt")
        public void testIteratorLongArrayNextLong() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorLongArrayNextLong.kt");
        }

        @Test
        @TestMetadata("iteratorShortArray.kt")
        public void testIteratorShortArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/iteratorShortArray.kt");
        }

        @Test
        @TestMetadata("kt1291.kt")
        public void testKt1291() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt1291.kt");
        }

        @Test
        @TestMetadata("kt17134.kt")
        public void testKt17134() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt17134.kt");
        }

        @Test
        @TestMetadata("kt238.kt")
        public void testKt238() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt238.kt");
        }

        @Test
        @TestMetadata("kt2997.kt")
        public void testKt2997() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt2997.kt");
        }

        @Test
        @TestMetadata("kt33.kt")
        public void testKt33() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt33.kt");
        }

        @Test
        @TestMetadata("kt3771.kt")
        public void testKt3771() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt3771.kt");
        }

        @Test
        @TestMetadata("kt4118.kt")
        public void testKt4118() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt4118.kt");
        }

        @Test
        @TestMetadata("kt4348.kt")
        public void testKt4348() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt4348.kt");
        }

        @Test
        @TestMetadata("kt4357.kt")
        public void testKt4357() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt4357.kt");
        }

        @Test
        @TestMetadata("kt503.kt")
        public void testKt503() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt503.kt");
        }

        @Test
        @TestMetadata("kt594.kt")
        public void testKt594() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt594.kt");
        }

        @Test
        @TestMetadata("kt602.kt")
        public void testKt602() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt602.kt");
        }

        @Test
        @TestMetadata("kt7009.kt")
        public void testKt7009() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt7009.kt");
        }

        @Test
        @TestMetadata("kt7288.kt")
        public void testKt7288() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt7288.kt");
        }

        @Test
        @TestMetadata("kt7338.kt")
        public void testKt7338() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt7338.kt");
        }

        @Test
        @TestMetadata("kt779.kt")
        public void testKt779() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt779.kt");
        }

        @Test
        @TestMetadata("kt945.kt")
        public void testKt945() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt945.kt");
        }

        @Test
        @TestMetadata("kt950.kt")
        public void testKt950() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/kt950.kt");
        }

        @Test
        @TestMetadata("longAsIndex.kt")
        public void testLongAsIndex() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/longAsIndex.kt");
        }

        @Test
        @TestMetadata("multiArrayConstructors.kt")
        public void testMultiArrayConstructors() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/multiArrayConstructors.kt");
        }

        @Test
        @TestMetadata("nonLocalReturnArrayConstructor.kt")
        public void testNonLocalReturnArrayConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/nonLocalReturnArrayConstructor.kt");
        }

        @Test
        @TestMetadata("nonNullArray.kt")
        public void testNonNullArray() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/nonNullArray.kt");
        }

        @Test
        @TestMetadata("primitiveArrays.kt")
        public void testPrimitiveArrays() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/primitiveArrays.kt");
        }

        @Test
        @TestMetadata("stdlib.kt")
        public void testStdlib() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/stdlib.kt");
        }

        @Test
        @TestMetadata("varargsWithJava.kt")
        public void testVarargsWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/arrays/varargsWithJava.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/arrays/arraysOfInlineClass")
        @TestDataPath("$PROJECT_ROOT")
        public class ArraysOfInlineClass extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("accessArrayOfInlineClass.kt")
            public void testAccessArrayOfInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/accessArrayOfInlineClass.kt");
            }

            @Test
            @TestMetadata("accessArrayOfUnsigned.kt")
            public void testAccessArrayOfUnsigned() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/accessArrayOfUnsigned.kt");
            }

            @Test
            public void testAllFilesPresentInArraysOfInlineClass() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/arraysOfInlineClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("arrayOfInlineClassOfArrayOfInlineClass.kt")
            public void testArrayOfInlineClassOfArrayOfInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/arraysOfInlineClass/arrayOfInlineClassOfArrayOfInlineClass.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/arrays/forInReversed")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInReversed extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInReversed() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/forInReversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("reversedArrayOriginalUpdatedInLoopBody.kt")
            public void testReversedArrayOriginalUpdatedInLoopBody() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedArrayOriginalUpdatedInLoopBody.kt");
            }

            @Test
            @TestMetadata("reversedArrayReversedArrayOriginalUpdatedInLoopBody.kt")
            public void testReversedArrayReversedArrayOriginalUpdatedInLoopBody() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedArrayReversedArrayOriginalUpdatedInLoopBody.kt");
            }

            @Test
            @TestMetadata("reversedOriginalUpdatedInLoopBody.kt")
            public void testReversedOriginalUpdatedInLoopBody() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedOriginalUpdatedInLoopBody.kt");
            }

            @Test
            @TestMetadata("reversedReversedOriginalUpdatedInLoopBody.kt")
            public void testReversedReversedOriginalUpdatedInLoopBody() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/forInReversed/reversedReversedOriginalUpdatedInLoopBody.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiDecl extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMultiDecl() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("kt15560.kt")
            public void testKt15560() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15560.kt");
            }

            @Test
            @TestMetadata("kt15568.kt")
            public void testKt15568() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15568.kt");
            }

            @Test
            @TestMetadata("kt15575.kt")
            public void testKt15575() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/kt15575.kt");
            }

            @Test
            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclFor.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentExtensions.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensions.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
            }

            @Test
            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                runTest("compiler/testData/codegen/box/arrays/multiDecl/MultiDeclForValCaptured.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/int")
            @TestDataPath("$PROJECT_ROOT")
            public class Int extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInInt() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentExtensionsValCaptured.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/arrays/multiDecl/long")
            @TestDataPath("$PROJECT_ROOT")
            public class Long extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLong() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/arrays/multiDecl/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentExtensionsValCaptured.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/arrays/multiDecl/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/assert")
    @TestDataPath("$PROJECT_ROOT")
    public class Assert extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInAssert() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/assert"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("alwaysDisable.kt")
        public void testAlwaysDisable() throws Exception {
            runTest("compiler/testData/codegen/box/assert/alwaysDisable.kt");
        }

        @Test
        @TestMetadata("alwaysEnable.kt")
        public void testAlwaysEnable() throws Exception {
            runTest("compiler/testData/codegen/box/assert/alwaysEnable.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/assert/jvm")
        @TestDataPath("$PROJECT_ROOT")
        public class Jvm extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJvm() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/assert/jvm"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("assertionsEnabledBeforeClassInitializers.kt")
            public void testAssertionsEnabledBeforeClassInitializers() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/assertionsEnabledBeforeClassInitializers.kt");
            }

            @Test
            @TestMetadata("classAssertions.kt")
            public void testClassAssertions() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/classAssertions.kt");
            }

            @Test
            @TestMetadata("classAssertionsForCompanion.kt")
            public void testClassAssertionsForCompanion() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForCompanion.kt");
            }

            @Test
            @TestMetadata("classAssertionsForInnerClasses.kt")
            public void testClassAssertionsForInnerClasses() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForInnerClasses.kt");
            }

            @Test
            @TestMetadata("classAssertionsForLocalClasses.kt")
            public void testClassAssertionsForLocalClasses() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForLocalClasses.kt");
            }

            @Test
            @TestMetadata("classAssertionsForNestedClasses.kt")
            public void testClassAssertionsForNestedClasses() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/classAssertionsForNestedClasses.kt");
            }

            @Test
            @TestMetadata("interfaceAssertionsDisabled.kt")
            public void testInterfaceAssertionsDisabled() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/interfaceAssertionsDisabled.kt");
            }

            @Test
            @TestMetadata("interfaceAssertionsEnabled.kt")
            public void testInterfaceAssertionsEnabled() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/interfaceAssertionsEnabled.kt");
            }

            @Test
            @TestMetadata("lambdaNotEvaluated.kt")
            public void testLambdaNotEvaluated() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/lambdaNotEvaluated.kt");
            }

            @Test
            @TestMetadata("localAnonymousFunction.kt")
            public void testLocalAnonymousFunction() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/localAnonymousFunction.kt");
            }

            @Test
            @TestMetadata("localClass.kt")
            public void testLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/localClass.kt");
            }

            @Test
            @TestMetadata("localFunction.kt")
            public void testLocalFunction() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/localFunction.kt");
            }

            @Test
            @TestMetadata("localLambda.kt")
            public void testLocalLambda() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/localLambda.kt");
            }

            @Test
            @TestMetadata("localObject.kt")
            public void testLocalObject() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/localObject.kt");
            }

            @Test
            @TestMetadata("noUnnecessaryClassInitialization.kt")
            public void testNoUnnecessaryClassInitialization() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/noUnnecessaryClassInitialization.kt");
            }

            @Test
            @TestMetadata("nonLocalReturn.kt")
            public void testNonLocalReturn() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/nonLocalReturn.kt");
            }

            @Test
            @TestMetadata("ordinary.kt")
            public void testOrdinary() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/ordinary.kt");
            }

            @Test
            @TestMetadata("superClassInitializer.kt")
            public void testSuperClassInitializer() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/superClassInitializer.kt");
            }

            @Test
            @TestMetadata("suspendFunctionAssertionDisabled.kt")
            public void testSuspendFunctionAssertionDisabled() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/suspendFunctionAssertionDisabled.kt");
            }

            @Test
            @TestMetadata("suspendFunctionAssertionsEnabled.kt")
            public void testSuspendFunctionAssertionsEnabled() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/suspendFunctionAssertionsEnabled.kt");
            }

            @Test
            @TestMetadata("suspendLambdaAssertionsDisabled.kt")
            public void testSuspendLambdaAssertionsDisabled() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/suspendLambdaAssertionsDisabled.kt");
            }

            @Test
            @TestMetadata("suspendLambdaAssertionsEnabled.kt")
            public void testSuspendLambdaAssertionsEnabled() throws Exception {
                runTest("compiler/testData/codegen/box/assert/jvm/suspendLambdaAssertionsEnabled.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/binaryOp")
    @TestDataPath("$PROJECT_ROOT")
    public class BinaryOp extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInBinaryOp() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/binaryOp"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("bitwiseOp.kt")
        public void testBitwiseOp() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/bitwiseOp.kt");
        }

        @Test
        @TestMetadata("bitwiseOpAny.kt")
        public void testBitwiseOpAny() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpAny.kt");
        }

        @Test
        @TestMetadata("bitwiseOpNullable.kt")
        public void testBitwiseOpNullable() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/bitwiseOpNullable.kt");
        }

        @Test
        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/call.kt");
        }

        @Test
        @TestMetadata("callAny.kt")
        public void testCallAny() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/callAny.kt");
        }

        @Test
        @TestMetadata("callNullable.kt")
        public void testCallNullable() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/callNullable.kt");
        }

        @Test
        @TestMetadata("compareBoxedChars.kt")
        public void testCompareBoxedChars() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/compareBoxedChars.kt");
        }

        @Test
        @TestMetadata("compareWithBoxedDouble.kt")
        public void testCompareWithBoxedDouble() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedDouble.kt");
        }

        @Test
        @TestMetadata("compareWithBoxedLong.kt")
        public void testCompareWithBoxedLong() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedLong.kt");
        }

        @Test
        @TestMetadata("compareWithBoxedNotNullDouble.kt")
        public void testCompareWithBoxedNotNullDouble() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedNotNullDouble.kt");
        }

        @Test
        @TestMetadata("compareWithBoxedNotNullLong.kt")
        public void testCompareWithBoxedNotNullLong() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/compareWithBoxedNotNullLong.kt");
        }

        @Test
        @TestMetadata("divisionByZero.kt")
        public void testDivisionByZero() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/divisionByZero.kt");
        }

        @Test
        @TestMetadata("eqNullableDoubles.kt")
        public void testEqNullableDoubles() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoubles.kt");
        }

        @Test
        @TestMetadata("eqNullableDoublesToInt.kt")
        public void testEqNullableDoublesToInt() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesToInt.kt");
        }

        @Test
        @TestMetadata("eqNullableDoublesToIntWithTP.kt")
        public void testEqNullableDoublesToIntWithTP() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesToIntWithTP.kt");
        }

        @Test
        @TestMetadata("eqNullableDoublesWithTP.kt")
        public void testEqNullableDoublesWithTP() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/eqNullableDoublesWithTP.kt");
        }

        @Test
        @TestMetadata("intrinsic.kt")
        public void testIntrinsic() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/intrinsic.kt");
        }

        @Test
        @TestMetadata("intrinsicAny.kt")
        public void testIntrinsicAny() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/intrinsicAny.kt");
        }

        @Test
        @TestMetadata("intrinsicNullable.kt")
        public void testIntrinsicNullable() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/intrinsicNullable.kt");
        }

        @Test
        @TestMetadata("kt11163.kt")
        public void testKt11163() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/kt11163.kt");
        }

        @Test
        @TestMetadata("kt11163_properIeee754comparisons.kt")
        public void testKt11163_properIeee754comparisons() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/kt11163_properIeee754comparisons.kt");
        }

        @Test
        @TestMetadata("kt23030_properIeee754comparisons.kt")
        public void testKt23030_properIeee754comparisons() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/kt23030_properIeee754comparisons.kt");
        }

        @Test
        @TestMetadata("kt6747_identityEquals.kt")
        public void testKt6747_identityEquals() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/kt6747_identityEquals.kt");
        }

        @Test
        @TestMetadata("overflowChar.kt")
        public void testOverflowChar() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/overflowChar.kt");
        }

        @Test
        @TestMetadata("overflowInt.kt")
        public void testOverflowInt() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/overflowInt.kt");
        }

        @Test
        @TestMetadata("overflowLong.kt")
        public void testOverflowLong() throws Exception {
            runTest("compiler/testData/codegen/box/binaryOp/overflowLong.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/boxingOptimization")
    @TestDataPath("$PROJECT_ROOT")
    public class BoxingOptimization extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInBoxingOptimization() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/boxingOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("boxedIntegersCmp.kt")
        public void testBoxedIntegersCmp() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/boxedIntegersCmp.kt");
        }

        @Test
        @TestMetadata("boxedPrimitivesAreEqual.kt")
        public void testBoxedPrimitivesAreEqual() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/boxedPrimitivesAreEqual.kt");
        }

        @Test
        @TestMetadata("boxedRealsCmp.kt")
        public void testBoxedRealsCmp() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/boxedRealsCmp.kt");
        }

        @Test
        @TestMetadata("casts.kt")
        public void testCasts() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/casts.kt");
        }

        @Test
        @TestMetadata("checkcastAndInstanceOf.kt")
        public void testCheckcastAndInstanceOf() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/checkcastAndInstanceOf.kt");
        }

        @Test
        @TestMetadata("explicitEqualsOnDouble.kt")
        public void testExplicitEqualsOnDouble() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/explicitEqualsOnDouble.kt");
        }

        @Test
        @TestMetadata("fold.kt")
        public void testFold() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/fold.kt");
        }

        @Test
        @TestMetadata("foldRange.kt")
        public void testFoldRange() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/foldRange.kt");
        }

        @Test
        @TestMetadata("intCompareTo.kt")
        public void testIntCompareTo() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/intCompareTo.kt");
        }

        @Test
        @TestMetadata("kClassEquals.kt")
        public void testKClassEquals() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kClassEquals.kt");
        }

        @Test
        @TestMetadata("kt15871.kt")
        public void testKt15871() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt15871.kt");
        }

        @Test
        @TestMetadata("kt17748.kt")
        public void testKt17748() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt17748.kt");
        }

        @Test
        @TestMetadata("kt19767.kt")
        public void testKt19767() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt19767.kt");
        }

        @Test
        @TestMetadata("kt19767_2.kt")
        public void testKt19767_2() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_2.kt");
        }

        @Test
        @TestMetadata("kt19767_3.kt")
        public void testKt19767_3() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_3.kt");
        }

        @Test
        @TestMetadata("kt19767_chain.kt")
        public void testKt19767_chain() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt19767_chain.kt");
        }

        @Test
        @TestMetadata("kt5493.kt")
        public void testKt5493() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt5493.kt");
        }

        @Test
        @TestMetadata("kt5588.kt")
        public void testKt5588() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt5588.kt");
        }

        @Test
        @TestMetadata("kt5844.kt")
        public void testKt5844() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt5844.kt");
        }

        @Test
        @TestMetadata("kt6047.kt")
        public void testKt6047() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt6047.kt");
        }

        @Test
        @TestMetadata("kt6842.kt")
        public void testKt6842() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/kt6842.kt");
        }

        @Test
        @TestMetadata("maxMinByOrNull.kt")
        public void testMaxMinByOrNull() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/maxMinByOrNull.kt");
        }

        @Test
        @TestMetadata("nullCheck.kt")
        public void testNullCheck() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/nullCheck.kt");
        }

        @Test
        @TestMetadata("progressions.kt")
        public void testProgressions() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/progressions.kt");
        }

        @Test
        @TestMetadata("safeCallWithElvis.kt")
        public void testSafeCallWithElvis() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/safeCallWithElvis.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/simple.kt");
        }

        @Test
        @TestMetadata("simpleUninitializedMerge.kt")
        public void testSimpleUninitializedMerge() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/simpleUninitializedMerge.kt");
        }

        @Test
        @TestMetadata("taintedValues.kt")
        public void testTaintedValues() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/taintedValues.kt");
        }

        @Test
        @TestMetadata("taintedValuesBox.kt")
        public void testTaintedValuesBox() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/taintedValuesBox.kt");
        }

        @Test
        @TestMetadata("unsafeRemoving.kt")
        public void testUnsafeRemoving() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/unsafeRemoving.kt");
        }

        @Test
        @TestMetadata("variables.kt")
        public void testVariables() throws Exception {
            runTest("compiler/testData/codegen/box/boxingOptimization/variables.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/bridges")
    @TestDataPath("$PROJECT_ROOT")
    public class Bridges extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("abstractOverrideBridge.kt")
        public void testAbstractOverrideBridge() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/abstractOverrideBridge.kt");
        }

        @Test
        public void testAllFilesPresentInBridges() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/bridges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("bridgeInInterface.kt")
        public void testBridgeInInterface() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/bridgeInInterface.kt");
        }

        @Test
        @TestMetadata("bridgeInInterfaceWithProperties.kt")
        public void testBridgeInInterfaceWithProperties() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/bridgeInInterfaceWithProperties.kt");
        }

        @Test
        @TestMetadata("complexMultiInheritance.kt")
        public void testComplexMultiInheritance() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/complexMultiInheritance.kt");
        }

        @Test
        @TestMetadata("complexTraitImpl.kt")
        public void testComplexTraitImpl() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/complexTraitImpl.kt");
        }

        @Test
        @TestMetadata("covariantGenericDiamond.kt")
        public void testCovariantGenericDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/covariantGenericDiamond.kt");
        }

        @Test
        @TestMetadata("delegation.kt")
        public void testDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/delegation.kt");
        }

        @Test
        @TestMetadata("delegationComplex.kt")
        public void testDelegationComplex() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/delegationComplex.kt");
        }

        @Test
        @TestMetadata("delegationComplexWithList.kt")
        public void testDelegationComplexWithList() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/delegationComplexWithList.kt");
        }

        @Test
        @TestMetadata("delegationProperty.kt")
        public void testDelegationProperty() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/delegationProperty.kt");
        }

        @Test
        @TestMetadata("diamond.kt")
        public void testDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/diamond.kt");
        }

        @Test
        @TestMetadata("fakeCovariantOverride.kt")
        public void testFakeCovariantOverride() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeCovariantOverride.kt");
        }

        @Test
        @TestMetadata("fakeGenericCovariantOverride.kt")
        public void testFakeGenericCovariantOverride() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverride.kt");
        }

        @Test
        @TestMetadata("fakeGenericCovariantOverrideWithDelegation.kt")
        public void testFakeGenericCovariantOverrideWithDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeGenericCovariantOverrideWithDelegation.kt");
        }

        @Test
        @TestMetadata("fakeOverrideFromInterfaceThroughIntermediateClass.kt")
        public void testFakeOverrideFromInterfaceThroughIntermediateClass() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeOverrideFromInterfaceThroughIntermediateClass.kt");
        }

        @Test
        @TestMetadata("fakeOverrideMultiFile.kt")
        public void testFakeOverrideMultiFile() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeOverrideMultiFile.kt");
        }

        @Test
        @TestMetadata("fakeOverrideOfTraitImpl.kt")
        public void testFakeOverrideOfTraitImpl() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeOverrideOfTraitImpl.kt");
        }

        @Test
        @TestMetadata("fakeOverrideThroughGenericSuperclass.kt")
        public void testFakeOverrideThroughGenericSuperclass() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeOverrideThroughGenericSuperclass.kt");
        }

        @Test
        @TestMetadata("fakeOverrideWithSeveralSuperDeclarations.kt")
        public void testFakeOverrideWithSeveralSuperDeclarations() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSeveralSuperDeclarations.kt");
        }

        @Test
        @TestMetadata("fakeOverrideWithSynthesizedImplementation.kt")
        public void testFakeOverrideWithSynthesizedImplementation() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/fakeOverrideWithSynthesizedImplementation.kt");
        }

        @Test
        @TestMetadata("genericProperty.kt")
        public void testGenericProperty() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/genericProperty.kt");
        }

        @Test
        @TestMetadata("innerClassTypeParameters.kt")
        public void testInnerClassTypeParameters() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/innerClassTypeParameters.kt");
        }

        @Test
        @TestMetadata("kt12416.kt")
        public void testKt12416() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt12416.kt");
        }

        @Test
        @TestMetadata("kt1939.kt")
        public void testKt1939() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt1939.kt");
        }

        @Test
        @TestMetadata("kt1959.kt")
        public void testKt1959() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt1959.kt");
        }

        @Test
        @TestMetadata("kt24193.kt")
        public void testKt24193() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt24193.kt");
        }

        @Test
        @TestMetadata("kt2498.kt")
        public void testKt2498() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt2498.kt");
        }

        @Test
        @TestMetadata("kt2702.kt")
        public void testKt2702() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt2702.kt");
        }

        @Test
        @TestMetadata("kt2833.kt")
        public void testKt2833() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt2833.kt");
        }

        @Test
        @TestMetadata("kt2920.kt")
        public void testKt2920() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt2920.kt");
        }

        @Test
        @TestMetadata("kt318.kt")
        public void testKt318() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt318.kt");
        }

        @Test
        @TestMetadata("kt42137.kt")
        public void testKt42137() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/kt42137.kt");
        }

        @Test
        @TestMetadata("longChainOneBridge.kt")
        public void testLongChainOneBridge() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/longChainOneBridge.kt");
        }

        @Test
        @TestMetadata("manyTypeArgumentsSubstitutedSuccessively.kt")
        public void testManyTypeArgumentsSubstitutedSuccessively() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/manyTypeArgumentsSubstitutedSuccessively.kt");
        }

        @Test
        @TestMetadata("methodFromTrait.kt")
        public void testMethodFromTrait() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/methodFromTrait.kt");
        }

        @Test
        @TestMetadata("noBridgeOnMutableCollectionInheritance.kt")
        public void testNoBridgeOnMutableCollectionInheritance() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/noBridgeOnMutableCollectionInheritance.kt");
        }

        @Test
        @TestMetadata("objectClone.kt")
        public void testObjectClone() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/objectClone.kt");
        }

        @Test
        @TestMetadata("overrideAbstractProperty.kt")
        public void testOverrideAbstractProperty() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/overrideAbstractProperty.kt");
        }

        @Test
        @TestMetadata("overrideReturnType.kt")
        public void testOverrideReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/overrideReturnType.kt");
        }

        @Test
        @TestMetadata("propertyAccessorsWithoutBody.kt")
        public void testPropertyAccessorsWithoutBody() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/propertyAccessorsWithoutBody.kt");
        }

        @Test
        @TestMetadata("propertyDiamond.kt")
        public void testPropertyDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/propertyDiamond.kt");
        }

        @Test
        @TestMetadata("propertyDiamondFakeOverride.kt")
        public void testPropertyDiamondFakeOverride() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/propertyDiamondFakeOverride.kt");
        }

        @Test
        @TestMetadata("propertyInConstructor.kt")
        public void testPropertyInConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/propertyInConstructor.kt");
        }

        @Test
        @TestMetadata("propertySetter.kt")
        public void testPropertySetter() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/propertySetter.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/simple.kt");
        }

        @Test
        @TestMetadata("simpleEnum.kt")
        public void testSimpleEnum() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/simpleEnum.kt");
        }

        @Test
        @TestMetadata("simpleGenericMethod.kt")
        public void testSimpleGenericMethod() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/simpleGenericMethod.kt");
        }

        @Test
        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/simpleObject.kt");
        }

        @Test
        @TestMetadata("simpleReturnType.kt")
        public void testSimpleReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/simpleReturnType.kt");
        }

        @Test
        @TestMetadata("simpleTraitImpl.kt")
        public void testSimpleTraitImpl() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/simpleTraitImpl.kt");
        }

        @Test
        @TestMetadata("simpleUpperBound.kt")
        public void testSimpleUpperBound() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/simpleUpperBound.kt");
        }

        @Test
        @TestMetadata("strListContains.kt")
        public void testStrListContains() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/strListContains.kt");
        }

        @Test
        @TestMetadata("strListRemove.kt")
        public void testStrListRemove() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/strListRemove.kt");
        }

        @Test
        @TestMetadata("traitImplInheritsTraitImpl.kt")
        public void testTraitImplInheritsTraitImpl() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/traitImplInheritsTraitImpl.kt");
        }

        @Test
        @TestMetadata("twoParentsWithDifferentMethodsTwoBridges.kt")
        public void testTwoParentsWithDifferentMethodsTwoBridges() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges.kt");
        }

        @Test
        @TestMetadata("twoParentsWithDifferentMethodsTwoBridges2.kt")
        public void testTwoParentsWithDifferentMethodsTwoBridges2() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/twoParentsWithDifferentMethodsTwoBridges2.kt");
        }

        @Test
        @TestMetadata("twoParentsWithTheSameMethodOneBridge.kt")
        public void testTwoParentsWithTheSameMethodOneBridge() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/twoParentsWithTheSameMethodOneBridge.kt");
        }

        @Test
        @TestMetadata("typeParameterInExtensionReceiver.kt")
        public void testTypeParameterInExtensionReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/bridges/typeParameterInExtensionReceiver.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/bridges/substitutionInSuperClass")
        @TestDataPath("$PROJECT_ROOT")
        public class SubstitutionInSuperClass extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("abstractFun.kt")
            public void testAbstractFun() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/abstractFun.kt");
            }

            @Test
            public void testAllFilesPresentInSubstitutionInSuperClass() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/bridges/substitutionInSuperClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boundedTypeArguments.kt")
            public void testBoundedTypeArguments() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/boundedTypeArguments.kt");
            }

            @Test
            @TestMetadata("delegation.kt")
            public void testDelegation() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/delegation.kt");
            }

            @Test
            @TestMetadata("differentErasureInSuperClass.kt")
            public void testDifferentErasureInSuperClass() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClass.kt");
            }

            @Test
            @TestMetadata("differentErasureInSuperClassComplex.kt")
            public void testDifferentErasureInSuperClassComplex() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/differentErasureInSuperClassComplex.kt");
            }

            @Test
            @TestMetadata("enum.kt")
            public void testEnum() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/enum.kt");
            }

            @Test
            @TestMetadata("genericMethod.kt")
            public void testGenericMethod() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/genericMethod.kt");
            }

            @Test
            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/object.kt");
            }

            @Test
            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/property.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/simple.kt");
            }

            @Test
            @TestMetadata("upperBound.kt")
            public void testUpperBound() throws Exception {
                runTest("compiler/testData/codegen/box/bridges/substitutionInSuperClass/upperBound.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/builtinStubMethods")
    @TestDataPath("$PROJECT_ROOT")
    public class BuiltinStubMethods extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("abstractMember.kt")
        public void testAbstractMember() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/abstractMember.kt");
        }

        @Test
        public void testAllFilesPresentInBuiltinStubMethods() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("Collection.kt")
        public void testCollection() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/Collection.kt");
        }

        @Test
        @TestMetadata("customReadOnlyIterator.kt")
        public void testCustomReadOnlyIterator() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/customReadOnlyIterator.kt");
        }

        @Test
        @TestMetadata("delegationToArrayList.kt")
        public void testDelegationToArrayList() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/delegationToArrayList.kt");
        }

        @Test
        @TestMetadata("immutableRemove.kt")
        public void testImmutableRemove() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/immutableRemove.kt");
        }

        @Test
        @TestMetadata("implementationInTrait.kt")
        public void testImplementationInTrait() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/implementationInTrait.kt");
        }

        @Test
        @TestMetadata("inheritedImplementations.kt")
        public void testInheritedImplementations() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/inheritedImplementations.kt");
        }

        @Test
        @TestMetadata("Iterator.kt")
        public void testIterator() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/Iterator.kt");
        }

        @Test
        @TestMetadata("IteratorWithRemove.kt")
        public void testIteratorWithRemove() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/IteratorWithRemove.kt");
        }

        @Test
        @TestMetadata("List.kt")
        public void testList() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/List.kt");
        }

        @Test
        @TestMetadata("ListIterator.kt")
        public void testListIterator() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/ListIterator.kt");
        }

        @Test
        @TestMetadata("ListWithAllImplementations.kt")
        public void testListWithAllImplementations() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/ListWithAllImplementations.kt");
        }

        @Test
        @TestMetadata("ListWithAllInheritedImplementations.kt")
        public void testListWithAllInheritedImplementations() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/ListWithAllInheritedImplementations.kt");
        }

        @Test
        @TestMetadata("manyTypeParametersWithUpperBounds.kt")
        public void testManyTypeParametersWithUpperBounds() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/manyTypeParametersWithUpperBounds.kt");
        }

        @Test
        @TestMetadata("Map.kt")
        public void testMap() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/Map.kt");
        }

        @Test
        @TestMetadata("MapEntry.kt")
        public void testMapEntry() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/MapEntry.kt");
        }

        @Test
        @TestMetadata("MapEntryWithSetValue.kt")
        public void testMapEntryWithSetValue() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/MapEntryWithSetValue.kt");
        }

        @Test
        @TestMetadata("MapWithAllImplementations.kt")
        public void testMapWithAllImplementations() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/MapWithAllImplementations.kt");
        }

        @Test
        @TestMetadata("nonTrivialSubstitution.kt")
        public void testNonTrivialSubstitution() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/nonTrivialSubstitution.kt");
        }

        @Test
        @TestMetadata("nonTrivialUpperBound.kt")
        public void testNonTrivialUpperBound() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/nonTrivialUpperBound.kt");
        }

        @Test
        @TestMetadata("substitutedIterable.kt")
        public void testSubstitutedIterable() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/substitutedIterable.kt");
        }

        @Test
        @TestMetadata("SubstitutedList.kt")
        public void testSubstitutedList() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/SubstitutedList.kt");
        }

        @Test
        @TestMetadata("substitutedListWithExtraSuperInterface.kt")
        public void testSubstitutedListWithExtraSuperInterface() throws Exception {
            runTest("compiler/testData/codegen/box/builtinStubMethods/substitutedListWithExtraSuperInterface.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections")
        @TestDataPath("$PROJECT_ROOT")
        public class ExtendJavaCollections extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("abstractList.kt")
            public void testAbstractList() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/abstractList.kt");
            }

            @Test
            @TestMetadata("abstractMap.kt")
            public void testAbstractMap() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/abstractMap.kt");
            }

            @Test
            @TestMetadata("abstractSet.kt")
            public void testAbstractSet() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/abstractSet.kt");
            }

            @Test
            public void testAllFilesPresentInExtendJavaCollections() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("arrayList.kt")
            public void testArrayList() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/arrayList.kt");
            }

            @Test
            @TestMetadata("hashMap.kt")
            public void testHashMap() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/hashMap.kt");
            }

            @Test
            @TestMetadata("hashSet.kt")
            public void testHashSet() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/hashSet.kt");
            }

            @Test
            @TestMetadata("mapEntry.kt")
            public void testMapEntry() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/extendJavaCollections/mapEntry.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault")
        @TestDataPath("$PROJECT_ROOT")
        public class MapGetOrDefault extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMapGetOrDefault() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("noTypeSafeBridge.kt")
            public void testNoTypeSafeBridge() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault/noTypeSafeBridge.kt");
            }

            @Test
            @TestMetadata("typeSafeBridge.kt")
            public void testTypeSafeBridge() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault/typeSafeBridge.kt");
            }

            @Test
            @TestMetadata("typeSafeBridgeNotNullAny.kt")
            public void testTypeSafeBridgeNotNullAny() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/mapGetOrDefault/typeSafeBridgeNotNullAny.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/builtinStubMethods/mapRemove")
        @TestDataPath("$PROJECT_ROOT")
        public class MapRemove extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMapRemove() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/builtinStubMethods/mapRemove"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("noDefaultImpls.kt")
            public void testNoDefaultImpls() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/noDefaultImpls.kt");
            }

            @Test
            @TestMetadata("readOnlyMap.kt")
            public void testReadOnlyMap() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/readOnlyMap.kt");
            }

            @Test
            @TestMetadata("typeSafeBridge.kt")
            public void testTypeSafeBridge() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/typeSafeBridge.kt");
            }

            @Test
            @TestMetadata("typeSafeBridgeNotNullAny.kt")
            public void testTypeSafeBridgeNotNullAny() throws Exception {
                runTest("compiler/testData/codegen/box/builtinStubMethods/mapRemove/typeSafeBridgeNotNullAny.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReference extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInCallableReference() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("builtinFunctionReferenceOwner.kt")
        public void testBuiltinFunctionReferenceOwner() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/builtinFunctionReferenceOwner.kt");
        }

        @Test
        @TestMetadata("classesAreSynthetic.kt")
        public void testClassesAreSynthetic() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/classesAreSynthetic.kt");
        }

        @Test
        @TestMetadata("genericConstructorReference.kt")
        public void testGenericConstructorReference() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/genericConstructorReference.kt");
        }

        @Test
        @TestMetadata("genericLocalClassConstructorReference.kt")
        public void testGenericLocalClassConstructorReference() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/genericLocalClassConstructorReference.kt");
        }

        @Test
        @TestMetadata("javaField.kt")
        public void testJavaField() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/javaField.kt");
        }

        @Test
        @TestMetadata("kt16752.kt")
        public void testKt16752() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/kt16752.kt");
        }

        @Test
        @TestMetadata("kt21014.kt")
        public void testKt21014() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/kt21014.kt");
        }

        @Test
        @TestMetadata("kt21092a.kt")
        public void testKt21092a() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/kt21092a.kt");
        }

        @Test
        @TestMetadata("kt21092b.kt")
        public void testKt21092b() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/kt21092b.kt");
        }

        @Test
        @TestMetadata("kt37604.kt")
        public void testKt37604() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/kt37604.kt");
        }

        @Test
        @TestMetadata("nested.kt")
        public void testNested() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/nested.kt");
        }

        @Test
        @TestMetadata("optimizedSuperclasses_after.kt")
        public void testOptimizedSuperclasses_after() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/optimizedSuperclasses_after.kt");
        }

        @Test
        @TestMetadata("optimizedSuperclasses_before.kt")
        public void testOptimizedSuperclasses_before() throws Exception {
            runTest("compiler/testData/codegen/box/callableReference/optimizedSuperclasses_before.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/callableReference/adaptedReferences")
        @TestDataPath("$PROJECT_ROOT")
        public class AdaptedReferences extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInAdaptedReferences() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/adaptedReferences"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("bothWithCoercionToUnit.kt")
            public void testBothWithCoercionToUnit() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/bothWithCoercionToUnit.kt");
            }

            @Test
            @TestMetadata("boundReferences.kt")
            public void testBoundReferences() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/boundReferences.kt");
            }

            @Test
            @TestMetadata("defaultAfterVararg.kt")
            public void testDefaultAfterVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/defaultAfterVararg.kt");
            }

            @Test
            @TestMetadata("defaultWithGenericExpectedType.kt")
            public void testDefaultWithGenericExpectedType() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/defaultWithGenericExpectedType.kt");
            }

            @Test
            @TestMetadata("emptyVarargAndDefault.kt")
            public void testEmptyVarargAndDefault() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/emptyVarargAndDefault.kt");
            }

            @Test
            @TestMetadata("inlineBound.kt")
            public void testInlineBound() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineBound.kt");
            }

            @Test
            @TestMetadata("inlineDefault.kt")
            public void testInlineDefault() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineDefault.kt");
            }

            @Test
            @TestMetadata("inlineVararg.kt")
            public void testInlineVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVararg.kt");
            }

            @Test
            @TestMetadata("inlineVarargAndDefault.kt")
            public void testInlineVarargAndDefault() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVarargAndDefault.kt");
            }

            @Test
            @TestMetadata("inlineVarargInts.kt")
            public void testInlineVarargInts() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/inlineVarargInts.kt");
            }

            @Test
            @TestMetadata("innerConstructorWithVararg.kt")
            public void testInnerConstructorWithVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/innerConstructorWithVararg.kt");
            }

            @Test
            @TestMetadata("largeVararg.kt")
            public void testLargeVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/largeVararg.kt");
            }

            @Test
            @TestMetadata("localFunctionWithDefault.kt")
            public void testLocalFunctionWithDefault() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/localFunctionWithDefault.kt");
            }

            @Test
            @TestMetadata("manyDefaultsAndVararg.kt")
            public void testManyDefaultsAndVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/manyDefaultsAndVararg.kt");
            }

            @Test
            @TestMetadata("noAdaptedReferencesIfNoOptimizedReferencesEnabled.kt")
            public void testNoAdaptedReferencesIfNoOptimizedReferencesEnabled() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noAdaptedReferencesIfNoOptimizedReferencesEnabled.kt");
            }

            @Test
            @TestMetadata("noNameClashForReferencesToSameFunction.kt")
            public void testNoNameClashForReferencesToSameFunction() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noNameClashForReferencesToSameFunction.kt");
            }

            @Test
            @TestMetadata("noReflectionForAdaptedCallableReferences.kt")
            public void testNoReflectionForAdaptedCallableReferences() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noReflectionForAdaptedCallableReferences.kt");
            }

            @Test
            @TestMetadata("noReflectionForAdaptedCallableReferencesWithSuspendConversion.kt")
            public void testNoReflectionForAdaptedCallableReferencesWithSuspendConversion() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/noReflectionForAdaptedCallableReferencesWithSuspendConversion.kt");
            }

            @Test
            @TestMetadata("referenceToVarargWithDefaults.kt")
            public void testReferenceToVarargWithDefaults() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/referenceToVarargWithDefaults.kt");
            }

            @Test
            @TestMetadata("reflectionForVarargAsArray.kt")
            public void testReflectionForVarargAsArray() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/reflectionForVarargAsArray.kt");
            }

            @Test
            @TestMetadata("simpleDefaultArgument.kt")
            public void testSimpleDefaultArgument() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/simpleDefaultArgument.kt");
            }

            @Test
            @TestMetadata("simpleEmptyVararg.kt")
            public void testSimpleEmptyVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/simpleEmptyVararg.kt");
            }

            @Test
            @TestMetadata("toStringNoReflect.kt")
            public void testToStringNoReflect() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/toStringNoReflect.kt");
            }

            @Test
            @TestMetadata("unboundReferences.kt")
            public void testUnboundReferences() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/unboundReferences.kt");
            }

            @Test
            @TestMetadata("varargViewedAsArray.kt")
            public void testVarargViewedAsArray() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargViewedAsArray.kt");
            }

            @Test
            @TestMetadata("varargViewedAsPrimitiveArray.kt")
            public void testVarargViewedAsPrimitiveArray() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargViewedAsPrimitiveArray.kt");
            }

            @Test
            @TestMetadata("varargWithDefaultValue.kt")
            public void testVarargWithDefaultValue() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/varargWithDefaultValue.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion")
            @TestDataPath("$PROJECT_ROOT")
            public class SuspendConversion extends AbstractBlackBoxCodegenTest {
                @Test
                @TestMetadata("adaptedWithCoercionToUnit.kt")
                public void testAdaptedWithCoercionToUnit() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithCoercionToUnit.kt");
                }

                @Test
                @TestMetadata("adaptedWithDefaultArguments.kt")
                public void testAdaptedWithDefaultArguments() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithDefaultArguments.kt");
                }

                @Test
                @TestMetadata("adaptedWithVarargs.kt")
                public void testAdaptedWithVarargs() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/adaptedWithVarargs.kt");
                }

                @Test
                public void testAllFilesPresentInSuspendConversion() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("bound.kt")
                public void testBound() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/bound.kt");
                }

                @Test
                @TestMetadata("boundExtension.kt")
                public void testBoundExtension() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/boundExtension.kt");
                }

                @Test
                @TestMetadata("crossInline.kt")
                public void testCrossInline() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/crossInline.kt");
                }

                @Test
                @TestMetadata("inlineAdaptedWithCoercionToUnit.kt")
                public void testInlineAdaptedWithCoercionToUnit() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithCoercionToUnit.kt");
                }

                @Test
                @TestMetadata("inlineAdaptedWithDefaultArguments.kt")
                public void testInlineAdaptedWithDefaultArguments() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithDefaultArguments.kt");
                }

                @Test
                @TestMetadata("inlineAdaptedWithVarargs.kt")
                public void testInlineAdaptedWithVarargs() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineAdaptedWithVarargs.kt");
                }

                @Test
                @TestMetadata("inlineBound.kt")
                public void testInlineBound() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineBound.kt");
                }

                @Test
                @TestMetadata("inlineSimple.kt")
                public void testInlineSimple() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineSimple.kt");
                }

                @Test
                @TestMetadata("inlineWithParameters.kt")
                public void testInlineWithParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/inlineWithParameters.kt");
                }

                @Test
                @TestMetadata("isAs.kt")
                public void testIsAs() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/isAs.kt");
                }

                @Test
                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/simple.kt");
                }

                @Test
                @TestMetadata("withParameters.kt")
                public void testWithParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/adaptedReferences/suspendConversion/withParameters.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/callableReference/bound")
        @TestDataPath("$PROJECT_ROOT")
        public class Bound extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("adapted.kt")
            public void testAdapted() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/adapted.kt");
            }

            @Test
            public void testAllFilesPresentInBound() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/array.kt");
            }

            @Test
            @TestMetadata("arrayGetIntrinsic.kt")
            public void testArrayGetIntrinsic() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/arrayGetIntrinsic.kt");
            }

            @Test
            @TestMetadata("boundJvmFieldInInterfaceCompanion.kt")
            public void testBoundJvmFieldInInterfaceCompanion() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/boundJvmFieldInInterfaceCompanion.kt");
            }

            @Test
            @TestMetadata("boundReferenceToOverloadedFunction.kt")
            public void testBoundReferenceToOverloadedFunction() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/boundReferenceToOverloadedFunction.kt");
            }

            @Test
            @TestMetadata("captureVarInInitBlock.kt")
            public void testCaptureVarInInitBlock() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/captureVarInInitBlock.kt");
            }

            @Test
            @TestMetadata("captureVarInPropertyInit.kt")
            public void testCaptureVarInPropertyInit() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/captureVarInPropertyInit.kt");
            }

            @Test
            @TestMetadata("coercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/coercionToUnit.kt");
            }

            @Test
            @TestMetadata("companionObjectReceiver.kt")
            public void testCompanionObjectReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/companionObjectReceiver.kt");
            }

            @Test
            @TestMetadata("dontShareReceiver.kt")
            public void testDontShareReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/dontShareReceiver.kt");
            }

            @Test
            @TestMetadata("emptyLHS.kt")
            public void testEmptyLHS() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/emptyLHS.kt");
            }

            @Test
            @TestMetadata("enumEntryMember.kt")
            public void testEnumEntryMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/enumEntryMember.kt");
            }

            @Test
            @TestMetadata("genericValOnLHS.kt")
            public void testGenericValOnLHS() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/genericValOnLHS.kt");
            }

            @Test
            @TestMetadata("javaField.kt")
            public void testJavaField() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/javaField.kt");
            }

            @Test
            @TestMetadata("kCallableNameIntrinsic.kt")
            public void testKCallableNameIntrinsic() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/kCallableNameIntrinsic.kt");
            }

            @Test
            @TestMetadata("kt12738.kt")
            public void testKt12738() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/kt12738.kt");
            }

            @Test
            @TestMetadata("kt15446.kt")
            public void testKt15446() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/kt15446.kt");
            }

            @Test
            @TestMetadata("localUnitFunction.kt")
            public void testLocalUnitFunction() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/localUnitFunction.kt");
            }

            @Test
            @TestMetadata("multiCase.kt")
            public void testMultiCase() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/multiCase.kt");
            }

            @Test
            @TestMetadata("nullReceiver.kt")
            public void testNullReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/nullReceiver.kt");
            }

            @Test
            @TestMetadata("objectReceiver.kt")
            public void testObjectReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/objectReceiver.kt");
            }

            @Test
            @TestMetadata("primitiveReceiver.kt")
            public void testPrimitiveReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/primitiveReceiver.kt");
            }

            @Test
            @TestMetadata("receiverEvaluatedOnce.kt")
            public void testReceiverEvaluatedOnce() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/receiverEvaluatedOnce.kt");
            }

            @Test
            @TestMetadata("referenceToGetSetMethodsFromVararg.kt")
            public void testReferenceToGetSetMethodsFromVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/referenceToGetSetMethodsFromVararg.kt");
            }

            @Test
            @TestMetadata("simpleFunction.kt")
            public void testSimpleFunction() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/simpleFunction.kt");
            }

            @Test
            @TestMetadata("simpleProperty.kt")
            public void testSimpleProperty() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/simpleProperty.kt");
            }

            @Test
            @TestMetadata("smartCastForExtensionReceiver.kt")
            public void testSmartCastForExtensionReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/smartCastForExtensionReceiver.kt");
            }

            @Test
            @TestMetadata("syntheticExtensionOnLHS.kt")
            public void testSyntheticExtensionOnLHS() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/bound/syntheticExtensionOnLHS.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/callableReference/bound/equals")
            @TestDataPath("$PROJECT_ROOT")
            public class Equals extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInEquals() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/bound/equals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("nullableReceiverInEquals.kt")
                public void testNullableReceiverInEquals() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/bound/equals/nullableReceiverInEquals.kt");
                }

                @Test
                @TestMetadata("propertyAccessors.kt")
                public void testPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/bound/equals/propertyAccessors.kt");
                }

                @Test
                @TestMetadata("receiverInEquals.kt")
                public void testReceiverInEquals() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/bound/equals/receiverInEquals.kt");
                }

                @Test
                @TestMetadata("reflectionReference.kt")
                public void testReflectionReference() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/bound/equals/reflectionReference.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/callableReference/equality")
        @TestDataPath("$PROJECT_ROOT")
        public class Equality extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEquality() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/equality"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("capturedDefaults.kt")
            public void testCapturedDefaults() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/capturedDefaults.kt");
            }

            @Test
            @TestMetadata("capturedVararg.kt")
            public void testCapturedVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/capturedVararg.kt");
            }

            @Test
            @TestMetadata("coercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnit.kt");
            }

            @Test
            @TestMetadata("coercionToUnitWithDefaults.kt")
            public void testCoercionToUnitWithDefaults() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnitWithDefaults.kt");
            }

            @Test
            @TestMetadata("coercionToUnitWithVararg.kt")
            public void testCoercionToUnitWithVararg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/coercionToUnitWithVararg.kt");
            }

            @Test
            @TestMetadata("extensionReceiverVsDefault.kt")
            public void testExtensionReceiverVsDefault() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/extensionReceiverVsDefault.kt");
            }

            @Test
            @TestMetadata("noCoercionToUnitIfFunctionAlreadyReturnsUnit.kt")
            public void testNoCoercionToUnitIfFunctionAlreadyReturnsUnit() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/noCoercionToUnitIfFunctionAlreadyReturnsUnit.kt");
            }

            @Test
            @TestMetadata("simpleEquality.kt")
            public void testSimpleEquality() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/simpleEquality.kt");
            }

            @Test
            @TestMetadata("suspendConversion.kt")
            public void testSuspendConversion() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/suspendConversion.kt");
            }

            @Test
            @TestMetadata("varargAsArrayMemberOrExtension.kt")
            public void testVarargAsArrayMemberOrExtension() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/varargAsArrayMemberOrExtension.kt");
            }

            @Test
            @TestMetadata("varargAsArrayWithDefaults.kt")
            public void testVarargAsArrayWithDefaults() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/varargAsArrayWithDefaults.kt");
            }

            @Test
            @TestMetadata("varargWithDefaults.kt")
            public void testVarargWithDefaults() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/equality/varargWithDefaults.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/callableReference/function")
        @TestDataPath("$PROJECT_ROOT")
        public class Function extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("abstractClassMember.kt")
            public void testAbstractClassMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/abstractClassMember.kt");
            }

            @Test
            public void testAllFilesPresentInFunction() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("argumentTypes.kt")
            public void testArgumentTypes() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/argumentTypes.kt");
            }

            @Test
            @TestMetadata("booleanNotIntrinsic.kt")
            public void testBooleanNotIntrinsic() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/booleanNotIntrinsic.kt");
            }

            @Test
            @TestMetadata("classMemberFromClass.kt")
            public void testClassMemberFromClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromClass.kt");
            }

            @Test
            @TestMetadata("classMemberFromCompanionObject.kt")
            public void testClassMemberFromCompanionObject() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromCompanionObject.kt");
            }

            @Test
            @TestMetadata("classMemberFromExtension.kt")
            public void testClassMemberFromExtension() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromExtension.kt");
            }

            @Test
            @TestMetadata("classMemberFromTopLevelStringNoArgs.kt")
            public void testClassMemberFromTopLevelStringNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringNoArgs.kt");
            }

            @Test
            @TestMetadata("classMemberFromTopLevelStringOneStringArg.kt")
            public void testClassMemberFromTopLevelStringOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelStringOneStringArg.kt");
            }

            @Test
            @TestMetadata("classMemberFromTopLevelUnitNoArgs.kt")
            public void testClassMemberFromTopLevelUnitNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitNoArgs.kt");
            }

            @Test
            @TestMetadata("classMemberFromTopLevelUnitOneStringArg.kt")
            public void testClassMemberFromTopLevelUnitOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/classMemberFromTopLevelUnitOneStringArg.kt");
            }

            @Test
            @TestMetadata("coercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/coercionToUnit.kt");
            }

            @Test
            @TestMetadata("constructorFromTopLevelNoArgs.kt")
            public void testConstructorFromTopLevelNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelNoArgs.kt");
            }

            @Test
            @TestMetadata("constructorFromTopLevelOneStringArg.kt")
            public void testConstructorFromTopLevelOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/constructorFromTopLevelOneStringArg.kt");
            }

            @Test
            @TestMetadata("enumValueOfMethod.kt")
            public void testEnumValueOfMethod() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/enumValueOfMethod.kt");
            }

            @Test
            @TestMetadata("equalsIntrinsic.kt")
            public void testEqualsIntrinsic() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/equalsIntrinsic.kt");
            }

            @Test
            @TestMetadata("extensionFromClass.kt")
            public void testExtensionFromClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/extensionFromClass.kt");
            }

            @Test
            @TestMetadata("extensionFromExtension.kt")
            public void testExtensionFromExtension() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/extensionFromExtension.kt");
            }

            @Test
            @TestMetadata("extensionFromTopLevelStringNoArgs.kt")
            public void testExtensionFromTopLevelStringNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringNoArgs.kt");
            }

            @Test
            @TestMetadata("extensionFromTopLevelStringOneStringArg.kt")
            public void testExtensionFromTopLevelStringOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelStringOneStringArg.kt");
            }

            @Test
            @TestMetadata("extensionFromTopLevelUnitNoArgs.kt")
            public void testExtensionFromTopLevelUnitNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitNoArgs.kt");
            }

            @Test
            @TestMetadata("extensionFromTopLevelUnitOneStringArg.kt")
            public void testExtensionFromTopLevelUnitOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/extensionFromTopLevelUnitOneStringArg.kt");
            }

            @Test
            @TestMetadata("genericCallableReferenceArguments.kt")
            public void testGenericCallableReferenceArguments() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferenceArguments.kt");
            }

            @Test
            @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
            public void testGenericCallableReferencesWithNullableTypes() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithNullableTypes.kt");
            }

            @Test
            @TestMetadata("genericCallableReferencesWithOverload.kt")
            public void testGenericCallableReferencesWithOverload() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/genericCallableReferencesWithOverload.kt");
            }

            @Test
            @TestMetadata("genericMember.kt")
            public void testGenericMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/genericMember.kt");
            }

            @Test
            @TestMetadata("genericWithDependentType.kt")
            public void testGenericWithDependentType() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/genericWithDependentType.kt");
            }

            @Test
            @TestMetadata("getArityViaFunctionImpl.kt")
            public void testGetArityViaFunctionImpl() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/getArityViaFunctionImpl.kt");
            }

            @Test
            @TestMetadata("innerClassConstructorWithTwoReceivers.kt")
            public void testInnerClassConstructorWithTwoReceivers() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/innerClassConstructorWithTwoReceivers.kt");
            }

            @Test
            @TestMetadata("innerConstructorFromClass.kt")
            public void testInnerConstructorFromClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromClass.kt");
            }

            @Test
            @TestMetadata("innerConstructorFromExtension.kt")
            public void testInnerConstructorFromExtension() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromExtension.kt");
            }

            @Test
            @TestMetadata("innerConstructorFromTopLevelNoArgs.kt")
            public void testInnerConstructorFromTopLevelNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelNoArgs.kt");
            }

            @Test
            @TestMetadata("innerConstructorFromTopLevelOneStringArg.kt")
            public void testInnerConstructorFromTopLevelOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/innerConstructorFromTopLevelOneStringArg.kt");
            }

            @Test
            @TestMetadata("javaCollectionsStaticMethod.kt")
            public void testJavaCollectionsStaticMethod() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/javaCollectionsStaticMethod.kt");
            }

            @Test
            @TestMetadata("kt21787.kt")
            public void testKt21787() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/kt21787.kt");
            }

            @Test
            @TestMetadata("kt32462.kt")
            public void testKt32462() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/kt32462.kt");
            }

            @Test
            @TestMetadata("nestedConstructorFromClass.kt")
            public void testNestedConstructorFromClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromClass.kt");
            }

            @Test
            @TestMetadata("nestedConstructorFromTopLevelNoArgs.kt")
            public void testNestedConstructorFromTopLevelNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelNoArgs.kt");
            }

            @Test
            @TestMetadata("nestedConstructorFromTopLevelOneStringArg.kt")
            public void testNestedConstructorFromTopLevelOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/nestedConstructorFromTopLevelOneStringArg.kt");
            }

            @Test
            @TestMetadata("newArray.kt")
            public void testNewArray() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/newArray.kt");
            }

            @Test
            @TestMetadata("overloadedFun.kt")
            public void testOverloadedFun() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/overloadedFun.kt");
            }

            @Test
            @TestMetadata("overloadedFunVsVal.kt")
            public void testOverloadedFunVsVal() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/overloadedFunVsVal.kt");
            }

            @Test
            @TestMetadata("privateClassMember.kt")
            public void testPrivateClassMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/privateClassMember.kt");
            }

            @Test
            @TestMetadata("referenceToCompanionMember.kt")
            public void testReferenceToCompanionMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/referenceToCompanionMember.kt");
            }

            @Test
            @TestMetadata("sortListOfStrings.kt")
            public void testSortListOfStrings() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/sortListOfStrings.kt");
            }

            @Test
            @TestMetadata("specialCalls.kt")
            public void testSpecialCalls() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/specialCalls.kt");
            }

            @Test
            @TestMetadata("staticFunctionReference.kt")
            public void testStaticFunctionReference() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/staticFunctionReference.kt");
            }

            @Test
            @TestMetadata("topLevelFromClass.kt")
            public void testTopLevelFromClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromClass.kt");
            }

            @Test
            @TestMetadata("topLevelFromExtension.kt")
            public void testTopLevelFromExtension() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromExtension.kt");
            }

            @Test
            @TestMetadata("topLevelFromTopLevelStringNoArgs.kt")
            public void testTopLevelFromTopLevelStringNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringNoArgs.kt");
            }

            @Test
            @TestMetadata("topLevelFromTopLevelStringOneStringArg.kt")
            public void testTopLevelFromTopLevelStringOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelStringOneStringArg.kt");
            }

            @Test
            @TestMetadata("topLevelFromTopLevelUnitManyArgs.kt")
            public void testTopLevelFromTopLevelUnitManyArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitManyArgs.kt");
            }

            @Test
            @TestMetadata("topLevelFromTopLevelUnitNoArgs.kt")
            public void testTopLevelFromTopLevelUnitNoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitNoArgs.kt");
            }

            @Test
            @TestMetadata("topLevelFromTopLevelUnitOneStringArg.kt")
            public void testTopLevelFromTopLevelUnitOneStringArg() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/topLevelFromTopLevelUnitOneStringArg.kt");
            }

            @Test
            @TestMetadata("traitImplMethodWithClassReceiver.kt")
            public void testTraitImplMethodWithClassReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/traitImplMethodWithClassReceiver.kt");
            }

            @Test
            @TestMetadata("traitMember.kt")
            public void testTraitMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/function/traitMember.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/callableReference/function/local")
            @TestDataPath("$PROJECT_ROOT")
            public class Local extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLocal() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/function/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("captureOuter.kt")
                public void testCaptureOuter() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/captureOuter.kt");
                }

                @Test
                @TestMetadata("classMember.kt")
                public void testClassMember() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/classMember.kt");
                }

                @Test
                @TestMetadata("closureWithSideEffect.kt")
                public void testClosureWithSideEffect() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/closureWithSideEffect.kt");
                }

                @Test
                @TestMetadata("constructor.kt")
                public void testConstructor() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/constructor.kt");
                }

                @Test
                @TestMetadata("constructorWithInitializer.kt")
                public void testConstructorWithInitializer() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/constructorWithInitializer.kt");
                }

                @Test
                @TestMetadata("enumExtendsTrait.kt")
                public void testEnumExtendsTrait() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/enumExtendsTrait.kt");
                }

                @Test
                @TestMetadata("equalsHashCode.kt")
                public void testEqualsHashCode() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/equalsHashCode.kt");
                }

                @Test
                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/extension.kt");
                }

                @Test
                @TestMetadata("extensionToLocalClass.kt")
                public void testExtensionToLocalClass() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToLocalClass.kt");
                }

                @Test
                @TestMetadata("extensionToPrimitive.kt")
                public void testExtensionToPrimitive() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/extensionToPrimitive.kt");
                }

                @Test
                @TestMetadata("extensionWithClosure.kt")
                public void testExtensionWithClosure() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/extensionWithClosure.kt");
                }

                @Test
                @TestMetadata("genericMember.kt")
                public void testGenericMember() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/genericMember.kt");
                }

                @Test
                @TestMetadata("localClassMember.kt")
                public void testLocalClassMember() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/localClassMember.kt");
                }

                @Test
                @TestMetadata("localFunctionName.kt")
                public void testLocalFunctionName() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/localFunctionName.kt");
                }

                @Test
                @TestMetadata("localLocal.kt")
                public void testLocalLocal() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/localLocal.kt");
                }

                @Test
                @TestMetadata("recursiveClosure.kt")
                public void testRecursiveClosure() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/recursiveClosure.kt");
                }

                @Test
                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/simple.kt");
                }

                @Test
                @TestMetadata("simpleClosure.kt")
                public void testSimpleClosure() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/simpleClosure.kt");
                }

                @Test
                @TestMetadata("simpleWithArg.kt")
                public void testSimpleWithArg() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/simpleWithArg.kt");
                }

                @Test
                @TestMetadata("unitWithSideEffect.kt")
                public void testUnitWithSideEffect() throws Exception {
                    runTest("compiler/testData/codegen/box/callableReference/function/local/unitWithSideEffect.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/callableReference/property")
        @TestDataPath("$PROJECT_ROOT")
        public class Property extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("accessViaSubclass.kt")
            public void testAccessViaSubclass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/accessViaSubclass.kt");
            }

            @Test
            public void testAllFilesPresentInProperty() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/property"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("delegated.kt")
            public void testDelegated() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/delegated.kt");
            }

            @Test
            @TestMetadata("delegatedMutable.kt")
            public void testDelegatedMutable() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/delegatedMutable.kt");
            }

            @Test
            @TestMetadata("enumNameOrdinal.kt")
            public void testEnumNameOrdinal() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/enumNameOrdinal.kt");
            }

            @Test
            @TestMetadata("extensionToArray.kt")
            public void testExtensionToArray() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/extensionToArray.kt");
            }

            @Test
            @TestMetadata("genericProperty.kt")
            public void testGenericProperty() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/genericProperty.kt");
            }

            @Test
            @TestMetadata("inEnum.kt")
            public void testInEnum() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/inEnum.kt");
            }

            @Test
            @TestMetadata("inReceiverOfAnother.kt")
            public void testInReceiverOfAnother() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/inReceiverOfAnother.kt");
            }

            @Test
            @TestMetadata("invokePropertyReference.kt")
            public void testInvokePropertyReference() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/invokePropertyReference.kt");
            }

            @Test
            @TestMetadata("javaBeanConvention.kt")
            public void testJavaBeanConvention() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/javaBeanConvention.kt");
            }

            @Test
            @TestMetadata("kClassInstanceIsInitializedFirst.kt")
            public void testKClassInstanceIsInitializedFirst() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/kClassInstanceIsInitializedFirst.kt");
            }

            @Test
            @TestMetadata("kt12044.kt")
            public void testKt12044() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/kt12044.kt");
            }

            @Test
            @TestMetadata("kt12982_protectedPropertyReference.kt")
            public void testKt12982_protectedPropertyReference() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/kt12982_protectedPropertyReference.kt");
            }

            @Test
            @TestMetadata("kt14330.kt")
            public void testKt14330() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/kt14330.kt");
            }

            @Test
            @TestMetadata("kt14330_2.kt")
            public void testKt14330_2() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/kt14330_2.kt");
            }

            @Test
            @TestMetadata("kt15447.kt")
            public void testKt15447() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/kt15447.kt");
            }

            @Test
            @TestMetadata("kt6870_privatePropertyReference.kt")
            public void testKt6870_privatePropertyReference() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/kt6870_privatePropertyReference.kt");
            }

            @Test
            @TestMetadata("listOfStringsMapLength.kt")
            public void testListOfStringsMapLength() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/listOfStringsMapLength.kt");
            }

            @Test
            @TestMetadata("localClassVar.kt")
            public void testLocalClassVar() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/localClassVar.kt");
            }

            @Test
            @TestMetadata("overriddenInSubclass.kt")
            public void testOverriddenInSubclass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/overriddenInSubclass.kt");
            }

            @Test
            @TestMetadata("privateSetOuterClass.kt")
            public void testPrivateSetOuterClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/privateSetOuterClass.kt");
            }

            @Test
            @TestMetadata("privateSetterInsideClass.kt")
            public void testPrivateSetterInsideClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/privateSetterInsideClass.kt");
            }

            @Test
            @TestMetadata("privateSetterOutsideClass.kt")
            public void testPrivateSetterOutsideClass() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/privateSetterOutsideClass.kt");
            }

            @Test
            @TestMetadata("receiverEvaluatedOnce.kt")
            public void testReceiverEvaluatedOnce() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/receiverEvaluatedOnce.kt");
            }

            @Test
            @TestMetadata("simpleExtension.kt")
            public void testSimpleExtension() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/simpleExtension.kt");
            }

            @Test
            @TestMetadata("simpleMember.kt")
            public void testSimpleMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/simpleMember.kt");
            }

            @Test
            @TestMetadata("simpleMutableExtension.kt")
            public void testSimpleMutableExtension() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableExtension.kt");
            }

            @Test
            @TestMetadata("simpleMutableMember.kt")
            public void testSimpleMutableMember() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableMember.kt");
            }

            @Test
            @TestMetadata("simpleMutableTopLevel.kt")
            public void testSimpleMutableTopLevel() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/simpleMutableTopLevel.kt");
            }

            @Test
            @TestMetadata("simpleTopLevel.kt")
            public void testSimpleTopLevel() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/property/simpleTopLevel.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/callableReference/serializability")
        @TestDataPath("$PROJECT_ROOT")
        public class Serializability extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("adaptedReferences.kt")
            public void testAdaptedReferences() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/serializability/adaptedReferences.kt");
            }

            @Test
            public void testAllFilesPresentInSerializability() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/callableReference/serializability"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boundWithNotSerializableReceiver.kt")
            public void testBoundWithNotSerializableReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/serializability/boundWithNotSerializableReceiver.kt");
            }

            @Test
            @TestMetadata("boundWithSerializableReceiver.kt")
            public void testBoundWithSerializableReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/serializability/boundWithSerializableReceiver.kt");
            }

            @Test
            @TestMetadata("noReflect.kt")
            public void testNoReflect() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/serializability/noReflect.kt");
            }

            @Test
            @TestMetadata("reflectedIsNotSerialized.kt")
            public void testReflectedIsNotSerialized() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/serializability/reflectedIsNotSerialized.kt");
            }

            @Test
            @TestMetadata("withReflect.kt")
            public void testWithReflect() throws Exception {
                runTest("compiler/testData/codegen/box/callableReference/serializability/withReflect.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/casts")
    @TestDataPath("$PROJECT_ROOT")
    public class Casts extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInCasts() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("as.kt")
        public void testAs() throws Exception {
            runTest("compiler/testData/codegen/box/casts/as.kt");
        }

        @Test
        @TestMetadata("asForConstants.kt")
        public void testAsForConstants() throws Exception {
            runTest("compiler/testData/codegen/box/casts/asForConstants.kt");
        }

        @Test
        @TestMetadata("asSafe.kt")
        public void testAsSafe() throws Exception {
            runTest("compiler/testData/codegen/box/casts/asSafe.kt");
        }

        @Test
        @TestMetadata("asSafeFail.kt")
        public void testAsSafeFail() throws Exception {
            runTest("compiler/testData/codegen/box/casts/asSafeFail.kt");
        }

        @Test
        @TestMetadata("asSafeForConstants.kt")
        public void testAsSafeForConstants() throws Exception {
            runTest("compiler/testData/codegen/box/casts/asSafeForConstants.kt");
        }

        @Test
        @TestMetadata("asThrowsNpe_1_4.kt")
        public void testAsThrowsNpe_1_4() throws Exception {
            runTest("compiler/testData/codegen/box/casts/asThrowsNpe_1_4.kt");
        }

        @Test
        @TestMetadata("asUnit.kt")
        public void testAsUnit() throws Exception {
            runTest("compiler/testData/codegen/box/casts/asUnit.kt");
        }

        @Test
        @TestMetadata("asWithGeneric.kt")
        public void testAsWithGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/casts/asWithGeneric.kt");
        }

        @Test
        @TestMetadata("castGenericNull.kt")
        public void testCastGenericNull() throws Exception {
            runTest("compiler/testData/codegen/box/casts/castGenericNull.kt");
        }

        @Test
        @TestMetadata("dontCreateInconsistentTypeDuringStarProjectionSubstitution.kt")
        public void testDontCreateInconsistentTypeDuringStarProjectionSubstitution() throws Exception {
            runTest("compiler/testData/codegen/box/casts/dontCreateInconsistentTypeDuringStarProjectionSubstitution.kt");
        }

        @Test
        @TestMetadata("intersectionTypeMultipleBounds.kt")
        public void testIntersectionTypeMultipleBounds() throws Exception {
            runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBounds.kt");
        }

        @Test
        @TestMetadata("intersectionTypeMultipleBoundsImplicitReceiver.kt")
        public void testIntersectionTypeMultipleBoundsImplicitReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/casts/intersectionTypeMultipleBoundsImplicitReceiver.kt");
        }

        @Test
        @TestMetadata("intersectionTypeSmartcast.kt")
        public void testIntersectionTypeSmartcast() throws Exception {
            runTest("compiler/testData/codegen/box/casts/intersectionTypeSmartcast.kt");
        }

        @Test
        @TestMetadata("intersectionTypeWithMultipleBoundsAsReceiver.kt")
        public void testIntersectionTypeWithMultipleBoundsAsReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/casts/intersectionTypeWithMultipleBoundsAsReceiver.kt");
        }

        @Test
        @TestMetadata("intersectionTypeWithoutGenericsAsReceiver.kt")
        public void testIntersectionTypeWithoutGenericsAsReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/casts/intersectionTypeWithoutGenericsAsReceiver.kt");
        }

        @Test
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            runTest("compiler/testData/codegen/box/casts/is.kt");
        }

        @Test
        @TestMetadata("isNullablePrimitive.kt")
        public void testIsNullablePrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/casts/isNullablePrimitive.kt");
        }

        @Test
        @TestMetadata("kt22714.kt")
        public void testKt22714() throws Exception {
            runTest("compiler/testData/codegen/box/casts/kt22714.kt");
        }

        @Test
        @TestMetadata("lambdaToUnitCast.kt")
        public void testLambdaToUnitCast() throws Exception {
            runTest("compiler/testData/codegen/box/casts/lambdaToUnitCast.kt");
        }

        @Test
        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            runTest("compiler/testData/codegen/box/casts/notIs.kt");
        }

        @Test
        @TestMetadata("nullableSafeCastToTypeParameterWithInterfaceUpperBound.kt")
        public void testNullableSafeCastToTypeParameterWithInterfaceUpperBound() throws Exception {
            runTest("compiler/testData/codegen/box/casts/nullableSafeCastToTypeParameterWithInterfaceUpperBound.kt");
        }

        @Test
        @TestMetadata("unitAsAny.kt")
        public void testUnitAsAny() throws Exception {
            runTest("compiler/testData/codegen/box/casts/unitAsAny.kt");
        }

        @Test
        @TestMetadata("unitAsInt.kt")
        public void testUnitAsInt() throws Exception {
            runTest("compiler/testData/codegen/box/casts/unitAsInt.kt");
        }

        @Test
        @TestMetadata("unitAsSafeAny.kt")
        public void testUnitAsSafeAny() throws Exception {
            runTest("compiler/testData/codegen/box/casts/unitAsSafeAny.kt");
        }

        @Test
        @TestMetadata("unitNullableCast.kt")
        public void testUnitNullableCast() throws Exception {
            runTest("compiler/testData/codegen/box/casts/unitNullableCast.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/casts/functions")
        @TestDataPath("$PROJECT_ROOT")
        public class Functions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFunctions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("asFunKBig.kt")
            public void testAsFunKBig() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/asFunKBig.kt");
            }

            @Test
            @TestMetadata("asFunKSmall.kt")
            public void testAsFunKSmall() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/asFunKSmall.kt");
            }

            @Test
            @TestMetadata("isFunKBig.kt")
            public void testIsFunKBig() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/isFunKBig.kt");
            }

            @Test
            @TestMetadata("isFunKSmall.kt")
            public void testIsFunKSmall() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/isFunKSmall.kt");
            }

            @Test
            @TestMetadata("javaTypeIsFunK.kt")
            public void testJavaTypeIsFunK() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/javaTypeIsFunK.kt");
            }

            @Test
            @TestMetadata("reifiedAsFunKBig.kt")
            public void testReifiedAsFunKBig() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKBig.kt");
            }

            @Test
            @TestMetadata("reifiedAsFunKSmall.kt")
            public void testReifiedAsFunKSmall() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/reifiedAsFunKSmall.kt");
            }

            @Test
            @TestMetadata("reifiedIsFunKBig.kt")
            public void testReifiedIsFunKBig() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKBig.kt");
            }

            @Test
            @TestMetadata("reifiedIsFunKSmall.kt")
            public void testReifiedIsFunKSmall() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/reifiedIsFunKSmall.kt");
            }

            @Test
            @TestMetadata("reifiedSafeAsFunKBig.kt")
            public void testReifiedSafeAsFunKBig() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKBig.kt");
            }

            @Test
            @TestMetadata("reifiedSafeAsFunKSmall.kt")
            public void testReifiedSafeAsFunKSmall() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/reifiedSafeAsFunKSmall.kt");
            }

            @Test
            @TestMetadata("safeAsFunKBig.kt")
            public void testSafeAsFunKBig() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKBig.kt");
            }

            @Test
            @TestMetadata("safeAsFunKSmall.kt")
            public void testSafeAsFunKSmall() throws Exception {
                runTest("compiler/testData/codegen/box/casts/functions/safeAsFunKSmall.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/casts/javaInterop")
        @TestDataPath("$PROJECT_ROOT")
        public class JavaInterop extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJavaInterop() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("castWithWrongType.kt")
            public void testCastWithWrongType() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/castWithWrongType.kt");
            }

            @Test
            @TestMetadata("implicitNotNullWithWrongType.kt")
            public void testImplicitNotNullWithWrongType() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/implicitNotNullWithWrongType.kt");
            }

            @Test
            @TestMetadata("instanceOfWithWrongType.kt")
            public void testInstanceOfWithWrongType() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/instanceOfWithWrongType.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnCollectionContains.kt")
            public void testNoNullCheckOnCollectionContains() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnCollectionContains.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnCollectionRemove.kt")
            public void testNoNullCheckOnCollectionRemove() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnCollectionRemove.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnListIndexOf.kt")
            public void testNoNullCheckOnListIndexOf() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnListIndexOf.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnListLastIndexOf.kt")
            public void testNoNullCheckOnListLastIndexOf() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnListLastIndexOf.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnMapContainsKey.kt")
            public void testNoNullCheckOnMapContainsKey() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapContainsKey.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnMapContainsValue.kt")
            public void testNoNullCheckOnMapContainsValue() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapContainsValue.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnMapGet.kt")
            public void testNoNullCheckOnMapGet() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapGet.kt");
            }

            @Test
            @TestMetadata("noNullCheckOnMapRemove.kt")
            public void testNoNullCheckOnMapRemove() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/noNullCheckOnMapRemove.kt");
            }

            @Test
            @TestMetadata("nullCheckOnMapGetOrDefault.kt")
            public void testNullCheckOnMapGetOrDefault() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/nullCheckOnMapGetOrDefault.kt");
            }

            @Test
            @TestMetadata("nullCheckOnMapRemove2.kt")
            public void testNullCheckOnMapRemove2() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/nullCheckOnMapRemove2.kt");
            }

            @Test
            @TestMetadata("safeCastWithWrongType.kt")
            public void testSafeCastWithWrongType() throws Exception {
                runTest("compiler/testData/codegen/box/casts/javaInterop/safeCastWithWrongType.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument")
        @TestDataPath("$PROJECT_ROOT")
        public class LiteralExpressionAsGenericArgument extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInLiteralExpressionAsGenericArgument() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("binaryExpressionCast.kt")
            public void testBinaryExpressionCast() throws Exception {
                runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/binaryExpressionCast.kt");
            }

            @Test
            @TestMetadata("javaBox.kt")
            public void testJavaBox() throws Exception {
                runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/javaBox.kt");
            }

            @Test
            @TestMetadata("labeledExpressionCast.kt")
            public void testLabeledExpressionCast() throws Exception {
                runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/labeledExpressionCast.kt");
            }

            @Test
            @TestMetadata("parenthesizedExpressionCast.kt")
            public void testParenthesizedExpressionCast() throws Exception {
                runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/parenthesizedExpressionCast.kt");
            }

            @Test
            @TestMetadata("superConstructor.kt")
            public void testSuperConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/superConstructor.kt");
            }

            @Test
            @TestMetadata("unaryExpressionCast.kt")
            public void testUnaryExpressionCast() throws Exception {
                runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/unaryExpressionCast.kt");
            }

            @Test
            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                runTest("compiler/testData/codegen/box/casts/literalExpressionAsGenericArgument/vararg.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/casts/mutableCollections")
        @TestDataPath("$PROJECT_ROOT")
        public class MutableCollections extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMutableCollections() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/casts/mutableCollections"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("asWithMutable.kt")
            public void testAsWithMutable() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/asWithMutable.kt");
            }

            @Test
            @TestMetadata("isWithMutable.kt")
            public void testIsWithMutable() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/isWithMutable.kt");
            }

            @Test
            @TestMetadata("mutabilityMarkerInterfaces.kt")
            public void testMutabilityMarkerInterfaces() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/mutabilityMarkerInterfaces.kt");
            }

            @Test
            @TestMetadata("reifiedAsWithMutable.kt")
            public void testReifiedAsWithMutable() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedAsWithMutable.kt");
            }

            @Test
            @TestMetadata("reifiedIsWithMutable.kt")
            public void testReifiedIsWithMutable() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedIsWithMutable.kt");
            }

            @Test
            @TestMetadata("reifiedSafeAsWithMutable.kt")
            public void testReifiedSafeAsWithMutable() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/reifiedSafeAsWithMutable.kt");
            }

            @Test
            @TestMetadata("safeAsWithMutable.kt")
            public void testSafeAsWithMutable() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/safeAsWithMutable.kt");
            }

            @Test
            @TestMetadata("weirdMutableCasts.kt")
            public void testWeirdMutableCasts() throws Exception {
                runTest("compiler/testData/codegen/box/casts/mutableCollections/weirdMutableCasts.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/checkcastOptimization")
    @TestDataPath("$PROJECT_ROOT")
    public class CheckcastOptimization extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInCheckcastOptimization() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/checkcastOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("kt19128.kt")
        public void testKt19128() throws Exception {
            runTest("compiler/testData/codegen/box/checkcastOptimization/kt19128.kt");
        }

        @Test
        @TestMetadata("kt19246.kt")
        public void testKt19246() throws Exception {
            runTest("compiler/testData/codegen/box/checkcastOptimization/kt19246.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/classLiteral")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassLiteral extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInClassLiteral() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("bareArray.kt")
        public void testBareArray() throws Exception {
            runTest("compiler/testData/codegen/box/classLiteral/bareArray.kt");
        }

        @Test
        @TestMetadata("primitiveKClassEquality.kt")
        public void testPrimitiveKClassEquality() throws Exception {
            runTest("compiler/testData/codegen/box/classLiteral/primitiveKClassEquality.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/classLiteral/bound")
        @TestDataPath("$PROJECT_ROOT")
        public class Bound extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBound() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("javaIntrinsicWithSideEffect.kt")
            public void testJavaIntrinsicWithSideEffect() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/bound/javaIntrinsicWithSideEffect.kt");
            }

            @Test
            @TestMetadata("primitives.kt")
            public void testPrimitives() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/bound/primitives.kt");
            }

            @Test
            @TestMetadata("sideEffect.kt")
            public void testSideEffect() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/bound/sideEffect.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/bound/simple.kt");
            }

            @Test
            @TestMetadata("smartCast.kt")
            public void testSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/bound/smartCast.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/classLiteral/java")
        @TestDataPath("$PROJECT_ROOT")
        public class Java extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJava() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classLiteral/java"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("java.kt")
            public void testJava() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/java.kt");
            }

            @Test
            @TestMetadata("javaObjectType.kt")
            public void testJavaObjectType() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/javaObjectType.kt");
            }

            @Test
            @TestMetadata("javaObjectTypeReified.kt")
            public void testJavaObjectTypeReified() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/javaObjectTypeReified.kt");
            }

            @Test
            @TestMetadata("javaPrimitiveType.kt")
            public void testJavaPrimitiveType() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/javaPrimitiveType.kt");
            }

            @Test
            @TestMetadata("javaPrimitiveTypeReified.kt")
            public void testJavaPrimitiveTypeReified() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/javaPrimitiveTypeReified.kt");
            }

            @Test
            @TestMetadata("javaReified.kt")
            public void testJavaReified() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/javaReified.kt");
            }

            @Test
            @TestMetadata("kt11943.kt")
            public void testKt11943() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/kt11943.kt");
            }

            @Test
            @TestMetadata("objectSuperConstructorCall.kt")
            public void testObjectSuperConstructorCall() throws Exception {
                runTest("compiler/testData/codegen/box/classLiteral/java/objectSuperConstructorCall.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/classes")
    @TestDataPath("$PROJECT_ROOT")
    public class Classes extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("boxPrimitiveTypeInClinitOfClassObject.kt")
        public void testBoxPrimitiveTypeInClinitOfClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/classes/boxPrimitiveTypeInClinitOfClassObject.kt");
        }

        @Test
        @TestMetadata("classCompanionInitializationWithJava.kt")
        public void testClassCompanionInitializationWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classCompanionInitializationWithJava.kt");
        }

        @Test
        @TestMetadata("classNamedAsOldPackageFacade.kt")
        public void testClassNamedAsOldPackageFacade() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classNamedAsOldPackageFacade.kt");
        }

        @Test
        @TestMetadata("classObject.kt")
        public void testClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObject.kt");
        }

        @Test
        @TestMetadata("classObjectAsExtensionReceiver.kt")
        public void testClassObjectAsExtensionReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectAsExtensionReceiver.kt");
        }

        @Test
        @TestMetadata("classObjectAsStaticInitializer.kt")
        public void testClassObjectAsStaticInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectAsStaticInitializer.kt");
        }

        @Test
        @TestMetadata("classObjectField.kt")
        public void testClassObjectField() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectField.kt");
        }

        @Test
        @TestMetadata("classObjectInTrait.kt")
        public void testClassObjectInTrait() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectInTrait.kt");
        }

        @Test
        @TestMetadata("classObjectNotOfEnum.kt")
        public void testClassObjectNotOfEnum() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectNotOfEnum.kt");
        }

        @Test
        @TestMetadata("classObjectToString.kt")
        public void testClassObjectToString() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectToString.kt");
        }

        @Test
        @TestMetadata("classObjectWithPrivateGenericMember.kt")
        public void testClassObjectWithPrivateGenericMember() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectWithPrivateGenericMember.kt");
        }

        @Test
        @TestMetadata("classObjectsWithParentClasses.kt")
        public void testClassObjectsWithParentClasses() throws Exception {
            runTest("compiler/testData/codegen/box/classes/classObjectsWithParentClasses.kt");
        }

        @Test
        @TestMetadata("comanionObjectFieldVsClassField.kt")
        public void testComanionObjectFieldVsClassField() throws Exception {
            runTest("compiler/testData/codegen/box/classes/comanionObjectFieldVsClassField.kt");
        }

        @Test
        @TestMetadata("defaultObjectSameNamesAsInOuter.kt")
        public void testDefaultObjectSameNamesAsInOuter() throws Exception {
            runTest("compiler/testData/codegen/box/classes/defaultObjectSameNamesAsInOuter.kt");
        }

        @Test
        @TestMetadata("delegateConstructorCallWithKeywords.kt")
        public void testDelegateConstructorCallWithKeywords() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegateConstructorCallWithKeywords.kt");
        }

        @Test
        @TestMetadata("delegation2.kt")
        public void testDelegation2() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegation2.kt");
        }

        @Test
        @TestMetadata("delegation3.kt")
        public void testDelegation3() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegation3.kt");
        }

        @Test
        @TestMetadata("delegation4.kt")
        public void testDelegation4() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegation4.kt");
        }

        @Test
        @TestMetadata("delegationGenericArg.kt")
        public void testDelegationGenericArg() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegationGenericArg.kt");
        }

        @Test
        @TestMetadata("delegationGenericArgUpperBound.kt")
        public void testDelegationGenericArgUpperBound() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegationGenericArgUpperBound.kt");
        }

        @Test
        @TestMetadata("delegationGenericLongArg.kt")
        public void testDelegationGenericLongArg() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegationGenericLongArg.kt");
        }

        @Test
        @TestMetadata("delegationJava.kt")
        public void testDelegationJava() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegationJava.kt");
        }

        @Test
        @TestMetadata("delegationMethodsWithArgs.kt")
        public void testDelegationMethodsWithArgs() throws Exception {
            runTest("compiler/testData/codegen/box/classes/delegationMethodsWithArgs.kt");
        }

        @Test
        @TestMetadata("exceptionConstructor.kt")
        public void testExceptionConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/classes/exceptionConstructor.kt");
        }

        @Test
        @TestMetadata("extensionFunWithDefaultParam.kt")
        public void testExtensionFunWithDefaultParam() throws Exception {
            runTest("compiler/testData/codegen/box/classes/extensionFunWithDefaultParam.kt");
        }

        @Test
        @TestMetadata("extensionOnNamedClassObject.kt")
        public void testExtensionOnNamedClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/classes/extensionOnNamedClassObject.kt");
        }

        @Test
        @TestMetadata("funDelegation.kt")
        public void testFunDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/classes/funDelegation.kt");
        }

        @Test
        @TestMetadata("implementComparableInSubclass.kt")
        public void testImplementComparableInSubclass() throws Exception {
            runTest("compiler/testData/codegen/box/classes/implementComparableInSubclass.kt");
        }

        @Test
        @TestMetadata("inheritSetAndHashSet.kt")
        public void testInheritSetAndHashSet() throws Exception {
            runTest("compiler/testData/codegen/box/classes/inheritSetAndHashSet.kt");
        }

        @Test
        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            runTest("compiler/testData/codegen/box/classes/inheritance.kt");
        }

        @Test
        @TestMetadata("inheritedInnerClass.kt")
        public void testInheritedInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/classes/inheritedInnerClass.kt");
        }

        @Test
        @TestMetadata("inheritedMethod.kt")
        public void testInheritedMethod() throws Exception {
            runTest("compiler/testData/codegen/box/classes/inheritedMethod.kt");
        }

        @Test
        @TestMetadata("initializerBlock.kt")
        public void testInitializerBlock() throws Exception {
            runTest("compiler/testData/codegen/box/classes/initializerBlock.kt");
        }

        @Test
        @TestMetadata("initializerBlockDImpl.kt")
        public void testInitializerBlockDImpl() throws Exception {
            runTest("compiler/testData/codegen/box/classes/initializerBlockDImpl.kt");
        }

        @Test
        @TestMetadata("initializerBlockResetToDefault.kt")
        public void testInitializerBlockResetToDefault() throws Exception {
            runTest("compiler/testData/codegen/box/classes/initializerBlockResetToDefault.kt");
        }

        @Test
        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/classes/innerClass.kt");
        }

        @Test
        @TestMetadata("interfaceCompanionInitializationWithJava.kt")
        public void testInterfaceCompanionInitializationWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/classes/interfaceCompanionInitializationWithJava.kt");
        }

        @Test
        @TestMetadata("kt1018.kt")
        public void testKt1018() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1018.kt");
        }

        @Test
        @TestMetadata("kt1120.kt")
        public void testKt1120() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1120.kt");
        }

        @Test
        @TestMetadata("kt1134.kt")
        public void testKt1134() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1134.kt");
        }

        @Test
        @TestMetadata("kt1157.kt")
        public void testKt1157() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1157.kt");
        }

        @Test
        @TestMetadata("kt1247.kt")
        public void testKt1247() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1247.kt");
        }

        @Test
        @TestMetadata("kt1345.kt")
        public void testKt1345() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1345.kt");
        }

        @Test
        @TestMetadata("kt1439.kt")
        public void testKt1439() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1439.kt");
        }

        @Test
        @TestMetadata("kt1535.kt")
        public void testKt1535() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1535.kt");
        }

        @Test
        @TestMetadata("kt1538.kt")
        public void testKt1538() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1538.kt");
        }

        @Test
        @TestMetadata("kt1578.kt")
        public void testKt1578() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1578.kt");
        }

        @Test
        @TestMetadata("kt1611.kt")
        public void testKt1611() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1611.kt");
        }

        @Test
        @TestMetadata("kt1721.kt")
        public void testKt1721() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1721.kt");
        }

        @Test
        @TestMetadata("kt1726.kt")
        public void testKt1726() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1726.kt");
        }

        @Test
        @TestMetadata("kt1759.kt")
        public void testKt1759() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1759.kt");
        }

        @Test
        @TestMetadata("kt1891.kt")
        public void testKt1891() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1891.kt");
        }

        @Test
        @TestMetadata("kt1918.kt")
        public void testKt1918() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1918.kt");
        }

        @Test
        @TestMetadata("kt1976.kt")
        public void testKt1976() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1976.kt");
        }

        @Test
        @TestMetadata("kt1980.kt")
        public void testKt1980() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt1980.kt");
        }

        @Test
        @TestMetadata("kt2224.kt")
        public void testKt2224() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2224.kt");
        }

        @Test
        @TestMetadata("kt2288.kt")
        public void testKt2288() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2288.kt");
        }

        @Test
        @TestMetadata("kt2384.kt")
        public void testKt2384() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2384.kt");
        }

        @Test
        @TestMetadata("kt2390.kt")
        public void testKt2390() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2390.kt");
        }

        @Test
        @TestMetadata("kt2391.kt")
        public void testKt2391() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2391.kt");
        }

        @Test
        @TestMetadata("kt2395.kt")
        public void testKt2395() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2395.kt");
        }

        @Test
        @TestMetadata("kt2417.kt")
        public void testKt2417() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2417.kt");
        }

        @Test
        @TestMetadata("kt2477.kt")
        public void testKt2477() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2477.kt");
        }

        @Test
        @TestMetadata("kt2480.kt")
        public void testKt2480() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2480.kt");
        }

        @Test
        @TestMetadata("kt2482.kt")
        public void testKt2482() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2482.kt");
        }

        @Test
        @TestMetadata("kt2485.kt")
        public void testKt2485() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2485.kt");
        }

        @Test
        @TestMetadata("kt249.kt")
        public void testKt249() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt249.kt");
        }

        @Test
        @TestMetadata("kt2532.kt")
        public void testKt2532() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2532.kt");
        }

        @Test
        @TestMetadata("kt2566.kt")
        public void testKt2566() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2566.kt");
        }

        @Test
        @TestMetadata("kt2566_2.kt")
        public void testKt2566_2() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2566_2.kt");
        }

        @Test
        @TestMetadata("kt2607.kt")
        public void testKt2607() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2607.kt");
        }

        @Test
        @TestMetadata("kt2626.kt")
        public void testKt2626() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2626.kt");
        }

        @Test
        @TestMetadata("kt2711.kt")
        public void testKt2711() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2711.kt");
        }

        @Test
        @TestMetadata("kt2784.kt")
        public void testKt2784() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt2784.kt");
        }

        @Test
        @TestMetadata("kt285.kt")
        public void testKt285() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt285.kt");
        }

        @Test
        @TestMetadata("kt3001.kt")
        public void testKt3001() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt3001.kt");
        }

        @Test
        @TestMetadata("kt3114.kt")
        public void testKt3114() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt3114.kt");
        }

        @Test
        @TestMetadata("kt3414.kt")
        public void testKt3414() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt3414.kt");
        }

        @Test
        @TestMetadata("kt343.kt")
        public void testKt343() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt343.kt");
        }

        @Test
        @TestMetadata("kt3546.kt")
        public void testKt3546() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt3546.kt");
        }

        @Test
        @TestMetadata("kt40332.kt")
        public void testKt40332() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt40332.kt");
        }

        @Test
        @TestMetadata("kt454.kt")
        public void testKt454() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt454.kt");
        }

        @Test
        @TestMetadata("kt471.kt")
        public void testKt471() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt471.kt");
        }

        @Test
        @TestMetadata("kt48.kt")
        public void testKt48() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt48.kt");
        }

        @Test
        @TestMetadata("kt496.kt")
        public void testKt496() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt496.kt");
        }

        @Test
        @TestMetadata("kt500.kt")
        public void testKt500() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt500.kt");
        }

        @Test
        @TestMetadata("kt501.kt")
        public void testKt501() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt501.kt");
        }

        @Test
        @TestMetadata("kt504.kt")
        public void testKt504() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt504.kt");
        }

        @Test
        @TestMetadata("kt508.kt")
        public void testKt508() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt508.kt");
        }

        @Test
        @TestMetadata("kt5347.kt")
        public void testKt5347() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt5347.kt");
        }

        @Test
        @TestMetadata("kt6136.kt")
        public void testKt6136() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt6136.kt");
        }

        @Test
        @TestMetadata("kt633.kt")
        public void testKt633() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt633.kt");
        }

        @Test
        @TestMetadata("kt6816.kt")
        public void testKt6816() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt6816.kt");
        }

        @Test
        @TestMetadata("kt707.kt")
        public void testKt707() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt707.kt");
        }

        @Test
        @TestMetadata("kt723.kt")
        public void testKt723() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt723.kt");
        }

        @Test
        @TestMetadata("kt725.kt")
        public void testKt725() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt725.kt");
        }

        @Test
        @TestMetadata("kt8011.kt")
        public void testKt8011() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt8011.kt");
        }

        @Test
        @TestMetadata("kt8011a.kt")
        public void testKt8011a() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt8011a.kt");
        }

        @Test
        @TestMetadata("kt903.kt")
        public void testKt903() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt903.kt");
        }

        @Test
        @TestMetadata("kt940.kt")
        public void testKt940() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt940.kt");
        }

        @Test
        @TestMetadata("kt9642.kt")
        public void testKt9642() throws Exception {
            runTest("compiler/testData/codegen/box/classes/kt9642.kt");
        }

        @Test
        @TestMetadata("namedClassObject.kt")
        public void testNamedClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/classes/namedClassObject.kt");
        }

        @Test
        @TestMetadata("outerThis.kt")
        public void testOuterThis() throws Exception {
            runTest("compiler/testData/codegen/box/classes/outerThis.kt");
        }

        @Test
        @TestMetadata("overloadBinaryOperator.kt")
        public void testOverloadBinaryOperator() throws Exception {
            runTest("compiler/testData/codegen/box/classes/overloadBinaryOperator.kt");
        }

        @Test
        @TestMetadata("overloadPlusAssign.kt")
        public void testOverloadPlusAssign() throws Exception {
            runTest("compiler/testData/codegen/box/classes/overloadPlusAssign.kt");
        }

        @Test
        @TestMetadata("overloadPlusAssignReturn.kt")
        public void testOverloadPlusAssignReturn() throws Exception {
            runTest("compiler/testData/codegen/box/classes/overloadPlusAssignReturn.kt");
        }

        @Test
        @TestMetadata("overloadPlusToPlusAssign.kt")
        public void testOverloadPlusToPlusAssign() throws Exception {
            runTest("compiler/testData/codegen/box/classes/overloadPlusToPlusAssign.kt");
        }

        @Test
        @TestMetadata("overloadUnaryOperator.kt")
        public void testOverloadUnaryOperator() throws Exception {
            runTest("compiler/testData/codegen/box/classes/overloadUnaryOperator.kt");
        }

        @Test
        @TestMetadata("privateOuterFunctions.kt")
        public void testPrivateOuterFunctions() throws Exception {
            runTest("compiler/testData/codegen/box/classes/privateOuterFunctions.kt");
        }

        @Test
        @TestMetadata("privateOuterProperty.kt")
        public void testPrivateOuterProperty() throws Exception {
            runTest("compiler/testData/codegen/box/classes/privateOuterProperty.kt");
        }

        @Test
        @TestMetadata("privateToThis.kt")
        public void testPrivateToThis() throws Exception {
            runTest("compiler/testData/codegen/box/classes/privateToThis.kt");
        }

        @Test
        @TestMetadata("propertyDelegation.kt")
        public void testPropertyDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/classes/propertyDelegation.kt");
        }

        @Test
        @TestMetadata("propertyInInitializer.kt")
        public void testPropertyInInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/classes/propertyInInitializer.kt");
        }

        @Test
        @TestMetadata("quotedClassName.kt")
        public void testQuotedClassName() throws Exception {
            runTest("compiler/testData/codegen/box/classes/quotedClassName.kt");
        }

        @Test
        @TestMetadata("rightHandOverride.kt")
        public void testRightHandOverride() throws Exception {
            runTest("compiler/testData/codegen/box/classes/rightHandOverride.kt");
        }

        @Test
        @TestMetadata("sealedInSameFile.kt")
        public void testSealedInSameFile() throws Exception {
            runTest("compiler/testData/codegen/box/classes/sealedInSameFile.kt");
        }

        @Test
        @TestMetadata("selfcreate.kt")
        public void testSelfcreate() throws Exception {
            runTest("compiler/testData/codegen/box/classes/selfcreate.kt");
        }

        @Test
        @TestMetadata("simpleBox.kt")
        public void testSimpleBox() throws Exception {
            runTest("compiler/testData/codegen/box/classes/simpleBox.kt");
        }

        @Test
        @TestMetadata("superConstructorCallWithComplexArg.kt")
        public void testSuperConstructorCallWithComplexArg() throws Exception {
            runTest("compiler/testData/codegen/box/classes/superConstructorCallWithComplexArg.kt");
        }

        @Test
        @TestMetadata("typedDelegation.kt")
        public void testTypedDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/classes/typedDelegation.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/classes/inner")
        @TestDataPath("$PROJECT_ROOT")
        public class Inner extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInInner() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/classes/inner"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("extensionWithOuter.kt")
            public void testExtensionWithOuter() throws Exception {
                runTest("compiler/testData/codegen/box/classes/inner/extensionWithOuter.kt");
            }

            @Test
            @TestMetadata("instantiateInDerived.kt")
            public void testInstantiateInDerived() throws Exception {
                runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerived.kt");
            }

            @Test
            @TestMetadata("instantiateInDerivedLabeled.kt")
            public void testInstantiateInDerivedLabeled() throws Exception {
                runTest("compiler/testData/codegen/box/classes/inner/instantiateInDerivedLabeled.kt");
            }

            @Test
            @TestMetadata("instantiateInSameClass.kt")
            public void testInstantiateInSameClass() throws Exception {
                runTest("compiler/testData/codegen/box/classes/inner/instantiateInSameClass.kt");
            }

            @Test
            @TestMetadata("kt6708.kt")
            public void testKt6708() throws Exception {
                runTest("compiler/testData/codegen/box/classes/inner/kt6708.kt");
            }

            @Test
            @TestMetadata("properOuter.kt")
            public void testProperOuter() throws Exception {
                runTest("compiler/testData/codegen/box/classes/inner/properOuter.kt");
            }

            @Test
            @TestMetadata("properSuperLinking.kt")
            public void testProperSuperLinking() throws Exception {
                runTest("compiler/testData/codegen/box/classes/inner/properSuperLinking.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/closures")
    @TestDataPath("$PROJECT_ROOT")
    public class Closures extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInClosures() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anonymousObjectAsLastExpressionInLambda.kt")
        public void testAnonymousObjectAsLastExpressionInLambda() throws Exception {
            runTest("compiler/testData/codegen/box/closures/anonymousObjectAsLastExpressionInLambda.kt");
        }

        @Test
        @TestMetadata("captureExtensionReceiver.kt")
        public void testCaptureExtensionReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/closures/captureExtensionReceiver.kt");
        }

        @Test
        @TestMetadata("captureExtensionReceiverX2.kt")
        public void testCaptureExtensionReceiverX2() throws Exception {
            runTest("compiler/testData/codegen/box/closures/captureExtensionReceiverX2.kt");
        }

        @Test
        @TestMetadata("capturedLocalGenericFun.kt")
        public void testCapturedLocalGenericFun() throws Exception {
            runTest("compiler/testData/codegen/box/closures/capturedLocalGenericFun.kt");
        }

        @Test
        @TestMetadata("closureInsideConstrucor.kt")
        public void testClosureInsideConstrucor() throws Exception {
            runTest("compiler/testData/codegen/box/closures/closureInsideConstrucor.kt");
        }

        @Test
        @TestMetadata("closureOnTopLevel1.kt")
        public void testClosureOnTopLevel1() throws Exception {
            runTest("compiler/testData/codegen/box/closures/closureOnTopLevel1.kt");
        }

        @Test
        @TestMetadata("closureOnTopLevel2.kt")
        public void testClosureOnTopLevel2() throws Exception {
            runTest("compiler/testData/codegen/box/closures/closureOnTopLevel2.kt");
        }

        @Test
        @TestMetadata("closureWithParameter.kt")
        public void testClosureWithParameter() throws Exception {
            runTest("compiler/testData/codegen/box/closures/closureWithParameter.kt");
        }

        @Test
        @TestMetadata("closureWithParameterAndBoxing.kt")
        public void testClosureWithParameterAndBoxing() throws Exception {
            runTest("compiler/testData/codegen/box/closures/closureWithParameterAndBoxing.kt");
        }

        @Test
        @TestMetadata("crossinlineLocalDeclaration.kt")
        public void testCrossinlineLocalDeclaration() throws Exception {
            runTest("compiler/testData/codegen/box/closures/crossinlineLocalDeclaration.kt");
        }

        @Test
        @TestMetadata("doubleEnclosedLocalVariable.kt")
        public void testDoubleEnclosedLocalVariable() throws Exception {
            runTest("compiler/testData/codegen/box/closures/doubleEnclosedLocalVariable.kt");
        }

        @Test
        @TestMetadata("enclosingLocalVariable.kt")
        public void testEnclosingLocalVariable() throws Exception {
            runTest("compiler/testData/codegen/box/closures/enclosingLocalVariable.kt");
        }

        @Test
        @TestMetadata("enclosingThis.kt")
        public void testEnclosingThis() throws Exception {
            runTest("compiler/testData/codegen/box/closures/enclosingThis.kt");
        }

        @Test
        @TestMetadata("extensionClosure.kt")
        public void testExtensionClosure() throws Exception {
            runTest("compiler/testData/codegen/box/closures/extensionClosure.kt");
        }

        @Test
        @TestMetadata("kt10044.kt")
        public void testKt10044() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt10044.kt");
        }

        @Test
        @TestMetadata("kt11634.kt")
        public void testKt11634() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt11634.kt");
        }

        @Test
        @TestMetadata("kt11634_2.kt")
        public void testKt11634_2() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt11634_2.kt");
        }

        @Test
        @TestMetadata("kt11634_3.kt")
        public void testKt11634_3() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt11634_3.kt");
        }

        @Test
        @TestMetadata("kt11634_4.kt")
        public void testKt11634_4() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt11634_4.kt");
        }

        @Test
        @TestMetadata("kt19389.kt")
        public void testKt19389() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt19389.kt");
        }

        @Test
        @TestMetadata("kt19389_set.kt")
        public void testKt19389_set() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt19389_set.kt");
        }

        @Test
        @TestMetadata("kt2151.kt")
        public void testKt2151() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt2151.kt");
        }

        @Test
        @TestMetadata("kt3152.kt")
        public void testKt3152() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt3152.kt");
        }

        @Test
        @TestMetadata("kt3523.kt")
        public void testKt3523() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt3523.kt");
        }

        @Test
        @TestMetadata("kt3738.kt")
        public void testKt3738() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt3738.kt");
        }

        @Test
        @TestMetadata("kt3905.kt")
        public void testKt3905() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt3905.kt");
        }

        @Test
        @TestMetadata("kt4106.kt")
        public void testKt4106() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt4106.kt");
        }

        @Test
        @TestMetadata("kt4137.kt")
        public void testKt4137() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt4137.kt");
        }

        @Test
        @TestMetadata("kt5589.kt")
        public void testKt5589() throws Exception {
            runTest("compiler/testData/codegen/box/closures/kt5589.kt");
        }

        @Test
        @TestMetadata("localClassFunClosure.kt")
        public void testLocalClassFunClosure() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localClassFunClosure.kt");
        }

        @Test
        @TestMetadata("localClassLambdaClosure.kt")
        public void testLocalClassLambdaClosure() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localClassLambdaClosure.kt");
        }

        @Test
        @TestMetadata("localFunInInit.kt")
        public void testLocalFunInInit() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localFunInInit.kt");
        }

        @Test
        @TestMetadata("localFunctionInFunction.kt")
        public void testLocalFunctionInFunction() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localFunctionInFunction.kt");
        }

        @Test
        @TestMetadata("localFunctionInInitBlock.kt")
        public void testLocalFunctionInInitBlock() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localFunctionInInitBlock.kt");
        }

        @Test
        @TestMetadata("localFunctionInInitializer.kt")
        public void testLocalFunctionInInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localFunctionInInitializer.kt");
        }

        @Test
        @TestMetadata("localGenericFun.kt")
        public void testLocalGenericFun() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localGenericFun.kt");
        }

        @Test
        @TestMetadata("localReturn.kt")
        public void testLocalReturn() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localReturn.kt");
        }

        @Test
        @TestMetadata("localReturnWithAutolabel.kt")
        public void testLocalReturnWithAutolabel() throws Exception {
            runTest("compiler/testData/codegen/box/closures/localReturnWithAutolabel.kt");
        }

        @Test
        @TestMetadata("noRefToOuter.kt")
        public void testNoRefToOuter() throws Exception {
            runTest("compiler/testData/codegen/box/closures/noRefToOuter.kt");
        }

        @Test
        @TestMetadata("recursiveClosure.kt")
        public void testRecursiveClosure() throws Exception {
            runTest("compiler/testData/codegen/box/closures/recursiveClosure.kt");
        }

        @Test
        @TestMetadata("refsAreSerializable.kt")
        public void testRefsAreSerializable() throws Exception {
            runTest("compiler/testData/codegen/box/closures/refsAreSerializable.kt");
        }

        @Test
        @TestMetadata("simplestClosure.kt")
        public void testSimplestClosure() throws Exception {
            runTest("compiler/testData/codegen/box/closures/simplestClosure.kt");
        }

        @Test
        @TestMetadata("simplestClosureAndBoxing.kt")
        public void testSimplestClosureAndBoxing() throws Exception {
            runTest("compiler/testData/codegen/box/closures/simplestClosureAndBoxing.kt");
        }

        @Test
        @TestMetadata("staticLambda.kt")
        public void testStaticLambda() throws Exception {
            runTest("compiler/testData/codegen/box/closures/staticLambda.kt");
        }

        @Test
        @TestMetadata("subclosuresWithinInitializers.kt")
        public void testSubclosuresWithinInitializers() throws Exception {
            runTest("compiler/testData/codegen/box/closures/subclosuresWithinInitializers.kt");
        }

        @Test
        @TestMetadata("underscoreParameters.kt")
        public void testUnderscoreParameters() throws Exception {
            runTest("compiler/testData/codegen/box/closures/underscoreParameters.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/closures/captureInSuperConstructorCall")
        @TestDataPath("$PROJECT_ROOT")
        public class CaptureInSuperConstructorCall extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCaptureInSuperConstructorCall() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/captureInSuperConstructorCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("constructorParameterAndLocalCapturedInLambdaInLocalClass.kt")
            public void testConstructorParameterAndLocalCapturedInLambdaInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterAndLocalCapturedInLambdaInLocalClass.kt");
            }

            @Test
            @TestMetadata("constructorParameterCapturedInLambdaInLocalClass.kt")
            public void testConstructorParameterCapturedInLambdaInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass.kt");
            }

            @Test
            @TestMetadata("constructorParameterCapturedInLambdaInLocalClass2.kt")
            public void testConstructorParameterCapturedInLambdaInLocalClass2() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/constructorParameterCapturedInLambdaInLocalClass2.kt");
            }

            @Test
            @TestMetadata("kt13454.kt")
            public void testKt13454() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt13454.kt");
            }

            @Test
            @TestMetadata("kt14148.kt")
            public void testKt14148() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt14148.kt");
            }

            @Test
            @TestMetadata("kt4174.kt")
            public void testKt4174() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174.kt");
            }

            @Test
            @TestMetadata("kt4174a.kt")
            public void testKt4174a() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/kt4174a.kt");
            }

            @Test
            @TestMetadata("localCapturedInAnonymousObjectInLocalClass.kt")
            public void testLocalCapturedInAnonymousObjectInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass.kt");
            }

            @Test
            @TestMetadata("localCapturedInAnonymousObjectInLocalClass2.kt")
            public void testLocalCapturedInAnonymousObjectInLocalClass2() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInAnonymousObjectInLocalClass2.kt");
            }

            @Test
            @TestMetadata("localCapturedInLambdaInInnerClassInLocalClass.kt")
            public void testLocalCapturedInLambdaInInnerClassInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInInnerClassInLocalClass.kt");
            }

            @Test
            @TestMetadata("localCapturedInLambdaInLocalClass.kt")
            public void testLocalCapturedInLambdaInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localCapturedInLambdaInLocalClass.kt");
            }

            @Test
            @TestMetadata("localFunctionCapturedInLambda.kt")
            public void testLocalFunctionCapturedInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/localFunctionCapturedInLambda.kt");
            }

            @Test
            @TestMetadata("outerAndLocalCapturedInLocalClass.kt")
            public void testOuterAndLocalCapturedInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerAndLocalCapturedInLocalClass.kt");
            }

            @Test
            @TestMetadata("outerCapturedAsImplicitThisInBoundReference.kt")
            public void testOuterCapturedAsImplicitThisInBoundReference() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedAsImplicitThisInBoundReference.kt");
            }

            @Test
            @TestMetadata("outerCapturedInFunctionLiteral.kt")
            public void testOuterCapturedInFunctionLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInFunctionLiteral.kt");
            }

            @Test
            @TestMetadata("outerCapturedInInlineLambda.kt")
            public void testOuterCapturedInInlineLambda() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda.kt");
            }

            @Test
            @TestMetadata("outerCapturedInInlineLambda2.kt")
            public void testOuterCapturedInInlineLambda2() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInInlineLambda2.kt");
            }

            @Test
            @TestMetadata("outerCapturedInLambda.kt")
            public void testOuterCapturedInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda.kt");
            }

            @Test
            @TestMetadata("outerCapturedInLambda2.kt")
            public void testOuterCapturedInLambda2() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambda2.kt");
            }

            @Test
            @TestMetadata("outerCapturedInLambdaInSecondaryConstructor.kt")
            public void testOuterCapturedInLambdaInSecondaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSecondaryConstructor.kt");
            }

            @Test
            @TestMetadata("outerCapturedInLambdaInSubExpression.kt")
            public void testOuterCapturedInLambdaInSubExpression() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLambdaInSubExpression.kt");
            }

            @Test
            @TestMetadata("outerCapturedInLocalClass.kt")
            public void testOuterCapturedInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInLocalClass.kt");
            }

            @Test
            @TestMetadata("outerCapturedInNestedLambda.kt")
            public void testOuterCapturedInNestedLambda() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedLambda.kt");
            }

            @Test
            @TestMetadata("outerCapturedInNestedObject.kt")
            public void testOuterCapturedInNestedObject() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInNestedObject.kt");
            }

            @Test
            @TestMetadata("outerCapturedInObject.kt")
            public void testOuterCapturedInObject() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject.kt");
            }

            @Test
            @TestMetadata("outerCapturedInObject2.kt")
            public void testOuterCapturedInObject2() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInObject2.kt");
            }

            @Test
            @TestMetadata("outerCapturedInPrimaryConstructorDefaultParameter.kt")
            public void testOuterCapturedInPrimaryConstructorDefaultParameter() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInPrimaryConstructorDefaultParameter.kt");
            }

            @Test
            @TestMetadata("outerCapturedInSecondaryConstructorDefaultParameter.kt")
            public void testOuterCapturedInSecondaryConstructorDefaultParameter() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerCapturedInSecondaryConstructorDefaultParameter.kt");
            }

            @Test
            @TestMetadata("outerEnumEntryCapturedInLambdaInInnerClass.kt")
            public void testOuterEnumEntryCapturedInLambdaInInnerClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/outerEnumEntryCapturedInLambdaInInnerClass.kt");
            }

            @Test
            @TestMetadata("properValueCapturedByClosure1.kt")
            public void testProperValueCapturedByClosure1() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure1.kt");
            }

            @Test
            @TestMetadata("properValueCapturedByClosure2.kt")
            public void testProperValueCapturedByClosure2() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/properValueCapturedByClosure2.kt");
            }

            @Test
            @TestMetadata("referenceToCapturedVariablesInMultipleLambdas.kt")
            public void testReferenceToCapturedVariablesInMultipleLambdas() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureInSuperConstructorCall/referenceToCapturedVariablesInMultipleLambdas.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/closures/captureOuterProperty")
        @TestDataPath("$PROJECT_ROOT")
        public class CaptureOuterProperty extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCaptureOuterProperty() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/captureOuterProperty"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("captureFunctionInProperty.kt")
            public void testCaptureFunctionInProperty() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/captureFunctionInProperty.kt");
            }

            @Test
            @TestMetadata("inFunction.kt")
            public void testInFunction() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inFunction.kt");
            }

            @Test
            @TestMetadata("inProperty.kt")
            public void testInProperty() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inProperty.kt");
            }

            @Test
            @TestMetadata("inPropertyDeepObjectChain.kt")
            public void testInPropertyDeepObjectChain() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyDeepObjectChain.kt");
            }

            @Test
            @TestMetadata("inPropertyFromSuperClass.kt")
            public void testInPropertyFromSuperClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperClass.kt");
            }

            @Test
            @TestMetadata("inPropertyFromSuperSuperClass.kt")
            public void testInPropertyFromSuperSuperClass() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperSuperClass.kt");
            }

            @Test
            @TestMetadata("kt4176.kt")
            public void testKt4176() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4176.kt");
            }

            @Test
            @TestMetadata("kt4656.kt")
            public void testKt4656() throws Exception {
                runTest("compiler/testData/codegen/box/closures/captureOuterProperty/kt4656.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/closures/capturedVarsOptimization")
        @TestDataPath("$PROJECT_ROOT")
        public class CapturedVarsOptimization extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCapturedVarsOptimization() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/capturedVarsOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("capturedInCrossinline.kt")
            public void testCapturedInCrossinline() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInCrossinline.kt");
            }

            @Test
            @TestMetadata("capturedInInlineOnlyAssign.kt")
            public void testCapturedInInlineOnlyAssign() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyAssign.kt");
            }

            @Test
            @TestMetadata("capturedInInlineOnlyCAO.kt")
            public void testCapturedInInlineOnlyCAO() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyCAO.kt");
            }

            @Test
            @TestMetadata("capturedInInlineOnlyIncrDecr.kt")
            public void testCapturedInInlineOnlyIncrDecr() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIncrDecr.kt");
            }

            @Test
            @TestMetadata("capturedInInlineOnlyIndexedCAO.kt")
            public void testCapturedInInlineOnlyIndexedCAO() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedInInlineOnlyIndexedCAO.kt");
            }

            @Test
            @TestMetadata("capturedVarsOfSize2.kt")
            public void testCapturedVarsOfSize2() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/capturedVarsOfSize2.kt");
            }

            @Test
            @TestMetadata("kt17200.kt")
            public void testKt17200() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17200.kt");
            }

            @Test
            @TestMetadata("kt17588.kt")
            public void testKt17588() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt17588.kt");
            }

            @Test
            @TestMetadata("kt44347.kt")
            public void testKt44347() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/kt44347.kt");
            }

            @Test
            @TestMetadata("sharedSlotsWithCapturedVars.kt")
            public void testSharedSlotsWithCapturedVars() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/sharedSlotsWithCapturedVars.kt");
            }

            @Test
            @TestMetadata("withCoroutines.kt")
            public void testWithCoroutines() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/withCoroutines.kt");
            }

            @Test
            @TestMetadata("withCoroutinesNoStdLib.kt")
            public void testWithCoroutinesNoStdLib() throws Exception {
                runTest("compiler/testData/codegen/box/closures/capturedVarsOptimization/withCoroutinesNoStdLib.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/closures/closureInsideClosure")
        @TestDataPath("$PROJECT_ROOT")
        public class ClosureInsideClosure extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInClosureInsideClosure() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/closures/closureInsideClosure"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("localFunInsideLocalFun.kt")
            public void testLocalFunInsideLocalFun() throws Exception {
                runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFun.kt");
            }

            @Test
            @TestMetadata("localFunInsideLocalFunDifferentSignatures.kt")
            public void testLocalFunInsideLocalFunDifferentSignatures() throws Exception {
                runTest("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFunDifferentSignatures.kt");
            }

            @Test
            @TestMetadata("propertyAndFunctionNameClash.kt")
            public void testPropertyAndFunctionNameClash() throws Exception {
                runTest("compiler/testData/codegen/box/closures/closureInsideClosure/propertyAndFunctionNameClash.kt");
            }

            @Test
            @TestMetadata("threeLevels.kt")
            public void testThreeLevels() throws Exception {
                runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevels.kt");
            }

            @Test
            @TestMetadata("threeLevelsDifferentSignatures.kt")
            public void testThreeLevelsDifferentSignatures() throws Exception {
                runTest("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevelsDifferentSignatures.kt");
            }

            @Test
            @TestMetadata("varAsFunInsideLocalFun.kt")
            public void testVarAsFunInsideLocalFun() throws Exception {
                runTest("compiler/testData/codegen/box/closures/closureInsideClosure/varAsFunInsideLocalFun.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/collectionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class CollectionLiterals extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInCollectionLiterals() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/collectionLiterals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("collectionLiteralsInArgumentPosition.kt")
        public void testCollectionLiteralsInArgumentPosition() throws Exception {
            runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsInArgumentPosition.kt");
        }

        @Test
        @TestMetadata("collectionLiteralsWithConstants.kt")
        public void testCollectionLiteralsWithConstants() throws Exception {
            runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsWithConstants.kt");
        }

        @Test
        @TestMetadata("collectionLiteralsWithVarargs.kt")
        public void testCollectionLiteralsWithVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/collectionLiterals/collectionLiteralsWithVarargs.kt");
        }

        @Test
        @TestMetadata("defaultAnnotationParameterValues.kt")
        public void testDefaultAnnotationParameterValues() throws Exception {
            runTest("compiler/testData/codegen/box/collectionLiterals/defaultAnnotationParameterValues.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/collections")
    @TestDataPath("$PROJECT_ROOT")
    public class Collections extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("addCollectionStubWithCovariantOverride.kt")
        public void testAddCollectionStubWithCovariantOverride() throws Exception {
            runTest("compiler/testData/codegen/box/collections/addCollectionStubWithCovariantOverride.kt");
        }

        @Test
        public void testAllFilesPresentInCollections() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/collections"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("charSequence.kt")
        public void testCharSequence() throws Exception {
            runTest("compiler/testData/codegen/box/collections/charSequence.kt");
        }

        @Test
        @TestMetadata("implementCollectionThroughKotlin.kt")
        public void testImplementCollectionThroughKotlin() throws Exception {
            runTest("compiler/testData/codegen/box/collections/implementCollectionThroughKotlin.kt");
        }

        @Test
        @TestMetadata("inSetWithSmartCast.kt")
        public void testInSetWithSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/collections/inSetWithSmartCast.kt");
        }

        @Test
        @TestMetadata("inheritFromHashtable.kt")
        public void testInheritFromHashtable() throws Exception {
            runTest("compiler/testData/codegen/box/collections/inheritFromHashtable.kt");
        }

        @Test
        @TestMetadata("internalRemove.kt")
        public void testInternalRemove() throws Exception {
            runTest("compiler/testData/codegen/box/collections/internalRemove.kt");
        }

        @Test
        @TestMetadata("internalRemoveFromJava.kt")
        public void testInternalRemoveFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/collections/internalRemoveFromJava.kt");
        }

        @Test
        @TestMetadata("irrelevantImplCharSequence.kt")
        public void testIrrelevantImplCharSequence() throws Exception {
            runTest("compiler/testData/codegen/box/collections/irrelevantImplCharSequence.kt");
        }

        @Test
        @TestMetadata("irrelevantImplCharSequenceKotlin.kt")
        public void testIrrelevantImplCharSequenceKotlin() throws Exception {
            runTest("compiler/testData/codegen/box/collections/irrelevantImplCharSequenceKotlin.kt");
        }

        @Test
        @TestMetadata("irrelevantImplMutableList.kt")
        public void testIrrelevantImplMutableList() throws Exception {
            runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableList.kt");
        }

        @Test
        @TestMetadata("irrelevantImplMutableListKotlin.kt")
        public void testIrrelevantImplMutableListKotlin() throws Exception {
            runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableListKotlin.kt");
        }

        @Test
        @TestMetadata("irrelevantImplMutableListSubstitution.kt")
        public void testIrrelevantImplMutableListSubstitution() throws Exception {
            runTest("compiler/testData/codegen/box/collections/irrelevantImplMutableListSubstitution.kt");
        }

        @Test
        @TestMetadata("irrelevantRemoveAtOverrideInJava.kt")
        public void testIrrelevantRemoveAtOverrideInJava() throws Exception {
            runTest("compiler/testData/codegen/box/collections/irrelevantRemoveAtOverrideInJava.kt");
        }

        @Test
        @TestMetadata("irrelevantSizeOverrideInJava.kt")
        public void testIrrelevantSizeOverrideInJava() throws Exception {
            runTest("compiler/testData/codegen/box/collections/irrelevantSizeOverrideInJava.kt");
        }

        @Test
        @TestMetadata("javaCollectionWithRemovePrimitiveInt.kt")
        public void testJavaCollectionWithRemovePrimitiveInt() throws Exception {
            runTest("compiler/testData/codegen/box/collections/javaCollectionWithRemovePrimitiveInt.kt");
        }

        @Test
        @TestMetadata("kt40305.kt")
        public void testKt40305() throws Exception {
            runTest("compiler/testData/codegen/box/collections/kt40305.kt");
        }

        @Test
        @TestMetadata("kt41123.kt")
        public void testKt41123() throws Exception {
            runTest("compiler/testData/codegen/box/collections/kt41123.kt");
        }

        @Test
        @TestMetadata("kt44233.kt")
        public void testKt44233() throws Exception {
            runTest("compiler/testData/codegen/box/collections/kt44233.kt");
        }

        @Test
        @TestMetadata("mutableList.kt")
        public void testMutableList() throws Exception {
            runTest("compiler/testData/codegen/box/collections/mutableList.kt");
        }

        @Test
        @TestMetadata("noStubsInJavaSuperClass.kt")
        public void testNoStubsInJavaSuperClass() throws Exception {
            runTest("compiler/testData/codegen/box/collections/noStubsInJavaSuperClass.kt");
        }

        @Test
        @TestMetadata("platformValueContains.kt")
        public void testPlatformValueContains() throws Exception {
            runTest("compiler/testData/codegen/box/collections/platformValueContains.kt");
        }

        @Test
        @TestMetadata("readOnlyList.kt")
        public void testReadOnlyList() throws Exception {
            runTest("compiler/testData/codegen/box/collections/readOnlyList.kt");
        }

        @Test
        @TestMetadata("readOnlyMap.kt")
        public void testReadOnlyMap() throws Exception {
            runTest("compiler/testData/codegen/box/collections/readOnlyMap.kt");
        }

        @Test
        @TestMetadata("removeAtBridgeClashWithJava.kt")
        public void testRemoveAtBridgeClashWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeAtBridgeClashWithJava.kt");
        }

        @Test
        @TestMetadata("removeAtInt.kt")
        public void testRemoveAtInt() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeAtInt.kt");
        }

        @Test
        @TestMetadata("removeClash.kt")
        public void testRemoveClash() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeClash.kt");
        }

        @Test
        @TestMetadata("removeClashJava.kt")
        public void testRemoveClashJava() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeClashJava.kt");
        }

        @Test
        @TestMetadata("removeClashKotlin.kt")
        public void testRemoveClashKotlin() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeClashKotlin.kt");
        }

        @Test
        @TestMetadata("removeClashWithGenerics.kt")
        public void testRemoveClashWithGenerics() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeClashWithGenerics.kt");
        }

        @Test
        @TestMetadata("removeNullFromList.kt")
        public void testRemoveNullFromList() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeNullFromList.kt");
        }

        @Test
        @TestMetadata("removeOverriddenInJava.kt")
        public void testRemoveOverriddenInJava() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeOverriddenInJava.kt");
        }

        @Test
        @TestMetadata("removeOverriddenInJava_Map.kt")
        public void testRemoveOverriddenInJava_Map() throws Exception {
            runTest("compiler/testData/codegen/box/collections/removeOverriddenInJava_Map.kt");
        }

        @Test
        @TestMetadata("strList.kt")
        public void testStrList() throws Exception {
            runTest("compiler/testData/codegen/box/collections/strList.kt");
        }

        @Test
        @TestMetadata("toArrayInJavaClass.kt")
        public void testToArrayInJavaClass() throws Exception {
            runTest("compiler/testData/codegen/box/collections/toArrayInJavaClass.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/companion")
    @TestDataPath("$PROJECT_ROOT")
    public class Companion extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInCompanion() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/companion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("delegatedPropertyOnCompanion.kt")
        public void testDelegatedPropertyOnCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/companion/delegatedPropertyOnCompanion.kt");
        }

        @Test
        @TestMetadata("inlineFunctionCompanionPropertyAccess.kt")
        public void testInlineFunctionCompanionPropertyAccess() throws Exception {
            runTest("compiler/testData/codegen/box/companion/inlineFunctionCompanionPropertyAccess.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/compatibility")
    @TestDataPath("$PROJECT_ROOT")
    public class Compatibility extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInCompatibility() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/compatibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("privateCompanionObject.kt")
        public void testPrivateCompanionObject() throws Exception {
            runTest("compiler/testData/codegen/box/compatibility/privateCompanionObject.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/constants")
    @TestDataPath("$PROJECT_ROOT")
    public class Constants extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInConstants() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constants"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("comparisonFalse.kt")
        public void testComparisonFalse() throws Exception {
            runTest("compiler/testData/codegen/box/constants/comparisonFalse.kt");
        }

        @Test
        @TestMetadata("comparisonTrue.kt")
        public void testComparisonTrue() throws Exception {
            runTest("compiler/testData/codegen/box/constants/comparisonTrue.kt");
        }

        @Test
        @TestMetadata("constantsInWhen.kt")
        public void testConstantsInWhen() throws Exception {
            runTest("compiler/testData/codegen/box/constants/constantsInWhen.kt");
        }

        @Test
        @TestMetadata("divisionByZero.kt")
        public void testDivisionByZero() throws Exception {
            runTest("compiler/testData/codegen/box/constants/divisionByZero.kt");
        }

        @Test
        @TestMetadata("float.kt")
        public void testFloat() throws Exception {
            runTest("compiler/testData/codegen/box/constants/float.kt");
        }

        @Test
        @TestMetadata("kt9532.kt")
        public void testKt9532() throws Exception {
            runTest("compiler/testData/codegen/box/constants/kt9532.kt");
        }

        @Test
        @TestMetadata("kt9532_lv10.kt")
        public void testKt9532_lv10() throws Exception {
            runTest("compiler/testData/codegen/box/constants/kt9532_lv10.kt");
        }

        @Test
        @TestMetadata("long.kt")
        public void testLong() throws Exception {
            runTest("compiler/testData/codegen/box/constants/long.kt");
        }

        @Test
        @TestMetadata("numberLiteralCoercionToInferredType.kt")
        public void testNumberLiteralCoercionToInferredType() throws Exception {
            runTest("compiler/testData/codegen/box/constants/numberLiteralCoercionToInferredType.kt");
        }

        @Test
        @TestMetadata("privateConst.kt")
        public void testPrivateConst() throws Exception {
            runTest("compiler/testData/codegen/box/constants/privateConst.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/constructorCall")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstructorCall extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInConstructorCall() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/constructorCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("breakInConstructorArguments.kt")
        public void testBreakInConstructorArguments() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/breakInConstructorArguments.kt");
        }

        @Test
        @TestMetadata("continueInConstructorArguments.kt")
        public void testContinueInConstructorArguments() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/continueInConstructorArguments.kt");
        }

        @Test
        @TestMetadata("earlyReturnInConstructorArguments.kt")
        public void testEarlyReturnInConstructorArguments() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/earlyReturnInConstructorArguments.kt");
        }

        @Test
        @TestMetadata("inlineFunInConstructorCallEvaluationOrder.kt")
        public void testInlineFunInConstructorCallEvaluationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallEvaluationOrder.kt");
        }

        @Test
        @TestMetadata("inlineFunInConstructorCallWithDisabledNormalization.kt")
        public void testInlineFunInConstructorCallWithDisabledNormalization() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallWithDisabledNormalization.kt");
        }

        @Test
        @TestMetadata("inlineFunInConstructorCallWithEnabledNormalization.kt")
        public void testInlineFunInConstructorCallWithEnabledNormalization() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallWithEnabledNormalization.kt");
        }

        @Test
        @TestMetadata("inlineFunInConstructorCallWithStrictNormalization.kt")
        public void testInlineFunInConstructorCallWithStrictNormalization() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/inlineFunInConstructorCallWithStrictNormalization.kt");
        }

        @Test
        @TestMetadata("inlineFunInInnerClassConstructorCall.kt")
        public void testInlineFunInInnerClassConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/inlineFunInInnerClassConstructorCall.kt");
        }

        @Test
        @TestMetadata("inlineFunInLocalClassConstructorCall.kt")
        public void testInlineFunInLocalClassConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/inlineFunInLocalClassConstructorCall.kt");
        }

        @Test
        @TestMetadata("loopInInlineFunInSuperConstructorCallWithEnabledNormalization.kt")
        public void testLoopInInlineFunInSuperConstructorCallWithEnabledNormalization() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/loopInInlineFunInSuperConstructorCallWithEnabledNormalization.kt");
        }

        @Test
        @TestMetadata("loopInInlineFunInSuperConstructorCallWithEnabledNormalizationSince13.kt")
        public void testLoopInInlineFunInSuperConstructorCallWithEnabledNormalizationSince13() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/loopInInlineFunInSuperConstructorCallWithEnabledNormalizationSince13.kt");
        }

        @Test
        @TestMetadata("loopInInlineFunWithEnabledNormalization.kt")
        public void testLoopInInlineFunWithEnabledNormalization() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/loopInInlineFunWithEnabledNormalization.kt");
        }

        @Test
        @TestMetadata("nestedConstructorCallWithJumpOutInConstructorArguments.kt")
        public void testNestedConstructorCallWithJumpOutInConstructorArguments() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/nestedConstructorCallWithJumpOutInConstructorArguments.kt");
        }

        @Test
        @TestMetadata("nonLocalReturnInConstructorArguments.kt")
        public void testNonLocalReturnInConstructorArguments() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/nonLocalReturnInConstructorArguments.kt");
        }

        @Test
        @TestMetadata("possiblyPoppedUnitializedValueInArguments.kt")
        public void testPossiblyPoppedUnitializedValueInArguments() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/possiblyPoppedUnitializedValueInArguments.kt");
        }

        @Test
        @TestMetadata("regularConstructorCallEvaluationOrder.kt")
        public void testRegularConstructorCallEvaluationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/regularConstructorCallEvaluationOrder.kt");
        }

        @Test
        @TestMetadata("tryCatchInConstructorCallEvaluationOrder.kt")
        public void testTryCatchInConstructorCallEvaluationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/constructorCall/tryCatchInConstructorCallEvaluationOrder.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInContracts() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/contracts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("constructorArgument.kt")
        public void testConstructorArgument() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/constructorArgument.kt");
        }

        @Test
        @TestMetadata("destructuredVariable.kt")
        public void testDestructuredVariable() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/destructuredVariable.kt");
        }

        @Test
        @TestMetadata("exactlyOnceNotInline.kt")
        public void testExactlyOnceNotInline() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/exactlyOnceNotInline.kt");
        }

        @Test
        @TestMetadata("exception.kt")
        public void testException() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/exception.kt");
        }

        @Test
        @TestMetadata("fieldInConstructorParens.kt")
        public void testFieldInConstructorParens() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/fieldInConstructorParens.kt");
        }

        @Test
        @TestMetadata("fieldReadInConstructor.kt")
        public void testFieldReadInConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/fieldReadInConstructor.kt");
        }

        @Test
        @TestMetadata("forLoop.kt")
        public void testForLoop() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/forLoop.kt");
        }

        @Test
        @TestMetadata("functionParameter.kt")
        public void testFunctionParameter() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/functionParameter.kt");
        }

        @Test
        @TestMetadata("kt39374.kt")
        public void testKt39374() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/kt39374.kt");
        }

        @Test
        @TestMetadata("lambdaParameter.kt")
        public void testLambdaParameter() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/lambdaParameter.kt");
        }

        @Test
        @TestMetadata("listAppend.kt")
        public void testListAppend() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/listAppend.kt");
        }

        @Test
        @TestMetadata("valInWhen.kt")
        public void testValInWhen() throws Exception {
            runTest("compiler/testData/codegen/box/contracts/valInWhen.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/controlStructures")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlStructures extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInControlStructures() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("bottles.kt")
        public void testBottles() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/bottles.kt");
        }

        @Test
        @TestMetadata("breakInFinally.kt")
        public void testBreakInFinally() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/breakInFinally.kt");
        }

        @Test
        @TestMetadata("breakInWhen.kt")
        public void testBreakInWhen() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/breakInWhen.kt");
        }

        @Test
        @TestMetadata("compareBoxedIntegerToZero.kt")
        public void testCompareBoxedIntegerToZero() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/compareBoxedIntegerToZero.kt");
        }

        @Test
        @TestMetadata("conditionOfEmptyIf.kt")
        public void testConditionOfEmptyIf() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/conditionOfEmptyIf.kt");
        }

        @Test
        @TestMetadata("continueInExpr.kt")
        public void testContinueInExpr() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/continueInExpr.kt");
        }

        @Test
        @TestMetadata("continueInFor.kt")
        public void testContinueInFor() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/continueInFor.kt");
        }

        @Test
        @TestMetadata("continueInForCondition.kt")
        public void testContinueInForCondition() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/continueInForCondition.kt");
        }

        @Test
        @TestMetadata("continueInWhen.kt")
        public void testContinueInWhen() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/continueInWhen.kt");
        }

        @Test
        @TestMetadata("continueInWhile.kt")
        public void testContinueInWhile() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/continueInWhile.kt");
        }

        @Test
        @TestMetadata("continueToLabelInFor.kt")
        public void testContinueToLabelInFor() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/continueToLabelInFor.kt");
        }

        @Test
        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/doWhile.kt");
        }

        @Test
        @TestMetadata("doWhileFib.kt")
        public void testDoWhileFib() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/doWhileFib.kt");
        }

        @Test
        @TestMetadata("doWhileWithContinue.kt")
        public void testDoWhileWithContinue() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/doWhileWithContinue.kt");
        }

        @Test
        @TestMetadata("emptyDoWhile.kt")
        public void testEmptyDoWhile() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/emptyDoWhile.kt");
        }

        @Test
        @TestMetadata("emptyFor.kt")
        public void testEmptyFor() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/emptyFor.kt");
        }

        @Test
        @TestMetadata("emptyWhile.kt")
        public void testEmptyWhile() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/emptyWhile.kt");
        }

        @Test
        @TestMetadata("factorialTest.kt")
        public void testFactorialTest() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/factorialTest.kt");
        }

        @Test
        @TestMetadata("finallyOnEmptyReturn.kt")
        public void testFinallyOnEmptyReturn() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/finallyOnEmptyReturn.kt");
        }

        @Test
        @TestMetadata("forArrayList.kt")
        public void testForArrayList() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forArrayList.kt");
        }

        @Test
        @TestMetadata("forArrayListMultiDecl.kt")
        public void testForArrayListMultiDecl() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forArrayListMultiDecl.kt");
        }

        @Test
        @TestMetadata("forInCharSequence.kt")
        public void testForInCharSequence() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forInCharSequence.kt");
        }

        @Test
        @TestMetadata("forInCharSequenceMut.kt")
        public void testForInCharSequenceMut() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceMut.kt");
        }

        @Test
        @TestMetadata("forInSmartCastToArray.kt")
        public void testForInSmartCastToArray() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forInSmartCastToArray.kt");
        }

        @Test
        @TestMetadata("forLoopMemberExtensionAll.kt")
        public void testForLoopMemberExtensionAll() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionAll.kt");
        }

        @Test
        @TestMetadata("forLoopMemberExtensionHasNext.kt")
        public void testForLoopMemberExtensionHasNext() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionHasNext.kt");
        }

        @Test
        @TestMetadata("forLoopMemberExtensionNext.kt")
        public void testForLoopMemberExtensionNext() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forLoopMemberExtensionNext.kt");
        }

        @Test
        @TestMetadata("forNullableCharInString.kt")
        public void testForNullableCharInString() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forNullableCharInString.kt");
        }

        @Test
        @TestMetadata("forUserType.kt")
        public void testForUserType() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/forUserType.kt");
        }

        @Test
        @TestMetadata("ifConst1.kt")
        public void testIfConst1() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/ifConst1.kt");
        }

        @Test
        @TestMetadata("ifConst2.kt")
        public void testIfConst2() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/ifConst2.kt");
        }

        @Test
        @TestMetadata("ifIncompatibleBranches.kt")
        public void testIfIncompatibleBranches() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/ifIncompatibleBranches.kt");
        }

        @Test
        @TestMetadata("inRangeConditionsInWhen.kt")
        public void testInRangeConditionsInWhen() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/inRangeConditionsInWhen.kt");
        }

        @Test
        @TestMetadata("kt12908.kt")
        public void testKt12908() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt12908.kt");
        }

        @Test
        @TestMetadata("kt12908_2.kt")
        public void testKt12908_2() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt12908_2.kt");
        }

        @Test
        @TestMetadata("kt1441.kt")
        public void testKt1441() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt1441.kt");
        }

        @Test
        @TestMetadata("kt14839.kt")
        public void testKt14839() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt14839.kt");
        }

        @Test
        @TestMetadata("kt15726.kt")
        public void testKt15726() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt15726.kt");
        }

        @Test
        @TestMetadata("kt1688.kt")
        public void testKt1688() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt1688.kt");
        }

        @Test
        @TestMetadata("kt17110.kt")
        public void testKt17110() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt17110.kt");
        }

        @Test
        @TestMetadata("kt1742.kt")
        public void testKt1742() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt1742.kt");
        }

        @Test
        @TestMetadata("kt17590.kt")
        public void testKt17590() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt17590.kt");
        }

        @Test
        @TestMetadata("kt17590_long.kt")
        public void testKt17590_long() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt17590_long.kt");
        }

        @Test
        @TestMetadata("kt1899.kt")
        public void testKt1899() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt1899.kt");
        }

        @Test
        @TestMetadata("kt2147.kt")
        public void testKt2147() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt2147.kt");
        }

        @Test
        @TestMetadata("kt2259.kt")
        public void testKt2259() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt2259.kt");
        }

        @Test
        @TestMetadata("kt2291.kt")
        public void testKt2291() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt2291.kt");
        }

        @Test
        @TestMetadata("kt237.kt")
        public void testKt237() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt237.kt");
        }

        @Test
        @TestMetadata("kt2416.kt")
        public void testKt2416() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt2416.kt");
        }

        @Test
        @TestMetadata("kt2423.kt")
        public void testKt2423() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt2423.kt");
        }

        @Test
        @TestMetadata("kt2577.kt")
        public void testKt2577() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt2577.kt");
        }

        @Test
        @TestMetadata("kt2597.kt")
        public void testKt2597() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt2597.kt");
        }

        @Test
        @TestMetadata("kt299.kt")
        public void testKt299() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt299.kt");
        }

        @Test
        @TestMetadata("kt3087.kt")
        public void testKt3087() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt3087.kt");
        }

        @Test
        @TestMetadata("kt3203_1.kt")
        public void testKt3203_1() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt3203_1.kt");
        }

        @Test
        @TestMetadata("kt3203_2.kt")
        public void testKt3203_2() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt3203_2.kt");
        }

        @Test
        @TestMetadata("kt3273.kt")
        public void testKt3273() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt3273.kt");
        }

        @Test
        @TestMetadata("kt3280.kt")
        public void testKt3280() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt3280.kt");
        }

        @Test
        @TestMetadata("kt3574.kt")
        public void testKt3574() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt3574.kt");
        }

        @Test
        @TestMetadata("kt416.kt")
        public void testKt416() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt416.kt");
        }

        @Test
        @TestMetadata("kt42455.kt")
        public void testKt42455() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt42455.kt");
        }

        @Test
        @TestMetadata("kt513.kt")
        public void testKt513() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt513.kt");
        }

        @Test
        @TestMetadata("kt628.kt")
        public void testKt628() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt628.kt");
        }

        @Test
        @TestMetadata("kt769.kt")
        public void testKt769() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt769.kt");
        }

        @Test
        @TestMetadata("kt772.kt")
        public void testKt772() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt772.kt");
        }

        @Test
        @TestMetadata("kt773.kt")
        public void testKt773() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt773.kt");
        }

        @Test
        @TestMetadata("kt8148.kt")
        public void testKt8148() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt8148.kt");
        }

        @Test
        @TestMetadata("kt8148_break.kt")
        public void testKt8148_break() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt8148_break.kt");
        }

        @Test
        @TestMetadata("kt8148_continue.kt")
        public void testKt8148_continue() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt8148_continue.kt");
        }

        @Test
        @TestMetadata("kt870.kt")
        public void testKt870() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt870.kt");
        }

        @Test
        @TestMetadata("kt9022Return.kt")
        public void testKt9022Return() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt9022Return.kt");
        }

        @Test
        @TestMetadata("kt9022Throw.kt")
        public void testKt9022Throw() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt9022Throw.kt");
        }

        @Test
        @TestMetadata("kt910.kt")
        public void testKt910() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt910.kt");
        }

        @Test
        @TestMetadata("kt958.kt")
        public void testKt958() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/kt958.kt");
        }

        @Test
        @TestMetadata("longRange.kt")
        public void testLongRange() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/longRange.kt");
        }

        @Test
        @TestMetadata("parameterWithNameForFunctionType.kt")
        public void testParameterWithNameForFunctionType() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/parameterWithNameForFunctionType.kt");
        }

        @Test
        @TestMetadata("quicksort.kt")
        public void testQuicksort() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/quicksort.kt");
        }

        @Test
        @TestMetadata("tryCatchFinallyChain.kt")
        public void testTryCatchFinallyChain() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/tryCatchFinallyChain.kt");
        }

        @Test
        @TestMetadata("tryFinallyGeneric.kt")
        public void testTryFinallyGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/controlStructures/tryFinallyGeneric.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions")
        @TestDataPath("$PROJECT_ROOT")
        public class BreakContinueInExpressions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBreakContinueInExpressions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("breakFromOuter.kt")
            public void testBreakFromOuter() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakFromOuter.kt");
            }

            @Test
            @TestMetadata("breakInDoWhile.kt")
            public void testBreakInDoWhile() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInDoWhile.kt");
            }

            @Test
            @TestMetadata("breakInExpr.kt")
            public void testBreakInExpr() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/breakInExpr.kt");
            }

            @Test
            @TestMetadata("continueInDoWhile.kt")
            public void testContinueInDoWhile() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInDoWhile.kt");
            }

            @Test
            @TestMetadata("continueInExpr.kt")
            public void testContinueInExpr() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/continueInExpr.kt");
            }

            @Test
            @TestMetadata("inlineWithStack.kt")
            public void testInlineWithStack() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/inlineWithStack.kt");
            }

            @Test
            @TestMetadata("innerLoopWithStack.kt")
            public void testInnerLoopWithStack() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/innerLoopWithStack.kt");
            }

            @Test
            @TestMetadata("kt14581.kt")
            public void testKt14581() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt14581.kt");
            }

            @Test
            @TestMetadata("kt16713.kt")
            public void testKt16713() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713.kt");
            }

            @Test
            @TestMetadata("kt16713_2.kt")
            public void testKt16713_2() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt16713_2.kt");
            }

            @Test
            @TestMetadata("kt17384.kt")
            public void testKt17384() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt17384.kt");
            }

            @Test
            @TestMetadata("kt9022And.kt")
            public void testKt9022And() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022And.kt");
            }

            @Test
            @TestMetadata("kt9022Or.kt")
            public void testKt9022Or() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/kt9022Or.kt");
            }

            @Test
            @TestMetadata("pathologicalDoWhile.kt")
            public void testPathologicalDoWhile() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/pathologicalDoWhile.kt");
            }

            @Test
            @TestMetadata("popSizes.kt")
            public void testPopSizes() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/popSizes.kt");
            }

            @Test
            @TestMetadata("tryFinally1.kt")
            public void testTryFinally1() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally1.kt");
            }

            @Test
            @TestMetadata("tryFinally2.kt")
            public void testTryFinally2() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/tryFinally2.kt");
            }

            @Test
            @TestMetadata("whileTrueBreak.kt")
            public void testWhileTrueBreak() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/breakContinueInExpressions/whileTrueBreak.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArray")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInArray extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInArray() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArray"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInArraySpecializedToUntil.kt")
            public void testForInArraySpecializedToUntil() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArraySpecializedToUntil.kt");
            }

            @Test
            @TestMetadata("forInArrayWithArrayPropertyUpdatedInLoopBody.kt")
            public void testForInArrayWithArrayPropertyUpdatedInLoopBody() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayPropertyUpdatedInLoopBody.kt");
            }

            @Test
            @TestMetadata("forInArrayWithArrayVarUpdatedInLoopBody13.kt")
            public void testForInArrayWithArrayVarUpdatedInLoopBody13() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInArrayWithArrayVarUpdatedInLoopBody13.kt");
            }

            @Test
            @TestMetadata("forInDelegatedPropertyUpdatedInLoopBody.kt")
            public void testForInDelegatedPropertyUpdatedInLoopBody() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInDelegatedPropertyUpdatedInLoopBody.kt");
            }

            @Test
            @TestMetadata("forInDoubleArrayWithUpcast.kt")
            public void testForInDoubleArrayWithUpcast() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInDoubleArrayWithUpcast.kt");
            }

            @Test
            @TestMetadata("forInFieldUpdatedInLoopBody.kt")
            public void testForInFieldUpdatedInLoopBody() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInFieldUpdatedInLoopBody.kt");
            }

            @Test
            @TestMetadata("forInInlineClassArrayWithUpcast.kt")
            public void testForInInlineClassArrayWithUpcast() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forInInlineClassArrayWithUpcast.kt");
            }

            @Test
            @TestMetadata("forIntArray.kt")
            public void testForIntArray() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forIntArray.kt");
            }

            @Test
            @TestMetadata("forNullableIntArray.kt")
            public void testForNullableIntArray() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forNullableIntArray.kt");
            }

            @Test
            @TestMetadata("forPrimitiveIntArray.kt")
            public void testForPrimitiveIntArray() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArray/forPrimitiveIntArray.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInArrayWithIndex extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInArrayWithIndex() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInArrayOfObjectArrayWithIndex.kt")
            public void testForInArrayOfObjectArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayOfObjectArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInArrayOfPrimArrayWithIndex.kt")
            public void testForInArrayOfPrimArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayOfPrimArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInArrayWithIndexBreakAndContinue.kt")
            public void testForInArrayWithIndexBreakAndContinue() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexBreakAndContinue.kt");
            }

            @Test
            @TestMetadata("forInArrayWithIndexContinuesAsUnmodified.kt")
            public void testForInArrayWithIndexContinuesAsUnmodified() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexContinuesAsUnmodified.kt");
            }

            @Test
            @TestMetadata("forInArrayWithIndexNoElementVar.kt")
            public void testForInArrayWithIndexNoElementVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoElementVar.kt");
            }

            @Test
            @TestMetadata("forInArrayWithIndexNoIndexOrElementVar.kt")
            public void testForInArrayWithIndexNoIndexOrElementVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoIndexOrElementVar.kt");
            }

            @Test
            @TestMetadata("forInArrayWithIndexNoIndexVar.kt")
            public void testForInArrayWithIndexNoIndexVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNoIndexVar.kt");
            }

            @Test
            @TestMetadata("forInArrayWithIndexNotDestructured.kt")
            public void testForInArrayWithIndexNotDestructured() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexNotDestructured.kt");
            }

            @Test
            @TestMetadata("forInArrayWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInArrayWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInArrayWithIndexWithExplicitlyTypedIndexVariable.kt");
            }

            @Test
            @TestMetadata("forInByteArrayWithIndex.kt")
            public void testForInByteArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInByteArrayWithIndexWithSmartCast.kt")
            public void testForInByteArrayWithIndexWithSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInByteArrayWithIndexWithSmartCast.kt");
            }

            @Test
            @TestMetadata("forInEmptyArrayWithIndex.kt")
            public void testForInEmptyArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInEmptyArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInGenericArrayOfIntsWithIndex.kt")
            public void testForInGenericArrayOfIntsWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndex.kt");
            }

            @Test
            @TestMetadata("forInGenericArrayOfIntsWithIndexWithSmartCast.kt")
            public void testForInGenericArrayOfIntsWithIndexWithSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayOfIntsWithIndexWithSmartCast.kt");
            }

            @Test
            @TestMetadata("forInGenericArrayWithIndex.kt")
            public void testForInGenericArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInGenericArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInIntArrayWithIndex.kt")
            public void testForInIntArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInIntArrayWithIndexWithSmartCast.kt")
            public void testForInIntArrayWithIndexWithSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInIntArrayWithIndexWithSmartCast.kt");
            }

            @Test
            @TestMetadata("forInObjectArrayWithIndex.kt")
            public void testForInObjectArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInObjectArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInShortArrayWithIndex.kt")
            public void testForInShortArrayWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrayWithIndex.kt");
            }

            @Test
            @TestMetadata("forInShortArrayWithIndexWithSmartCast.kt")
            public void testForInShortArrayWithIndexWithSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInArrayWithIndex/forInShortArrayWithIndexWithSmartCast.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInCharSequenceWithIndex extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInCharSequenceWithIndex() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInCharSeqWithIndexStops.kt")
            public void testForInCharSeqWithIndexStops() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSeqWithIndexStops.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceTypeParameterWithIndex.kt")
            public void testForInCharSequenceTypeParameterWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceTypeParameterWithIndex.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceWithIndex.kt")
            public void testForInCharSequenceWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndex.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceWithIndexBreakAndContinue.kt")
            public void testForInCharSequenceWithIndexBreakAndContinue() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexBreakAndContinue.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceWithIndexCheckSideEffects.kt")
            public void testForInCharSequenceWithIndexCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceWithIndexNoElementVarCheckSideEffects.kt")
            public void testForInCharSequenceWithIndexNoElementVarCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexNoElementVarCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceWithIndexNoIndexVarCheckSideEffects.kt")
            public void testForInCharSequenceWithIndexNoIndexVarCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInCharSequenceWithIndexNoIndexVarCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInEmptyStringWithIndex.kt")
            public void testForInEmptyStringWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInEmptyStringWithIndex.kt");
            }

            @Test
            @TestMetadata("forInStringWithIndex.kt")
            public void testForInStringWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndex.kt");
            }

            @Test
            @TestMetadata("forInStringWithIndexNoElementVar.kt")
            public void testForInStringWithIndexNoElementVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoElementVar.kt");
            }

            @Test
            @TestMetadata("forInStringWithIndexNoIndexOrElementVar.kt")
            public void testForInStringWithIndexNoIndexOrElementVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoIndexOrElementVar.kt");
            }

            @Test
            @TestMetadata("forInStringWithIndexNoIndexVar.kt")
            public void testForInStringWithIndexNoIndexVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNoIndexVar.kt");
            }

            @Test
            @TestMetadata("forInStringWithIndexNotDestructured.kt")
            public void testForInStringWithIndexNotDestructured() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexNotDestructured.kt");
            }

            @Test
            @TestMetadata("forInStringWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInStringWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInCharSequenceWithIndex/forInStringWithIndexWithExplicitlyTypedIndexVariable.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInIterableWithIndex extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInIterableWithIndex() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInEmptyListWithIndex.kt")
            public void testForInEmptyListWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInEmptyListWithIndex.kt");
            }

            @Test
            @TestMetadata("forInIterableTypeParameterWithIndex.kt")
            public void testForInIterableTypeParameterWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableTypeParameterWithIndex.kt");
            }

            @Test
            @TestMetadata("forInIterableWithIndexCheckSideEffects.kt")
            public void testForInIterableWithIndexCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInIterableWithIndexNoElementVarCheckSideEffects.kt")
            public void testForInIterableWithIndexNoElementVarCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexNoElementVarCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInIterableWithIndexNoIndexVarCheckSideEffects.kt")
            public void testForInIterableWithIndexNoIndexVarCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInIterableWithIndexNoIndexVarCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInListWithIndex.kt")
            public void testForInListWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndex.kt");
            }

            @Test
            @TestMetadata("forInListWithIndexBreakAndContinue.kt")
            public void testForInListWithIndexBreakAndContinue() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexBreakAndContinue.kt");
            }

            @Test
            @TestMetadata("forInListWithIndexNoElementVar.kt")
            public void testForInListWithIndexNoElementVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoElementVar.kt");
            }

            @Test
            @TestMetadata("forInListWithIndexNoIndexVar.kt")
            public void testForInListWithIndexNoIndexVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexNoIndexVar.kt");
            }

            @Test
            @TestMetadata("forInListWithIndexThrowsCME.kt")
            public void testForInListWithIndexThrowsCME() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexThrowsCME.kt");
            }

            @Test
            @TestMetadata("forInListWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInListWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInIterableWithIndex/forInListWithIndexWithExplicitlyTypedIndexVariable.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInSequenceWithIndex extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInSequenceWithIndex() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInEmptySequenceWithIndex.kt")
            public void testForInEmptySequenceWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInEmptySequenceWithIndex.kt");
            }

            @Test
            @TestMetadata("forInSequenceTypeParameterWithIndex.kt")
            public void testForInSequenceTypeParameterWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceTypeParameterWithIndex.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndex.kt")
            public void testForInSequenceWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndex.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexBreakAndContinue.kt")
            public void testForInSequenceWithIndexBreakAndContinue() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexBreakAndContinue.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexCheckSideEffects.kt")
            public void testForInSequenceWithIndexCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexNoElementVar.kt")
            public void testForInSequenceWithIndexNoElementVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoElementVar.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexNoElementVarCheckSideEffects.kt")
            public void testForInSequenceWithIndexNoElementVarCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoElementVarCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexNoIndexVar.kt")
            public void testForInSequenceWithIndexNoIndexVar() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVar.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexNoIndexVarCheckSideEffects.kt")
            public void testForInSequenceWithIndexNoIndexVarCheckSideEffects() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexNoIndexVarCheckSideEffects.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexThrowsCME.kt")
            public void testForInSequenceWithIndexThrowsCME() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexThrowsCME.kt");
            }

            @Test
            @TestMetadata("forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt")
            public void testForInSequenceWithIndexWithExplicitlyTypedIndexVariable() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/forInSequenceWithIndex/forInSequenceWithIndexWithExplicitlyTypedIndexVariable.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/returnsNothing")
        @TestDataPath("$PROJECT_ROOT")
        public class ReturnsNothing extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInReturnsNothing() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/returnsNothing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("ifElse.kt")
            public void testIfElse() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/ifElse.kt");
            }

            @Test
            @TestMetadata("inlineMethod.kt")
            public void testInlineMethod() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/inlineMethod.kt");
            }

            @Test
            @TestMetadata("propertyGetter.kt")
            public void testPropertyGetter() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/propertyGetter.kt");
            }

            @Test
            @TestMetadata("tryCatch.kt")
            public void testTryCatch() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/tryCatch.kt");
            }

            @Test
            @TestMetadata("when.kt")
            public void testWhen() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/returnsNothing/when.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions")
        @TestDataPath("$PROJECT_ROOT")
        public class TryCatchInExpressions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInTryCatchInExpressions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("catch.kt")
            public void testCatch() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/catch.kt");
            }

            @Test
            @TestMetadata("complexChain.kt")
            public void testComplexChain() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/complexChain.kt");
            }

            @Test
            @TestMetadata("deadTryCatch.kt")
            public void testDeadTryCatch() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/deadTryCatch.kt");
            }

            @Test
            @TestMetadata("differentTypes.kt")
            public void testDifferentTypes() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/differentTypes.kt");
            }

            @Test
            @TestMetadata("expectException.kt")
            public void testExpectException() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/expectException.kt");
            }

            @Test
            @TestMetadata("finally.kt")
            public void testFinally() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/finally.kt");
            }

            @Test
            @TestMetadata("inlineTryCatch.kt")
            public void testInlineTryCatch() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryCatch.kt");
            }

            @Test
            @TestMetadata("inlineTryExpr.kt")
            public void testInlineTryExpr() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryExpr.kt");
            }

            @Test
            @TestMetadata("inlineTryFinally.kt")
            public void testInlineTryFinally() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/inlineTryFinally.kt");
            }

            @Test
            @TestMetadata("kt17572.kt")
            public void testKt17572() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572.kt");
            }

            @Test
            @TestMetadata("kt17572_2.kt")
            public void testKt17572_2() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2.kt");
            }

            @Test
            @TestMetadata("kt17572_2_ext.kt")
            public void testKt17572_2_ext() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_2_ext.kt");
            }

            @Test
            @TestMetadata("kt17572_ext.kt")
            public void testKt17572_ext() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_ext.kt");
            }

            @Test
            @TestMetadata("kt17572_nested.kt")
            public void testKt17572_nested() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17572_nested.kt");
            }

            @Test
            @TestMetadata("kt17573.kt")
            public void testKt17573() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573.kt");
            }

            @Test
            @TestMetadata("kt17573_nested.kt")
            public void testKt17573_nested() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt17573_nested.kt");
            }

            @Test
            @TestMetadata("kt8608.kt")
            public void testKt8608() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt8608.kt");
            }

            @Test
            @TestMetadata("kt9644try.kt")
            public void testKt9644try() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/kt9644try.kt");
            }

            @Test
            @TestMetadata("multipleCatchBlocks.kt")
            public void testMultipleCatchBlocks() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/multipleCatchBlocks.kt");
            }

            @Test
            @TestMetadata("splitTry.kt")
            public void testSplitTry() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTry.kt");
            }

            @Test
            @TestMetadata("splitTryCorner1.kt")
            public void testSplitTryCorner1() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTryCorner1.kt");
            }

            @Test
            @TestMetadata("splitTryCorner2.kt")
            public void testSplitTryCorner2() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/splitTryCorner2.kt");
            }

            @Test
            @TestMetadata("try.kt")
            public void testTry() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/try.kt");
            }

            @Test
            @TestMetadata("tryAfterTry.kt")
            public void testTryAfterTry() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAfterTry.kt");
            }

            @Test
            @TestMetadata("tryAndBreak.kt")
            public void testTryAndBreak() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndBreak.kt");
            }

            @Test
            @TestMetadata("tryAndContinue.kt")
            public void testTryAndContinue() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryAndContinue.kt");
            }

            @Test
            @TestMetadata("tryCatchAfterWhileTrue.kt")
            public void testTryCatchAfterWhileTrue() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryCatchAfterWhileTrue.kt");
            }

            @Test
            @TestMetadata("tryInsideCatch.kt")
            public void testTryInsideCatch() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideCatch.kt");
            }

            @Test
            @TestMetadata("tryInsideTry.kt")
            public void testTryInsideTry() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/tryInsideTry.kt");
            }

            @Test
            @TestMetadata("unmatchedInlineMarkers.kt")
            public void testUnmatchedInlineMarkers() throws Exception {
                runTest("compiler/testData/codegen/box/controlStructures/tryCatchInExpressions/unmatchedInlineMarkers.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    public class Coroutines extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("32defaultParametersInSuspend.kt")
        public void test32defaultParametersInSuspend() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/32defaultParametersInSuspend.kt");
        }

        @Test
        @TestMetadata("accessorForSuspend.kt")
        public void testAccessorForSuspend() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/accessorForSuspend.kt");
        }

        @Test
        public void testAllFilesPresentInCoroutines() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("async.kt")
        public void testAsync() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/async.kt");
        }

        @Test
        @TestMetadata("asyncException.kt")
        public void testAsyncException() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/asyncException.kt");
        }

        @Test
        @TestMetadata("asyncIteratorNullMerge_1_3.kt")
        public void testAsyncIteratorNullMerge_1_3() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/asyncIteratorNullMerge_1_3.kt");
        }

        @Test
        @TestMetadata("asyncIteratorToList_1_3.kt")
        public void testAsyncIteratorToList_1_3() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/asyncIteratorToList_1_3.kt");
        }

        @Test
        @TestMetadata("asyncIterator_1_3.kt")
        public void testAsyncIterator_1_3() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/asyncIterator_1_3.kt");
        }

        @Test
        @TestMetadata("await.kt")
        public void testAwait() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/await.kt");
        }

        @Test
        @TestMetadata("beginWithException.kt")
        public void testBeginWithException() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/beginWithException.kt");
        }

        @Test
        @TestMetadata("beginWithExceptionNoHandleException.kt")
        public void testBeginWithExceptionNoHandleException() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/beginWithExceptionNoHandleException.kt");
        }

        @Test
        @TestMetadata("builderInferenceAndGenericArrayAcessCall.kt")
        public void testBuilderInferenceAndGenericArrayAcessCall() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/builderInferenceAndGenericArrayAcessCall.kt");
        }

        @Test
        @TestMetadata("captureInfixFun.kt")
        public void testCaptureInfixFun() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/captureInfixFun.kt");
        }

        @Test
        @TestMetadata("captureMutableLocalVariableInsideCoroutineBlock.kt")
        public void testCaptureMutableLocalVariableInsideCoroutineBlock() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/captureMutableLocalVariableInsideCoroutineBlock.kt");
        }

        @Test
        @TestMetadata("captureUnaryOperator.kt")
        public void testCaptureUnaryOperator() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/captureUnaryOperator.kt");
        }

        @Test
        @TestMetadata("capturedVarInSuspendLambda.kt")
        public void testCapturedVarInSuspendLambda() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/capturedVarInSuspendLambda.kt");
        }

        @Test
        @TestMetadata("catchWithInlineInsideSuspend.kt")
        public void testCatchWithInlineInsideSuspend() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/catchWithInlineInsideSuspend.kt");
        }

        @Test
        @TestMetadata("coercionToUnit.kt")
        public void testCoercionToUnit() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/coercionToUnit.kt");
        }

        @Test
        @TestMetadata("controllerAccessFromInnerLambda.kt")
        public void testControllerAccessFromInnerLambda() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/controllerAccessFromInnerLambda.kt");
        }

        @Test
        @TestMetadata("coroutineContextInInlinedLambda.kt")
        public void testCoroutineContextInInlinedLambda() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/coroutineContextInInlinedLambda.kt");
        }

        @Test
        @TestMetadata("coroutineToString.kt")
        public void testCoroutineToString() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/coroutineToString.kt");
        }

        @Test
        @TestMetadata("createCoroutineSafe.kt")
        public void testCreateCoroutineSafe() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/createCoroutineSafe.kt");
        }

        @Test
        @TestMetadata("createCoroutinesOnManualInstances.kt")
        public void testCreateCoroutinesOnManualInstances() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/createCoroutinesOnManualInstances.kt");
        }

        @Test
        @TestMetadata("crossInlineWithCapturedOuterReceiver.kt")
        public void testCrossInlineWithCapturedOuterReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/crossInlineWithCapturedOuterReceiver.kt");
        }

        @Test
        @TestMetadata("defaultParametersInSuspend.kt")
        public void testDefaultParametersInSuspend() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspend.kt");
        }

        @Test
        @TestMetadata("defaultParametersInSuspendWithJvmOverloads.kt")
        public void testDefaultParametersInSuspendWithJvmOverloads() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/defaultParametersInSuspendWithJvmOverloads.kt");
        }

        @Test
        @TestMetadata("delegatedSuspendMember.kt")
        public void testDelegatedSuspendMember() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/delegatedSuspendMember.kt");
        }

        @Test
        @TestMetadata("dispatchResume.kt")
        public void testDispatchResume() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/dispatchResume.kt");
        }

        @Test
        @TestMetadata("doubleColonExpressionsGenerationInBuilderInference.kt")
        public void testDoubleColonExpressionsGenerationInBuilderInference() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/doubleColonExpressionsGenerationInBuilderInference.kt");
        }

        @Test
        @TestMetadata("emptyClosure.kt")
        public void testEmptyClosure() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/emptyClosure.kt");
        }

        @Test
        @TestMetadata("emptyCommonConstraintSystemForCoroutineInferenceCall.kt")
        public void testEmptyCommonConstraintSystemForCoroutineInferenceCall() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/emptyCommonConstraintSystemForCoroutineInferenceCall.kt");
        }

        @Test
        @TestMetadata("epam.kt")
        public void testEpam() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/epam.kt");
        }

        @Test
        @TestMetadata("falseUnitCoercion.kt")
        public void testFalseUnitCoercion() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/falseUnitCoercion.kt");
        }

        @Test
        @TestMetadata("generate.kt")
        public void testGenerate() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/generate.kt");
        }

        @Test
        @TestMetadata("handleException.kt")
        public void testHandleException() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/handleException.kt");
        }

        @Test
        @TestMetadata("handleResultCallEmptyBody.kt")
        public void testHandleResultCallEmptyBody() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/handleResultCallEmptyBody.kt");
        }

        @Test
        @TestMetadata("handleResultNonUnitExpression.kt")
        public void testHandleResultNonUnitExpression() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/handleResultNonUnitExpression.kt");
        }

        @Test
        @TestMetadata("handleResultSuspended.kt")
        public void testHandleResultSuspended() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/handleResultSuspended.kt");
        }

        @Test
        @TestMetadata("illegalState.kt")
        public void testIllegalState() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/illegalState.kt");
        }

        @Test
        @TestMetadata("indirectInlineUsedAsNonInline.kt")
        public void testIndirectInlineUsedAsNonInline() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/indirectInlineUsedAsNonInline.kt");
        }

        @Test
        @TestMetadata("inlineFunInGenericClass.kt")
        public void testInlineFunInGenericClass() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/inlineFunInGenericClass.kt");
        }

        @Test
        @TestMetadata("inlineFunctionInMultifileClass.kt")
        public void testInlineFunctionInMultifileClass() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/inlineFunctionInMultifileClass.kt");
        }

        @Test
        @TestMetadata("inlineFunctionInMultifileClassUnoptimized.kt")
        public void testInlineFunctionInMultifileClassUnoptimized() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/inlineFunctionInMultifileClassUnoptimized.kt");
        }

        @Test
        @TestMetadata("inlineGenericFunCalledFromSubclass.kt")
        public void testInlineGenericFunCalledFromSubclass() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/inlineGenericFunCalledFromSubclass.kt");
        }

        @Test
        @TestMetadata("inlineSuspendFunction.kt")
        public void testInlineSuspendFunction() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/inlineSuspendFunction.kt");
        }

        @Test
        @TestMetadata("inlineSuspendLambdaNonLocalReturn.kt")
        public void testInlineSuspendLambdaNonLocalReturn() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/inlineSuspendLambdaNonLocalReturn.kt");
        }

        @Test
        @TestMetadata("inlinedTryCatchFinally.kt")
        public void testInlinedTryCatchFinally() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/inlinedTryCatchFinally.kt");
        }

        @Test
        @TestMetadata("innerSuspensionCalls.kt")
        public void testInnerSuspensionCalls() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/innerSuspensionCalls.kt");
        }

        @Test
        @TestMetadata("instanceOfContinuation.kt")
        public void testInstanceOfContinuation() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/instanceOfContinuation.kt");
        }

        @Test
        @TestMetadata("iterateOverArray.kt")
        public void testIterateOverArray() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/iterateOverArray.kt");
        }

        @Test
        @TestMetadata("kt12958.kt")
        public void testKt12958() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt12958.kt");
        }

        @Test
        @TestMetadata("kt15016.kt")
        public void testKt15016() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt15016.kt");
        }

        @Test
        @TestMetadata("kt15017.kt")
        public void testKt15017() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt15017.kt");
        }

        @Test
        @TestMetadata("kt15930.kt")
        public void testKt15930() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt15930.kt");
        }

        @Test
        @TestMetadata("kt21605.kt")
        public void testKt21605() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt21605.kt");
        }

        @Test
        @TestMetadata("kt25912.kt")
        public void testKt25912() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt25912.kt");
        }

        @Test
        @TestMetadata("kt28844.kt")
        public void testKt28844() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt28844.kt");
        }

        @Test
        @TestMetadata("kt30858.kt")
        public void testKt30858() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt30858.kt");
        }

        @Test
        @TestMetadata("kt31784.kt")
        public void testKt31784() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt31784.kt");
        }

        @Test
        @TestMetadata("kt35967.kt")
        public void testKt35967() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt35967.kt");
        }

        @Test
        @TestMetadata("kt42028.kt")
        public void testKt42028() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt42028.kt");
        }

        @Test
        @TestMetadata("kt42554.kt")
        public void testKt42554() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt42554.kt");
        }

        @Test
        @TestMetadata("kt44221.kt")
        public void testKt44221() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/kt44221.kt");
        }

        @Test
        @TestMetadata("lastExpressionIsLoop.kt")
        public void testLastExpressionIsLoop() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/lastExpressionIsLoop.kt");
        }

        @Test
        @TestMetadata("lastStatementInc.kt")
        public void testLastStatementInc() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/lastStatementInc.kt");
        }

        @Test
        @TestMetadata("lastStementAssignment.kt")
        public void testLastStementAssignment() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/lastStementAssignment.kt");
        }

        @Test
        @TestMetadata("lastUnitExpression.kt")
        public void testLastUnitExpression() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/lastUnitExpression.kt");
        }

        @Test
        @TestMetadata("localCallableRef.kt")
        public void testLocalCallableRef() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/localCallableRef.kt");
        }

        @Test
        @TestMetadata("localDelegate.kt")
        public void testLocalDelegate() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/localDelegate.kt");
        }

        @Test
        @TestMetadata("longRangeInSuspendCall.kt")
        public void testLongRangeInSuspendCall() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendCall.kt");
        }

        @Test
        @TestMetadata("longRangeInSuspendFun.kt")
        public void testLongRangeInSuspendFun() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/longRangeInSuspendFun.kt");
        }

        @Test
        @TestMetadata("mergeNullAndString.kt")
        public void testMergeNullAndString() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/mergeNullAndString.kt");
        }

        @Test
        @TestMetadata("multipleInvokeCalls.kt")
        public void testMultipleInvokeCalls() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCalls.kt");
        }

        @Test
        @TestMetadata("multipleInvokeCallsInsideInlineLambda1.kt")
        public void testMultipleInvokeCallsInsideInlineLambda1() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda1.kt");
        }

        @Test
        @TestMetadata("multipleInvokeCallsInsideInlineLambda2.kt")
        public void testMultipleInvokeCallsInsideInlineLambda2() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda2.kt");
        }

        @Test
        @TestMetadata("multipleInvokeCallsInsideInlineLambda3.kt")
        public void testMultipleInvokeCallsInsideInlineLambda3() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/multipleInvokeCallsInsideInlineLambda3.kt");
        }

        @Test
        @TestMetadata("nestedTryCatch.kt")
        public void testNestedTryCatch() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/nestedTryCatch.kt");
        }

        @Test
        @TestMetadata("noSuspensionPoints.kt")
        public void testNoSuspensionPoints() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/noSuspensionPoints.kt");
        }

        @Test
        @TestMetadata("nonLocalReturn.kt")
        public void testNonLocalReturn() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/nonLocalReturn.kt");
        }

        @Test
        @TestMetadata("nonLocalReturnFromInlineLambda.kt")
        public void testNonLocalReturnFromInlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambda.kt");
        }

        @Test
        @TestMetadata("nonLocalReturnFromInlineLambdaDeep.kt")
        public void testNonLocalReturnFromInlineLambdaDeep() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/nonLocalReturnFromInlineLambdaDeep.kt");
        }

        @Test
        @TestMetadata("overrideDefaultArgument.kt")
        public void testOverrideDefaultArgument() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/overrideDefaultArgument.kt");
        }

        @Test
        @TestMetadata("recursiveSuspend.kt")
        public void testRecursiveSuspend() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/recursiveSuspend.kt");
        }

        @Test
        @TestMetadata("restrictedSuspendLambda.kt")
        public void testRestrictedSuspendLambda() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/restrictedSuspendLambda.kt");
        }

        @Test
        @TestMetadata("returnByLabel.kt")
        public void testReturnByLabel() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/returnByLabel.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/simple.kt");
        }

        @Test
        @TestMetadata("simpleException.kt")
        public void testSimpleException() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/simpleException.kt");
        }

        @Test
        @TestMetadata("simpleSuspendCallableReference.kt")
        public void testSimpleSuspendCallableReference() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/simpleSuspendCallableReference.kt");
        }

        @Test
        @TestMetadata("simpleWithHandleResult.kt")
        public void testSimpleWithHandleResult() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/simpleWithHandleResult.kt");
        }

        @Test
        @TestMetadata("statementLikeLastExpression.kt")
        public void testStatementLikeLastExpression() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/statementLikeLastExpression.kt");
        }

        @Test
        @TestMetadata("stopAfter.kt")
        public void testStopAfter() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/stopAfter.kt");
        }

        @Test
        @TestMetadata("suspendCallsInArguments.kt")
        public void testSuspendCallsInArguments() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendCallsInArguments.kt");
        }

        @Test
        @TestMetadata("suspendCoroutineFromStateMachine.kt")
        public void testSuspendCoroutineFromStateMachine() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendCoroutineFromStateMachine.kt");
        }

        @Test
        @TestMetadata("suspendCovariantJavaOverrides.kt")
        public void testSuspendCovariantJavaOverrides() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendCovariantJavaOverrides.kt");
        }

        @Test
        @TestMetadata("suspendDefaultImpl.kt")
        public void testSuspendDefaultImpl() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendDefaultImpl.kt");
        }

        @Test
        @TestMetadata("suspendDelegation.kt")
        public void testSuspendDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendDelegation.kt");
        }

        @Test
        @TestMetadata("suspendFromInlineLambda.kt")
        public void testSuspendFromInlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendFromInlineLambda.kt");
        }

        @Test
        @TestMetadata("suspendFunImportedFromObject.kt")
        public void testSuspendFunImportedFromObject() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendFunImportedFromObject.kt");
        }

        @Test
        @TestMetadata("suspendFunctionMethodReference.kt")
        public void testSuspendFunctionMethodReference() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendFunctionMethodReference.kt");
        }

        @Test
        @TestMetadata("suspendImplBridge.kt")
        public void testSuspendImplBridge() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendImplBridge.kt");
        }

        @Test
        @TestMetadata("suspendInCycle.kt")
        public void testSuspendInCycle() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendInCycle.kt");
        }

        @Test
        @TestMetadata("suspendInTheMiddleOfObjectConstruction.kt")
        public void testSuspendInTheMiddleOfObjectConstruction() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstruction.kt");
        }

        @Test
        @TestMetadata("suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt")
        public void testSuspendInTheMiddleOfObjectConstructionEvaluationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionEvaluationOrder.kt");
        }

        @Test
        @TestMetadata("suspendInTheMiddleOfObjectConstructionWithJumpOut.kt")
        public void testSuspendInTheMiddleOfObjectConstructionWithJumpOut() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendInTheMiddleOfObjectConstructionWithJumpOut.kt");
        }

        @Test
        @TestMetadata("suspendJavaOverrides.kt")
        public void testSuspendJavaOverrides() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendJavaOverrides.kt");
        }

        @Test
        @TestMetadata("suspendLambdaInInterface.kt")
        public void testSuspendLambdaInInterface() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendLambdaInInterface.kt");
        }

        @Test
        @TestMetadata("suspendLambdaWithArgumentRearrangement.kt")
        public void testSuspendLambdaWithArgumentRearrangement() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendLambdaWithArgumentRearrangement.kt");
        }

        @Test
        @TestMetadata("suspendReturningPlatformType.kt")
        public void testSuspendReturningPlatformType() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspendReturningPlatformType.kt");
        }

        @Test
        @TestMetadata("suspensionInsideSafeCall.kt")
        public void testSuspensionInsideSafeCall() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCall.kt");
        }

        @Test
        @TestMetadata("suspensionInsideSafeCallWithElvis.kt")
        public void testSuspensionInsideSafeCallWithElvis() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/suspensionInsideSafeCallWithElvis.kt");
        }

        @Test
        @TestMetadata("tailCallToNothing.kt")
        public void testTailCallToNothing() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/tailCallToNothing.kt");
        }

        @Test
        @TestMetadata("tryCatchFinallyWithHandleResult.kt")
        public void testTryCatchFinallyWithHandleResult() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/tryCatchFinallyWithHandleResult.kt");
        }

        @Test
        @TestMetadata("tryCatchWithHandleResult.kt")
        public void testTryCatchWithHandleResult() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/tryCatchWithHandleResult.kt");
        }

        @Test
        @TestMetadata("tryFinallyInsideInlineLambda.kt")
        public void testTryFinallyInsideInlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/tryFinallyInsideInlineLambda.kt");
        }

        @Test
        @TestMetadata("tryFinallyWithHandleResult.kt")
        public void testTryFinallyWithHandleResult() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/tryFinallyWithHandleResult.kt");
        }

        @Test
        @TestMetadata("varCaptuedInCoroutineIntrinsic.kt")
        public void testVarCaptuedInCoroutineIntrinsic() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/varCaptuedInCoroutineIntrinsic.kt");
        }

        @Test
        @TestMetadata("varValueConflictsWithTable.kt")
        public void testVarValueConflictsWithTable() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTable.kt");
        }

        @Test
        @TestMetadata("varValueConflictsWithTableSameSort.kt")
        public void testVarValueConflictsWithTableSameSort() throws Exception {
            runTest("compiler/testData/codegen/box/coroutines/varValueConflictsWithTableSameSort.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/bridges")
        @TestDataPath("$PROJECT_ROOT")
        public class Bridges extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBridges() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/bridges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("interfaceSpecialization.kt")
            public void testInterfaceSpecialization() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/bridges/interfaceSpecialization.kt");
            }

            @Test
            @TestMetadata("lambdaWithLongReceiver.kt")
            public void testLambdaWithLongReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithLongReceiver.kt");
            }

            @Test
            @TestMetadata("lambdaWithMultipleParameters.kt")
            public void testLambdaWithMultipleParameters() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/bridges/lambdaWithMultipleParameters.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/controlFlow")
        @TestDataPath("$PROJECT_ROOT")
        public class ControlFlow extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInControlFlow() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/controlFlow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("breakFinally.kt")
            public void testBreakFinally() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakFinally.kt");
            }

            @Test
            @TestMetadata("breakStatement.kt")
            public void testBreakStatement() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/breakStatement.kt");
            }

            @Test
            @TestMetadata("complexChainSuspend.kt")
            public void testComplexChainSuspend() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/complexChainSuspend.kt");
            }

            @Test
            @TestMetadata("doWhileStatement.kt")
            public void testDoWhileStatement() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/doWhileStatement.kt");
            }

            @Test
            @TestMetadata("doubleBreak.kt")
            public void testDoubleBreak() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/doubleBreak.kt");
            }

            @Test
            @TestMetadata("finallyCatch.kt")
            public void testFinallyCatch() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/finallyCatch.kt");
            }

            @Test
            @TestMetadata("forContinue.kt")
            public void testForContinue() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/forContinue.kt");
            }

            @Test
            @TestMetadata("forStatement.kt")
            public void testForStatement() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/forStatement.kt");
            }

            @Test
            @TestMetadata("forWithStep.kt")
            public void testForWithStep() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/forWithStep.kt");
            }

            @Test
            @TestMetadata("ifStatement.kt")
            public void testIfStatement() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/ifStatement.kt");
            }

            @Test
            @TestMetadata("kt22694_1_3.kt")
            public void testKt22694_1_3() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/kt22694_1_3.kt");
            }

            @Test
            @TestMetadata("labeledWhile.kt")
            public void testLabeledWhile() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/labeledWhile.kt");
            }

            @Test
            @TestMetadata("multipleCatchBlocksSuspend.kt")
            public void testMultipleCatchBlocksSuspend() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/multipleCatchBlocksSuspend.kt");
            }

            @Test
            @TestMetadata("returnFromFinally.kt")
            public void testReturnFromFinally() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnFromFinally.kt");
            }

            @Test
            @TestMetadata("returnWithFinally.kt")
            public void testReturnWithFinally() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/returnWithFinally.kt");
            }

            @Test
            @TestMetadata("suspendInStringTemplate.kt")
            public void testSuspendInStringTemplate() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/suspendInStringTemplate.kt");
            }

            @Test
            @TestMetadata("switchLikeWhen.kt")
            public void testSwitchLikeWhen() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/switchLikeWhen.kt");
            }

            @Test
            @TestMetadata("throwFromCatch.kt")
            public void testThrowFromCatch() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromCatch.kt");
            }

            @Test
            @TestMetadata("throwFromFinally.kt")
            public void testThrowFromFinally() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwFromFinally.kt");
            }

            @Test
            @TestMetadata("throwInTryWithHandleResult.kt")
            public void testThrowInTryWithHandleResult() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/throwInTryWithHandleResult.kt");
            }

            @Test
            @TestMetadata("whenWithSuspensions.kt")
            public void testWhenWithSuspensions() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/whenWithSuspensions.kt");
            }

            @Test
            @TestMetadata("whileStatement.kt")
            public void testWhileStatement() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/controlFlow/whileStatement.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/debug")
        @TestDataPath("$PROJECT_ROOT")
        public class Debug extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInDebug() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/debug"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("debuggerMetadata.kt")
            public void testDebuggerMetadata() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/debuggerMetadata.kt");
            }

            @Test
            @TestMetadata("debuggerMetadata_ir.kt")
            public void testDebuggerMetadata_ir() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/debuggerMetadata_ir.kt");
            }

            @Test
            @TestMetadata("elvisLineNumber.kt")
            public void testElvisLineNumber() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/elvisLineNumber.kt");
            }

            @Test
            @TestMetadata("firstSuspensionPoint.kt")
            public void testFirstSuspensionPoint() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/firstSuspensionPoint.kt");
            }

            @Test
            @TestMetadata("fqName.kt")
            public void testFqName() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/fqName.kt");
            }

            @Test
            @TestMetadata("multipleSuspendCallsOnSameLine.kt")
            public void testMultipleSuspendCallsOnSameLine() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/multipleSuspendCallsOnSameLine.kt");
            }

            @Test
            @TestMetadata("runtimeDebugMetadata.kt")
            public void testRuntimeDebugMetadata() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/runtimeDebugMetadata.kt");
            }

            @Test
            @TestMetadata("throwsOnSameLine.kt")
            public void testThrowsOnSameLine() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/debug/throwsOnSameLine.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection")
        @TestDataPath("$PROJECT_ROOT")
        public class FeatureIntersection extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFeatureIntersection() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("breakWithNonEmptyStack.kt")
            public void testBreakWithNonEmptyStack() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/breakWithNonEmptyStack.kt");
            }

            @Test
            @TestMetadata("defaultExpect.kt")
            public void testDefaultExpect() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/defaultExpect.kt");
            }

            @Test
            @TestMetadata("delegate.kt")
            public void testDelegate() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/delegate.kt");
            }

            @Test
            @TestMetadata("destructuringInLambdas.kt")
            public void testDestructuringInLambdas() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/destructuringInLambdas.kt");
            }

            @Test
            @TestMetadata("funInterface.kt")
            public void testFunInterface() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/funInterface.kt");
            }

            @Test
            @TestMetadata("inlineSuspendFinally.kt")
            public void testInlineSuspendFinally() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/inlineSuspendFinally.kt");
            }

            @Test
            @TestMetadata("interfaceMethodWithBody.kt")
            public void testInterfaceMethodWithBody() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBody.kt");
            }

            @Test
            @TestMetadata("interfaceMethodWithBodyGeneric.kt")
            public void testInterfaceMethodWithBodyGeneric() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/interfaceMethodWithBodyGeneric.kt");
            }

            @Test
            @TestMetadata("overrideInInlineClass.kt")
            public void testOverrideInInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/overrideInInlineClass.kt");
            }

            @Test
            @TestMetadata("safeCallOnTwoReceivers.kt")
            public void testSafeCallOnTwoReceivers() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceivers.kt");
            }

            @Test
            @TestMetadata("safeCallOnTwoReceiversLong.kt")
            public void testSafeCallOnTwoReceiversLong() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/safeCallOnTwoReceiversLong.kt");
            }

            @Test
            @TestMetadata("suspendDestructuringInLambdas.kt")
            public void testSuspendDestructuringInLambdas() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendDestructuringInLambdas.kt");
            }

            @Test
            @TestMetadata("suspendFunctionIsAs.kt")
            public void testSuspendFunctionIsAs() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendFunctionIsAs.kt");
            }

            @Test
            @TestMetadata("suspendInlineSuspendFinally.kt")
            public void testSuspendInlineSuspendFinally() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendInlineSuspendFinally.kt");
            }

            @Test
            @TestMetadata("suspendOperatorPlus.kt")
            public void testSuspendOperatorPlus() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlus.kt");
            }

            @Test
            @TestMetadata("suspendOperatorPlusAssign.kt")
            public void testSuspendOperatorPlusAssign() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusAssign.kt");
            }

            @Test
            @TestMetadata("suspendOperatorPlusCallFromLambda.kt")
            public void testSuspendOperatorPlusCallFromLambda() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/featureIntersection/suspendOperatorPlusCallFromLambda.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference")
            @TestDataPath("$PROJECT_ROOT")
            public class CallableReference extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInCallableReference() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("bigArity.kt")
                public void testBigArity() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bigArity.kt");
                }

                @Test
                @TestMetadata("fromJava.kt")
                public void testFromJava() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/fromJava.kt");
                }

                @Test
                @TestMetadata("longArgs.kt")
                public void testLongArgs() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/longArgs.kt");
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound")
                @TestDataPath("$PROJECT_ROOT")
                public class Bound extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInBound() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("emptyLHS.kt")
                    public void testEmptyLHS() throws Exception {
                        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/bound/emptyLHS.kt");
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function")
                @TestDataPath("$PROJECT_ROOT")
                public class Function extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInFunction() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("genericCallableReferenceArguments.kt")
                    public void testGenericCallableReferenceArguments() throws Exception {
                        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/genericCallableReferenceArguments.kt");
                    }

                    @Test
                    @TestMetadata("genericCallableReferencesWithNullableTypes.kt")
                    public void testGenericCallableReferencesWithNullableTypes() throws Exception {
                        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/genericCallableReferencesWithNullableTypes.kt");
                    }

                    @Test
                    @TestMetadata("getArityViaFunctionImpl.kt")
                    public void testGetArityViaFunctionImpl() throws Exception {
                        runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/getArityViaFunctionImpl.kt");
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Local extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInLocal() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("equalsHashCode.kt")
                        public void testEqualsHashCode() throws Exception {
                            runTest("compiler/testData/codegen/box/coroutines/featureIntersection/callableReference/function/local/equalsHashCode.kt");
                        }
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec")
            @TestDataPath("$PROJECT_ROOT")
            public class Tailrec extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInTailrec() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("controlFlowIf.kt")
                public void testControlFlowIf() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowIf.kt");
                }

                @Test
                @TestMetadata("controlFlowWhen.kt")
                public void testControlFlowWhen() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/controlFlowWhen.kt");
                }

                @Test
                @TestMetadata("extention.kt")
                public void testExtention() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/extention.kt");
                }

                @Test
                @TestMetadata("infixCall.kt")
                public void testInfixCall() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixCall.kt");
                }

                @Test
                @TestMetadata("infixRecursiveCall.kt")
                public void testInfixRecursiveCall() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/infixRecursiveCall.kt");
                }

                @Test
                @TestMetadata("realIteratorFoldl.kt")
                public void testRealIteratorFoldl() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realIteratorFoldl.kt");
                }

                @Test
                @TestMetadata("realStringEscape.kt")
                public void testRealStringEscape() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringEscape.kt");
                }

                @Test
                @TestMetadata("realStringRepeat.kt")
                public void testRealStringRepeat() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/realStringRepeat.kt");
                }

                @Test
                @TestMetadata("returnInParentheses.kt")
                public void testReturnInParentheses() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/returnInParentheses.kt");
                }

                @Test
                @TestMetadata("sum.kt")
                public void testSum() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/sum.kt");
                }

                @Test
                @TestMetadata("tailCallInBlockInParentheses.kt")
                public void testTailCallInBlockInParentheses() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInBlockInParentheses.kt");
                }

                @Test
                @TestMetadata("tailCallInParentheses.kt")
                public void testTailCallInParentheses() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/tailCallInParentheses.kt");
                }

                @Test
                @TestMetadata("whenWithIs.kt")
                public void testWhenWithIs() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/featureIntersection/tailrec/whenWithIs.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses")
        @TestDataPath("$PROJECT_ROOT")
        public class InlineClasses extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInInlineClasses() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("nonLocalReturn.kt")
            public void testNonLocalReturn() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/inlineClasses/nonLocalReturn.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/direct")
            @TestDataPath("$PROJECT_ROOT")
            public class Direct extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInDirect() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/direct"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
                public void testBoxReturnValueOfSuspendFunctionReference() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendFunctionReference.kt");
                }

                @Test
                @TestMetadata("boxReturnValueOfSuspendLambda.kt")
                public void testBoxReturnValueOfSuspendLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxReturnValueOfSuspendLambda.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine.kt")
                public void testBoxUnboxInsideCoroutine() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
                public void testBoxUnboxInsideCoroutine_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Any.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
                public void testBoxUnboxInsideCoroutine_InlineAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineAny.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
                public void testBoxUnboxInsideCoroutine_InlineInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_InlineInt.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
                public void testBoxUnboxInsideCoroutine_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Int.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
                public void testBoxUnboxInsideCoroutine_Long() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_Long.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
                public void testBoxUnboxInsideCoroutine_NAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_NAny.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
                public void testBoxUnboxInsideCoroutine_nonLocalReturn() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_nonLocalReturn.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
                public void testBoxUnboxInsideCoroutine_suspendFunType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/boxUnboxInsideCoroutine_suspendFunType.kt");
                }

                @Test
                @TestMetadata("bridgeGenerationCrossinline.kt")
                public void testBridgeGenerationCrossinline() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationCrossinline.kt");
                }

                @Test
                @TestMetadata("bridgeGenerationNonInline.kt")
                public void testBridgeGenerationNonInline() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/bridgeGenerationNonInline.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun.kt")
                public void testCovariantOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
                public void testCovariantOverrideSuspendFunSameJvmType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunSameJvmType.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun_Any.kt")
                public void testCovariantOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun_Int.kt")
                public void testCovariantOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/covariantOverrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("createMangling.kt")
                public void testCreateMangling() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createMangling.kt");
                }

                @Test
                @TestMetadata("createOverride.kt")
                public void testCreateOverride() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/createOverride.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun.kt")
                public void testGenericOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Any.kt")
                public void testGenericOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
                public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Int.kt")
                public void testGenericOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
                public void testGenericOverrideSuspendFun_NullableAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
                public void testGenericOverrideSuspendFun_NullableAny_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableAny_null.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
                public void testGenericOverrideSuspendFun_NullableInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
                public void testGenericOverrideSuspendFun_NullableInt_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/genericOverrideSuspendFun_NullableInt_null.kt");
                }

                @Test
                @TestMetadata("interfaceDelegateWithInlineClass.kt")
                public void testInterfaceDelegateWithInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/interfaceDelegateWithInlineClass.kt");
                }

                @Test
                @TestMetadata("invokeOperator.kt")
                public void testInvokeOperator() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/invokeOperator.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun.kt")
                public void testOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any.kt")
                public void testOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any_itf.kt")
                public void testOverrideSuspendFun_Any_itf() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_itf.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any_this.kt")
                public void testOverrideSuspendFun_Any_this() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Any_this.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Int.kt")
                public void testOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/overrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("returnResult.kt")
                public void testReturnResult() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/direct/returnResult.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resume")
            @TestDataPath("$PROJECT_ROOT")
            public class Resume extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInResume() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resume"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
                public void testBoxReturnValueOfSuspendFunctionReference() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendFunctionReference.kt");
                }

                @Test
                @TestMetadata("boxReturnValueOfSuspendLambda.kt")
                public void testBoxReturnValueOfSuspendLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxReturnValueOfSuspendLambda.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine.kt")
                public void testBoxUnboxInsideCoroutine() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
                public void testBoxUnboxInsideCoroutine_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Any.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
                public void testBoxUnboxInsideCoroutine_InlineAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineAny.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
                public void testBoxUnboxInsideCoroutine_InlineInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_InlineInt.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
                public void testBoxUnboxInsideCoroutine_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Int.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
                public void testBoxUnboxInsideCoroutine_Long() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_Long.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
                public void testBoxUnboxInsideCoroutine_NAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_NAny.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
                public void testBoxUnboxInsideCoroutine_nonLocalReturn() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_nonLocalReturn.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
                public void testBoxUnboxInsideCoroutine_suspendFunType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/boxUnboxInsideCoroutine_suspendFunType.kt");
                }

                @Test
                @TestMetadata("bridgeGenerationCrossinline.kt")
                public void testBridgeGenerationCrossinline() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationCrossinline.kt");
                }

                @Test
                @TestMetadata("bridgeGenerationNonInline.kt")
                public void testBridgeGenerationNonInline() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/bridgeGenerationNonInline.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun.kt")
                public void testCovariantOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
                public void testCovariantOverrideSuspendFunSameJvmType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunSameJvmType.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt_null.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun_Any.kt")
                public void testCovariantOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun_Int.kt")
                public void testCovariantOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/covariantOverrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("createMangling.kt")
                public void testCreateMangling() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createMangling.kt");
                }

                @Test
                @TestMetadata("createOverride.kt")
                public void testCreateOverride() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/createOverride.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun.kt")
                public void testGenericOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Any.kt")
                public void testGenericOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
                public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Int.kt")
                public void testGenericOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
                public void testGenericOverrideSuspendFun_NullableAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableAny_null.kt")
                public void testGenericOverrideSuspendFun_NullableAny_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableAny_null.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
                public void testGenericOverrideSuspendFun_NullableInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableInt_null.kt")
                public void testGenericOverrideSuspendFun_NullableInt_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/genericOverrideSuspendFun_NullableInt_null.kt");
                }

                @Test
                @TestMetadata("interfaceDelegateWithInlineClass.kt")
                public void testInterfaceDelegateWithInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/interfaceDelegateWithInlineClass.kt");
                }

                @Test
                @TestMetadata("invokeOperator.kt")
                public void testInvokeOperator() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/invokeOperator.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun.kt")
                public void testOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any.kt")
                public void testOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any_itf.kt")
                public void testOverrideSuspendFun_Any_itf() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_itf.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any_this.kt")
                public void testOverrideSuspendFun_Any_this() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Any_this.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Int.kt")
                public void testOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/overrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("returnResult.kt")
                public void testReturnResult() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resume/returnResult.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException")
            @TestDataPath("$PROJECT_ROOT")
            public class ResumeWithException extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInResumeWithException() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("boxReturnValueOfSuspendFunctionReference.kt")
                public void testBoxReturnValueOfSuspendFunctionReference() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendFunctionReference.kt");
                }

                @Test
                @TestMetadata("boxReturnValueOfSuspendLambda.kt")
                public void testBoxReturnValueOfSuspendLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxReturnValueOfSuspendLambda.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine.kt")
                public void testBoxUnboxInsideCoroutine() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Any.kt")
                public void testBoxUnboxInsideCoroutine_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Any.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_InlineAny.kt")
                public void testBoxUnboxInsideCoroutine_InlineAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineAny.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_InlineInt.kt")
                public void testBoxUnboxInsideCoroutine_InlineInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_InlineInt.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Int.kt")
                public void testBoxUnboxInsideCoroutine_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Int.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_Long.kt")
                public void testBoxUnboxInsideCoroutine_Long() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_Long.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_NAny.kt")
                public void testBoxUnboxInsideCoroutine_NAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_NAny.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_nonLocalReturn.kt")
                public void testBoxUnboxInsideCoroutine_nonLocalReturn() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_nonLocalReturn.kt");
                }

                @Test
                @TestMetadata("boxUnboxInsideCoroutine_suspendFunType.kt")
                public void testBoxUnboxInsideCoroutine_suspendFunType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/boxUnboxInsideCoroutine_suspendFunType.kt");
                }

                @Test
                @TestMetadata("bridgeGenerationCrossinline.kt")
                public void testBridgeGenerationCrossinline() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationCrossinline.kt");
                }

                @Test
                @TestMetadata("bridgeGenerationNonInline.kt")
                public void testBridgeGenerationNonInline() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/bridgeGenerationNonInline.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun.kt")
                public void testCovariantOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunSameJvmType.kt")
                public void testCovariantOverrideSuspendFunSameJvmType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunSameJvmType.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClassSameJvmType() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClassSameJvmType.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Any.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Any.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_Int.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_Int.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableAny_null.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt")
                public void testCovariantOverrideSuspendFunWithNullableInlineClass_NullableInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFunWithNullableInlineClass_NullableInt.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun_Any.kt")
                public void testCovariantOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("covariantOverrideSuspendFun_Int.kt")
                public void testCovariantOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/covariantOverrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("createMangling.kt")
                public void testCreateMangling() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createMangling.kt");
                }

                @Test
                @TestMetadata("createOverride.kt")
                public void testCreateOverride() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/createOverride.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun.kt")
                public void testGenericOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Any.kt")
                public void testGenericOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt")
                public void testGenericOverrideSuspendFun_Any_NullableInlineClassUpperBound() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Any_NullableInlineClassUpperBound.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_Int.kt")
                public void testGenericOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableAny.kt")
                public void testGenericOverrideSuspendFun_NullableAny() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableAny.kt");
                }

                @Test
                @TestMetadata("genericOverrideSuspendFun_NullableInt.kt")
                public void testGenericOverrideSuspendFun_NullableInt() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/genericOverrideSuspendFun_NullableInt.kt");
                }

                @Test
                @TestMetadata("interfaceDelegateWithInlineClass.kt")
                public void testInterfaceDelegateWithInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/interfaceDelegateWithInlineClass.kt");
                }

                @Test
                @TestMetadata("invokeOperator.kt")
                public void testInvokeOperator() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/invokeOperator.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun.kt")
                public void testOverrideSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any.kt")
                public void testOverrideSuspendFun_Any() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any_itf.kt")
                public void testOverrideSuspendFun_Any_itf() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_itf.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Any_this.kt")
                public void testOverrideSuspendFun_Any_this() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Any_this.kt");
                }

                @Test
                @TestMetadata("overrideSuspendFun_Int.kt")
                public void testOverrideSuspendFun_Int() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/overrideSuspendFun_Int.kt");
                }

                @Test
                @TestMetadata("returnResult.kt")
                public void testReturnResult() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/inlineClasses/resumeWithException/returnResult.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/intLikeVarSpilling")
        @TestDataPath("$PROJECT_ROOT")
        public class IntLikeVarSpilling extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInIntLikeVarSpilling() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intLikeVarSpilling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("complicatedMerge.kt")
            public void testComplicatedMerge() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/complicatedMerge.kt");
            }

            @Test
            @TestMetadata("i2bResult.kt")
            public void testI2bResult() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/i2bResult.kt");
            }

            @Test
            @TestMetadata("listThrowablePairInOneSlot.kt")
            public void testListThrowablePairInOneSlot() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/listThrowablePairInOneSlot.kt");
            }

            @Test
            @TestMetadata("loadFromBooleanArray.kt")
            public void testLoadFromBooleanArray() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromBooleanArray.kt");
            }

            @Test
            @TestMetadata("loadFromByteArray.kt")
            public void testLoadFromByteArray() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/loadFromByteArray.kt");
            }

            @Test
            @TestMetadata("noVariableInTable.kt")
            public void testNoVariableInTable() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/noVariableInTable.kt");
            }

            @Test
            @TestMetadata("sameIconst1ManyVars.kt")
            public void testSameIconst1ManyVars() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/sameIconst1ManyVars.kt");
            }

            @Test
            @TestMetadata("usedInArrayStore.kt")
            public void testUsedInArrayStore() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInArrayStore.kt");
            }

            @Test
            @TestMetadata("usedInMethodCall.kt")
            public void testUsedInMethodCall() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInMethodCall.kt");
            }

            @Test
            @TestMetadata("usedInPutfield.kt")
            public void testUsedInPutfield() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInPutfield.kt");
            }

            @Test
            @TestMetadata("usedInVarStore.kt")
            public void testUsedInVarStore() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intLikeVarSpilling/usedInVarStore.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/intrinsicSemantics")
        @TestDataPath("$PROJECT_ROOT")
        public class IntrinsicSemantics extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInIntrinsicSemantics() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/intrinsicSemantics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("coroutineContext.kt")
            public void testCoroutineContext() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContext.kt");
            }

            @Test
            @TestMetadata("coroutineContextReceiver.kt")
            public void testCoroutineContextReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiver.kt");
            }

            @Test
            @TestMetadata("coroutineContextReceiverNotIntrinsic.kt")
            public void testCoroutineContextReceiverNotIntrinsic() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/coroutineContextReceiverNotIntrinsic.kt");
            }

            @Test
            @TestMetadata("intercepted.kt")
            public void testIntercepted() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/intercepted.kt");
            }

            @Test
            @TestMetadata("startCoroutine.kt")
            public void testStartCoroutine() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutine.kt");
            }

            @Test
            @TestMetadata("startCoroutineUninterceptedOrReturn.kt")
            public void testStartCoroutineUninterceptedOrReturn() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturn.kt");
            }

            @Test
            @TestMetadata("startCoroutineUninterceptedOrReturnInterception.kt")
            public void testStartCoroutineUninterceptedOrReturnInterception() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/startCoroutineUninterceptedOrReturnInterception.kt");
            }

            @Test
            @TestMetadata("suspendCoroutineUninterceptedOrReturn.kt")
            public void testSuspendCoroutineUninterceptedOrReturn() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/intrinsicSemantics/suspendCoroutineUninterceptedOrReturn.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/javaInterop")
        @TestDataPath("$PROJECT_ROOT")
        public class JavaInterop extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJavaInterop() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("objectWithSeveralSuspends.kt")
            public void testObjectWithSeveralSuspends() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/javaInterop/objectWithSeveralSuspends.kt");
            }

            @Test
            @TestMetadata("returnLambda.kt")
            public void testReturnLambda() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/javaInterop/returnLambda.kt");
            }

            @Test
            @TestMetadata("returnObject.kt")
            public void testReturnObject() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/javaInterop/returnObject.kt");
            }

            @Test
            @TestMetadata("severalCaptures.kt")
            public void testSeveralCaptures() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/javaInterop/severalCaptures.kt");
            }

            @Test
            @TestMetadata("suspendInlineWithCrossinline.kt")
            public void testSuspendInlineWithCrossinline() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/javaInterop/suspendInlineWithCrossinline.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions")
        @TestDataPath("$PROJECT_ROOT")
        public class LocalFunctions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInLocalFunctions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions/anonymous")
            @TestDataPath("$PROJECT_ROOT")
            public class Anonymous extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInAnonymous() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions/anonymous"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/anonymous/simple.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/localFunctions/named")
            @TestDataPath("$PROJECT_ROOT")
            public class Named extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInNamed() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/localFunctions/named"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("capturedParameters.kt")
                public void testCapturedParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedParameters.kt");
                }

                @Test
                @TestMetadata("capturedVariables.kt")
                public void testCapturedVariables() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/capturedVariables.kt");
                }

                @Test
                @TestMetadata("extension.kt")
                public void testExtension() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/extension.kt");
                }

                @Test
                @TestMetadata("infix.kt")
                public void testInfix() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/infix.kt");
                }

                @Test
                @TestMetadata("insideLambda.kt")
                public void testInsideLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/insideLambda.kt");
                }

                @Test
                @TestMetadata("nestedLocals.kt")
                public void testNestedLocals() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/nestedLocals.kt");
                }

                @Test
                @TestMetadata("rec.kt")
                public void testRec() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/rec.kt");
                }

                @Test
                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simple.kt");
                }

                @Test
                @TestMetadata("simpleSuspensionPoint.kt")
                public void testSimpleSuspensionPoint() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/simpleSuspensionPoint.kt");
                }

                @Test
                @TestMetadata("stateMachine.kt")
                public void testStateMachine() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/stateMachine.kt");
                }

                @Test
                @TestMetadata("withArguments.kt")
                public void testWithArguments() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/localFunctions/named/withArguments.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/multiModule")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiModule extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMultiModule() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/multiModule"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("inlineCrossModule.kt")
            public void testInlineCrossModule() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineCrossModule.kt");
            }

            @Test
            @TestMetadata("inlineFunctionWithOptionalParam.kt")
            public void testInlineFunctionWithOptionalParam() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineFunctionWithOptionalParam.kt");
            }

            @Test
            @TestMetadata("inlineMultiModule.kt")
            public void testInlineMultiModule() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModule.kt");
            }

            @Test
            @TestMetadata("inlineMultiModuleOverride.kt")
            public void testInlineMultiModuleOverride() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleOverride.kt");
            }

            @Test
            @TestMetadata("inlineMultiModuleWithController.kt")
            public void testInlineMultiModuleWithController() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithController.kt");
            }

            @Test
            @TestMetadata("inlineMultiModuleWithInnerInlining.kt")
            public void testInlineMultiModuleWithInnerInlining() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineMultiModuleWithInnerInlining.kt");
            }

            @Test
            @TestMetadata("inlineTailCall.kt")
            public void testInlineTailCall() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineTailCall.kt");
            }

            @Test
            @TestMetadata("inlineWithJava.kt")
            public void testInlineWithJava() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/inlineWithJava.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/multiModule/simple.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/redundantLocalsElimination")
        @TestDataPath("$PROJECT_ROOT")
        public class RedundantLocalsElimination extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInRedundantLocalsElimination() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/redundantLocalsElimination"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("ktor_receivedMessage.kt")
            public void testKtor_receivedMessage() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/redundantLocalsElimination/ktor_receivedMessage.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/reflect")
        @TestDataPath("$PROJECT_ROOT")
        public class Reflect extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInReflect() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/reflect"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("bigArity.kt")
            public void testBigArity() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/reflect/bigArity.kt");
            }

            @Test
            @TestMetadata("callSuspend.kt")
            public void testCallSuspend() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/reflect/callSuspend.kt");
            }

            @Test
            @TestMetadata("callSuspendBy.kt")
            public void testCallSuspendBy() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/reflect/callSuspendBy.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/stackUnwinding")
        @TestDataPath("$PROJECT_ROOT")
        public class StackUnwinding extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInStackUnwinding() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/stackUnwinding"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("exception.kt")
            public void testException() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/exception.kt");
            }

            @Test
            @TestMetadata("inlineSuspendFunction.kt")
            public void testInlineSuspendFunction() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/inlineSuspendFunction.kt");
            }

            @Test
            @TestMetadata("rethrowInFinally.kt")
            public void testRethrowInFinally() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinally.kt");
            }

            @Test
            @TestMetadata("rethrowInFinallyWithSuspension.kt")
            public void testRethrowInFinallyWithSuspension() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/rethrowInFinallyWithSuspension.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/simple.kt");
            }

            @Test
            @TestMetadata("suspendInCycle.kt")
            public void testSuspendInCycle() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/stackUnwinding/suspendInCycle.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/suspendConversion")
        @TestDataPath("$PROJECT_ROOT")
        public class SuspendConversion extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSuspendConversion() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendConversion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("intersectionTypeToSubtypeConversion.kt")
            public void testIntersectionTypeToSubtypeConversion() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendConversion/intersectionTypeToSubtypeConversion.kt");
            }

            @Test
            @TestMetadata("onArgument.kt")
            public void testOnArgument() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onArgument.kt");
            }

            @Test
            @TestMetadata("onInlineArgument.kt")
            public void testOnInlineArgument() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendConversion/onInlineArgument.kt");
            }

            @Test
            @TestMetadata("subtypeOfFunctionalTypeToSuspendConversion.kt")
            public void testSubtypeOfFunctionalTypeToSuspendConversion() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendConversion/subtypeOfFunctionalTypeToSuspendConversion.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine")
        @TestDataPath("$PROJECT_ROOT")
        public class SuspendFunctionAsCoroutine extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSuspendFunctionAsCoroutine() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("dispatchResume.kt")
            public void testDispatchResume() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/dispatchResume.kt");
            }

            @Test
            @TestMetadata("handleException.kt")
            public void testHandleException() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/handleException.kt");
            }

            @Test
            @TestMetadata("ifExpressionInsideCoroutine_1_3.kt")
            public void testIfExpressionInsideCoroutine_1_3() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/ifExpressionInsideCoroutine_1_3.kt");
            }

            @Test
            @TestMetadata("inline.kt")
            public void testInline() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inline.kt");
            }

            @Test
            @TestMetadata("inlineTwoReceivers.kt")
            public void testInlineTwoReceivers() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/inlineTwoReceivers.kt");
            }

            @Test
            @TestMetadata("member.kt")
            public void testMember() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/member.kt");
            }

            @Test
            @TestMetadata("noinlineTwoReceivers.kt")
            public void testNoinlineTwoReceivers() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/noinlineTwoReceivers.kt");
            }

            @Test
            @TestMetadata("openFunWithJava.kt")
            public void testOpenFunWithJava() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/openFunWithJava.kt");
            }

            @Test
            @TestMetadata("operators.kt")
            public void testOperators() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/operators.kt");
            }

            @Test
            @TestMetadata("privateFunctions.kt")
            public void testPrivateFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateFunctions.kt");
            }

            @Test
            @TestMetadata("privateInFile.kt")
            public void testPrivateInFile() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/privateInFile.kt");
            }

            @Test
            @TestMetadata("returnNoSuspend.kt")
            public void testReturnNoSuspend() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/returnNoSuspend.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/simple.kt");
            }

            @Test
            @TestMetadata("superCall.kt")
            public void testSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCall.kt");
            }

            @Test
            @TestMetadata("superCallAbstractClass.kt")
            public void testSuperCallAbstractClass() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallAbstractClass.kt");
            }

            @Test
            @TestMetadata("superCallInterface.kt")
            public void testSuperCallInterface() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallInterface.kt");
            }

            @Test
            @TestMetadata("superCallOverload.kt")
            public void testSuperCallOverload() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/superCallOverload.kt");
            }

            @Test
            @TestMetadata("withVariables.kt")
            public void testWithVariables() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionAsCoroutine/withVariables.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall")
        @TestDataPath("$PROJECT_ROOT")
        public class SuspendFunctionTypeCall extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSuspendFunctionTypeCall() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("localVal.kt")
            public void testLocalVal() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/localVal.kt");
            }

            @Test
            @TestMetadata("manyParameters.kt")
            public void testManyParameters() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParameters.kt");
            }

            @Test
            @TestMetadata("manyParametersNoCapture.kt")
            public void testManyParametersNoCapture() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/manyParametersNoCapture.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/simple.kt");
            }

            @Test
            @TestMetadata("suspendModifier.kt")
            public void testSuspendModifier() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/suspendFunctionTypeCall/suspendModifier.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations")
        @TestDataPath("$PROJECT_ROOT")
        public class TailCallOptimizations extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInTailCallOptimizations() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("also.kt")
            public void testAlso() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/also.kt");
            }

            @Test
            @TestMetadata("crossinline.kt")
            public void testCrossinline() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/crossinline.kt");
            }

            @Test
            @TestMetadata("inlineWithStateMachine.kt")
            public void testInlineWithStateMachine() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithStateMachine.kt");
            }

            @Test
            @TestMetadata("inlineWithoutStateMachine.kt")
            public void testInlineWithoutStateMachine() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/inlineWithoutStateMachine.kt");
            }

            @Test
            @TestMetadata("innerObjectRetransformation.kt")
            public void testInnerObjectRetransformation() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/innerObjectRetransformation.kt");
            }

            @Test
            @TestMetadata("interfaceDelegation.kt")
            public void testInterfaceDelegation() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/interfaceDelegation.kt");
            }

            @Test
            @TestMetadata("returnInlineClass.kt")
            public void testReturnInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/returnInlineClass.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/simple.kt");
            }

            @Test
            @TestMetadata("tailCallIfReturnUnit.kt")
            public void testTailCallIfReturnUnit() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailCallIfReturnUnit.kt");
            }

            @Test
            @TestMetadata("tailCallIntrinsics.kt")
            public void testTailCallIntrinsics() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailCallIntrinsics.kt");
            }

            @Test
            @TestMetadata("tailSuspendUnitFun.kt")
            public void testTailSuspendUnitFun() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tailSuspendUnitFun.kt");
            }

            @Test
            @TestMetadata("tryCatch.kt")
            public void testTryCatch() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatch.kt");
            }

            @Test
            @TestMetadata("tryCatchTailCall.kt")
            public void testTryCatchTailCall() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/tryCatchTailCall.kt");
            }

            @Test
            @TestMetadata("unreachable.kt")
            public void testUnreachable() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unreachable.kt");
            }

            @Test
            @TestMetadata("whenUnit.kt")
            public void testWhenUnit() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/whenUnit.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit")
            @TestDataPath("$PROJECT_ROOT")
            public class Unit extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInUnit() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("functionReference.kt")
                public void testFunctionReference() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/functionReference.kt");
                }

                @Test
                @TestMetadata("override.kt")
                public void testOverride() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override.kt");
                }

                @Test
                @TestMetadata("override2.kt")
                public void testOverride2() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override2.kt");
                }

                @Test
                @TestMetadata("override3.kt")
                public void testOverride3() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override3.kt");
                }

                @Test
                @TestMetadata("override4.kt")
                public void testOverride4() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override4.kt");
                }

                @Test
                @TestMetadata("override5.kt")
                public void testOverride5() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override5.kt");
                }

                @Test
                @TestMetadata("override6.kt")
                public void testOverride6() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/override6.kt");
                }

                @Test
                @TestMetadata("overrideCrossinline.kt")
                public void testOverrideCrossinline() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/overrideCrossinline.kt");
                }

                @Test
                @TestMetadata("overrideOverriden.kt")
                public void testOverrideOverriden() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/overrideOverriden.kt");
                }

                @Test
                @TestMetadata("reflection.kt")
                public void testReflection() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/reflection.kt");
                }

                @Test
                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("compiler/testData/codegen/box/coroutines/tailCallOptimizations/unit/simple.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/tailOperations")
        @TestDataPath("$PROJECT_ROOT")
        public class TailOperations extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInTailOperations() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/tailOperations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("suspendWithIf.kt")
            public void testSuspendWithIf() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithIf.kt");
            }

            @Test
            @TestMetadata("suspendWithTryCatch.kt")
            public void testSuspendWithTryCatch() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithTryCatch.kt");
            }

            @Test
            @TestMetadata("suspendWithWhen.kt")
            public void testSuspendWithWhen() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailOperations/suspendWithWhen.kt");
            }

            @Test
            @TestMetadata("tailInlining.kt")
            public void testTailInlining() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/tailOperations/tailInlining.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/unitTypeReturn")
        @TestDataPath("$PROJECT_ROOT")
        public class UnitTypeReturn extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInUnitTypeReturn() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/unitTypeReturn"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("coroutineNonLocalReturn.kt")
            public void testCoroutineNonLocalReturn() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineNonLocalReturn.kt");
            }

            @Test
            @TestMetadata("coroutineReturn.kt")
            public void testCoroutineReturn() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/coroutineReturn.kt");
            }

            @Test
            @TestMetadata("inlineUnitFunction.kt")
            public void testInlineUnitFunction() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/inlineUnitFunction.kt");
            }

            @Test
            @TestMetadata("interfaceDelegation.kt")
            public void testInterfaceDelegation() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/interfaceDelegation.kt");
            }

            @Test
            @TestMetadata("suspendNonLocalReturn.kt")
            public void testSuspendNonLocalReturn() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendNonLocalReturn.kt");
            }

            @Test
            @TestMetadata("suspendReturn.kt")
            public void testSuspendReturn() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/suspendReturn.kt");
            }

            @Test
            @TestMetadata("unitSafeCall.kt")
            public void testUnitSafeCall() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/unitTypeReturn/unitSafeCall.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/coroutines/varSpilling")
        @TestDataPath("$PROJECT_ROOT")
        public class VarSpilling extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInVarSpilling() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/coroutines/varSpilling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("fakeInlinerVariables.kt")
            public void testFakeInlinerVariables() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/varSpilling/fakeInlinerVariables.kt");
            }

            @Test
            @TestMetadata("kt19475.kt")
            public void testKt19475() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt19475.kt");
            }

            @Test
            @TestMetadata("kt38925.kt")
            public void testKt38925() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/varSpilling/kt38925.kt");
            }

            @Test
            @TestMetadata("nullSpilling.kt")
            public void testNullSpilling() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/varSpilling/nullSpilling.kt");
            }

            @Test
            @TestMetadata("refinedIntTypesAnalysis.kt")
            public void testRefinedIntTypesAnalysis() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/varSpilling/refinedIntTypesAnalysis.kt");
            }

            @Test
            @TestMetadata("safeCallElvis.kt")
            public void testSafeCallElvis() throws Exception {
                runTest("compiler/testData/codegen/box/coroutines/varSpilling/safeCallElvis.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/dataClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class DataClasses extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInDataClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("arrayParams.kt")
        public void testArrayParams() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/arrayParams.kt");
        }

        @Test
        @TestMetadata("changingVarParam.kt")
        public void testChangingVarParam() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/changingVarParam.kt");
        }

        @Test
        @TestMetadata("doubleParam.kt")
        public void testDoubleParam() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/doubleParam.kt");
        }

        @Test
        @TestMetadata("floatParam.kt")
        public void testFloatParam() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/floatParam.kt");
        }

        @Test
        @TestMetadata("genericParam.kt")
        public void testGenericParam() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/genericParam.kt");
        }

        @Test
        @TestMetadata("kt5002.kt")
        public void testKt5002() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/kt5002.kt");
        }

        @Test
        @TestMetadata("mixedParams.kt")
        public void testMixedParams() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/mixedParams.kt");
        }

        @Test
        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/multiDeclaration.kt");
        }

        @Test
        @TestMetadata("multiDeclarationFor.kt")
        public void testMultiDeclarationFor() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/multiDeclarationFor.kt");
        }

        @Test
        @TestMetadata("nonTrivialFinalMemberInSuperClass.kt")
        public void testNonTrivialFinalMemberInSuperClass() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/nonTrivialFinalMemberInSuperClass.kt");
        }

        @Test
        @TestMetadata("nonTrivialMemberInSuperClass.kt")
        public void testNonTrivialMemberInSuperClass() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/nonTrivialMemberInSuperClass.kt");
        }

        @Test
        @TestMetadata("privateValParams.kt")
        public void testPrivateValParams() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/privateValParams.kt");
        }

        @Test
        @TestMetadata("twoValParams.kt")
        public void testTwoValParams() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/twoValParams.kt");
        }

        @Test
        @TestMetadata("twoVarParams.kt")
        public void testTwoVarParams() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/twoVarParams.kt");
        }

        @Test
        @TestMetadata("typeParameterWithNonTrivialBound.kt")
        public void testTypeParameterWithNonTrivialBound() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/typeParameterWithNonTrivialBound.kt");
        }

        @Test
        @TestMetadata("unitComponent.kt")
        public void testUnitComponent() throws Exception {
            runTest("compiler/testData/codegen/box/dataClasses/unitComponent.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/dataClasses/copy")
        @TestDataPath("$PROJECT_ROOT")
        public class Copy extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCopy() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/copy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("constructorWithDefaultParam.kt")
            public void testConstructorWithDefaultParam() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/constructorWithDefaultParam.kt");
            }

            @Test
            @TestMetadata("copyInObjectNestedDataClass.kt")
            public void testCopyInObjectNestedDataClass() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/copyInObjectNestedDataClass.kt");
            }

            @Test
            @TestMetadata("kt12708.kt")
            public void testKt12708() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/kt12708.kt");
            }

            @Test
            @TestMetadata("kt3033.kt")
            public void testKt3033() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/kt3033.kt");
            }

            @Test
            @TestMetadata("valInConstructorParams.kt")
            public void testValInConstructorParams() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/valInConstructorParams.kt");
            }

            @Test
            @TestMetadata("varInConstructorParams.kt")
            public void testVarInConstructorParams() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/varInConstructorParams.kt");
            }

            @Test
            @TestMetadata("withGenericParameter.kt")
            public void testWithGenericParameter() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/withGenericParameter.kt");
            }

            @Test
            @TestMetadata("withSecondaryConstructor.kt")
            public void testWithSecondaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/copy/withSecondaryConstructor.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/dataClasses/equals")
        @TestDataPath("$PROJECT_ROOT")
        public class Equals extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEquals() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/equals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("alreadyDeclared.kt")
            public void testAlreadyDeclared() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/equals/alreadyDeclared.kt");
            }

            @Test
            @TestMetadata("alreadyDeclaredWrongSignature.kt")
            public void testAlreadyDeclaredWrongSignature() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/equals/alreadyDeclaredWrongSignature.kt");
            }

            @Test
            @TestMetadata("genericarray.kt")
            public void testGenericarray() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/equals/genericarray.kt");
            }

            @Test
            @TestMetadata("intarray.kt")
            public void testIntarray() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/equals/intarray.kt");
            }

            @Test
            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/equals/null.kt");
            }

            @Test
            @TestMetadata("nullother.kt")
            public void testNullother() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/equals/nullother.kt");
            }

            @Test
            @TestMetadata("sameinstance.kt")
            public void testSameinstance() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/equals/sameinstance.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/dataClasses/hashCode")
        @TestDataPath("$PROJECT_ROOT")
        public class HashCode extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInHashCode() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/hashCode"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("alreadyDeclared.kt")
            public void testAlreadyDeclared() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/alreadyDeclared.kt");
            }

            @Test
            @TestMetadata("alreadyDeclaredWrongSignature.kt")
            public void testAlreadyDeclaredWrongSignature() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/alreadyDeclaredWrongSignature.kt");
            }

            @Test
            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/array.kt");
            }

            @Test
            @TestMetadata("boolean.kt")
            public void testBoolean() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/boolean.kt");
            }

            @Test
            @TestMetadata("byte.kt")
            public void testByte() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/byte.kt");
            }

            @Test
            @TestMetadata("char.kt")
            public void testChar() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/char.kt");
            }

            @Test
            @TestMetadata("double.kt")
            public void testDouble() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/double.kt");
            }

            @Test
            @TestMetadata("float.kt")
            public void testFloat() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/float.kt");
            }

            @Test
            @TestMetadata("genericNull.kt")
            public void testGenericNull() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/genericNull.kt");
            }

            @Test
            @TestMetadata("int.kt")
            public void testInt() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/int.kt");
            }

            @Test
            @TestMetadata("long.kt")
            public void testLong() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/long.kt");
            }

            @Test
            @TestMetadata("null.kt")
            public void testNull() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/null.kt");
            }

            @Test
            @TestMetadata("short.kt")
            public void testShort() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/hashCode/short.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/dataClasses/toString")
        @TestDataPath("$PROJECT_ROOT")
        public class ToString extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInToString() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/dataClasses/toString"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("alreadyDeclared.kt")
            public void testAlreadyDeclared() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/toString/alreadyDeclared.kt");
            }

            @Test
            @TestMetadata("alreadyDeclaredWrongSignature.kt")
            public void testAlreadyDeclaredWrongSignature() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/toString/alreadyDeclaredWrongSignature.kt");
            }

            @Test
            @TestMetadata("arrayParams.kt")
            public void testArrayParams() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/toString/arrayParams.kt");
            }

            @Test
            @TestMetadata("changingVarParam.kt")
            public void testChangingVarParam() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/toString/changingVarParam.kt");
            }

            @Test
            @TestMetadata("genericParam.kt")
            public void testGenericParam() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/toString/genericParam.kt");
            }

            @Test
            @TestMetadata("mixedParams.kt")
            public void testMixedParams() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/toString/mixedParams.kt");
            }

            @Test
            @TestMetadata("unitComponent.kt")
            public void testUnitComponent() throws Exception {
                runTest("compiler/testData/codegen/box/dataClasses/toString/unitComponent.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/deadCodeElimination")
    @TestDataPath("$PROJECT_ROOT")
    public class DeadCodeElimination extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInDeadCodeElimination() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/deadCodeElimination"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("emptyVariableRange.kt")
        public void testEmptyVariableRange() throws Exception {
            runTest("compiler/testData/codegen/box/deadCodeElimination/emptyVariableRange.kt");
        }

        @Test
        @TestMetadata("intersectingVariableRange.kt")
        public void testIntersectingVariableRange() throws Exception {
            runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRange.kt");
        }

        @Test
        @TestMetadata("intersectingVariableRangeInFinally.kt")
        public void testIntersectingVariableRangeInFinally() throws Exception {
            runTest("compiler/testData/codegen/box/deadCodeElimination/intersectingVariableRangeInFinally.kt");
        }

        @Test
        @TestMetadata("kt14357.kt")
        public void testKt14357() throws Exception {
            runTest("compiler/testData/codegen/box/deadCodeElimination/kt14357.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultArguments extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInDefaultArguments() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("callDefaultFromInitializer.kt")
        public void testCallDefaultFromInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/callDefaultFromInitializer.kt");
        }

        @Test
        @TestMetadata("complexInheritance.kt")
        public void testComplexInheritance() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/complexInheritance.kt");
        }

        @Test
        @TestMetadata("implementedByFake.kt")
        public void testImplementedByFake() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake.kt");
        }

        @Test
        @TestMetadata("implementedByFake2.kt")
        public void testImplementedByFake2() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake2.kt");
        }

        @Test
        @TestMetadata("implementedByFake3.kt")
        public void testImplementedByFake3() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/implementedByFake3.kt");
        }

        @Test
        @TestMetadata("inheritedFromInterfaceViaAbstractSuperclass.kt")
        public void testInheritedFromInterfaceViaAbstractSuperclass() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/inheritedFromInterfaceViaAbstractSuperclass.kt");
        }

        @Test
        @TestMetadata("kt36972_companion.kt")
        public void testKt36972_companion() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/kt36972_companion.kt");
        }

        @Test
        @TestMetadata("kt36972_object.kt")
        public void testKt36972_object() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/kt36972_object.kt");
        }

        @Test
        @TestMetadata("kt6382.kt")
        public void testKt6382() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/kt6382.kt");
        }

        @Test
        @TestMetadata("protected.kt")
        public void testProtected() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/protected.kt");
        }

        @Test
        @TestMetadata("recursiveDefaultArguments.kt")
        public void testRecursiveDefaultArguments() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/recursiveDefaultArguments.kt");
        }

        @Test
        @TestMetadata("referenceAsArg.kt")
        public void testReferenceAsArg() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/referenceAsArg.kt");
        }

        @Test
        @TestMetadata("simpleFromOtherFile.kt")
        public void testSimpleFromOtherFile() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/simpleFromOtherFile.kt");
        }

        @Test
        @TestMetadata("superCallCheck.kt")
        public void testSuperCallCheck() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/superCallCheck.kt");
        }

        @Test
        @TestMetadata("superCallHandlerOrder.kt")
        public void testSuperCallHandlerOrder() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/superCallHandlerOrder.kt");
        }

        @Test
        @TestMetadata("useNextParamInLambda.kt")
        public void testUseNextParamInLambda() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/useNextParamInLambda.kt");
        }

        @Test
        @TestMetadata("useThisInLambda.kt")
        public void testUseThisInLambda() throws Exception {
            runTest("compiler/testData/codegen/box/defaultArguments/useThisInLambda.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/defaultArguments/constructor")
        @TestDataPath("$PROJECT_ROOT")
        public class Constructor extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInConstructor() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/constructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("annotation.kt")
            public void testAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotation.kt");
            }

            @Test
            @TestMetadata("annotationWithEmptyArray.kt")
            public void testAnnotationWithEmptyArray() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/annotationWithEmptyArray.kt");
            }

            @Test
            @TestMetadata("checkIfConstructorIsSynthetic.kt")
            public void testCheckIfConstructorIsSynthetic() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/checkIfConstructorIsSynthetic.kt");
            }

            @Test
            @TestMetadata("defArgs1.kt")
            public void testDefArgs1() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1.kt");
            }

            @Test
            @TestMetadata("defArgs1InnerClass.kt")
            public void testDefArgs1InnerClass() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs1InnerClass.kt");
            }

            @Test
            @TestMetadata("defArgs2.kt")
            public void testDefArgs2() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/defArgs2.kt");
            }

            @Test
            @TestMetadata("doubleDefArgs1InnerClass.kt")
            public void testDoubleDefArgs1InnerClass() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/doubleDefArgs1InnerClass.kt");
            }

            @Test
            @TestMetadata("enum.kt")
            public void testEnum() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/enum.kt");
            }

            @Test
            @TestMetadata("enumWithOneDefArg.kt")
            public void testEnumWithOneDefArg() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithOneDefArg.kt");
            }

            @Test
            @TestMetadata("enumWithTwoDefArgs.kt")
            public void testEnumWithTwoDefArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDefArgs.kt");
            }

            @Test
            @TestMetadata("enumWithTwoDoubleDefArgs.kt")
            public void testEnumWithTwoDoubleDefArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/enumWithTwoDoubleDefArgs.kt");
            }

            @Test
            @TestMetadata("innerClass32Args.kt")
            public void testInnerClass32Args() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/innerClass32Args.kt");
            }

            @Test
            @TestMetadata("kt2852.kt")
            public void testKt2852() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt2852.kt");
            }

            @Test
            @TestMetadata("kt30517.kt")
            public void testKt30517() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt30517.kt");
            }

            @Test
            @TestMetadata("kt3060.kt")
            public void testKt3060() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/kt3060.kt");
            }

            @Test
            @TestMetadata("manyArgs.kt")
            public void testManyArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/manyArgs.kt");
            }

            @Test
            @TestMetadata("objectExpressionDelegatingToSecondaryConstructor.kt")
            public void testObjectExpressionDelegatingToSecondaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/constructor/objectExpressionDelegatingToSecondaryConstructor.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/defaultArguments/convention")
        @TestDataPath("$PROJECT_ROOT")
        public class Convention extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInConvention() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/convention"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("incWithDefaultInGetter.kt")
            public void testIncWithDefaultInGetter() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/convention/incWithDefaultInGetter.kt");
            }

            @Test
            @TestMetadata("incWithDefaults.kt")
            public void testIncWithDefaults() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/convention/incWithDefaults.kt");
            }

            @Test
            @TestMetadata("kt16520.kt")
            public void testKt16520() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/convention/kt16520.kt");
            }

            @Test
            @TestMetadata("kt16520_old.kt")
            public void testKt16520_old() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/convention/kt16520_old.kt");
            }

            @Test
            @TestMetadata("kt9140.kt")
            public void testKt9140() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/convention/kt9140.kt");
            }

            @Test
            @TestMetadata("plusAssignWithDefaultInGetter.kt")
            public void testPlusAssignWithDefaultInGetter() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/convention/plusAssignWithDefaultInGetter.kt");
            }

            @Test
            @TestMetadata("plusAssignWithDefaults.kt")
            public void testPlusAssignWithDefaults() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/convention/plusAssignWithDefaults.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/defaultArguments/function")
        @TestDataPath("$PROJECT_ROOT")
        public class Function extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("abstractClass.kt")
            public void testAbstractClass() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/abstractClass.kt");
            }

            @Test
            public void testAllFilesPresentInFunction() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("complexInheritance.kt")
            public void testComplexInheritance() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/complexInheritance.kt");
            }

            @Test
            @TestMetadata("covariantOverride.kt")
            public void testCovariantOverride() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverride.kt");
            }

            @Test
            @TestMetadata("covariantOverrideGeneric.kt")
            public void testCovariantOverrideGeneric() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/covariantOverrideGeneric.kt");
            }

            @Test
            @TestMetadata("defaultLambdaInline.kt")
            public void testDefaultLambdaInline() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/defaultLambdaInline.kt");
            }

            @Test
            @TestMetadata("extensionFunctionManyArgs.kt")
            public void testExtensionFunctionManyArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/extensionFunctionManyArgs.kt");
            }

            @Test
            @TestMetadata("extentionFunction.kt")
            public void testExtentionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunction.kt");
            }

            @Test
            @TestMetadata("extentionFunctionDouble.kt")
            public void testExtentionFunctionDouble() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDouble.kt");
            }

            @Test
            @TestMetadata("extentionFunctionDoubleTwoArgs.kt")
            public void testExtentionFunctionDoubleTwoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionDoubleTwoArgs.kt");
            }

            @Test
            @TestMetadata("extentionFunctionInClassObject.kt")
            public void testExtentionFunctionInClassObject() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInClassObject.kt");
            }

            @Test
            @TestMetadata("extentionFunctionInObject.kt")
            public void testExtentionFunctionInObject() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionInObject.kt");
            }

            @Test
            @TestMetadata("extentionFunctionWithOneDefArg.kt")
            public void testExtentionFunctionWithOneDefArg() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/extentionFunctionWithOneDefArg.kt");
            }

            @Test
            @TestMetadata("funInTrait.kt")
            public void testFunInTrait() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/funInTrait.kt");
            }

            @Test
            @TestMetadata("funInTraitChain.kt")
            public void testFunInTraitChain() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/funInTraitChain.kt");
            }

            @Test
            @TestMetadata("innerExtentionFunction.kt")
            public void testInnerExtentionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunction.kt");
            }

            @Test
            @TestMetadata("innerExtentionFunctionDouble.kt")
            public void testInnerExtentionFunctionDouble() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDouble.kt");
            }

            @Test
            @TestMetadata("innerExtentionFunctionDoubleTwoArgs.kt")
            public void testInnerExtentionFunctionDoubleTwoArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionDoubleTwoArgs.kt");
            }

            @Test
            @TestMetadata("innerExtentionFunctionManyArgs.kt")
            public void testInnerExtentionFunctionManyArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/innerExtentionFunctionManyArgs.kt");
            }

            @Test
            @TestMetadata("kt15971.kt")
            public void testKt15971() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971.kt");
            }

            @Test
            @TestMetadata("kt15971_2.kt")
            public void testKt15971_2() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971_2.kt");
            }

            @Test
            @TestMetadata("kt15971_3.kt")
            public void testKt15971_3() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/kt15971_3.kt");
            }

            @Test
            @TestMetadata("kt36188.kt")
            public void testKt36188() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/kt36188.kt");
            }

            @Test
            @TestMetadata("kt36188_2.kt")
            public void testKt36188_2() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/kt36188_2.kt");
            }

            @Test
            @TestMetadata("kt5232.kt")
            public void testKt5232() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/kt5232.kt");
            }

            @Test
            @TestMetadata("memberFunctionManyArgs.kt")
            public void testMemberFunctionManyArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/memberFunctionManyArgs.kt");
            }

            @Test
            @TestMetadata("mixingNamedAndPositioned.kt")
            public void testMixingNamedAndPositioned() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/mixingNamedAndPositioned.kt");
            }

            @Test
            @TestMetadata("topLevelManyArgs.kt")
            public void testTopLevelManyArgs() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/topLevelManyArgs.kt");
            }

            @Test
            @TestMetadata("trait.kt")
            public void testTrait() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/function/trait.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/defaultArguments/private")
        @TestDataPath("$PROJECT_ROOT")
        public class Private extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInPrivate() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/private"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("memberExtensionFunction.kt")
            public void testMemberExtensionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/private/memberExtensionFunction.kt");
            }

            @Test
            @TestMetadata("memberFunction.kt")
            public void testMemberFunction() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/private/memberFunction.kt");
            }

            @Test
            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/private/primaryConstructor.kt");
            }

            @Test
            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/private/secondaryConstructor.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/defaultArguments/signature")
        @TestDataPath("$PROJECT_ROOT")
        public class Signature extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSignature() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/defaultArguments/signature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("kt2789.kt")
            public void testKt2789() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/signature/kt2789.kt");
            }

            @Test
            @TestMetadata("kt9428.kt")
            public void testKt9428() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9428.kt");
            }

            @Test
            @TestMetadata("kt9924.kt")
            public void testKt9924() throws Exception {
                runTest("compiler/testData/codegen/box/defaultArguments/signature/kt9924.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegatedProperty extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("accessTopLevelDelegatedPropertyInClinit.kt")
        public void testAccessTopLevelDelegatedPropertyInClinit() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/accessTopLevelDelegatedPropertyInClinit.kt");
        }

        @Test
        public void testAllFilesPresentInDelegatedProperty() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("beforeDeclarationContainerOptimization.kt")
        public void testBeforeDeclarationContainerOptimization() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/beforeDeclarationContainerOptimization.kt");
        }

        @Test
        @TestMetadata("capturePropertyInClosure.kt")
        public void testCapturePropertyInClosure() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/capturePropertyInClosure.kt");
        }

        @Test
        @TestMetadata("castGetReturnType.kt")
        public void testCastGetReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/castGetReturnType.kt");
        }

        @Test
        @TestMetadata("castSetParameter.kt")
        public void testCastSetParameter() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/castSetParameter.kt");
        }

        @Test
        @TestMetadata("delegateAsInnerClass.kt")
        public void testDelegateAsInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateAsInnerClass.kt");
        }

        @Test
        @TestMetadata("delegateByOtherProperty.kt")
        public void testDelegateByOtherProperty() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateByOtherProperty.kt");
        }

        @Test
        @TestMetadata("delegateByTopLevelFun.kt")
        public void testDelegateByTopLevelFun() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelFun.kt");
        }

        @Test
        @TestMetadata("delegateByTopLevelProperty.kt")
        public void testDelegateByTopLevelProperty() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateByTopLevelProperty.kt");
        }

        @Test
        @TestMetadata("delegateForExtProperty.kt")
        public void testDelegateForExtProperty() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtProperty.kt");
        }

        @Test
        @TestMetadata("delegateForExtPropertyInClass.kt")
        public void testDelegateForExtPropertyInClass() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateForExtPropertyInClass.kt");
        }

        @Test
        @TestMetadata("delegateToAnother.kt")
        public void testDelegateToAnother() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateToAnother.kt");
        }

        @Test
        @TestMetadata("delegateWithPrivateSet.kt")
        public void testDelegateWithPrivateSet() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegateWithPrivateSet.kt");
        }

        @Test
        @TestMetadata("delegatedPropertyInEnum.kt")
        public void testDelegatedPropertyInEnum() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/delegatedPropertyInEnum.kt");
        }

        @Test
        @TestMetadata("extensionDelegatesWithSameNames.kt")
        public void testExtensionDelegatesWithSameNames() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/extensionDelegatesWithSameNames.kt");
        }

        @Test
        @TestMetadata("extensionPropertyAndExtensionGetValue.kt")
        public void testExtensionPropertyAndExtensionGetValue() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/extensionPropertyAndExtensionGetValue.kt");
        }

        @Test
        @TestMetadata("functionRefDelefate.kt")
        public void testFunctionRefDelefate() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/functionRefDelefate.kt");
        }

        @Test
        @TestMetadata("genericDelegate.kt")
        public void testGenericDelegate() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegate.kt");
        }

        @Test
        @TestMetadata("genericDelegateUncheckedCast1.kt")
        public void testGenericDelegateUncheckedCast1() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast1.kt");
        }

        @Test
        @TestMetadata("genericDelegateUncheckedCast2.kt")
        public void testGenericDelegateUncheckedCast2() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/genericDelegateUncheckedCast2.kt");
        }

        @Test
        @TestMetadata("genericSetValueViaSyntheticAccessor.kt")
        public void testGenericSetValueViaSyntheticAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/genericSetValueViaSyntheticAccessor.kt");
        }

        @Test
        @TestMetadata("getAsExtensionFun.kt")
        public void testGetAsExtensionFun() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFun.kt");
        }

        @Test
        @TestMetadata("getAsExtensionFunInClass.kt")
        public void testGetAsExtensionFunInClass() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/getAsExtensionFunInClass.kt");
        }

        @Test
        @TestMetadata("getDelegateWithoutReflection.kt")
        public void testGetDelegateWithoutReflection() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/getDelegateWithoutReflection.kt");
        }

        @Test
        @TestMetadata("inClassVal.kt")
        public void testInClassVal() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/inClassVal.kt");
        }

        @Test
        @TestMetadata("inClassVar.kt")
        public void testInClassVar() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/inClassVar.kt");
        }

        @Test
        @TestMetadata("inTrait.kt")
        public void testInTrait() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/inTrait.kt");
        }

        @Test
        @TestMetadata("inferredPropertyType.kt")
        public void testInferredPropertyType() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/inferredPropertyType.kt");
        }

        @Test
        @TestMetadata("insideInlinedObjectMultiModule.kt")
        public void testInsideInlinedObjectMultiModule() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/insideInlinedObjectMultiModule.kt");
        }

        @Test
        @TestMetadata("kt35707.kt")
        public void testKt35707() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/kt35707.kt");
        }

        @Test
        @TestMetadata("kt37204.kt")
        public void testKt37204() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/kt37204.kt");
        }

        @Test
        @TestMetadata("kt4138.kt")
        public void testKt4138() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/kt4138.kt");
        }

        @Test
        @TestMetadata("kt6722.kt")
        public void testKt6722() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/kt6722.kt");
        }

        @Test
        @TestMetadata("kt9712.kt")
        public void testKt9712() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/kt9712.kt");
        }

        @Test
        @TestMetadata("privateSetterKPropertyIsNotMutable.kt")
        public void testPrivateSetterKPropertyIsNotMutable() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/privateSetterKPropertyIsNotMutable.kt");
        }

        @Test
        @TestMetadata("privateVar.kt")
        public void testPrivateVar() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/privateVar.kt");
        }

        @Test
        @TestMetadata("propertyMetadataShouldBeCached.kt")
        public void testPropertyMetadataShouldBeCached() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/propertyMetadataShouldBeCached.kt");
        }

        @Test
        @TestMetadata("protectedVarWithPrivateSet.kt")
        public void testProtectedVarWithPrivateSet() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/protectedVarWithPrivateSet.kt");
        }

        @Test
        @TestMetadata("setAsExtensionFun.kt")
        public void testSetAsExtensionFun() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFun.kt");
        }

        @Test
        @TestMetadata("setAsExtensionFunInClass.kt")
        public void testSetAsExtensionFunInClass() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/setAsExtensionFunInClass.kt");
        }

        @Test
        @TestMetadata("stackOverflowOnCallFromGetValue.kt")
        public void testStackOverflowOnCallFromGetValue() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/stackOverflowOnCallFromGetValue.kt");
        }

        @Test
        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVal.kt");
        }

        @Test
        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/topLevelVar.kt");
        }

        @Test
        @TestMetadata("twoPropByOneDelegete.kt")
        public void testTwoPropByOneDelegete() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/twoPropByOneDelegete.kt");
        }

        @Test
        @TestMetadata("useKPropertyLater.kt")
        public void testUseKPropertyLater() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/useKPropertyLater.kt");
        }

        @Test
        @TestMetadata("useReflectionOnKProperty.kt")
        public void testUseReflectionOnKProperty() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/useReflectionOnKProperty.kt");
        }

        @Test
        @TestMetadata("valByMapDelegatedProperty.kt")
        public void testValByMapDelegatedProperty() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/valByMapDelegatedProperty.kt");
        }

        @Test
        @TestMetadata("valInInnerClass.kt")
        public void testValInInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/valInInnerClass.kt");
        }

        @Test
        @TestMetadata("varInInnerClass.kt")
        public void testVarInInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/delegatedProperty/varInInnerClass.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/delegatedProperty/local")
        @TestDataPath("$PROJECT_ROOT")
        public class Local extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInLocal() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("capturedLocalVal.kt")
            public void testCapturedLocalVal() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVal.kt");
            }

            @Test
            @TestMetadata("capturedLocalValNoInline.kt")
            public void testCapturedLocalValNoInline() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalValNoInline.kt");
            }

            @Test
            @TestMetadata("capturedLocalVar.kt")
            public void testCapturedLocalVar() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVar.kt");
            }

            @Test
            @TestMetadata("capturedLocalVarNoInline.kt")
            public void testCapturedLocalVarNoInline() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/capturedLocalVarNoInline.kt");
            }

            @Test
            @TestMetadata("inlineGetValue.kt")
            public void testInlineGetValue() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineGetValue.kt");
            }

            @Test
            @TestMetadata("inlineOperators.kt")
            public void testInlineOperators() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/inlineOperators.kt");
            }

            @Test
            @TestMetadata("kt12891.kt")
            public void testKt12891() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/kt12891.kt");
            }

            @Test
            @TestMetadata("kt13557.kt")
            public void testKt13557() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/kt13557.kt");
            }

            @Test
            @TestMetadata("kt16864.kt")
            public void testKt16864() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/kt16864.kt");
            }

            @Test
            @TestMetadata("kt19690.kt")
            public void testKt19690() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/kt19690.kt");
            }

            @Test
            @TestMetadata("kt21085.kt")
            public void testKt21085() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/kt21085.kt");
            }

            @Test
            @TestMetadata("kt23117.kt")
            public void testKt23117() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/kt23117.kt");
            }

            @Test
            @TestMetadata("localVal.kt")
            public void testLocalVal() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/localVal.kt");
            }

            @Test
            @TestMetadata("localValNoExplicitType.kt")
            public void testLocalValNoExplicitType() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/localValNoExplicitType.kt");
            }

            @Test
            @TestMetadata("localVar.kt")
            public void testLocalVar() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/localVar.kt");
            }

            @Test
            @TestMetadata("localVarNoExplicitType.kt")
            public void testLocalVarNoExplicitType() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/localVarNoExplicitType.kt");
            }

            @Test
            @TestMetadata("useReflectionForLocalVarInLambda.kt")
            public void testUseReflectionForLocalVarInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/local/useReflectionForLocalVarInLambda.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties")
        @TestDataPath("$PROJECT_ROOT")
        public class OptimizedDelegatedProperties extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInOptimizedDelegatedProperties() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("definedInSources.kt")
            public void testDefinedInSources() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/definedInSources.kt");
            }

            @Test
            @TestMetadata("definedInSourcesWithNonNullParameter.kt")
            public void testDefinedInSourcesWithNonNullParameter() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/definedInSourcesWithNonNullParameter.kt");
            }

            @Test
            @TestMetadata("inSeparateModule.kt")
            public void testInSeparateModule() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/inSeparateModule.kt");
            }

            @Test
            @TestMetadata("inSeparateModuleWithNonNullParameter.kt")
            public void testInSeparateModuleWithNonNullParameter() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/inSeparateModuleWithNonNullParameter.kt");
            }

            @Test
            @TestMetadata("kt40815.kt")
            public void testKt40815() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815.kt");
            }

            @Test
            @TestMetadata("kt40815_2.kt")
            public void testKt40815_2() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815_2.kt");
            }

            @Test
            @TestMetadata("kt40815_3.kt")
            public void testKt40815_3() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt40815_3.kt");
            }

            @Test
            @TestMetadata("kt42253.kt")
            public void testKt42253() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/kt42253.kt");
            }

            @Test
            @TestMetadata("lazy.kt")
            public void testLazy() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/lazy.kt");
            }

            @Test
            @TestMetadata("mixedArgumentSizes.kt")
            public void testMixedArgumentSizes() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/optimizedDelegatedProperties/mixedArgumentSizes.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/delegatedProperty/provideDelegate")
        @TestDataPath("$PROJECT_ROOT")
        public class ProvideDelegate extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInProvideDelegate() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegatedProperty/provideDelegate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("delegatedPropertyWithIdProvideDelegate.kt")
            public void testDelegatedPropertyWithIdProvideDelegate() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/delegatedPropertyWithIdProvideDelegate.kt");
            }

            @Test
            @TestMetadata("differentReceivers.kt")
            public void testDifferentReceivers() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/differentReceivers.kt");
            }

            @Test
            @TestMetadata("evaluationOrder.kt")
            public void testEvaluationOrder() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrder.kt");
            }

            @Test
            @TestMetadata("evaluationOrderVar.kt")
            public void testEvaluationOrderVar() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/evaluationOrderVar.kt");
            }

            @Test
            @TestMetadata("extensionDelegated.kt")
            public void testExtensionDelegated() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/extensionDelegated.kt");
            }

            @Test
            @TestMetadata("generic.kt")
            public void testGeneric() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/generic.kt");
            }

            @Test
            @TestMetadata("genericDelegateWithNoAdditionalInfo.kt")
            public void testGenericDelegateWithNoAdditionalInfo() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/genericDelegateWithNoAdditionalInfo.kt");
            }

            @Test
            @TestMetadata("genericProvideDelegateOnNumberLiteral.kt")
            public void testGenericProvideDelegateOnNumberLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/genericProvideDelegateOnNumberLiteral.kt");
            }

            @Test
            @TestMetadata("hostCheck.kt")
            public void testHostCheck() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/hostCheck.kt");
            }

            @Test
            @TestMetadata("inClass.kt")
            public void testInClass() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inClass.kt");
            }

            @Test
            @TestMetadata("inlineProvideDelegate.kt")
            public void testInlineProvideDelegate() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/inlineProvideDelegate.kt");
            }

            @Test
            @TestMetadata("jvmStaticInObject.kt")
            public void testJvmStaticInObject() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/jvmStaticInObject.kt");
            }

            @Test
            @TestMetadata("kt15437.kt")
            public void testKt15437() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt15437.kt");
            }

            @Test
            @TestMetadata("kt16441.kt")
            public void testKt16441() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt16441.kt");
            }

            @Test
            @TestMetadata("kt18902.kt")
            public void testKt18902() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt18902.kt");
            }

            @Test
            @TestMetadata("kt39588.kt")
            public void testKt39588() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/kt39588.kt");
            }

            @Test
            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/local.kt");
            }

            @Test
            @TestMetadata("localCaptured.kt")
            public void testLocalCaptured() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localCaptured.kt");
            }

            @Test
            @TestMetadata("localDifferentReceivers.kt")
            public void testLocalDifferentReceivers() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/localDifferentReceivers.kt");
            }

            @Test
            @TestMetadata("memberExtension.kt")
            public void testMemberExtension() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/memberExtension.kt");
            }

            @Test
            @TestMetadata("propertyMetadata.kt")
            public void testPropertyMetadata() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/propertyMetadata.kt");
            }

            @Test
            @TestMetadata("provideDelegateByExtensionFunction.kt")
            public void testProvideDelegateByExtensionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/delegatedProperty/provideDelegate/provideDelegateByExtensionFunction.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/delegation")
    @TestDataPath("$PROJECT_ROOT")
    public class Delegation extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInDelegation() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/delegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("byMiddleInterface.kt")
        public void testByMiddleInterface() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/byMiddleInterface.kt");
        }

        @Test
        @TestMetadata("defaultOverride.kt")
        public void testDefaultOverride() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/defaultOverride.kt");
        }

        @Test
        @TestMetadata("delegationToMap.kt")
        public void testDelegationToMap() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/delegationToMap.kt");
        }

        @Test
        @TestMetadata("delegationToVal.kt")
        public void testDelegationToVal() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/delegationToVal.kt");
        }

        @Test
        @TestMetadata("delegationWithPrivateConstructor.kt")
        public void testDelegationWithPrivateConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/delegationWithPrivateConstructor.kt");
        }

        @Test
        @TestMetadata("diamond.kt")
        public void testDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/diamond.kt");
        }

        @Test
        @TestMetadata("diamond2.kt")
        public void testDiamond2() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/diamond2.kt");
        }

        @Test
        @TestMetadata("genericProperty.kt")
        public void testGenericProperty() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/genericProperty.kt");
        }

        @Test
        @TestMetadata("hiddenSuperOverrideIn1.0.kt")
        public void testHiddenSuperOverrideIn1_0() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/hiddenSuperOverrideIn1.0.kt");
        }

        @Test
        @TestMetadata("inClassDeclaration.kt")
        public void testInClassDeclaration() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/inClassDeclaration.kt");
        }

        @Test
        @TestMetadata("kt8154.kt")
        public void testKt8154() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/kt8154.kt");
        }

        @Test
        @TestMetadata("mixed.kt")
        public void testMixed() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/mixed.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/simple.kt");
        }

        @Test
        @TestMetadata("simple1.0.kt")
        public void testSimple1_0() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/simple1.0.kt");
        }

        @Test
        @TestMetadata("withDefaultParameters.kt")
        public void testWithDefaultParameters() throws Exception {
            runTest("compiler/testData/codegen/box/delegation/withDefaultParameters.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/destructuringDeclInLambdaParam")
    @TestDataPath("$PROJECT_ROOT")
    public class DestructuringDeclInLambdaParam extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInDestructuringDeclInLambdaParam() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/destructuringDeclInLambdaParam"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("extensionComponents.kt")
        public void testExtensionComponents() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/extensionComponents.kt");
        }

        @Test
        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/generic.kt");
        }

        @Test
        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/inline.kt");
        }

        @Test
        @TestMetadata("otherParameters.kt")
        public void testOtherParameters() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/otherParameters.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/simple.kt");
        }

        @Test
        @TestMetadata("stdlibUsages.kt")
        public void testStdlibUsages() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/stdlibUsages.kt");
        }

        @Test
        @TestMetadata("underscoreNames.kt")
        public void testUnderscoreNames() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/underscoreNames.kt");
        }

        @Test
        @TestMetadata("withIndexed.kt")
        public void testWithIndexed() throws Exception {
            runTest("compiler/testData/codegen/box/destructuringDeclInLambdaParam/withIndexed.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    public class Diagnostics extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInDiagnostics() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/diagnostics/functions")
        @TestDataPath("$PROJECT_ROOT")
        public class Functions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFunctions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/inference")
            @TestDataPath("$PROJECT_ROOT")
            public class Inference extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInInference() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/inference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("kt6176.kt")
                public void testKt6176() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/inference/kt6176.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke")
            @TestDataPath("$PROJECT_ROOT")
            public class Invoke extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInInvoke() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects")
                @TestDataPath("$PROJECT_ROOT")
                public class OnObjects extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInOnObjects() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("invokeOnClassObject1.kt")
                    public void testInvokeOnClassObject1() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject1.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnClassObject2.kt")
                    public void testInvokeOnClassObject2() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObject2.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnClassObjectOfNestedClass1.kt")
                    public void testInvokeOnClassObjectOfNestedClass1() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass1.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnClassObjectOfNestedClass2.kt")
                    public void testInvokeOnClassObjectOfNestedClass2() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnClassObjectOfNestedClass2.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnEnum1.kt")
                    public void testInvokeOnEnum1() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum1.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnEnum2.kt")
                    public void testInvokeOnEnum2() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnEnum2.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnImportedEnum1.kt")
                    public void testInvokeOnImportedEnum1() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum1.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnImportedEnum2.kt")
                    public void testInvokeOnImportedEnum2() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnImportedEnum2.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnObject1.kt")
                    public void testInvokeOnObject1() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject1.kt");
                    }

                    @Test
                    @TestMetadata("invokeOnObject2.kt")
                    public void testInvokeOnObject2() throws Exception {
                        runTest("compiler/testData/codegen/box/diagnostics/functions/invoke/onObjects/invokeOnObject2.kt");
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/diagnostics/functions/tailRecursion")
            @TestDataPath("$PROJECT_ROOT")
            public class TailRecursion extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInTailRecursion() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/functions/tailRecursion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("defaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs.kt");
                }

                @Test
                @TestMetadata("defaultArgs2.kt")
                public void testDefaultArgs2() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgs2.kt");
                }

                @Test
                @TestMetadata("defaultArgsOverridden.kt")
                public void testDefaultArgsOverridden() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsOverridden.kt");
                }

                @Test
                @TestMetadata("defaultArgsWithSideEffects.kt")
                public void testDefaultArgsWithSideEffects() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffects.kt");
                }

                @Test
                @TestMetadata("defaultArgsWithSideEffects2.kt")
                public void testDefaultArgsWithSideEffects2() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffects2.kt");
                }

                @Test
                @TestMetadata("defaultArgsWithSideEffectsOld.kt")
                public void testDefaultArgsWithSideEffectsOld() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/defaultArgsWithSideEffectsOld.kt");
                }

                @Test
                @TestMetadata("extensionTailCall.kt")
                public void testExtensionTailCall() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/extensionTailCall.kt");
                }

                @Test
                @TestMetadata("functionWithNoTails.kt")
                public void testFunctionWithNoTails() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNoTails.kt");
                }

                @Test
                @TestMetadata("functionWithNonTailRecursions.kt")
                public void testFunctionWithNonTailRecursions() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithNonTailRecursions.kt");
                }

                @Test
                @TestMetadata("functionWithoutAnnotation.kt")
                public void testFunctionWithoutAnnotation() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/functionWithoutAnnotation.kt");
                }

                @Test
                @TestMetadata("infixCall.kt")
                public void testInfixCall() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixCall.kt");
                }

                @Test
                @TestMetadata("infixRecursiveCall.kt")
                public void testInfixRecursiveCall() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/infixRecursiveCall.kt");
                }

                @Test
                @TestMetadata("insideElvis.kt")
                public void testInsideElvis() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/insideElvis.kt");
                }

                @Test
                @TestMetadata("labeledThisReferences.kt")
                public void testLabeledThisReferences() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/labeledThisReferences.kt");
                }

                @Test
                @TestMetadata("loops.kt")
                public void testLoops() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/loops.kt");
                }

                @Test
                @TestMetadata("multilevelBlocks.kt")
                public void testMultilevelBlocks() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/multilevelBlocks.kt");
                }

                @Test
                @TestMetadata("realIteratorFoldl.kt")
                public void testRealIteratorFoldl() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realIteratorFoldl.kt");
                }

                @Test
                @TestMetadata("realStringEscape.kt")
                public void testRealStringEscape() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringEscape.kt");
                }

                @Test
                @TestMetadata("realStringRepeat.kt")
                public void testRealStringRepeat() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/realStringRepeat.kt");
                }

                @Test
                @TestMetadata("recursiveCallInLambda.kt")
                public void testRecursiveCallInLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLambda.kt");
                }

                @Test
                @TestMetadata("recursiveCallInLocalFunction.kt")
                public void testRecursiveCallInLocalFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveCallInLocalFunction.kt");
                }

                @Test
                @TestMetadata("recursiveInnerFunction.kt")
                public void testRecursiveInnerFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/recursiveInnerFunction.kt");
                }

                @Test
                @TestMetadata("returnIf.kt")
                public void testReturnIf() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnIf.kt");
                }

                @Test
                @TestMetadata("returnInCatch.kt")
                public void testReturnInCatch() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInCatch.kt");
                }

                @Test
                @TestMetadata("returnInFinally.kt")
                public void testReturnInFinally() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInFinally.kt");
                }

                @Test
                @TestMetadata("returnInIfInFinally.kt")
                public void testReturnInIfInFinally() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInIfInFinally.kt");
                }

                @Test
                @TestMetadata("returnInParentheses.kt")
                public void testReturnInParentheses() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInParentheses.kt");
                }

                @Test
                @TestMetadata("returnInTry.kt")
                public void testReturnInTry() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/returnInTry.kt");
                }

                @Test
                @TestMetadata("simpleBlock.kt")
                public void testSimpleBlock() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleBlock.kt");
                }

                @Test
                @TestMetadata("simpleReturn.kt")
                public void testSimpleReturn() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturn.kt");
                }

                @Test
                @TestMetadata("simpleReturnWithElse.kt")
                public void testSimpleReturnWithElse() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/simpleReturnWithElse.kt");
                }

                @Test
                @TestMetadata("sum.kt")
                public void testSum() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/sum.kt");
                }

                @Test
                @TestMetadata("tailCallInBlockInParentheses.kt")
                public void testTailCallInBlockInParentheses() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInBlockInParentheses.kt");
                }

                @Test
                @TestMetadata("tailCallInParentheses.kt")
                public void testTailCallInParentheses() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailCallInParentheses.kt");
                }

                @Test
                @TestMetadata("tailRecursionInFinally.kt")
                public void testTailRecursionInFinally() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/tailRecursionInFinally.kt");
                }

                @Test
                @TestMetadata("thisReferences.kt")
                public void testThisReferences() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/thisReferences.kt");
                }

                @Test
                @TestMetadata("unitBlocks.kt")
                public void testUnitBlocks() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/unitBlocks.kt");
                }

                @Test
                @TestMetadata("whenWithCondition.kt")
                public void testWhenWithCondition() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithCondition.kt");
                }

                @Test
                @TestMetadata("whenWithInRange.kt")
                public void testWhenWithInRange() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithInRange.kt");
                }

                @Test
                @TestMetadata("whenWithIs.kt")
                public void testWhenWithIs() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithIs.kt");
                }

                @Test
                @TestMetadata("whenWithoutCondition.kt")
                public void testWhenWithoutCondition() throws Exception {
                    runTest("compiler/testData/codegen/box/diagnostics/functions/tailRecursion/whenWithoutCondition.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/diagnostics/vararg")
        @TestDataPath("$PROJECT_ROOT")
        public class Vararg extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInVararg() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/diagnostics/vararg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("kt4172.kt")
            public void testKt4172() throws Exception {
                runTest("compiler/testData/codegen/box/diagnostics/vararg/kt4172.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/elvis")
    @TestDataPath("$PROJECT_ROOT")
    public class Elvis extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInElvis() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/elvis"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("genericElvisWithMoreSpecificLHS.kt")
        public void testGenericElvisWithMoreSpecificLHS() throws Exception {
            runTest("compiler/testData/codegen/box/elvis/genericElvisWithMoreSpecificLHS.kt");
        }

        @Test
        @TestMetadata("genericElvisWithNullLHS.kt")
        public void testGenericElvisWithNullLHS() throws Exception {
            runTest("compiler/testData/codegen/box/elvis/genericElvisWithNullLHS.kt");
        }

        @Test
        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            runTest("compiler/testData/codegen/box/elvis/genericNull.kt");
        }

        @Test
        @TestMetadata("kt6694ExactAnnotationForElvis.kt")
        public void testKt6694ExactAnnotationForElvis() throws Exception {
            runTest("compiler/testData/codegen/box/elvis/kt6694ExactAnnotationForElvis.kt");
        }

        @Test
        @TestMetadata("nullNullOk.kt")
        public void testNullNullOk() throws Exception {
            runTest("compiler/testData/codegen/box/elvis/nullNullOk.kt");
        }

        @Test
        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/elvis/primitive.kt");
        }

        @Test
        @TestMetadata("withReturn.kt")
        public void testWithReturn() throws Exception {
            runTest("compiler/testData/codegen/box/elvis/withReturn.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/enum")
    @TestDataPath("$PROJECT_ROOT")
    public class Enum extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("abstractMethodInEnum.kt")
        public void testAbstractMethodInEnum() throws Exception {
            runTest("compiler/testData/codegen/box/enum/abstractMethodInEnum.kt");
        }

        @Test
        @TestMetadata("abstractNestedClass.kt")
        public void testAbstractNestedClass() throws Exception {
            runTest("compiler/testData/codegen/box/enum/abstractNestedClass.kt");
        }

        @Test
        public void testAllFilesPresentInEnum() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/enum"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("annotatedParameter.kt")
        public void testAnnotatedParameter() throws Exception {
            runTest("compiler/testData/codegen/box/enum/annotatedParameter.kt");
        }

        @Test
        @TestMetadata("annotatedParameter2.kt")
        public void testAnnotatedParameter2() throws Exception {
            runTest("compiler/testData/codegen/box/enum/annotatedParameter2.kt");
        }

        @Test
        @TestMetadata("asReturnExpression.kt")
        public void testAsReturnExpression() throws Exception {
            runTest("compiler/testData/codegen/box/enum/asReturnExpression.kt");
        }

        @Test
        @TestMetadata("bigEnum.kt")
        public void testBigEnum() throws Exception {
            runTest("compiler/testData/codegen/box/enum/bigEnum.kt");
        }

        @Test
        @TestMetadata("classForEnumEntry.kt")
        public void testClassForEnumEntry() throws Exception {
            runTest("compiler/testData/codegen/box/enum/classForEnumEntry.kt");
        }

        @Test
        @TestMetadata("companionAccessingEnumValue.kt")
        public void testCompanionAccessingEnumValue() throws Exception {
            runTest("compiler/testData/codegen/box/enum/companionAccessingEnumValue.kt");
        }

        @Test
        @TestMetadata("companionObjectInEnum.kt")
        public void testCompanionObjectInEnum() throws Exception {
            runTest("compiler/testData/codegen/box/enum/companionObjectInEnum.kt");
        }

        @Test
        @TestMetadata("constructorWithReordering.kt")
        public void testConstructorWithReordering() throws Exception {
            runTest("compiler/testData/codegen/box/enum/constructorWithReordering.kt");
        }

        @Test
        @TestMetadata("declaringClassOnEnumObject.kt")
        public void testDeclaringClassOnEnumObject() throws Exception {
            runTest("compiler/testData/codegen/box/enum/declaringClassOnEnumObject.kt");
        }

        @Test
        @TestMetadata("deepInnerClassInEnumEntryClass.kt")
        public void testDeepInnerClassInEnumEntryClass() throws Exception {
            runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass.kt");
        }

        @Test
        @TestMetadata("deepInnerClassInEnumEntryClass2.kt")
        public void testDeepInnerClassInEnumEntryClass2() throws Exception {
            runTest("compiler/testData/codegen/box/enum/deepInnerClassInEnumEntryClass2.kt");
        }

        @Test
        @TestMetadata("emptyConstructor.kt")
        public void testEmptyConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/enum/emptyConstructor.kt");
        }

        @Test
        @TestMetadata("emptyEnumValuesValueOf.kt")
        public void testEmptyEnumValuesValueOf() throws Exception {
            runTest("compiler/testData/codegen/box/enum/emptyEnumValuesValueOf.kt");
        }

        @Test
        @TestMetadata("enumCompanionInit.kt")
        public void testEnumCompanionInit() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumCompanionInit.kt");
        }

        @Test
        @TestMetadata("enumConstructorParameterClashWithDefaults.kt")
        public void testEnumConstructorParameterClashWithDefaults() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumConstructorParameterClashWithDefaults.kt");
        }

        @Test
        @TestMetadata("enumEntryMembers.kt")
        public void testEnumEntryMembers() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumEntryMembers.kt");
        }

        @Test
        @TestMetadata("enumEntryReferenceFromInnerClassConstructor1.kt")
        public void testEnumEntryReferenceFromInnerClassConstructor1() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor1.kt");
        }

        @Test
        @TestMetadata("enumEntryReferenceFromInnerClassConstructor2.kt")
        public void testEnumEntryReferenceFromInnerClassConstructor2() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor2.kt");
        }

        @Test
        @TestMetadata("enumEntryReferenceFromInnerClassConstructor3.kt")
        public void testEnumEntryReferenceFromInnerClassConstructor3() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumEntryReferenceFromInnerClassConstructor3.kt");
        }

        @Test
        @TestMetadata("enumInheritedFromTrait.kt")
        public void testEnumInheritedFromTrait() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumInheritedFromTrait.kt");
        }

        @Test
        @TestMetadata("enumMultiModule.kt")
        public void testEnumMultiModule() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumMultiModule.kt");
        }

        @Test
        @TestMetadata("enumShort.kt")
        public void testEnumShort() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumShort.kt");
        }

        @Test
        @TestMetadata("enumWithLambdaParameter.kt")
        public void testEnumWithLambdaParameter() throws Exception {
            runTest("compiler/testData/codegen/box/enum/enumWithLambdaParameter.kt");
        }

        @Test
        @TestMetadata("inPackage.kt")
        public void testInPackage() throws Exception {
            runTest("compiler/testData/codegen/box/enum/inPackage.kt");
        }

        @Test
        @TestMetadata("inclassobj.kt")
        public void testInclassobj() throws Exception {
            runTest("compiler/testData/codegen/box/enum/inclassobj.kt");
        }

        @Test
        @TestMetadata("initEntriesInCompanionObject.kt")
        public void testInitEntriesInCompanionObject() throws Exception {
            runTest("compiler/testData/codegen/box/enum/initEntriesInCompanionObject.kt");
        }

        @Test
        @TestMetadata("initEntriesInValueOf.kt")
        public void testInitEntriesInValueOf() throws Exception {
            runTest("compiler/testData/codegen/box/enum/initEntriesInValueOf.kt");
        }

        @Test
        @TestMetadata("initEnumAfterObjectAccess.kt")
        public void testInitEnumAfterObjectAccess() throws Exception {
            runTest("compiler/testData/codegen/box/enum/initEnumAfterObjectAccess.kt");
        }

        @Test
        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("compiler/testData/codegen/box/enum/inner.kt");
        }

        @Test
        @TestMetadata("innerClassInEnumEntryClass.kt")
        public void testInnerClassInEnumEntryClass() throws Exception {
            runTest("compiler/testData/codegen/box/enum/innerClassInEnumEntryClass.kt");
        }

        @Test
        @TestMetadata("innerClassMethodInEnumEntryClass.kt")
        public void testInnerClassMethodInEnumEntryClass() throws Exception {
            runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass.kt");
        }

        @Test
        @TestMetadata("innerClassMethodInEnumEntryClass2.kt")
        public void testInnerClassMethodInEnumEntryClass2() throws Exception {
            runTest("compiler/testData/codegen/box/enum/innerClassMethodInEnumEntryClass2.kt");
        }

        @Test
        @TestMetadata("innerWithExistingClassObject.kt")
        public void testInnerWithExistingClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/enum/innerWithExistingClassObject.kt");
        }

        @Test
        @TestMetadata("kt1119.kt")
        public void testKt1119() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt1119.kt");
        }

        @Test
        @TestMetadata("kt18731.kt")
        public void testKt18731() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt18731.kt");
        }

        @Test
        @TestMetadata("kt18731_2.kt")
        public void testKt18731_2() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt18731_2.kt");
        }

        @Test
        @TestMetadata("kt20651.kt")
        public void testKt20651() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt20651.kt");
        }

        @Test
        @TestMetadata("kt20651_inlineLambda.kt")
        public void testKt20651_inlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt20651_inlineLambda.kt");
        }

        @Test
        @TestMetadata("kt20651a.kt")
        public void testKt20651a() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt20651a.kt");
        }

        @Test
        @TestMetadata("kt20651b.kt")
        public void testKt20651b() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt20651b.kt");
        }

        @Test
        @TestMetadata("kt2350.kt")
        public void testKt2350() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt2350.kt");
        }

        @Test
        @TestMetadata("kt38996.kt")
        public void testKt38996() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt38996.kt");
        }

        @Test
        @TestMetadata("kt7257.kt")
        public void testKt7257() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257.kt");
        }

        @Test
        @TestMetadata("kt7257_anonObjectInit.kt")
        public void testKt7257_anonObjectInit() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectInit.kt");
        }

        @Test
        @TestMetadata("kt7257_anonObjectMethod.kt")
        public void testKt7257_anonObjectMethod() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_anonObjectMethod.kt");
        }

        @Test
        @TestMetadata("kt7257_boundReference1.kt")
        public void testKt7257_boundReference1() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_boundReference1.kt");
        }

        @Test
        @TestMetadata("kt7257_boundReference2.kt")
        public void testKt7257_boundReference2() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_boundReference2.kt");
        }

        @Test
        @TestMetadata("kt7257_boundReferenceWithImplicitReceiver.kt")
        public void testKt7257_boundReferenceWithImplicitReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_boundReferenceWithImplicitReceiver.kt");
        }

        @Test
        @TestMetadata("kt7257_explicitReceiver.kt")
        public void testKt7257_explicitReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_explicitReceiver.kt");
        }

        @Test
        @TestMetadata("kt7257_fullyQualifiedReceiver.kt")
        public void testKt7257_fullyQualifiedReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_fullyQualifiedReceiver.kt");
        }

        @Test
        @TestMetadata("kt7257_namedLocalFun.kt")
        public void testKt7257_namedLocalFun() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_namedLocalFun.kt");
        }

        @Test
        @TestMetadata("kt7257_notInline.kt")
        public void testKt7257_notInline() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt7257_notInline.kt");
        }

        @Test
        @TestMetadata("kt9711.kt")
        public void testKt9711() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt9711.kt");
        }

        @Test
        @TestMetadata("kt9711_2.kt")
        public void testKt9711_2() throws Exception {
            runTest("compiler/testData/codegen/box/enum/kt9711_2.kt");
        }

        @Test
        @TestMetadata("manyDefaultParameters.kt")
        public void testManyDefaultParameters() throws Exception {
            runTest("compiler/testData/codegen/box/enum/manyDefaultParameters.kt");
        }

        @Test
        @TestMetadata("modifierFlags.kt")
        public void testModifierFlags() throws Exception {
            runTest("compiler/testData/codegen/box/enum/modifierFlags.kt");
        }

        @Test
        @TestMetadata("noClassForSimpleEnum.kt")
        public void testNoClassForSimpleEnum() throws Exception {
            runTest("compiler/testData/codegen/box/enum/noClassForSimpleEnum.kt");
        }

        @Test
        @TestMetadata("objectInEnum.kt")
        public void testObjectInEnum() throws Exception {
            runTest("compiler/testData/codegen/box/enum/objectInEnum.kt");
        }

        @Test
        @TestMetadata("ordinal.kt")
        public void testOrdinal() throws Exception {
            runTest("compiler/testData/codegen/box/enum/ordinal.kt");
        }

        @Test
        @TestMetadata("refToThis.kt")
        public void testRefToThis() throws Exception {
            runTest("compiler/testData/codegen/box/enum/refToThis.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/enum/simple.kt");
        }

        @Test
        @TestMetadata("sortEnumEntries.kt")
        public void testSortEnumEntries() throws Exception {
            runTest("compiler/testData/codegen/box/enum/sortEnumEntries.kt");
        }

        @Test
        @TestMetadata("superCallInEnumLiteral.kt")
        public void testSuperCallInEnumLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/enum/superCallInEnumLiteral.kt");
        }

        @Test
        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("compiler/testData/codegen/box/enum/toString.kt");
        }

        @Test
        @TestMetadata("valueof.kt")
        public void testValueof() throws Exception {
            runTest("compiler/testData/codegen/box/enum/valueof.kt");
        }

        @Test
        @TestMetadata("whenInObject.kt")
        public void testWhenInObject() throws Exception {
            runTest("compiler/testData/codegen/box/enum/whenInObject.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/enum/defaultCtor")
        @TestDataPath("$PROJECT_ROOT")
        public class DefaultCtor extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInDefaultCtor() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/enum/defaultCtor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("constructorWithDefaultArguments.kt")
            public void testConstructorWithDefaultArguments() throws Exception {
                runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithDefaultArguments.kt");
            }

            @Test
            @TestMetadata("constructorWithVararg.kt")
            public void testConstructorWithVararg() throws Exception {
                runTest("compiler/testData/codegen/box/enum/defaultCtor/constructorWithVararg.kt");
            }

            @Test
            @TestMetadata("entryClassConstructorWithDefaultArguments.kt")
            public void testEntryClassConstructorWithDefaultArguments() throws Exception {
                runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithDefaultArguments.kt");
            }

            @Test
            @TestMetadata("entryClassConstructorWithVarargs.kt")
            public void testEntryClassConstructorWithVarargs() throws Exception {
                runTest("compiler/testData/codegen/box/enum/defaultCtor/entryClassConstructorWithVarargs.kt");
            }

            @Test
            @TestMetadata("secondaryConstructorWithDefaultArguments.kt")
            public void testSecondaryConstructorWithDefaultArguments() throws Exception {
                runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithDefaultArguments.kt");
            }

            @Test
            @TestMetadata("secondaryConstructorWithVararg.kt")
            public void testSecondaryConstructorWithVararg() throws Exception {
                runTest("compiler/testData/codegen/box/enum/defaultCtor/secondaryConstructorWithVararg.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/evaluate")
    @TestDataPath("$PROJECT_ROOT")
    public class Evaluate extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInEvaluate() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/evaluate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("char.kt")
        public void testChar() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/char.kt");
        }

        @Test
        @TestMetadata("divide.kt")
        public void testDivide() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/divide.kt");
        }

        @Test
        @TestMetadata("intrinsics.kt")
        public void testIntrinsics() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/intrinsics.kt");
        }

        @Test
        @TestMetadata("kt9443.kt")
        public void testKt9443() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/kt9443.kt");
        }

        @Test
        @TestMetadata("maxValue.kt")
        public void testMaxValue() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/maxValue.kt");
        }

        @Test
        @TestMetadata("maxValueByte.kt")
        public void testMaxValueByte() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/maxValueByte.kt");
        }

        @Test
        @TestMetadata("maxValueInt.kt")
        public void testMaxValueInt() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/maxValueInt.kt");
        }

        @Test
        @TestMetadata("minus.kt")
        public void testMinus() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/minus.kt");
        }

        @Test
        @TestMetadata("mod.kt")
        public void testMod() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/mod.kt");
        }

        @Test
        @TestMetadata("multiply.kt")
        public void testMultiply() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/multiply.kt");
        }

        @Test
        @TestMetadata("parenthesized.kt")
        public void testParenthesized() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/parenthesized.kt");
        }

        @Test
        @TestMetadata("plus.kt")
        public void testPlus() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/plus.kt");
        }

        @Test
        @TestMetadata("simpleCallBinary.kt")
        public void testSimpleCallBinary() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/simpleCallBinary.kt");
        }

        @Test
        @TestMetadata("unaryMinus.kt")
        public void testUnaryMinus() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/unaryMinus.kt");
        }

        @Test
        @TestMetadata("unaryPlus.kt")
        public void testUnaryPlus() throws Exception {
            runTest("compiler/testData/codegen/box/evaluate/unaryPlus.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/exclExcl")
    @TestDataPath("$PROJECT_ROOT")
    public class ExclExcl extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInExclExcl() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/exclExcl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            runTest("compiler/testData/codegen/box/exclExcl/genericNull.kt");
        }

        @Test
        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/exclExcl/primitive.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/extensionFunctions")
    @TestDataPath("$PROJECT_ROOT")
    public class ExtensionFunctions extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInExtensionFunctions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("executionOrder.kt")
        public void testExecutionOrder() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/executionOrder.kt");
        }

        @Test
        @TestMetadata("kt1061.kt")
        public void testKt1061() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt1061.kt");
        }

        @Test
        @TestMetadata("kt1249.kt")
        public void testKt1249() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt1249.kt");
        }

        @Test
        @TestMetadata("kt1290.kt")
        public void testKt1290() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt1290.kt");
        }

        @Test
        @TestMetadata("kt13312.kt")
        public void testKt13312() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt13312.kt");
        }

        @Test
        @TestMetadata("kt1776.kt")
        public void testKt1776() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt1776.kt");
        }

        @Test
        @TestMetadata("kt1953.kt")
        public void testKt1953() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt1953.kt");
        }

        @Test
        @TestMetadata("kt1953_class.kt")
        public void testKt1953_class() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt1953_class.kt");
        }

        @Test
        @TestMetadata("kt23675.kt")
        public void testKt23675() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt23675.kt");
        }

        @Test
        @TestMetadata("kt3285.kt")
        public void testKt3285() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt3285.kt");
        }

        @Test
        @TestMetadata("kt3298.kt")
        public void testKt3298() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt3298.kt");
        }

        @Test
        @TestMetadata("kt3646.kt")
        public void testKt3646() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt3646.kt");
        }

        @Test
        @TestMetadata("kt3969.kt")
        public void testKt3969() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt3969.kt");
        }

        @Test
        @TestMetadata("kt4228.kt")
        public void testKt4228() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt4228.kt");
        }

        @Test
        @TestMetadata("kt475.kt")
        public void testKt475() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt475.kt");
        }

        @Test
        @TestMetadata("kt5467.kt")
        public void testKt5467() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt5467.kt");
        }

        @Test
        @TestMetadata("kt606.kt")
        public void testKt606() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt606.kt");
        }

        @Test
        @TestMetadata("kt865.kt")
        public void testKt865() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/kt865.kt");
        }

        @Test
        @TestMetadata("nested2.kt")
        public void testNested2() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/nested2.kt");
        }

        @Test
        @TestMetadata("shared.kt")
        public void testShared() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/shared.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/simple.kt");
        }

        @Test
        @TestMetadata("thisMethodInObjectLiteral.kt")
        public void testThisMethodInObjectLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/thisMethodInObjectLiteral.kt");
        }

        @Test
        @TestMetadata("virtual.kt")
        public void testVirtual() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/virtual.kt");
        }

        @Test
        @TestMetadata("whenFail.kt")
        public void testWhenFail() throws Exception {
            runTest("compiler/testData/codegen/box/extensionFunctions/whenFail.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/extensionProperties")
    @TestDataPath("$PROJECT_ROOT")
    public class ExtensionProperties extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("accessorForPrivateSetter.kt")
        public void testAccessorForPrivateSetter() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/accessorForPrivateSetter.kt");
        }

        @Test
        public void testAllFilesPresentInExtensionProperties() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/extensionProperties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("genericValForPrimitiveType.kt")
        public void testGenericValForPrimitiveType() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/genericValForPrimitiveType.kt");
        }

        @Test
        @TestMetadata("genericValMultipleUpperBounds.kt")
        public void testGenericValMultipleUpperBounds() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/genericValMultipleUpperBounds.kt");
        }

        @Test
        @TestMetadata("genericVarForPrimitiveType.kt")
        public void testGenericVarForPrimitiveType() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/genericVarForPrimitiveType.kt");
        }

        @Test
        @TestMetadata("inClass.kt")
        public void testInClass() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/inClass.kt");
        }

        @Test
        @TestMetadata("inClassLongTypeInReceiver.kt")
        public void testInClassLongTypeInReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/inClassLongTypeInReceiver.kt");
        }

        @Test
        @TestMetadata("inClassWithGetter.kt")
        public void testInClassWithGetter() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/inClassWithGetter.kt");
        }

        @Test
        @TestMetadata("inClassWithPrivateGetter.kt")
        public void testInClassWithPrivateGetter() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateGetter.kt");
        }

        @Test
        @TestMetadata("inClassWithPrivateSetter.kt")
        public void testInClassWithPrivateSetter() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/inClassWithPrivateSetter.kt");
        }

        @Test
        @TestMetadata("inClassWithSetter.kt")
        public void testInClassWithSetter() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/inClassWithSetter.kt");
        }

        @Test
        @TestMetadata("kt9897.kt")
        public void testKt9897() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/kt9897.kt");
        }

        @Test
        @TestMetadata("kt9897_topLevel.kt")
        public void testKt9897_topLevel() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/kt9897_topLevel.kt");
        }

        @Test
        @TestMetadata("nonAbstractInInterface.kt")
        public void testNonAbstractInInterface() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/nonAbstractInInterface.kt");
        }

        @Test
        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/topLevel.kt");
        }

        @Test
        @TestMetadata("topLevelLongTypeInReceiver.kt")
        public void testTopLevelLongTypeInReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/extensionProperties/topLevelLongTypeInReceiver.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/external")
    @TestDataPath("$PROJECT_ROOT")
    public class External extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInExternal() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/external"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("jvmStaticExternal.kt")
        public void testJvmStaticExternal() throws Exception {
            runTest("compiler/testData/codegen/box/external/jvmStaticExternal.kt");
        }

        @Test
        @TestMetadata("jvmStaticExternalPrivate.kt")
        public void testJvmStaticExternalPrivate() throws Exception {
            runTest("compiler/testData/codegen/box/external/jvmStaticExternalPrivate.kt");
        }

        @Test
        @TestMetadata("withDefaultArg.kt")
        public void testWithDefaultArg() throws Exception {
            runTest("compiler/testData/codegen/box/external/withDefaultArg.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/fakeOverride")
    @TestDataPath("$PROJECT_ROOT")
    public class FakeOverride extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInFakeOverride() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fakeOverride"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("diamondFunction.kt")
        public void testDiamondFunction() throws Exception {
            runTest("compiler/testData/codegen/box/fakeOverride/diamondFunction.kt");
        }

        @Test
        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("compiler/testData/codegen/box/fakeOverride/function.kt");
        }

        @Test
        @TestMetadata("privateFakeOverrides0.kt")
        public void testPrivateFakeOverrides0() throws Exception {
            runTest("compiler/testData/codegen/box/fakeOverride/privateFakeOverrides0.kt");
        }

        @Test
        @TestMetadata("privateFakeOverrides1.kt")
        public void testPrivateFakeOverrides1() throws Exception {
            runTest("compiler/testData/codegen/box/fakeOverride/privateFakeOverrides1.kt");
        }

        @Test
        @TestMetadata("propertyGetter.kt")
        public void testPropertyGetter() throws Exception {
            runTest("compiler/testData/codegen/box/fakeOverride/propertyGetter.kt");
        }

        @Test
        @TestMetadata("propertySetter.kt")
        public void testPropertySetter() throws Exception {
            runTest("compiler/testData/codegen/box/fakeOverride/propertySetter.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/fieldRename")
    @TestDataPath("$PROJECT_ROOT")
    public class FieldRename extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInFieldRename() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fieldRename"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("constructorAndClassObject.kt")
        public void testConstructorAndClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/fieldRename/constructorAndClassObject.kt");
        }

        @Test
        @TestMetadata("delegates.kt")
        public void testDelegates() throws Exception {
            runTest("compiler/testData/codegen/box/fieldRename/delegates.kt");
        }

        @Test
        @TestMetadata("genericPropertyWithItself.kt")
        public void testGenericPropertyWithItself() throws Exception {
            runTest("compiler/testData/codegen/box/fieldRename/genericPropertyWithItself.kt");
        }

        @Test
        @TestMetadata("jvmFieldNoClash1.kt")
        public void testJvmFieldNoClash1() throws Exception {
            runTest("compiler/testData/codegen/box/fieldRename/jvmFieldNoClash1.kt");
        }

        @Test
        @TestMetadata("jvmFieldNoClash2.kt")
        public void testJvmFieldNoClash2() throws Exception {
            runTest("compiler/testData/codegen/box/fieldRename/jvmFieldNoClash2.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/finally")
    @TestDataPath("$PROJECT_ROOT")
    public class Finally extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInFinally() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/finally"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("breakAndOuterFinally.kt")
        public void testBreakAndOuterFinally() throws Exception {
            runTest("compiler/testData/codegen/box/finally/breakAndOuterFinally.kt");
        }

        @Test
        @TestMetadata("continueAndOuterFinally.kt")
        public void testContinueAndOuterFinally() throws Exception {
            runTest("compiler/testData/codegen/box/finally/continueAndOuterFinally.kt");
        }

        @Test
        @TestMetadata("finallyAndFinally.kt")
        public void testFinallyAndFinally() throws Exception {
            runTest("compiler/testData/codegen/box/finally/finallyAndFinally.kt");
        }

        @Test
        @TestMetadata("kt31923_break.kt")
        public void testKt31923_break() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt31923_break.kt");
        }

        @Test
        @TestMetadata("kt31923_continue.kt")
        public void testKt31923_continue() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt31923_continue.kt");
        }

        @Test
        @TestMetadata("kt31923_return.kt")
        public void testKt31923_return() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt31923_return.kt");
        }

        @Test
        @TestMetadata("kt31923_wrong.kt")
        public void testKt31923_wrong() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt31923_wrong.kt");
        }

        @Test
        @TestMetadata("kt3549.kt")
        public void testKt3549() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt3549.kt");
        }

        @Test
        @TestMetadata("kt3706.kt")
        public void testKt3706() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt3706.kt");
        }

        @Test
        @TestMetadata("kt3867.kt")
        public void testKt3867() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt3867.kt");
        }

        @Test
        @TestMetadata("kt3874.kt")
        public void testKt3874() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt3874.kt");
        }

        @Test
        @TestMetadata("kt3894.kt")
        public void testKt3894() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt3894.kt");
        }

        @Test
        @TestMetadata("kt4134.kt")
        public void testKt4134() throws Exception {
            runTest("compiler/testData/codegen/box/finally/kt4134.kt");
        }

        @Test
        @TestMetadata("loopAndFinally.kt")
        public void testLoopAndFinally() throws Exception {
            runTest("compiler/testData/codegen/box/finally/loopAndFinally.kt");
        }

        @Test
        @TestMetadata("nestedFinallyAndNonFinallyTry.kt")
        public void testNestedFinallyAndNonFinallyTry() throws Exception {
            runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry.kt");
        }

        @Test
        @TestMetadata("nestedFinallyAndNonFinallyTry2.kt")
        public void testNestedFinallyAndNonFinallyTry2() throws Exception {
            runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry2.kt");
        }

        @Test
        @TestMetadata("nestedFinallyAndNonFinallyTry3.kt")
        public void testNestedFinallyAndNonFinallyTry3() throws Exception {
            runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry3.kt");
        }

        @Test
        @TestMetadata("nestedFinallyAndNonFinallyTry4.kt")
        public void testNestedFinallyAndNonFinallyTry4() throws Exception {
            runTest("compiler/testData/codegen/box/finally/nestedFinallyAndNonFinallyTry4.kt");
        }

        @Test
        @TestMetadata("notChainCatch.kt")
        public void testNotChainCatch() throws Exception {
            runTest("compiler/testData/codegen/box/finally/notChainCatch.kt");
        }

        @Test
        @TestMetadata("objectInFinally.kt")
        public void testObjectInFinally() throws Exception {
            runTest("compiler/testData/codegen/box/finally/objectInFinally.kt");
        }

        @Test
        @TestMetadata("tryFinally.kt")
        public void testTryFinally() throws Exception {
            runTest("compiler/testData/codegen/box/finally/tryFinally.kt");
        }

        @Test
        @TestMetadata("tryLoopTry.kt")
        public void testTryLoopTry() throws Exception {
            runTest("compiler/testData/codegen/box/finally/tryLoopTry.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/fullJdk")
    @TestDataPath("$PROJECT_ROOT")
    public class FullJdk extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInFullJdk() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("charBuffer.kt")
        public void testCharBuffer() throws Exception {
            runTest("compiler/testData/codegen/box/fullJdk/charBuffer.kt");
        }

        @Test
        @TestMetadata("ifInWhile.kt")
        public void testIfInWhile() throws Exception {
            runTest("compiler/testData/codegen/box/fullJdk/ifInWhile.kt");
        }

        @Test
        @TestMetadata("intCountDownLatchExtension.kt")
        public void testIntCountDownLatchExtension() throws Exception {
            runTest("compiler/testData/codegen/box/fullJdk/intCountDownLatchExtension.kt");
        }

        @Test
        @TestMetadata("kt31757.kt")
        public void testKt31757() throws Exception {
            runTest("compiler/testData/codegen/box/fullJdk/kt31757.kt");
        }

        @Test
        @TestMetadata("kt434.kt")
        public void testKt434() throws Exception {
            runTest("compiler/testData/codegen/box/fullJdk/kt434.kt");
        }

        @Test
        @TestMetadata("platformTypeAssertionStackTrace.kt")
        public void testPlatformTypeAssertionStackTrace() throws Exception {
            runTest("compiler/testData/codegen/box/fullJdk/platformTypeAssertionStackTrace.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/fullJdk/native")
        @TestDataPath("$PROJECT_ROOT")
        public class Native extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInNative() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/native"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("nativePropertyAccessors.kt")
            public void testNativePropertyAccessors() throws Exception {
                runTest("compiler/testData/codegen/box/fullJdk/native/nativePropertyAccessors.kt");
            }

            @Test
            @TestMetadata("simpleNative.kt")
            public void testSimpleNative() throws Exception {
                runTest("compiler/testData/codegen/box/fullJdk/native/simpleNative.kt");
            }

            @Test
            @TestMetadata("topLevel.kt")
            public void testTopLevel() throws Exception {
                runTest("compiler/testData/codegen/box/fullJdk/native/topLevel.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/fullJdk/regressions")
        @TestDataPath("$PROJECT_ROOT")
        public class Regressions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInRegressions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/fullJdk/regressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("kt15112.kt")
            public void testKt15112() throws Exception {
                runTest("compiler/testData/codegen/box/fullJdk/regressions/kt15112.kt");
            }

            @Test
            @TestMetadata("kt1770.kt")
            public void testKt1770() throws Exception {
                runTest("compiler/testData/codegen/box/fullJdk/regressions/kt1770.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/funInterface")
    @TestDataPath("$PROJECT_ROOT")
    public class FunInterface extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInFunInterface() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/funInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("basicFunInterface.kt")
        public void testBasicFunInterface() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/basicFunInterface.kt");
        }

        @Test
        @TestMetadata("basicFunInterfaceConversion.kt")
        public void testBasicFunInterfaceConversion() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/basicFunInterfaceConversion.kt");
        }

        @Test
        @TestMetadata("basicFunInterfaceConversionClash.kt")
        public void testBasicFunInterfaceConversionClash() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/basicFunInterfaceConversionClash.kt");
        }

        @Test
        @TestMetadata("castFromAny.kt")
        public void testCastFromAny() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/castFromAny.kt");
        }

        @Test
        @TestMetadata("funConversionInVararg.kt")
        public void testFunConversionInVararg() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/funConversionInVararg.kt");
        }

        @Test
        @TestMetadata("funInterfaceInheritance.kt")
        public void testFunInterfaceInheritance() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/funInterfaceInheritance.kt");
        }

        @Test
        @TestMetadata("funInterfaceWithReceiver.kt")
        public void testFunInterfaceWithReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/funInterfaceWithReceiver.kt");
        }

        @Test
        @TestMetadata("inlinedSamWrapper.kt")
        public void testInlinedSamWrapper() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/inlinedSamWrapper.kt");
        }

        @Test
        @TestMetadata("intersectionTypeToFunInterfaceConversion.kt")
        public void testIntersectionTypeToFunInterfaceConversion() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/intersectionTypeToFunInterfaceConversion.kt");
        }

        @Test
        @TestMetadata("irrelevantPrivateDeclarations.kt")
        public void testIrrelevantPrivateDeclarations() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/irrelevantPrivateDeclarations.kt");
        }

        @Test
        @TestMetadata("multimodule.kt")
        public void testMultimodule() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/multimodule.kt");
        }

        @Test
        @TestMetadata("noOptimizedCallableReferences.kt")
        public void testNoOptimizedCallableReferences() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/noOptimizedCallableReferences.kt");
        }

        @Test
        @TestMetadata("nonAbstractMethod.kt")
        public void testNonAbstractMethod() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/nonAbstractMethod.kt");
        }

        @Test
        @TestMetadata("nullableSam.kt")
        public void testNullableSam() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/nullableSam.kt");
        }

        @Test
        @TestMetadata("partialSam.kt")
        public void testPartialSam() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/partialSam.kt");
        }

        @Test
        @TestMetadata("primitiveConversions.kt")
        public void testPrimitiveConversions() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/primitiveConversions.kt");
        }

        @Test
        @TestMetadata("receiverEvaluatedOnce.kt")
        public void testReceiverEvaluatedOnce() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/receiverEvaluatedOnce.kt");
        }

        @Test
        @TestMetadata("samConstructorExplicitInvocation.kt")
        public void testSamConstructorExplicitInvocation() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/samConstructorExplicitInvocation.kt");
        }

        @Test
        @TestMetadata("samConversionToGenericInterfaceInGenericFun.kt")
        public void testSamConversionToGenericInterfaceInGenericFun() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/samConversionToGenericInterfaceInGenericFun.kt");
        }

        @Test
        @TestMetadata("subtypeOfFunctionalTypeToFunInterfaceConversion.kt")
        public void testSubtypeOfFunctionalTypeToFunInterfaceConversion() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/subtypeOfFunctionalTypeToFunInterfaceConversion.kt");
        }

        @Test
        @TestMetadata("suspendFunInterfaceConversionCodegen.kt")
        public void testSuspendFunInterfaceConversionCodegen() throws Exception {
            runTest("compiler/testData/codegen/box/funInterface/suspendFunInterfaceConversionCodegen.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/funInterface/equality")
        @TestDataPath("$PROJECT_ROOT")
        public class Equality extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEquality() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/funInterface/equality"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("functionReferencesBound.kt")
            public void testFunctionReferencesBound() throws Exception {
                runTest("compiler/testData/codegen/box/funInterface/equality/functionReferencesBound.kt");
            }

            @Test
            @TestMetadata("functionReferencesUnbound.kt")
            public void testFunctionReferencesUnbound() throws Exception {
                runTest("compiler/testData/codegen/box/funInterface/equality/functionReferencesUnbound.kt");
            }

            @Test
            @TestMetadata("lambdaRuntimeConversion.kt")
            public void testLambdaRuntimeConversion() throws Exception {
                runTest("compiler/testData/codegen/box/funInterface/equality/lambdaRuntimeConversion.kt");
            }

            @Test
            @TestMetadata("localFunctionReferences.kt")
            public void testLocalFunctionReferences() throws Exception {
                runTest("compiler/testData/codegen/box/funInterface/equality/localFunctionReferences.kt");
            }

            @Test
            @TestMetadata("simpleLambdas.kt")
            public void testSimpleLambdas() throws Exception {
                runTest("compiler/testData/codegen/box/funInterface/equality/simpleLambdas.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/functions")
    @TestDataPath("$PROJECT_ROOT")
    public class Functions extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInFunctions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("coerceVoidToArray.kt")
        public void testCoerceVoidToArray() throws Exception {
            runTest("compiler/testData/codegen/box/functions/coerceVoidToArray.kt");
        }

        @Test
        @TestMetadata("coerceVoidToObject.kt")
        public void testCoerceVoidToObject() throws Exception {
            runTest("compiler/testData/codegen/box/functions/coerceVoidToObject.kt");
        }

        @Test
        @TestMetadata("dataLocalVariable.kt")
        public void testDataLocalVariable() throws Exception {
            runTest("compiler/testData/codegen/box/functions/dataLocalVariable.kt");
        }

        @Test
        @TestMetadata("defaultargs.kt")
        public void testDefaultargs() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs.kt");
        }

        @Test
        @TestMetadata("defaultargs1.kt")
        public void testDefaultargs1() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs1.kt");
        }

        @Test
        @TestMetadata("defaultargs2.kt")
        public void testDefaultargs2() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs2.kt");
        }

        @Test
        @TestMetadata("defaultargs3.kt")
        public void testDefaultargs3() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs3.kt");
        }

        @Test
        @TestMetadata("defaultargs4.kt")
        public void testDefaultargs4() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs4.kt");
        }

        @Test
        @TestMetadata("defaultargs5.kt")
        public void testDefaultargs5() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs5.kt");
        }

        @Test
        @TestMetadata("defaultargs6.kt")
        public void testDefaultargs6() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs6.kt");
        }

        @Test
        @TestMetadata("defaultargs7.kt")
        public void testDefaultargs7() throws Exception {
            runTest("compiler/testData/codegen/box/functions/defaultargs7.kt");
        }

        @Test
        @TestMetadata("ea33909.kt")
        public void testEa33909() throws Exception {
            runTest("compiler/testData/codegen/box/functions/ea33909.kt");
        }

        @Test
        @TestMetadata("fakeDescriptorWithSeveralOverridenOne.kt")
        public void testFakeDescriptorWithSeveralOverridenOne() throws Exception {
            runTest("compiler/testData/codegen/box/functions/fakeDescriptorWithSeveralOverridenOne.kt");
        }

        @Test
        @TestMetadata("functionNtoString.kt")
        public void testFunctionNtoString() throws Exception {
            runTest("compiler/testData/codegen/box/functions/functionNtoString.kt");
        }

        @Test
        @TestMetadata("functionNtoStringGeneric.kt")
        public void testFunctionNtoStringGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/functions/functionNtoStringGeneric.kt");
        }

        @Test
        @TestMetadata("functionNtoStringNoReflect.kt")
        public void testFunctionNtoStringNoReflect() throws Exception {
            runTest("compiler/testData/codegen/box/functions/functionNtoStringNoReflect.kt");
        }

        @Test
        @TestMetadata("infixRecursiveCall.kt")
        public void testInfixRecursiveCall() throws Exception {
            runTest("compiler/testData/codegen/box/functions/infixRecursiveCall.kt");
        }

        @Test
        @TestMetadata("kt1038.kt")
        public void testKt1038() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt1038.kt");
        }

        @Test
        @TestMetadata("kt1199.kt")
        public void testKt1199() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt1199.kt");
        }

        @Test
        @TestMetadata("kt1413.kt")
        public void testKt1413() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt1413.kt");
        }

        @Test
        @TestMetadata("kt1649_1.kt")
        public void testKt1649_1() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt1649_1.kt");
        }

        @Test
        @TestMetadata("kt1649_2.kt")
        public void testKt1649_2() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt1649_2.kt");
        }

        @Test
        @TestMetadata("kt1739.kt")
        public void testKt1739() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt1739.kt");
        }

        @Test
        @TestMetadata("kt2270.kt")
        public void testKt2270() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt2270.kt");
        }

        @Test
        @TestMetadata("kt2271.kt")
        public void testKt2271() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt2271.kt");
        }

        @Test
        @TestMetadata("kt2280.kt")
        public void testKt2280() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt2280.kt");
        }

        @Test
        @TestMetadata("kt2481.kt")
        public void testKt2481() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt2481.kt");
        }

        @Test
        @TestMetadata("kt2716.kt")
        public void testKt2716() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt2716.kt");
        }

        @Test
        @TestMetadata("kt2739.kt")
        public void testKt2739() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt2739.kt");
        }

        @Test
        @TestMetadata("kt2929.kt")
        public void testKt2929() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt2929.kt");
        }

        @Test
        @TestMetadata("kt3214.kt")
        public void testKt3214() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt3214.kt");
        }

        @Test
        @TestMetadata("kt3313.kt")
        public void testKt3313() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt3313.kt");
        }

        @Test
        @TestMetadata("kt3573.kt")
        public void testKt3573() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt3573.kt");
        }

        @Test
        @TestMetadata("kt3724.kt")
        public void testKt3724() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt3724.kt");
        }

        @Test
        @TestMetadata("kt395.kt")
        public void testKt395() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt395.kt");
        }

        @Test
        @TestMetadata("kt785.kt")
        public void testKt785() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt785.kt");
        }

        @Test
        @TestMetadata("kt873.kt")
        public void testKt873() throws Exception {
            runTest("compiler/testData/codegen/box/functions/kt873.kt");
        }

        @Test
        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("compiler/testData/codegen/box/functions/localFunction.kt");
        }

        @Test
        @TestMetadata("localReturnInsideFunctionExpression.kt")
        public void testLocalReturnInsideFunctionExpression() throws Exception {
            runTest("compiler/testData/codegen/box/functions/localReturnInsideFunctionExpression.kt");
        }

        @Test
        @TestMetadata("nothisnoclosure.kt")
        public void testNothisnoclosure() throws Exception {
            runTest("compiler/testData/codegen/box/functions/nothisnoclosure.kt");
        }

        @Test
        @TestMetadata("prefixRecursiveCall.kt")
        public void testPrefixRecursiveCall() throws Exception {
            runTest("compiler/testData/codegen/box/functions/prefixRecursiveCall.kt");
        }

        @Test
        @TestMetadata("recursiveCompareTo.kt")
        public void testRecursiveCompareTo() throws Exception {
            runTest("compiler/testData/codegen/box/functions/recursiveCompareTo.kt");
        }

        @Test
        @TestMetadata("recursiveIncrementCall.kt")
        public void testRecursiveIncrementCall() throws Exception {
            runTest("compiler/testData/codegen/box/functions/recursiveIncrementCall.kt");
        }

        @Test
        @TestMetadata("typeParameterAsUpperBound.kt")
        public void testTypeParameterAsUpperBound() throws Exception {
            runTest("compiler/testData/codegen/box/functions/typeParameterAsUpperBound.kt");
        }

        @Test
        @TestMetadata("typeParametersInLocalFunction.kt")
        public void testTypeParametersInLocalFunction() throws Exception {
            runTest("compiler/testData/codegen/box/functions/typeParametersInLocalFunction.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/functions/bigArity")
        @TestDataPath("$PROJECT_ROOT")
        public class BigArity extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBigArity() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/bigArity"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("callFromJava.kt")
            public void testCallFromJava() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/callFromJava.kt");
            }

            @Test
            @TestMetadata("callFunViaVararg.kt")
            public void testCallFunViaVararg() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/callFunViaVararg.kt");
            }

            @Test
            @TestMetadata("callWithIncorrectNumberOfArguments.kt")
            public void testCallWithIncorrectNumberOfArguments() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/callWithIncorrectNumberOfArguments.kt");
            }

            @Test
            @TestMetadata("function255.kt")
            public void testFunction255() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/function255.kt");
            }

            @Test
            @TestMetadata("instanceOfCallableReference.kt")
            public void testInstanceOfCallableReference() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/instanceOfCallableReference.kt");
            }

            @Test
            @TestMetadata("invokeCallableReference.kt")
            public void testInvokeCallableReference() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/invokeCallableReference.kt");
            }

            @Test
            @TestMetadata("invokeLambda.kt")
            public void testInvokeLambda() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/invokeLambda.kt");
            }

            @Test
            @TestMetadata("invokeMemberCallableReference.kt")
            public void testInvokeMemberCallableReference() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/invokeMemberCallableReference.kt");
            }

            @Test
            @TestMetadata("javaLambda.kt")
            public void testJavaLambda() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/javaLambda.kt");
            }

            @Test
            @TestMetadata("nestedBigArityFunCalls.kt")
            public void testNestedBigArityFunCalls() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/nestedBigArityFunCalls.kt");
            }

            @Test
            @TestMetadata("subclass.kt")
            public void testSubclass() throws Exception {
                runTest("compiler/testData/codegen/box/functions/bigArity/subclass.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/functions/functionExpression")
        @TestDataPath("$PROJECT_ROOT")
        public class FunctionExpression extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFunctionExpression() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/functionExpression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("functionExpression.kt")
            public void testFunctionExpression() throws Exception {
                runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpression.kt");
            }

            @Test
            @TestMetadata("functionExpressionWithThisReference.kt")
            public void testFunctionExpressionWithThisReference() throws Exception {
                runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpressionWithThisReference.kt");
            }

            @Test
            @TestMetadata("functionExpressionWithThisReferenceNI.kt")
            public void testFunctionExpressionWithThisReferenceNI() throws Exception {
                runTest("compiler/testData/codegen/box/functions/functionExpression/functionExpressionWithThisReferenceNI.kt");
            }

            @Test
            @TestMetadata("functionLiteralExpression.kt")
            public void testFunctionLiteralExpression() throws Exception {
                runTest("compiler/testData/codegen/box/functions/functionExpression/functionLiteralExpression.kt");
            }

            @Test
            @TestMetadata("insideGenericLambda.kt")
            public void testInsideGenericLambda() throws Exception {
                runTest("compiler/testData/codegen/box/functions/functionExpression/insideGenericLambda.kt");
            }

            @Test
            @TestMetadata("underscoreParameters.kt")
            public void testUnderscoreParameters() throws Exception {
                runTest("compiler/testData/codegen/box/functions/functionExpression/underscoreParameters.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/functions/invoke")
        @TestDataPath("$PROJECT_ROOT")
        public class Invoke extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInInvoke() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/invoke"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("castFunctionToExtension.kt")
            public void testCastFunctionToExtension() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/castFunctionToExtension.kt");
            }

            @Test
            @TestMetadata("extensionInvokeOnExpr.kt")
            public void testExtensionInvokeOnExpr() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/extensionInvokeOnExpr.kt");
            }

            @Test
            @TestMetadata("implicitInvokeInCompanionObjectWithFunctionalArgument.kt")
            public void testImplicitInvokeInCompanionObjectWithFunctionalArgument() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeInCompanionObjectWithFunctionalArgument.kt");
            }

            @Test
            @TestMetadata("implicitInvokeWithFunctionLiteralArgument.kt")
            public void testImplicitInvokeWithFunctionLiteralArgument() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/implicitInvokeWithFunctionLiteralArgument.kt");
            }

            @Test
            @TestMetadata("invoke.kt")
            public void testInvoke() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/invoke.kt");
            }

            @Test
            @TestMetadata("invokeOnExprByConvention.kt")
            public void testInvokeOnExprByConvention() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/invokeOnExprByConvention.kt");
            }

            @Test
            @TestMetadata("invokeOnSyntheticProperty.kt")
            public void testInvokeOnSyntheticProperty() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/invokeOnSyntheticProperty.kt");
            }

            @Test
            @TestMetadata("kt3189.kt")
            public void testKt3189() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3189.kt");
            }

            @Test
            @TestMetadata("kt3190.kt")
            public void testKt3190() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3190.kt");
            }

            @Test
            @TestMetadata("kt3297.kt")
            public void testKt3297() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3297.kt");
            }

            @Test
            @TestMetadata("kt3450getAndInvoke.kt")
            public void testKt3450getAndInvoke() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3450getAndInvoke.kt");
            }

            @Test
            @TestMetadata("kt3631invokeOnString.kt")
            public void testKt3631invokeOnString() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3631invokeOnString.kt");
            }

            @Test
            @TestMetadata("kt3772.kt")
            public void testKt3772() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3772.kt");
            }

            @Test
            @TestMetadata("kt3821invokeOnThis.kt")
            public void testKt3821invokeOnThis() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3821invokeOnThis.kt");
            }

            @Test
            @TestMetadata("kt3822invokeOnThis.kt")
            public void testKt3822invokeOnThis() throws Exception {
                runTest("compiler/testData/codegen/box/functions/invoke/kt3822invokeOnThis.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/functions/localFunctions")
        @TestDataPath("$PROJECT_ROOT")
        public class LocalFunctions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInLocalFunctions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/functions/localFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boundTypeParameterInSupertype.kt")
            public void testBoundTypeParameterInSupertype() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/boundTypeParameterInSupertype.kt");
            }

            @Test
            @TestMetadata("boundTypeParameterInVararg.kt")
            public void testBoundTypeParameterInVararg() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/boundTypeParameterInVararg.kt");
            }

            @Test
            @TestMetadata("callBetweenLocalFunctions.kt")
            public void testCallBetweenLocalFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/callBetweenLocalFunctions.kt");
            }

            @Test
            @TestMetadata("callInlineLocalInLambda.kt")
            public void testCallInlineLocalInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/callInlineLocalInLambda.kt");
            }

            @Test
            @TestMetadata("captureUpperBoundedTypeParameter.kt")
            public void testCaptureUpperBoundedTypeParameter() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/captureUpperBoundedTypeParameter.kt");
            }

            @Test
            @TestMetadata("definedWithinLambda.kt")
            public void testDefinedWithinLambda() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambda.kt");
            }

            @Test
            @TestMetadata("definedWithinLambdaInnerUsage1.kt")
            public void testDefinedWithinLambdaInnerUsage1() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage1.kt");
            }

            @Test
            @TestMetadata("definedWithinLambdaInnerUsage2.kt")
            public void testDefinedWithinLambdaInnerUsage2() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/definedWithinLambdaInnerUsage2.kt");
            }

            @Test
            @TestMetadata("kt2895.kt")
            public void testKt2895() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt2895.kt");
            }

            @Test
            @TestMetadata("kt3308.kt")
            public void testKt3308() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt3308.kt");
            }

            @Test
            @TestMetadata("kt3978.kt")
            public void testKt3978() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt3978.kt");
            }

            @Test
            @TestMetadata("kt3978_2.kt")
            public void testKt3978_2() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt3978_2.kt");
            }

            @Test
            @TestMetadata("kt4119.kt")
            public void testKt4119() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119.kt");
            }

            @Test
            @TestMetadata("kt4119_2.kt")
            public void testKt4119_2() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt4119_2.kt");
            }

            @Test
            @TestMetadata("kt4514.kt")
            public void testKt4514() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt4514.kt");
            }

            @Test
            @TestMetadata("kt4777.kt")
            public void testKt4777() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt4777.kt");
            }

            @Test
            @TestMetadata("kt4783.kt")
            public void testKt4783() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt4783.kt");
            }

            @Test
            @TestMetadata("kt4784.kt")
            public void testKt4784() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt4784.kt");
            }

            @Test
            @TestMetadata("kt4989.kt")
            public void testKt4989() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/kt4989.kt");
            }

            @Test
            @TestMetadata("localExtensionOnNullableParameter.kt")
            public void testLocalExtensionOnNullableParameter() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/localExtensionOnNullableParameter.kt");
            }

            @Test
            @TestMetadata("localFunctionInConstructor.kt")
            public void testLocalFunctionInConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionInConstructor.kt");
            }

            @Test
            @TestMetadata("localFunctionVsLocalVariable.kt")
            public void testLocalFunctionVsLocalVariable() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/localFunctionVsLocalVariable.kt");
            }

            @Test
            @TestMetadata("nameClash.kt")
            public void testNameClash() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/nameClash.kt");
            }

            @Test
            @TestMetadata("nameClashAcrossDifferentContainers.kt")
            public void testNameClashAcrossDifferentContainers() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/nameClashAcrossDifferentContainers.kt");
            }

            @Test
            @TestMetadata("overloadedLocalFunWithoutClosure.kt")
            public void testOverloadedLocalFunWithoutClosure() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunWithoutClosure.kt");
            }

            @Test
            @TestMetadata("overloadedLocalFunction.kt")
            public void testOverloadedLocalFunction() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction.kt");
            }

            @Test
            @TestMetadata("overloadedLocalFunction1.kt")
            public void testOverloadedLocalFunction1() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction1.kt");
            }

            @Test
            @TestMetadata("overloadedLocalFunction2.kt")
            public void testOverloadedLocalFunction2() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction2.kt");
            }

            @Test
            @TestMetadata("overloadedLocalFunction3.kt")
            public void testOverloadedLocalFunction3() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/overloadedLocalFunction3.kt");
            }

            @Test
            @TestMetadata("parameterAsDefaultValue.kt")
            public void testParameterAsDefaultValue() throws Exception {
                runTest("compiler/testData/codegen/box/functions/localFunctions/parameterAsDefaultValue.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/hashPMap")
    @TestDataPath("$PROJECT_ROOT")
    public class HashPMap extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInHashPMap() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/hashPMap"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("empty.kt")
        public void testEmpty() throws Exception {
            runTest("compiler/testData/codegen/box/hashPMap/empty.kt");
        }

        @Test
        @TestMetadata("manyNumbers.kt")
        public void testManyNumbers() throws Exception {
            runTest("compiler/testData/codegen/box/hashPMap/manyNumbers.kt");
        }

        @Test
        @TestMetadata("rewriteWithDifferent.kt")
        public void testRewriteWithDifferent() throws Exception {
            runTest("compiler/testData/codegen/box/hashPMap/rewriteWithDifferent.kt");
        }

        @Test
        @TestMetadata("rewriteWithEqual.kt")
        public void testRewriteWithEqual() throws Exception {
            runTest("compiler/testData/codegen/box/hashPMap/rewriteWithEqual.kt");
        }

        @Test
        @TestMetadata("simplePlusGet.kt")
        public void testSimplePlusGet() throws Exception {
            runTest("compiler/testData/codegen/box/hashPMap/simplePlusGet.kt");
        }

        @Test
        @TestMetadata("simplePlusMinus.kt")
        public void testSimplePlusMinus() throws Exception {
            runTest("compiler/testData/codegen/box/hashPMap/simplePlusMinus.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ieee754")
    @TestDataPath("$PROJECT_ROOT")
    public class Ieee754 extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInIeee754() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ieee754"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anyToReal.kt")
        public void testAnyToReal() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/anyToReal.kt");
        }

        @Test
        @TestMetadata("asComparableToDouble.kt")
        public void testAsComparableToDouble() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble.kt");
        }

        @Test
        @TestMetadata("asComparableToDouble_properIeeeComparisons.kt")
        public void testAsComparableToDouble_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/asComparableToDouble_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("comparableToTWithT_properIeeeComparisons.kt")
        public void testComparableToTWithT_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/comparableToTWithT_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("comparableTypeCast.kt")
        public void testComparableTypeCast() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/comparableTypeCast.kt");
        }

        @Test
        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/dataClass.kt");
        }

        @Test
        @TestMetadata("differentTypesComparison.kt")
        public void testDifferentTypesComparison() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/differentTypesComparison.kt");
        }

        @Test
        @TestMetadata("equalsDouble.kt")
        public void testEqualsDouble() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsDouble.kt");
        }

        @Test
        @TestMetadata("equalsDouble_properIeeeComparisons.kt")
        public void testEqualsDouble_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsDouble_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("equalsFloat.kt")
        public void testEqualsFloat() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsFloat.kt");
        }

        @Test
        @TestMetadata("equalsFloat_properIeeeComparisons.kt")
        public void testEqualsFloat_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsFloat_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("equalsNaN.kt")
        public void testEqualsNaN() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsNaN.kt");
        }

        @Test
        @TestMetadata("equalsNaN_properIeeeComparisons.kt")
        public void testEqualsNaN_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsNaN_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("equalsNullableDouble.kt")
        public void testEqualsNullableDouble() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble.kt");
        }

        @Test
        @TestMetadata("equalsNullableDouble_properIeeeComparisons.kt")
        public void testEqualsNullableDouble_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsNullableDouble_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("equalsNullableFloat.kt")
        public void testEqualsNullableFloat() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat.kt");
        }

        @Test
        @TestMetadata("equalsNullableFloat_properIeeeComparisons.kt")
        public void testEqualsNullableFloat_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/equalsNullableFloat_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("explicitCompareCall.kt")
        public void testExplicitCompareCall() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/explicitCompareCall.kt");
        }

        @Test
        @TestMetadata("explicitEqualsCall.kt")
        public void testExplicitEqualsCall() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/explicitEqualsCall.kt");
        }

        @Test
        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/generic.kt");
        }

        @Test
        @TestMetadata("greaterDouble.kt")
        public void testGreaterDouble() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/greaterDouble.kt");
        }

        @Test
        @TestMetadata("greaterDouble_properIeeeComparisons.kt")
        public void testGreaterDouble_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/greaterDouble_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("greaterFloat.kt")
        public void testGreaterFloat() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/greaterFloat.kt");
        }

        @Test
        @TestMetadata("greaterFloat_properIeeeComparisons.kt")
        public void testGreaterFloat_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/greaterFloat_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/inline.kt");
        }

        @Test
        @TestMetadata("lessDouble.kt")
        public void testLessDouble() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/lessDouble.kt");
        }

        @Test
        @TestMetadata("lessDouble_properIeeeAndNewInference.kt")
        public void testLessDouble_properIeeeAndNewInference() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/lessDouble_properIeeeAndNewInference.kt");
        }

        @Test
        @TestMetadata("lessDouble_properIeeeComparisons.kt")
        public void testLessDouble_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/lessDouble_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("lessFloat.kt")
        public void testLessFloat() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/lessFloat.kt");
        }

        @Test
        @TestMetadata("lessFloat_properIeeeComparisons.kt")
        public void testLessFloat_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/lessFloat_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("nullableAnyToReal.kt")
        public void testNullableAnyToReal() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/nullableAnyToReal.kt");
        }

        @Test
        @TestMetadata("nullableDoubleEquals.kt")
        public void testNullableDoubleEquals() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEquals.kt");
        }

        @Test
        @TestMetadata("nullableDoubleEqualsLV13.kt")
        public void testNullableDoubleEqualsLV13() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/nullableDoubleEqualsLV13.kt");
        }

        @Test
        @TestMetadata("nullableDoubleNotEquals.kt")
        public void testNullableDoubleNotEquals() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/nullableDoubleNotEquals.kt");
        }

        @Test
        @TestMetadata("nullableFloatEquals.kt")
        public void testNullableFloatEquals() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/nullableFloatEquals.kt");
        }

        @Test
        @TestMetadata("nullableFloatNotEquals.kt")
        public void testNullableFloatNotEquals() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/nullableFloatNotEquals.kt");
        }

        @Test
        @TestMetadata("nullableIntEquals.kt")
        public void testNullableIntEquals() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/nullableIntEquals.kt");
        }

        @Test
        @TestMetadata("safeCall.kt")
        public void testSafeCall() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/safeCall.kt");
        }

        @Test
        @TestMetadata("smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt")
        public void testSmartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/smartCastOnWhenSubjectAfterCheckInBranch_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("smartCastToDifferentTypes.kt")
        public void testSmartCastToDifferentTypes() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypes.kt");
        }

        @Test
        @TestMetadata("smartCastToDifferentTypesWithNumericPromotion.kt")
        public void testSmartCastToDifferentTypesWithNumericPromotion() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypesWithNumericPromotion.kt");
        }

        @Test
        @TestMetadata("smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt")
        public void testSmartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypesWithNumericPromotion_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("smartCastToDifferentTypes_properIeeeComparisons.kt")
        public void testSmartCastToDifferentTypes_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/smartCastToDifferentTypes_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("smartCastToDoubleAndComparableToDouble.kt")
        public void testSmartCastToDoubleAndComparableToDouble() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/smartCastToDoubleAndComparableToDouble.kt");
        }

        @Test
        @TestMetadata("smartCastToInt.kt")
        public void testSmartCastToInt() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/smartCastToInt.kt");
        }

        @Test
        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/when.kt");
        }

        @Test
        @TestMetadata("whenNoSubject.kt")
        public void testWhenNoSubject() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/whenNoSubject.kt");
        }

        @Test
        @TestMetadata("whenNoSubject_properIeeeComparisons.kt")
        public void testWhenNoSubject_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/whenNoSubject_properIeeeComparisons.kt");
        }

        @Test
        @TestMetadata("whenNullableSmartCast.kt")
        public void testWhenNullableSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/whenNullableSmartCast.kt");
        }

        @Test
        @TestMetadata("when_properIeeeComparisons.kt")
        public void testWhen_properIeeeComparisons() throws Exception {
            runTest("compiler/testData/codegen/box/ieee754/when_properIeeeComparisons.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/increment")
    @TestDataPath("$PROJECT_ROOT")
    public class Increment extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInIncrement() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/increment"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("argumentWithSideEffects.kt")
        public void testArgumentWithSideEffects() throws Exception {
            runTest("compiler/testData/codegen/box/increment/argumentWithSideEffects.kt");
        }

        @Test
        @TestMetadata("arrayElement.kt")
        public void testArrayElement() throws Exception {
            runTest("compiler/testData/codegen/box/increment/arrayElement.kt");
        }

        @Test
        @TestMetadata("assignPlusOnSmartCast.kt")
        public void testAssignPlusOnSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/increment/assignPlusOnSmartCast.kt");
        }

        @Test
        @TestMetadata("augmentedAssignmentWithComplexRhs.kt")
        public void testAugmentedAssignmentWithComplexRhs() throws Exception {
            runTest("compiler/testData/codegen/box/increment/augmentedAssignmentWithComplexRhs.kt");
        }

        @Test
        @TestMetadata("classNaryGetSet.kt")
        public void testClassNaryGetSet() throws Exception {
            runTest("compiler/testData/codegen/box/increment/classNaryGetSet.kt");
        }

        @Test
        @TestMetadata("classVarargGetSet.kt")
        public void testClassVarargGetSet() throws Exception {
            runTest("compiler/testData/codegen/box/increment/classVarargGetSet.kt");
        }

        @Test
        @TestMetadata("classVarargGetSetEvaluationOrder.kt")
        public void testClassVarargGetSetEvaluationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/increment/classVarargGetSetEvaluationOrder.kt");
        }

        @Test
        @TestMetadata("classWithGetSet.kt")
        public void testClassWithGetSet() throws Exception {
            runTest("compiler/testData/codegen/box/increment/classWithGetSet.kt");
        }

        @Test
        @TestMetadata("extOnLong.kt")
        public void testExtOnLong() throws Exception {
            runTest("compiler/testData/codegen/box/increment/extOnLong.kt");
        }

        @Test
        @TestMetadata("genericClassWithGetSet.kt")
        public void testGenericClassWithGetSet() throws Exception {
            runTest("compiler/testData/codegen/box/increment/genericClassWithGetSet.kt");
        }

        @Test
        @TestMetadata("kt36956.kt")
        public void testKt36956() throws Exception {
            runTest("compiler/testData/codegen/box/increment/kt36956.kt");
        }

        @Test
        @TestMetadata("memberExtOnLong.kt")
        public void testMemberExtOnLong() throws Exception {
            runTest("compiler/testData/codegen/box/increment/memberExtOnLong.kt");
        }

        @Test
        @TestMetadata("mutableListElement.kt")
        public void testMutableListElement() throws Exception {
            runTest("compiler/testData/codegen/box/increment/mutableListElement.kt");
        }

        @Test
        @TestMetadata("nullable.kt")
        public void testNullable() throws Exception {
            runTest("compiler/testData/codegen/box/increment/nullable.kt");
        }

        @Test
        @TestMetadata("postfixIncrementDoubleSmartCast.kt")
        public void testPostfixIncrementDoubleSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/increment/postfixIncrementDoubleSmartCast.kt");
        }

        @Test
        @TestMetadata("postfixIncrementOnClass.kt")
        public void testPostfixIncrementOnClass() throws Exception {
            runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClass.kt");
        }

        @Test
        @TestMetadata("postfixIncrementOnClassSmartCast.kt")
        public void testPostfixIncrementOnClassSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/increment/postfixIncrementOnClassSmartCast.kt");
        }

        @Test
        @TestMetadata("postfixIncrementOnShortSmartCast.kt")
        public void testPostfixIncrementOnShortSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/increment/postfixIncrementOnShortSmartCast.kt");
        }

        @Test
        @TestMetadata("postfixIncrementOnSmartCast.kt")
        public void testPostfixIncrementOnSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/increment/postfixIncrementOnSmartCast.kt");
        }

        @Test
        @TestMetadata("postfixNullableClassIncrement.kt")
        public void testPostfixNullableClassIncrement() throws Exception {
            runTest("compiler/testData/codegen/box/increment/postfixNullableClassIncrement.kt");
        }

        @Test
        @TestMetadata("postfixNullableIncrement.kt")
        public void testPostfixNullableIncrement() throws Exception {
            runTest("compiler/testData/codegen/box/increment/postfixNullableIncrement.kt");
        }

        @Test
        @TestMetadata("prefixIncrementOnClass.kt")
        public void testPrefixIncrementOnClass() throws Exception {
            runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClass.kt");
        }

        @Test
        @TestMetadata("prefixIncrementOnClassSmartCast.kt")
        public void testPrefixIncrementOnClassSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/increment/prefixIncrementOnClassSmartCast.kt");
        }

        @Test
        @TestMetadata("prefixIncrementOnSmartCast.kt")
        public void testPrefixIncrementOnSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/increment/prefixIncrementOnSmartCast.kt");
        }

        @Test
        @TestMetadata("prefixNullableClassIncrement.kt")
        public void testPrefixNullableClassIncrement() throws Exception {
            runTest("compiler/testData/codegen/box/increment/prefixNullableClassIncrement.kt");
        }

        @Test
        @TestMetadata("prefixNullableIncrement.kt")
        public void testPrefixNullableIncrement() throws Exception {
            runTest("compiler/testData/codegen/box/increment/prefixNullableIncrement.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInInference() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("approximateNonTopLevelCapturedTypes.kt")
        public void testApproximateNonTopLevelCapturedTypes() throws Exception {
            runTest("compiler/testData/codegen/box/inference/approximateNonTopLevelCapturedTypes.kt");
        }

        @Test
        @TestMetadata("builderInference.kt")
        public void testBuilderInference() throws Exception {
            runTest("compiler/testData/codegen/box/inference/builderInference.kt");
        }

        @Test
        @TestMetadata("builderInferenceLeakingVariable.kt")
        public void testBuilderInferenceLeakingVariable() throws Exception {
            runTest("compiler/testData/codegen/box/inference/builderInferenceLeakingVariable.kt");
        }

        @Test
        @TestMetadata("capturedStarProjection.kt")
        public void testCapturedStarProjection() throws Exception {
            runTest("compiler/testData/codegen/box/inference/capturedStarProjection.kt");
        }

        @Test
        @TestMetadata("capturedTypesSubstitutionIntoAbbreviation.kt")
        public void testCapturedTypesSubstitutionIntoAbbreviation() throws Exception {
            runTest("compiler/testData/codegen/box/inference/capturedTypesSubstitutionIntoAbbreviation.kt");
        }

        @Test
        @TestMetadata("coercionToUnitForLambdaReturnTypeWithFlexibleConstraint.kt")
        public void testCoercionToUnitForLambdaReturnTypeWithFlexibleConstraint() throws Exception {
            runTest("compiler/testData/codegen/box/inference/coercionToUnitForLambdaReturnTypeWithFlexibleConstraint.kt");
        }

        @Test
        @TestMetadata("coercionToUnitWithLastLambdaExpression.kt")
        public void testCoercionToUnitWithLastLambdaExpression() throws Exception {
            runTest("compiler/testData/codegen/box/inference/coercionToUnitWithLastLambdaExpression.kt");
        }

        @Test
        @TestMetadata("coerctionToUnitForLastExpressionWithStarProjection.kt")
        public void testCoerctionToUnitForLastExpressionWithStarProjection() throws Exception {
            runTest("compiler/testData/codegen/box/inference/coerctionToUnitForLastExpressionWithStarProjection.kt");
        }

        @Test
        @TestMetadata("earlyReturnInsideCrossinlineLambda.kt")
        public void testEarlyReturnInsideCrossinlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/inference/earlyReturnInsideCrossinlineLambda.kt");
        }

        @Test
        @TestMetadata("inferenceWithTypeVariableInsideCapturedType.kt")
        public void testInferenceWithTypeVariableInsideCapturedType() throws Exception {
            runTest("compiler/testData/codegen/box/inference/inferenceWithTypeVariableInsideCapturedType.kt");
        }

        @Test
        @TestMetadata("integerLiteralTypeInLamdaReturnType.kt")
        public void testIntegerLiteralTypeInLamdaReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/inference/integerLiteralTypeInLamdaReturnType.kt");
        }

        @Test
        @TestMetadata("kt10822.kt")
        public void testKt10822() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt10822.kt");
        }

        @Test
        @TestMetadata("kt26345.kt")
        public void testKt26345() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt26345.kt");
        }

        @Test
        @TestMetadata("kt32429.kt")
        public void testKt32429() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt32429.kt");
        }

        @Test
        @TestMetadata("kt35684.kt")
        public void testKt35684() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt35684.kt");
        }

        @Test
        @TestMetadata("kt36446.kt")
        public void testKt36446() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt36446.kt");
        }

        @Test
        @TestMetadata("kt38664.kt")
        public void testKt38664() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt38664.kt");
        }

        @Test
        @TestMetadata("kt39824.kt")
        public void testKt39824() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt39824.kt");
        }

        @Test
        @TestMetadata("kt42130.kt")
        public void testKt42130() throws Exception {
            runTest("compiler/testData/codegen/box/inference/kt42130.kt");
        }

        @Test
        @TestMetadata("lambdasWithExtensionFunctionType.kt")
        public void testLambdasWithExtensionFunctionType() throws Exception {
            runTest("compiler/testData/codegen/box/inference/lambdasWithExtensionFunctionType.kt");
        }

        @Test
        @TestMetadata("lastExpressionOfLambdaWithNothingConstraint.kt")
        public void testLastExpressionOfLambdaWithNothingConstraint() throws Exception {
            runTest("compiler/testData/codegen/box/inference/lastExpressionOfLambdaWithNothingConstraint.kt");
        }

        @Test
        @TestMetadata("manyFlexibleTypeParametersFromJavaAndConversions.kt")
        public void testManyFlexibleTypeParametersFromJavaAndConversions() throws Exception {
            runTest("compiler/testData/codegen/box/inference/manyFlexibleTypeParametersFromJavaAndConversions.kt");
        }

        @Test
        @TestMetadata("mapCollectChainWithNullResult.kt")
        public void testMapCollectChainWithNullResult() throws Exception {
            runTest("compiler/testData/codegen/box/inference/mapCollectChainWithNullResult.kt");
        }

        @Test
        @TestMetadata("noCoercionToUniForNullableLambdaReturnType.kt")
        public void testNoCoercionToUniForNullableLambdaReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/inference/noCoercionToUniForNullableLambdaReturnType.kt");
        }

        @Test
        @TestMetadata("noCoercionToUnitWithEqualityConstraintForNullableReturnType.kt")
        public void testNoCoercionToUnitWithEqualityConstraintForNullableReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/inference/noCoercionToUnitWithEqualityConstraintForNullableReturnType.kt");
        }

        @Test
        @TestMetadata("noNothingValueInsideSpecialCall.kt")
        public void testNoNothingValueInsideSpecialCall() throws Exception {
            runTest("compiler/testData/codegen/box/inference/noNothingValueInsideSpecialCall.kt");
        }

        @Test
        @TestMetadata("plusAssignInsideLambda.kt")
        public void testPlusAssignInsideLambda() throws Exception {
            runTest("compiler/testData/codegen/box/inference/plusAssignInsideLambda.kt");
        }

        @Test
        @TestMetadata("recursiveConstraintInsideTypeArgumentWithStarProjection.kt")
        public void testRecursiveConstraintInsideTypeArgumentWithStarProjection() throws Exception {
            runTest("compiler/testData/codegen/box/inference/recursiveConstraintInsideTypeArgumentWithStarProjection.kt");
        }

        @Test
        @TestMetadata("referenceToCatchParameterFromLambdaExpression.kt")
        public void testReferenceToCatchParameterFromLambdaExpression() throws Exception {
            runTest("compiler/testData/codegen/box/inference/referenceToCatchParameterFromLambdaExpression.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferences.kt")
        public void testSpecialCallsWithCallableReferences() throws Exception {
            runTest("compiler/testData/codegen/box/inference/specialCallsWithCallableReferences.kt");
        }

        @Test
        @TestMetadata("subtypingOfIntersectionIltInsideFlexible.kt")
        public void testSubtypingOfIntersectionIltInsideFlexible() throws Exception {
            runTest("compiler/testData/codegen/box/inference/subtypingOfIntersectionIltInsideFlexible.kt");
        }

        @Test
        @TestMetadata("suspendExtensionRecevierFromConstraint.kt")
        public void testSuspendExtensionRecevierFromConstraint() throws Exception {
            runTest("compiler/testData/codegen/box/inference/suspendExtensionRecevierFromConstraint.kt");
        }

        @Test
        @TestMetadata("unsafeVarianceCodegen.kt")
        public void testUnsafeVarianceCodegen() throws Exception {
            runTest("compiler/testData/codegen/box/inference/unsafeVarianceCodegen.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inference/builderInference")
        @TestDataPath("$PROJECT_ROOT")
        public class BuilderInference extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBuilderInference() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inference/builderInference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("callableReferenceAndCoercionToUnit.kt")
            public void testCallableReferenceAndCoercionToUnit() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/callableReferenceAndCoercionToUnit.kt");
            }

            @Test
            @TestMetadata("kt41164.kt")
            public void testKt41164() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/kt41164.kt");
            }

            @Test
            @TestMetadata("lackOfNullCheckOnNullableInsideBuild.kt")
            public void testLackOfNullCheckOnNullableInsideBuild() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/lackOfNullCheckOnNullableInsideBuild.kt");
            }

            @Test
            @TestMetadata("specialCallsWithCallableReferences.kt")
            public void testSpecialCallsWithCallableReferences() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithCallableReferences.kt");
            }

            @Test
            @TestMetadata("specialCallsWithCallableReferencesDontCareTypeInBlockExpression.kt")
            public void testSpecialCallsWithCallableReferencesDontCareTypeInBlockExpression() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithCallableReferencesDontCareTypeInBlockExpression.kt");
            }

            @Test
            @TestMetadata("specialCallsWithCallableReferencesErrorType.kt")
            public void testSpecialCallsWithCallableReferencesErrorType() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithCallableReferencesErrorType.kt");
            }

            @Test
            @TestMetadata("specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt")
            public void testSpecialCallsWithCallableReferencesNonStrictOnlyInputTypes() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt");
            }

            @Test
            @TestMetadata("specialCallsWithLambdas.kt")
            public void testSpecialCallsWithLambdas() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/specialCallsWithLambdas.kt");
            }

            @Test
            @TestMetadata("substituteStubTypeIntoCR.kt")
            public void testSubstituteStubTypeIntoCR() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/substituteStubTypeIntoCR.kt");
            }

            @Test
            @TestMetadata("substituteStubTypeIntolambdaParameterDescriptor.kt")
            public void testSubstituteStubTypeIntolambdaParameterDescriptor() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/substituteStubTypeIntolambdaParameterDescriptor.kt");
            }

            @Test
            @TestMetadata("substituteTypeVariableIntolambdaParameterDescriptor.kt")
            public void testSubstituteTypeVariableIntolambdaParameterDescriptor() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/substituteTypeVariableIntolambdaParameterDescriptor.kt");
            }

            @Test
            @TestMetadata("substitutelambdaExtensionReceiverType.kt")
            public void testSubstitutelambdaExtensionReceiverType() throws Exception {
                runTest("compiler/testData/codegen/box/inference/builderInference/substitutelambdaExtensionReceiverType.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInInlineClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("annotatedMemberExtensionProperty.kt")
        public void testAnnotatedMemberExtensionProperty() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/annotatedMemberExtensionProperty.kt");
        }

        @Test
        @TestMetadata("anySuperCall.kt")
        public void testAnySuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/anySuperCall.kt");
        }

        @Test
        @TestMetadata("boundCallableReferencePassedToInlineFunction.kt")
        public void testBoundCallableReferencePassedToInlineFunction() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/boundCallableReferencePassedToInlineFunction.kt");
        }

        @Test
        @TestMetadata("boxImplDoesNotExecuteInitBlock.kt")
        public void testBoxImplDoesNotExecuteInitBlock() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/boxImplDoesNotExecuteInitBlock.kt");
        }

        @Test
        @TestMetadata("boxNullableValueOfInlineClassWithNonNullUnderlyingType.kt")
        public void testBoxNullableValueOfInlineClassWithNonNullUnderlyingType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithNonNullUnderlyingType.kt");
        }

        @Test
        @TestMetadata("boxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt")
        public void testBoxNullableValueOfInlineClassWithPrimitiveUnderlyingType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/boxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt");
        }

        @Test
        @TestMetadata("boxResultInlineClassOfConstructorCall.kt")
        public void testBoxResultInlineClassOfConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/boxResultInlineClassOfConstructorCall.kt");
        }

        @Test
        @TestMetadata("boxUnboxInlineClassesWithOperatorsGetSet.kt")
        public void testBoxUnboxInlineClassesWithOperatorsGetSet() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxInlineClassesWithOperatorsGetSet.kt");
        }

        @Test
        @TestMetadata("boxUnboxOfInlineClassForCapturedVars.kt")
        public void testBoxUnboxOfInlineClassForCapturedVars() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/boxUnboxOfInlineClassForCapturedVars.kt");
        }

        @Test
        @TestMetadata("bridgeForFunctionReturningInlineClass.kt")
        public void testBridgeForFunctionReturningInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/bridgeForFunctionReturningInlineClass.kt");
        }

        @Test
        @TestMetadata("bridgeGenerationWithInlineClassOverAny.kt")
        public void testBridgeGenerationWithInlineClassOverAny() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/bridgeGenerationWithInlineClassOverAny.kt");
        }

        @Test
        @TestMetadata("bridgesWhenInlineClassImplementsGenericInterface.kt")
        public void testBridgesWhenInlineClassImplementsGenericInterface() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/bridgesWhenInlineClassImplementsGenericInterface.kt");
        }

        @Test
        @TestMetadata("callComputablePropertyInsideInlineClass.kt")
        public void testCallComputablePropertyInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/callComputablePropertyInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("callSpecializedEqualsViaReflection.kt")
        public void testCallSpecializedEqualsViaReflection() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/callSpecializedEqualsViaReflection.kt");
        }

        @Test
        @TestMetadata("callSpeciallyOverriddenPropertyOfInlineClass.kt")
        public void testCallSpeciallyOverriddenPropertyOfInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/callSpeciallyOverriddenPropertyOfInlineClass.kt");
        }

        @Test
        @TestMetadata("callableReferencesWithInlineClasses.kt")
        public void testCallableReferencesWithInlineClasses() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/callableReferencesWithInlineClasses.kt");
        }

        @Test
        @TestMetadata("castInsideWhenExpression.kt")
        public void testCastInsideWhenExpression() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/castInsideWhenExpression.kt");
        }

        @Test
        @TestMetadata("checkBoxUnboxOfArgumentsOnInlinedFunctions.kt")
        public void testCheckBoxUnboxOfArgumentsOnInlinedFunctions() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxUnboxOfArgumentsOnInlinedFunctions.kt");
        }

        @Test
        @TestMetadata("checkBoxingAfterAssertionOperator.kt")
        public void testCheckBoxingAfterAssertionOperator() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingAfterAssertionOperator.kt");
        }

        @Test
        @TestMetadata("checkBoxingForComplexClassHierarchy.kt")
        public void testCheckBoxingForComplexClassHierarchy() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForComplexClassHierarchy.kt");
        }

        @Test
        @TestMetadata("checkBoxingForNonLocalAndLabeledReturns.kt")
        public void testCheckBoxingForNonLocalAndLabeledReturns() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingForNonLocalAndLabeledReturns.kt");
        }

        @Test
        @TestMetadata("checkBoxingFromReturnTypeForInlineClasses.kt")
        public void testCheckBoxingFromReturnTypeForInlineClasses() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingFromReturnTypeForInlineClasses.kt");
        }

        @Test
        @TestMetadata("checkBoxingOnFunctionCalls.kt")
        public void testCheckBoxingOnFunctionCalls() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnFunctionCalls.kt");
        }

        @Test
        @TestMetadata("checkBoxingOnLocalVariableAssignments.kt")
        public void testCheckBoxingOnLocalVariableAssignments() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingOnLocalVariableAssignments.kt");
        }

        @Test
        @TestMetadata("checkBoxingUnboxingForInheritedTypeSpecializedFunctions.kt")
        public void testCheckBoxingUnboxingForInheritedTypeSpecializedFunctions() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkBoxingUnboxingForInheritedTypeSpecializedFunctions.kt");
        }

        @Test
        @TestMetadata("checkCallingMembersInsideInlineClass.kt")
        public void testCheckCallingMembersInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkCallingMembersInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("checkCastToInlineClass.kt")
        public void testCheckCastToInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkCastToInlineClass.kt");
        }

        @Test
        @TestMetadata("checkForInstanceOfInlineClass.kt")
        public void testCheckForInstanceOfInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkForInstanceOfInlineClass.kt");
        }

        @Test
        @TestMetadata("checkLambdaWithInlineClassesInFunctionalType.kt")
        public void testCheckLambdaWithInlineClassesInFunctionalType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkLambdaWithInlineClassesInFunctionalType.kt");
        }

        @Test
        @TestMetadata("checkUnboxingResultFromTypeVariable.kt")
        public void testCheckUnboxingResultFromTypeVariable() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/checkUnboxingResultFromTypeVariable.kt");
        }

        @Test
        @TestMetadata("classLiteralOnInlineClass.kt")
        public void testClassLiteralOnInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/classLiteralOnInlineClass.kt");
        }

        @Test
        @TestMetadata("computablePropertyInsideInlineClass.kt")
        public void testComputablePropertyInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/computablePropertyInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("conformToComparableAndCallInterfaceMethod.kt")
        public void testConformToComparableAndCallInterfaceMethod() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/conformToComparableAndCallInterfaceMethod.kt");
        }

        @Test
        @TestMetadata("constructorImplVisibility.kt")
        public void testConstructorImplVisibility() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/constructorImplVisibility.kt");
        }

        @Test
        @TestMetadata("correctBoxingForBranchExpressions.kt")
        public void testCorrectBoxingForBranchExpressions() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/correctBoxingForBranchExpressions.kt");
        }

        @Test
        @TestMetadata("createInlineClassInArgumentPosition.kt")
        public void testCreateInlineClassInArgumentPosition() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/createInlineClassInArgumentPosition.kt");
        }

        @Test
        @TestMetadata("crossinlineWithInlineClassInParameter.kt")
        public void testCrossinlineWithInlineClassInParameter() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/crossinlineWithInlineClassInParameter.kt");
        }

        @Test
        @TestMetadata("defaultFunctionsFromAnyForInlineClass.kt")
        public void testDefaultFunctionsFromAnyForInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/defaultFunctionsFromAnyForInlineClass.kt");
        }

        @Test
        @TestMetadata("defaultInterfaceMethodsInInlineClass.kt")
        public void testDefaultInterfaceMethodsInInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/defaultInterfaceMethodsInInlineClass.kt");
        }

        @Test
        @TestMetadata("defaultWithInlineClassArgument.kt")
        public void testDefaultWithInlineClassArgument() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/defaultWithInlineClassArgument.kt");
        }

        @Test
        @TestMetadata("elvisWithInlineClassAndNullConstant.kt")
        public void testElvisWithInlineClassAndNullConstant() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/elvisWithInlineClassAndNullConstant.kt");
        }

        @Test
        @TestMetadata("emptyConstructorForInlineClass.kt")
        public void testEmptyConstructorForInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/emptyConstructorForInlineClass.kt");
        }

        @Test
        @TestMetadata("equalityChecksInlineClassNonNull.kt")
        public void testEqualityChecksInlineClassNonNull() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksInlineClassNonNull.kt");
        }

        @Test
        @TestMetadata("equalityChecksMixedNullability.kt")
        public void testEqualityChecksMixedNullability() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksMixedNullability.kt");
        }

        @Test
        @TestMetadata("equalityChecksNegatedInlineClassNonNull.kt")
        public void testEqualityChecksNegatedInlineClassNonNull() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedInlineClassNonNull.kt");
        }

        @Test
        @TestMetadata("equalityChecksNegatedNonNull.kt")
        public void testEqualityChecksNegatedNonNull() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNonNull.kt");
        }

        @Test
        @TestMetadata("equalityChecksNegatedNullable.kt")
        public void testEqualityChecksNegatedNullable() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedNullable.kt");
        }

        @Test
        @TestMetadata("equalityChecksNegatedPrimitive.kt")
        public void testEqualityChecksNegatedPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNegatedPrimitive.kt");
        }

        @Test
        @TestMetadata("equalityChecksNonNull.kt")
        public void testEqualityChecksNonNull() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNonNull.kt");
        }

        @Test
        @TestMetadata("equalityChecksNullable.kt")
        public void testEqualityChecksNullable() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksNullable.kt");
        }

        @Test
        @TestMetadata("equalityChecksPrimitive.kt")
        public void testEqualityChecksPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityChecksPrimitive.kt");
        }

        @Test
        @TestMetadata("equalityForBoxesOfNullableValuesOfInlineClass.kt")
        public void testEqualityForBoxesOfNullableValuesOfInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalityForBoxesOfNullableValuesOfInlineClass.kt");
        }

        @Test
        @TestMetadata("equalsCallsLeftArgument.kt")
        public void testEqualsCallsLeftArgument() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalsCallsLeftArgument.kt");
        }

        @Test
        @TestMetadata("equalsEvaluationOrderInlineClass.kt")
        public void testEqualsEvaluationOrderInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderInlineClass.kt");
        }

        @Test
        @TestMetadata("equalsEvaluationOrderNonNull.kt")
        public void testEqualsEvaluationOrderNonNull() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNonNull.kt");
        }

        @Test
        @TestMetadata("equalsEvaluationOrderNullable.kt")
        public void testEqualsEvaluationOrderNullable() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderNullable.kt");
        }

        @Test
        @TestMetadata("equalsEvaluationOrderPrimitive.kt")
        public void testEqualsEvaluationOrderPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalsEvaluationOrderPrimitive.kt");
        }

        @Test
        @TestMetadata("equalsOperatorWithGenericCall.kt")
        public void testEqualsOperatorWithGenericCall() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/equalsOperatorWithGenericCall.kt");
        }

        @Test
        @TestMetadata("extLambdaInInlineClassFun.kt")
        public void testExtLambdaInInlineClassFun() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun.kt");
        }

        @Test
        @TestMetadata("extLambdaInInlineClassFun2.kt")
        public void testExtLambdaInInlineClassFun2() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/extLambdaInInlineClassFun2.kt");
        }

        @Test
        @TestMetadata("fieldNameClash.kt")
        public void testFieldNameClash() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/fieldNameClash.kt");
        }

        @Test
        @TestMetadata("genericInlineClassSynthMembers.kt")
        public void testGenericInlineClassSynthMembers() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/genericInlineClassSynthMembers.kt");
        }

        @Test
        @TestMetadata("genericVararg2ndConstructor.kt")
        public void testGenericVararg2ndConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/genericVararg2ndConstructor.kt");
        }

        @Test
        @TestMetadata("initBlock.kt")
        public void testInitBlock() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/initBlock.kt");
        }

        @Test
        @TestMetadata("inlineClassAsLastExpressionInInLambda.kt")
        public void testInlineClassAsLastExpressionInInLambda() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassAsLastExpressionInInLambda.kt");
        }

        @Test
        @TestMetadata("inlineClassEqualityShouldUseTotalOrderForFloatingPointData.kt")
        public void testInlineClassEqualityShouldUseTotalOrderForFloatingPointData() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassEqualityShouldUseTotalOrderForFloatingPointData.kt");
        }

        @Test
        @TestMetadata("inlineClassFunctionInvoke.kt")
        public void testInlineClassFunctionInvoke() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassFunctionInvoke.kt");
        }

        @Test
        @TestMetadata("inlineClassImplementsCollection.kt")
        public void testInlineClassImplementsCollection() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassImplementsCollection.kt");
        }

        @Test
        @TestMetadata("inlineClassInStringTemplate.kt")
        public void testInlineClassInStringTemplate() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassInStringTemplate.kt");
        }

        @Test
        @TestMetadata("inlineClassPropertyReferenceGetAndSet.kt")
        public void testInlineClassPropertyReferenceGetAndSet() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassPropertyReferenceGetAndSet.kt");
        }

        @Test
        @TestMetadata("inlineClassValueCapturedInInlineLambda.kt")
        public void testInlineClassValueCapturedInInlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInInlineLambda.kt");
        }

        @Test
        @TestMetadata("inlineClassValueCapturedInNonInlineLambda.kt")
        public void testInlineClassValueCapturedInNonInlineLambda() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValueCapturedInNonInlineLambda.kt");
        }

        @Test
        @TestMetadata("inlineClassValuesInsideStrings.kt")
        public void testInlineClassValuesInsideStrings() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassValuesInsideStrings.kt");
        }

        @Test
        @TestMetadata("inlineClassWithCustomEquals.kt")
        public void testInlineClassWithCustomEquals() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithCustomEquals.kt");
        }

        @Test
        @TestMetadata("inlineClassWithDefaultFunctionsFromAny.kt")
        public void testInlineClassWithDefaultFunctionsFromAny() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassWithDefaultFunctionsFromAny.kt");
        }

        @Test
        @TestMetadata("inlineClassesAsInlineFunParameters.kt")
        public void testInlineClassesAsInlineFunParameters() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesAsInlineFunParameters.kt");
        }

        @Test
        @TestMetadata("inlineClassesCheckCast.kt")
        public void testInlineClassesCheckCast() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesCheckCast.kt");
        }

        @Test
        @TestMetadata("inlineClassesInInlineLambdaParameters.kt")
        public void testInlineClassesInInlineLambdaParameters() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesInInlineLambdaParameters.kt");
        }

        @Test
        @TestMetadata("inlineClassesRefTypesInInlineLambdaParameters.kt")
        public void testInlineClassesRefTypesInInlineLambdaParameters() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineClassesRefTypesInInlineLambdaParameters.kt");
        }

        @Test
        @TestMetadata("inlineExtLambdaInInlineClassFun.kt")
        public void testInlineExtLambdaInInlineClassFun() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun.kt");
        }

        @Test
        @TestMetadata("inlineExtLambdaInInlineClassFun2.kt")
        public void testInlineExtLambdaInInlineClassFun2() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineExtLambdaInInlineClassFun2.kt");
        }

        @Test
        @TestMetadata("inlineFunctionInsideInlineClass.kt")
        public void testInlineFunctionInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/inlineFunctionInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("iterateOverArrayOfInlineClassValues.kt")
        public void testIterateOverArrayOfInlineClassValues() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/iterateOverArrayOfInlineClassValues.kt");
        }

        @Test
        @TestMetadata("iterateOverListOfInlineClassValues.kt")
        public void testIterateOverListOfInlineClassValues() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/iterateOverListOfInlineClassValues.kt");
        }

        @Test
        @TestMetadata("javaClassIntrinsicOnInlineClasses.kt")
        public void testJavaClassIntrinsicOnInlineClasses() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/javaClassIntrinsicOnInlineClasses.kt");
        }

        @Test
        @TestMetadata("javaPrimitiveTypeIC.kt")
        public void testJavaPrimitiveTypeIC() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/javaPrimitiveTypeIC.kt");
        }

        @Test
        @TestMetadata("jvmFieldInInlineClassCompanion.kt")
        public void testJvmFieldInInlineClassCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/jvmFieldInInlineClassCompanion.kt");
        }

        @Test
        @TestMetadata("jvmOverloadsOnTopLevelFunctionReturningInlineClassValue.kt")
        public void testJvmOverloadsOnTopLevelFunctionReturningInlineClassValue() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/jvmOverloadsOnTopLevelFunctionReturningInlineClassValue.kt");
        }

        @Test
        @TestMetadata("jvmStaticFunInInlineClassCompanion.kt")
        public void testJvmStaticFunInInlineClassCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticFunInInlineClassCompanion.kt");
        }

        @Test
        @TestMetadata("jvmStaticPropertyAccessorInInlineClassCompanion.kt")
        public void testJvmStaticPropertyAccessorInInlineClassCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticPropertyAccessorInInlineClassCompanion.kt");
        }

        @Test
        @TestMetadata("jvmStaticVarInInlineClassCompanion.kt")
        public void testJvmStaticVarInInlineClassCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/jvmStaticVarInInlineClassCompanion.kt");
        }

        @Test
        @TestMetadata("kclassInAnnotation.kt")
        public void testKclassInAnnotation() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kclassInAnnotation.kt");
        }

        @Test
        @TestMetadata("kt25246.kt")
        public void testKt25246() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt25246.kt");
        }

        @Test
        @TestMetadata("kt25750.kt")
        public void testKt25750() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt25750.kt");
        }

        @Test
        @TestMetadata("kt25771.kt")
        public void testKt25771() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt25771.kt");
        }

        @Test
        @TestMetadata("kt26103.kt")
        public void testKt26103() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt26103.kt");
        }

        @Test
        @TestMetadata("kt26103_contravariantUnderlyingType.kt")
        public void testKt26103_contravariantUnderlyingType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt26103_contravariantUnderlyingType.kt");
        }

        @Test
        @TestMetadata("kt26103_covariantUnderlyingType.kt")
        public void testKt26103_covariantUnderlyingType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt26103_covariantUnderlyingType.kt");
        }

        @Test
        @TestMetadata("kt26103_original.kt")
        public void testKt26103_original() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt26103_original.kt");
        }

        @Test
        @TestMetadata("kt27096.kt")
        public void testKt27096() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096.kt");
        }

        @Test
        @TestMetadata("kt27096_enum.kt")
        public void testKt27096_enum() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096_enum.kt");
        }

        @Test
        @TestMetadata("kt27096_functional.kt")
        public void testKt27096_functional() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096_functional.kt");
        }

        @Test
        @TestMetadata("kt27096_innerClass.kt")
        public void testKt27096_innerClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096_innerClass.kt");
        }

        @Test
        @TestMetadata("kt27096_nullablePrimitive.kt")
        public void testKt27096_nullablePrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullablePrimitive.kt");
        }

        @Test
        @TestMetadata("kt27096_nullableReference.kt")
        public void testKt27096_nullableReference() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096_nullableReference.kt");
        }

        @Test
        @TestMetadata("kt27096_primitive.kt")
        public void testKt27096_primitive() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096_primitive.kt");
        }

        @Test
        @TestMetadata("kt27096_reference.kt")
        public void testKt27096_reference() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27096_reference.kt");
        }

        @Test
        @TestMetadata("kt27113.kt")
        public void testKt27113() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27113.kt");
        }

        @Test
        @TestMetadata("kt27113a.kt")
        public void testKt27113a() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27113a.kt");
        }

        @Test
        @TestMetadata("kt27132.kt")
        public void testKt27132() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27132.kt");
        }

        @Test
        @TestMetadata("kt27140.kt")
        public void testKt27140() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27140.kt");
        }

        @Test
        @TestMetadata("kt27705.kt")
        public void testKt27705() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27705.kt");
        }

        @Test
        @TestMetadata("kt27706.kt")
        public void testKt27706() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt27706.kt");
        }

        @Test
        @TestMetadata("kt28405.kt")
        public void testKt28405() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt28405.kt");
        }

        @Test
        @TestMetadata("kt28585.kt")
        public void testKt28585() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt28585.kt");
        }

        @Test
        @TestMetadata("kt28879.kt")
        public void testKt28879() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt28879.kt");
        }

        @Test
        @TestMetadata("kt28920_javaObjectType.kt")
        public void testKt28920_javaObjectType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt28920_javaObjectType.kt");
        }

        @Test
        @TestMetadata("kt28920_javaPrimitiveType.kt")
        public void testKt28920_javaPrimitiveType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt28920_javaPrimitiveType.kt");
        }

        @Test
        @TestMetadata("kt33119.kt")
        public void testKt33119() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt33119.kt");
        }

        @Test
        @TestMetadata("kt34268.kt")
        public void testKt34268() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt34268.kt");
        }

        @Test
        @TestMetadata("kt34902.kt")
        public void testKt34902() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt34902.kt");
        }

        @Test
        @TestMetadata("kt37998.kt")
        public void testKt37998() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt37998.kt");
        }

        @Test
        @TestMetadata("kt38680.kt")
        public void testKt38680() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt38680.kt");
        }

        @Test
        @TestMetadata("kt38680a.kt")
        public void testKt38680a() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt38680a.kt");
        }

        @Test
        @TestMetadata("kt38680b.kt")
        public void testKt38680b() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/kt38680b.kt");
        }

        @Test
        @TestMetadata("mangledDefaultParameterFunction.kt")
        public void testMangledDefaultParameterFunction() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/mangledDefaultParameterFunction.kt");
        }

        @Test
        @TestMetadata("mangledSuperCalls.kt")
        public void testMangledSuperCalls() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/mangledSuperCalls.kt");
        }

        @Test
        @TestMetadata("mapInlineClassesWithSuppressWildcardsMode.kt")
        public void testMapInlineClassesWithSuppressWildcardsMode() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/mapInlineClassesWithSuppressWildcardsMode.kt");
        }

        @Test
        @TestMetadata("mappingOfBoxedFlexibleInlineClassType.kt")
        public void testMappingOfBoxedFlexibleInlineClassType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/mappingOfBoxedFlexibleInlineClassType.kt");
        }

        @Test
        @TestMetadata("multifileClass.kt")
        public void testMultifileClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/multifileClass.kt");
        }

        @Test
        @TestMetadata("nestedInlineClass.kt")
        public void testNestedInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/nestedInlineClass.kt");
        }

        @Test
        @TestMetadata("noAssertionsOnInlineClassBasedOnNullableType.kt")
        public void testNoAssertionsOnInlineClassBasedOnNullableType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/noAssertionsOnInlineClassBasedOnNullableType.kt");
        }

        @Test
        @TestMetadata("noReturnTypeMangling.kt")
        public void testNoReturnTypeMangling() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeMangling.kt");
        }

        @Test
        @TestMetadata("noReturnTypeManglingJvmName.kt")
        public void testNoReturnTypeManglingJvmName() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/noReturnTypeManglingJvmName.kt");
        }

        @Test
        @TestMetadata("nullableEqeqNonNull.kt")
        public void testNullableEqeqNonNull() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/nullableEqeqNonNull.kt");
        }

        @Test
        @TestMetadata("nullableWrapperEquality.kt")
        public void testNullableWrapperEquality() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/nullableWrapperEquality.kt");
        }

        @Test
        @TestMetadata("overridingFunCallingPrivateFun.kt")
        public void testOverridingFunCallingPrivateFun() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/overridingFunCallingPrivateFun.kt");
        }

        @Test
        @TestMetadata("passInlineClassAsVararg.kt")
        public void testPassInlineClassAsVararg() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassAsVararg.kt");
        }

        @Test
        @TestMetadata("passInlineClassWithSpreadOperatorToVarargs.kt")
        public void testPassInlineClassWithSpreadOperatorToVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/passInlineClassWithSpreadOperatorToVarargs.kt");
        }

        @Test
        @TestMetadata("propertyLoweringOrder.kt")
        public void testPropertyLoweringOrder() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/propertyLoweringOrder.kt");
        }

        @Test
        @TestMetadata("referToPropertyInCompanionObjectOfInlineClass.kt")
        public void testReferToPropertyInCompanionObjectOfInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/referToPropertyInCompanionObjectOfInlineClass.kt");
        }

        @Test
        @TestMetadata("referToUnderlyingPropertyInsideInlineClass.kt")
        public void testReferToUnderlyingPropertyInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("referToUnderlyingPropertyOfInlineClass.kt")
        public void testReferToUnderlyingPropertyOfInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/referToUnderlyingPropertyOfInlineClass.kt");
        }

        @Test
        @TestMetadata("removeInInlineCollectionOfInlineClassAsInt.kt")
        public void testRemoveInInlineCollectionOfInlineClassAsInt() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/removeInInlineCollectionOfInlineClassAsInt.kt");
        }

        @Test
        @TestMetadata("resultInlining.kt")
        public void testResultInlining() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/resultInlining.kt");
        }

        @Test
        @TestMetadata("resultRunCatchingOrElse.kt")
        public void testResultRunCatchingOrElse() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/resultRunCatchingOrElse.kt");
        }

        @Test
        @TestMetadata("secondaryConstructorWithVararg.kt")
        public void testSecondaryConstructorWithVararg() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorWithVararg.kt");
        }

        @Test
        @TestMetadata("secondaryConstructorsInsideInlineClass.kt")
        public void testSecondaryConstructorsInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("secondaryConstructorsInsideInlineClassWithPrimitiveCarrierType.kt")
        public void testSecondaryConstructorsInsideInlineClassWithPrimitiveCarrierType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/secondaryConstructorsInsideInlineClassWithPrimitiveCarrierType.kt");
        }

        @Test
        @TestMetadata("simpleSecondaryConstructor.kt")
        public void testSimpleSecondaryConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/simpleSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("smartCastOnThisOfInlineClassType.kt")
        public void testSmartCastOnThisOfInlineClassType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/smartCastOnThisOfInlineClassType.kt");
        }

        @Test
        @TestMetadata("stringPlus.kt")
        public void testStringPlus() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/stringPlus.kt");
        }

        @Test
        @TestMetadata("toStringCallingPrivateFun.kt")
        public void testToStringCallingPrivateFun() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/toStringCallingPrivateFun.kt");
        }

        @Test
        @TestMetadata("toStringOfUnboxedNullable.kt")
        public void testToStringOfUnboxedNullable() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/toStringOfUnboxedNullable.kt");
        }

        @Test
        @TestMetadata("typeChecksForInlineClasses.kt")
        public void testTypeChecksForInlineClasses() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/typeChecksForInlineClasses.kt");
        }

        @Test
        @TestMetadata("UIntArraySortExample.kt")
        public void testUIntArraySortExample() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/UIntArraySortExample.kt");
        }

        @Test
        @TestMetadata("UIntSafeAsInt.kt")
        public void testUIntSafeAsInt() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/UIntSafeAsInt.kt");
        }

        @Test
        @TestMetadata("unboxNullableValueOfInlineClassWithNonNullUnderlyingType.kt")
        public void testUnboxNullableValueOfInlineClassWithNonNullUnderlyingType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithNonNullUnderlyingType.kt");
        }

        @Test
        @TestMetadata("unboxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt")
        public void testUnboxNullableValueOfInlineClassWithPrimitiveUnderlyingType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/unboxNullableValueOfInlineClassWithPrimitiveUnderlyingType.kt");
        }

        @Test
        @TestMetadata("unboxParameterOfSuspendLambdaBeforeInvoke.kt")
        public void testUnboxParameterOfSuspendLambdaBeforeInvoke() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/unboxParameterOfSuspendLambdaBeforeInvoke.kt");
        }

        @Test
        @TestMetadata("unboxReceiverOnCallingMethodFromInlineClass.kt")
        public void testUnboxReceiverOnCallingMethodFromInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/unboxReceiverOnCallingMethodFromInlineClass.kt");
        }

        @Test
        @TestMetadata("unboxValueFromPlatformType.kt")
        public void testUnboxValueFromPlatformType() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/unboxValueFromPlatformType.kt");
        }

        @Test
        @TestMetadata("unboxValueOfAnyBeforeMethodInvocation.kt")
        public void testUnboxValueOfAnyBeforeMethodInvocation() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/unboxValueOfAnyBeforeMethodInvocation.kt");
        }

        @Test
        @TestMetadata("useInlineClassesInsideElvisOperator.kt")
        public void testUseInlineClassesInsideElvisOperator() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/useInlineClassesInsideElvisOperator.kt");
        }

        @Test
        @TestMetadata("useInlineFunctionInsideInlineClass.kt")
        public void testUseInlineFunctionInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/useInlineFunctionInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("useOfInlineClassWithGenericMethodFromJava.kt")
        public void testUseOfInlineClassWithGenericMethodFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/useOfInlineClassWithGenericMethodFromJava.kt");
        }

        @Test
        @TestMetadata("useThisInsideInlineClass.kt")
        public void testUseThisInsideInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/useThisInsideInlineClass.kt");
        }

        @Test
        @TestMetadata("whenWithSubject.kt")
        public void testWhenWithSubject() throws Exception {
            runTest("compiler/testData/codegen/box/inlineClasses/whenWithSubject.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda")
        @TestDataPath("$PROJECT_ROOT")
        public class BoxReturnValueInLambda extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBoxReturnValueInLambda() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boxAny.kt")
            public void testBoxAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxAny.kt");
            }

            @Test
            @TestMetadata("boxFunLiteralAny.kt")
            public void testBoxFunLiteralAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxFunLiteralAny.kt");
            }

            @Test
            @TestMetadata("boxInt.kt")
            public void testBoxInt() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxInt.kt");
            }

            @Test
            @TestMetadata("boxNullableAny.kt")
            public void testBoxNullableAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAny.kt");
            }

            @Test
            @TestMetadata("boxNullableAnyNull.kt")
            public void testBoxNullableAnyNull() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableAnyNull.kt");
            }

            @Test
            @TestMetadata("boxNullableInt.kt")
            public void testBoxNullableInt() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableInt.kt");
            }

            @Test
            @TestMetadata("boxNullableIntNull.kt")
            public void testBoxNullableIntNull() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableIntNull.kt");
            }

            @Test
            @TestMetadata("boxNullableString.kt")
            public void testBoxNullableString() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableString.kt");
            }

            @Test
            @TestMetadata("boxNullableStringNull.kt")
            public void testBoxNullableStringNull() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxNullableStringNull.kt");
            }

            @Test
            @TestMetadata("boxString.kt")
            public void testBoxString() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/boxString.kt");
            }

            @Test
            @TestMetadata("kt27586_1.kt")
            public void testKt27586_1() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/kt27586_1.kt");
            }

            @Test
            @TestMetadata("kt27586_2.kt")
            public void testKt27586_2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueInLambda/kt27586_2.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride")
        @TestDataPath("$PROJECT_ROOT")
        public class BoxReturnValueOnOverride extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBoxReturnValueOnOverride() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("covariantOverrideChainErasedToAny.kt")
            public void testCovariantOverrideChainErasedToAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToAny.kt");
            }

            @Test
            @TestMetadata("covariantOverrideChainErasedToNullableAny.kt")
            public void testCovariantOverrideChainErasedToNullableAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideChainErasedToNullableAny.kt");
            }

            @Test
            @TestMetadata("covariantOverrideErasedToAny.kt")
            public void testCovariantOverrideErasedToAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToAny.kt");
            }

            @Test
            @TestMetadata("covariantOverrideErasedToInterface.kt")
            public void testCovariantOverrideErasedToInterface() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToInterface.kt");
            }

            @Test
            @TestMetadata("covariantOverrideErasedToPrimitive.kt")
            public void testCovariantOverrideErasedToPrimitive() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideErasedToPrimitive.kt");
            }

            @Test
            @TestMetadata("covariantOverrideListVsMutableList.kt")
            public void testCovariantOverrideListVsMutableList() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideListVsMutableList.kt");
            }

            @Test
            @TestMetadata("covariantOverrideUnrelatedInterfaces.kt")
            public void testCovariantOverrideUnrelatedInterfaces() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/covariantOverrideUnrelatedInterfaces.kt");
            }

            @Test
            @TestMetadata("genericOverride.kt")
            public void testGenericOverride() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverride.kt");
            }

            @Test
            @TestMetadata("genericOverrideSpecialized.kt")
            public void testGenericOverrideSpecialized() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/genericOverrideSpecialized.kt");
            }

            @Test
            @TestMetadata("inlineClassInOverriddenReturnTypes.kt")
            public void testInlineClassInOverriddenReturnTypes() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/inlineClassInOverriddenReturnTypes.kt");
            }

            @Test
            @TestMetadata("kt28483.kt")
            public void testKt28483() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt28483.kt");
            }

            @Test
            @TestMetadata("kt31585.kt")
            public void testKt31585() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt31585.kt");
            }

            @Test
            @TestMetadata("kt35234.kt")
            public void testKt35234() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234.kt");
            }

            @Test
            @TestMetadata("kt35234a.kt")
            public void testKt35234a() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/kt35234a.kt");
            }

            @Test
            @TestMetadata("overrideGenericWithInlineClass.kt")
            public void testOverrideGenericWithInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithInlineClass.kt");
            }

            @Test
            @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullAny.kt")
            public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullAny.kt");
            }

            @Test
            @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny.kt")
            public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAny.kt");
            }

            @Test
            @TestMetadata("overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull.kt")
            public void testOverrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideGenericWithNullableInlineClassUpperBoundWithNonNullNullableAnyNull.kt");
            }

            @Test
            @TestMetadata("overrideNullableInlineClassWithNonNullAny.kt")
            public void testOverrideNullableInlineClassWithNonNullAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullAny.kt");
            }

            @Test
            @TestMetadata("overrideNullableInlineClassWithNonNullNullableAny.kt")
            public void testOverrideNullableInlineClassWithNonNullNullableAny() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAny.kt");
            }

            @Test
            @TestMetadata("overrideNullableInlineClassWithNonNullNullableAnyNull.kt")
            public void testOverrideNullableInlineClassWithNonNullNullableAnyNull() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/overrideNullableInlineClassWithNonNullNullableAnyNull.kt");
            }

            @Test
            @TestMetadata("relatedReturnTypes1a.kt")
            public void testRelatedReturnTypes1a() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1a.kt");
            }

            @Test
            @TestMetadata("relatedReturnTypes1b.kt")
            public void testRelatedReturnTypes1b() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes1b.kt");
            }

            @Test
            @TestMetadata("relatedReturnTypes2a.kt")
            public void testRelatedReturnTypes2a() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2a.kt");
            }

            @Test
            @TestMetadata("relatedReturnTypes2b.kt")
            public void testRelatedReturnTypes2b() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/relatedReturnTypes2b.kt");
            }

            @Test
            @TestMetadata("unrelatedGenerics.kt")
            public void testUnrelatedGenerics() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/boxReturnValueOnOverride/unrelatedGenerics.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/callableReferences")
        @TestDataPath("$PROJECT_ROOT")
        public class CallableReferences extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCallableReferences() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/callableReferences"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boundInlineClassExtensionFun.kt")
            public void testBoundInlineClassExtensionFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionFun.kt");
            }

            @Test
            @TestMetadata("boundInlineClassExtensionVal.kt")
            public void testBoundInlineClassExtensionVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassExtensionVal.kt");
            }

            @Test
            @TestMetadata("boundInlineClassMemberFun.kt")
            public void testBoundInlineClassMemberFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberFun.kt");
            }

            @Test
            @TestMetadata("boundInlineClassMemberVal.kt")
            public void testBoundInlineClassMemberVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassMemberVal.kt");
            }

            @Test
            @TestMetadata("boundInlineClassPrimaryVal.kt")
            public void testBoundInlineClassPrimaryVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/boundInlineClassPrimaryVal.kt");
            }

            @Test
            @TestMetadata("constructorWithInlineClassParameters.kt")
            public void testConstructorWithInlineClassParameters() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/constructorWithInlineClassParameters.kt");
            }

            @Test
            @TestMetadata("equalsHashCodeToString.kt")
            public void testEqualsHashCodeToString() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/equalsHashCodeToString.kt");
            }

            @Test
            @TestMetadata("funWithInlineClassParameters.kt")
            public void testFunWithInlineClassParameters() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/funWithInlineClassParameters.kt");
            }

            @Test
            @TestMetadata("inlineClassExtensionFun.kt")
            public void testInlineClassExtensionFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionFun.kt");
            }

            @Test
            @TestMetadata("inlineClassExtensionVal.kt")
            public void testInlineClassExtensionVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassExtensionVal.kt");
            }

            @Test
            @TestMetadata("inlineClassInternalPrimaryVal.kt")
            public void testInlineClassInternalPrimaryVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassInternalPrimaryVal.kt");
            }

            @Test
            @TestMetadata("inlineClassMemberFun.kt")
            public void testInlineClassMemberFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberFun.kt");
            }

            @Test
            @TestMetadata("inlineClassMemberVal.kt")
            public void testInlineClassMemberVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassMemberVal.kt");
            }

            @Test
            @TestMetadata("inlineClassPrimaryConstructor.kt")
            public void testInlineClassPrimaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryConstructor.kt");
            }

            @Test
            @TestMetadata("inlineClassPrimaryVal.kt")
            public void testInlineClassPrimaryVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrimaryVal.kt");
            }

            @Test
            @TestMetadata("inlineClassPrivatePrimaryVal.kt")
            public void testInlineClassPrivatePrimaryVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassPrivatePrimaryVal.kt");
            }

            @Test
            @TestMetadata("inlineClassTypeBoundMemberVar.kt")
            public void testInlineClassTypeBoundMemberVar() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeBoundMemberVar.kt");
            }

            @Test
            @TestMetadata("inlineClassTypeMemberVar.kt")
            public void testInlineClassTypeMemberVar() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeMemberVar.kt");
            }

            @Test
            @TestMetadata("inlineClassTypeTopLevelVar.kt")
            public void testInlineClassTypeTopLevelVar() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/inlineClassTypeTopLevelVar.kt");
            }

            @Test
            @TestMetadata("kt37986.kt")
            public void testKt37986() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/callableReferences/kt37986.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors")
        @TestDataPath("$PROJECT_ROOT")
        public class ContextsAndAccessors extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("accessPrivateInlineClassCompanionMethod.kt")
            public void testAccessPrivateInlineClassCompanionMethod() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassCompanionMethod2.kt")
            public void testAccessPrivateInlineClassCompanionMethod2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassCompanionMethod2.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassConstructorFromCompanion.kt")
            public void testAccessPrivateInlineClassConstructorFromCompanion() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromCompanion.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassConstructorFromLambda.kt")
            public void testAccessPrivateInlineClassConstructorFromLambda() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassConstructorFromLambda.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassMethodFromCompanion.kt")
            public void testAccessPrivateInlineClassMethodFromCompanion() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassMethodFromCompanion2.kt")
            public void testAccessPrivateInlineClassMethodFromCompanion2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromCompanion2.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda.kt")
            public void testAccessPrivateInlineClassMethodFromInlineLambda() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassMethodFromInlineLambda2.kt")
            public void testAccessPrivateInlineClassMethodFromInlineLambda2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromInlineLambda2.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassMethodFromLambda.kt")
            public void testAccessPrivateInlineClassMethodFromLambda() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda.kt");
            }

            @Test
            @TestMetadata("accessPrivateInlineClassMethodFromLambda2.kt")
            public void testAccessPrivateInlineClassMethodFromLambda2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateInlineClassMethodFromLambda2.kt");
            }

            @Test
            @TestMetadata("accessPrivateStaticInlineClassCompanionMethod.kt")
            public void testAccessPrivateStaticInlineClassCompanionMethod() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/accessPrivateStaticInlineClassCompanionMethod.kt");
            }

            @Test
            public void testAllFilesPresentInContextsAndAccessors() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("captureInlineClassInstanceInLambda.kt")
            public void testCaptureInlineClassInstanceInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda.kt");
            }

            @Test
            @TestMetadata("captureInlineClassInstanceInLambda2.kt")
            public void testCaptureInlineClassInstanceInLambda2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInLambda2.kt");
            }

            @Test
            @TestMetadata("captureInlineClassInstanceInObject.kt")
            public void testCaptureInlineClassInstanceInObject() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/captureInlineClassInstanceInObject.kt");
            }

            @Test
            @TestMetadata("inlineLambdaInInlineClassFun.kt")
            public void testInlineLambdaInInlineClassFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/inlineLambdaInInlineClassFun.kt");
            }

            @Test
            @TestMetadata("kt26858.kt")
            public void testKt26858() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt26858.kt");
            }

            @Test
            @TestMetadata("kt27513.kt")
            public void testKt27513() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt27513.kt");
            }

            @Test
            @TestMetadata("kt30780.kt")
            public void testKt30780() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/kt30780.kt");
            }

            @Test
            @TestMetadata("lambdaInInlineClassFun.kt")
            public void testLambdaInInlineClassFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/lambdaInInlineClassFun.kt");
            }

            @Test
            @TestMetadata("objectInInlineClassFun.kt")
            public void testObjectInInlineClassFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/objectInInlineClassFun.kt");
            }

            @Test
            @TestMetadata("toPrivateCompanionFun.kt")
            public void testToPrivateCompanionFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionFun.kt");
            }

            @Test
            @TestMetadata("toPrivateCompanionVal.kt")
            public void testToPrivateCompanionVal() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/contextsAndAccessors/toPrivateCompanionVal.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/defaultParameterValues")
        @TestDataPath("$PROJECT_ROOT")
        public class DefaultParameterValues extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInDefaultParameterValues() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/defaultParameterValues"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("defaultConstructorParameterValuesOfInlineClassType.kt")
            public void testDefaultConstructorParameterValuesOfInlineClassType() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultConstructorParameterValuesOfInlineClassType.kt");
            }

            @Test
            @TestMetadata("defaultInterfaceFunParameterValuesOfInlineClassType.kt")
            public void testDefaultInterfaceFunParameterValuesOfInlineClassType() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultInterfaceFunParameterValuesOfInlineClassType.kt");
            }

            @Test
            @TestMetadata("defaultParameterValuesOfInlineClassType.kt")
            public void testDefaultParameterValuesOfInlineClassType() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassType.kt");
            }

            @Test
            @TestMetadata("defaultParameterValuesOfInlineClassTypeBoxing.kt")
            public void testDefaultParameterValuesOfInlineClassTypeBoxing() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultParameterValuesOfInlineClassTypeBoxing.kt");
            }

            @Test
            @TestMetadata("defaultValueOfInlineClassTypeInInlineFun.kt")
            public void testDefaultValueOfInlineClassTypeInInlineFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFun.kt");
            }

            @Test
            @TestMetadata("defaultValueOfInlineClassTypeInInlineFunInInlineClass.kt")
            public void testDefaultValueOfInlineClassTypeInInlineFunInInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/defaultValueOfInlineClassTypeInInlineFunInInlineClass.kt");
            }

            @Test
            @TestMetadata("inlineClassFun.kt")
            public void testInlineClassFun() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassFun.kt");
            }

            @Test
            @TestMetadata("inlineClassPrimaryConstructor.kt")
            public void testInlineClassPrimaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructor.kt");
            }

            @Test
            @TestMetadata("inlineClassPrimaryConstructorWithInlineClassValue.kt")
            public void testInlineClassPrimaryConstructorWithInlineClassValue() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassPrimaryConstructorWithInlineClassValue.kt");
            }

            @Test
            @TestMetadata("inlineClassSecondaryConstructor.kt")
            public void testInlineClassSecondaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/inlineClassSecondaryConstructor.kt");
            }

            @Test
            @TestMetadata("kt26554.kt")
            public void testKt26554() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt26554.kt");
            }

            @Test
            @TestMetadata("kt27416.kt")
            public void testKt27416() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/defaultParameterValues/kt27416.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/functionNameMangling")
        @TestDataPath("$PROJECT_ROOT")
        public class FunctionNameMangling extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFunctionNameMangling() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/functionNameMangling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("anonymousObjectInFunctionWithMangledName.kt")
            public void testAnonymousObjectInFunctionWithMangledName() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/anonymousObjectInFunctionWithMangledName.kt");
            }

            @Test
            @TestMetadata("extensionFunctionsDoNotClash.kt")
            public void testExtensionFunctionsDoNotClash() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/extensionFunctionsDoNotClash.kt");
            }

            @Test
            @TestMetadata("functionsWithDifferentNullabilityDoNotClash.kt")
            public void testFunctionsWithDifferentNullabilityDoNotClash() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/functionsWithDifferentNullabilityDoNotClash.kt");
            }

            @Test
            @TestMetadata("genericFunctionsDoNotClash.kt")
            public void testGenericFunctionsDoNotClash() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericFunctionsDoNotClash.kt");
            }

            @Test
            @TestMetadata("genericSignatureOfFunctionWithMangledName.kt")
            public void testGenericSignatureOfFunctionWithMangledName() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/genericSignatureOfFunctionWithMangledName.kt");
            }

            @Test
            @TestMetadata("localClassInFunctionWithMangledName.kt")
            public void testLocalClassInFunctionWithMangledName() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/localClassInFunctionWithMangledName.kt");
            }

            @Test
            @TestMetadata("mangledFunctionsCanBeOverridden.kt")
            public void testMangledFunctionsCanBeOverridden() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsCanBeOverridden.kt");
            }

            @Test
            @TestMetadata("mangledFunctionsDoNotClash.kt")
            public void testMangledFunctionsDoNotClash() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsDoNotClash.kt");
            }

            @Test
            @TestMetadata("mangledFunctionsPresentInStackTrace.kt")
            public void testMangledFunctionsPresentInStackTrace() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mangledFunctionsPresentInStackTrace.kt");
            }

            @Test
            @TestMetadata("mixedSignatureFunctionsDoNotClash.kt")
            public void testMixedSignatureFunctionsDoNotClash() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/mixedSignatureFunctionsDoNotClash.kt");
            }

            @Test
            @TestMetadata("overridingMethodInGenericClass.kt")
            public void testOverridingMethodInGenericClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass.kt");
            }

            @Test
            @TestMetadata("overridingMethodInGenericClass2.kt")
            public void testOverridingMethodInGenericClass2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/overridingMethodInGenericClass2.kt");
            }

            @Test
            @TestMetadata("propertySetterWithInlineClassTypeArgument.kt")
            public void testPropertySetterWithInlineClassTypeArgument() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/propertySetterWithInlineClassTypeArgument.kt");
            }

            @Test
            @TestMetadata("reflectionForFunctionWithMangledName.kt")
            public void testReflectionForFunctionWithMangledName() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForFunctionWithMangledName.kt");
            }

            @Test
            @TestMetadata("reflectionForLocalClassInFunctionWithMangledName.kt")
            public void testReflectionForLocalClassInFunctionWithMangledName() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForLocalClassInFunctionWithMangledName.kt");
            }

            @Test
            @TestMetadata("reflectionForPropertyOfInlineClassType.kt")
            public void testReflectionForPropertyOfInlineClassType() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/reflectionForPropertyOfInlineClassType.kt");
            }

            @Test
            @TestMetadata("syntheticAccessorForFunctionWithMangledName.kt")
            public void testSyntheticAccessorForFunctionWithMangledName() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorForFunctionWithMangledName.kt");
            }

            @Test
            @TestMetadata("syntheticAccessorsForPropertyOfInlineClassType.kt")
            public void testSyntheticAccessorsForPropertyOfInlineClassType() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/functionNameMangling/syntheticAccessorsForPropertyOfInlineClassType.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/hiddenConstructor")
        @TestDataPath("$PROJECT_ROOT")
        public class HiddenConstructor extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInHiddenConstructor() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/hiddenConstructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("constructorReferencedFromOtherFile1.kt")
            public void testConstructorReferencedFromOtherFile1() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile1.kt");
            }

            @Test
            @TestMetadata("constructorReferencedFromOtherFile2.kt")
            public void testConstructorReferencedFromOtherFile2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorReferencedFromOtherFile2.kt");
            }

            @Test
            @TestMetadata("constructorWithDefaultParameters.kt")
            public void testConstructorWithDefaultParameters() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/constructorWithDefaultParameters.kt");
            }

            @Test
            @TestMetadata("delegatingSuperConstructorCall.kt")
            public void testDelegatingSuperConstructorCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCall.kt");
            }

            @Test
            @TestMetadata("delegatingSuperConstructorCallInSecondaryConstructor.kt")
            public void testDelegatingSuperConstructorCallInSecondaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingSuperConstructorCallInSecondaryConstructor.kt");
            }

            @Test
            @TestMetadata("delegatingThisConstructorCall.kt")
            public void testDelegatingThisConstructorCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/delegatingThisConstructorCall.kt");
            }

            @Test
            @TestMetadata("enumClassConstructor.kt")
            public void testEnumClassConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/enumClassConstructor.kt");
            }

            @Test
            @TestMetadata("innerClassConstructor.kt")
            public void testInnerClassConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/innerClassConstructor.kt");
            }

            @Test
            @TestMetadata("kt28855.kt")
            public void testKt28855() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/kt28855.kt");
            }

            @Test
            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/primaryConstructor.kt");
            }

            @Test
            @TestMetadata("privateConstructor.kt")
            public void testPrivateConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/privateConstructor.kt");
            }

            @Test
            @TestMetadata("sealedClassConstructor.kt")
            public void testSealedClassConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/sealedClassConstructor.kt");
            }

            @Test
            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/hiddenConstructor/secondaryConstructor.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/interfaceDelegation")
        @TestDataPath("$PROJECT_ROOT")
        public class InterfaceDelegation extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInInterfaceDelegation() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/interfaceDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("interfaceImplementationByDelegation.kt")
            public void testInterfaceImplementationByDelegation() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/interfaceImplementationByDelegation.kt");
            }

            @Test
            @TestMetadata("kt38337.kt")
            public void testKt38337() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/kt38337.kt");
            }

            @Test
            @TestMetadata("memberExtValDelegationWithInlineClassParameterTypes.kt")
            public void testMemberExtValDelegationWithInlineClassParameterTypes() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtValDelegationWithInlineClassParameterTypes.kt");
            }

            @Test
            @TestMetadata("memberExtVarDelegationWithInlineClassParameterTypes.kt")
            public void testMemberExtVarDelegationWithInlineClassParameterTypes() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberExtVarDelegationWithInlineClassParameterTypes.kt");
            }

            @Test
            @TestMetadata("memberFunDelegatedToInlineClassInt.kt")
            public void testMemberFunDelegatedToInlineClassInt() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassInt.kt");
            }

            @Test
            @TestMetadata("memberFunDelegatedToInlineClassLong.kt")
            public void testMemberFunDelegatedToInlineClassLong() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegatedToInlineClassLong.kt");
            }

            @Test
            @TestMetadata("memberFunDelegationToInlineClassWithInlineClassParameterTypes.kt")
            public void testMemberFunDelegationToInlineClassWithInlineClassParameterTypes() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationToInlineClassWithInlineClassParameterTypes.kt");
            }

            @Test
            @TestMetadata("memberFunDelegationWithInlineClassParameterTypes.kt")
            public void testMemberFunDelegationWithInlineClassParameterTypes() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceDelegation/memberFunDelegationWithInlineClassParameterTypes.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls")
        @TestDataPath("$PROJECT_ROOT")
        public class InterfaceMethodCalls extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInInterfaceMethodCalls() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("complexGenericMethodWithInlineClassOverride.kt")
            public void testComplexGenericMethodWithInlineClassOverride() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride.kt");
            }

            @Test
            @TestMetadata("complexGenericMethodWithInlineClassOverride2.kt")
            public void testComplexGenericMethodWithInlineClassOverride2() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride2.kt");
            }

            @Test
            @TestMetadata("complexGenericMethodWithInlineClassOverride3.kt")
            public void testComplexGenericMethodWithInlineClassOverride3() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/complexGenericMethodWithInlineClassOverride3.kt");
            }

            @Test
            @TestMetadata("defaultInterfaceExtensionFunCall.kt")
            public void testDefaultInterfaceExtensionFunCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceExtensionFunCall.kt");
            }

            @Test
            @TestMetadata("defaultInterfaceMethodCall.kt")
            public void testDefaultInterfaceMethodCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/defaultInterfaceMethodCall.kt");
            }

            @Test
            @TestMetadata("genericDefaultInterfaceExtensionFunCall.kt")
            public void testGenericDefaultInterfaceExtensionFunCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceExtensionFunCall.kt");
            }

            @Test
            @TestMetadata("genericDefaultInterfaceMethodCall.kt")
            public void testGenericDefaultInterfaceMethodCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericDefaultInterfaceMethodCall.kt");
            }

            @Test
            @TestMetadata("genericInterfaceMethodCall.kt")
            public void testGenericInterfaceMethodCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericInterfaceMethodCall.kt");
            }

            @Test
            @TestMetadata("genericMethodWithInlineClassOverride.kt")
            public void testGenericMethodWithInlineClassOverride() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/genericMethodWithInlineClassOverride.kt");
            }

            @Test
            @TestMetadata("interfaceSuperCall.kt")
            public void testInterfaceSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/interfaceSuperCall.kt");
            }

            @Test
            @TestMetadata("overriddenDefaultInterfaceMethodCall.kt")
            public void testOverriddenDefaultInterfaceMethodCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/interfaceMethodCalls/overriddenDefaultInterfaceMethodCall.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/javaInterop")
        @TestDataPath("$PROJECT_ROOT")
        public class JavaInterop extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJavaInterop() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("inlineClasInSignature.kt")
            public void testInlineClasInSignature() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/inlineClasInSignature.kt");
            }

            @Test
            @TestMetadata("inlineClasInSignatureNonNull.kt")
            public void testInlineClasInSignatureNonNull() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/inlineClasInSignatureNonNull.kt");
            }

            @Test
            @TestMetadata("inlineClasInSignatureNullable.kt")
            public void testInlineClasInSignatureNullable() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/javaInterop/inlineClasInSignatureNullable.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods")
        @TestDataPath("$PROJECT_ROOT")
        public class Jvm8DefaultInterfaceMethods extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJvm8DefaultInterfaceMethods() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("javaDefaultMethod.kt")
            public void testJavaDefaultMethod() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/javaDefaultMethod.kt");
            }

            @Test
            @TestMetadata("javaDefaultMethodOverriddenByKotlin.kt")
            public void testJavaDefaultMethodOverriddenByKotlin() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/javaDefaultMethodOverriddenByKotlin.kt");
            }

            @Test
            @TestMetadata("jvmDefaultAll.kt")
            public void testJvmDefaultAll() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAll.kt");
            }

            @Test
            @TestMetadata("jvmDefaultAllPrimaryProperty.kt")
            public void testJvmDefaultAllPrimaryProperty() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAllPrimaryProperty.kt");
            }

            @Test
            @TestMetadata("jvmDefaultAllProperty.kt")
            public void testJvmDefaultAllProperty() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultAllProperty.kt");
            }

            @Test
            @TestMetadata("jvmDefaultEnable.kt")
            public void testJvmDefaultEnable() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultEnable.kt");
            }

            @Test
            @TestMetadata("jvmDefaultEnablePrimaryProperty.kt")
            public void testJvmDefaultEnablePrimaryProperty() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultEnablePrimaryProperty.kt");
            }

            @Test
            @TestMetadata("jvmDefaultEnableProperty.kt")
            public void testJvmDefaultEnableProperty() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultEnableProperty.kt");
            }

            @Test
            @TestMetadata("jvmDefaultGeneric.kt")
            public void testJvmDefaultGeneric() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultGeneric.kt");
            }

            @Test
            @TestMetadata("jvmDefaultSafeCall.kt")
            public void testJvmDefaultSafeCall() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSafeCall.kt");
            }

            @Test
            @TestMetadata("jvmDefaultSmartCast.kt")
            public void testJvmDefaultSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSmartCast.kt");
            }

            @Test
            @TestMetadata("jvmDefaultSuspend.kt")
            public void testJvmDefaultSuspend() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/jvm8DefaultInterfaceMethods/jvmDefaultSuspend.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/propertyDelegation")
        @TestDataPath("$PROJECT_ROOT")
        public class PropertyDelegation extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInPropertyDelegation() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/propertyDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("captureLocalVarDelegatedToInlineClass.kt")
            public void testCaptureLocalVarDelegatedToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/captureLocalVarDelegatedToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegateClassVarToInlineClass.kt")
            public void testDelegateClassVarToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegateClassVarToInlineClassWithProvideDelegate.kt")
            public void testDelegateClassVarToInlineClassWithProvideDelegate() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateClassVarToInlineClassWithProvideDelegate.kt");
            }

            @Test
            @TestMetadata("delegateCompanionVarToInlineClass.kt")
            public void testDelegateCompanionVarToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateCompanionVarToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegateJvmStaticCompanionVarToInlineClass.kt")
            public void testDelegateJvmStaticCompanionVarToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateJvmStaticCompanionVarToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegateLocalVarToInlineClass.kt")
            public void testDelegateLocalVarToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateLocalVarToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegateObjectVarToInlineClass.kt")
            public void testDelegateObjectVarToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateObjectVarToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegatePrivateCompanionVarToInlineClass.kt")
            public void testDelegatePrivateCompanionVarToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatePrivateCompanionVarToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegateTopLevelVarToInlineClass.kt")
            public void testDelegateTopLevelVarToInlineClass() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegateTopLevelVarToInlineClass.kt");
            }

            @Test
            @TestMetadata("delegatedPropertyOfInlineClassType.kt")
            public void testDelegatedPropertyOfInlineClassType() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/delegatedPropertyOfInlineClassType.kt");
            }

            @Test
            @TestMetadata("kt27070.kt")
            public void testKt27070() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt27070.kt");
            }

            @Test
            @TestMetadata("kt42933.kt")
            public void testKt42933() throws Exception {
                runTest("compiler/testData/codegen/box/inlineClasses/propertyDelegation/kt42933.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter")
        @TestDataPath("$PROJECT_ROOT")
        public class UnboxGenericParameter extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInUnboxGenericParameter() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface")
            @TestDataPath("$PROJECT_ROOT")
            public class FunInterface extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInFunInterface() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("any.kt")
                public void testAny() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/any.kt");
                }

                @Test
                @TestMetadata("anyN.kt")
                public void testAnyN() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/anyN.kt");
                }

                @Test
                @TestMetadata("iface.kt")
                public void testIface() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/iface.kt");
                }

                @Test
                @TestMetadata("ifaceChild.kt")
                public void testIfaceChild() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/ifaceChild.kt");
                }

                @Test
                @TestMetadata("primitive.kt")
                public void testPrimitive() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/primitive.kt");
                }

                @Test
                @TestMetadata("result.kt")
                public void testResult() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/result.kt");
                }

                @Test
                @TestMetadata("string.kt")
                public void testString() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/funInterface/string.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda")
            @TestDataPath("$PROJECT_ROOT")
            public class Lambda extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLambda() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("any.kt")
                public void testAny() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/any.kt");
                }

                @Test
                @TestMetadata("anyN.kt")
                public void testAnyN() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/anyN.kt");
                }

                @Test
                @TestMetadata("iface.kt")
                public void testIface() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/iface.kt");
                }

                @Test
                @TestMetadata("ifaceChild.kt")
                public void testIfaceChild() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/ifaceChild.kt");
                }

                @Test
                @TestMetadata("primitive.kt")
                public void testPrimitive() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/primitive.kt");
                }

                @Test
                @TestMetadata("result.kt")
                public void testResult() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/result.kt");
                }

                @Test
                @TestMetadata("string.kt")
                public void testString() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/lambda/string.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral")
            @TestDataPath("$PROJECT_ROOT")
            public class ObjectLiteral extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInObjectLiteral() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("any.kt")
                public void testAny() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/any.kt");
                }

                @Test
                @TestMetadata("anyN.kt")
                public void testAnyN() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/anyN.kt");
                }

                @Test
                @TestMetadata("iface.kt")
                public void testIface() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/iface.kt");
                }

                @Test
                @TestMetadata("ifaceChild.kt")
                public void testIfaceChild() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/ifaceChild.kt");
                }

                @Test
                @TestMetadata("primitive.kt")
                public void testPrimitive() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/primitive.kt");
                }

                @Test
                @TestMetadata("result.kt")
                public void testResult() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/result.kt");
                }

                @Test
                @TestMetadata("string.kt")
                public void testString() throws Exception {
                    runTest("compiler/testData/codegen/box/inlineClasses/unboxGenericParameter/objectLiteral/string.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/innerNested")
    @TestDataPath("$PROJECT_ROOT")
    public class InnerNested extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInInnerNested() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/innerNested"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("createNestedClass.kt")
        public void testCreateNestedClass() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/createNestedClass.kt");
        }

        @Test
        @TestMetadata("createdNestedInOuterMember.kt")
        public void testCreatedNestedInOuterMember() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/createdNestedInOuterMember.kt");
        }

        @Test
        @TestMetadata("extensionFun.kt")
        public void testExtensionFun() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/extensionFun.kt");
        }

        @Test
        @TestMetadata("extensionToNested.kt")
        public void testExtensionToNested() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/extensionToNested.kt");
        }

        @Test
        @TestMetadata("importNestedClass.kt")
        public void testImportNestedClass() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/importNestedClass.kt");
        }

        @Test
        @TestMetadata("innerGeneric.kt")
        public void testInnerGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerGeneric.kt");
        }

        @Test
        @TestMetadata("innerGenericClassFromJava.kt")
        public void testInnerGenericClassFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerGenericClassFromJava.kt");
        }

        @Test
        @TestMetadata("innerImplicitParameter.kt")
        public void testInnerImplicitParameter() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerImplicitParameter.kt");
        }

        @Test
        @TestMetadata("innerJavaClass.kt")
        public void testInnerJavaClass() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerJavaClass.kt");
        }

        @Test
        @TestMetadata("innerLabeledThis.kt")
        public void testInnerLabeledThis() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerLabeledThis.kt");
        }

        @Test
        @TestMetadata("innerSimple.kt")
        public void testInnerSimple() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerSimple.kt");
        }

        @Test
        @TestMetadata("innerWithDefaultArgument.kt")
        public void testInnerWithDefaultArgument() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerWithDefaultArgument.kt");
        }

        @Test
        @TestMetadata("innerWithDefaultInner.kt")
        public void testInnerWithDefaultInner() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/innerWithDefaultInner.kt");
        }

        @Test
        @TestMetadata("kt3132.kt")
        public void testKt3132() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/kt3132.kt");
        }

        @Test
        @TestMetadata("kt3927.kt")
        public void testKt3927() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/kt3927.kt");
        }

        @Test
        @TestMetadata("kt5363.kt")
        public void testKt5363() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/kt5363.kt");
        }

        @Test
        @TestMetadata("kt6804.kt")
        public void testKt6804() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/kt6804.kt");
        }

        @Test
        @TestMetadata("nestedClassInObject.kt")
        public void testNestedClassInObject() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedClassInObject.kt");
        }

        @Test
        @TestMetadata("nestedClassObject.kt")
        public void testNestedClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedClassObject.kt");
        }

        @Test
        @TestMetadata("nestedEnumConstant.kt")
        public void testNestedEnumConstant() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedEnumConstant.kt");
        }

        @Test
        @TestMetadata("nestedGeneric.kt")
        public void testNestedGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedGeneric.kt");
        }

        @Test
        @TestMetadata("nestedInPackage.kt")
        public void testNestedInPackage() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedInPackage.kt");
        }

        @Test
        @TestMetadata("nestedInnerClass.kt")
        public void testNestedInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedInnerClass.kt");
        }

        @Test
        @TestMetadata("nestedObjects.kt")
        public void testNestedObjects() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedObjects.kt");
        }

        @Test
        @TestMetadata("nestedSimple.kt")
        public void testNestedSimple() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/nestedSimple.kt");
        }

        @Test
        @TestMetadata("passingOuterRef.kt")
        public void testPassingOuterRef() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/passingOuterRef.kt");
        }

        @Test
        @TestMetadata("protectedNestedClass.kt")
        public void testProtectedNestedClass() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/protectedNestedClass.kt");
        }

        @Test
        @TestMetadata("protectedNestedClassFromJava.kt")
        public void testProtectedNestedClassFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/innerNested/protectedNestedClassFromJava.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/innerNested/superConstructorCall")
        @TestDataPath("$PROJECT_ROOT")
        public class SuperConstructorCall extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSuperConstructorCall() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/innerNested/superConstructorCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("deepInnerHierarchy.kt")
            public void testDeepInnerHierarchy() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepInnerHierarchy.kt");
            }

            @Test
            @TestMetadata("deepLocalHierarchy.kt")
            public void testDeepLocalHierarchy() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/deepLocalHierarchy.kt");
            }

            @Test
            @TestMetadata("innerExtendsInnerViaSecondaryConstuctor.kt")
            public void testInnerExtendsInnerViaSecondaryConstuctor() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerViaSecondaryConstuctor.kt");
            }

            @Test
            @TestMetadata("innerExtendsInnerWithProperOuterCapture.kt")
            public void testInnerExtendsInnerWithProperOuterCapture() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsInnerWithProperOuterCapture.kt");
            }

            @Test
            @TestMetadata("innerExtendsOuter.kt")
            public void testInnerExtendsOuter() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/innerExtendsOuter.kt");
            }

            @Test
            @TestMetadata("kt11833_1.kt")
            public void testKt11833_1() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_1.kt");
            }

            @Test
            @TestMetadata("kt11833_2.kt")
            public void testKt11833_2() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/kt11833_2.kt");
            }

            @Test
            @TestMetadata("localClassOuterDiffersFromInnerOuter.kt")
            public void testLocalClassOuterDiffersFromInnerOuter() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localClassOuterDiffersFromInnerOuter.kt");
            }

            @Test
            @TestMetadata("localExtendsInner.kt")
            public void testLocalExtendsInner() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsInner.kt");
            }

            @Test
            @TestMetadata("localExtendsLocalWithClosure.kt")
            public void testLocalExtendsLocalWithClosure() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localExtendsLocalWithClosure.kt");
            }

            @Test
            @TestMetadata("localWithClosureExtendsLocalWithClosure.kt")
            public void testLocalWithClosureExtendsLocalWithClosure() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/localWithClosureExtendsLocalWithClosure.kt");
            }

            @Test
            @TestMetadata("objectExtendsClassDefaultArgument.kt")
            public void testObjectExtendsClassDefaultArgument() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassDefaultArgument.kt");
            }

            @Test
            @TestMetadata("objectExtendsClassVararg.kt")
            public void testObjectExtendsClassVararg() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsClassVararg.kt");
            }

            @Test
            @TestMetadata("objectExtendsInner.kt")
            public void testObjectExtendsInner() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInner.kt");
            }

            @Test
            @TestMetadata("objectExtendsInnerDefaultArgument.kt")
            public void testObjectExtendsInnerDefaultArgument() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerDefaultArgument.kt");
            }

            @Test
            @TestMetadata("objectExtendsInnerOfLocalVarargAndDefault.kt")
            public void testObjectExtendsInnerOfLocalVarargAndDefault() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalVarargAndDefault.kt");
            }

            @Test
            @TestMetadata("objectExtendsInnerOfLocalWithCapture.kt")
            public void testObjectExtendsInnerOfLocalWithCapture() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsInnerOfLocalWithCapture.kt");
            }

            @Test
            @TestMetadata("objectExtendsLocalCaptureInSuperCall.kt")
            public void testObjectExtendsLocalCaptureInSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalCaptureInSuperCall.kt");
            }

            @Test
            @TestMetadata("objectExtendsLocalWithClosure.kt")
            public void testObjectExtendsLocalWithClosure() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocalWithClosure.kt");
            }

            @Test
            @TestMetadata("objectExtendsLocal_kt16858.kt")
            public void testObjectExtendsLocal_kt16858() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectExtendsLocal_kt16858.kt");
            }

            @Test
            @TestMetadata("objectOuterDiffersFromInnerOuter.kt")
            public void testObjectOuterDiffersFromInnerOuter() throws Exception {
                runTest("compiler/testData/codegen/box/innerNested/superConstructorCall/objectOuterDiffersFromInnerOuter.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/instructions")
    @TestDataPath("$PROJECT_ROOT")
    public class Instructions extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInInstructions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/instructions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/instructions/swap")
        @TestDataPath("$PROJECT_ROOT")
        public class Swap extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSwap() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/instructions/swap"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("swapRefToSharedVarInt.kt")
            public void testSwapRefToSharedVarInt() throws Exception {
                runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarInt.kt");
            }

            @Test
            @TestMetadata("swapRefToSharedVarLong.kt")
            public void testSwapRefToSharedVarLong() throws Exception {
                runTest("compiler/testData/codegen/box/instructions/swap/swapRefToSharedVarLong.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/intrinsics")
    @TestDataPath("$PROJECT_ROOT")
    public class Intrinsics extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInIntrinsics() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/intrinsics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("charToInt.kt")
        public void testCharToInt() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/charToInt.kt");
        }

        @Test
        @TestMetadata("defaultObjectMapping.kt")
        public void testDefaultObjectMapping() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/defaultObjectMapping.kt");
        }

        @Test
        @TestMetadata("ea35953.kt")
        public void testEa35953() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/ea35953.kt");
        }

        @Test
        @TestMetadata("incWithLabel.kt")
        public void testIncWithLabel() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/incWithLabel.kt");
        }

        @Test
        @TestMetadata("javaObjectType.kt")
        public void testJavaObjectType() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/javaObjectType.kt");
        }

        @Test
        @TestMetadata("javaPrimitiveType.kt")
        public void testJavaPrimitiveType() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/javaPrimitiveType.kt");
        }

        @Test
        @TestMetadata("javaPrimitiveType_UnitAndNothing.kt")
        public void testJavaPrimitiveType_UnitAndNothing() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/javaPrimitiveType_UnitAndNothing.kt");
        }

        @Test
        @TestMetadata("kt10131.kt")
        public void testKt10131() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt10131.kt");
        }

        @Test
        @TestMetadata("kt10131a.kt")
        public void testKt10131a() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt10131a.kt");
        }

        @Test
        @TestMetadata("kt12125.kt")
        public void testKt12125() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt12125.kt");
        }

        @Test
        @TestMetadata("kt12125_2.kt")
        public void testKt12125_2() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt12125_2.kt");
        }

        @Test
        @TestMetadata("kt12125_inc.kt")
        public void testKt12125_inc() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc.kt");
        }

        @Test
        @TestMetadata("kt12125_inc_2.kt")
        public void testKt12125_inc_2() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt12125_inc_2.kt");
        }

        @Test
        @TestMetadata("kt5937.kt")
        public void testKt5937() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt5937.kt");
        }

        @Test
        @TestMetadata("kt8666.kt")
        public void testKt8666() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/kt8666.kt");
        }

        @Test
        @TestMetadata("longRangeWithExplicitDot.kt")
        public void testLongRangeWithExplicitDot() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/longRangeWithExplicitDot.kt");
        }

        @Test
        @TestMetadata("monitorEnterMonitorExit.kt")
        public void testMonitorEnterMonitorExit() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/monitorEnterMonitorExit.kt");
        }

        @Test
        @TestMetadata("nonShortCircuitAnd.kt")
        public void testNonShortCircuitAnd() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/nonShortCircuitAnd.kt");
        }

        @Test
        @TestMetadata("nullPlusString.kt")
        public void testNullPlusString() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/nullPlusString.kt");
        }

        @Test
        @TestMetadata("prefixIncDec.kt")
        public void testPrefixIncDec() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/prefixIncDec.kt");
        }

        @Test
        @TestMetadata("rangeFromCollection.kt")
        public void testRangeFromCollection() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/rangeFromCollection.kt");
        }

        @Test
        @TestMetadata("stringFromCollection.kt")
        public void testStringFromCollection() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/stringFromCollection.kt");
        }

        @Test
        @TestMetadata("throwable.kt")
        public void testThrowable() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/throwable.kt");
        }

        @Test
        @TestMetadata("throwableCallableReference.kt")
        public void testThrowableCallableReference() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/throwableCallableReference.kt");
        }

        @Test
        @TestMetadata("throwableParamOrder.kt")
        public void testThrowableParamOrder() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/throwableParamOrder.kt");
        }

        @Test
        @TestMetadata("tostring.kt")
        public void testTostring() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/tostring.kt");
        }

        @Test
        @TestMetadata("trimMarginWithBlankString.kt")
        public void testTrimMarginWithBlankString() throws Exception {
            runTest("compiler/testData/codegen/box/intrinsics/trimMarginWithBlankString.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ir")
    @TestDataPath("$PROJECT_ROOT")
    public class Ir extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInIr() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anonymousClassLeak.kt")
        public void testAnonymousClassLeak() throws Exception {
            runTest("compiler/testData/codegen/box/ir/anonymousClassLeak.kt");
        }

        @Test
        @TestMetadata("anonymousObjectInForLoopIteratorAndBody.kt")
        public void testAnonymousObjectInForLoopIteratorAndBody() throws Exception {
            runTest("compiler/testData/codegen/box/ir/anonymousObjectInForLoopIteratorAndBody.kt");
        }

        @Test
        @TestMetadata("anonymousObjectInGenericFun.kt")
        public void testAnonymousObjectInGenericFun() throws Exception {
            runTest("compiler/testData/codegen/box/ir/anonymousObjectInGenericFun.kt");
        }

        @Test
        @TestMetadata("anonymousObjectInsideElvis.kt")
        public void testAnonymousObjectInsideElvis() throws Exception {
            runTest("compiler/testData/codegen/box/ir/anonymousObjectInsideElvis.kt");
        }

        @Test
        @TestMetadata("clashingFakeOverrideSignatures.kt")
        public void testClashingFakeOverrideSignatures() throws Exception {
            runTest("compiler/testData/codegen/box/ir/clashingFakeOverrideSignatures.kt");
        }

        @Test
        @TestMetadata("classInitializers.kt")
        public void testClassInitializers() throws Exception {
            runTest("compiler/testData/codegen/box/ir/classInitializers.kt");
        }

        @Test
        @TestMetadata("enumClass.kt")
        public void testEnumClass() throws Exception {
            runTest("compiler/testData/codegen/box/ir/enumClass.kt");
        }

        @Test
        @TestMetadata("enumClass2.kt")
        public void testEnumClass2() throws Exception {
            runTest("compiler/testData/codegen/box/ir/enumClass2.kt");
        }

        @Test
        @TestMetadata("enumClass3.kt")
        public void testEnumClass3() throws Exception {
            runTest("compiler/testData/codegen/box/ir/enumClass3.kt");
        }

        @Test
        @TestMetadata("fileClassInitializers.kt")
        public void testFileClassInitializers() throws Exception {
            runTest("compiler/testData/codegen/box/ir/fileClassInitializers.kt");
        }

        @Test
        @TestMetadata("genericCompanion.kt")
        public void testGenericCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/ir/genericCompanion.kt");
        }

        @Test
        @TestMetadata("hashCodeOnGenericSubstitutedWithPrimitive.kt")
        public void testHashCodeOnGenericSubstitutedWithPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/ir/hashCodeOnGenericSubstitutedWithPrimitive.kt");
        }

        @Test
        @TestMetadata("kt25405.kt")
        public void testKt25405() throws Exception {
            runTest("compiler/testData/codegen/box/ir/kt25405.kt");
        }

        @Test
        @TestMetadata("kt29833.kt")
        public void testKt29833() throws Exception {
            runTest("compiler/testData/codegen/box/ir/kt29833.kt");
        }

        @Test
        @TestMetadata("kt40083.kt")
        public void testKt40083() throws Exception {
            runTest("compiler/testData/codegen/box/ir/kt40083.kt");
        }

        @Test
        @TestMetadata("kt41765.kt")
        public void testKt41765() throws Exception {
            runTest("compiler/testData/codegen/box/ir/kt41765.kt");
        }

        @Test
        @TestMetadata("objectClass.kt")
        public void testObjectClass() throws Exception {
            runTest("compiler/testData/codegen/box/ir/objectClass.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/ir/simple.kt");
        }

        @Test
        @TestMetadata("suppressConflictingSignatureErrors.kt")
        public void testSuppressConflictingSignatureErrors() throws Exception {
            runTest("compiler/testData/codegen/box/ir/suppressConflictingSignatureErrors.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ir/closureConversion")
        @TestDataPath("$PROJECT_ROOT")
        public class ClosureConversion extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInClosureConversion() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/closureConversion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("closureConversion1.kt")
            public void testClosureConversion1() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion1.kt");
            }

            @Test
            @TestMetadata("closureConversion2.kt")
            public void testClosureConversion2() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion2.kt");
            }

            @Test
            @TestMetadata("closureConversion3.kt")
            public void testClosureConversion3() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion3.kt");
            }

            @Test
            @TestMetadata("closureConversion4.kt")
            public void testClosureConversion4() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/closureConversion4.kt");
            }

            @Test
            @TestMetadata("innerClass1.kt")
            public void testInnerClass1() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/innerClass1.kt");
            }

            @Test
            @TestMetadata("innerClass2.kt")
            public void testInnerClass2() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/innerClass2.kt");
            }

            @Test
            @TestMetadata("mutable1.kt")
            public void testMutable1() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/mutable1.kt");
            }

            @Test
            @TestMetadata("mutablePrimitives.kt")
            public void testMutablePrimitives() throws Exception {
                runTest("compiler/testData/codegen/box/ir/closureConversion/mutablePrimitives.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ir/primitiveNumberComparisons")
        @TestDataPath("$PROJECT_ROOT")
        public class PrimitiveNumberComparisons extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInPrimitiveNumberComparisons() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/primitiveNumberComparisons"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("comparableToDouble.kt")
            public void testComparableToDouble() throws Exception {
                runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/comparableToDouble.kt");
            }

            @Test
            @TestMetadata("doubleEqeq.kt")
            public void testDoubleEqeq() throws Exception {
                runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/doubleEqeq.kt");
            }

            @Test
            @TestMetadata("floatEqeq.kt")
            public void testFloatEqeq() throws Exception {
                runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/floatEqeq.kt");
            }

            @Test
            @TestMetadata("mixedNumberTypes.kt")
            public void testMixedNumberTypes() throws Exception {
                runTest("compiler/testData/codegen/box/ir/primitiveNumberComparisons/mixedNumberTypes.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ir/serializationRegressions")
        @TestDataPath("$PROJECT_ROOT")
        public class SerializationRegressions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSerializationRegressions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ir/serializationRegressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("deepGenericDelegatedProperty.kt")
            public void testDeepGenericDelegatedProperty() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/deepGenericDelegatedProperty.kt");
            }

            @Test
            @TestMetadata("dispatchReceiverValue.kt")
            public void testDispatchReceiverValue() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/dispatchReceiverValue.kt");
            }

            @Test
            @TestMetadata("genericProperty.kt")
            public void testGenericProperty() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/genericProperty.kt");
            }

            @Test
            @TestMetadata("innerClassInEnumEntryClass.kt")
            public void testInnerClassInEnumEntryClass() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/innerClassInEnumEntryClass.kt");
            }

            @Test
            @TestMetadata("signatureClash.kt")
            public void testSignatureClash() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/signatureClash.kt");
            }

            @Test
            @TestMetadata("transitiveClash.kt")
            public void testTransitiveClash() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/transitiveClash.kt");
            }

            @Test
            @TestMetadata("useImportedMember.kt")
            public void testUseImportedMember() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/useImportedMember.kt");
            }

            @Test
            @TestMetadata("varAsFunctionCall.kt")
            public void testVarAsFunctionCall() throws Exception {
                runTest("compiler/testData/codegen/box/ir/serializationRegressions/varAsFunctionCall.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/javaInterop")
    @TestDataPath("$PROJECT_ROOT")
    public class JavaInterop extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJavaInterop() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("ambiguousJavaVararg.kt")
        public void testAmbiguousJavaVararg() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/ambiguousJavaVararg.kt");
        }

        @Test
        @TestMetadata("genericSamProjectedOut.kt")
        public void testGenericSamProjectedOut() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/genericSamProjectedOut.kt");
        }

        @Test
        @TestMetadata("genericSamProjectedOutWithNewInference.kt")
        public void testGenericSamProjectedOutWithNewInference() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/genericSamProjectedOutWithNewInference.kt");
        }

        @Test
        @TestMetadata("genericSamSmartcast.kt")
        public void testGenericSamSmartcast() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/genericSamSmartcast.kt");
        }

        @Test
        @TestMetadata("kt43217.kt")
        public void testKt43217() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/kt43217.kt");
        }

        @Test
        @TestMetadata("lambdaInstanceOf.kt")
        public void testLambdaInstanceOf() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/lambdaInstanceOf.kt");
        }

        @Test
        @TestMetadata("protectedField.kt")
        public void testProtectedField() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/protectedField.kt");
        }

        @Test
        @TestMetadata("samTypeParameter.kt")
        public void testSamTypeParameter() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/samTypeParameter.kt");
        }

        @Test
        @TestMetadata("samUnboundTypeParameter.kt")
        public void testSamUnboundTypeParameter() throws Exception {
            runTest("compiler/testData/codegen/box/javaInterop/samUnboundTypeParameter.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/javaInterop/generics")
        @TestDataPath("$PROJECT_ROOT")
        public class Generics extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInGenerics() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/generics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("allWildcardsOnClass.kt")
            public void testAllWildcardsOnClass() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/generics/allWildcardsOnClass.kt");
            }

            @Test
            @TestMetadata("covariantOverrideWithDeclarationSiteProjection.kt")
            public void testCovariantOverrideWithDeclarationSiteProjection() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/generics/covariantOverrideWithDeclarationSiteProjection.kt");
            }

            @Test
            @TestMetadata("invariantArgumentsNoWildcard.kt")
            public void testInvariantArgumentsNoWildcard() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/generics/invariantArgumentsNoWildcard.kt");
            }

            @Test
            @TestMetadata("javaNestedSamInterface.kt")
            public void testJavaNestedSamInterface() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/generics/javaNestedSamInterface.kt");
            }

            @Test
            @TestMetadata("kt42824.kt")
            public void testKt42824() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/generics/kt42824.kt");
            }

            @Test
            @TestMetadata("kt42825.kt")
            public void testKt42825() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/generics/kt42825.kt");
            }

            @Test
            @TestMetadata("propertyVarianceConflict.kt")
            public void testPropertyVarianceConflict() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/generics/propertyVarianceConflict.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions")
        @TestDataPath("$PROJECT_ROOT")
        public class NotNullAssertions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInNotNullAssertions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("destructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12.kt")
            public void testDestructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/destructuringAssignmentWithNullabilityAssertionOnExtensionReceiver_lv12.kt");
            }

            @Test
            @TestMetadata("errorMessage.kt")
            public void testErrorMessage() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/errorMessage.kt");
            }

            @Test
            @TestMetadata("extensionReceiverParameter.kt")
            public void testExtensionReceiverParameter() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/extensionReceiverParameter.kt");
            }

            @Test
            @TestMetadata("functionAssertion.kt")
            public void testFunctionAssertion() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/functionAssertion.kt");
            }

            @Test
            @TestMetadata("functionWithBigArity.kt")
            public void testFunctionWithBigArity() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/functionWithBigArity.kt");
            }

            @Test
            @TestMetadata("incWithNullabilityAssertionOnExtensionReceiver.kt")
            public void testIncWithNullabilityAssertionOnExtensionReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiver.kt");
            }

            @Test
            @TestMetadata("incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator.kt")
            public void testIncWithNullabilityAssertionOnExtensionReceiverInPrivateOperator() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator.kt");
            }

            @Test
            @TestMetadata("kt18911.kt")
            public void testKt18911() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/kt18911.kt");
            }

            @Test
            @TestMetadata("kt24258.kt")
            public void testKt24258() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/kt24258.kt");
            }

            @Test
            @TestMetadata("kt24258nn.kt")
            public void testKt24258nn() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/kt24258nn.kt");
            }

            @Test
            @TestMetadata("localEntities.kt")
            public void testLocalEntities() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/localEntities.kt");
            }

            @Test
            @TestMetadata("mapPut.kt")
            public void testMapPut() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/mapPut.kt");
            }

            @Test
            @TestMetadata("nonNullableTypeParameter.kt")
            public void testNonNullableTypeParameter() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nonNullableTypeParameter.kt");
            }

            @Test
            @TestMetadata("nullabilityAssertionOnExtensionReceiver.kt")
            public void testNullabilityAssertionOnExtensionReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnExtensionReceiver.kt");
            }

            @Test
            @TestMetadata("nullabilityAssertionOnInlineFunExtensionReceiver.kt")
            public void testNullabilityAssertionOnInlineFunExtensionReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnInlineFunExtensionReceiver.kt");
            }

            @Test
            @TestMetadata("nullabilityAssertionOnMemberExtensionReceiver.kt")
            public void testNullabilityAssertionOnMemberExtensionReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnMemberExtensionReceiver.kt");
            }

            @Test
            @TestMetadata("nullabilityAssertionOnPrivateMemberExtensionReceiver.kt")
            public void testNullabilityAssertionOnPrivateMemberExtensionReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullabilityAssertionOnPrivateMemberExtensionReceiver.kt");
            }

            @Test
            @TestMetadata("nullableTypeParameter.kt")
            public void testNullableTypeParameter() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullableTypeParameter.kt");
            }

            @Test
            @TestMetadata("paramAssertionMessage.kt")
            public void testParamAssertionMessage() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/paramAssertionMessage.kt");
            }

            @Test
            @TestMetadata("privateOperatorParameterAssertions.kt")
            public void testPrivateOperatorParameterAssertions() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/privateOperatorParameterAssertions.kt");
            }

            @Test
            @TestMetadata("staticCallErrorMessage.kt")
            public void testStaticCallErrorMessage() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/staticCallErrorMessage.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability")
            @TestDataPath("$PROJECT_ROOT")
            public class EnhancedNullability extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInEnhancedNullability() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("inFunctionWithExpressionBody.kt")
                public void testInFunctionWithExpressionBody() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inFunctionWithExpressionBody.kt");
                }

                @Test
                @TestMetadata("inFunctionWithExpressionBodyWithJavaGeneric.kt")
                public void testInFunctionWithExpressionBodyWithJavaGeneric() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inFunctionWithExpressionBodyWithJavaGeneric.kt");
                }

                @Test
                @TestMetadata("inLambdaReturnWithExpectedType.kt")
                public void testInLambdaReturnWithExpectedType() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLambdaReturnWithExpectedType.kt");
                }

                @Test
                @TestMetadata("inLocalFunctionWithExpressionBody.kt")
                public void testInLocalFunctionWithExpressionBody() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLocalFunctionWithExpressionBody.kt");
                }

                @Test
                @TestMetadata("inLocalVariableInitializer.kt")
                public void testInLocalVariableInitializer() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inLocalVariableInitializer.kt");
                }

                @Test
                @TestMetadata("inMemberPropertyInitializer.kt")
                public void testInMemberPropertyInitializer() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inMemberPropertyInitializer.kt");
                }

                @Test
                @TestMetadata("inPropertyGetterWithExpressionBody.kt")
                public void testInPropertyGetterWithExpressionBody() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inPropertyGetterWithExpressionBody.kt");
                }

                @Test
                @TestMetadata("inTopLevelPropertyInitializer.kt")
                public void testInTopLevelPropertyInitializer() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/enhancedNullability/inTopLevelPropertyInitializer.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue")
            @TestDataPath("$PROJECT_ROOT")
            public class NullCheckOnLambdaReturnValue extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInNullCheckOnLambdaReturnValue() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("nnStringVsT.kt")
                public void testNnStringVsT() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsT.kt");
                }

                @Test
                @TestMetadata("nnStringVsTAny.kt")
                public void testNnStringVsTAny() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTAny.kt");
                }

                @Test
                @TestMetadata("nnStringVsTConstrained.kt")
                public void testNnStringVsTConstrained() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTConstrained.kt");
                }

                @Test
                @TestMetadata("nnStringVsTXArray.kt")
                public void testNnStringVsTXArray() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTXArray.kt");
                }

                @Test
                @TestMetadata("nnStringVsTXString.kt")
                public void testNnStringVsTXString() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/nnStringVsTXString.kt");
                }

                @Test
                @TestMetadata("stringVsT.kt")
                public void testStringVsT() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsT.kt");
                }

                @Test
                @TestMetadata("stringVsTAny.kt")
                public void testStringVsTAny() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTAny.kt");
                }

                @Test
                @TestMetadata("stringVsTConstrained.kt")
                public void testStringVsTConstrained() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTConstrained.kt");
                }

                @Test
                @TestMetadata("stringVsTXArray.kt")
                public void testStringVsTXArray() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTXArray.kt");
                }

                @Test
                @TestMetadata("stringVsTXString.kt")
                public void testStringVsTXString() throws Exception {
                    runTest("compiler/testData/codegen/box/javaInterop/notNullAssertions/nullCheckOnLambdaReturnValue/stringVsTXString.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/javaInterop/objectMethods")
        @TestDataPath("$PROJECT_ROOT")
        public class ObjectMethods extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInObjectMethods() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/javaInterop/objectMethods"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("cloneCallsConstructor.kt")
            public void testCloneCallsConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsConstructor.kt");
            }

            @Test
            @TestMetadata("cloneCallsSuper.kt")
            public void testCloneCallsSuper() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsSuper.kt");
            }

            @Test
            @TestMetadata("cloneCallsSuperAndModifies.kt")
            public void testCloneCallsSuperAndModifies() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneCallsSuperAndModifies.kt");
            }

            @Test
            @TestMetadata("cloneHashSet.kt")
            public void testCloneHashSet() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneHashSet.kt");
            }

            @Test
            @TestMetadata("cloneHierarchy.kt")
            public void testCloneHierarchy() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneHierarchy.kt");
            }

            @Test
            @TestMetadata("cloneableClassWithoutClone.kt")
            public void testCloneableClassWithoutClone() throws Exception {
                runTest("compiler/testData/codegen/box/javaInterop/objectMethods/cloneableClassWithoutClone.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jdk")
    @TestDataPath("$PROJECT_ROOT")
    public class Jdk extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJdk() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jdk"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("arrayList.kt")
        public void testArrayList() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/arrayList.kt");
        }

        @Test
        @TestMetadata("hashMap.kt")
        public void testHashMap() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/hashMap.kt");
        }

        @Test
        @TestMetadata("iteratingOverHashMap.kt")
        public void testIteratingOverHashMap() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/iteratingOverHashMap.kt");
        }

        @Test
        @TestMetadata("kt1397.kt")
        public void testKt1397() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/kt1397.kt");
        }

        @Test
        @TestMetadata("removeIf.kt")
        public void testRemoveIf() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/removeIf.kt");
        }

        @Test
        @TestMetadata("stream.kt")
        public void testStream() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/stream.kt");
        }

        @Test
        @TestMetadata("streamBackwardCompatibility.kt")
        public void testStreamBackwardCompatibility() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/streamBackwardCompatibility.kt");
        }

        @Test
        @TestMetadata("useStream.kt")
        public void testUseStream() throws Exception {
            runTest("compiler/testData/codegen/box/jdk/useStream.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvm8")
    @TestDataPath("$PROJECT_ROOT")
    public class Jvm8 extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJvm8() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("bridgeInClass.kt")
        public void testBridgeInClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/bridgeInClass.kt");
        }

        @Test
        @TestMetadata("bridgeInInterface.kt")
        public void testBridgeInInterface() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/bridgeInInterface.kt");
        }

        @Test
        @TestMetadata("capturedSuperCall.kt")
        public void testCapturedSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/capturedSuperCall.kt");
        }

        @Test
        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/defaultArgs.kt");
        }

        @Test
        @TestMetadata("inlineFromAnotherFile.kt")
        public void testInlineFromAnotherFile() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/inlineFromAnotherFile.kt");
        }

        @Test
        @TestMetadata("inlineFromStdlib.kt")
        public void testInlineFromStdlib() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/inlineFromStdlib.kt");
        }

        @Test
        @TestMetadata("kt11969.kt")
        public void testKt11969() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt11969.kt");
        }

        @Test
        @TestMetadata("kt14243.kt")
        public void testKt14243() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt14243.kt");
        }

        @Test
        @TestMetadata("kt14243_2.kt")
        public void testKt14243_2() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt14243_2.kt");
        }

        @Test
        @TestMetadata("kt14243_prop.kt")
        public void testKt14243_prop() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt14243_prop.kt");
        }

        @Test
        @TestMetadata("kt16581.kt")
        public void testKt16581() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt16581.kt");
        }

        @Test
        @TestMetadata("kt16581_2.kt")
        public void testKt16581_2() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt16581_2.kt");
        }

        @Test
        @TestMetadata("kt16588.kt")
        public void testKt16588() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt16588.kt");
        }

        @Test
        @TestMetadata("kt29242.kt")
        public void testKt29242() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt29242.kt");
        }

        @Test
        @TestMetadata("kt33054.kt")
        public void testKt33054() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt33054.kt");
        }

        @Test
        @TestMetadata("kt6301.kt")
        public void testKt6301() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt6301.kt");
        }

        @Test
        @TestMetadata("kt6301_2.kt")
        public void testKt6301_2() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/kt6301_2.kt");
        }

        @Test
        @TestMetadata("oneImplementation.kt")
        public void testOneImplementation() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/oneImplementation.kt");
        }

        @Test
        @TestMetadata("oneImplementation2.kt")
        public void testOneImplementation2() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/oneImplementation2.kt");
        }

        @Test
        @TestMetadata("simpleCall.kt")
        public void testSimpleCall() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/simpleCall.kt");
        }

        @Test
        @TestMetadata("simpleProperty.kt")
        public void testSimpleProperty() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/simpleProperty.kt");
        }

        @Test
        @TestMetadata("treeMapBridge.kt")
        public void testTreeMapBridge() throws Exception {
            runTest("compiler/testData/codegen/box/jvm8/treeMapBridge.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvm8/defaults")
        @TestDataPath("$PROJECT_ROOT")
        public class Defaults extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("accessor.kt")
            public void testAccessor() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/accessor.kt");
            }

            @Test
            @TestMetadata("accessorFromCompanion.kt")
            public void testAccessorFromCompanion() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/accessorFromCompanion.kt");
            }

            @Test
            @TestMetadata("accessorsFromDefaultImpls.kt")
            public void testAccessorsFromDefaultImpls() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/accessorsFromDefaultImpls.kt");
            }

            @Test
            public void testAllFilesPresentInDefaults() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("bridgeInClass.kt")
            public void testBridgeInClass() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/bridgeInClass.kt");
            }

            @Test
            @TestMetadata("bridgeInInterface.kt")
            public void testBridgeInInterface() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/bridgeInInterface.kt");
            }

            @Test
            @TestMetadata("bridgeInInterface2.kt")
            public void testBridgeInInterface2() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/bridgeInInterface2.kt");
            }

            @Test
            @TestMetadata("bridgeInInterfaceWithProperties.kt")
            public void testBridgeInInterfaceWithProperties() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/bridgeInInterfaceWithProperties.kt");
            }

            @Test
            @TestMetadata("bridgeInInterfaceWithProperties2.kt")
            public void testBridgeInInterfaceWithProperties2() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/bridgeInInterfaceWithProperties2.kt");
            }

            @Test
            @TestMetadata("bridgeWithJava.kt")
            public void testBridgeWithJava() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/bridgeWithJava.kt");
            }

            @Test
            @TestMetadata("callableReference.kt")
            public void testCallableReference() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/callableReference.kt");
            }

            @Test
            @TestMetadata("capturedSuperCall.kt")
            public void testCapturedSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/capturedSuperCall.kt");
            }

            @Test
            @TestMetadata("defaultArgs.kt")
            public void testDefaultArgs() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/defaultArgs.kt");
            }

            @Test
            @TestMetadata("defaultArgsViaAnonymousObject.kt")
            public void testDefaultArgsViaAnonymousObject() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/defaultArgsViaAnonymousObject.kt");
            }

            @Test
            @TestMetadata("diamond.kt")
            public void testDiamond() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/diamond.kt");
            }

            @Test
            @TestMetadata("inheritedFunctionWithDefaultParameters.kt")
            public void testInheritedFunctionWithDefaultParameters() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/inheritedFunctionWithDefaultParameters.kt");
            }

            @Test
            @TestMetadata("inline.kt")
            public void testInline() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/inline.kt");
            }

            @Test
            @TestMetadata("inlineProperty.kt")
            public void testInlineProperty() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/inlineProperty.kt");
            }

            @Test
            @TestMetadata("kt11969.kt")
            public void testKt11969() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/kt11969.kt");
            }

            @Test
            @TestMetadata("kt14243.kt")
            public void testKt14243() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/kt14243.kt");
            }

            @Test
            @TestMetadata("kt14243_2.kt")
            public void testKt14243_2() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/kt14243_2.kt");
            }

            @Test
            @TestMetadata("kt14243_prop.kt")
            public void testKt14243_prop() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/kt14243_prop.kt");
            }

            @Test
            @TestMetadata("kt40920.kt")
            public void testKt40920() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/kt40920.kt");
            }

            @Test
            @TestMetadata("kt42674.kt")
            public void testKt42674() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/kt42674.kt");
            }

            @Test
            @TestMetadata("oneImplementation.kt")
            public void testOneImplementation() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/oneImplementation.kt");
            }

            @Test
            @TestMetadata("oneImplementation2.kt")
            public void testOneImplementation2() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/oneImplementation2.kt");
            }

            @Test
            @TestMetadata("privateDefaultFromDefaultImpl.kt")
            public void testPrivateDefaultFromDefaultImpl() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/privateDefaultFromDefaultImpl.kt");
            }

            @Test
            @TestMetadata("privateInDefaultImpls.kt")
            public void testPrivateInDefaultImpls() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/privateInDefaultImpls.kt");
            }

            @Test
            @TestMetadata("simpleCall.kt")
            public void testSimpleCall() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/simpleCall.kt");
            }

            @Test
            @TestMetadata("simpleProperty.kt")
            public void testSimpleProperty() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/simpleProperty.kt");
            }

            @Test
            @TestMetadata("superCall.kt")
            public void testSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/defaults/superCall.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/allCompatibility")
            @TestDataPath("$PROJECT_ROOT")
            public class AllCompatibility extends AbstractBlackBoxCodegenTest {
                @Test
                @TestMetadata("accessor.kt")
                public void testAccessor() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/accessor.kt");
                }

                @Test
                @TestMetadata("accessorFromCompanion.kt")
                public void testAccessorFromCompanion() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/accessorFromCompanion.kt");
                }

                @Test
                public void testAllFilesPresentInAllCompatibility() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/allCompatibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("bridge.kt")
                public void testBridge() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridge.kt");
                }

                @Test
                @TestMetadata("bridge2.kt")
                public void testBridge2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridge2.kt");
                }

                @Test
                @TestMetadata("bridge3.kt")
                public void testBridge3() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridge3.kt");
                }

                @Test
                @TestMetadata("bridgeInClass.kt")
                public void testBridgeInClass() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInClass.kt");
                }

                @Test
                @TestMetadata("bridgeInInterface.kt")
                public void testBridgeInInterface() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterface.kt");
                }

                @Test
                @TestMetadata("bridgeInInterface2.kt")
                public void testBridgeInInterface2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterface2.kt");
                }

                @Test
                @TestMetadata("bridgeInInterfaceWithProperties.kt")
                public void testBridgeInInterfaceWithProperties() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterfaceWithProperties.kt");
                }

                @Test
                @TestMetadata("bridgeInInterfaceWithProperties2.kt")
                public void testBridgeInInterfaceWithProperties2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeInInterfaceWithProperties2.kt");
                }

                @Test
                @TestMetadata("bridgeWithJava.kt")
                public void testBridgeWithJava() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithJava.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties.kt")
                public void testBridgeWithProperties() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithProperties.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties2.kt")
                public void testBridgeWithProperties2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithProperties2.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties3.kt")
                public void testBridgeWithProperties3() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/bridgeWithProperties3.kt");
                }

                @Test
                @TestMetadata("callStackTrace.kt")
                public void testCallStackTrace() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/callStackTrace.kt");
                }

                @Test
                @TestMetadata("defaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/defaultArgs.kt");
                }

                @Test
                @TestMetadata("defaultArgsViaAnonymousObject.kt")
                public void testDefaultArgsViaAnonymousObject() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/defaultArgsViaAnonymousObject.kt");
                }

                @Test
                @TestMetadata("deprecatedDefaultMethod.kt")
                public void testDeprecatedDefaultMethod() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/deprecatedDefaultMethod.kt");
                }

                @Test
                @TestMetadata("funInterface.kt")
                public void testFunInterface() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/funInterface.kt");
                }

                @Test
                @TestMetadata("inheritedFunctionWithDefaultParameters.kt")
                public void testInheritedFunctionWithDefaultParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/inheritedFunctionWithDefaultParameters.kt");
                }

                @Test
                @TestMetadata("inheritedJvmDefault.kt")
                public void testInheritedJvmDefault() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/inheritedJvmDefault.kt");
                }

                @Test
                @TestMetadata("interfaceExtension.kt")
                public void testInterfaceExtension() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/interfaceExtension.kt");
                }

                @Test
                @TestMetadata("kt14243.kt")
                public void testKt14243() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt14243.kt");
                }

                @Test
                @TestMetadata("kt14243_2.kt")
                public void testKt14243_2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt14243_2.kt");
                }

                @Test
                @TestMetadata("kt42674.kt")
                public void testKt42674() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/kt42674.kt");
                }

                @Test
                @TestMetadata("privateFunInInterface.kt")
                public void testPrivateFunInInterface() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/privateFunInInterface.kt");
                }

                @Test
                @TestMetadata("propertyAnnotation.kt")
                public void testPropertyAnnotation() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/propertyAnnotation.kt");
                }

                @Test
                @TestMetadata("simpleFunction.kt")
                public void testSimpleFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/simpleFunction.kt");
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy")
                @TestDataPath("$PROJECT_ROOT")
                public class DelegationBy extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInDelegationBy() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("simple.kt")
                    public void testSimple() throws Exception {
                        runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy/simple.kt");
                    }

                    @Test
                    @TestMetadata("simpleProperty.kt")
                    public void testSimpleProperty() throws Exception {
                        runTest("compiler/testData/codegen/box/jvm8/defaults/allCompatibility/delegationBy/simpleProperty.kt");
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/compatibility")
            @TestDataPath("$PROJECT_ROOT")
            public class Compatibility extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInCompatibility() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/compatibility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("bridge.kt")
                public void testBridge() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/bridge.kt");
                }

                @Test
                @TestMetadata("bridge2.kt")
                public void testBridge2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/bridge2.kt");
                }

                @Test
                @TestMetadata("bridge3.kt")
                public void testBridge3() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/bridge3.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties.kt")
                public void testBridgeWithProperties() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/bridgeWithProperties.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties2.kt")
                public void testBridgeWithProperties2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/bridgeWithProperties2.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties3.kt")
                public void testBridgeWithProperties3() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/bridgeWithProperties3.kt");
                }

                @Test
                @TestMetadata("defaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/defaultArgs.kt");
                }

                @Test
                @TestMetadata("defaultArgsViaAnonymousObject.kt")
                public void testDefaultArgsViaAnonymousObject() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/defaultArgsViaAnonymousObject.kt");
                }

                @Test
                @TestMetadata("deprecatedAnnotation.kt")
                public void testDeprecatedAnnotation() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/deprecatedAnnotation.kt");
                }

                @Test
                @TestMetadata("deprecatedDefaultMethod.kt")
                public void testDeprecatedDefaultMethod() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/deprecatedDefaultMethod.kt");
                }

                @Test
                @TestMetadata("inheritedFunctionWithDefaultParameters.kt")
                public void testInheritedFunctionWithDefaultParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/inheritedFunctionWithDefaultParameters.kt");
                }

                @Test
                @TestMetadata("inheritedJvmDefault.kt")
                public void testInheritedJvmDefault() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/inheritedJvmDefault.kt");
                }

                @Test
                @TestMetadata("interfaceExtension.kt")
                public void testInterfaceExtension() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/interfaceExtension.kt");
                }

                @Test
                @TestMetadata("kt42674.kt")
                public void testKt42674() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/kt42674.kt");
                }

                @Test
                @TestMetadata("propertyAnnotation.kt")
                public void testPropertyAnnotation() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/propertyAnnotation.kt");
                }

                @Test
                @TestMetadata("simpleFunction.kt")
                public void testSimpleFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/compatibility/simpleFunction.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/delegationBy")
            @TestDataPath("$PROJECT_ROOT")
            public class DelegationBy extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInDelegationBy() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/delegationBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("simple.kt")
                public void testSimple() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/delegationBy/simple.kt");
                }

                @Test
                @TestMetadata("simpleProperty.kt")
                public void testSimpleProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/delegationBy/simpleProperty.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls")
            @TestDataPath("$PROJECT_ROOT")
            public class NoDefaultImpls extends AbstractBlackBoxCodegenTest {
                @Test
                @TestMetadata("accessor.kt")
                public void testAccessor() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/accessor.kt");
                }

                @Test
                @TestMetadata("accessorFromCompanion.kt")
                public void testAccessorFromCompanion() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/accessorFromCompanion.kt");
                }

                @Test
                public void testAllFilesPresentInNoDefaultImpls() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("bridge.kt")
                public void testBridge() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridge.kt");
                }

                @Test
                @TestMetadata("bridge2.kt")
                public void testBridge2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridge2.kt");
                }

                @Test
                @TestMetadata("bridge3.kt")
                public void testBridge3() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridge3.kt");
                }

                @Test
                @TestMetadata("bridgeInClass.kt")
                public void testBridgeInClass() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInClass.kt");
                }

                @Test
                @TestMetadata("bridgeInInterface.kt")
                public void testBridgeInInterface() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterface.kt");
                }

                @Test
                @TestMetadata("bridgeInInterface2.kt")
                public void testBridgeInInterface2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterface2.kt");
                }

                @Test
                @TestMetadata("bridgeInInterfaceWithProperties.kt")
                public void testBridgeInInterfaceWithProperties() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterfaceWithProperties.kt");
                }

                @Test
                @TestMetadata("bridgeInInterfaceWithProperties2.kt")
                public void testBridgeInInterfaceWithProperties2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeInInterfaceWithProperties2.kt");
                }

                @Test
                @TestMetadata("bridgeWithJava.kt")
                public void testBridgeWithJava() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithJava.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties.kt")
                public void testBridgeWithProperties() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithProperties.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties2.kt")
                public void testBridgeWithProperties2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithProperties2.kt");
                }

                @Test
                @TestMetadata("bridgeWithProperties3.kt")
                public void testBridgeWithProperties3() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/bridgeWithProperties3.kt");
                }

                @Test
                @TestMetadata("defaultArgs.kt")
                public void testDefaultArgs() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/defaultArgs.kt");
                }

                @Test
                @TestMetadata("defaultArgsViaAnonymousObject.kt")
                public void testDefaultArgsViaAnonymousObject() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/defaultArgsViaAnonymousObject.kt");
                }

                @Test
                @TestMetadata("funInterface.kt")
                public void testFunInterface() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/funInterface.kt");
                }

                @Test
                @TestMetadata("inheritedFunctionWithDefaultParameters.kt")
                public void testInheritedFunctionWithDefaultParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/inheritedFunctionWithDefaultParameters.kt");
                }

                @Test
                @TestMetadata("inheritedJvmDefault.kt")
                public void testInheritedJvmDefault() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/inheritedJvmDefault.kt");
                }

                @Test
                @TestMetadata("interfaceExtension.kt")
                public void testInterfaceExtension() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/interfaceExtension.kt");
                }

                @Test
                @TestMetadata("kt14243.kt")
                public void testKt14243() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt14243.kt");
                }

                @Test
                @TestMetadata("kt14243_2.kt")
                public void testKt14243_2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt14243_2.kt");
                }

                @Test
                @TestMetadata("kt40920.kt")
                public void testKt40920() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt40920.kt");
                }

                @Test
                @TestMetadata("kt42674.kt")
                public void testKt42674() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/kt42674.kt");
                }

                @Test
                @TestMetadata("privateFunInInterface.kt")
                public void testPrivateFunInInterface() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/privateFunInInterface.kt");
                }

                @Test
                @TestMetadata("propertyAnnotation.kt")
                public void testPropertyAnnotation() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/propertyAnnotation.kt");
                }

                @Test
                @TestMetadata("simpleFunction.kt")
                public void testSimpleFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/simpleFunction.kt");
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy")
                @TestDataPath("$PROJECT_ROOT")
                public class DelegationBy extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInDelegationBy() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("simple.kt")
                    public void testSimple() throws Exception {
                        runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy/simple.kt");
                    }

                    @Test
                    @TestMetadata("simpleProperty.kt")
                    public void testSimpleProperty() throws Exception {
                        runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/delegationBy/simpleProperty.kt");
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization")
                @TestDataPath("$PROJECT_ROOT")
                public class Specialization extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInSpecialization() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("basic.kt")
                    public void testBasic() throws Exception {
                        runTest("compiler/testData/codegen/box/jvm8/defaults/noDefaultImpls/specialization/basic.kt");
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/noDelegation")
            @TestDataPath("$PROJECT_ROOT")
            public class NoDelegation extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInNoDelegation() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/noDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("noDelegationToDefaultMethodInClass.kt")
                public void testNoDelegationToDefaultMethodInClass() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDelegation/noDelegationToDefaultMethodInClass.kt");
                }

                @Test
                @TestMetadata("noDelegationToDefaultMethodInInterface.kt")
                public void testNoDelegationToDefaultMethodInInterface() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDelegation/noDelegationToDefaultMethodInInterface.kt");
                }

                @Test
                @TestMetadata("noDelegationToDefaultMethodInInterface2.kt")
                public void testNoDelegationToDefaultMethodInInterface2() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/noDelegation/noDelegationToDefaultMethodInInterface2.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/jvm8/defaults/reflection")
            @TestDataPath("$PROJECT_ROOT")
            public class Reflection extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInReflection() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/defaults/reflection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("propertyAnnotations.kt")
                public void testPropertyAnnotations() throws Exception {
                    runTest("compiler/testData/codegen/box/jvm8/defaults/reflection/propertyAnnotations.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvm8/interfaceFlag")
        @TestDataPath("$PROJECT_ROOT")
        public class InterfaceFlag extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInInterfaceFlag() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/interfaceFlag"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("superCall.kt")
            public void testSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/interfaceFlag/superCall.kt");
            }

            @Test
            @TestMetadata("superCallIndirect.kt")
            public void testSuperCallIndirect() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/interfaceFlag/superCallIndirect.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvm8/javaDefaults")
        @TestDataPath("$PROJECT_ROOT")
        public class JavaDefaults extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJavaDefaults() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvm8/javaDefaults"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("capturedSuperCall.kt")
            public void testCapturedSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/capturedSuperCall.kt");
            }

            @Test
            @TestMetadata("defaultMethodCallFromInterface.kt")
            public void testDefaultMethodCallFromInterface() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodCallFromInterface.kt");
            }

            @Test
            @TestMetadata("defaultMethodCallViaClass.kt")
            public void testDefaultMethodCallViaClass() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodCallViaClass.kt");
            }

            @Test
            @TestMetadata("defaultMethodCallViaInterface.kt")
            public void testDefaultMethodCallViaInterface() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodCallViaInterface.kt");
            }

            @Test
            @TestMetadata("defaultMethodOverride.kt")
            public void testDefaultMethodOverride() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/defaultMethodOverride.kt");
            }

            @Test
            @TestMetadata("dontDelegateToDefaultMethods.kt")
            public void testDontDelegateToDefaultMethods() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/dontDelegateToDefaultMethods.kt");
            }

            @Test
            @TestMetadata("inheritKotlin.kt")
            public void testInheritKotlin() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/inheritKotlin.kt");
            }

            @Test
            @TestMetadata("invokeDefaultViaSuper.kt")
            public void testInvokeDefaultViaSuper() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/invokeDefaultViaSuper.kt");
            }

            @Test
            @TestMetadata("kt40920.kt")
            public void testKt40920() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920.kt");
            }

            @Test
            @TestMetadata("kt40920_java.kt")
            public void testKt40920_java() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920_java.kt");
            }

            @Test
            @TestMetadata("kt40920_java2.kt")
            public void testKt40920_java2() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920_java2.kt");
            }

            @Test
            @TestMetadata("kt40920_map.kt")
            public void testKt40920_map() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/kt40920_map.kt");
            }

            @Test
            @TestMetadata("longChainOfKotlinExtendsFromJavaWithDefault.kt")
            public void testLongChainOfKotlinExtendsFromJavaWithDefault() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/longChainOfKotlinExtendsFromJavaWithDefault.kt");
            }

            @Test
            @TestMetadata("samOnInterfaceWithDefaultMethod.kt")
            public void testSamOnInterfaceWithDefaultMethod() throws Exception {
                runTest("compiler/testData/codegen/box/jvm8/javaDefaults/samOnInterfaceWithDefaultMethod.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvmField")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmField extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJvmField() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmField"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("annotationCompanion.kt")
        public void testAnnotationCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/annotationCompanion.kt");
        }

        @Test
        @TestMetadata("annotationCompanionWithJava.kt")
        public void testAnnotationCompanionWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/annotationCompanionWithJava.kt");
        }

        @Test
        @TestMetadata("captureClassFields.kt")
        public void testCaptureClassFields() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/captureClassFields.kt");
        }

        @Test
        @TestMetadata("capturePackageFields.kt")
        public void testCapturePackageFields() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/capturePackageFields.kt");
        }

        @Test
        @TestMetadata("checkNoAccessors.kt")
        public void testCheckNoAccessors() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/checkNoAccessors.kt");
        }

        @Test
        @TestMetadata("clashWithJavaSuperClassField.kt")
        public void testClashWithJavaSuperClassField() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/clashWithJavaSuperClassField.kt");
        }

        @Test
        @TestMetadata("classFieldReference.kt")
        public void testClassFieldReference() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/classFieldReference.kt");
        }

        @Test
        @TestMetadata("classFieldReflection.kt")
        public void testClassFieldReflection() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/classFieldReflection.kt");
        }

        @Test
        @TestMetadata("compoundAccess.kt")
        public void testCompoundAccess() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/compoundAccess.kt");
        }

        @Test
        @TestMetadata("constructorProperty.kt")
        public void testConstructorProperty() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/constructorProperty.kt");
        }

        @Test
        @TestMetadata("diamond.kt")
        public void testDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/diamond.kt");
        }

        @Test
        @TestMetadata("fileOrder.kt")
        public void testFileOrder() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/fileOrder.kt");
        }

        @Test
        @TestMetadata("fileOrderWithCopying.kt")
        public void testFileOrderWithCopying() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/fileOrderWithCopying.kt");
        }

        @Test
        @TestMetadata("initializersOrder.kt")
        public void testInitializersOrder() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/initializersOrder.kt");
        }

        @Test
        @TestMetadata("interfaceCompanion.kt")
        public void testInterfaceCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/interfaceCompanion.kt");
        }

        @Test
        @TestMetadata("interfaceCompanionWithJava.kt")
        public void testInterfaceCompanionWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/interfaceCompanionWithJava.kt");
        }

        @Test
        @TestMetadata("publicField.kt")
        public void testPublicField() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/publicField.kt");
        }

        @Test
        @TestMetadata("publicFieldJava.kt")
        public void testPublicFieldJava() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/publicFieldJava.kt");
        }

        @Test
        @TestMetadata("simpleMemberProperty.kt")
        public void testSimpleMemberProperty() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/simpleMemberProperty.kt");
        }

        @Test
        @TestMetadata("superCall.kt")
        public void testSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/superCall.kt");
        }

        @Test
        @TestMetadata("superCall2.kt")
        public void testSuperCall2() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/superCall2.kt");
        }

        @Test
        @TestMetadata("topLevelFieldReference.kt")
        public void testTopLevelFieldReference() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/topLevelFieldReference.kt");
        }

        @Test
        @TestMetadata("topLevelFieldReflection.kt")
        public void testTopLevelFieldReflection() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/topLevelFieldReflection.kt");
        }

        @Test
        @TestMetadata("visibility.kt")
        public void testVisibility() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/visibility.kt");
        }

        @Test
        @TestMetadata("writeFieldReference.kt")
        public void testWriteFieldReference() throws Exception {
            runTest("compiler/testData/codegen/box/jvmField/writeFieldReference.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvmName")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmName extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJvmName() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmName"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("annotationProperties.kt")
        public void testAnnotationProperties() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/annotationProperties.kt");
        }

        @Test
        @TestMetadata("callableReference.kt")
        public void testCallableReference() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/callableReference.kt");
        }

        @Test
        @TestMetadata("clashingErasure.kt")
        public void testClashingErasure() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/clashingErasure.kt");
        }

        @Test
        @TestMetadata("classMembers.kt")
        public void testClassMembers() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/classMembers.kt");
        }

        @Test
        @TestMetadata("fakeJvmNameInJava.kt")
        public void testFakeJvmNameInJava() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/fakeJvmNameInJava.kt");
        }

        @Test
        @TestMetadata("functionName.kt")
        public void testFunctionName() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/functionName.kt");
        }

        @Test
        @TestMetadata("functionWithDefault.kt")
        public void testFunctionWithDefault() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/functionWithDefault.kt");
        }

        @Test
        @TestMetadata("kt23974.kt")
        public void testKt23974() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/kt23974.kt");
        }

        @Test
        @TestMetadata("loadJvmName.kt")
        public void testLoadJvmName() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/loadJvmName.kt");
        }

        @Test
        @TestMetadata("multifileClass.kt")
        public void testMultifileClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/multifileClass.kt");
        }

        @Test
        @TestMetadata("multifileClassWithLocalClass.kt")
        public void testMultifileClassWithLocalClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/multifileClassWithLocalClass.kt");
        }

        @Test
        @TestMetadata("multifileClassWithLocalGeneric.kt")
        public void testMultifileClassWithLocalGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/multifileClassWithLocalGeneric.kt");
        }

        @Test
        @TestMetadata("propertyAccessorsUseSite.kt")
        public void testPropertyAccessorsUseSite() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/propertyAccessorsUseSite.kt");
        }

        @Test
        @TestMetadata("propertyName.kt")
        public void testPropertyName() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/propertyName.kt");
        }

        @Test
        @TestMetadata("propertySyntheticMethod.kt")
        public void testPropertySyntheticMethod() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/propertySyntheticMethod.kt");
        }

        @Test
        @TestMetadata("renamedFileClass.kt")
        public void testRenamedFileClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvmName/renamedFileClass.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/jvmName/fileFacades")
        @TestDataPath("$PROJECT_ROOT")
        public class FileFacades extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFileFacades() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmName/fileFacades"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("differentFiles.kt")
            public void testDifferentFiles() throws Exception {
                runTest("compiler/testData/codegen/box/jvmName/fileFacades/differentFiles.kt");
            }

            @Test
            @TestMetadata("javaAnnotationOnFileFacade.kt")
            public void testJavaAnnotationOnFileFacade() throws Exception {
                runTest("compiler/testData/codegen/box/jvmName/fileFacades/javaAnnotationOnFileFacade.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/testData/codegen/box/jvmName/fileFacades/simple.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvmOverloads")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmOverloads extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJvmOverloads() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmOverloads"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("companionObject.kt")
        public void testCompanionObject() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/companionObject.kt");
        }

        @Test
        @TestMetadata("constructorWithTypeParams.kt")
        public void testConstructorWithTypeParams() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/constructorWithTypeParams.kt");
        }

        @Test
        @TestMetadata("defaultsNotAtEnd.kt")
        public void testDefaultsNotAtEnd() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/defaultsNotAtEnd.kt");
        }

        @Test
        @TestMetadata("doubleParameters.kt")
        public void testDoubleParameters() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/doubleParameters.kt");
        }

        @Test
        @TestMetadata("extensionMethod.kt")
        public void testExtensionMethod() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/extensionMethod.kt");
        }

        @Test
        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/generics.kt");
        }

        @Test
        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/innerClass.kt");
        }

        @Test
        @TestMetadata("manyParameters.kt")
        public void testManyParameters() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/manyParameters.kt");
        }

        @Test
        @TestMetadata("multifileClass.kt")
        public void testMultifileClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/multifileClass.kt");
        }

        @Test
        @TestMetadata("multipleDefaultParameters.kt")
        public void testMultipleDefaultParameters() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/multipleDefaultParameters.kt");
        }

        @Test
        @TestMetadata("noRedundantVarargs.kt")
        public void testNoRedundantVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/noRedundantVarargs.kt");
        }

        @Test
        @TestMetadata("nonDefaultParameter.kt")
        public void testNonDefaultParameter() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/nonDefaultParameter.kt");
        }

        @Test
        @TestMetadata("primaryConstructor.kt")
        public void testPrimaryConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/primaryConstructor.kt");
        }

        @Test
        @TestMetadata("primaryConstructorWithAllDefaults.kt")
        public void testPrimaryConstructorWithAllDefaults() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/primaryConstructorWithAllDefaults.kt");
        }

        @Test
        @TestMetadata("privateClass.kt")
        public void testPrivateClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/privateClass.kt");
        }

        @Test
        @TestMetadata("secondaryConstructor.kt")
        public void testSecondaryConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/secondaryConstructor.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/simple.kt");
        }

        @Test
        @TestMetadata("simpleJavaCall.kt")
        public void testSimpleJavaCall() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/simpleJavaCall.kt");
        }

        @Test
        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/typeParameters.kt");
        }

        @Test
        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/jvmOverloads/varargs.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvmPackageName")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmPackageName extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJvmPackageName() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmPackageName"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("metadataField.kt")
        public void testMetadataField() throws Exception {
            runTest("compiler/testData/codegen/box/jvmPackageName/metadataField.kt");
        }

        @Test
        @TestMetadata("multifileClass.kt")
        public void testMultifileClass() throws Exception {
            runTest("compiler/testData/codegen/box/jvmPackageName/multifileClass.kt");
        }

        @Test
        @TestMetadata("rootPackage.kt")
        public void testRootPackage() throws Exception {
            runTest("compiler/testData/codegen/box/jvmPackageName/rootPackage.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/jvmPackageName/simple.kt");
        }

        @Test
        @TestMetadata("withJvmName.kt")
        public void testWithJvmName() throws Exception {
            runTest("compiler/testData/codegen/box/jvmPackageName/withJvmName.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/jvmStatic")
    @TestDataPath("$PROJECT_ROOT")
    public class JvmStatic extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInJvmStatic() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("annotations.kt")
        public void testAnnotations() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/annotations.kt");
        }

        @Test
        @TestMetadata("closure.kt")
        public void testClosure() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/closure.kt");
        }

        @Test
        @TestMetadata("companionObject.kt")
        public void testCompanionObject() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/companionObject.kt");
        }

        @Test
        @TestMetadata("convention.kt")
        public void testConvention() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/convention.kt");
        }

        @Test
        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/default.kt");
        }

        @Test
        @TestMetadata("defaultCrossFile.kt")
        public void testDefaultCrossFile() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/defaultCrossFile.kt");
        }

        @Test
        @TestMetadata("enumCompanion.kt")
        public void testEnumCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/enumCompanion.kt");
        }

        @Test
        @TestMetadata("explicitObject.kt")
        public void testExplicitObject() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/explicitObject.kt");
        }

        @Test
        @TestMetadata("funAccess.kt")
        public void testFunAccess() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/funAccess.kt");
        }

        @Test
        @TestMetadata("functionReference.kt")
        public void testFunctionReference() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/functionReference.kt");
        }

        @Test
        @TestMetadata("importStaticMemberFromObject.kt")
        public void testImportStaticMemberFromObject() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/importStaticMemberFromObject.kt");
        }

        @Test
        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/inline.kt");
        }

        @Test
        @TestMetadata("inlinePropertyAccessors.kt")
        public void testInlinePropertyAccessors() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/inlinePropertyAccessors.kt");
        }

        @Test
        @TestMetadata("interfaceCompanion.kt")
        public void testInterfaceCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/interfaceCompanion.kt");
        }

        @Test
        @TestMetadata("jvmNameForAccessor.kt")
        public void testJvmNameForAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/jvmNameForAccessor.kt");
        }

        @Test
        @TestMetadata("kt21246.kt")
        public void testKt21246() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/kt21246.kt");
        }

        @Test
        @TestMetadata("kt21246a.kt")
        public void testKt21246a() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/kt21246a.kt");
        }

        @Test
        @TestMetadata("kt31389.kt")
        public void testKt31389() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/kt31389.kt");
        }

        @Test
        @TestMetadata("kt35716.kt")
        public void testKt35716() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/kt35716.kt");
        }

        @Test
        @TestMetadata("kt9897_static.kt")
        public void testKt9897_static() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/kt9897_static.kt");
        }

        @Test
        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/object.kt");
        }

        @Test
        @TestMetadata("postfixInc.kt")
        public void testPostfixInc() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/postfixInc.kt");
        }

        @Test
        @TestMetadata("prefixInc.kt")
        public void testPrefixInc() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/prefixInc.kt");
        }

        @Test
        @TestMetadata("privateMethod.kt")
        public void testPrivateMethod() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/privateMethod.kt");
        }

        @Test
        @TestMetadata("privateSetter.kt")
        public void testPrivateSetter() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/privateSetter.kt");
        }

        @Test
        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/propertyAccess.kt");
        }

        @Test
        @TestMetadata("propertyAccessorsCompanion.kt")
        public void testPropertyAccessorsCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/propertyAccessorsCompanion.kt");
        }

        @Test
        @TestMetadata("propertyAccessorsObject.kt")
        public void testPropertyAccessorsObject() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/propertyAccessorsObject.kt");
        }

        @Test
        @TestMetadata("propertyAsDefault.kt")
        public void testPropertyAsDefault() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/propertyAsDefault.kt");
        }

        @Test
        @TestMetadata("propertyGetterDelegatesToAnother.kt")
        public void testPropertyGetterDelegatesToAnother() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/propertyGetterDelegatesToAnother.kt");
        }

        @Test
        @TestMetadata("propertyReference.kt")
        public void testPropertyReference() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/propertyReference.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/simple.kt");
        }

        @Test
        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/jvmStatic/syntheticAccessor.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/labels")
    @TestDataPath("$PROJECT_ROOT")
    public class Labels extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInLabels() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/labels"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("controlLabelClashesWithFuncitonName.kt")
        public void testControlLabelClashesWithFuncitonName() throws Exception {
            runTest("compiler/testData/codegen/box/labels/controlLabelClashesWithFuncitonName.kt");
        }

        @Test
        @TestMetadata("infixCallLabelling.kt")
        public void testInfixCallLabelling() throws Exception {
            runTest("compiler/testData/codegen/box/labels/infixCallLabelling.kt");
        }

        @Test
        @TestMetadata("labeledDeclarations.kt")
        public void testLabeledDeclarations() throws Exception {
            runTest("compiler/testData/codegen/box/labels/labeledDeclarations.kt");
        }

        @Test
        @TestMetadata("propertyAccessor.kt")
        public void testPropertyAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/labels/propertyAccessor.kt");
        }

        @Test
        @TestMetadata("propertyAccessorFunctionLiteral.kt")
        public void testPropertyAccessorFunctionLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/labels/propertyAccessorFunctionLiteral.kt");
        }

        @Test
        @TestMetadata("propertyAccessorInnerExtensionFun.kt")
        public void testPropertyAccessorInnerExtensionFun() throws Exception {
            runTest("compiler/testData/codegen/box/labels/propertyAccessorInnerExtensionFun.kt");
        }

        @Test
        @TestMetadata("propertyAccessorObject.kt")
        public void testPropertyAccessorObject() throws Exception {
            runTest("compiler/testData/codegen/box/labels/propertyAccessorObject.kt");
        }

        @Test
        @TestMetadata("propertyInClassAccessor.kt")
        public void testPropertyInClassAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/labels/propertyInClassAccessor.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/lazyCodegen")
    @TestDataPath("$PROJECT_ROOT")
    public class LazyCodegen extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInLazyCodegen() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("exceptionInFieldInitializer.kt")
        public void testExceptionInFieldInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/exceptionInFieldInitializer.kt");
        }

        @Test
        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/ifElse.kt");
        }

        @Test
        @TestMetadata("increment.kt")
        public void testIncrement() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/increment.kt");
        }

        @Test
        @TestMetadata("safeAssign.kt")
        public void testSafeAssign() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/safeAssign.kt");
        }

        @Test
        @TestMetadata("safeAssignComplex.kt")
        public void testSafeAssignComplex() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/safeAssignComplex.kt");
        }

        @Test
        @TestMetadata("safeCallAndArray.kt")
        public void testSafeCallAndArray() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/safeCallAndArray.kt");
        }

        @Test
        @TestMetadata("toString.kt")
        public void testToString() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/toString.kt");
        }

        @Test
        @TestMetadata("tryCatchExpression.kt")
        public void testTryCatchExpression() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/tryCatchExpression.kt");
        }

        @Test
        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("compiler/testData/codegen/box/lazyCodegen/when.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/lazyCodegen/optimizations")
        @TestDataPath("$PROJECT_ROOT")
        public class Optimizations extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInOptimizations() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/lazyCodegen/optimizations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("negateConstantCompare.kt")
            public void testNegateConstantCompare() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateConstantCompare.kt");
            }

            @Test
            @TestMetadata("negateFalse.kt")
            public void testNegateFalse() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalse.kt");
            }

            @Test
            @TestMetadata("negateFalseVar.kt")
            public void testNegateFalseVar() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVar.kt");
            }

            @Test
            @TestMetadata("negateFalseVarChain.kt")
            public void testNegateFalseVarChain() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateFalseVarChain.kt");
            }

            @Test
            @TestMetadata("negateObjectComp.kt")
            public void testNegateObjectComp() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp.kt");
            }

            @Test
            @TestMetadata("negateObjectComp2.kt")
            public void testNegateObjectComp2() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateObjectComp2.kt");
            }

            @Test
            @TestMetadata("negateTrue.kt")
            public void testNegateTrue() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrue.kt");
            }

            @Test
            @TestMetadata("negateTrueVar.kt")
            public void testNegateTrueVar() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/negateTrueVar.kt");
            }

            @Test
            @TestMetadata("noOptimization.kt")
            public void testNoOptimization() throws Exception {
                runTest("compiler/testData/codegen/box/lazyCodegen/optimizations/noOptimization.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/localClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalClasses extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInLocalClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/localClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anonymousObjectInExtension.kt")
        public void testAnonymousObjectInExtension() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInExtension.kt");
        }

        @Test
        @TestMetadata("anonymousObjectInInitializer.kt")
        public void testAnonymousObjectInInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInInitializer.kt");
        }

        @Test
        @TestMetadata("anonymousObjectInParameterInitializer.kt")
        public void testAnonymousObjectInParameterInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/anonymousObjectInParameterInitializer.kt");
        }

        @Test
        @TestMetadata("capturingInDefaultConstructorParameter.kt")
        public void testCapturingInDefaultConstructorParameter() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/capturingInDefaultConstructorParameter.kt");
        }

        @Test
        @TestMetadata("closureOfInnerLocalClass.kt")
        public void testClosureOfInnerLocalClass() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/closureOfInnerLocalClass.kt");
        }

        @Test
        @TestMetadata("closureOfLambdaInLocalClass.kt")
        public void testClosureOfLambdaInLocalClass() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/closureOfLambdaInLocalClass.kt");
        }

        @Test
        @TestMetadata("closureWithSelfInstantiation.kt")
        public void testClosureWithSelfInstantiation() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/closureWithSelfInstantiation.kt");
        }

        @Test
        @TestMetadata("inExtensionFunction.kt")
        public void testInExtensionFunction() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/inExtensionFunction.kt");
        }

        @Test
        @TestMetadata("inExtensionProperty.kt")
        public void testInExtensionProperty() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/inExtensionProperty.kt");
        }

        @Test
        @TestMetadata("inLocalExtensionFunction.kt")
        public void testInLocalExtensionFunction() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionFunction.kt");
        }

        @Test
        @TestMetadata("inLocalExtensionProperty.kt")
        public void testInLocalExtensionProperty() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/inLocalExtensionProperty.kt");
        }

        @Test
        @TestMetadata("innerClassInLocalClass.kt")
        public void testInnerClassInLocalClass() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/innerClassInLocalClass.kt");
        }

        @Test
        @TestMetadata("innerOfLocalCaptureExtensionReceiver.kt")
        public void testInnerOfLocalCaptureExtensionReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/innerOfLocalCaptureExtensionReceiver.kt");
        }

        @Test
        @TestMetadata("kt10835.kt")
        public void testKt10835() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt10835.kt");
        }

        @Test
        @TestMetadata("kt10835a.kt")
        public void testKt10835a() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt10835a.kt");
        }

        @Test
        @TestMetadata("kt2700.kt")
        public void testKt2700() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt2700.kt");
        }

        @Test
        @TestMetadata("kt2873.kt")
        public void testKt2873() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt2873.kt");
        }

        @Test
        @TestMetadata("kt3210.kt")
        public void testKt3210() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt3210.kt");
        }

        @Test
        @TestMetadata("kt3389.kt")
        public void testKt3389() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt3389.kt");
        }

        @Test
        @TestMetadata("kt3584.kt")
        public void testKt3584() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt3584.kt");
        }

        @Test
        @TestMetadata("kt4174.kt")
        public void testKt4174() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/kt4174.kt");
        }

        @Test
        @TestMetadata("localClass.kt")
        public void testLocalClass() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/localClass.kt");
        }

        @Test
        @TestMetadata("localClassCaptureExtensionReceiver.kt")
        public void testLocalClassCaptureExtensionReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/localClassCaptureExtensionReceiver.kt");
        }

        @Test
        @TestMetadata("localClassInInitializer.kt")
        public void testLocalClassInInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/localClassInInitializer.kt");
        }

        @Test
        @TestMetadata("localClassInParameterInitializer.kt")
        public void testLocalClassInParameterInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/localClassInParameterInitializer.kt");
        }

        @Test
        @TestMetadata("localDataClass.kt")
        public void testLocalDataClass() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/localDataClass.kt");
        }

        @Test
        @TestMetadata("localExtendsInnerAndReferencesOuterMember.kt")
        public void testLocalExtendsInnerAndReferencesOuterMember() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/localExtendsInnerAndReferencesOuterMember.kt");
        }

        @Test
        @TestMetadata("localGenericWithTypeParameters.kt")
        public void testLocalGenericWithTypeParameters() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/localGenericWithTypeParameters.kt");
        }

        @Test
        @TestMetadata("nameWithWhitespace.kt")
        public void testNameWithWhitespace() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/nameWithWhitespace.kt");
        }

        @Test
        @TestMetadata("noclosure.kt")
        public void testNoclosure() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/noclosure.kt");
        }

        @Test
        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/object.kt");
        }

        @Test
        @TestMetadata("ownClosureOfInnerLocalClass.kt")
        public void testOwnClosureOfInnerLocalClass() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/ownClosureOfInnerLocalClass.kt");
        }

        @Test
        @TestMetadata("recaptureVarCapturedInLocalClass1.kt")
        public void testRecaptureVarCapturedInLocalClass1() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass1.kt");
        }

        @Test
        @TestMetadata("recaptureVarCapturedInLocalClass2.kt")
        public void testRecaptureVarCapturedInLocalClass2() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass2.kt");
        }

        @Test
        @TestMetadata("recaptureVarCapturedInLocalClass3.kt")
        public void testRecaptureVarCapturedInLocalClass3() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/recaptureVarCapturedInLocalClass3.kt");
        }

        @Test
        @TestMetadata("subclassingExtensionReceiverClass.kt")
        public void testSubclassingExtensionReceiverClass() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/subclassingExtensionReceiverClass.kt");
        }

        @Test
        @TestMetadata("withclosure.kt")
        public void testWithclosure() throws Exception {
            runTest("compiler/testData/codegen/box/localClasses/withclosure.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/mangling")
    @TestDataPath("$PROJECT_ROOT")
    public class Mangling extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInMangling() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/mangling"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("field.kt")
        public void testField() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/field.kt");
        }

        @Test
        @TestMetadata("fun.kt")
        public void testFun() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/fun.kt");
        }

        @Test
        @TestMetadata("internal.kt")
        public void testInternal() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/internal.kt");
        }

        @Test
        @TestMetadata("internalOverride.kt")
        public void testInternalOverride() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/internalOverride.kt");
        }

        @Test
        @TestMetadata("internalOverrideSuperCall.kt")
        public void testInternalOverrideSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/internalOverrideSuperCall.kt");
        }

        @Test
        @TestMetadata("noOverrideWithJava.kt")
        public void testNoOverrideWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/noOverrideWithJava.kt");
        }

        @Test
        @TestMetadata("parentheses.kt")
        public void testParentheses() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/parentheses.kt");
        }

        @Test
        @TestMetadata("publicOverride.kt")
        public void testPublicOverride() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/publicOverride.kt");
        }

        @Test
        @TestMetadata("publicOverrideSuperCall.kt")
        public void testPublicOverrideSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/mangling/publicOverrideSuperCall.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/mixedNamedPosition")
    @TestDataPath("$PROJECT_ROOT")
    public class MixedNamedPosition extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInMixedNamedPosition() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/mixedNamedPosition"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("defaults.kt")
        public void testDefaults() throws Exception {
            runTest("compiler/testData/codegen/box/mixedNamedPosition/defaults.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/mixedNamedPosition/simple.kt");
        }

        @Test
        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/mixedNamedPosition/varargs.kt");
        }

        @Test
        @TestMetadata("varargsEvaluationOrder.kt")
        public void testVarargsEvaluationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/mixedNamedPosition/varargsEvaluationOrder.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiDecl")
    @TestDataPath("$PROJECT_ROOT")
    public class MultiDecl extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInMultiDecl() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("ComplexInitializer.kt")
        public void testComplexInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/ComplexInitializer.kt");
        }

        @Test
        @TestMetadata("component.kt")
        public void testComponent() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/component.kt");
        }

        @Test
        @TestMetadata("kt9828_hashMap.kt")
        public void testKt9828_hashMap() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/kt9828_hashMap.kt");
        }

        @Test
        @TestMetadata("returnInElvis.kt")
        public void testReturnInElvis() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/returnInElvis.kt");
        }

        @Test
        @TestMetadata("SimpleVals.kt")
        public void testSimpleVals() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/SimpleVals.kt");
        }

        @Test
        @TestMetadata("SimpleValsExtensions.kt")
        public void testSimpleValsExtensions() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/SimpleValsExtensions.kt");
        }

        @Test
        @TestMetadata("SimpleVarsExtensions.kt")
        public void testSimpleVarsExtensions() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/SimpleVarsExtensions.kt");
        }

        @Test
        @TestMetadata("UnderscoreNames.kt")
        public void testUnderscoreNames() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/UnderscoreNames.kt");
        }

        @Test
        @TestMetadata("ValCapturedInFunctionLiteral.kt")
        public void testValCapturedInFunctionLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInFunctionLiteral.kt");
        }

        @Test
        @TestMetadata("ValCapturedInLocalFunction.kt")
        public void testValCapturedInLocalFunction() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInLocalFunction.kt");
        }

        @Test
        @TestMetadata("ValCapturedInObjectLiteral.kt")
        public void testValCapturedInObjectLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/ValCapturedInObjectLiteral.kt");
        }

        @Test
        @TestMetadata("VarCapturedInFunctionLiteral.kt")
        public void testVarCapturedInFunctionLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInFunctionLiteral.kt");
        }

        @Test
        @TestMetadata("VarCapturedInLocalFunction.kt")
        public void testVarCapturedInLocalFunction() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInLocalFunction.kt");
        }

        @Test
        @TestMetadata("VarCapturedInObjectLiteral.kt")
        public void testVarCapturedInObjectLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/multiDecl/VarCapturedInObjectLiteral.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator")
        @TestDataPath("$PROJECT_ROOT")
        public class ForIterator extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForIterator() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclFor.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentExtensions.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensions.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
            }

            @Test
            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forIterator/MultiDeclForValCaptured.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forIterator/longIterator")
            @TestDataPath("$PROJECT_ROOT")
            public class LongIterator extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLongIterator() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forIterator/longIterator"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentExtensionsValCaptured.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forIterator/longIterator/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange")
        @TestDataPath("$PROJECT_ROOT")
        public class ForRange extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForRange() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("MultiDeclFor.kt")
            public void testMultiDeclFor() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclFor.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentExtensions.kt")
            public void testMultiDeclForComponentExtensions() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentExtensions.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
            public void testMultiDeclForComponentMemberExtensions() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensions.kt");
            }

            @Test
            @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
            public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
            }

            @Test
            @TestMetadata("MultiDeclForValCaptured.kt")
            public void testMultiDeclForValCaptured() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forRange/MultiDeclForValCaptured.kt");
            }

            @Test
            @TestMetadata("UnderscoreNames.kt")
            public void testUnderscoreNames() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNames.kt");
            }

            @Test
            @TestMetadata("UnderscoreNamesDontCallComponent.kt")
            public void testUnderscoreNamesDontCallComponent() throws Exception {
                runTest("compiler/testData/codegen/box/multiDecl/forRange/UnderscoreNamesDontCallComponent.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo")
            @TestDataPath("$PROJECT_ROOT")
            public class ExplicitRangeTo extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInExplicitRangeTo() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("MultiDeclFor.kt")
                public void testMultiDeclFor() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclFor.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }

                @Test
                @TestMetadata("MultiDeclForValCaptured.kt")
                public void testMultiDeclForValCaptured() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/MultiDeclForValCaptured.kt");
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int")
                @TestDataPath("$PROJECT_ROOT")
                public class Int extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInInt() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentExtensionsValCaptured.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long")
                @TestDataPath("$PROJECT_ROOT")
                public class Long extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInLong() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentExtensionsValCaptured.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeTo/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot")
            @TestDataPath("$PROJECT_ROOT")
            public class ExplicitRangeToWithDot extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInExplicitRangeToWithDot() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("MultiDeclFor.kt")
                public void testMultiDeclFor() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclFor.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }

                @Test
                @TestMetadata("MultiDeclForValCaptured.kt")
                public void testMultiDeclForValCaptured() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/MultiDeclForValCaptured.kt");
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int")
                @TestDataPath("$PROJECT_ROOT")
                public class Int extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInInt() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentExtensionsValCaptured.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long")
                @TestDataPath("$PROJECT_ROOT")
                public class Long extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInLong() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensions.kt")
                    public void testMultiDeclForComponentExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                    public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentExtensionsValCaptured.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                    public void testMultiDeclForComponentMemberExtensions() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensions.kt");
                    }

                    @Test
                    @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                    public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                        runTest("compiler/testData/codegen/box/multiDecl/forRange/explicitRangeToWithDot/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/int")
            @TestDataPath("$PROJECT_ROOT")
            public class Int extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInInt() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/int"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentExtensionsValCaptured.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/int/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/multiDecl/forRange/long")
            @TestDataPath("$PROJECT_ROOT")
            public class Long extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLong() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiDecl/forRange/long"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensions.kt")
                public void testMultiDeclForComponentExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentExtensionsValCaptured.kt")
                public void testMultiDeclForComponentExtensionsValCaptured() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentExtensionsValCaptured.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensions.kt")
                public void testMultiDeclForComponentMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensions.kt");
                }

                @Test
                @TestMetadata("MultiDeclForComponentMemberExtensionsInExtensionFunction.kt")
                public void testMultiDeclForComponentMemberExtensionsInExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/multiDecl/forRange/long/MultiDeclForComponentMemberExtensionsInExtensionFunction.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multifileClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class MultifileClasses extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInMultifileClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("callMultifileClassMemberFromOtherPackage.kt")
        public void testCallMultifileClassMemberFromOtherPackage() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/callMultifileClassMemberFromOtherPackage.kt");
        }

        @Test
        @TestMetadata("callsToMultifileClassFromOtherPackage.kt")
        public void testCallsToMultifileClassFromOtherPackage() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/callsToMultifileClassFromOtherPackage.kt");
        }

        @Test
        @TestMetadata("constPropertyReferenceFromMultifileClass.kt")
        public void testConstPropertyReferenceFromMultifileClass() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/constPropertyReferenceFromMultifileClass.kt");
        }

        @Test
        @TestMetadata("genericProperty.kt")
        public void testGenericProperty() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/genericProperty.kt");
        }

        @Test
        @TestMetadata("inlineMultifileClassMemberFromOtherPackage.kt")
        public void testInlineMultifileClassMemberFromOtherPackage() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/inlineMultifileClassMemberFromOtherPackage.kt");
        }

        @Test
        @TestMetadata("kt16077.kt")
        public void testKt16077() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/kt16077.kt");
        }

        @Test
        @TestMetadata("multifileClassPartsInitialization.kt")
        public void testMultifileClassPartsInitialization() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/multifileClassPartsInitialization.kt");
        }

        @Test
        @TestMetadata("multifileClassWith2Files.kt")
        public void testMultifileClassWith2Files() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWith2Files.kt");
        }

        @Test
        @TestMetadata("multifileClassWithCrossCall.kt")
        public void testMultifileClassWithCrossCall() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWithCrossCall.kt");
        }

        @Test
        @TestMetadata("multifileClassWithPrivate.kt")
        public void testMultifileClassWithPrivate() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/multifileClassWithPrivate.kt");
        }

        @Test
        @TestMetadata("namesInMetadataAreSorted.kt")
        public void testNamesInMetadataAreSorted() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/namesInMetadataAreSorted.kt");
        }

        @Test
        @TestMetadata("privateConstVal.kt")
        public void testPrivateConstVal() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/privateConstVal.kt");
        }

        @Test
        @TestMetadata("samePartNameDifferentFacades.kt")
        public void testSamePartNameDifferentFacades() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/samePartNameDifferentFacades.kt");
        }

        @Test
        @TestMetadata("sealedClassHierarchy.kt")
        public void testSealedClassHierarchy() throws Exception {
            runTest("compiler/testData/codegen/box/multifileClasses/sealedClassHierarchy.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multifileClasses/optimized")
        @TestDataPath("$PROJECT_ROOT")
        public class Optimized extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInOptimized() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multifileClasses/optimized"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("callInInlineLambda.kt")
            public void testCallInInlineLambda() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/callInInlineLambda.kt");
            }

            @Test
            @TestMetadata("callableRefToConstVal.kt")
            public void testCallableRefToConstVal() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToConstVal.kt");
            }

            @Test
            @TestMetadata("callableRefToFun.kt")
            public void testCallableRefToFun() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToFun.kt");
            }

            @Test
            @TestMetadata("callableRefToInternalConstValInline.kt")
            public void testCallableRefToInternalConstValInline() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToInternalConstValInline.kt");
            }

            @Test
            @TestMetadata("callableRefToPrivateConstVal.kt")
            public void testCallableRefToPrivateConstVal() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableRefToPrivateConstVal.kt");
            }

            @Test
            @TestMetadata("callableReferencesToSameFunctionsFromDifferentPackages.kt")
            public void testCallableReferencesToSameFunctionsFromDifferentPackages() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableReferencesToSameFunctionsFromDifferentPackages.kt");
            }

            @Test
            @TestMetadata("callableReferencesToSamePropertiesFromDifferentPackages.kt")
            public void testCallableReferencesToSamePropertiesFromDifferentPackages() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/callableReferencesToSamePropertiesFromDifferentPackages.kt");
            }

            @Test
            @TestMetadata("calls.kt")
            public void testCalls() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/calls.kt");
            }

            @Test
            @TestMetadata("internalFunction.kt")
            public void testInternalFunction() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/internalFunction.kt");
            }

            @Test
            @TestMetadata("namesInMetadataAreSorted.kt")
            public void testNamesInMetadataAreSorted() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/namesInMetadataAreSorted.kt");
            }

            @Test
            @TestMetadata("overlappingFuns.kt")
            public void testOverlappingFuns() throws Exception {
                runTest("compiler/testData/codegen/box/multifileClasses/optimized/overlappingFuns.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/multiplatform")
    @TestDataPath("$PROJECT_ROOT")
    public class Multiplatform extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInMultiplatform() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("expectClassInJvmMultifileFacade.kt")
        public void testExpectClassInJvmMultifileFacade() throws Exception {
            runTest("compiler/testData/codegen/box/multiplatform/expectClassInJvmMultifileFacade.kt");
        }

        @Test
        @TestMetadata("noArgActualConstructor.kt")
        public void testNoArgActualConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/multiplatform/noArgActualConstructor.kt");
        }

        @Test
        @TestMetadata("optionalExpectation.kt")
        public void testOptionalExpectation() throws Exception {
            runTest("compiler/testData/codegen/box/multiplatform/optionalExpectation.kt");
        }

        @Test
        @TestMetadata("optionalExpectationJvm.kt")
        public void testOptionalExpectationJvm() throws Exception {
            runTest("compiler/testData/codegen/box/multiplatform/optionalExpectationJvm.kt");
        }

        @Test
        @TestMetadata("starImportOfExpectEnumWithActualTypeAlias.kt")
        public void testStarImportOfExpectEnumWithActualTypeAlias() throws Exception {
            runTest("compiler/testData/codegen/box/multiplatform/starImportOfExpectEnumWithActualTypeAlias.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiplatform/defaultArguments")
        @TestDataPath("$PROJECT_ROOT")
        public class DefaultArguments extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInDefaultArguments() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/defaultArguments"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("annotations.kt")
            public void testAnnotations() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/annotations.kt");
            }

            @Test
            @TestMetadata("bothInExpectAndActual.kt")
            public void testBothInExpectAndActual() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/bothInExpectAndActual.kt");
            }

            @Test
            @TestMetadata("bothInExpectAndActual2.kt")
            public void testBothInExpectAndActual2() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/bothInExpectAndActual2.kt");
            }

            @Test
            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/constructor.kt");
            }

            @Test
            @TestMetadata("delegatedExpectedInterface.kt")
            public void testDelegatedExpectedInterface() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/delegatedExpectedInterface.kt");
            }

            @Test
            @TestMetadata("dispatchReceiverValue.kt")
            public void testDispatchReceiverValue() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/dispatchReceiverValue.kt");
            }

            @Test
            @TestMetadata("extensionReceiverValue.kt")
            public void testExtensionReceiverValue() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/extensionReceiverValue.kt");
            }

            @Test
            @TestMetadata("function.kt")
            public void testFunction() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/function.kt");
            }

            @Test
            @TestMetadata("functionFromOtherModule.kt")
            public void testFunctionFromOtherModule() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/functionFromOtherModule.kt");
            }

            @Test
            @TestMetadata("inheritedFromCommonClass.kt")
            public void testInheritedFromCommonClass() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromCommonClass.kt");
            }

            @Test
            @TestMetadata("inheritedFromExpectedClass.kt")
            public void testInheritedFromExpectedClass() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedClass.kt");
            }

            @Test
            @TestMetadata("inheritedFromExpectedInterface.kt")
            public void testInheritedFromExpectedInterface() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedInterface.kt");
            }

            @Test
            @TestMetadata("inheritedFromExpectedMethod.kt")
            public void testInheritedFromExpectedMethod() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedFromExpectedMethod.kt");
            }

            @Test
            @TestMetadata("inheritedInExpectedDeclarations.kt")
            public void testInheritedInExpectedDeclarations() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedInExpectedDeclarations.kt");
            }

            @Test
            @TestMetadata("inheritedViaAnotherInterfaceIndirectly.kt")
            public void testInheritedViaAnotherInterfaceIndirectly() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inheritedViaAnotherInterfaceIndirectly.kt");
            }

            @Test
            @TestMetadata("inlineFunctionWithDefaultLambda.kt")
            public void testInlineFunctionWithDefaultLambda() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/inlineFunctionWithDefaultLambda.kt");
            }

            @Test
            @TestMetadata("jvmOverloads.kt")
            public void testJvmOverloads() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/jvmOverloads.kt");
            }

            @Test
            @TestMetadata("kt23239.kt")
            public void testKt23239() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt23239.kt");
            }

            @Test
            @TestMetadata("kt23739.kt")
            public void testKt23739() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/kt23739.kt");
            }

            @Test
            @TestMetadata("parametersInArgumentValues.kt")
            public void testParametersInArgumentValues() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/parametersInArgumentValues.kt");
            }

            @Test
            @TestMetadata("superCall.kt")
            public void testSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/superCall.kt");
            }

            @Test
            @TestMetadata("suspend.kt")
            public void testSuspend() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/suspend.kt");
            }

            @Test
            @TestMetadata("typeAlias.kt")
            public void testTypeAlias() throws Exception {
                runTest("compiler/testData/codegen/box/multiplatform/defaultArguments/typeAlias.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/multiplatform/multiModule")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiModule extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMultiModule() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/multiplatform/multiModule"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/nonLocalReturns")
    @TestDataPath("$PROJECT_ROOT")
    public class NonLocalReturns extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInNonLocalReturns() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nonLocalReturns"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("kt6895.kt")
        public void testKt6895() throws Exception {
            runTest("compiler/testData/codegen/box/nonLocalReturns/kt6895.kt");
        }

        @Test
        @TestMetadata("kt9644let.kt")
        public void testKt9644let() throws Exception {
            runTest("compiler/testData/codegen/box/nonLocalReturns/kt9644let.kt");
        }

        @Test
        @TestMetadata("localReturnInsideProperty.kt")
        public void testLocalReturnInsideProperty() throws Exception {
            runTest("compiler/testData/codegen/box/nonLocalReturns/localReturnInsideProperty.kt");
        }

        @Test
        @TestMetadata("returnInsideTwoLambdas.kt")
        public void testReturnInsideTwoLambdas() throws Exception {
            runTest("compiler/testData/codegen/box/nonLocalReturns/returnInsideTwoLambdas.kt");
        }

        @Test
        @TestMetadata("use.kt")
        public void testUse() throws Exception {
            runTest("compiler/testData/codegen/box/nonLocalReturns/use.kt");
        }

        @Test
        @TestMetadata("useWithException.kt")
        public void testUseWithException() throws Exception {
            runTest("compiler/testData/codegen/box/nonLocalReturns/useWithException.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/nothingValue")
    @TestDataPath("$PROJECT_ROOT")
    public class NothingValue extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInNothingValue() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nothingValue"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("inNestedCall.kt")
        public void testInNestedCall() throws Exception {
            runTest("compiler/testData/codegen/box/nothingValue/inNestedCall.kt");
        }

        @Test
        @TestMetadata("nothingValueException.kt")
        public void testNothingValueException() throws Exception {
            runTest("compiler/testData/codegen/box/nothingValue/nothingValueException.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/nullCheckOptimization")
    @TestDataPath("$PROJECT_ROOT")
    public class NullCheckOptimization extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInNullCheckOptimization() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/nullCheckOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("exclExclThrowsKnpe_1_3.kt")
        public void testExclExclThrowsKnpe_1_3() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/exclExclThrowsKnpe_1_3.kt");
        }

        @Test
        @TestMetadata("exclExclThrowsNpe.kt")
        public void testExclExclThrowsNpe() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/exclExclThrowsNpe.kt");
        }

        @Test
        @TestMetadata("isNullable.kt")
        public void testIsNullable() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/isNullable.kt");
        }

        @Test
        @TestMetadata("javaNullCheckThrowsIse_1_3.kt")
        public void testJavaNullCheckThrowsIse_1_3() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/javaNullCheckThrowsIse_1_3.kt");
        }

        @Test
        @TestMetadata("javaNullCheckThrowsNpe.kt")
        public void testJavaNullCheckThrowsNpe() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/javaNullCheckThrowsNpe.kt");
        }

        @Test
        @TestMetadata("kt22410.kt")
        public void testKt22410() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/kt22410.kt");
        }

        @Test
        @TestMetadata("kt7774.kt")
        public void testKt7774() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/kt7774.kt");
        }

        @Test
        @TestMetadata("parameterNullCheckThrowsIae_1_3.kt")
        public void testParameterNullCheckThrowsIae_1_3() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/parameterNullCheckThrowsIae_1_3.kt");
        }

        @Test
        @TestMetadata("parameterNullCheckThrowsNpe.kt")
        public void testParameterNullCheckThrowsNpe() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/parameterNullCheckThrowsNpe.kt");
        }

        @Test
        @TestMetadata("primitiveCheckWithSideEffect.kt")
        public void testPrimitiveCheckWithSideEffect() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/primitiveCheckWithSideEffect.kt");
        }

        @Test
        @TestMetadata("trivialInstanceOf.kt")
        public void testTrivialInstanceOf() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/trivialInstanceOf.kt");
        }

        @Test
        @TestMetadata("varModifiedAfterCheck.kt")
        public void testVarModifiedAfterCheck() throws Exception {
            runTest("compiler/testData/codegen/box/nullCheckOptimization/varModifiedAfterCheck.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/objectIntrinsics")
    @TestDataPath("$PROJECT_ROOT")
    public class ObjectIntrinsics extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInObjectIntrinsics() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objectIntrinsics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("objects.kt")
        public void testObjects() throws Exception {
            runTest("compiler/testData/codegen/box/objectIntrinsics/objects.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/objects")
    @TestDataPath("$PROJECT_ROOT")
    public class Objects extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInObjects() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anonymousObjectPropertyInitialization.kt")
        public void testAnonymousObjectPropertyInitialization() throws Exception {
            runTest("compiler/testData/codegen/box/objects/anonymousObjectPropertyInitialization.kt");
        }

        @Test
        @TestMetadata("anonymousObjectReturnsFromTopLevelFun.kt")
        public void testAnonymousObjectReturnsFromTopLevelFun() throws Exception {
            runTest("compiler/testData/codegen/box/objects/anonymousObjectReturnsFromTopLevelFun.kt");
        }

        @Test
        @TestMetadata("classCallsProtectedInheritedByCompanion.kt")
        public void testClassCallsProtectedInheritedByCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/objects/classCallsProtectedInheritedByCompanion.kt");
        }

        @Test
        @TestMetadata("classCompanion.kt")
        public void testClassCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/objects/classCompanion.kt");
        }

        @Test
        @TestMetadata("compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToExtensionPropertyImportedFromObject.kt");
        }

        @Test
        @TestMetadata("compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToArrayAccessToPropertyImportedFromObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/compoundAssignmentToArrayAccessToPropertyImportedFromObject.kt");
        }

        @Test
        @TestMetadata("compoundAssignmentToExtensionPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToExtensionPropertyImportedFromObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/compoundAssignmentToExtensionPropertyImportedFromObject.kt");
        }

        @Test
        @TestMetadata("compoundAssignmentToObjectFromCall.kt")
        public void testCompoundAssignmentToObjectFromCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/compoundAssignmentToObjectFromCall.kt");
        }

        @Test
        @TestMetadata("compoundAssignmentToPropertyImportedFromObject.kt")
        public void testCompoundAssignmentToPropertyImportedFromObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyImportedFromObject.kt");
        }

        @Test
        @TestMetadata("compoundAssignmentToPropertyWithQualifier.kt")
        public void testCompoundAssignmentToPropertyWithQualifier() throws Exception {
            runTest("compiler/testData/codegen/box/objects/compoundAssignmentToPropertyWithQualifier.kt");
        }

        @Test
        @TestMetadata("flist.kt")
        public void testFlist() throws Exception {
            runTest("compiler/testData/codegen/box/objects/flist.kt");
        }

        @Test
        @TestMetadata("initializationOrder.kt")
        public void testInitializationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/objects/initializationOrder.kt");
        }

        @Test
        @TestMetadata("initializerBlockResetToDefault.kt")
        public void testInitializerBlockResetToDefault() throws Exception {
            runTest("compiler/testData/codegen/box/objects/initializerBlockResetToDefault.kt");
        }

        @Test
        @TestMetadata("interfaceCompanion.kt")
        public void testInterfaceCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/objects/interfaceCompanion.kt");
        }

        @Test
        @TestMetadata("interfaceCompanionObjectReference.kt")
        public void testInterfaceCompanionObjectReference() throws Exception {
            runTest("compiler/testData/codegen/box/objects/interfaceCompanionObjectReference.kt");
        }

        @Test
        @TestMetadata("kt1047.kt")
        public void testKt1047() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt1047.kt");
        }

        @Test
        @TestMetadata("kt11117.kt")
        public void testKt11117() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt11117.kt");
        }

        @Test
        @TestMetadata("kt1136.kt")
        public void testKt1136() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt1136.kt");
        }

        @Test
        @TestMetadata("kt1186.kt")
        public void testKt1186() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt1186.kt");
        }

        @Test
        @TestMetadata("kt1600.kt")
        public void testKt1600() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt1600.kt");
        }

        @Test
        @TestMetadata("kt1737.kt")
        public void testKt1737() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt1737.kt");
        }

        @Test
        @TestMetadata("kt18982.kt")
        public void testKt18982() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt18982.kt");
        }

        @Test
        @TestMetadata("kt2398.kt")
        public void testKt2398() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt2398.kt");
        }

        @Test
        @TestMetadata("kt2663.kt")
        public void testKt2663() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt2663.kt");
        }

        @Test
        @TestMetadata("kt2663_2.kt")
        public void testKt2663_2() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt2663_2.kt");
        }

        @Test
        @TestMetadata("kt2663_3.kt")
        public void testKt2663_3() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt2663_3.kt");
        }

        @Test
        @TestMetadata("kt2675.kt")
        public void testKt2675() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt2675.kt");
        }

        @Test
        @TestMetadata("kt2719.kt")
        public void testKt2719() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt2719.kt");
        }

        @Test
        @TestMetadata("kt2822.kt")
        public void testKt2822() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt2822.kt");
        }

        @Test
        @TestMetadata("kt3238.kt")
        public void testKt3238() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt3238.kt");
        }

        @Test
        @TestMetadata("kt3684.kt")
        public void testKt3684() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt3684.kt");
        }

        @Test
        @TestMetadata("kt4086.kt")
        public void testKt4086() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt4086.kt");
        }

        @Test
        @TestMetadata("kt42758.kt")
        public void testKt42758() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt42758.kt");
        }

        @Test
        @TestMetadata("kt535.kt")
        public void testKt535() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt535.kt");
        }

        @Test
        @TestMetadata("kt560.kt")
        public void testKt560() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt560.kt");
        }

        @Test
        @TestMetadata("kt694.kt")
        public void testKt694() throws Exception {
            runTest("compiler/testData/codegen/box/objects/kt694.kt");
        }

        @Test
        @TestMetadata("localFunctionInObjectInitializer_kt4516.kt")
        public void testLocalFunctionInObjectInitializer_kt4516() throws Exception {
            runTest("compiler/testData/codegen/box/objects/localFunctionInObjectInitializer_kt4516.kt");
        }

        @Test
        @TestMetadata("methodOnObject.kt")
        public void testMethodOnObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/methodOnObject.kt");
        }

        @Test
        @TestMetadata("nestedDerivedClassCallsProtectedFromCompanion.kt")
        public void testNestedDerivedClassCallsProtectedFromCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/objects/nestedDerivedClassCallsProtectedFromCompanion.kt");
        }

        @Test
        @TestMetadata("nestedObjectWithSuperclass.kt")
        public void testNestedObjectWithSuperclass() throws Exception {
            runTest("compiler/testData/codegen/box/objects/nestedObjectWithSuperclass.kt");
        }

        @Test
        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/object.kt");
        }

        @Test
        @TestMetadata("objectExtendsInnerAndReferencesOuterMember.kt")
        public void testObjectExtendsInnerAndReferencesOuterMember() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectExtendsInnerAndReferencesOuterMember.kt");
        }

        @Test
        @TestMetadata("objectInLocalAnonymousObject.kt")
        public void testObjectInLocalAnonymousObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectInLocalAnonymousObject.kt");
        }

        @Test
        @TestMetadata("objectInitialization_kt5523.kt")
        public void testObjectInitialization_kt5523() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectInitialization_kt5523.kt");
        }

        @Test
        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectLiteral.kt");
        }

        @Test
        @TestMetadata("objectLiteralInClass.kt")
        public void testObjectLiteralInClass() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectLiteralInClass.kt");
        }

        @Test
        @TestMetadata("objectLiteralInClosure.kt")
        public void testObjectLiteralInClosure() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectLiteralInClosure.kt");
        }

        @Test
        @TestMetadata("objectVsClassInitialization_kt5291.kt")
        public void testObjectVsClassInitialization_kt5291() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectVsClassInitialization_kt5291.kt");
        }

        @Test
        @TestMetadata("objectWithSuperclass.kt")
        public void testObjectWithSuperclass() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectWithSuperclass.kt");
        }

        @Test
        @TestMetadata("objectWithSuperclassAndTrait.kt")
        public void testObjectWithSuperclassAndTrait() throws Exception {
            runTest("compiler/testData/codegen/box/objects/objectWithSuperclassAndTrait.kt");
        }

        @Test
        @TestMetadata("privateExtensionFromInitializer_kt4543.kt")
        public void testPrivateExtensionFromInitializer_kt4543() throws Exception {
            runTest("compiler/testData/codegen/box/objects/privateExtensionFromInitializer_kt4543.kt");
        }

        @Test
        @TestMetadata("privateFunctionFromClosureInInitializer_kt5582.kt")
        public void testPrivateFunctionFromClosureInInitializer_kt5582() throws Exception {
            runTest("compiler/testData/codegen/box/objects/privateFunctionFromClosureInInitializer_kt5582.kt");
        }

        @Test
        @TestMetadata("receiverInConstructor.kt")
        public void testReceiverInConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/objects/receiverInConstructor.kt");
        }

        @Test
        @TestMetadata("safeAccess.kt")
        public void testSafeAccess() throws Exception {
            runTest("compiler/testData/codegen/box/objects/safeAccess.kt");
        }

        @Test
        @TestMetadata("selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
        public void testSelfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInAnonymousObjectInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt")
        public void testSelfReferenceToCompanionObjectInInlineLambdaInConstructorBody() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInConstructorBody.kt");
        }

        @Test
        @TestMetadata("selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInInlineLambdaInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToCompanionObjectInLambdaInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToCompanionObjectInLambdaInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInAnonymousObjectInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInConstructorBody.kt");
        }

        @Test
        @TestMetadata("selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInInlineLambdaInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToInterfaceCompanionObjectInLambdaInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt")
        public void testSelfReferenceToObjectInAnonymousObjectInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInAnonymousObjectInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToObjectInInlineLambdaInConstructorBody.kt")
        public void testSelfReferenceToObjectInInlineLambdaInConstructorBody() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInConstructorBody.kt");
        }

        @Test
        @TestMetadata("selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToObjectInInlineLambdaInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInInlineLambdaInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("selfReferenceToObjectInLambdaInSuperConstructorCall.kt")
        public void testSelfReferenceToObjectInLambdaInSuperConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/selfReferenceToObjectInLambdaInSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            runTest("compiler/testData/codegen/box/objects/simpleObject.kt");
        }

        @Test
        @TestMetadata("substitutionFunctionFromSuper.kt")
        public void testSubstitutionFunctionFromSuper() throws Exception {
            runTest("compiler/testData/codegen/box/objects/substitutionFunctionFromSuper.kt");
        }

        @Test
        @TestMetadata("thisInConstructor.kt")
        public void testThisInConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/objects/thisInConstructor.kt");
        }

        @Test
        @TestMetadata("thisRefToObjectInNestedClassConstructorCall.kt")
        public void testThisRefToObjectInNestedClassConstructorCall() throws Exception {
            runTest("compiler/testData/codegen/box/objects/thisRefToObjectInNestedClassConstructorCall.kt");
        }

        @Test
        @TestMetadata("useAnonymousObjectAsIterator.kt")
        public void testUseAnonymousObjectAsIterator() throws Exception {
            runTest("compiler/testData/codegen/box/objects/useAnonymousObjectAsIterator.kt");
        }

        @Test
        @TestMetadata("useAnonymousObjectFunction.kt")
        public void testUseAnonymousObjectFunction() throws Exception {
            runTest("compiler/testData/codegen/box/objects/useAnonymousObjectFunction.kt");
        }

        @Test
        @TestMetadata("useImportedMember.kt")
        public void testUseImportedMember() throws Exception {
            runTest("compiler/testData/codegen/box/objects/useImportedMember.kt");
        }

        @Test
        @TestMetadata("useImportedMemberFromCompanion.kt")
        public void testUseImportedMemberFromCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/objects/useImportedMemberFromCompanion.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess")
        @TestDataPath("$PROJECT_ROOT")
        public class CompanionObjectAccess extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCompanionObjectAccess() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("kt27117.kt")
            public void testKt27117() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117.kt");
            }

            @Test
            @TestMetadata("kt27117_lv12.kt")
            public void testKt27117_lv12() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117_lv12.kt");
            }

            @Test
            @TestMetadata("kt27117_lv13.kt")
            public void testKt27117_lv13() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27117_lv13.kt");
            }

            @Test
            @TestMetadata("kt27121.kt")
            public void testKt27121() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121.kt");
            }

            @Test
            @TestMetadata("kt27121_lv12.kt")
            public void testKt27121_lv12() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121_lv12.kt");
            }

            @Test
            @TestMetadata("kt27121_lv13.kt")
            public void testKt27121_lv13() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/kt27121_lv13.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromAnonymousObjectInNestedClass.kt")
            public void testPrivateCompanionObjectAccessedFromAnonymousObjectInNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromAnonymousObjectInNestedClass.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromInitBlock.kt")
            public void testPrivateCompanionObjectAccessedFromInitBlock() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInitBlock.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromInitBlockOfNestedClass.kt")
            public void testPrivateCompanionObjectAccessedFromInitBlockOfNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInitBlockOfNestedClass.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromInlineLambdaInNestedClass.kt")
            public void testPrivateCompanionObjectAccessedFromInlineLambdaInNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromInlineLambdaInNestedClass.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromLambdaInNestedClass.kt")
            public void testPrivateCompanionObjectAccessedFromLambdaInNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromLambdaInNestedClass.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromMethodInlinedInNestedClass.kt")
            public void testPrivateCompanionObjectAccessedFromMethodInlinedInNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromMethodInlinedInNestedClass.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromNestedClass.kt")
            public void testPrivateCompanionObjectAccessedFromNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromNestedClass.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectAccessedFromNestedClassSeveralTimes.kt")
            public void testPrivateCompanionObjectAccessedFromNestedClassSeveralTimes() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectAccessedFromNestedClassSeveralTimes.kt");
            }

            @Test
            @TestMetadata("privateCompanionObjectUsedInNestedClass.kt")
            public void testPrivateCompanionObjectUsedInNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/privateCompanionObjectUsedInNestedClass.kt");
            }

            @Test
            @TestMetadata("protectedCompanionObjectAccessedFromNestedClass.kt")
            public void testProtectedCompanionObjectAccessedFromNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/objects/companionObjectAccess/protectedCompanionObjectAccessedFromNestedClass.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors")
            @TestDataPath("$PROJECT_ROOT")
            public class MultipleCompanionsWithAccessors extends AbstractBlackBoxCodegenTest {
                @Test
                @TestMetadata("accessFromInlineLambda.kt")
                public void testAccessFromInlineLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/accessFromInlineLambda.kt");
                }

                @Test
                public void testAllFilesPresentInMultipleCompanionsWithAccessors() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("anonymousObjectInPropertyInitializer.kt")
                public void testAnonymousObjectInPropertyInitializer() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/anonymousObjectInPropertyInitializer.kt");
                }

                @Test
                @TestMetadata("fromAnonymousObjectInNestedClass.kt")
                public void testFromAnonymousObjectInNestedClass() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromAnonymousObjectInNestedClass.kt");
                }

                @Test
                @TestMetadata("fromInitBlock.kt")
                public void testFromInitBlock() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInitBlock.kt");
                }

                @Test
                @TestMetadata("fromInitBlockOfNestedClass.kt")
                public void testFromInitBlockOfNestedClass() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInitBlockOfNestedClass.kt");
                }

                @Test
                @TestMetadata("fromInlineLambdaInNestedClass.kt")
                public void testFromInlineLambdaInNestedClass() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/fromInlineLambdaInNestedClass.kt");
                }

                @Test
                @TestMetadata("inheritedProtectedCompanionAndOwnPrivateCompanion.kt")
                public void testInheritedProtectedCompanionAndOwnPrivateCompanion() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/inheritedProtectedCompanionAndOwnPrivateCompanion.kt");
                }

                @Test
                @TestMetadata("inheritedProtectedCompanionsReferencedByName.kt")
                public void testInheritedProtectedCompanionsReferencedByName() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/inheritedProtectedCompanionsReferencedByName.kt");
                }

                @Test
                @TestMetadata("lambdaInPropertyInitializer.kt")
                public void testLambdaInPropertyInitializer() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/lambdaInPropertyInitializer.kt");
                }

                @Test
                @TestMetadata("twoInheritedProtectedCompanions.kt")
                public void testTwoInheritedProtectedCompanions() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/twoInheritedProtectedCompanions.kt");
                }

                @Test
                @TestMetadata("withCompanionObjectBase.kt")
                public void testWithCompanionObjectBase() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/withCompanionObjectBase.kt");
                }

                @Test
                @TestMetadata("withMultipleNestedCompanionObjectBases.kt")
                public void testWithMultipleNestedCompanionObjectBases() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/multipleCompanionsWithAccessors/withMultipleNestedCompanionObjectBases.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion")
            @TestDataPath("$PROJECT_ROOT")
            public class PrimitiveCompanion extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInPrimitiveCompanion() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("byteCompanionObject.kt")
                public void testByteCompanionObject() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/byteCompanionObject.kt");
                }

                @Test
                @TestMetadata("charCompanionObject.kt")
                public void testCharCompanionObject() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/charCompanionObject.kt");
                }

                @Test
                @TestMetadata("doubleCompanionObject.kt")
                public void testDoubleCompanionObject() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/doubleCompanionObject.kt");
                }

                @Test
                @TestMetadata("floatCompanionObject.kt")
                public void testFloatCompanionObject() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/floatCompanionObject.kt");
                }

                @Test
                @TestMetadata("intCompanionObject.kt")
                public void testIntCompanionObject() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/intCompanionObject.kt");
                }

                @Test
                @TestMetadata("longCompanionObject.kt")
                public void testLongCompanionObject() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/longCompanionObject.kt");
                }

                @Test
                @TestMetadata("shortCompanionObject.kt")
                public void testShortCompanionObject() throws Exception {
                    runTest("compiler/testData/codegen/box/objects/companionObjectAccess/primitiveCompanion/shortCompanionObject.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions")
    @TestDataPath("$PROJECT_ROOT")
    public class OldLanguageVersions extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInOldLanguageVersions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("dataClassEqualsHashCodeToString.kt")
        public void testDataClassEqualsHashCodeToString() throws Exception {
            runTest("compiler/testData/codegen/box/oldLanguageVersions/dataClassEqualsHashCodeToString.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/controlStructures")
        @TestDataPath("$PROJECT_ROOT")
        public class ControlStructures extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInControlStructures() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/controlStructures"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/controlStructures/forInArray")
            @TestDataPath("$PROJECT_ROOT")
            public class ForInArray extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInForInArray() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/controlStructures/forInArray"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("forInArrayWithArrayVarUpdatedInLoopBody12.kt")
                public void testForInArrayWithArrayVarUpdatedInLoopBody12() throws Exception {
                    runTest("compiler/testData/codegen/box/oldLanguageVersions/controlStructures/forInArray/forInArrayWithArrayVarUpdatedInLoopBody12.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/functions")
        @TestDataPath("$PROJECT_ROOT")
        public class Functions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFunctions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/functions/bigArity")
            @TestDataPath("$PROJECT_ROOT")
            public class BigArity extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInBigArity() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/functions/bigArity"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("noBigFunctionTypes.kt")
                public void testNoBigFunctionTypes() throws Exception {
                    runTest("compiler/testData/codegen/box/oldLanguageVersions/functions/bigArity/noBigFunctionTypes.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/ieee754")
        @TestDataPath("$PROJECT_ROOT")
        public class Ieee754 extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInIeee754() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/ieee754"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("nullableDoubleEquals10.kt")
            public void testNullableDoubleEquals10() throws Exception {
                runTest("compiler/testData/codegen/box/oldLanguageVersions/ieee754/nullableDoubleEquals10.kt");
            }

            @Test
            @TestMetadata("nullableDoubleNotEquals10.kt")
            public void testNullableDoubleNotEquals10() throws Exception {
                runTest("compiler/testData/codegen/box/oldLanguageVersions/ieee754/nullableDoubleNotEquals10.kt");
            }

            @Test
            @TestMetadata("nullableFloatEquals10.kt")
            public void testNullableFloatEquals10() throws Exception {
                runTest("compiler/testData/codegen/box/oldLanguageVersions/ieee754/nullableFloatEquals10.kt");
            }

            @Test
            @TestMetadata("nullableFloatNotEquals10.kt")
            public void testNullableFloatNotEquals10() throws Exception {
                runTest("compiler/testData/codegen/box/oldLanguageVersions/ieee754/nullableFloatNotEquals10.kt");
            }

            @Test
            @TestMetadata("when10.kt")
            public void testWhen10() throws Exception {
                runTest("compiler/testData/codegen/box/oldLanguageVersions/ieee754/when10.kt");
            }

            @Test
            @TestMetadata("whenNullableSmartCast10.kt")
            public void testWhenNullableSmartCast10() throws Exception {
                runTest("compiler/testData/codegen/box/oldLanguageVersions/ieee754/whenNullableSmartCast10.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/javaInterop")
        @TestDataPath("$PROJECT_ROOT")
        public class JavaInterop extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJavaInterop() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/javaInterop/notNullAssertions")
            @TestDataPath("$PROJECT_ROOT")
            public class NotNullAssertions extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInNotNullAssertions() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/javaInterop/notNullAssertions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv11.kt")
                public void testIncWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv11() throws Exception {
                    runTest("compiler/testData/codegen/box/oldLanguageVersions/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiverInPrivateOperator_lv11.kt");
                }

                @Test
                @TestMetadata("incWithNullabilityAssertionOnExtensionReceiver_lv11.kt")
                public void testIncWithNullabilityAssertionOnExtensionReceiver_lv11() throws Exception {
                    runTest("compiler/testData/codegen/box/oldLanguageVersions/javaInterop/notNullAssertions/incWithNullabilityAssertionOnExtensionReceiver_lv11.kt");
                }

                @Test
                @TestMetadata("nullabilityAssertionOnExtensionReceiver_lv11.kt")
                public void testNullabilityAssertionOnExtensionReceiver_lv11() throws Exception {
                    runTest("compiler/testData/codegen/box/oldLanguageVersions/javaInterop/notNullAssertions/nullabilityAssertionOnExtensionReceiver_lv11.kt");
                }

                @Test
                @TestMetadata("nullabilityAssertionOnInlineFunExtensionReceiver_lv11.kt")
                public void testNullabilityAssertionOnInlineFunExtensionReceiver_lv11() throws Exception {
                    runTest("compiler/testData/codegen/box/oldLanguageVersions/javaInterop/notNullAssertions/nullabilityAssertionOnInlineFunExtensionReceiver_lv11.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/operatorConventions")
        @TestDataPath("$PROJECT_ROOT")
        public class OperatorConventions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInOperatorConventions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/operatorConventions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("percentAsModOnBigIntegerWithoutRem.kt")
            public void testPercentAsModOnBigIntegerWithoutRem() throws Exception {
                runTest("compiler/testData/codegen/box/oldLanguageVersions/operatorConventions/percentAsModOnBigIntegerWithoutRem.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/platformTypes")
        @TestDataPath("$PROJECT_ROOT")
        public class PlatformTypes extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInPlatformTypes() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/platformTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/oldLanguageVersions/platformTypes/primitives")
            @TestDataPath("$PROJECT_ROOT")
            public class Primitives extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInPrimitives() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/oldLanguageVersions/platformTypes/primitives"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("equalsNull_lv11.kt")
                public void testEqualsNull_lv11() throws Exception {
                    runTest("compiler/testData/codegen/box/oldLanguageVersions/platformTypes/primitives/equalsNull_lv11.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/operatorConventions")
    @TestDataPath("$PROJECT_ROOT")
    public class OperatorConventions extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInOperatorConventions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("annotatedAssignment.kt")
        public void testAnnotatedAssignment() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/annotatedAssignment.kt");
        }

        @Test
        @TestMetadata("assignmentOperations.kt")
        public void testAssignmentOperations() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/assignmentOperations.kt");
        }

        @Test
        @TestMetadata("augmentedAssignmentInInitializer.kt")
        public void testAugmentedAssignmentInInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentInInitializer.kt");
        }

        @Test
        @TestMetadata("augmentedAssignmentWithArrayLHS.kt")
        public void testAugmentedAssignmentWithArrayLHS() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/augmentedAssignmentWithArrayLHS.kt");
        }

        @Test
        @TestMetadata("genericArrayAccessCall.kt")
        public void testGenericArrayAccessCall() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/genericArrayAccessCall.kt");
        }

        @Test
        @TestMetadata("incDecOnObject.kt")
        public void testIncDecOnObject() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/incDecOnObject.kt");
        }

        @Test
        @TestMetadata("infixFunctionOverBuiltinMember.kt")
        public void testInfixFunctionOverBuiltinMember() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/infixFunctionOverBuiltinMember.kt");
        }

        @Test
        @TestMetadata("kt14201.kt")
        public void testKt14201() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/kt14201.kt");
        }

        @Test
        @TestMetadata("kt14201_2.kt")
        public void testKt14201_2() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/kt14201_2.kt");
        }

        @Test
        @TestMetadata("kt14227.kt")
        public void testKt14227() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/kt14227.kt");
        }

        @Test
        @TestMetadata("kt20387.kt")
        public void testKt20387() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/kt20387.kt");
        }

        @Test
        @TestMetadata("kt4152.kt")
        public void testKt4152() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/kt4152.kt");
        }

        @Test
        @TestMetadata("kt4987.kt")
        public void testKt4987() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/kt4987.kt");
        }

        @Test
        @TestMetadata("nestedMaps.kt")
        public void testNestedMaps() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/nestedMaps.kt");
        }

        @Test
        @TestMetadata("operatorSetLambda.kt")
        public void testOperatorSetLambda() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/operatorSetLambda.kt");
        }

        @Test
        @TestMetadata("overloadedSet.kt")
        public void testOverloadedSet() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/overloadedSet.kt");
        }

        @Test
        @TestMetadata("plusAssignWithComplexRHS.kt")
        public void testPlusAssignWithComplexRHS() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/plusAssignWithComplexRHS.kt");
        }

        @Test
        @TestMetadata("plusExplicit.kt")
        public void testPlusExplicit() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/plusExplicit.kt");
        }

        @Test
        @TestMetadata("remAssignmentOperation.kt")
        public void testRemAssignmentOperation() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/remAssignmentOperation.kt");
        }

        @Test
        @TestMetadata("remOverModOperation.kt")
        public void testRemOverModOperation() throws Exception {
            runTest("compiler/testData/codegen/box/operatorConventions/remOverModOperation.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/operatorConventions/compareTo")
        @TestDataPath("$PROJECT_ROOT")
        public class CompareTo extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCompareTo() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/operatorConventions/compareTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boolean.kt")
            public void testBoolean() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/boolean.kt");
            }

            @Test
            @TestMetadata("comparable.kt")
            public void testComparable() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/comparable.kt");
            }

            @Test
            @TestMetadata("customCompareTo.kt")
            public void testCustomCompareTo() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/customCompareTo.kt");
            }

            @Test
            @TestMetadata("doubleInt.kt")
            public void testDoubleInt() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleInt.kt");
            }

            @Test
            @TestMetadata("doubleLong.kt")
            public void testDoubleLong() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/doubleLong.kt");
            }

            @Test
            @TestMetadata("extensionArray.kt")
            public void testExtensionArray() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionArray.kt");
            }

            @Test
            @TestMetadata("extensionObject.kt")
            public void testExtensionObject() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/extensionObject.kt");
            }

            @Test
            @TestMetadata("intDouble.kt")
            public void testIntDouble() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intDouble.kt");
            }

            @Test
            @TestMetadata("intLong.kt")
            public void testIntLong() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/intLong.kt");
            }

            @Test
            @TestMetadata("longDouble.kt")
            public void testLongDouble() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longDouble.kt");
            }

            @Test
            @TestMetadata("longInt.kt")
            public void testLongInt() throws Exception {
                runTest("compiler/testData/codegen/box/operatorConventions/compareTo/longInt.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/optimizations")
    @TestDataPath("$PROJECT_ROOT")
    public class Optimizations extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInOptimizations() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/optimizations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("hashCode.kt")
        public void testHashCode() throws Exception {
            runTest("compiler/testData/codegen/box/optimizations/hashCode.kt");
        }

        @Test
        @TestMetadata("kt20844.kt")
        public void testKt20844() throws Exception {
            runTest("compiler/testData/codegen/box/optimizations/kt20844.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/package")
    @TestDataPath("$PROJECT_ROOT")
    public class Package extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInPackage() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/package"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("boxPrimitiveTypeInClinit.kt")
        public void testBoxPrimitiveTypeInClinit() throws Exception {
            runTest("compiler/testData/codegen/box/package/boxPrimitiveTypeInClinit.kt");
        }

        @Test
        @TestMetadata("checkCast.kt")
        public void testCheckCast() throws Exception {
            runTest("compiler/testData/codegen/box/package/checkCast.kt");
        }

        @Test
        @TestMetadata("incrementProperty.kt")
        public void testIncrementProperty() throws Exception {
            runTest("compiler/testData/codegen/box/package/incrementProperty.kt");
        }

        @Test
        @TestMetadata("initializationOrder.kt")
        public void testInitializationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/package/initializationOrder.kt");
        }

        @Test
        @TestMetadata("invokespecial.kt")
        public void testInvokespecial() throws Exception {
            runTest("compiler/testData/codegen/box/package/invokespecial.kt");
        }

        @Test
        @TestMetadata("mainInFiles.kt")
        public void testMainInFiles() throws Exception {
            runTest("compiler/testData/codegen/box/package/mainInFiles.kt");
        }

        @Test
        @TestMetadata("nullablePrimitiveNoFieldInitializer.kt")
        public void testNullablePrimitiveNoFieldInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/package/nullablePrimitiveNoFieldInitializer.kt");
        }

        @Test
        @TestMetadata("packageLocalClassNotImportedWithDefaultImport.kt")
        public void testPackageLocalClassNotImportedWithDefaultImport() throws Exception {
            runTest("compiler/testData/codegen/box/package/packageLocalClassNotImportedWithDefaultImport.kt");
        }

        @Test
        @TestMetadata("packageQualifiedMethod.kt")
        public void testPackageQualifiedMethod() throws Exception {
            runTest("compiler/testData/codegen/box/package/packageQualifiedMethod.kt");
        }

        @Test
        @TestMetadata("privateMembersInImportList.kt")
        public void testPrivateMembersInImportList() throws Exception {
            runTest("compiler/testData/codegen/box/package/privateMembersInImportList.kt");
        }

        @Test
        @TestMetadata("privateTopLevelPropAndVarInInner.kt")
        public void testPrivateTopLevelPropAndVarInInner() throws Exception {
            runTest("compiler/testData/codegen/box/package/privateTopLevelPropAndVarInInner.kt");
        }

        @Test
        @TestMetadata("referenceWithTheSameNameAsPackage.kt")
        public void testReferenceWithTheSameNameAsPackage() throws Exception {
            runTest("compiler/testData/codegen/box/package/referenceWithTheSameNameAsPackage.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/parametersMetadata")
    @TestDataPath("$PROJECT_ROOT")
    public class ParametersMetadata extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInParametersMetadata() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/parametersMetadata"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("defaultImpls.kt")
        public void testDefaultImpls() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/defaultImpls.kt");
        }

        @Test
        @TestMetadata("delegation.kt")
        public void testDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/delegation.kt");
        }

        @Test
        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/enum.kt");
        }

        @Test
        @TestMetadata("extensionFunction.kt")
        public void testExtensionFunction() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/extensionFunction.kt");
        }

        @Test
        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/function.kt");
        }

        @Test
        @TestMetadata("inlineClassMethodParameterModifiers.kt")
        public void testInlineClassMethodParameterModifiers() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/inlineClassMethodParameterModifiers.kt");
        }

        @Test
        @TestMetadata("inlineClassMethodParameterNames.kt")
        public void testInlineClassMethodParameterNames() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/inlineClassMethodParameterNames.kt");
        }

        @Test
        @TestMetadata("innerClass.kt")
        public void testInnerClass() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/innerClass.kt");
        }

        @Test
        @TestMetadata("superParams.kt")
        public void testSuperParams() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/superParams.kt");
        }

        @Test
        @TestMetadata("suspendFunction.kt")
        public void testSuspendFunction() throws Exception {
            runTest("compiler/testData/codegen/box/parametersMetadata/suspendFunction.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/platformTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class PlatformTypes extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInPlatformTypes() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/platformTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("inferenceFlexibleTToNullable.kt")
        public void testInferenceFlexibleTToNullable() throws Exception {
            runTest("compiler/testData/codegen/box/platformTypes/inferenceFlexibleTToNullable.kt");
        }

        @Test
        @TestMetadata("unsafeNullCheck.kt")
        public void testUnsafeNullCheck() throws Exception {
            runTest("compiler/testData/codegen/box/platformTypes/unsafeNullCheck.kt");
        }

        @Test
        @TestMetadata("unsafeNullCheckWithPrimitive.kt")
        public void testUnsafeNullCheckWithPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/platformTypes/unsafeNullCheckWithPrimitive.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/platformTypes/primitives")
        @TestDataPath("$PROJECT_ROOT")
        public class Primitives extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInPrimitives() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/platformTypes/primitives"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("assign.kt")
            public void testAssign() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/assign.kt");
            }

            @Test
            @TestMetadata("compareTo.kt")
            public void testCompareTo() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/compareTo.kt");
            }

            @Test
            @TestMetadata("dec.kt")
            public void testDec() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/dec.kt");
            }

            @Test
            @TestMetadata("div.kt")
            public void testDiv() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/div.kt");
            }

            @Test
            @TestMetadata("equals.kt")
            public void testEquals() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/equals.kt");
            }

            @Test
            @TestMetadata("equalsNull.kt")
            public void testEqualsNull() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/equalsNull.kt");
            }

            @Test
            @TestMetadata("hashCode.kt")
            public void testHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/hashCode.kt");
            }

            @Test
            @TestMetadata("identityEquals.kt")
            public void testIdentityEquals() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/identityEquals.kt");
            }

            @Test
            @TestMetadata("inc.kt")
            public void testInc() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/inc.kt");
            }

            @Test
            @TestMetadata("minus.kt")
            public void testMinus() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/minus.kt");
            }

            @Test
            @TestMetadata("mod.kt")
            public void testMod() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/mod.kt");
            }

            @Test
            @TestMetadata("not.kt")
            public void testNot() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/not.kt");
            }

            @Test
            @TestMetadata("notEquals.kt")
            public void testNotEquals() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/notEquals.kt");
            }

            @Test
            @TestMetadata("plus.kt")
            public void testPlus() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/plus.kt");
            }

            @Test
            @TestMetadata("plusAssign.kt")
            public void testPlusAssign() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/plusAssign.kt");
            }

            @Test
            @TestMetadata("rangeTo.kt")
            public void testRangeTo() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/rangeTo.kt");
            }

            @Test
            @TestMetadata("times.kt")
            public void testTimes() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/times.kt");
            }

            @Test
            @TestMetadata("toShort.kt")
            public void testToShort() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/toShort.kt");
            }

            @Test
            @TestMetadata("toString.kt")
            public void testToString() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/toString.kt");
            }

            @Test
            @TestMetadata("unaryMinus.kt")
            public void testUnaryMinus() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryMinus.kt");
            }

            @Test
            @TestMetadata("unaryPlus.kt")
            public void testUnaryPlus() throws Exception {
                runTest("compiler/testData/codegen/box/platformTypes/primitives/unaryPlus.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/polymorphicSignature")
    @TestDataPath("$PROJECT_ROOT")
    public class PolymorphicSignature extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInPolymorphicSignature() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/polymorphicSignature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anonymousSubclass.kt")
        public void testAnonymousSubclass() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/anonymousSubclass.kt");
        }

        @Test
        @TestMetadata("invoke.kt")
        public void testInvoke() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/invoke.kt");
        }

        @Test
        @TestMetadata("invokeExact.kt")
        public void testInvokeExact() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/invokeExact.kt");
        }

        @Test
        @TestMetadata("invokeExactWithInlineClass.kt")
        public void testInvokeExactWithInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/invokeExactWithInlineClass.kt");
        }

        @Test
        @TestMetadata("nullArgument.kt")
        public void testNullArgument() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/nullArgument.kt");
        }

        @Test
        @TestMetadata("varargOfObjects_after.kt")
        public void testVarargOfObjects_after() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/varargOfObjects_after.kt");
        }

        @Test
        @TestMetadata("varargOfObjects_before.kt")
        public void testVarargOfObjects_before() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/varargOfObjects_before.kt");
        }

        @Test
        @TestMetadata("voidReturnType.kt")
        public void testVoidReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/polymorphicSignature/voidReturnType.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/primitiveTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class PrimitiveTypes extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInPrimitiveTypes() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("comparisonWithNaN.kt")
        public void testComparisonWithNaN() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNaN.kt");
        }

        @Test
        @TestMetadata("comparisonWithNullCallsFun.kt")
        public void testComparisonWithNullCallsFun() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/comparisonWithNullCallsFun.kt");
        }

        @Test
        @TestMetadata("conversions.kt")
        public void testConversions() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/conversions.kt");
        }

        @Test
        @TestMetadata("ea35963.kt")
        public void testEa35963() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/ea35963.kt");
        }

        @Test
        @TestMetadata("equalsHashCodeToString.kt")
        public void testEqualsHashCodeToString() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/equalsHashCodeToString.kt");
        }

        @Test
        @TestMetadata("incrementByteCharShort.kt")
        public void testIncrementByteCharShort() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/incrementByteCharShort.kt");
        }

        @Test
        @TestMetadata("intLiteralIsNotNull.kt")
        public void testIntLiteralIsNotNull() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/intLiteralIsNotNull.kt");
        }

        @Test
        @TestMetadata("kt1054.kt")
        public void testKt1054() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt1054.kt");
        }

        @Test
        @TestMetadata("kt1055.kt")
        public void testKt1055() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt1055.kt");
        }

        @Test
        @TestMetadata("kt1093.kt")
        public void testKt1093() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt1093.kt");
        }

        @Test
        @TestMetadata("kt13023.kt")
        public void testKt13023() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt13023.kt");
        }

        @Test
        @TestMetadata("kt14868.kt")
        public void testKt14868() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt14868.kt");
        }

        @Test
        @TestMetadata("kt1508.kt")
        public void testKt1508() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt1508.kt");
        }

        @Test
        @TestMetadata("kt1634.kt")
        public void testKt1634() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt1634.kt");
        }

        @Test
        @TestMetadata("kt16732.kt")
        public void testKt16732() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt16732.kt");
        }

        @Test
        @TestMetadata("kt2251.kt")
        public void testKt2251() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt2251.kt");
        }

        @Test
        @TestMetadata("kt2269.kt")
        public void testKt2269() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt2269.kt");
        }

        @Test
        @TestMetadata("kt2269NotOptimizable.kt")
        public void testKt2269NotOptimizable() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt2269NotOptimizable.kt");
        }

        @Test
        @TestMetadata("kt2275.kt")
        public void testKt2275() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt2275.kt");
        }

        @Test
        @TestMetadata("kt239.kt")
        public void testKt239() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt239.kt");
        }

        @Test
        @TestMetadata("kt242.kt")
        public void testKt242() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt242.kt");
        }

        @Test
        @TestMetadata("kt243.kt")
        public void testKt243() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt243.kt");
        }

        @Test
        @TestMetadata("kt248.kt")
        public void testKt248() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt248.kt");
        }

        @Test
        @TestMetadata("kt2768.kt")
        public void testKt2768() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt2768.kt");
        }

        @Test
        @TestMetadata("kt2794.kt")
        public void testKt2794() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt2794.kt");
        }

        @Test
        @TestMetadata("kt3078.kt")
        public void testKt3078() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt3078.kt");
        }

        @Test
        @TestMetadata("kt3517.kt")
        public void testKt3517() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt3517.kt");
        }

        @Test
        @TestMetadata("kt3576.kt")
        public void testKt3576() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt3576.kt");
        }

        @Test
        @TestMetadata("kt3613.kt")
        public void testKt3613() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt3613.kt");
        }

        @Test
        @TestMetadata("kt37505.kt")
        public void testKt37505() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt37505.kt");
        }

        @Test
        @TestMetadata("kt4097.kt")
        public void testKt4097() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt4097.kt");
        }

        @Test
        @TestMetadata("kt4098.kt")
        public void testKt4098() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt4098.kt");
        }

        @Test
        @TestMetadata("kt4210.kt")
        public void testKt4210() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt4210.kt");
        }

        @Test
        @TestMetadata("kt4251.kt")
        public void testKt4251() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt4251.kt");
        }

        @Test
        @TestMetadata("kt446.kt")
        public void testKt446() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt446.kt");
        }

        @Test
        @TestMetadata("kt518.kt")
        public void testKt518() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt518.kt");
        }

        @Test
        @TestMetadata("kt6590_identityEquals.kt")
        public void testKt6590_identityEquals() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt6590_identityEquals.kt");
        }

        @Test
        @TestMetadata("kt665.kt")
        public void testKt665() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt665.kt");
        }

        @Test
        @TestMetadata("kt684.kt")
        public void testKt684() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt684.kt");
        }

        @Test
        @TestMetadata("kt711.kt")
        public void testKt711() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt711.kt");
        }

        @Test
        @TestMetadata("kt737.kt")
        public void testKt737() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt737.kt");
        }

        @Test
        @TestMetadata("kt752.kt")
        public void testKt752() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt752.kt");
        }

        @Test
        @TestMetadata("kt753.kt")
        public void testKt753() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt753.kt");
        }

        @Test
        @TestMetadata("kt756.kt")
        public void testKt756() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt756.kt");
        }

        @Test
        @TestMetadata("kt757.kt")
        public void testKt757() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt757.kt");
        }

        @Test
        @TestMetadata("kt828.kt")
        public void testKt828() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt828.kt");
        }

        @Test
        @TestMetadata("kt877.kt")
        public void testKt877() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt877.kt");
        }

        @Test
        @TestMetadata("kt882.kt")
        public void testKt882() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt882.kt");
        }

        @Test
        @TestMetadata("kt887.kt")
        public void testKt887() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt887.kt");
        }

        @Test
        @TestMetadata("kt935.kt")
        public void testKt935() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/kt935.kt");
        }

        @Test
        @TestMetadata("nullAsNullableIntIsNull.kt")
        public void testNullAsNullableIntIsNull() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/nullAsNullableIntIsNull.kt");
        }

        @Test
        @TestMetadata("nullableAsIndex.kt")
        public void testNullableAsIndex() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/nullableAsIndex.kt");
        }

        @Test
        @TestMetadata("nullableCharBoolean.kt")
        public void testNullableCharBoolean() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/nullableCharBoolean.kt");
        }

        @Test
        @TestMetadata("number.kt")
        public void testNumber() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/number.kt");
        }

        @Test
        @TestMetadata("numberEqualsHashCodeToString.kt")
        public void testNumberEqualsHashCodeToString() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/numberEqualsHashCodeToString.kt");
        }

        @Test
        @TestMetadata("rangeTo.kt")
        public void testRangeTo() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/rangeTo.kt");
        }

        @Test
        @TestMetadata("stringEqualsHashCodeToString.kt")
        public void testStringEqualsHashCodeToString() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/stringEqualsHashCodeToString.kt");
        }

        @Test
        @TestMetadata("substituteIntForGeneric.kt")
        public void testSubstituteIntForGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/substituteIntForGeneric.kt");
        }

        @Test
        @TestMetadata("unboxComparable.kt")
        public void testUnboxComparable() throws Exception {
            runTest("compiler/testData/codegen/box/primitiveTypes/unboxComparable.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject")
        @TestDataPath("$PROJECT_ROOT")
        public class EqualityWithObject extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEqualityWithObject() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boxedEqPrimitiveEvaluationOrder.kt")
            public void testBoxedEqPrimitiveEvaluationOrder() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedEqPrimitiveEvaluationOrder.kt");
            }

            @Test
            @TestMetadata("boxedLongEqualsLong.kt")
            public void testBoxedLongEqualsLong() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/boxedLongEqualsLong.kt");
            }

            @Test
            @TestMetadata("intEqualsNull.kt")
            public void testIntEqualsNull() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNull.kt");
            }

            @Test
            @TestMetadata("intEqualsNullableInt.kt")
            public void testIntEqualsNullableInt() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNullableInt.kt");
            }

            @Test
            @TestMetadata("intEqualsNullableIntWithSmartCasts.kt")
            public void testIntEqualsNullableIntWithSmartCasts() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/intEqualsNullableIntWithSmartCasts.kt");
            }

            @Test
            @TestMetadata("kt42281.kt")
            public void testKt42281() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/kt42281.kt");
            }

            @Test
            @TestMetadata("objectWithAsymmetricEqualsEqPrimitive.kt")
            public void testObjectWithAsymmetricEqualsEqPrimitive() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/objectWithAsymmetricEqualsEqPrimitive.kt");
            }

            @Test
            @TestMetadata("whenIntAsNullableAny.kt")
            public void testWhenIntAsNullableAny() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/whenIntAsNullableAny.kt");
            }

            @Test
            @TestMetadata("whenNullableBoxed.kt")
            public void testWhenNullableBoxed() throws Exception {
                runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/whenNullableBoxed.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated")
            @TestDataPath("$PROJECT_ROOT")
            public class Generated extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInGenerated() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("boxedEqPrimitiveBoolean.kt")
                public void testBoxedEqPrimitiveBoolean() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveBoolean.kt");
                }

                @Test
                @TestMetadata("boxedEqPrimitiveByte.kt")
                public void testBoxedEqPrimitiveByte() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveByte.kt");
                }

                @Test
                @TestMetadata("boxedEqPrimitiveChar.kt")
                public void testBoxedEqPrimitiveChar() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveChar.kt");
                }

                @Test
                @TestMetadata("boxedEqPrimitiveInt.kt")
                public void testBoxedEqPrimitiveInt() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveInt.kt");
                }

                @Test
                @TestMetadata("boxedEqPrimitiveLong.kt")
                public void testBoxedEqPrimitiveLong() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveLong.kt");
                }

                @Test
                @TestMetadata("boxedEqPrimitiveShort.kt")
                public void testBoxedEqPrimitiveShort() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/boxedEqPrimitiveShort.kt");
                }

                @Test
                @TestMetadata("primitiveEqBoxedBoolean.kt")
                public void testPrimitiveEqBoxedBoolean() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedBoolean.kt");
                }

                @Test
                @TestMetadata("primitiveEqBoxedByte.kt")
                public void testPrimitiveEqBoxedByte() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedByte.kt");
                }

                @Test
                @TestMetadata("primitiveEqBoxedChar.kt")
                public void testPrimitiveEqBoxedChar() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedChar.kt");
                }

                @Test
                @TestMetadata("primitiveEqBoxedInt.kt")
                public void testPrimitiveEqBoxedInt() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedInt.kt");
                }

                @Test
                @TestMetadata("primitiveEqBoxedLong.kt")
                public void testPrimitiveEqBoxedLong() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedLong.kt");
                }

                @Test
                @TestMetadata("primitiveEqBoxedShort.kt")
                public void testPrimitiveEqBoxedShort() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqBoxedShort.kt");
                }

                @Test
                @TestMetadata("primitiveEqObjectBoolean.kt")
                public void testPrimitiveEqObjectBoolean() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectBoolean.kt");
                }

                @Test
                @TestMetadata("primitiveEqObjectByte.kt")
                public void testPrimitiveEqObjectByte() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectByte.kt");
                }

                @Test
                @TestMetadata("primitiveEqObjectChar.kt")
                public void testPrimitiveEqObjectChar() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectChar.kt");
                }

                @Test
                @TestMetadata("primitiveEqObjectInt.kt")
                public void testPrimitiveEqObjectInt() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectInt.kt");
                }

                @Test
                @TestMetadata("primitiveEqObjectLong.kt")
                public void testPrimitiveEqObjectLong() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectLong.kt");
                }

                @Test
                @TestMetadata("primitiveEqObjectShort.kt")
                public void testPrimitiveEqObjectShort() throws Exception {
                    runTest("compiler/testData/codegen/box/primitiveTypes/equalityWithObject/generated/primitiveEqObjectShort.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/private")
    @TestDataPath("$PROJECT_ROOT")
    public class Private extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInPrivate() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/private"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("arrayConvention.kt")
        public void testArrayConvention() throws Exception {
            runTest("compiler/testData/codegen/box/private/arrayConvention.kt");
        }

        @Test
        @TestMetadata("kt9855.kt")
        public void testKt9855() throws Exception {
            runTest("compiler/testData/codegen/box/private/kt9855.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/privateConstructors")
    @TestDataPath("$PROJECT_ROOT")
    public class PrivateConstructors extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInPrivateConstructors() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/privateConstructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("base.kt")
        public void testBase() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/base.kt");
        }

        @Test
        @TestMetadata("captured.kt")
        public void testCaptured() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/captured.kt");
        }

        @Test
        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/companion.kt");
        }

        @Test
        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/inline.kt");
        }

        @Test
        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/inner.kt");
        }

        @Test
        @TestMetadata("kt4860.kt")
        public void testKt4860() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/kt4860.kt");
        }

        @Test
        @TestMetadata("secondary.kt")
        public void testSecondary() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/secondary.kt");
        }

        @Test
        @TestMetadata("synthetic.kt")
        public void testSynthetic() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/synthetic.kt");
        }

        @Test
        @TestMetadata("withArguments.kt")
        public void testWithArguments() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/withArguments.kt");
        }

        @Test
        @TestMetadata("withDefault.kt")
        public void testWithDefault() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/withDefault.kt");
        }

        @Test
        @TestMetadata("withLinkedClasses.kt")
        public void testWithLinkedClasses() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/withLinkedClasses.kt");
        }

        @Test
        @TestMetadata("withLinkedObjects.kt")
        public void testWithLinkedObjects() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/withLinkedObjects.kt");
        }

        @Test
        @TestMetadata("withVarargs.kt")
        public void testWithVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/privateConstructors/withVarargs.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("accessToPrivateProperty.kt")
        public void testAccessToPrivateProperty() throws Exception {
            runTest("compiler/testData/codegen/box/properties/accessToPrivateProperty.kt");
        }

        @Test
        @TestMetadata("accessToPrivateSetter.kt")
        public void testAccessToPrivateSetter() throws Exception {
            runTest("compiler/testData/codegen/box/properties/accessToPrivateSetter.kt");
        }

        @Test
        @TestMetadata("accessorForProtectedPropertyWithPrivateSetter.kt")
        public void testAccessorForProtectedPropertyWithPrivateSetter() throws Exception {
            runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetter.kt");
        }

        @Test
        @TestMetadata("accessorForProtectedPropertyWithPrivateSetterInObjectLiteral.kt")
        public void testAccessorForProtectedPropertyWithPrivateSetterInObjectLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterInObjectLiteral.kt");
        }

        @Test
        @TestMetadata("accessorForProtectedPropertyWithPrivateSetterViaSuper.kt")
        public void testAccessorForProtectedPropertyWithPrivateSetterViaSuper() throws Exception {
            runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterViaSuper.kt");
        }

        @Test
        @TestMetadata("accessorForProtectedPropertyWithPrivateSetterWithIntermediateClass.kt")
        public void testAccessorForProtectedPropertyWithPrivateSetterWithIntermediateClass() throws Exception {
            runTest("compiler/testData/codegen/box/properties/accessorForProtectedPropertyWithPrivateSetterWithIntermediateClass.kt");
        }

        @Test
        public void testAllFilesPresentInProperties() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("augmentedAssignmentsAndIncrements.kt")
        public void testAugmentedAssignmentsAndIncrements() throws Exception {
            runTest("compiler/testData/codegen/box/properties/augmentedAssignmentsAndIncrements.kt");
        }

        @Test
        @TestMetadata("classArtificialFieldInsideNested.kt")
        public void testClassArtificialFieldInsideNested() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classArtificialFieldInsideNested.kt");
        }

        @Test
        @TestMetadata("classFieldInsideLambda.kt")
        public void testClassFieldInsideLambda() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classFieldInsideLambda.kt");
        }

        @Test
        @TestMetadata("classFieldInsideLocalInSetter.kt")
        public void testClassFieldInsideLocalInSetter() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classFieldInsideLocalInSetter.kt");
        }

        @Test
        @TestMetadata("classFieldInsideNested.kt")
        public void testClassFieldInsideNested() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classFieldInsideNested.kt");
        }

        @Test
        @TestMetadata("classFieldInsideNestedLambda.kt")
        public void testClassFieldInsideNestedLambda() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classFieldInsideNestedLambda.kt");
        }

        @Test
        @TestMetadata("classFieldInsideNestedNestedLambda.kt")
        public void testClassFieldInsideNestedNestedLambda() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classFieldInsideNestedNestedLambda.kt");
        }

        @Test
        @TestMetadata("classObjectProperties.kt")
        public void testClassObjectProperties() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classObjectProperties.kt");
        }

        @Test
        @TestMetadata("classPrivateArtificialFieldInsideNested.kt")
        public void testClassPrivateArtificialFieldInsideNested() throws Exception {
            runTest("compiler/testData/codegen/box/properties/classPrivateArtificialFieldInsideNested.kt");
        }

        @Test
        @TestMetadata("collectionSize.kt")
        public void testCollectionSize() throws Exception {
            runTest("compiler/testData/codegen/box/properties/collectionSize.kt");
        }

        @Test
        @TestMetadata("commonPropertiesKJK.kt")
        public void testCommonPropertiesKJK() throws Exception {
            runTest("compiler/testData/codegen/box/properties/commonPropertiesKJK.kt");
        }

        @Test
        @TestMetadata("companionFieldInsideLambda.kt")
        public void testCompanionFieldInsideLambda() throws Exception {
            runTest("compiler/testData/codegen/box/properties/companionFieldInsideLambda.kt");
        }

        @Test
        @TestMetadata("companionObjectAccessor.kt")
        public void testCompanionObjectAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/properties/companionObjectAccessor.kt");
        }

        @Test
        @TestMetadata("companionObjectPropertiesFromJava.kt")
        public void testCompanionObjectPropertiesFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/properties/companionObjectPropertiesFromJava.kt");
        }

        @Test
        @TestMetadata("companionPrivateField.kt")
        public void testCompanionPrivateField() throws Exception {
            runTest("compiler/testData/codegen/box/properties/companionPrivateField.kt");
        }

        @Test
        @TestMetadata("companionPrivateFieldInsideLambda.kt")
        public void testCompanionPrivateFieldInsideLambda() throws Exception {
            runTest("compiler/testData/codegen/box/properties/companionPrivateFieldInsideLambda.kt");
        }

        @Test
        @TestMetadata("complexPropertyInitializer.kt")
        public void testComplexPropertyInitializer() throws Exception {
            runTest("compiler/testData/codegen/box/properties/complexPropertyInitializer.kt");
        }

        @Test
        @TestMetadata("field.kt")
        public void testField() throws Exception {
            runTest("compiler/testData/codegen/box/properties/field.kt");
        }

        @Test
        @TestMetadata("fieldInClass.kt")
        public void testFieldInClass() throws Exception {
            runTest("compiler/testData/codegen/box/properties/fieldInClass.kt");
        }

        @Test
        @TestMetadata("fieldInsideField.kt")
        public void testFieldInsideField() throws Exception {
            runTest("compiler/testData/codegen/box/properties/fieldInsideField.kt");
        }

        @Test
        @TestMetadata("fieldInsideLambda.kt")
        public void testFieldInsideLambda() throws Exception {
            runTest("compiler/testData/codegen/box/properties/fieldInsideLambda.kt");
        }

        @Test
        @TestMetadata("fieldInsideNested.kt")
        public void testFieldInsideNested() throws Exception {
            runTest("compiler/testData/codegen/box/properties/fieldInsideNested.kt");
        }

        @Test
        @TestMetadata("fieldSimple.kt")
        public void testFieldSimple() throws Exception {
            runTest("compiler/testData/codegen/box/properties/fieldSimple.kt");
        }

        @Test
        @TestMetadata("generalAccess.kt")
        public void testGeneralAccess() throws Exception {
            runTest("compiler/testData/codegen/box/properties/generalAccess.kt");
        }

        @Test
        @TestMetadata("genericPropertyMultiModule.kt")
        public void testGenericPropertyMultiModule() throws Exception {
            runTest("compiler/testData/codegen/box/properties/genericPropertyMultiModule.kt");
        }

        @Test
        @TestMetadata("genericWithSameName.kt")
        public void testGenericWithSameName() throws Exception {
            runTest("compiler/testData/codegen/box/properties/genericWithSameName.kt");
        }

        @Test
        @TestMetadata("initOrderMultiModule.kt")
        public void testInitOrderMultiModule() throws Exception {
            runTest("compiler/testData/codegen/box/properties/initOrderMultiModule.kt");
        }

        @Test
        @TestMetadata("javaGenericSynthProperty.kt")
        public void testJavaGenericSynthProperty() throws Exception {
            runTest("compiler/testData/codegen/box/properties/javaGenericSynthProperty.kt");
        }

        @Test
        @TestMetadata("javaPropertyBoxedGetter.kt")
        public void testJavaPropertyBoxedGetter() throws Exception {
            runTest("compiler/testData/codegen/box/properties/javaPropertyBoxedGetter.kt");
        }

        @Test
        @TestMetadata("javaPropertyBoxedSetter.kt")
        public void testJavaPropertyBoxedSetter() throws Exception {
            runTest("compiler/testData/codegen/box/properties/javaPropertyBoxedSetter.kt");
        }

        @Test
        @TestMetadata("kt10715.kt")
        public void testKt10715() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt10715.kt");
        }

        @Test
        @TestMetadata("kt10729.kt")
        public void testKt10729() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt10729.kt");
        }

        @Test
        @TestMetadata("kt1159.kt")
        public void testKt1159() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1159.kt");
        }

        @Test
        @TestMetadata("kt1165.kt")
        public void testKt1165() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1165.kt");
        }

        @Test
        @TestMetadata("kt1168.kt")
        public void testKt1168() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1168.kt");
        }

        @Test
        @TestMetadata("kt1170.kt")
        public void testKt1170() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1170.kt");
        }

        @Test
        @TestMetadata("kt12200.kt")
        public void testKt12200() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt12200.kt");
        }

        @Test
        @TestMetadata("kt1398.kt")
        public void testKt1398() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1398.kt");
        }

        @Test
        @TestMetadata("kt1417.kt")
        public void testKt1417() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1417.kt");
        }

        @Test
        @TestMetadata("kt1482_2279.kt")
        public void testKt1482_2279() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1482_2279.kt");
        }

        @Test
        @TestMetadata("kt1714.kt")
        public void testKt1714() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1714.kt");
        }

        @Test
        @TestMetadata("kt1714_minimal.kt")
        public void testKt1714_minimal() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1714_minimal.kt");
        }

        @Test
        @TestMetadata("kt1892.kt")
        public void testKt1892() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt1892.kt");
        }

        @Test
        @TestMetadata("kt2331.kt")
        public void testKt2331() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt2331.kt");
        }

        @Test
        @TestMetadata("kt257.kt")
        public void testKt257() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt257.kt");
        }

        @Test
        @TestMetadata("kt2655.kt")
        public void testKt2655() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt2655.kt");
        }

        @Test
        @TestMetadata("kt2786.kt")
        public void testKt2786() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt2786.kt");
        }

        @Test
        @TestMetadata("kt2892.kt")
        public void testKt2892() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt2892.kt");
        }

        @Test
        @TestMetadata("kt3118.kt")
        public void testKt3118() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt3118.kt");
        }

        @Test
        @TestMetadata("kt3524.kt")
        public void testKt3524() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt3524.kt");
        }

        @Test
        @TestMetadata("kt3551.kt")
        public void testKt3551() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt3551.kt");
        }

        @Test
        @TestMetadata("kt3556.kt")
        public void testKt3556() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt3556.kt");
        }

        @Test
        @TestMetadata("kt3930.kt")
        public void testKt3930() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt3930.kt");
        }

        @Test
        @TestMetadata("kt4140.kt")
        public void testKt4140() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt4140.kt");
        }

        @Test
        @TestMetadata("kt4252.kt")
        public void testKt4252() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt4252.kt");
        }

        @Test
        @TestMetadata("kt4252_2.kt")
        public void testKt4252_2() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt4252_2.kt");
        }

        @Test
        @TestMetadata("kt4340.kt")
        public void testKt4340() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt4340.kt");
        }

        @Test
        @TestMetadata("kt4373.kt")
        public void testKt4373() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt4373.kt");
        }

        @Test
        @TestMetadata("kt4383.kt")
        public void testKt4383() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt4383.kt");
        }

        @Test
        @TestMetadata("kt613.kt")
        public void testKt613() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt613.kt");
        }

        @Test
        @TestMetadata("kt8928.kt")
        public void testKt8928() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt8928.kt");
        }

        @Test
        @TestMetadata("kt9603.kt")
        public void testKt9603() throws Exception {
            runTest("compiler/testData/codegen/box/properties/kt9603.kt");
        }

        @Test
        @TestMetadata("lazyInitialization.kt")
        public void testLazyInitialization() throws Exception {
            runTest("compiler/testData/codegen/box/properties/lazyInitialization.kt");
        }

        @Test
        @TestMetadata("lazyInitializationCyclicImports.kt")
        public void testLazyInitializationCyclicImports() throws Exception {
            runTest("compiler/testData/codegen/box/properties/lazyInitializationCyclicImports.kt");
        }

        @Test
        @TestMetadata("lazyInitializationMultiModule.kt")
        public void testLazyInitializationMultiModule() throws Exception {
            runTest("compiler/testData/codegen/box/properties/lazyInitializationMultiModule.kt");
        }

        @Test
        @TestMetadata("lazyInitializationOrder.kt")
        public void testLazyInitializationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/properties/lazyInitializationOrder.kt");
        }

        @Test
        @TestMetadata("lazyInitializationSplitPerModule.kt")
        public void testLazyInitializationSplitPerModule() throws Exception {
            runTest("compiler/testData/codegen/box/properties/lazyInitializationSplitPerModule.kt");
        }

        @Test
        @TestMetadata("primitiveOverrideDefaultAccessor.kt")
        public void testPrimitiveOverrideDefaultAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/properties/primitiveOverrideDefaultAccessor.kt");
        }

        @Test
        @TestMetadata("primitiveOverrideDelegateAccessor.kt")
        public void testPrimitiveOverrideDelegateAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/properties/primitiveOverrideDelegateAccessor.kt");
        }

        @Test
        @TestMetadata("privateAccessorOfOverriddenProperty.kt")
        public void testPrivateAccessorOfOverriddenProperty() throws Exception {
            runTest("compiler/testData/codegen/box/properties/privateAccessorOfOverriddenProperty.kt");
        }

        @Test
        @TestMetadata("privatePropertyInConstructor.kt")
        public void testPrivatePropertyInConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/properties/privatePropertyInConstructor.kt");
        }

        @Test
        @TestMetadata("privatePropertyWithoutBackingField.kt")
        public void testPrivatePropertyWithoutBackingField() throws Exception {
            runTest("compiler/testData/codegen/box/properties/privatePropertyWithoutBackingField.kt");
        }

        @Test
        @TestMetadata("protectedJavaFieldInInline.kt")
        public void testProtectedJavaFieldInInline() throws Exception {
            runTest("compiler/testData/codegen/box/properties/protectedJavaFieldInInline.kt");
        }

        @Test
        @TestMetadata("protectedJavaProperty.kt")
        public void testProtectedJavaProperty() throws Exception {
            runTest("compiler/testData/codegen/box/properties/protectedJavaProperty.kt");
        }

        @Test
        @TestMetadata("protectedJavaPropertyInCompanion.kt")
        public void testProtectedJavaPropertyInCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/properties/protectedJavaPropertyInCompanion.kt");
        }

        @Test
        @TestMetadata("sideEffectInTopLevelInitializerMultiModule.kt")
        public void testSideEffectInTopLevelInitializerMultiModule() throws Exception {
            runTest("compiler/testData/codegen/box/properties/sideEffectInTopLevelInitializerMultiModule.kt");
        }

        @Test
        @TestMetadata("substituteJavaSuperField.kt")
        public void testSubstituteJavaSuperField() throws Exception {
            runTest("compiler/testData/codegen/box/properties/substituteJavaSuperField.kt");
        }

        @Test
        @TestMetadata("twoAnnotatedExtensionPropertiesWithoutBackingFields.kt")
        public void testTwoAnnotatedExtensionPropertiesWithoutBackingFields() throws Exception {
            runTest("compiler/testData/codegen/box/properties/twoAnnotatedExtensionPropertiesWithoutBackingFields.kt");
        }

        @Test
        @TestMetadata("typeInferredFromGetter.kt")
        public void testTypeInferredFromGetter() throws Exception {
            runTest("compiler/testData/codegen/box/properties/typeInferredFromGetter.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/properties/const")
        @TestDataPath("$PROJECT_ROOT")
        public class Const extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInConst() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/const"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("anotherFile.kt")
            public void testAnotherFile() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/anotherFile.kt");
            }

            @Test
            @TestMetadata("constFlags.kt")
            public void testConstFlags() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/constFlags.kt");
            }

            @Test
            @TestMetadata("constInObjectWithInit.kt")
            public void testConstInObjectWithInit() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/constInObjectWithInit.kt");
            }

            @Test
            @TestMetadata("constPropertyAccessor.kt")
            public void testConstPropertyAccessor() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/constPropertyAccessor.kt");
            }

            @Test
            @TestMetadata("constValInAnnotationDefault.kt")
            public void testConstValInAnnotationDefault() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/constValInAnnotationDefault.kt");
            }

            @Test
            @TestMetadata("fpNonConstValProperlyInitialized.kt")
            public void testFpNonConstValProperlyInitialized() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/fpNonConstValProperlyInitialized.kt");
            }

            @Test
            @TestMetadata("interfaceCompanion.kt")
            public void testInterfaceCompanion() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/interfaceCompanion.kt");
            }

            @Test
            @TestMetadata("nonConstValsAreProperlyInitialized.kt")
            public void testNonConstValsAreProperlyInitialized() throws Exception {
                runTest("compiler/testData/codegen/box/properties/const/nonConstValsAreProperlyInitialized.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/properties/lateinit")
        @TestDataPath("$PROJECT_ROOT")
        public class Lateinit extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("accessor.kt")
            public void testAccessor() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/accessor.kt");
            }

            @Test
            @TestMetadata("accessorException.kt")
            public void testAccessorException() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/accessorException.kt");
            }

            @Test
            @TestMetadata("accessorExceptionPublic.kt")
            public void testAccessorExceptionPublic() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/accessorExceptionPublic.kt");
            }

            @Test
            public void testAllFilesPresentInLateinit() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("exceptionField.kt")
            public void testExceptionField() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/exceptionField.kt");
            }

            @Test
            @TestMetadata("exceptionGetter.kt")
            public void testExceptionGetter() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/exceptionGetter.kt");
            }

            @Test
            @TestMetadata("kt30548.kt")
            public void testKt30548() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/kt30548.kt");
            }

            @Test
            @TestMetadata("localClass.kt")
            public void testLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/localClass.kt");
            }

            @Test
            @TestMetadata("nameClash.kt")
            public void testNameClash() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/nameClash.kt");
            }

            @Test
            @TestMetadata("override.kt")
            public void testOverride() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/override.kt");
            }

            @Test
            @TestMetadata("overrideException.kt")
            public void testOverrideException() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/overrideException.kt");
            }

            @Test
            @TestMetadata("privateSetter.kt")
            public void testPrivateSetter() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/privateSetter.kt");
            }

            @Test
            @TestMetadata("privateSetterFromLambda.kt")
            public void testPrivateSetterFromLambda() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterFromLambda.kt");
            }

            @Test
            @TestMetadata("privateSetterViaSubclass.kt")
            public void testPrivateSetterViaSubclass() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/privateSetterViaSubclass.kt");
            }

            @Test
            @TestMetadata("simpleVar.kt")
            public void testSimpleVar() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/simpleVar.kt");
            }

            @Test
            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                runTest("compiler/testData/codegen/box/properties/lateinit/visibility.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize")
            @TestDataPath("$PROJECT_ROOT")
            public class IsInitializedAndDeinitialize extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInIsInitializedAndDeinitialize() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("companionObjectField.kt")
                public void testCompanionObjectField() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/companionObjectField.kt");
                }

                @Test
                @TestMetadata("emptyLhs.kt")
                public void testEmptyLhs() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/emptyLhs.kt");
                }

                @Test
                @TestMetadata("innerSubclass.kt")
                public void testInnerSubclass() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/innerSubclass.kt");
                }

                @Test
                @TestMetadata("isInitializedMultiFile.kt")
                public void testIsInitializedMultiFile() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/isInitializedMultiFile.kt");
                }

                @Test
                @TestMetadata("nonInlineLambda.kt")
                public void testNonInlineLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/nonInlineLambda.kt");
                }

                @Test
                @TestMetadata("propertyImportedFromObject.kt")
                public void testPropertyImportedFromObject() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/propertyImportedFromObject.kt");
                }

                @Test
                @TestMetadata("sideEffects.kt")
                public void testSideEffects() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/sideEffects.kt");
                }

                @Test
                @TestMetadata("simpleIsInitialized.kt")
                public void testSimpleIsInitialized() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/simpleIsInitialized.kt");
                }

                @Test
                @TestMetadata("topLevelProperty.kt")
                public void testTopLevelProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/isInitializedAndDeinitialize/topLevelProperty.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/properties/lateinit/local")
            @TestDataPath("$PROJECT_ROOT")
            public class Local extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLocal() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/local"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("capturedLocalLateinit.kt")
                public void testCapturedLocalLateinit() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/local/capturedLocalLateinit.kt");
                }

                @Test
                @TestMetadata("kt23260.kt")
                public void testKt23260() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/local/kt23260.kt");
                }

                @Test
                @TestMetadata("localLateinit.kt")
                public void testLocalLateinit() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/local/localLateinit.kt");
                }

                @Test
                @TestMetadata("uninitializedCapturedMemberAccess.kt")
                public void testUninitializedCapturedMemberAccess() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedMemberAccess.kt");
                }

                @Test
                @TestMetadata("uninitializedCapturedRead.kt")
                public void testUninitializedCapturedRead() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedCapturedRead.kt");
                }

                @Test
                @TestMetadata("uninitializedMemberAccess.kt")
                public void testUninitializedMemberAccess() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedMemberAccess.kt");
                }

                @Test
                @TestMetadata("uninitializedRead.kt")
                public void testUninitializedRead() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/local/uninitializedRead.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/properties/lateinit/topLevel")
            @TestDataPath("$PROJECT_ROOT")
            public class TopLevel extends AbstractBlackBoxCodegenTest {
                @Test
                @TestMetadata("accessorException.kt")
                public void testAccessorException() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorException.kt");
                }

                @Test
                @TestMetadata("accessorForTopLevelLateinit.kt")
                public void testAccessorForTopLevelLateinit() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/accessorForTopLevelLateinit.kt");
                }

                @Test
                public void testAllFilesPresentInTopLevel() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/properties/lateinit/topLevel"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("topLevelLateinit.kt")
                public void testTopLevelLateinit() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/topLevelLateinit.kt");
                }

                @Test
                @TestMetadata("uninitializedMemberAccess.kt")
                public void testUninitializedMemberAccess() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedMemberAccess.kt");
                }

                @Test
                @TestMetadata("uninitializedRead.kt")
                public void testUninitializedRead() throws Exception {
                    runTest("compiler/testData/codegen/box/properties/lateinit/topLevel/uninitializedRead.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/publishedApi")
    @TestDataPath("$PROJECT_ROOT")
    public class PublishedApi extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInPublishedApi() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/publishedApi"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("noMangling.kt")
        public void testNoMangling() throws Exception {
            runTest("compiler/testData/codegen/box/publishedApi/noMangling.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/publishedApi/simple.kt");
        }

        @Test
        @TestMetadata("topLevel.kt")
        public void testTopLevel() throws Exception {
            runTest("compiler/testData/codegen/box/publishedApi/topLevel.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/ranges")
    @TestDataPath("$PROJECT_ROOT")
    public class Ranges extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInRanges() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("forByteProgressionWithIntIncrement.kt")
        public void testForByteProgressionWithIntIncrement() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forByteProgressionWithIntIncrement.kt");
        }

        @Test
        @TestMetadata("forInCharSequenceLengthDecreasedInLoopBody.kt")
        public void testForInCharSequenceLengthDecreasedInLoopBody() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInCharSequenceLengthDecreasedInLoopBody.kt");
        }

        @Test
        @TestMetadata("forInCharSequenceLengthIncreasedInLoopBody.kt")
        public void testForInCharSequenceLengthIncreasedInLoopBody() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInCharSequenceLengthIncreasedInLoopBody.kt");
        }

        @Test
        @TestMetadata("forInCharSequenceWithCustomIterator.kt")
        public void testForInCharSequenceWithCustomIterator() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInCharSequenceWithCustomIterator.kt");
        }

        @Test
        @TestMetadata("forInCharSequenceWithMultipleGetFunctions.kt")
        public void testForInCharSequenceWithMultipleGetFunctions() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInCharSequenceWithMultipleGetFunctions.kt");
        }

        @Test
        @TestMetadata("forInCustomCharSequence.kt")
        public void testForInCustomCharSequence() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInCustomCharSequence.kt");
        }

        @Test
        @TestMetadata("forInCustomIterable.kt")
        public void testForInCustomIterable() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInCustomIterable.kt");
        }

        @Test
        @TestMetadata("forInRangeLiteralWithMixedTypeBounds.kt")
        public void testForInRangeLiteralWithMixedTypeBounds() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInRangeLiteralWithMixedTypeBounds.kt");
        }

        @Test
        @TestMetadata("forInRangeWithImplicitReceiver.kt")
        public void testForInRangeWithImplicitReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInRangeWithImplicitReceiver.kt");
        }

        @Test
        @TestMetadata("forInStringVarUpdatedInLoopBody.kt")
        public void testForInStringVarUpdatedInLoopBody() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInStringVarUpdatedInLoopBody.kt");
        }

        @Test
        @TestMetadata("forInStringWithCustomIterator.kt")
        public void testForInStringWithCustomIterator() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forInStringWithCustomIterator.kt");
        }

        @Test
        @TestMetadata("forIntRange.kt")
        public void testForIntRange() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forIntRange.kt");
        }

        @Test
        @TestMetadata("forNullableIntInRangeWithImplicitReceiver.kt")
        public void testForNullableIntInRangeWithImplicitReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/forNullableIntInRangeWithImplicitReceiver.kt");
        }

        @Test
        @TestMetadata("kt37370.kt")
        public void testKt37370() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/kt37370.kt");
        }

        @Test
        @TestMetadata("kt37370a.kt")
        public void testKt37370a() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/kt37370a.kt");
        }

        @Test
        @TestMetadata("multiAssignmentIterationOverIntRange.kt")
        public void testMultiAssignmentIterationOverIntRange() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/multiAssignmentIterationOverIntRange.kt");
        }

        @Test
        @TestMetadata("safeCallRangeTo.kt")
        public void testSafeCallRangeTo() throws Exception {
            runTest("compiler/testData/codegen/box/ranges/safeCallRangeTo.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/contains")
        @TestDataPath("$PROJECT_ROOT")
        public class Contains extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInContains() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("comparisonWithRangeBoundEliminated.kt")
            public void testComparisonWithRangeBoundEliminated() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/comparisonWithRangeBoundEliminated.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForCollection.kt")
            public void testEvaluationOrderForCollection() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForCollection.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForComparableRange.kt")
            public void testEvaluationOrderForComparableRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForComparableRange.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForDownTo.kt")
            public void testEvaluationOrderForDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForDownTo.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForDownToReversed.kt")
            public void testEvaluationOrderForDownToReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForDownToReversed.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForNullableArgument.kt")
            public void testEvaluationOrderForNullableArgument() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForNullableArgument.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForRangeLiteral.kt")
            public void testEvaluationOrderForRangeLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForRangeLiteral.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForRangeLiteralReversed.kt")
            public void testEvaluationOrderForRangeLiteralReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForRangeLiteralReversed.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForUntil.kt")
            public void testEvaluationOrderForUntil() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForUntil.kt");
            }

            @Test
            @TestMetadata("evaluationOrderForUntilReversed.kt")
            public void testEvaluationOrderForUntilReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/evaluationOrderForUntilReversed.kt");
            }

            @Test
            @TestMetadata("genericCharInRangeLiteral.kt")
            public void testGenericCharInRangeLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/genericCharInRangeLiteral.kt");
            }

            @Test
            @TestMetadata("inArray.kt")
            public void testInArray() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inArray.kt");
            }

            @Test
            @TestMetadata("inCharSequence.kt")
            public void testInCharSequence() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inCharSequence.kt");
            }

            @Test
            @TestMetadata("inComparableRange.kt")
            public void testInComparableRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inComparableRange.kt");
            }

            @Test
            @TestMetadata("inCustomObjectRange.kt")
            public void testInCustomObjectRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inCustomObjectRange.kt");
            }

            @Test
            @TestMetadata("inDoubleRangeLiteralVsComparableRangeLiteral.kt")
            public void testInDoubleRangeLiteralVsComparableRangeLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inDoubleRangeLiteralVsComparableRangeLiteral.kt");
            }

            @Test
            @TestMetadata("inExtensionRange.kt")
            public void testInExtensionRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inExtensionRange.kt");
            }

            @Test
            @TestMetadata("inFloatingPointRangeWithNaNBound.kt")
            public void testInFloatingPointRangeWithNaNBound() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inFloatingPointRangeWithNaNBound.kt");
            }

            @Test
            @TestMetadata("inIntRange.kt")
            public void testInIntRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inIntRange.kt");
            }

            @Test
            @TestMetadata("inIterable.kt")
            public void testInIterable() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inIterable.kt");
            }

            @Test
            @TestMetadata("inNonMatchingRange.kt")
            public void testInNonMatchingRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inNonMatchingRange.kt");
            }

            @Test
            @TestMetadata("inOptimizableDoubleRange.kt")
            public void testInOptimizableDoubleRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableDoubleRange.kt");
            }

            @Test
            @TestMetadata("inOptimizableFloatRange.kt")
            public void testInOptimizableFloatRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableFloatRange.kt");
            }

            @Test
            @TestMetadata("inOptimizableIntRange.kt")
            public void testInOptimizableIntRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableIntRange.kt");
            }

            @Test
            @TestMetadata("inOptimizableLongRange.kt")
            public void testInOptimizableLongRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inOptimizableLongRange.kt");
            }

            @Test
            @TestMetadata("inPrimitiveProgression.kt")
            public void testInPrimitiveProgression() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveProgression.kt");
            }

            @Test
            @TestMetadata("inPrimitiveRange.kt")
            public void testInPrimitiveRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inPrimitiveRange.kt");
            }

            @Test
            @TestMetadata("inRangeLiteralComposition.kt")
            public void testInRangeLiteralComposition() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inRangeLiteralComposition.kt");
            }

            @Test
            @TestMetadata("inRangeWithCustomContains.kt")
            public void testInRangeWithCustomContains() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithCustomContains.kt");
            }

            @Test
            @TestMetadata("inRangeWithImplicitReceiver.kt")
            public void testInRangeWithImplicitReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithImplicitReceiver.kt");
            }

            @Test
            @TestMetadata("inRangeWithNonmatchingArguments.kt")
            public void testInRangeWithNonmatchingArguments() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithNonmatchingArguments.kt");
            }

            @Test
            @TestMetadata("inRangeWithSmartCast.kt")
            public void testInRangeWithSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inRangeWithSmartCast.kt");
            }

            @Test
            @TestMetadata("inUntil.kt")
            public void testInUntil() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inUntil.kt");
            }

            @Test
            @TestMetadata("inUntilMaxValue.kt")
            public void testInUntilMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inUntilMaxValue.kt");
            }

            @Test
            @TestMetadata("inUntilMinValue.kt")
            public void testInUntilMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inUntilMinValue.kt");
            }

            @Test
            @TestMetadata("inUntilMinValueNonConst.kt")
            public void testInUntilMinValueNonConst() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/inUntilMinValueNonConst.kt");
            }

            @Test
            @TestMetadata("kt20106.kt")
            public void testKt20106() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/kt20106.kt");
            }

            @Test
            @TestMetadata("nullableInPrimitiveRange.kt")
            public void testNullableInPrimitiveRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/nullableInPrimitiveRange.kt");
            }

            @Test
            @TestMetadata("rangeContainsString.kt")
            public void testRangeContainsString() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/rangeContainsString.kt");
            }

            @Test
            @TestMetadata("userDefinedContainsExtension.kt")
            public void testUserDefinedContainsExtension() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/contains/userDefinedContainsExtension.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/contains/generated")
            @TestDataPath("$PROJECT_ROOT")
            public class Generated extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInGenerated() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/contains/generated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("arrayIndices.kt")
                public void testArrayIndices() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/arrayIndices.kt");
                }

                @Test
                @TestMetadata("charDownTo.kt")
                public void testCharDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/charDownTo.kt");
                }

                @Test
                @TestMetadata("charRangeLiteral.kt")
                public void testCharRangeLiteral() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/charRangeLiteral.kt");
                }

                @Test
                @TestMetadata("charSequenceIndices.kt")
                public void testCharSequenceIndices() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/charSequenceIndices.kt");
                }

                @Test
                @TestMetadata("charUntil.kt")
                public void testCharUntil() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/charUntil.kt");
                }

                @Test
                @TestMetadata("collectionIndices.kt")
                public void testCollectionIndices() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/collectionIndices.kt");
                }

                @Test
                @TestMetadata("doubleRangeLiteral.kt")
                public void testDoubleRangeLiteral() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/doubleRangeLiteral.kt");
                }

                @Test
                @TestMetadata("floatRangeLiteral.kt")
                public void testFloatRangeLiteral() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/floatRangeLiteral.kt");
                }

                @Test
                @TestMetadata("intDownTo.kt")
                public void testIntDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/intDownTo.kt");
                }

                @Test
                @TestMetadata("intRangeLiteral.kt")
                public void testIntRangeLiteral() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/intRangeLiteral.kt");
                }

                @Test
                @TestMetadata("intUntil.kt")
                public void testIntUntil() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/intUntil.kt");
                }

                @Test
                @TestMetadata("longDownTo.kt")
                public void testLongDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/longDownTo.kt");
                }

                @Test
                @TestMetadata("longRangeLiteral.kt")
                public void testLongRangeLiteral() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/longRangeLiteral.kt");
                }

                @Test
                @TestMetadata("longUntil.kt")
                public void testLongUntil() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/contains/generated/longUntil.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder")
        @TestDataPath("$PROJECT_ROOT")
        public class EvaluationOrder extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEvaluationOrder() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInDownTo.kt")
            public void testForInDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownTo.kt");
            }

            @Test
            @TestMetadata("forInDownToReversed.kt")
            public void testForInDownToReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownToReversed.kt");
            }

            @Test
            @TestMetadata("forInDownToReversedReversed.kt")
            public void testForInDownToReversedReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInDownToReversedReversed.kt");
            }

            @Test
            @TestMetadata("forInRangeLiteral.kt")
            public void testForInRangeLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteral.kt");
            }

            @Test
            @TestMetadata("forInRangeLiteralReversed.kt")
            public void testForInRangeLiteralReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteralReversed.kt");
            }

            @Test
            @TestMetadata("forInRangeLiteralReversedReversed.kt")
            public void testForInRangeLiteralReversedReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInRangeLiteralReversedReversed.kt");
            }

            @Test
            @TestMetadata("forInUntil.kt")
            public void testForInUntil() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntil.kt");
            }

            @Test
            @TestMetadata("forInUntilReversed.kt")
            public void testForInUntilReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntilReversed.kt");
            }

            @Test
            @TestMetadata("forInUntilReversedReversed.kt")
            public void testForInUntilReversedReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/evaluationOrder/forInUntilReversedReversed.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped")
            @TestDataPath("$PROJECT_ROOT")
            public class Stepped extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInStepped() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo")
                @TestDataPath("$PROJECT_ROOT")
                public class ForInDownTo extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInForInDownTo() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("forInDownToReversedStep.kt")
                    public void testForInDownToReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInDownToReversedStepReversed.kt")
                    public void testForInDownToReversedStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInDownToReversedStepReversedStep.kt")
                    public void testForInDownToReversedStepReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToReversedStepReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInDownToStep.kt")
                    public void testForInDownToStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStep.kt");
                    }

                    @Test
                    @TestMetadata("forInDownToStepReversed.kt")
                    public void testForInDownToStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInDownToStepReversedStep.kt")
                    public void testForInDownToStepReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInDownToStepReversedStepReversed.kt")
                    public void testForInDownToStepReversedStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepReversedStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInDownToStepStep.kt")
                    public void testForInDownToStepStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInDownTo/forInDownToStepStep.kt");
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral")
                @TestDataPath("$PROJECT_ROOT")
                public class ForInRangeLiteral extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInForInRangeLiteral() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralReversedStep.kt")
                    public void testForInRangeLiteralReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralReversedStepReversed.kt")
                    public void testForInRangeLiteralReversedStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralReversedStepReversedStep.kt")
                    public void testForInRangeLiteralReversedStepReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralReversedStepReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralStep.kt")
                    public void testForInRangeLiteralStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStep.kt");
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralStepReversed.kt")
                    public void testForInRangeLiteralStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralStepReversedStep.kt")
                    public void testForInRangeLiteralStepReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralStepReversedStepReversed.kt")
                    public void testForInRangeLiteralStepReversedStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepReversedStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInRangeLiteralStepStep.kt")
                    public void testForInRangeLiteralStepStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInRangeLiteral/forInRangeLiteralStepStep.kt");
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil")
                @TestDataPath("$PROJECT_ROOT")
                public class ForInUntil extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInForInUntil() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("forInUntilReversedStep.kt")
                    public void testForInUntilReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInUntilReversedStepReversed.kt")
                    public void testForInUntilReversedStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInUntilReversedStepReversedStep.kt")
                    public void testForInUntilReversedStepReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilReversedStepReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInUntilStep.kt")
                    public void testForInUntilStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStep.kt");
                    }

                    @Test
                    @TestMetadata("forInUntilStepReversed.kt")
                    public void testForInUntilStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInUntilStepReversedStep.kt")
                    public void testForInUntilStepReversedStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversedStep.kt");
                    }

                    @Test
                    @TestMetadata("forInUntilStepReversedStepReversed.kt")
                    public void testForInUntilStepReversedStepReversed() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepReversedStepReversed.kt");
                    }

                    @Test
                    @TestMetadata("forInUntilStepStep.kt")
                    public void testForInUntilStepStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/evaluationOrder/stepped/forInUntil/forInUntilStepStep.kt");
                    }
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/expression")
        @TestDataPath("$PROJECT_ROOT")
        public class Expression extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInExpression() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("emptyDownto.kt")
            public void testEmptyDownto() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/emptyDownto.kt");
            }

            @Test
            @TestMetadata("emptyRange.kt")
            public void testEmptyRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/emptyRange.kt");
            }

            @Test
            @TestMetadata("inexactDownToMinValue.kt")
            public void testInexactDownToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/inexactDownToMinValue.kt");
            }

            @Test
            @TestMetadata("inexactSteppedDownTo.kt")
            public void testInexactSteppedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedDownTo.kt");
            }

            @Test
            @TestMetadata("inexactSteppedRange.kt")
            public void testInexactSteppedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/inexactSteppedRange.kt");
            }

            @Test
            @TestMetadata("inexactToMaxValue.kt")
            public void testInexactToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/inexactToMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueMinusTwoToMaxValue.kt")
            public void testMaxValueMinusTwoToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/maxValueMinusTwoToMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToMaxValue.kt")
            public void testMaxValueToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToMinValue.kt")
            public void testMaxValueToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/maxValueToMinValue.kt");
            }

            @Test
            @TestMetadata("oneElementDownTo.kt")
            public void testOneElementDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/oneElementDownTo.kt");
            }

            @Test
            @TestMetadata("oneElementRange.kt")
            public void testOneElementRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/oneElementRange.kt");
            }

            @Test
            @TestMetadata("openRange.kt")
            public void testOpenRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/openRange.kt");
            }

            @Test
            @TestMetadata("overflowZeroDownToMaxValue.kt")
            public void testOverflowZeroDownToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/overflowZeroDownToMaxValue.kt");
            }

            @Test
            @TestMetadata("overflowZeroToMinValue.kt")
            public void testOverflowZeroToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/overflowZeroToMinValue.kt");
            }

            @Test
            @TestMetadata("progressionDownToMinValue.kt")
            public void testProgressionDownToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/progressionDownToMinValue.kt");
            }

            @Test
            @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
            public void testProgressionMaxValueMinusTwoToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueMinusTwoToMaxValue.kt");
            }

            @Test
            @TestMetadata("progressionMaxValueToMaxValue.kt")
            public void testProgressionMaxValueToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMaxValue.kt");
            }

            @Test
            @TestMetadata("progressionMaxValueToMinValue.kt")
            public void testProgressionMaxValueToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/progressionMaxValueToMinValue.kt");
            }

            @Test
            @TestMetadata("progressionMinValueToMinValue.kt")
            public void testProgressionMinValueToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/progressionMinValueToMinValue.kt");
            }

            @Test
            @TestMetadata("reversedBackSequence.kt")
            public void testReversedBackSequence() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/reversedBackSequence.kt");
            }

            @Test
            @TestMetadata("reversedEmptyBackSequence.kt")
            public void testReversedEmptyBackSequence() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyBackSequence.kt");
            }

            @Test
            @TestMetadata("reversedEmptyRange.kt")
            public void testReversedEmptyRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/reversedEmptyRange.kt");
            }

            @Test
            @TestMetadata("reversedInexactSteppedDownTo.kt")
            public void testReversedInexactSteppedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/reversedInexactSteppedDownTo.kt");
            }

            @Test
            @TestMetadata("reversedRange.kt")
            public void testReversedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/reversedRange.kt");
            }

            @Test
            @TestMetadata("reversedSimpleSteppedRange.kt")
            public void testReversedSimpleSteppedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/reversedSimpleSteppedRange.kt");
            }

            @Test
            @TestMetadata("simpleDownTo.kt")
            public void testSimpleDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/simpleDownTo.kt");
            }

            @Test
            @TestMetadata("simpleRange.kt")
            public void testSimpleRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/simpleRange.kt");
            }

            @Test
            @TestMetadata("simpleRangeWithNonConstantEnds.kt")
            public void testSimpleRangeWithNonConstantEnds() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/simpleRangeWithNonConstantEnds.kt");
            }

            @Test
            @TestMetadata("simpleSteppedDownTo.kt")
            public void testSimpleSteppedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedDownTo.kt");
            }

            @Test
            @TestMetadata("simpleSteppedRange.kt")
            public void testSimpleSteppedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/expression/simpleSteppedRange.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/forInDownTo")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInDownTo extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInDownTo() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInDownTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forIntInDownTo.kt")
            public void testForIntInDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownTo.kt");
            }

            @Test
            @TestMetadata("forIntInDownToWithNonConstBounds.kt")
            public void testForIntInDownToWithNonConstBounds() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInDownToWithNonConstBounds.kt");
            }

            @Test
            @TestMetadata("forIntInNonOptimizedDownTo.kt")
            public void testForIntInNonOptimizedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInDownTo/forIntInNonOptimizedDownTo.kt");
            }

            @Test
            @TestMetadata("forLongInDownTo.kt")
            public void testForLongInDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInDownTo/forLongInDownTo.kt");
            }

            @Test
            @TestMetadata("forNullableIntInDownTo.kt")
            public void testForNullableIntInDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInDownTo/forNullableIntInDownTo.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/forInIndices")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInIndices extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInIndices() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInIndices"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInArrayListIndices.kt")
            public void testForInArrayListIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInArrayListIndices.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceIndices.kt")
            public void testForInCharSequenceIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCharSequenceIndices.kt");
            }

            @Test
            @TestMetadata("forInCharSequenceTypeParameterIndices.kt")
            public void testForInCharSequenceTypeParameterIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCharSequenceTypeParameterIndices.kt");
            }

            @Test
            @TestMetadata("forInCollectionImplicitReceiverIndices.kt")
            public void testForInCollectionImplicitReceiverIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionImplicitReceiverIndices.kt");
            }

            @Test
            @TestMetadata("forInCollectionIndices.kt")
            public void testForInCollectionIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionIndices.kt");
            }

            @Test
            @TestMetadata("forInCollectionTypeParameterIndices.kt")
            public void testForInCollectionTypeParameterIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInCollectionTypeParameterIndices.kt");
            }

            @Test
            @TestMetadata("forInNonOptimizedIndices.kt")
            public void testForInNonOptimizedIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInNonOptimizedIndices.kt");
            }

            @Test
            @TestMetadata("forInObjectArrayIndices.kt")
            public void testForInObjectArrayIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInObjectArrayIndices.kt");
            }

            @Test
            @TestMetadata("forInPrimitiveArrayIndices.kt")
            public void testForInPrimitiveArrayIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forInPrimitiveArrayIndices.kt");
            }

            @Test
            @TestMetadata("forNullableIntInArrayIndices.kt")
            public void testForNullableIntInArrayIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInArrayIndices.kt");
            }

            @Test
            @TestMetadata("forNullableIntInCollectionIndices.kt")
            public void testForNullableIntInCollectionIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/forNullableIntInCollectionIndices.kt");
            }

            @Test
            @TestMetadata("indexOfLast.kt")
            public void testIndexOfLast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/indexOfLast.kt");
            }

            @Test
            @TestMetadata("kt12983_forInGenericArrayIndices.kt")
            public void testKt12983_forInGenericArrayIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericArrayIndices.kt");
            }

            @Test
            @TestMetadata("kt12983_forInGenericCollectionIndices.kt")
            public void testKt12983_forInGenericCollectionIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInGenericCollectionIndices.kt");
            }

            @Test
            @TestMetadata("kt12983_forInSpecificArrayIndices.kt")
            public void testKt12983_forInSpecificArrayIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificArrayIndices.kt");
            }

            @Test
            @TestMetadata("kt12983_forInSpecificCollectionIndices.kt")
            public void testKt12983_forInSpecificCollectionIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt12983_forInSpecificCollectionIndices.kt");
            }

            @Test
            @TestMetadata("kt13241_Array.kt")
            public void testKt13241_Array() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Array.kt");
            }

            @Test
            @TestMetadata("kt13241_CharSequence.kt")
            public void testKt13241_CharSequence() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_CharSequence.kt");
            }

            @Test
            @TestMetadata("kt13241_Collection.kt")
            public void testKt13241_Collection() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt13241_Collection.kt");
            }

            @Test
            @TestMetadata("kt43159_ArrayUpperBound.kt")
            public void testKt43159_ArrayUpperBound() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt43159_ArrayUpperBound.kt");
            }

            @Test
            @TestMetadata("kt43159_GenericArray.kt")
            public void testKt43159_GenericArray() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInIndices/kt43159_GenericArray.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/forInProgressionWithIndex")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInProgressionWithIndex extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInProgressionWithIndex() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInProgressionWithIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInDownToWithIndex.kt")
            public void testForInDownToWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInDownToWithIndex.kt");
            }

            @Test
            @TestMetadata("forInIndicesWithIndex.kt")
            public void testForInIndicesWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInIndicesWithIndex.kt");
            }

            @Test
            @TestMetadata("forInRangeToWithIndex.kt")
            public void testForInRangeToWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInRangeToWithIndex.kt");
            }

            @Test
            @TestMetadata("forInReversedStepWithIndex.kt")
            public void testForInReversedStepWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInReversedStepWithIndex.kt");
            }

            @Test
            @TestMetadata("forInReversedWithIndex.kt")
            public void testForInReversedWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInReversedWithIndex.kt");
            }

            @Test
            @TestMetadata("forInStepReversedWithIndex.kt")
            public void testForInStepReversedWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInStepReversedWithIndex.kt");
            }

            @Test
            @TestMetadata("forInStepWithIndex.kt")
            public void testForInStepWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInStepWithIndex.kt");
            }

            @Test
            @TestMetadata("forInUntilWithIndex.kt")
            public void testForInUntilWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInUntilWithIndex.kt");
            }

            @Test
            @TestMetadata("forInWithIndexBreakAndContinue.kt")
            public void testForInWithIndexBreakAndContinue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexBreakAndContinue.kt");
            }

            @Test
            @TestMetadata("forInWithIndexNoIndexOrElementVar.kt")
            public void testForInWithIndexNoIndexOrElementVar() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexNoIndexOrElementVar.kt");
            }

            @Test
            @TestMetadata("forInWithIndexNotDestructured.kt")
            public void testForInWithIndexNotDestructured() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexNotDestructured.kt");
            }

            @Test
            @TestMetadata("forInWithIndexReversed.kt")
            public void testForInWithIndexReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexReversed.kt");
            }

            @Test
            @TestMetadata("forInWithIndexWithDestructuringInLoop.kt")
            public void testForInWithIndexWithDestructuringInLoop() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexWithDestructuringInLoop.kt");
            }

            @Test
            @TestMetadata("forInWithIndexWithIndex.kt")
            public void testForInWithIndexWithIndex() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/forInWithIndexWithIndex.kt");
            }

            @Test
            @TestMetadata("kt42909.kt")
            public void testKt42909() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInProgressionWithIndex/kt42909.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/forInReversed")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInReversed extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInReversed() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInReversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInReversedArrayIndices.kt")
            public void testForInReversedArrayIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedArrayIndices.kt");
            }

            @Test
            @TestMetadata("forInReversedCharSequenceIndices.kt")
            public void testForInReversedCharSequenceIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCharSequenceIndices.kt");
            }

            @Test
            @TestMetadata("forInReversedCollectionIndices.kt")
            public void testForInReversedCollectionIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedCollectionIndices.kt");
            }

            @Test
            @TestMetadata("forInReversedDownTo.kt")
            public void testForInReversedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedDownTo.kt");
            }

            @Test
            @TestMetadata("forInReversedEmptyRange.kt")
            public void testForInReversedEmptyRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRange.kt");
            }

            @Test
            @TestMetadata("forInReversedEmptyRangeLiteral.kt")
            public void testForInReversedEmptyRangeLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteral.kt");
            }

            @Test
            @TestMetadata("forInReversedEmptyRangeLiteralWithNonConstBounds.kt")
            public void testForInReversedEmptyRangeLiteralWithNonConstBounds() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedEmptyRangeLiteralWithNonConstBounds.kt");
            }

            @Test
            @TestMetadata("forInReversedRange.kt")
            public void testForInReversedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRange.kt");
            }

            @Test
            @TestMetadata("forInReversedRangeLiteral.kt")
            public void testForInReversedRangeLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteral.kt");
            }

            @Test
            @TestMetadata("forInReversedRangeLiteralWithNonConstBounds.kt")
            public void testForInReversedRangeLiteralWithNonConstBounds() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedRangeLiteralWithNonConstBounds.kt");
            }

            @Test
            @TestMetadata("forInReversedReversedArrayIndices.kt")
            public void testForInReversedReversedArrayIndices() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedArrayIndices.kt");
            }

            @Test
            @TestMetadata("forInReversedReversedDownTo.kt")
            public void testForInReversedReversedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedDownTo.kt");
            }

            @Test
            @TestMetadata("ForInReversedReversedRange.kt")
            public void testForInReversedReversedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/ForInReversedReversedRange.kt");
            }

            @Test
            @TestMetadata("forInReversedReversedReversedRange.kt")
            public void testForInReversedReversedReversedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedReversedRange.kt");
            }

            @Test
            @TestMetadata("forInReversedReversedUntil.kt")
            public void testForInReversedReversedUntil() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedUntil.kt");
            }

            @Test
            @TestMetadata("forInReversedReversedUntilWithNonConstBounds.kt")
            public void testForInReversedReversedUntilWithNonConstBounds() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedReversedUntilWithNonConstBounds.kt");
            }

            @Test
            @TestMetadata("forInReversedUntil.kt")
            public void testForInReversedUntil() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntil.kt");
            }

            @Test
            @TestMetadata("forInReversedUntilWithNonConstBounds.kt")
            public void testForInReversedUntilWithNonConstBounds() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInReversed/forInReversedUntilWithNonConstBounds.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/forInUntil")
        @TestDataPath("$PROJECT_ROOT")
        public class ForInUntil extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForInUntil() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forInUntil"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInUntilChar.kt")
            public void testForInUntilChar() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilChar.kt");
            }

            @Test
            @TestMetadata("forInUntilCharMaxValue.kt")
            public void testForInUntilCharMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMaxValue.kt");
            }

            @Test
            @TestMetadata("forInUntilCharMinValue.kt")
            public void testForInUntilCharMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMinValue.kt");
            }

            @Test
            @TestMetadata("forInUntilCharMinValueNonConst.kt")
            public void testForInUntilCharMinValueNonConst() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilCharMinValueNonConst.kt");
            }

            @Test
            @TestMetadata("forInUntilInt.kt")
            public void testForInUntilInt() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilInt.kt");
            }

            @Test
            @TestMetadata("forInUntilIntMaxValue.kt")
            public void testForInUntilIntMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMaxValue.kt");
            }

            @Test
            @TestMetadata("forInUntilIntMinValue.kt")
            public void testForInUntilIntMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMinValue.kt");
            }

            @Test
            @TestMetadata("forInUntilIntMinValueNonConst.kt")
            public void testForInUntilIntMinValueNonConst() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilIntMinValueNonConst.kt");
            }

            @Test
            @TestMetadata("forInUntilLesserInt.kt")
            public void testForInUntilLesserInt() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLesserInt.kt");
            }

            @Test
            @TestMetadata("forInUntilLong.kt")
            public void testForInUntilLong() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLong.kt");
            }

            @Test
            @TestMetadata("forInUntilLongMaxValue.kt")
            public void testForInUntilLongMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMaxValue.kt");
            }

            @Test
            @TestMetadata("forInUntilLongMinValue.kt")
            public void testForInUntilLongMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMinValue.kt");
            }

            @Test
            @TestMetadata("forInUntilLongMinValueNonConst.kt")
            public void testForInUntilLongMinValueNonConst() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forInUntilLongMinValueNonConst.kt");
            }

            @Test
            @TestMetadata("forIntInIntUntilSmartcastInt.kt")
            public void testForIntInIntUntilSmartcastInt() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/forIntInIntUntilSmartcastInt.kt");
            }

            @Test
            @TestMetadata("kt42533.kt")
            public void testKt42533() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forInUntil/kt42533.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/forWithPossibleOverflow")
        @TestDataPath("$PROJECT_ROOT")
        public class ForWithPossibleOverflow extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInForWithPossibleOverflow() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/forWithPossibleOverflow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("forInDownToCharMinValue.kt")
            public void testForInDownToCharMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValue.kt");
            }

            @Test
            @TestMetadata("forInDownToCharMinValueReversed.kt")
            public void testForInDownToCharMinValueReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToCharMinValueReversed.kt");
            }

            @Test
            @TestMetadata("forInDownToIntMinValue.kt")
            public void testForInDownToIntMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValue.kt");
            }

            @Test
            @TestMetadata("forInDownToIntMinValueReversed.kt")
            public void testForInDownToIntMinValueReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToIntMinValueReversed.kt");
            }

            @Test
            @TestMetadata("forInDownToLongMinValue.kt")
            public void testForInDownToLongMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValue.kt");
            }

            @Test
            @TestMetadata("forInDownToLongMinValueReversed.kt")
            public void testForInDownToLongMinValueReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInDownToLongMinValueReversed.kt");
            }

            @Test
            @TestMetadata("forInRangeToCharMaxValue.kt")
            public void testForInRangeToCharMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValue.kt");
            }

            @Test
            @TestMetadata("forInRangeToCharMaxValueReversed.kt")
            public void testForInRangeToCharMaxValueReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToCharMaxValueReversed.kt");
            }

            @Test
            @TestMetadata("forInRangeToIntMaxValue.kt")
            public void testForInRangeToIntMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValue.kt");
            }

            @Test
            @TestMetadata("forInRangeToIntMaxValueReversed.kt")
            public void testForInRangeToIntMaxValueReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToIntMaxValueReversed.kt");
            }

            @Test
            @TestMetadata("forInRangeToLongMaxValue.kt")
            public void testForInRangeToLongMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValue.kt");
            }

            @Test
            @TestMetadata("forInRangeToLongMaxValueReversed.kt")
            public void testForInRangeToLongMaxValueReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInRangeToLongMaxValueReversed.kt");
            }

            @Test
            @TestMetadata("forInUntilIntMinValueReversed.kt")
            public void testForInUntilIntMinValueReversed() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/forWithPossibleOverflow/forInUntilIntMinValueReversed.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/javaInterop")
        @TestDataPath("$PROJECT_ROOT")
        public class JavaInterop extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJavaInterop() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/javaInterop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("javaArrayOfInheritedNotNull.kt")
            public void testJavaArrayOfInheritedNotNull() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfInheritedNotNull.kt");
            }

            @Test
            @TestMetadata("javaArrayOfInheritedNotNullFailFast.kt")
            public void testJavaArrayOfInheritedNotNullFailFast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfInheritedNotNullFailFast.kt");
            }

            @Test
            @TestMetadata("javaArrayOfMaybeNullable.kt")
            public void testJavaArrayOfMaybeNullable() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfMaybeNullable.kt");
            }

            @Test
            @TestMetadata("javaArrayOfMaybeNullableWithNotNullLoopVariable.kt")
            public void testJavaArrayOfMaybeNullableWithNotNullLoopVariable() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfMaybeNullableWithNotNullLoopVariable.kt");
            }

            @Test
            @TestMetadata("javaArrayOfMaybeNullableWithNotNullLoopVariableFailFast.kt")
            public void testJavaArrayOfMaybeNullableWithNotNullLoopVariableFailFast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaArrayOfMaybeNullableWithNotNullLoopVariableFailFast.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfExplicitNotNull.kt")
            public void testJavaCollectionOfExplicitNotNull() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfExplicitNotNull.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfExplicitNotNullFailFast.kt")
            public void testJavaCollectionOfExplicitNotNullFailFast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfExplicitNotNullFailFast.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfExplicitNullable.kt")
            public void testJavaCollectionOfExplicitNullable() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfExplicitNullable.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfInheritedNotNull.kt")
            public void testJavaCollectionOfInheritedNotNull() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfInheritedNotNull.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfInheritedNotNullFailFast.kt")
            public void testJavaCollectionOfInheritedNotNullFailFast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfInheritedNotNullFailFast.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfMaybeNullable.kt")
            public void testJavaCollectionOfMaybeNullable() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfMaybeNullable.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfMaybeNullableWithNotNullLoopVariable.kt")
            public void testJavaCollectionOfMaybeNullableWithNotNullLoopVariable() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfMaybeNullableWithNotNullLoopVariable.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfMaybeNullableWithNotNullLoopVariableFailFast.kt")
            public void testJavaCollectionOfMaybeNullableWithNotNullLoopVariableFailFast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfMaybeNullableWithNotNullLoopVariableFailFast.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfNotNullFromStdlib.kt")
            public void testJavaCollectionOfNotNullFromStdlib() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullFromStdlib.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfNotNullFromStdlibToTypedArray.kt")
            public void testJavaCollectionOfNotNullFromStdlibToTypedArray() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullFromStdlibToTypedArray.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfNotNullToTypedArray.kt")
            public void testJavaCollectionOfNotNullToTypedArray() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullToTypedArray.kt");
            }

            @Test
            @TestMetadata("javaCollectionOfNotNullToTypedArrayFailFast.kt")
            public void testJavaCollectionOfNotNullToTypedArrayFailFast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaCollectionOfNotNullToTypedArrayFailFast.kt");
            }

            @Test
            @TestMetadata("javaIteratorOfNotNull.kt")
            public void testJavaIteratorOfNotNull() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaIteratorOfNotNull.kt");
            }

            @Test
            @TestMetadata("javaIteratorOfNotNullFailFast.kt")
            public void testJavaIteratorOfNotNullFailFast() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/javaInterop/javaIteratorOfNotNullFailFast.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/javaInterop/withIndex")
            @TestDataPath("$PROJECT_ROOT")
            public class WithIndex extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInWithIndex() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/javaInterop/withIndex"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("javaArrayOfInheritedNotNullWithIndex.kt")
                public void testJavaArrayOfInheritedNotNullWithIndex() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfInheritedNotNullWithIndex.kt");
                }

                @Test
                @TestMetadata("javaArrayOfInheritedNotNullWithIndexFailFast.kt")
                public void testJavaArrayOfInheritedNotNullWithIndexFailFast() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfInheritedNotNullWithIndexFailFast.kt");
                }

                @Test
                @TestMetadata("javaArrayOfMaybeNullableWithIndex.kt")
                public void testJavaArrayOfMaybeNullableWithIndex() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfMaybeNullableWithIndex.kt");
                }

                @Test
                @TestMetadata("javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariable.kt")
                public void testJavaArrayOfMaybeNullableWithIndexWithNotNullLoopVariable() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariable.kt");
                }

                @Test
                @TestMetadata("javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt")
                public void testJavaArrayOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaArrayOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt");
                }

                @Test
                @TestMetadata("javaCollectionOfExplicitNotNullWithIndex.kt")
                public void testJavaCollectionOfExplicitNotNullWithIndex() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfExplicitNotNullWithIndex.kt");
                }

                @Test
                @TestMetadata("javaCollectionOfExplicitNotNullWithIndexFailFast.kt")
                public void testJavaCollectionOfExplicitNotNullWithIndexFailFast() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfExplicitNotNullWithIndexFailFast.kt");
                }

                @Test
                @TestMetadata("javaCollectionOfExplicitNullableWithIndex.kt")
                public void testJavaCollectionOfExplicitNullableWithIndex() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfExplicitNullableWithIndex.kt");
                }

                @Test
                @TestMetadata("javaCollectionOfMaybeNullableWithIndex.kt")
                public void testJavaCollectionOfMaybeNullableWithIndex() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfMaybeNullableWithIndex.kt");
                }

                @Test
                @TestMetadata("javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariable.kt")
                public void testJavaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariable() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariable.kt");
                }

                @Test
                @TestMetadata("javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt")
                public void testJavaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaCollectionOfMaybeNullableWithIndexWithNotNullLoopVariableFailFast.kt");
                }

                @Test
                @TestMetadata("javaIteratorOfNotNullWithIndex.kt")
                public void testJavaIteratorOfNotNullWithIndex() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaIteratorOfNotNullWithIndex.kt");
                }

                @Test
                @TestMetadata("javaIteratorOfNotNullWithIndexFailFast.kt")
                public void testJavaIteratorOfNotNullWithIndexFailFast() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/javaInterop/withIndex/javaIteratorOfNotNullWithIndexFailFast.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/literal")
        @TestDataPath("$PROJECT_ROOT")
        public class Literal extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInLiteral() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/literal"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("emptyDownto.kt")
            public void testEmptyDownto() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/emptyDownto.kt");
            }

            @Test
            @TestMetadata("emptyRange.kt")
            public void testEmptyRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/emptyRange.kt");
            }

            @Test
            @TestMetadata("inexactDownToMinValue.kt")
            public void testInexactDownToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/inexactDownToMinValue.kt");
            }

            @Test
            @TestMetadata("inexactSteppedDownTo.kt")
            public void testInexactSteppedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedDownTo.kt");
            }

            @Test
            @TestMetadata("inexactSteppedRange.kt")
            public void testInexactSteppedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/inexactSteppedRange.kt");
            }

            @Test
            @TestMetadata("inexactToMaxValue.kt")
            public void testInexactToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/inexactToMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueMinusTwoToMaxValue.kt")
            public void testMaxValueMinusTwoToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/maxValueMinusTwoToMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToMaxValue.kt")
            public void testMaxValueToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMaxValue.kt");
            }

            @Test
            @TestMetadata("maxValueToMinValue.kt")
            public void testMaxValueToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/maxValueToMinValue.kt");
            }

            @Test
            @TestMetadata("oneElementDownTo.kt")
            public void testOneElementDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/oneElementDownTo.kt");
            }

            @Test
            @TestMetadata("oneElementRange.kt")
            public void testOneElementRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/oneElementRange.kt");
            }

            @Test
            @TestMetadata("openRange.kt")
            public void testOpenRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/openRange.kt");
            }

            @Test
            @TestMetadata("overflowZeroDownToMaxValue.kt")
            public void testOverflowZeroDownToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/overflowZeroDownToMaxValue.kt");
            }

            @Test
            @TestMetadata("overflowZeroToMinValue.kt")
            public void testOverflowZeroToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/overflowZeroToMinValue.kt");
            }

            @Test
            @TestMetadata("progressionDownToMinValue.kt")
            public void testProgressionDownToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/progressionDownToMinValue.kt");
            }

            @Test
            @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
            public void testProgressionMaxValueMinusTwoToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueMinusTwoToMaxValue.kt");
            }

            @Test
            @TestMetadata("progressionMaxValueToMaxValue.kt")
            public void testProgressionMaxValueToMaxValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMaxValue.kt");
            }

            @Test
            @TestMetadata("progressionMaxValueToMinValue.kt")
            public void testProgressionMaxValueToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/progressionMaxValueToMinValue.kt");
            }

            @Test
            @TestMetadata("progressionMinValueToMinValue.kt")
            public void testProgressionMinValueToMinValue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/progressionMinValueToMinValue.kt");
            }

            @Test
            @TestMetadata("reversedBackSequence.kt")
            public void testReversedBackSequence() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/reversedBackSequence.kt");
            }

            @Test
            @TestMetadata("reversedEmptyBackSequence.kt")
            public void testReversedEmptyBackSequence() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyBackSequence.kt");
            }

            @Test
            @TestMetadata("reversedEmptyRange.kt")
            public void testReversedEmptyRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/reversedEmptyRange.kt");
            }

            @Test
            @TestMetadata("reversedInexactSteppedDownTo.kt")
            public void testReversedInexactSteppedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/reversedInexactSteppedDownTo.kt");
            }

            @Test
            @TestMetadata("reversedRange.kt")
            public void testReversedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/reversedRange.kt");
            }

            @Test
            @TestMetadata("reversedSimpleSteppedRange.kt")
            public void testReversedSimpleSteppedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/reversedSimpleSteppedRange.kt");
            }

            @Test
            @TestMetadata("simpleDownTo.kt")
            public void testSimpleDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/simpleDownTo.kt");
            }

            @Test
            @TestMetadata("simpleRange.kt")
            public void testSimpleRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/simpleRange.kt");
            }

            @Test
            @TestMetadata("simpleRangeWithNonConstantEnds.kt")
            public void testSimpleRangeWithNonConstantEnds() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/simpleRangeWithNonConstantEnds.kt");
            }

            @Test
            @TestMetadata("simpleSteppedDownTo.kt")
            public void testSimpleSteppedDownTo() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedDownTo.kt");
            }

            @Test
            @TestMetadata("simpleSteppedRange.kt")
            public void testSimpleSteppedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/literal/simpleSteppedRange.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/nullableLoopParameter")
        @TestDataPath("$PROJECT_ROOT")
        public class NullableLoopParameter extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInNullableLoopParameter() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/nullableLoopParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("progressionExpression.kt")
            public void testProgressionExpression() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/progressionExpression.kt");
            }

            @Test
            @TestMetadata("rangeExpression.kt")
            public void testRangeExpression() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeExpression.kt");
            }

            @Test
            @TestMetadata("rangeLiteral.kt")
            public void testRangeLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/nullableLoopParameter/rangeLiteral.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/stepped")
        @TestDataPath("$PROJECT_ROOT")
        public class Stepped extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInStepped() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression")
            @TestDataPath("$PROJECT_ROOT")
            public class Expression extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInExpression() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/downTo")
                @TestDataPath("$PROJECT_ROOT")
                public class DownTo extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInDownTo() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/downTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("emptyProgression.kt")
                    public void testEmptyProgression() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/emptyProgression.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNegative.kt")
                    public void testIllegalStepNegative() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepNegative.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNonConst.kt")
                    public void testIllegalStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepThenLegalStep.kt")
                    public void testIllegalStepThenLegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepThenLegalStep.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepZero.kt")
                    public void testIllegalStepZero() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/illegalStepZero.kt");
                    }

                    @Test
                    @TestMetadata("legalStepThenIllegalStep.kt")
                    public void testLegalStepThenIllegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/legalStepThenIllegalStep.kt");
                    }

                    @Test
                    @TestMetadata("maxValueToMinValueStepMaxValue.kt")
                    public void testMaxValueToMinValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/maxValueToMinValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("maxValueToOneStepMaxValue.kt")
                    public void testMaxValueToOneStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/maxValueToOneStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("maxValueToZeroStepMaxValue.kt")
                    public void testMaxValueToZeroStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/maxValueToZeroStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("mixedTypeStep.kt")
                    public void testMixedTypeStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/mixedTypeStep.kt");
                    }

                    @Test
                    @TestMetadata("singleElementStepTwo.kt")
                    public void testSingleElementStepTwo() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/singleElementStepTwo.kt");
                    }

                    @Test
                    @TestMetadata("stepNonConst.kt")
                    public void testStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("stepOne.kt")
                    public void testStepOne() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepOne.kt");
                    }

                    @Test
                    @TestMetadata("stepToOutsideRange.kt")
                    public void testStepToOutsideRange() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepToOutsideRange.kt");
                    }

                    @Test
                    @TestMetadata("stepToSameLast.kt")
                    public void testStepToSameLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepToSameLast.kt");
                    }

                    @Test
                    @TestMetadata("stepToSmallerLast.kt")
                    public void testStepToSmallerLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/stepToSmallerLast.kt");
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep")
                    @TestDataPath("$PROJECT_ROOT")
                    public class NestedStep extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInNestedStep() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("stepOneThenStepOne.kt")
                        public void testStepOneThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepOneThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepThenSameStep.kt")
                        public void testStepThenSameStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepThenSameStep.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepOne.kt")
                        public void testStepToSameLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSameLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                        public void testStepToSameLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                        public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepOne.kt")
                        public void testStepToSmallerLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                        public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                        public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Reversed extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInReversed() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("reversedThenStep.kt")
                        public void testReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/reversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversed.kt")
                        public void testReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/reversedThenStepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                        public void testReversedThenStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversed.kt")
                        public void testStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/stepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStep.kt")
                        public void testStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/stepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                        public void testStepThenReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
                        }
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo")
                @TestDataPath("$PROJECT_ROOT")
                public class RangeTo extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInRangeTo() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("emptyProgression.kt")
                    public void testEmptyProgression() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/emptyProgression.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNegative.kt")
                    public void testIllegalStepNegative() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepNegative.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNonConst.kt")
                    public void testIllegalStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepThenLegalStep.kt")
                    public void testIllegalStepThenLegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepThenLegalStep.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepZero.kt")
                    public void testIllegalStepZero() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/illegalStepZero.kt");
                    }

                    @Test
                    @TestMetadata("legalStepThenIllegalStep.kt")
                    public void testLegalStepThenIllegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/legalStepThenIllegalStep.kt");
                    }

                    @Test
                    @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                    public void testMinValueToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/minValueToMaxValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("mixedTypeStep.kt")
                    public void testMixedTypeStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/mixedTypeStep.kt");
                    }

                    @Test
                    @TestMetadata("oneToMaxValueStepMaxValue.kt")
                    public void testOneToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/oneToMaxValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("singleElementStepTwo.kt")
                    public void testSingleElementStepTwo() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/singleElementStepTwo.kt");
                    }

                    @Test
                    @TestMetadata("stepNonConst.kt")
                    public void testStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("stepOne.kt")
                    public void testStepOne() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepOne.kt");
                    }

                    @Test
                    @TestMetadata("stepToOutsideRange.kt")
                    public void testStepToOutsideRange() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepToOutsideRange.kt");
                    }

                    @Test
                    @TestMetadata("stepToSameLast.kt")
                    public void testStepToSameLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepToSameLast.kt");
                    }

                    @Test
                    @TestMetadata("stepToSmallerLast.kt")
                    public void testStepToSmallerLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/stepToSmallerLast.kt");
                    }

                    @Test
                    @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                    public void testZeroToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/zeroToMaxValueStepMaxValue.kt");
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep")
                    @TestDataPath("$PROJECT_ROOT")
                    public class NestedStep extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInNestedStep() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("stepOneThenStepOne.kt")
                        public void testStepOneThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepOneThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepThenSameStep.kt")
                        public void testStepThenSameStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepThenSameStep.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepOne.kt")
                        public void testStepToSameLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                        public void testStepToSameLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                        public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepOne.kt")
                        public void testStepToSmallerLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                        public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                        public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Reversed extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInReversed() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("reversedThenStep.kt")
                        public void testReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/reversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversed.kt")
                        public void testReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/reversedThenStepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                        public void testReversedThenStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversed.kt")
                        public void testStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/stepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStep.kt")
                        public void testStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/stepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                        public void testStepThenReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
                        }
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/until")
                @TestDataPath("$PROJECT_ROOT")
                public class Until extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInUntil() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/until"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("emptyProgression.kt")
                    public void testEmptyProgression() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/emptyProgression.kt");
                    }

                    @Test
                    @TestMetadata("emptyProgressionToMinValue.kt")
                    public void testEmptyProgressionToMinValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/emptyProgressionToMinValue.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNegative.kt")
                    public void testIllegalStepNegative() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepNegative.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNonConst.kt")
                    public void testIllegalStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepThenLegalStep.kt")
                    public void testIllegalStepThenLegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepThenLegalStep.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepZero.kt")
                    public void testIllegalStepZero() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/illegalStepZero.kt");
                    }

                    @Test
                    @TestMetadata("legalStepThenIllegalStep.kt")
                    public void testLegalStepThenIllegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/legalStepThenIllegalStep.kt");
                    }

                    @Test
                    @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                    public void testMinValueToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/minValueToMaxValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("mixedTypeStep.kt")
                    public void testMixedTypeStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/mixedTypeStep.kt");
                    }

                    @Test
                    @TestMetadata("progressionToNonConst.kt")
                    public void testProgressionToNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/progressionToNonConst.kt");
                    }

                    @Test
                    @TestMetadata("singleElementStepTwo.kt")
                    public void testSingleElementStepTwo() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/singleElementStepTwo.kt");
                    }

                    @Test
                    @TestMetadata("stepNonConst.kt")
                    public void testStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("stepOne.kt")
                    public void testStepOne() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepOne.kt");
                    }

                    @Test
                    @TestMetadata("stepToOutsideRange.kt")
                    public void testStepToOutsideRange() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepToOutsideRange.kt");
                    }

                    @Test
                    @TestMetadata("stepToSameLast.kt")
                    public void testStepToSameLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepToSameLast.kt");
                    }

                    @Test
                    @TestMetadata("stepToSmallerLast.kt")
                    public void testStepToSmallerLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/stepToSmallerLast.kt");
                    }

                    @Test
                    @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                    public void testZeroToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/zeroToMaxValueStepMaxValue.kt");
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep")
                    @TestDataPath("$PROJECT_ROOT")
                    public class NestedStep extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInNestedStep() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("stepOneThenStepOne.kt")
                        public void testStepOneThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepOneThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepThenSameStep.kt")
                        public void testStepThenSameStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepThenSameStep.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepOne.kt")
                        public void testStepToSameLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSameLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                        public void testStepToSameLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                        public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepOne.kt")
                        public void testStepToSmallerLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSmallerLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                        public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                        public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Reversed extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInReversed() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("reversedThenStep.kt")
                        public void testReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/reversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversed.kt")
                        public void testReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/reversedThenStepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                        public void testReversedThenStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/reversedThenStepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversed.kt")
                        public void testStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/stepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStep.kt")
                        public void testStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/stepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                        public void testStepThenReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/expression/until/reversed/stepThenReversedThenStepThenReversed.kt");
                        }
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal")
            @TestDataPath("$PROJECT_ROOT")
            public class Literal extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLiteral() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/downTo")
                @TestDataPath("$PROJECT_ROOT")
                public class DownTo extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInDownTo() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/downTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("emptyProgression.kt")
                    public void testEmptyProgression() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/emptyProgression.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNegative.kt")
                    public void testIllegalStepNegative() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepNegative.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNonConst.kt")
                    public void testIllegalStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepThenLegalStep.kt")
                    public void testIllegalStepThenLegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepThenLegalStep.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepZero.kt")
                    public void testIllegalStepZero() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/illegalStepZero.kt");
                    }

                    @Test
                    @TestMetadata("legalStepThenIllegalStep.kt")
                    public void testLegalStepThenIllegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/legalStepThenIllegalStep.kt");
                    }

                    @Test
                    @TestMetadata("maxValueToMinValueStepMaxValue.kt")
                    public void testMaxValueToMinValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/maxValueToMinValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("maxValueToOneStepMaxValue.kt")
                    public void testMaxValueToOneStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/maxValueToOneStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("maxValueToZeroStepMaxValue.kt")
                    public void testMaxValueToZeroStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/maxValueToZeroStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("mixedTypeStep.kt")
                    public void testMixedTypeStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/mixedTypeStep.kt");
                    }

                    @Test
                    @TestMetadata("singleElementStepTwo.kt")
                    public void testSingleElementStepTwo() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/singleElementStepTwo.kt");
                    }

                    @Test
                    @TestMetadata("stepNonConst.kt")
                    public void testStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("stepOne.kt")
                    public void testStepOne() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepOne.kt");
                    }

                    @Test
                    @TestMetadata("stepToOutsideRange.kt")
                    public void testStepToOutsideRange() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepToOutsideRange.kt");
                    }

                    @Test
                    @TestMetadata("stepToSameLast.kt")
                    public void testStepToSameLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepToSameLast.kt");
                    }

                    @Test
                    @TestMetadata("stepToSmallerLast.kt")
                    public void testStepToSmallerLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/stepToSmallerLast.kt");
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep")
                    @TestDataPath("$PROJECT_ROOT")
                    public class NestedStep extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInNestedStep() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("stepOneThenStepOne.kt")
                        public void testStepOneThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepOneThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepThenSameStep.kt")
                        public void testStepThenSameStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepThenSameStep.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepOne.kt")
                        public void testStepToSameLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSameLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                        public void testStepToSameLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                        public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepOne.kt")
                        public void testStepToSmallerLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                        public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                        public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Reversed extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInReversed() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("reversedThenStep.kt")
                        public void testReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/reversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversed.kt")
                        public void testReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/reversedThenStepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                        public void testReversedThenStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversed.kt")
                        public void testStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/stepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStep.kt")
                        public void testStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/stepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                        public void testStepThenReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
                        }
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo")
                @TestDataPath("$PROJECT_ROOT")
                public class RangeTo extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInRangeTo() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("emptyProgression.kt")
                    public void testEmptyProgression() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/emptyProgression.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNegative.kt")
                    public void testIllegalStepNegative() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepNegative.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNonConst.kt")
                    public void testIllegalStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepThenLegalStep.kt")
                    public void testIllegalStepThenLegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepThenLegalStep.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepZero.kt")
                    public void testIllegalStepZero() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/illegalStepZero.kt");
                    }

                    @Test
                    @TestMetadata("legalStepThenIllegalStep.kt")
                    public void testLegalStepThenIllegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/legalStepThenIllegalStep.kt");
                    }

                    @Test
                    @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                    public void testMinValueToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/minValueToMaxValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("mixedTypeStep.kt")
                    public void testMixedTypeStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/mixedTypeStep.kt");
                    }

                    @Test
                    @TestMetadata("oneToMaxValueStepMaxValue.kt")
                    public void testOneToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/oneToMaxValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("singleElementStepTwo.kt")
                    public void testSingleElementStepTwo() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/singleElementStepTwo.kt");
                    }

                    @Test
                    @TestMetadata("stepNonConst.kt")
                    public void testStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("stepOne.kt")
                    public void testStepOne() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepOne.kt");
                    }

                    @Test
                    @TestMetadata("stepToOutsideRange.kt")
                    public void testStepToOutsideRange() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepToOutsideRange.kt");
                    }

                    @Test
                    @TestMetadata("stepToSameLast.kt")
                    public void testStepToSameLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepToSameLast.kt");
                    }

                    @Test
                    @TestMetadata("stepToSmallerLast.kt")
                    public void testStepToSmallerLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/stepToSmallerLast.kt");
                    }

                    @Test
                    @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                    public void testZeroToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/zeroToMaxValueStepMaxValue.kt");
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep")
                    @TestDataPath("$PROJECT_ROOT")
                    public class NestedStep extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInNestedStep() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("stepOneThenStepOne.kt")
                        public void testStepOneThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepOneThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepThenSameStep.kt")
                        public void testStepThenSameStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepThenSameStep.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepOne.kt")
                        public void testStepToSameLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                        public void testStepToSameLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                        public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepOne.kt")
                        public void testStepToSmallerLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                        public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                        public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Reversed extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInReversed() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("reversedThenStep.kt")
                        public void testReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/reversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversed.kt")
                        public void testReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/reversedThenStepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                        public void testReversedThenStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversed.kt")
                        public void testStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/stepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStep.kt")
                        public void testStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/stepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                        public void testStepThenReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
                        }
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/until")
                @TestDataPath("$PROJECT_ROOT")
                public class Until extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInUntil() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/until"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("emptyProgression.kt")
                    public void testEmptyProgression() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/emptyProgression.kt");
                    }

                    @Test
                    @TestMetadata("emptyProgressionToMinValue.kt")
                    public void testEmptyProgressionToMinValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/emptyProgressionToMinValue.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNegative.kt")
                    public void testIllegalStepNegative() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepNegative.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepNonConst.kt")
                    public void testIllegalStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepThenLegalStep.kt")
                    public void testIllegalStepThenLegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepThenLegalStep.kt");
                    }

                    @Test
                    @TestMetadata("illegalStepZero.kt")
                    public void testIllegalStepZero() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/illegalStepZero.kt");
                    }

                    @Test
                    @TestMetadata("legalStepThenIllegalStep.kt")
                    public void testLegalStepThenIllegalStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/legalStepThenIllegalStep.kt");
                    }

                    @Test
                    @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                    public void testMinValueToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/minValueToMaxValueStepMaxValue.kt");
                    }

                    @Test
                    @TestMetadata("mixedTypeStep.kt")
                    public void testMixedTypeStep() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/mixedTypeStep.kt");
                    }

                    @Test
                    @TestMetadata("progressionToNonConst.kt")
                    public void testProgressionToNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/progressionToNonConst.kt");
                    }

                    @Test
                    @TestMetadata("singleElementStepTwo.kt")
                    public void testSingleElementStepTwo() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/singleElementStepTwo.kt");
                    }

                    @Test
                    @TestMetadata("stepNonConst.kt")
                    public void testStepNonConst() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepNonConst.kt");
                    }

                    @Test
                    @TestMetadata("stepOne.kt")
                    public void testStepOne() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepOne.kt");
                    }

                    @Test
                    @TestMetadata("stepToOutsideRange.kt")
                    public void testStepToOutsideRange() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepToOutsideRange.kt");
                    }

                    @Test
                    @TestMetadata("stepToSameLast.kt")
                    public void testStepToSameLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepToSameLast.kt");
                    }

                    @Test
                    @TestMetadata("stepToSmallerLast.kt")
                    public void testStepToSmallerLast() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/stepToSmallerLast.kt");
                    }

                    @Test
                    @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                    public void testZeroToMaxValueStepMaxValue() throws Exception {
                        runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/zeroToMaxValueStepMaxValue.kt");
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep")
                    @TestDataPath("$PROJECT_ROOT")
                    public class NestedStep extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInNestedStep() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("stepOneThenStepOne.kt")
                        public void testStepOneThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepOneThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepThenSameStep.kt")
                        public void testStepThenSameStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepThenSameStep.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepOne.kt")
                        public void testStepToSameLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSameLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                        public void testStepToSameLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                        public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepOne.kt")
                        public void testStepToSmallerLastThenStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSmallerLastThenStepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                        public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                        public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Reversed extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInReversed() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("reversedThenStep.kt")
                        public void testReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/reversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversed.kt")
                        public void testReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/reversedThenStepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                        public void testReversedThenStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/reversedThenStepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversed.kt")
                        public void testStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/stepThenReversed.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStep.kt")
                        public void testStepThenReversedThenStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/stepThenReversedThenStep.kt");
                        }

                        @Test
                        @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                        public void testStepThenReversedThenStepThenReversed() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/literal/until/reversed/stepThenReversedThenStepThenReversed.kt");
                        }
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned")
            @TestDataPath("$PROJECT_ROOT")
            public class Unsigned extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInUnsigned() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression")
                @TestDataPath("$PROJECT_ROOT")
                public class Expression extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInExpression() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo")
                    @TestDataPath("$PROJECT_ROOT")
                    public class DownTo extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInDownTo() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("emptyProgression.kt")
                        public void testEmptyProgression() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/emptyProgression.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNegative.kt")
                        public void testIllegalStepNegative() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepNegative.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNonConst.kt")
                        public void testIllegalStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepThenLegalStep.kt")
                        public void testIllegalStepThenLegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepThenLegalStep.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepZero.kt")
                        public void testIllegalStepZero() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/illegalStepZero.kt");
                        }

                        @Test
                        @TestMetadata("legalStepThenIllegalStep.kt")
                        public void testLegalStepThenIllegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/legalStepThenIllegalStep.kt");
                        }

                        @Test
                        @TestMetadata("maxValueToMinValueStepMaxValue.kt")
                        public void testMaxValueToMinValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/maxValueToMinValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("maxValueToOneStepMaxValue.kt")
                        public void testMaxValueToOneStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/maxValueToOneStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("maxValueToZeroStepMaxValue.kt")
                        public void testMaxValueToZeroStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/maxValueToZeroStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("mixedTypeStep.kt")
                        public void testMixedTypeStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/mixedTypeStep.kt");
                        }

                        @Test
                        @TestMetadata("singleElementStepTwo.kt")
                        public void testSingleElementStepTwo() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/singleElementStepTwo.kt");
                        }

                        @Test
                        @TestMetadata("stepNonConst.kt")
                        public void testStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("stepOne.kt")
                        public void testStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToOutsideRange.kt")
                        public void testStepToOutsideRange() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepToOutsideRange.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLast.kt")
                        public void testStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLast.kt")
                        public void testStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/stepToSmallerLast.kt");
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep")
                        @TestDataPath("$PROJECT_ROOT")
                        public class NestedStep extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInNestedStep() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("stepOneThenStepOne.kt")
                            public void testStepOneThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepOneThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepThenSameStep.kt")
                            public void testStepThenSameStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepThenSameStep.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepOne.kt")
                            public void testStepToSameLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSameLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                            public void testStepToSameLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                            public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepOne.kt")
                            public void testStepToSmallerLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                            public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                            public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                            }
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed")
                        @TestDataPath("$PROJECT_ROOT")
                        public class Reversed extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInReversed() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("reversedThenStep.kt")
                            public void testReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/reversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversed.kt")
                            public void testReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/reversedThenStepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                            public void testReversedThenStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversed.kt")
                            public void testStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/stepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStep.kt")
                            public void testStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/stepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                            public void testStepThenReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
                            }
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo")
                    @TestDataPath("$PROJECT_ROOT")
                    public class RangeTo extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInRangeTo() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("emptyProgression.kt")
                        public void testEmptyProgression() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/emptyProgression.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNegative.kt")
                        public void testIllegalStepNegative() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepNegative.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNonConst.kt")
                        public void testIllegalStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepThenLegalStep.kt")
                        public void testIllegalStepThenLegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepThenLegalStep.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepZero.kt")
                        public void testIllegalStepZero() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/illegalStepZero.kt");
                        }

                        @Test
                        @TestMetadata("legalStepThenIllegalStep.kt")
                        public void testLegalStepThenIllegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/legalStepThenIllegalStep.kt");
                        }

                        @Test
                        @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                        public void testMinValueToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/minValueToMaxValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("mixedTypeStep.kt")
                        public void testMixedTypeStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/mixedTypeStep.kt");
                        }

                        @Test
                        @TestMetadata("oneToMaxValueStepMaxValue.kt")
                        public void testOneToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/oneToMaxValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("singleElementStepTwo.kt")
                        public void testSingleElementStepTwo() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/singleElementStepTwo.kt");
                        }

                        @Test
                        @TestMetadata("stepNonConst.kt")
                        public void testStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("stepOne.kt")
                        public void testStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToOutsideRange.kt")
                        public void testStepToOutsideRange() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepToOutsideRange.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLast.kt")
                        public void testStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLast.kt")
                        public void testStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/stepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                        public void testZeroToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/zeroToMaxValueStepMaxValue.kt");
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep")
                        @TestDataPath("$PROJECT_ROOT")
                        public class NestedStep extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInNestedStep() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("stepOneThenStepOne.kt")
                            public void testStepOneThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepOneThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepThenSameStep.kt")
                            public void testStepThenSameStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepThenSameStep.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepOne.kt")
                            public void testStepToSameLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                            public void testStepToSameLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                            public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepOne.kt")
                            public void testStepToSmallerLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                            public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                            public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                            }
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed")
                        @TestDataPath("$PROJECT_ROOT")
                        public class Reversed extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInReversed() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("reversedThenStep.kt")
                            public void testReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/reversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversed.kt")
                            public void testReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/reversedThenStepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                            public void testReversedThenStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversed.kt")
                            public void testStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/stepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStep.kt")
                            public void testStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/stepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                            public void testStepThenReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
                            }
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Until extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInUntil() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("emptyProgression.kt")
                        public void testEmptyProgression() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/emptyProgression.kt");
                        }

                        @Test
                        @TestMetadata("emptyProgressionToMinValue.kt")
                        public void testEmptyProgressionToMinValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/emptyProgressionToMinValue.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNegative.kt")
                        public void testIllegalStepNegative() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepNegative.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNonConst.kt")
                        public void testIllegalStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepThenLegalStep.kt")
                        public void testIllegalStepThenLegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepThenLegalStep.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepZero.kt")
                        public void testIllegalStepZero() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/illegalStepZero.kt");
                        }

                        @Test
                        @TestMetadata("legalStepThenIllegalStep.kt")
                        public void testLegalStepThenIllegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/legalStepThenIllegalStep.kt");
                        }

                        @Test
                        @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                        public void testMinValueToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/minValueToMaxValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("mixedTypeStep.kt")
                        public void testMixedTypeStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/mixedTypeStep.kt");
                        }

                        @Test
                        @TestMetadata("progressionToNonConst.kt")
                        public void testProgressionToNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/progressionToNonConst.kt");
                        }

                        @Test
                        @TestMetadata("singleElementStepTwo.kt")
                        public void testSingleElementStepTwo() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/singleElementStepTwo.kt");
                        }

                        @Test
                        @TestMetadata("stepNonConst.kt")
                        public void testStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("stepOne.kt")
                        public void testStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToOutsideRange.kt")
                        public void testStepToOutsideRange() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepToOutsideRange.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLast.kt")
                        public void testStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLast.kt")
                        public void testStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/stepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                        public void testZeroToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/zeroToMaxValueStepMaxValue.kt");
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep")
                        @TestDataPath("$PROJECT_ROOT")
                        public class NestedStep extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInNestedStep() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("stepOneThenStepOne.kt")
                            public void testStepOneThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepOneThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepThenSameStep.kt")
                            public void testStepThenSameStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepThenSameStep.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepOne.kt")
                            public void testStepToSameLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSameLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                            public void testStepToSameLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                            public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepOne.kt")
                            public void testStepToSmallerLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSmallerLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                            public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                            public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                            }
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed")
                        @TestDataPath("$PROJECT_ROOT")
                        public class Reversed extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInReversed() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("reversedThenStep.kt")
                            public void testReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/reversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversed.kt")
                            public void testReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/reversedThenStepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                            public void testReversedThenStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/reversedThenStepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversed.kt")
                            public void testStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/stepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStep.kt")
                            public void testStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/stepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                            public void testStepThenReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/expression/until/reversed/stepThenReversedThenStepThenReversed.kt");
                            }
                        }
                    }
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal")
                @TestDataPath("$PROJECT_ROOT")
                public class Literal extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInLiteral() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo")
                    @TestDataPath("$PROJECT_ROOT")
                    public class DownTo extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInDownTo() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("emptyProgression.kt")
                        public void testEmptyProgression() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/emptyProgression.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNegative.kt")
                        public void testIllegalStepNegative() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepNegative.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNonConst.kt")
                        public void testIllegalStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepThenLegalStep.kt")
                        public void testIllegalStepThenLegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepThenLegalStep.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepZero.kt")
                        public void testIllegalStepZero() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/illegalStepZero.kt");
                        }

                        @Test
                        @TestMetadata("legalStepThenIllegalStep.kt")
                        public void testLegalStepThenIllegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/legalStepThenIllegalStep.kt");
                        }

                        @Test
                        @TestMetadata("maxValueToMinValueStepMaxValue.kt")
                        public void testMaxValueToMinValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/maxValueToMinValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("maxValueToOneStepMaxValue.kt")
                        public void testMaxValueToOneStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/maxValueToOneStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("maxValueToZeroStepMaxValue.kt")
                        public void testMaxValueToZeroStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/maxValueToZeroStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("mixedTypeStep.kt")
                        public void testMixedTypeStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/mixedTypeStep.kt");
                        }

                        @Test
                        @TestMetadata("singleElementStepTwo.kt")
                        public void testSingleElementStepTwo() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/singleElementStepTwo.kt");
                        }

                        @Test
                        @TestMetadata("stepNonConst.kt")
                        public void testStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("stepOne.kt")
                        public void testStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToOutsideRange.kt")
                        public void testStepToOutsideRange() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepToOutsideRange.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLast.kt")
                        public void testStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLast.kt")
                        public void testStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/stepToSmallerLast.kt");
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep")
                        @TestDataPath("$PROJECT_ROOT")
                        public class NestedStep extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInNestedStep() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("stepOneThenStepOne.kt")
                            public void testStepOneThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepOneThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepThenSameStep.kt")
                            public void testStepThenSameStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepThenSameStep.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepOne.kt")
                            public void testStepToSameLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSameLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                            public void testStepToSameLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                            public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepOne.kt")
                            public void testStepToSmallerLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                            public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                            public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                            }
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed")
                        @TestDataPath("$PROJECT_ROOT")
                        public class Reversed extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInReversed() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("reversedThenStep.kt")
                            public void testReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/reversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversed.kt")
                            public void testReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/reversedThenStepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                            public void testReversedThenStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/reversedThenStepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversed.kt")
                            public void testStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/stepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStep.kt")
                            public void testStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/stepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                            public void testStepThenReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/downTo/reversed/stepThenReversedThenStepThenReversed.kt");
                            }
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo")
                    @TestDataPath("$PROJECT_ROOT")
                    public class RangeTo extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInRangeTo() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("emptyProgression.kt")
                        public void testEmptyProgression() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/emptyProgression.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNegative.kt")
                        public void testIllegalStepNegative() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepNegative.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNonConst.kt")
                        public void testIllegalStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepThenLegalStep.kt")
                        public void testIllegalStepThenLegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepThenLegalStep.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepZero.kt")
                        public void testIllegalStepZero() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/illegalStepZero.kt");
                        }

                        @Test
                        @TestMetadata("legalStepThenIllegalStep.kt")
                        public void testLegalStepThenIllegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/legalStepThenIllegalStep.kt");
                        }

                        @Test
                        @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                        public void testMinValueToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/minValueToMaxValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("mixedTypeStep.kt")
                        public void testMixedTypeStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/mixedTypeStep.kt");
                        }

                        @Test
                        @TestMetadata("oneToMaxValueStepMaxValue.kt")
                        public void testOneToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/oneToMaxValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("singleElementStepTwo.kt")
                        public void testSingleElementStepTwo() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/singleElementStepTwo.kt");
                        }

                        @Test
                        @TestMetadata("stepNonConst.kt")
                        public void testStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("stepOne.kt")
                        public void testStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToOutsideRange.kt")
                        public void testStepToOutsideRange() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepToOutsideRange.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLast.kt")
                        public void testStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLast.kt")
                        public void testStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/stepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                        public void testZeroToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/zeroToMaxValueStepMaxValue.kt");
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep")
                        @TestDataPath("$PROJECT_ROOT")
                        public class NestedStep extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInNestedStep() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("stepOneThenStepOne.kt")
                            public void testStepOneThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepOneThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepThenSameStep.kt")
                            public void testStepThenSameStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepThenSameStep.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepOne.kt")
                            public void testStepToSameLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSameLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                            public void testStepToSameLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSameLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                            public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepOne.kt")
                            public void testStepToSmallerLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSmallerLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                            public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                            public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                            }
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed")
                        @TestDataPath("$PROJECT_ROOT")
                        public class Reversed extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInReversed() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("reversedThenStep.kt")
                            public void testReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/reversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversed.kt")
                            public void testReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/reversedThenStepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                            public void testReversedThenStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/reversedThenStepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversed.kt")
                            public void testStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/stepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStep.kt")
                            public void testStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/stepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                            public void testStepThenReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/rangeTo/reversed/stepThenReversedThenStepThenReversed.kt");
                            }
                        }
                    }

                    @Nested
                    @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until")
                    @TestDataPath("$PROJECT_ROOT")
                    public class Until extends AbstractBlackBoxCodegenTest {
                        @Test
                        public void testAllFilesPresentInUntil() throws Exception {
                            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                        }

                        @Test
                        @TestMetadata("emptyProgression.kt")
                        public void testEmptyProgression() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/emptyProgression.kt");
                        }

                        @Test
                        @TestMetadata("emptyProgressionToMinValue.kt")
                        public void testEmptyProgressionToMinValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/emptyProgressionToMinValue.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNegative.kt")
                        public void testIllegalStepNegative() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepNegative.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepNonConst.kt")
                        public void testIllegalStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepThenLegalStep.kt")
                        public void testIllegalStepThenLegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepThenLegalStep.kt");
                        }

                        @Test
                        @TestMetadata("illegalStepZero.kt")
                        public void testIllegalStepZero() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/illegalStepZero.kt");
                        }

                        @Test
                        @TestMetadata("legalStepThenIllegalStep.kt")
                        public void testLegalStepThenIllegalStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/legalStepThenIllegalStep.kt");
                        }

                        @Test
                        @TestMetadata("minValueToMaxValueStepMaxValue.kt")
                        public void testMinValueToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/minValueToMaxValueStepMaxValue.kt");
                        }

                        @Test
                        @TestMetadata("mixedTypeStep.kt")
                        public void testMixedTypeStep() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/mixedTypeStep.kt");
                        }

                        @Test
                        @TestMetadata("progressionToNonConst.kt")
                        public void testProgressionToNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/progressionToNonConst.kt");
                        }

                        @Test
                        @TestMetadata("singleElementStepTwo.kt")
                        public void testSingleElementStepTwo() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/singleElementStepTwo.kt");
                        }

                        @Test
                        @TestMetadata("stepNonConst.kt")
                        public void testStepNonConst() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepNonConst.kt");
                        }

                        @Test
                        @TestMetadata("stepOne.kt")
                        public void testStepOne() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepOne.kt");
                        }

                        @Test
                        @TestMetadata("stepToOutsideRange.kt")
                        public void testStepToOutsideRange() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepToOutsideRange.kt");
                        }

                        @Test
                        @TestMetadata("stepToSameLast.kt")
                        public void testStepToSameLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepToSameLast.kt");
                        }

                        @Test
                        @TestMetadata("stepToSmallerLast.kt")
                        public void testStepToSmallerLast() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/stepToSmallerLast.kt");
                        }

                        @Test
                        @TestMetadata("zeroToMaxValueStepMaxValue.kt")
                        public void testZeroToMaxValueStepMaxValue() throws Exception {
                            runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/zeroToMaxValueStepMaxValue.kt");
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep")
                        @TestDataPath("$PROJECT_ROOT")
                        public class NestedStep extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInNestedStep() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("stepOneThenStepOne.kt")
                            public void testStepOneThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepOneThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepThenSameStep.kt")
                            public void testStepThenSameStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepThenSameStep.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepOne.kt")
                            public void testStepToSameLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSameLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSameLast.kt")
                            public void testStepToSameLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSameLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSameLastThenStepToSmallerLast.kt")
                            public void testStepToSameLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSameLastThenStepToSmallerLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepOne.kt")
                            public void testStepToSmallerLastThenStepOne() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSmallerLastThenStepOne.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSameLast.kt")
                            public void testStepToSmallerLastThenStepToSameLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSmallerLastThenStepToSameLast.kt");
                            }

                            @Test
                            @TestMetadata("stepToSmallerLastThenStepToSmallerLast.kt")
                            public void testStepToSmallerLastThenStepToSmallerLast() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/nestedStep/stepToSmallerLastThenStepToSmallerLast.kt");
                            }
                        }

                        @Nested
                        @TestMetadata("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed")
                        @TestDataPath("$PROJECT_ROOT")
                        public class Reversed extends AbstractBlackBoxCodegenTest {
                            @Test
                            public void testAllFilesPresentInReversed() throws Exception {
                                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                            }

                            @Test
                            @TestMetadata("reversedThenStep.kt")
                            public void testReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/reversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversed.kt")
                            public void testReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/reversedThenStepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("reversedThenStepThenReversedThenStep.kt")
                            public void testReversedThenStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/reversedThenStepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversed.kt")
                            public void testStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/stepThenReversed.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStep.kt")
                            public void testStepThenReversedThenStep() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/stepThenReversedThenStep.kt");
                            }

                            @Test
                            @TestMetadata("stepThenReversedThenStepThenReversed.kt")
                            public void testStepThenReversedThenStepThenReversed() throws Exception {
                                runTest("compiler/testData/codegen/box/ranges/stepped/unsigned/literal/until/reversed/stepThenReversedThenStepThenReversed.kt");
                            }
                        }
                    }
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/ranges/unsigned")
        @TestDataPath("$PROJECT_ROOT")
        public class Unsigned extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInUnsigned() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("inMixedUnsignedRange.kt")
            public void testInMixedUnsignedRange() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/unsigned/inMixedUnsignedRange.kt");
            }

            @Test
            @TestMetadata("kt35004.kt")
            public void testKt35004() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/unsigned/kt35004.kt");
            }

            @Test
            @TestMetadata("kt36953.kt")
            public void testKt36953() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/unsigned/kt36953.kt");
            }

            @Test
            @TestMetadata("kt36953_continue.kt")
            public void testKt36953_continue() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/unsigned/kt36953_continue.kt");
            }

            @Test
            @TestMetadata("outOfBoundsInMixedContains.kt")
            public void testOutOfBoundsInMixedContains() throws Exception {
                runTest("compiler/testData/codegen/box/ranges/unsigned/outOfBoundsInMixedContains.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/expression")
            @TestDataPath("$PROJECT_ROOT")
            public class Expression extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInExpression() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/expression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("emptyDownto.kt")
                public void testEmptyDownto() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/emptyDownto.kt");
                }

                @Test
                @TestMetadata("emptyRange.kt")
                public void testEmptyRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/emptyRange.kt");
                }

                @Test
                @TestMetadata("inexactDownToMinValue.kt")
                public void testInexactDownToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactDownToMinValue.kt");
                }

                @Test
                @TestMetadata("inexactSteppedDownTo.kt")
                public void testInexactSteppedDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactSteppedDownTo.kt");
                }

                @Test
                @TestMetadata("inexactSteppedRange.kt")
                public void testInexactSteppedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactSteppedRange.kt");
                }

                @Test
                @TestMetadata("inexactToMaxValue.kt")
                public void testInexactToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/inexactToMaxValue.kt");
                }

                @Test
                @TestMetadata("maxValueMinusTwoToMaxValue.kt")
                public void testMaxValueMinusTwoToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueMinusTwoToMaxValue.kt");
                }

                @Test
                @TestMetadata("maxValueToMaxValue.kt")
                public void testMaxValueToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueToMaxValue.kt");
                }

                @Test
                @TestMetadata("maxValueToMinValue.kt")
                public void testMaxValueToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/maxValueToMinValue.kt");
                }

                @Test
                @TestMetadata("oneElementDownTo.kt")
                public void testOneElementDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/oneElementDownTo.kt");
                }

                @Test
                @TestMetadata("oneElementRange.kt")
                public void testOneElementRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/oneElementRange.kt");
                }

                @Test
                @TestMetadata("openRange.kt")
                public void testOpenRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/openRange.kt");
                }

                @Test
                @TestMetadata("overflowZeroDownToMaxValue.kt")
                public void testOverflowZeroDownToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/overflowZeroDownToMaxValue.kt");
                }

                @Test
                @TestMetadata("overflowZeroToMinValue.kt")
                public void testOverflowZeroToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/overflowZeroToMinValue.kt");
                }

                @Test
                @TestMetadata("progressionDownToMinValue.kt")
                public void testProgressionDownToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionDownToMinValue.kt");
                }

                @Test
                @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
                public void testProgressionMaxValueMinusTwoToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueMinusTwoToMaxValue.kt");
                }

                @Test
                @TestMetadata("progressionMaxValueToMaxValue.kt")
                public void testProgressionMaxValueToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueToMaxValue.kt");
                }

                @Test
                @TestMetadata("progressionMaxValueToMinValue.kt")
                public void testProgressionMaxValueToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMaxValueToMinValue.kt");
                }

                @Test
                @TestMetadata("progressionMinValueToMinValue.kt")
                public void testProgressionMinValueToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/progressionMinValueToMinValue.kt");
                }

                @Test
                @TestMetadata("reversedBackSequence.kt")
                public void testReversedBackSequence() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedBackSequence.kt");
                }

                @Test
                @TestMetadata("reversedEmptyBackSequence.kt")
                public void testReversedEmptyBackSequence() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedEmptyBackSequence.kt");
                }

                @Test
                @TestMetadata("reversedEmptyRange.kt")
                public void testReversedEmptyRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedEmptyRange.kt");
                }

                @Test
                @TestMetadata("reversedInexactSteppedDownTo.kt")
                public void testReversedInexactSteppedDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedInexactSteppedDownTo.kt");
                }

                @Test
                @TestMetadata("reversedRange.kt")
                public void testReversedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedRange.kt");
                }

                @Test
                @TestMetadata("reversedSimpleSteppedRange.kt")
                public void testReversedSimpleSteppedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/reversedSimpleSteppedRange.kt");
                }

                @Test
                @TestMetadata("simpleDownTo.kt")
                public void testSimpleDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleDownTo.kt");
                }

                @Test
                @TestMetadata("simpleRange.kt")
                public void testSimpleRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleRange.kt");
                }

                @Test
                @TestMetadata("simpleRangeWithNonConstantEnds.kt")
                public void testSimpleRangeWithNonConstantEnds() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleRangeWithNonConstantEnds.kt");
                }

                @Test
                @TestMetadata("simpleSteppedDownTo.kt")
                public void testSimpleSteppedDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleSteppedDownTo.kt");
                }

                @Test
                @TestMetadata("simpleSteppedRange.kt")
                public void testSimpleSteppedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/expression/simpleSteppedRange.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/literal")
            @TestDataPath("$PROJECT_ROOT")
            public class Literal extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLiteral() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/literal"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("emptyDownto.kt")
                public void testEmptyDownto() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/emptyDownto.kt");
                }

                @Test
                @TestMetadata("emptyRange.kt")
                public void testEmptyRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/emptyRange.kt");
                }

                @Test
                @TestMetadata("inexactDownToMinValue.kt")
                public void testInexactDownToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactDownToMinValue.kt");
                }

                @Test
                @TestMetadata("inexactSteppedDownTo.kt")
                public void testInexactSteppedDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactSteppedDownTo.kt");
                }

                @Test
                @TestMetadata("inexactSteppedRange.kt")
                public void testInexactSteppedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactSteppedRange.kt");
                }

                @Test
                @TestMetadata("inexactToMaxValue.kt")
                public void testInexactToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/inexactToMaxValue.kt");
                }

                @Test
                @TestMetadata("maxValueMinusTwoToMaxValue.kt")
                public void testMaxValueMinusTwoToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueMinusTwoToMaxValue.kt");
                }

                @Test
                @TestMetadata("maxValueToMaxValue.kt")
                public void testMaxValueToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueToMaxValue.kt");
                }

                @Test
                @TestMetadata("maxValueToMinValue.kt")
                public void testMaxValueToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/maxValueToMinValue.kt");
                }

                @Test
                @TestMetadata("oneElementDownTo.kt")
                public void testOneElementDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/oneElementDownTo.kt");
                }

                @Test
                @TestMetadata("oneElementRange.kt")
                public void testOneElementRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/oneElementRange.kt");
                }

                @Test
                @TestMetadata("openRange.kt")
                public void testOpenRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/openRange.kt");
                }

                @Test
                @TestMetadata("overflowZeroDownToMaxValue.kt")
                public void testOverflowZeroDownToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/overflowZeroDownToMaxValue.kt");
                }

                @Test
                @TestMetadata("overflowZeroToMinValue.kt")
                public void testOverflowZeroToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/overflowZeroToMinValue.kt");
                }

                @Test
                @TestMetadata("progressionDownToMinValue.kt")
                public void testProgressionDownToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionDownToMinValue.kt");
                }

                @Test
                @TestMetadata("progressionMaxValueMinusTwoToMaxValue.kt")
                public void testProgressionMaxValueMinusTwoToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueMinusTwoToMaxValue.kt");
                }

                @Test
                @TestMetadata("progressionMaxValueToMaxValue.kt")
                public void testProgressionMaxValueToMaxValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueToMaxValue.kt");
                }

                @Test
                @TestMetadata("progressionMaxValueToMinValue.kt")
                public void testProgressionMaxValueToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMaxValueToMinValue.kt");
                }

                @Test
                @TestMetadata("progressionMinValueToMinValue.kt")
                public void testProgressionMinValueToMinValue() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/progressionMinValueToMinValue.kt");
                }

                @Test
                @TestMetadata("reversedBackSequence.kt")
                public void testReversedBackSequence() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedBackSequence.kt");
                }

                @Test
                @TestMetadata("reversedEmptyBackSequence.kt")
                public void testReversedEmptyBackSequence() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedEmptyBackSequence.kt");
                }

                @Test
                @TestMetadata("reversedEmptyRange.kt")
                public void testReversedEmptyRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedEmptyRange.kt");
                }

                @Test
                @TestMetadata("reversedInexactSteppedDownTo.kt")
                public void testReversedInexactSteppedDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedInexactSteppedDownTo.kt");
                }

                @Test
                @TestMetadata("reversedRange.kt")
                public void testReversedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedRange.kt");
                }

                @Test
                @TestMetadata("reversedSimpleSteppedRange.kt")
                public void testReversedSimpleSteppedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/reversedSimpleSteppedRange.kt");
                }

                @Test
                @TestMetadata("simpleDownTo.kt")
                public void testSimpleDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleDownTo.kt");
                }

                @Test
                @TestMetadata("simpleRange.kt")
                public void testSimpleRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleRange.kt");
                }

                @Test
                @TestMetadata("simpleRangeWithNonConstantEnds.kt")
                public void testSimpleRangeWithNonConstantEnds() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleRangeWithNonConstantEnds.kt");
                }

                @Test
                @TestMetadata("simpleSteppedDownTo.kt")
                public void testSimpleSteppedDownTo() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleSteppedDownTo.kt");
                }

                @Test
                @TestMetadata("simpleSteppedRange.kt")
                public void testSimpleSteppedRange() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/literal/simpleSteppedRange.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter")
            @TestDataPath("$PROJECT_ROOT")
            public class NullableLoopParameter extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInNullableLoopParameter() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("progressionExpression.kt")
                public void testProgressionExpression() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/progressionExpression.kt");
                }

                @Test
                @TestMetadata("rangeExpression.kt")
                public void testRangeExpression() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/rangeExpression.kt");
                }

                @Test
                @TestMetadata("rangeLiteral.kt")
                public void testRangeLiteral() throws Exception {
                    runTest("compiler/testData/codegen/box/ranges/unsigned/nullableLoopParameter/rangeLiteral.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reflection")
    @TestDataPath("$PROJECT_ROOT")
    public class Reflection extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInReflection() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/annotations")
        @TestDataPath("$PROJECT_ROOT")
        public class Annotations extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInAnnotations() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("annotationRetentionAnnotation.kt")
            public void testAnnotationRetentionAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/annotationRetentionAnnotation.kt");
            }

            @Test
            @TestMetadata("annotationsOnJavaMembers.kt")
            public void testAnnotationsOnJavaMembers() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/annotationsOnJavaMembers.kt");
            }

            @Test
            @TestMetadata("classLiteralWithVoidDefault.kt")
            public void testClassLiteralWithVoidDefault() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/classLiteralWithVoidDefault.kt");
            }

            @Test
            @TestMetadata("findAnnotation.kt")
            public void testFindAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/findAnnotation.kt");
            }

            @Test
            @TestMetadata("genericExtensionProperty.kt")
            public void testGenericExtensionProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/genericExtensionProperty.kt");
            }

            @Test
            @TestMetadata("hasAnnotation.kt")
            public void testHasAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/hasAnnotation.kt");
            }

            @Test
            @TestMetadata("localClassLiteral.kt")
            public void testLocalClassLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/localClassLiteral.kt");
            }

            @Test
            @TestMetadata("localClassParameterAnnotation.kt")
            public void testLocalClassParameterAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/localClassParameterAnnotation.kt");
            }

            @Test
            @TestMetadata("openSuspendFun.kt")
            public void testOpenSuspendFun() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/openSuspendFun.kt");
            }

            @Test
            @TestMetadata("privateAnnotation.kt")
            public void testPrivateAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/privateAnnotation.kt");
            }

            @Test
            @TestMetadata("propertyAccessors.kt")
            public void testPropertyAccessors() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/propertyAccessors.kt");
            }

            @Test
            @TestMetadata("propertyWithoutBackingField.kt")
            public void testPropertyWithoutBackingField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/propertyWithoutBackingField.kt");
            }

            @Test
            @TestMetadata("retentions.kt")
            public void testRetentions() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/retentions.kt");
            }

            @Test
            @TestMetadata("setparam.kt")
            public void testSetparam() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/setparam.kt");
            }

            @Test
            @TestMetadata("simpleClassAnnotation.kt")
            public void testSimpleClassAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/simpleClassAnnotation.kt");
            }

            @Test
            @TestMetadata("simpleConstructorAnnotation.kt")
            public void testSimpleConstructorAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/simpleConstructorAnnotation.kt");
            }

            @Test
            @TestMetadata("simpleFunAnnotation.kt")
            public void testSimpleFunAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/simpleFunAnnotation.kt");
            }

            @Test
            @TestMetadata("simpleParamAnnotation.kt")
            public void testSimpleParamAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/simpleParamAnnotation.kt");
            }

            @Test
            @TestMetadata("simpleValAnnotation.kt")
            public void testSimpleValAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/annotations/simpleValAnnotation.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/annotations/onTypes")
            @TestDataPath("$PROJECT_ROOT")
            public class OnTypes extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInOnTypes() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/annotations/onTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("arrayKClass.kt")
                public void testArrayKClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/arrayKClass.kt");
                }

                @Test
                @TestMetadata("classLiteralWithExpectedType.kt")
                public void testClassLiteralWithExpectedType() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/classLiteralWithExpectedType.kt");
                }

                @Test
                @TestMetadata("differentArgumentTypes.kt")
                public void testDifferentArgumentTypes() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/differentArgumentTypes.kt");
                }

                @Test
                @TestMetadata("differentPositions.kt")
                public void testDifferentPositions() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/annotations/onTypes/differentPositions.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/builtins")
        @TestDataPath("$PROJECT_ROOT")
        public class Builtins extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInBuiltins() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/builtins"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("collections.kt")
            public void testCollections() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/builtins/collections.kt");
            }

            @Test
            @TestMetadata("enumNameOrdinal.kt")
            public void testEnumNameOrdinal() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/builtins/enumNameOrdinal.kt");
            }

            @Test
            @TestMetadata("stringLength.kt")
            public void testStringLength() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/builtins/stringLength.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/call")
        @TestDataPath("$PROJECT_ROOT")
        public class Call extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCall() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("bigArity.kt")
            public void testBigArity() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/bigArity.kt");
            }

            @Test
            @TestMetadata("callInstanceJavaMethod.kt")
            public void testCallInstanceJavaMethod() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/callInstanceJavaMethod.kt");
            }

            @Test
            @TestMetadata("callPrivateJavaMethod.kt")
            public void testCallPrivateJavaMethod() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/callPrivateJavaMethod.kt");
            }

            @Test
            @TestMetadata("callStaticJavaMethod.kt")
            public void testCallStaticJavaMethod() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/callStaticJavaMethod.kt");
            }

            @Test
            @TestMetadata("cannotCallEnumConstructor.kt")
            public void testCannotCallEnumConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/cannotCallEnumConstructor.kt");
            }

            @Test
            @TestMetadata("disallowNullValueForNotNullField.kt")
            public void testDisallowNullValueForNotNullField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/disallowNullValueForNotNullField.kt");
            }

            @Test
            @TestMetadata("equalsHashCodeToString.kt")
            public void testEqualsHashCodeToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/equalsHashCodeToString.kt");
            }

            @Test
            @TestMetadata("exceptionHappened.kt")
            public void testExceptionHappened() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/exceptionHappened.kt");
            }

            @Test
            @TestMetadata("fakeOverride.kt")
            public void testFakeOverride() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/fakeOverride.kt");
            }

            @Test
            @TestMetadata("fakeOverrideSubstituted.kt")
            public void testFakeOverrideSubstituted() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/fakeOverrideSubstituted.kt");
            }

            @Test
            @TestMetadata("incorrectNumberOfArguments.kt")
            public void testIncorrectNumberOfArguments() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/incorrectNumberOfArguments.kt");
            }

            @Test
            @TestMetadata("innerClassConstructor.kt")
            public void testInnerClassConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/innerClassConstructor.kt");
            }

            @Test
            @TestMetadata("jvmStatic.kt")
            public void testJvmStatic() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/jvmStatic.kt");
            }

            @Test
            @TestMetadata("jvmStaticInObjectIncorrectReceiver.kt")
            public void testJvmStaticInObjectIncorrectReceiver() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/jvmStaticInObjectIncorrectReceiver.kt");
            }

            @Test
            @TestMetadata("localClassMember.kt")
            public void testLocalClassMember() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/localClassMember.kt");
            }

            @Test
            @TestMetadata("memberOfGenericClass.kt")
            public void testMemberOfGenericClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/memberOfGenericClass.kt");
            }

            @Test
            @TestMetadata("privateProperty.kt")
            public void testPrivateProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/privateProperty.kt");
            }

            @Test
            @TestMetadata("propertyAccessors.kt")
            public void testPropertyAccessors() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/propertyAccessors.kt");
            }

            @Test
            @TestMetadata("propertyGetterAndGetFunctionDifferentReturnType.kt")
            public void testPropertyGetterAndGetFunctionDifferentReturnType() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/propertyGetterAndGetFunctionDifferentReturnType.kt");
            }

            @Test
            @TestMetadata("protectedMembers.kt")
            public void testProtectedMembers() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/protectedMembers.kt");
            }

            @Test
            @TestMetadata("returnUnit.kt")
            public void testReturnUnit() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/returnUnit.kt");
            }

            @Test
            @TestMetadata("simpleConstructor.kt")
            public void testSimpleConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/simpleConstructor.kt");
            }

            @Test
            @TestMetadata("simpleMemberFunction.kt")
            public void testSimpleMemberFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/simpleMemberFunction.kt");
            }

            @Test
            @TestMetadata("simpleTopLevelFunctions.kt")
            public void testSimpleTopLevelFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/call/simpleTopLevelFunctions.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/call/bound")
            @TestDataPath("$PROJECT_ROOT")
            public class Bound extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInBound() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/bound"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("companionObjectPropertyAccessors.kt")
                public void testCompanionObjectPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/companionObjectPropertyAccessors.kt");
                }

                @Test
                @TestMetadata("extensionFunction.kt")
                public void testExtensionFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/extensionFunction.kt");
                }

                @Test
                @TestMetadata("extensionPropertyAccessors.kt")
                public void testExtensionPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/extensionPropertyAccessors.kt");
                }

                @Test
                @TestMetadata("innerClassConstructor.kt")
                public void testInnerClassConstructor() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/innerClassConstructor.kt");
                }

                @Test
                @TestMetadata("javaInstanceField.kt")
                public void testJavaInstanceField() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceField.kt");
                }

                @Test
                @TestMetadata("javaInstanceMethod.kt")
                public void testJavaInstanceMethod() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/javaInstanceMethod.kt");
                }

                @Test
                @TestMetadata("jvmStaticCompanionObjectPropertyAccessors.kt")
                public void testJvmStaticCompanionObjectPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticCompanionObjectPropertyAccessors.kt");
                }

                @Test
                @TestMetadata("jvmStaticObjectFunction.kt")
                public void testJvmStaticObjectFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectFunction.kt");
                }

                @Test
                @TestMetadata("jvmStaticObjectPropertyAccessors.kt")
                public void testJvmStaticObjectPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/jvmStaticObjectPropertyAccessors.kt");
                }

                @Test
                @TestMetadata("memberFunction.kt")
                public void testMemberFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/memberFunction.kt");
                }

                @Test
                @TestMetadata("memberPropertyAccessors.kt")
                public void testMemberPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/memberPropertyAccessors.kt");
                }

                @Test
                @TestMetadata("objectFunction.kt")
                public void testObjectFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/objectFunction.kt");
                }

                @Test
                @TestMetadata("objectPropertyAccessors.kt")
                public void testObjectPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/bound/objectPropertyAccessors.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/call/inlineClasses")
            @TestDataPath("$PROJECT_ROOT")
            public class InlineClasses extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInInlineClasses() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/call/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("constructorWithInlineClassParameters.kt")
                public void testConstructorWithInlineClassParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/constructorWithInlineClassParameters.kt");
                }

                @Test
                @TestMetadata("fieldAccessors.kt")
                public void testFieldAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/fieldAccessors.kt");
                }

                @Test
                @TestMetadata("functionsWithInlineClassParameters.kt")
                public void testFunctionsWithInlineClassParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/functionsWithInlineClassParameters.kt");
                }

                @Test
                @TestMetadata("inlineClassConstructor.kt")
                public void testInlineClassConstructor() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/inlineClassConstructor.kt");
                }

                @Test
                @TestMetadata("internalPrimaryValOfInlineClass.kt")
                public void testInternalPrimaryValOfInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/internalPrimaryValOfInlineClass.kt");
                }

                @Test
                @TestMetadata("jvmStaticFieldInObject.kt")
                public void testJvmStaticFieldInObject() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/jvmStaticFieldInObject.kt");
                }

                @Test
                @TestMetadata("jvmStaticFunction.kt")
                public void testJvmStaticFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/jvmStaticFunction.kt");
                }

                @Test
                @TestMetadata("nonOverridingFunOfInlineClass.kt")
                public void testNonOverridingFunOfInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonOverridingFunOfInlineClass.kt");
                }

                @Test
                @TestMetadata("nonOverridingVarOfInlineClass.kt")
                public void testNonOverridingVarOfInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/nonOverridingVarOfInlineClass.kt");
                }

                @Test
                @TestMetadata("overridingFunOfInlineClass.kt")
                public void testOverridingFunOfInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/overridingFunOfInlineClass.kt");
                }

                @Test
                @TestMetadata("overridingVarOfInlineClass.kt")
                public void testOverridingVarOfInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/overridingVarOfInlineClass.kt");
                }

                @Test
                @TestMetadata("primaryValOfInlineClass.kt")
                public void testPrimaryValOfInlineClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/primaryValOfInlineClass.kt");
                }

                @Test
                @TestMetadata("properties.kt")
                public void testProperties() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/properties.kt");
                }

                @Test
                @TestMetadata("suspendFunction.kt")
                public void testSuspendFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/call/inlineClasses/suspendFunction.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/callBy")
        @TestDataPath("$PROJECT_ROOT")
        public class CallBy extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCallBy() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/callBy"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("boundExtensionFunction.kt")
            public void testBoundExtensionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionFunction.kt");
            }

            @Test
            @TestMetadata("boundExtensionPropertyAcessor.kt")
            public void testBoundExtensionPropertyAcessor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/boundExtensionPropertyAcessor.kt");
            }

            @Test
            @TestMetadata("boundJvmStaticInObject.kt")
            public void testBoundJvmStaticInObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/boundJvmStaticInObject.kt");
            }

            @Test
            @TestMetadata("companionObject.kt")
            public void testCompanionObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/companionObject.kt");
            }

            @Test
            @TestMetadata("defaultAndNonDefaultIntertwined.kt")
            public void testDefaultAndNonDefaultIntertwined() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/defaultAndNonDefaultIntertwined.kt");
            }

            @Test
            @TestMetadata("defaultInSuperClass.kt")
            public void testDefaultInSuperClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/defaultInSuperClass.kt");
            }

            @Test
            @TestMetadata("defaultInSuperInterface.kt")
            public void testDefaultInSuperInterface() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/defaultInSuperInterface.kt");
            }

            @Test
            @TestMetadata("emptyVarArg.kt")
            public void testEmptyVarArg() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/emptyVarArg.kt");
            }

            @Test
            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/extensionFunction.kt");
            }

            @Test
            @TestMetadata("inlineClassDefaultArguments.kt")
            public void testInlineClassDefaultArguments() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassDefaultArguments.kt");
            }

            @Test
            @TestMetadata("inlineClassFunctionsAndConstructors.kt")
            public void testInlineClassFunctionsAndConstructors() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassFunctionsAndConstructors.kt");
            }

            @Test
            @TestMetadata("inlineClassMembers.kt")
            public void testInlineClassMembers() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/inlineClassMembers.kt");
            }

            @Test
            @TestMetadata("jvmStaticInCompanionObject.kt")
            public void testJvmStaticInCompanionObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInCompanionObject.kt");
            }

            @Test
            @TestMetadata("jvmStaticInObject.kt")
            public void testJvmStaticInObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/jvmStaticInObject.kt");
            }

            @Test
            @TestMetadata("manyArgumentsNoneDefaultConstructor.kt")
            public void testManyArgumentsNoneDefaultConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultConstructor.kt");
            }

            @Test
            @TestMetadata("manyArgumentsNoneDefaultFunction.kt")
            public void testManyArgumentsNoneDefaultFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsNoneDefaultFunction.kt");
            }

            @Test
            @TestMetadata("manyArgumentsOnlyOneDefault.kt")
            public void testManyArgumentsOnlyOneDefault() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/manyArgumentsOnlyOneDefault.kt");
            }

            @Test
            @TestMetadata("manyMaskArguments.kt")
            public void testManyMaskArguments() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/manyMaskArguments.kt");
            }

            @Test
            @TestMetadata("nonDefaultParameterOmitted.kt")
            public void testNonDefaultParameterOmitted() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/nonDefaultParameterOmitted.kt");
            }

            @Test
            @TestMetadata("nullValue.kt")
            public void testNullValue() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/nullValue.kt");
            }

            @Test
            @TestMetadata("ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt")
            public void testOrdinaryMethodIsInvokedWhenNoDefaultValuesAreUsed() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/ordinaryMethodIsInvokedWhenNoDefaultValuesAreUsed.kt");
            }

            @Test
            @TestMetadata("primitiveDefaultValues.kt")
            public void testPrimitiveDefaultValues() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/primitiveDefaultValues.kt");
            }

            @Test
            @TestMetadata("privateMemberFunction.kt")
            public void testPrivateMemberFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/privateMemberFunction.kt");
            }

            @Test
            @TestMetadata("simpleConstructor.kt")
            public void testSimpleConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/simpleConstructor.kt");
            }

            @Test
            @TestMetadata("simpleMemberFunciton.kt")
            public void testSimpleMemberFunciton() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/simpleMemberFunciton.kt");
            }

            @Test
            @TestMetadata("simpleTopLevelFunction.kt")
            public void testSimpleTopLevelFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/callBy/simpleTopLevelFunction.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/classLiterals")
        @TestDataPath("$PROJECT_ROOT")
        public class ClassLiterals extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInClassLiterals() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classLiterals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("annotationClassLiteral.kt")
            public void testAnnotationClassLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/annotationClassLiteral.kt");
            }

            @Test
            @TestMetadata("arrays.kt")
            public void testArrays() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/arrays.kt");
            }

            @Test
            @TestMetadata("bareArray.kt")
            public void testBareArray() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/bareArray.kt");
            }

            @Test
            @TestMetadata("builtinClassLiterals.kt")
            public void testBuiltinClassLiterals() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/builtinClassLiterals.kt");
            }

            @Test
            @TestMetadata("genericArrays.kt")
            public void testGenericArrays() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/genericArrays.kt");
            }

            @Test
            @TestMetadata("genericClass.kt")
            public void testGenericClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/genericClass.kt");
            }

            @Test
            @TestMetadata("lambdaClass.kt")
            public void testLambdaClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/lambdaClass.kt");
            }

            @Test
            @TestMetadata("reifiedTypeClassLiteral.kt")
            public void testReifiedTypeClassLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/reifiedTypeClassLiteral.kt");
            }

            @Test
            @TestMetadata("simpleClassLiteral.kt")
            public void testSimpleClassLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classLiterals/simpleClassLiteral.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/classes")
        @TestDataPath("$PROJECT_ROOT")
        public class Classes extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInClasses() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/classes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("classSimpleName.kt")
            public void testClassSimpleName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/classSimpleName.kt");
            }

            @Test
            @TestMetadata("companionObject.kt")
            public void testCompanionObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/companionObject.kt");
            }

            @Test
            @TestMetadata("createInstance.kt")
            public void testCreateInstance() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/createInstance.kt");
            }

            @Test
            @TestMetadata("declaredMembers.kt")
            public void testDeclaredMembers() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/declaredMembers.kt");
            }

            @Test
            @TestMetadata("javaVoid.kt")
            public void testJavaVoid() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/javaVoid.kt");
            }

            @Test
            @TestMetadata("jvmName.kt")
            public void testJvmName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/jvmName.kt");
            }

            @Test
            @TestMetadata("jvmNameOfStandardClasses.kt")
            public void testJvmNameOfStandardClasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/jvmNameOfStandardClasses.kt");
            }

            @Test
            @TestMetadata("localClassSimpleName.kt")
            public void testLocalClassSimpleName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/localClassSimpleName.kt");
            }

            @Test
            @TestMetadata("nestedClasses.kt")
            public void testNestedClasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/nestedClasses.kt");
            }

            @Test
            @TestMetadata("nestedClassesJava.kt")
            public void testNestedClassesJava() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/nestedClassesJava.kt");
            }

            @Test
            @TestMetadata("objectInstance.kt")
            public void testObjectInstance() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/objectInstance.kt");
            }

            @Test
            @TestMetadata("primitiveKClassEquality.kt")
            public void testPrimitiveKClassEquality() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/primitiveKClassEquality.kt");
            }

            @Test
            @TestMetadata("qualifiedName.kt")
            public void testQualifiedName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/qualifiedName.kt");
            }

            @Test
            @TestMetadata("qualifiedNameOfStandardClasses.kt")
            public void testQualifiedNameOfStandardClasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/qualifiedNameOfStandardClasses.kt");
            }

            @Test
            @TestMetadata("sealedSubclasses.kt")
            public void testSealedSubclasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/sealedSubclasses.kt");
            }

            @Test
            @TestMetadata("starProjectedType.kt")
            public void testStarProjectedType() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/classes/starProjectedType.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/constructors")
        @TestDataPath("$PROJECT_ROOT")
        public class Constructors extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInConstructors() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/constructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("annotationClass.kt")
            public void testAnnotationClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/constructors/annotationClass.kt");
            }

            @Test
            @TestMetadata("classesWithoutConstructors.kt")
            public void testClassesWithoutConstructors() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/constructors/classesWithoutConstructors.kt");
            }

            @Test
            @TestMetadata("constructorName.kt")
            public void testConstructorName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/constructors/constructorName.kt");
            }

            @Test
            @TestMetadata("enumEntry.kt")
            public void testEnumEntry() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/constructors/enumEntry.kt");
            }

            @Test
            @TestMetadata("primaryConstructor.kt")
            public void testPrimaryConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/constructors/primaryConstructor.kt");
            }

            @Test
            @TestMetadata("simpleGetConstructors.kt")
            public void testSimpleGetConstructors() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/constructors/simpleGetConstructors.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/createAnnotation")
        @TestDataPath("$PROJECT_ROOT")
        public class CreateAnnotation extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInCreateAnnotation() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/createAnnotation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("annotationType.kt")
            public void testAnnotationType() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/annotationType.kt");
            }

            @Test
            @TestMetadata("arrayOfKClasses.kt")
            public void testArrayOfKClasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/arrayOfKClasses.kt");
            }

            @Test
            @TestMetadata("callByJava.kt")
            public void testCallByJava() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByJava.kt");
            }

            @Test
            @TestMetadata("callByKotlin.kt")
            public void testCallByKotlin() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByKotlin.kt");
            }

            @Test
            @TestMetadata("callByWithEmptyVarArg.kt")
            public void testCallByWithEmptyVarArg() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/callByWithEmptyVarArg.kt");
            }

            @Test
            @TestMetadata("callJava.kt")
            public void testCallJava() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/callJava.kt");
            }

            @Test
            @TestMetadata("callKotlin.kt")
            public void testCallKotlin() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/callKotlin.kt");
            }

            @Test
            @TestMetadata("createJdkAnnotationInstance.kt")
            public void testCreateJdkAnnotationInstance() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/createJdkAnnotationInstance.kt");
            }

            @Test
            @TestMetadata("enumKClassAnnotation.kt")
            public void testEnumKClassAnnotation() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/enumKClassAnnotation.kt");
            }

            @Test
            @TestMetadata("equalsHashCodeToString.kt")
            public void testEqualsHashCodeToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/equalsHashCodeToString.kt");
            }

            @Test
            @TestMetadata("floatingPointParameters.kt")
            public void testFloatingPointParameters() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/floatingPointParameters.kt");
            }

            @Test
            @TestMetadata("parameterNamedEquals.kt")
            public void testParameterNamedEquals() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/parameterNamedEquals.kt");
            }

            @Test
            @TestMetadata("primitivesAndArrays.kt")
            public void testPrimitivesAndArrays() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/createAnnotation/primitivesAndArrays.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/enclosing")
        @TestDataPath("$PROJECT_ROOT")
        public class Enclosing extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEnclosing() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/enclosing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("anonymousObjectInInlinedLambda.kt")
            public void testAnonymousObjectInInlinedLambda() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/anonymousObjectInInlinedLambda.kt");
            }

            @Test
            @TestMetadata("classInLambda.kt")
            public void testClassInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/classInLambda.kt");
            }

            @Test
            @TestMetadata("functionExpressionInProperty.kt")
            public void testFunctionExpressionInProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/functionExpressionInProperty.kt");
            }

            @Test
            @TestMetadata("kt11969.kt")
            public void testKt11969() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/kt11969.kt");
            }

            @Test
            @TestMetadata("kt6368.kt")
            public void testKt6368() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/kt6368.kt");
            }

            @Test
            @TestMetadata("kt6691_lambdaInSamConstructor.kt")
            public void testKt6691_lambdaInSamConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/kt6691_lambdaInSamConstructor.kt");
            }

            @Test
            @TestMetadata("lambdaInClassObject.kt")
            public void testLambdaInClassObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInClassObject.kt");
            }

            @Test
            @TestMetadata("lambdaInConstructor.kt")
            public void testLambdaInConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInConstructor.kt");
            }

            @Test
            @TestMetadata("lambdaInFunction.kt")
            public void testLambdaInFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInFunction.kt");
            }

            @Test
            @TestMetadata("lambdaInLambda.kt")
            public void testLambdaInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLambda.kt");
            }

            @Test
            @TestMetadata("lambdaInLocalClassConstructor.kt")
            public void testLambdaInLocalClassConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalClassConstructor.kt");
            }

            @Test
            @TestMetadata("lambdaInLocalClassSuperCall.kt")
            public void testLambdaInLocalClassSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalClassSuperCall.kt");
            }

            @Test
            @TestMetadata("lambdaInLocalFunction.kt")
            public void testLambdaInLocalFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInLocalFunction.kt");
            }

            @Test
            @TestMetadata("lambdaInMemberFunction.kt")
            public void testLambdaInMemberFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunction.kt");
            }

            @Test
            @TestMetadata("lambdaInMemberFunctionInLocalClass.kt")
            public void testLambdaInMemberFunctionInLocalClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunctionInLocalClass.kt");
            }

            @Test
            @TestMetadata("lambdaInMemberFunctionInNestedClass.kt")
            public void testLambdaInMemberFunctionInNestedClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInMemberFunctionInNestedClass.kt");
            }

            @Test
            @TestMetadata("lambdaInObjectDeclaration.kt")
            public void testLambdaInObjectDeclaration() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectDeclaration.kt");
            }

            @Test
            @TestMetadata("lambdaInObjectExpression.kt")
            public void testLambdaInObjectExpression() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectExpression.kt");
            }

            @Test
            @TestMetadata("lambdaInObjectLiteralSuperCall.kt")
            public void testLambdaInObjectLiteralSuperCall() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInObjectLiteralSuperCall.kt");
            }

            @Test
            @TestMetadata("lambdaInPackage.kt")
            public void testLambdaInPackage() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPackage.kt");
            }

            @Test
            @TestMetadata("lambdaInPropertyDelegate.kt")
            public void testLambdaInPropertyDelegate() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertyDelegate.kt");
            }

            @Test
            @TestMetadata("lambdaInPropertyGetter.kt")
            public void testLambdaInPropertyGetter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertyGetter.kt");
            }

            @Test
            @TestMetadata("lambdaInPropertySetter.kt")
            public void testLambdaInPropertySetter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/lambdaInPropertySetter.kt");
            }

            @Test
            @TestMetadata("localClassInTopLevelFunction.kt")
            public void testLocalClassInTopLevelFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/localClassInTopLevelFunction.kt");
            }

            @Test
            @TestMetadata("objectInLambda.kt")
            public void testObjectInLambda() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/enclosing/objectInLambda.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/functions")
        @TestDataPath("$PROJECT_ROOT")
        public class Functions extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInFunctions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/functions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("declaredVsInheritedFunctions.kt")
            public void testDeclaredVsInheritedFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/declaredVsInheritedFunctions.kt");
            }

            @Test
            @TestMetadata("enumValuesValueOf.kt")
            public void testEnumValuesValueOf() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/enumValuesValueOf.kt");
            }

            @Test
            @TestMetadata("functionFromStdlib.kt")
            public void testFunctionFromStdlib() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/functionFromStdlib.kt");
            }

            @Test
            @TestMetadata("functionReferenceErasedToKFunction.kt")
            public void testFunctionReferenceErasedToKFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/functionReferenceErasedToKFunction.kt");
            }

            @Test
            @TestMetadata("genericOverriddenFunction.kt")
            public void testGenericOverriddenFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/genericOverriddenFunction.kt");
            }

            @Test
            @TestMetadata("instanceOfFunction.kt")
            public void testInstanceOfFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/instanceOfFunction.kt");
            }

            @Test
            @TestMetadata("isAccessibleOnAllMembers.kt")
            public void testIsAccessibleOnAllMembers() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/isAccessibleOnAllMembers.kt");
            }

            @Test
            @TestMetadata("javaClassGetFunctions.kt")
            public void testJavaClassGetFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/javaClassGetFunctions.kt");
            }

            @Test
            @TestMetadata("javaMethodsSmokeTest.kt")
            public void testJavaMethodsSmokeTest() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/javaMethodsSmokeTest.kt");
            }

            @Test
            @TestMetadata("platformName.kt")
            public void testPlatformName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/platformName.kt");
            }

            @Test
            @TestMetadata("privateMemberFunction.kt")
            public void testPrivateMemberFunction() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/privateMemberFunction.kt");
            }

            @Test
            @TestMetadata("simpleGetFunctions.kt")
            public void testSimpleGetFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/simpleGetFunctions.kt");
            }

            @Test
            @TestMetadata("simpleNames.kt")
            public void testSimpleNames() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/functions/simpleNames.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/genericSignature")
        @TestDataPath("$PROJECT_ROOT")
        public class GenericSignature extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInGenericSignature() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/genericSignature"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("covariantOverride.kt")
            public void testCovariantOverride() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/covariantOverride.kt");
            }

            @Test
            @TestMetadata("defaultImplsGenericSignature.kt")
            public void testDefaultImplsGenericSignature() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/defaultImplsGenericSignature.kt");
            }

            @Test
            @TestMetadata("delegatedMembers.kt")
            public void testDelegatedMembers() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/delegatedMembers.kt");
            }

            @Test
            @TestMetadata("functionLiteralGenericSignature.kt")
            public void testFunctionLiteralGenericSignature() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/functionLiteralGenericSignature.kt");
            }

            @Test
            @TestMetadata("genericBackingFieldSignature.kt")
            public void testGenericBackingFieldSignature() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/genericBackingFieldSignature.kt");
            }

            @Test
            @TestMetadata("genericMethodSignature.kt")
            public void testGenericMethodSignature() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/genericMethodSignature.kt");
            }

            @Test
            @TestMetadata("kt11121.kt")
            public void testKt11121() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/kt11121.kt");
            }

            @Test
            @TestMetadata("kt5112.kt")
            public void testKt5112() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/kt5112.kt");
            }

            @Test
            @TestMetadata("kt6106.kt")
            public void testKt6106() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/kt6106.kt");
            }

            @Test
            @TestMetadata("samWrappedLambdaVsReference.kt")
            public void testSamWrappedLambdaVsReference() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/samWrappedLambdaVsReference.kt");
            }

            @Test
            @TestMetadata("signatureOfDeepGenericInner.kt")
            public void testSignatureOfDeepGenericInner() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepGenericInner.kt");
            }

            @Test
            @TestMetadata("signatureOfDeepInner.kt")
            public void testSignatureOfDeepInner() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepInner.kt");
            }

            @Test
            @TestMetadata("signatureOfDeepInnerLastGeneric.kt")
            public void testSignatureOfDeepInnerLastGeneric() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfDeepInnerLastGeneric.kt");
            }

            @Test
            @TestMetadata("signatureOfGenericInnerGenericOuter.kt")
            public void testSignatureOfGenericInnerGenericOuter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfGenericInnerGenericOuter.kt");
            }

            @Test
            @TestMetadata("signatureOfGenericInnerSimpleOuter.kt")
            public void testSignatureOfGenericInnerSimpleOuter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfGenericInnerSimpleOuter.kt");
            }

            @Test
            @TestMetadata("signatureOfSimpleInnerSimpleOuter.kt")
            public void testSignatureOfSimpleInnerSimpleOuter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/signatureOfSimpleInnerSimpleOuter.kt");
            }

            @Test
            @TestMetadata("suspendFunctionLiteralGenericSignature.kt")
            public void testSuspendFunctionLiteralGenericSignature() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/genericSignature/suspendFunctionLiteralGenericSignature.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/isInstance")
        @TestDataPath("$PROJECT_ROOT")
        public class IsInstance extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInIsInstance() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/isInstance"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("isInstanceCastAndSafeCast.kt")
            public void testIsInstanceCastAndSafeCast() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/isInstance/isInstanceCastAndSafeCast.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/kClassInAnnotation")
        @TestDataPath("$PROJECT_ROOT")
        public class KClassInAnnotation extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInKClassInAnnotation() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/kClassInAnnotation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("array.kt")
            public void testArray() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/array.kt");
            }

            @Test
            @TestMetadata("arrayInJava.kt")
            public void testArrayInJava() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/arrayInJava.kt");
            }

            @Test
            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basic.kt");
            }

            @Test
            @TestMetadata("basicInJava.kt")
            public void testBasicInJava() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/basicInJava.kt");
            }

            @Test
            @TestMetadata("checkcast.kt")
            public void testCheckcast() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/checkcast.kt");
            }

            @Test
            @TestMetadata("forceWrapping.kt")
            public void testForceWrapping() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/forceWrapping.kt");
            }

            @Test
            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/vararg.kt");
            }

            @Test
            @TestMetadata("varargInJava.kt")
            public void testVarargInJava() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/varargInJava.kt");
            }

            @Test
            @TestMetadata("wrappingForCallableReferences.kt")
            public void testWrappingForCallableReferences() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/kClassInAnnotation/wrappingForCallableReferences.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/lambdaClasses")
        @TestDataPath("$PROJECT_ROOT")
        public class LambdaClasses extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInLambdaClasses() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/lambdaClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("parameterNamesAndNullability.kt")
            public void testParameterNamesAndNullability() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/parameterNamesAndNullability.kt");
            }

            @Test
            @TestMetadata("reflectOnDefaultWithInlineClassArgument.kt")
            public void testReflectOnDefaultWithInlineClassArgument() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnDefaultWithInlineClassArgument.kt");
            }

            @Test
            @TestMetadata("reflectOnLambdaInArrayConstructor.kt")
            public void testReflectOnLambdaInArrayConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInArrayConstructor.kt");
            }

            @Test
            @TestMetadata("reflectOnLambdaInConstructor.kt")
            public void testReflectOnLambdaInConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInConstructor.kt");
            }

            @Test
            @TestMetadata("reflectOnLambdaInField.kt")
            public void testReflectOnLambdaInField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInField.kt");
            }

            @Test
            @TestMetadata("reflectOnLambdaInStaticField.kt")
            public void testReflectOnLambdaInStaticField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInStaticField.kt");
            }

            @Test
            @TestMetadata("reflectOnLambdaInSuspend.kt")
            public void testReflectOnLambdaInSuspend() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInSuspend.kt");
            }

            @Test
            @TestMetadata("reflectOnLambdaInSuspendLambda.kt")
            public void testReflectOnLambdaInSuspendLambda() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnLambdaInSuspendLambda.kt");
            }

            @Test
            @TestMetadata("reflectOnSuspendLambdaInField.kt")
            public void testReflectOnSuspendLambdaInField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/lambdaClasses/reflectOnSuspendLambdaInField.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/mapping")
        @TestDataPath("$PROJECT_ROOT")
        public class Mapping extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMapping() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/constructor.kt");
            }

            @Test
            @TestMetadata("constructorWithInlineClassParameters.kt")
            public void testConstructorWithInlineClassParameters() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/constructorWithInlineClassParameters.kt");
            }

            @Test
            @TestMetadata("extensionProperty.kt")
            public void testExtensionProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/extensionProperty.kt");
            }

            @Test
            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/functions.kt");
            }

            @Test
            @TestMetadata("inlineReifiedFun.kt")
            public void testInlineReifiedFun() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/inlineReifiedFun.kt");
            }

            @Test
            @TestMetadata("interfaceCompanionPropertyWithJvmField.kt")
            public void testInterfaceCompanionPropertyWithJvmField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/interfaceCompanionPropertyWithJvmField.kt");
            }

            @Test
            @TestMetadata("lateinitProperty.kt")
            public void testLateinitProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/lateinitProperty.kt");
            }

            @Test
            @TestMetadata("mappedClassIsEqualToClassLiteral.kt")
            public void testMappedClassIsEqualToClassLiteral() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/mappedClassIsEqualToClassLiteral.kt");
            }

            @Test
            @TestMetadata("memberProperty.kt")
            public void testMemberProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/memberProperty.kt");
            }

            @Test
            @TestMetadata("methodsFromObject.kt")
            public void testMethodsFromObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/methodsFromObject.kt");
            }

            @Test
            @TestMetadata("methodsFromSuperInterface.kt")
            public void testMethodsFromSuperInterface() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/methodsFromSuperInterface.kt");
            }

            @Test
            @TestMetadata("openSuspendFun.kt")
            public void testOpenSuspendFun() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/openSuspendFun.kt");
            }

            @Test
            @TestMetadata("privateProperty.kt")
            public void testPrivateProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/privateProperty.kt");
            }

            @Test
            @TestMetadata("propertyAccessorsWithJvmName.kt")
            public void testPropertyAccessorsWithJvmName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/propertyAccessorsWithJvmName.kt");
            }

            @Test
            @TestMetadata("syntheticFields.kt")
            public void testSyntheticFields() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/syntheticFields.kt");
            }

            @Test
            @TestMetadata("topLevelFunctionOtherFile.kt")
            public void testTopLevelFunctionOtherFile() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/topLevelFunctionOtherFile.kt");
            }

            @Test
            @TestMetadata("topLevelProperty.kt")
            public void testTopLevelProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/mapping/topLevelProperty.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/mapping/fakeOverrides")
            @TestDataPath("$PROJECT_ROOT")
            public class FakeOverrides extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInFakeOverrides() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/fakeOverrides"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("javaFieldGetterSetter.kt")
                public void testJavaFieldGetterSetter() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaFieldGetterSetter.kt");
                }

                @Test
                @TestMetadata("javaMethod.kt")
                public void testJavaMethod() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/fakeOverrides/javaMethod.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/mapping/inlineClasses")
            @TestDataPath("$PROJECT_ROOT")
            public class InlineClasses extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInInlineClasses() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/inlineClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("inlineClassPrimaryVal.kt")
                public void testInlineClassPrimaryVal() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/inlineClasses/inlineClassPrimaryVal.kt");
                }

                @Test
                @TestMetadata("suspendFunctionWithInlineClassInSignature.kt")
                public void testSuspendFunctionWithInlineClassInSignature() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/inlineClasses/suspendFunctionWithInlineClassInSignature.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/mapping/jvmStatic")
            @TestDataPath("$PROJECT_ROOT")
            public class JvmStatic extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInJvmStatic() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/jvmStatic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("companionObjectFunction.kt")
                public void testCompanionObjectFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/companionObjectFunction.kt");
                }

                @Test
                @TestMetadata("objectFunction.kt")
                public void testObjectFunction() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/jvmStatic/objectFunction.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/mapping/types")
            @TestDataPath("$PROJECT_ROOT")
            public class Types extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInTypes() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/mapping/types"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("allSupertypes.kt")
                public void testAllSupertypes() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/allSupertypes.kt");
                }

                @Test
                @TestMetadata("annotationConstructorParameters.kt")
                public void testAnnotationConstructorParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/annotationConstructorParameters.kt");
                }

                @Test
                @TestMetadata("array.kt")
                public void testArray() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/array.kt");
                }

                @Test
                @TestMetadata("constructors.kt")
                public void testConstructors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/constructors.kt");
                }

                @Test
                @TestMetadata("createType.kt")
                public void testCreateType() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/createType.kt");
                }

                @Test
                @TestMetadata("genericArrayElementType.kt")
                public void testGenericArrayElementType() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/genericArrayElementType.kt");
                }

                @Test
                @TestMetadata("inlineClassInSignature.kt")
                public void testInlineClassInSignature() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/inlineClassInSignature.kt");
                }

                @Test
                @TestMetadata("inlineClassPrimaryVal.kt")
                public void testInlineClassPrimaryVal() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/inlineClassPrimaryVal.kt");
                }

                @Test
                @TestMetadata("innerGenericTypeArgument.kt")
                public void testInnerGenericTypeArgument() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/innerGenericTypeArgument.kt");
                }

                @Test
                @TestMetadata("memberFunctions.kt")
                public void testMemberFunctions() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/memberFunctions.kt");
                }

                @Test
                @TestMetadata("overrideAnyWithPrimitive.kt")
                public void testOverrideAnyWithPrimitive() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/overrideAnyWithPrimitive.kt");
                }

                @Test
                @TestMetadata("parameterizedTypeArgument.kt")
                public void testParameterizedTypeArgument() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypeArgument.kt");
                }

                @Test
                @TestMetadata("parameterizedTypes.kt")
                public void testParameterizedTypes() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/parameterizedTypes.kt");
                }

                @Test
                @TestMetadata("propertyAccessors.kt")
                public void testPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/propertyAccessors.kt");
                }

                @Test
                @TestMetadata("rawTypeArgument.kt")
                public void testRawTypeArgument() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/rawTypeArgument.kt");
                }

                @Test
                @TestMetadata("supertypes.kt")
                public void testSupertypes() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/supertypes.kt");
                }

                @Test
                @TestMetadata("suspendFun.kt")
                public void testSuspendFun() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/suspendFun.kt");
                }

                @Test
                @TestMetadata("topLevelFunctions.kt")
                public void testTopLevelFunctions() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/topLevelFunctions.kt");
                }

                @Test
                @TestMetadata("typeParameters.kt")
                public void testTypeParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/typeParameters.kt");
                }

                @Test
                @TestMetadata("unit.kt")
                public void testUnit() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/unit.kt");
                }

                @Test
                @TestMetadata("withNullability.kt")
                public void testWithNullability() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/mapping/types/withNullability.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/methodsFromAny")
        @TestDataPath("$PROJECT_ROOT")
        public class MethodsFromAny extends AbstractBlackBoxCodegenTest {
            @Test
            @TestMetadata("adaptedCallableReferencesNotEqualToCallablesFromAPI.kt")
            public void testAdaptedCallableReferencesNotEqualToCallablesFromAPI() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/adaptedCallableReferencesNotEqualToCallablesFromAPI.kt");
            }

            @Test
            public void testAllFilesPresentInMethodsFromAny() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("builtinFunctionsToString.kt")
            public void testBuiltinFunctionsToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/builtinFunctionsToString.kt");
            }

            @Test
            @TestMetadata("callableReferencesEqualToCallablesFromAPI.kt")
            public void testCallableReferencesEqualToCallablesFromAPI() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/callableReferencesEqualToCallablesFromAPI.kt");
            }

            @Test
            @TestMetadata("classToString.kt")
            public void testClassToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/classToString.kt");
            }

            @Test
            @TestMetadata("extensionPropertyReceiverToString.kt")
            public void testExtensionPropertyReceiverToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/extensionPropertyReceiverToString.kt");
            }

            @Test
            @TestMetadata("fakeOverrideEqualsHashCode.kt")
            public void testFakeOverrideEqualsHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideEqualsHashCode.kt");
            }

            @Test
            @TestMetadata("fakeOverrideToString.kt")
            public void testFakeOverrideToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideToString.kt");
            }

            @Test
            @TestMetadata("fakeOverrideToString2.kt")
            public void testFakeOverrideToString2() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/fakeOverrideToString2.kt");
            }

            @Test
            @TestMetadata("functionEqualsHashCode.kt")
            public void testFunctionEqualsHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionEqualsHashCode.kt");
            }

            @Test
            @TestMetadata("functionFromStdlibMultiFileFacade.kt")
            public void testFunctionFromStdlibMultiFileFacade() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibMultiFileFacade.kt");
            }

            @Test
            @TestMetadata("functionFromStdlibSingleFileFacade.kt")
            public void testFunctionFromStdlibSingleFileFacade() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionFromStdlibSingleFileFacade.kt");
            }

            @Test
            @TestMetadata("functionToString.kt")
            public void testFunctionToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/functionToString.kt");
            }

            @Test
            @TestMetadata("memberExtensionToString.kt")
            public void testMemberExtensionToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/memberExtensionToString.kt");
            }

            @Test
            @TestMetadata("parametersEqualsHashCode.kt")
            public void testParametersEqualsHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersEqualsHashCode.kt");
            }

            @Test
            @TestMetadata("parametersEqualsWithClearCaches.kt")
            public void testParametersEqualsWithClearCaches() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersEqualsWithClearCaches.kt");
            }

            @Test
            @TestMetadata("parametersToString.kt")
            public void testParametersToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/parametersToString.kt");
            }

            @Test
            @TestMetadata("propertyEqualsHashCode.kt")
            public void testPropertyEqualsHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyEqualsHashCode.kt");
            }

            @Test
            @TestMetadata("propertyToString.kt")
            public void testPropertyToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/propertyToString.kt");
            }

            @Test
            @TestMetadata("typeEqualsHashCode.kt")
            public void testTypeEqualsHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeEqualsHashCode.kt");
            }

            @Test
            @TestMetadata("typeParametersEqualsHashCode.kt")
            public void testTypeParametersEqualsHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersEqualsHashCode.kt");
            }

            @Test
            @TestMetadata("typeParametersEqualsWithClearCaches.kt")
            public void testTypeParametersEqualsWithClearCaches() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersEqualsWithClearCaches.kt");
            }

            @Test
            @TestMetadata("typeParametersToString.kt")
            public void testTypeParametersToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeParametersToString.kt");
            }

            @Test
            @TestMetadata("typeToString.kt")
            public void testTypeToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToString.kt");
            }

            @Test
            @TestMetadata("typeToStringInnerGeneric.kt")
            public void testTypeToStringInnerGeneric() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/methodsFromAny/typeToStringInnerGeneric.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/modifiers")
        @TestDataPath("$PROJECT_ROOT")
        public class Modifiers extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInModifiers() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/modifiers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("callableModality.kt")
            public void testCallableModality() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/callableModality.kt");
            }

            @Test
            @TestMetadata("callableVisibility.kt")
            public void testCallableVisibility() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/callableVisibility.kt");
            }

            @Test
            @TestMetadata("classModality.kt")
            public void testClassModality() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/classModality.kt");
            }

            @Test
            @TestMetadata("classVisibility.kt")
            public void testClassVisibility() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/classVisibility.kt");
            }

            @Test
            @TestMetadata("classes.kt")
            public void testClasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/classes.kt");
            }

            @Test
            @TestMetadata("functions.kt")
            public void testFunctions() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/functions.kt");
            }

            @Test
            @TestMetadata("javaVisibility.kt")
            public void testJavaVisibility() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/javaVisibility.kt");
            }

            @Test
            @TestMetadata("properties.kt")
            public void testProperties() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/properties.kt");
            }

            @Test
            @TestMetadata("typeParameters.kt")
            public void testTypeParameters() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/modifiers/typeParameters.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/multifileClasses")
        @TestDataPath("$PROJECT_ROOT")
        public class MultifileClasses extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInMultifileClasses() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/multifileClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("callFunctionsInMultifileClass.kt")
            public void testCallFunctionsInMultifileClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/multifileClasses/callFunctionsInMultifileClass.kt");
            }

            @Test
            @TestMetadata("callPropertiesInMultifileClass.kt")
            public void testCallPropertiesInMultifileClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/multifileClasses/callPropertiesInMultifileClass.kt");
            }

            @Test
            @TestMetadata("javaFieldForVarAndConstVal.kt")
            public void testJavaFieldForVarAndConstVal() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/multifileClasses/javaFieldForVarAndConstVal.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime")
        @TestDataPath("$PROJECT_ROOT")
        public class NoReflectAtRuntime extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInNoReflectAtRuntime() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("javaClass.kt")
            public void testJavaClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaClass.kt");
            }

            @Test
            @TestMetadata("javaVoid.kt")
            public void testJavaVoid() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/javaVoid.kt");
            }

            @Test
            @TestMetadata("primitiveJavaClass.kt")
            public void testPrimitiveJavaClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/primitiveJavaClass.kt");
            }

            @Test
            @TestMetadata("propertyGetSetName.kt")
            public void testPropertyGetSetName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyGetSetName.kt");
            }

            @Test
            @TestMetadata("propertyInstanceof.kt")
            public void testPropertyInstanceof() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/propertyInstanceof.kt");
            }

            @Test
            @TestMetadata("reifiedTypeJavaClass.kt")
            public void testReifiedTypeJavaClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/reifiedTypeJavaClass.kt");
            }

            @Test
            @TestMetadata("simpleClassLiterals.kt")
            public void testSimpleClassLiterals() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/simpleClassLiterals.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny")
            @TestDataPath("$PROJECT_ROOT")
            public class MethodsFromAny extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInMethodsFromAny() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("callableReferences.kt")
                public void testCallableReferences() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/callableReferences.kt");
                }

                @Test
                @TestMetadata("classReference.kt")
                public void testClassReference() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/classReference.kt");
                }

                @Test
                @TestMetadata("delegatedProperty.kt")
                public void testDelegatedProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/noReflectAtRuntime/methodsFromAny/delegatedProperty.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/parameters")
        @TestDataPath("$PROJECT_ROOT")
        public class Parameters extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInParameters() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/parameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("bigArity.kt")
            public void testBigArity() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/bigArity.kt");
            }

            @Test
            @TestMetadata("boundInnerClassConstructor.kt")
            public void testBoundInnerClassConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/boundInnerClassConstructor.kt");
            }

            @Test
            @TestMetadata("boundObjectMemberReferences.kt")
            public void testBoundObjectMemberReferences() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/boundObjectMemberReferences.kt");
            }

            @Test
            @TestMetadata("boundReferences.kt")
            public void testBoundReferences() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/boundReferences.kt");
            }

            @Test
            @TestMetadata("findParameterByName.kt")
            public void testFindParameterByName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/findParameterByName.kt");
            }

            @Test
            @TestMetadata("functionParameterNameAndIndex.kt")
            public void testFunctionParameterNameAndIndex() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/functionParameterNameAndIndex.kt");
            }

            @Test
            @TestMetadata("instanceExtensionReceiverAndValueParameters.kt")
            public void testInstanceExtensionReceiverAndValueParameters() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/instanceExtensionReceiverAndValueParameters.kt");
            }

            @Test
            @TestMetadata("instanceParameterOfFakeOverride.kt")
            public void testInstanceParameterOfFakeOverride() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/instanceParameterOfFakeOverride.kt");
            }

            @Test
            @TestMetadata("isMarkedNullable.kt")
            public void testIsMarkedNullable() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/isMarkedNullable.kt");
            }

            @Test
            @TestMetadata("isOptional.kt")
            public void testIsOptional() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/isOptional.kt");
            }

            @Test
            @TestMetadata("javaAnnotationConstructor.kt")
            public void testJavaAnnotationConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/javaAnnotationConstructor.kt");
            }

            @Test
            @TestMetadata("kinds.kt")
            public void testKinds() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/kinds.kt");
            }

            @Test
            @TestMetadata("propertySetter.kt")
            public void testPropertySetter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/propertySetter.kt");
            }

            @Test
            @TestMetadata("realParameterNames.kt")
            public void testRealParameterNames() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/realParameterNames.kt");
            }

            @Test
            @TestMetadata("synthesizedParameterNames.kt")
            public void testSynthesizedParameterNames() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/parameters/synthesizedParameterNames.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/properties")
        @TestDataPath("$PROJECT_ROOT")
        public class Properties extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInProperties() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("allVsDeclared.kt")
            public void testAllVsDeclared() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/allVsDeclared.kt");
            }

            @Test
            @TestMetadata("callPrivatePropertyFromGetProperties.kt")
            public void testCallPrivatePropertyFromGetProperties() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/callPrivatePropertyFromGetProperties.kt");
            }

            @Test
            @TestMetadata("declaredVsInheritedProperties.kt")
            public void testDeclaredVsInheritedProperties() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/declaredVsInheritedProperties.kt");
            }

            @Test
            @TestMetadata("fakeOverridesInSubclass.kt")
            public void testFakeOverridesInSubclass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/fakeOverridesInSubclass.kt");
            }

            @Test
            @TestMetadata("genericClassLiteralPropertyReceiverIsStar.kt")
            public void testGenericClassLiteralPropertyReceiverIsStar() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/genericClassLiteralPropertyReceiverIsStar.kt");
            }

            @Test
            @TestMetadata("genericOverriddenProperty.kt")
            public void testGenericOverriddenProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/genericOverriddenProperty.kt");
            }

            @Test
            @TestMetadata("genericProperty.kt")
            public void testGenericProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/genericProperty.kt");
            }

            @Test
            @TestMetadata("getExtensionPropertiesMutableVsReadonly.kt")
            public void testGetExtensionPropertiesMutableVsReadonly() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/getExtensionPropertiesMutableVsReadonly.kt");
            }

            @Test
            @TestMetadata("getPropertiesMutableVsReadonly.kt")
            public void testGetPropertiesMutableVsReadonly() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/getPropertiesMutableVsReadonly.kt");
            }

            @Test
            @TestMetadata("invokeKProperty.kt")
            public void testInvokeKProperty() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/invokeKProperty.kt");
            }

            @Test
            @TestMetadata("javaPropertyInheritedInKotlin.kt")
            public void testJavaPropertyInheritedInKotlin() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/javaPropertyInheritedInKotlin.kt");
            }

            @Test
            @TestMetadata("javaStaticField.kt")
            public void testJavaStaticField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/javaStaticField.kt");
            }

            @Test
            @TestMetadata("kotlinPropertyInheritedInJava.kt")
            public void testKotlinPropertyInheritedInJava() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/kotlinPropertyInheritedInJava.kt");
            }

            @Test
            @TestMetadata("memberAndMemberExtensionWithSameName.kt")
            public void testMemberAndMemberExtensionWithSameName() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/memberAndMemberExtensionWithSameName.kt");
            }

            @Test
            @TestMetadata("mutatePrivateJavaInstanceField.kt")
            public void testMutatePrivateJavaInstanceField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaInstanceField.kt");
            }

            @Test
            @TestMetadata("mutatePrivateJavaStaticField.kt")
            public void testMutatePrivateJavaStaticField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/mutatePrivateJavaStaticField.kt");
            }

            @Test
            @TestMetadata("noConflictOnKotlinGetterAndJavaField.kt")
            public void testNoConflictOnKotlinGetterAndJavaField() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/noConflictOnKotlinGetterAndJavaField.kt");
            }

            @Test
            @TestMetadata("overrideKotlinPropertyByJavaMethod.kt")
            public void testOverrideKotlinPropertyByJavaMethod() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/overrideKotlinPropertyByJavaMethod.kt");
            }

            @Test
            @TestMetadata("privateClassVal.kt")
            public void testPrivateClassVal() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/privateClassVal.kt");
            }

            @Test
            @TestMetadata("privateClassVar.kt")
            public void testPrivateClassVar() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/privateClassVar.kt");
            }

            @Test
            @TestMetadata("privateFakeOverrideFromSuperclass.kt")
            public void testPrivateFakeOverrideFromSuperclass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/privateFakeOverrideFromSuperclass.kt");
            }

            @Test
            @TestMetadata("privateJvmStaticVarInObject.kt")
            public void testPrivateJvmStaticVarInObject() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/privateJvmStaticVarInObject.kt");
            }

            @Test
            @TestMetadata("privatePropertyCallIsAccessibleOnAccessors.kt")
            public void testPrivatePropertyCallIsAccessibleOnAccessors() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/privatePropertyCallIsAccessibleOnAccessors.kt");
            }

            @Test
            @TestMetadata("privateToThisAccessors.kt")
            public void testPrivateToThisAccessors() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/privateToThisAccessors.kt");
            }

            @Test
            @TestMetadata("propertyOfNestedClassAndArrayType.kt")
            public void testPropertyOfNestedClassAndArrayType() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/propertyOfNestedClassAndArrayType.kt");
            }

            @Test
            @TestMetadata("protectedClassVar.kt")
            public void testProtectedClassVar() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/protectedClassVar.kt");
            }

            @Test
            @TestMetadata("publicClassValAccessible.kt")
            public void testPublicClassValAccessible() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/publicClassValAccessible.kt");
            }

            @Test
            @TestMetadata("referenceToJavaFieldOfKotlinSubclass.kt")
            public void testReferenceToJavaFieldOfKotlinSubclass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/referenceToJavaFieldOfKotlinSubclass.kt");
            }

            @Test
            @TestMetadata("simpleGetProperties.kt")
            public void testSimpleGetProperties() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/simpleGetProperties.kt");
            }

            @Test
            @TestMetadata("withLocalType.kt")
            public void testWithLocalType() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/properties/withLocalType.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/properties/accessors")
            @TestDataPath("$PROJECT_ROOT")
            public class Accessors extends AbstractBlackBoxCodegenTest {
                @Test
                @TestMetadata("accessorNames.kt")
                public void testAccessorNames() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/accessors/accessorNames.kt");
                }

                @Test
                public void testAllFilesPresentInAccessors() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/accessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("extensionPropertyAccessors.kt")
                public void testExtensionPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/accessors/extensionPropertyAccessors.kt");
                }

                @Test
                @TestMetadata("memberExtensions.kt")
                public void testMemberExtensions() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberExtensions.kt");
                }

                @Test
                @TestMetadata("memberPropertyAccessors.kt")
                public void testMemberPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/accessors/memberPropertyAccessors.kt");
                }

                @Test
                @TestMetadata("topLevelPropertyAccessors.kt")
                public void testTopLevelPropertyAccessors() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/accessors/topLevelPropertyAccessors.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/properties/getDelegate")
            @TestDataPath("$PROJECT_ROOT")
            public class GetDelegate extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInGetDelegate() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/getDelegate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("booleanPropertyNameStartsWithIs.kt")
                public void testBooleanPropertyNameStartsWithIs() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/booleanPropertyNameStartsWithIs.kt");
                }

                @Test
                @TestMetadata("boundExtensionProperty.kt")
                public void testBoundExtensionProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundExtensionProperty.kt");
                }

                @Test
                @TestMetadata("boundMemberProperty.kt")
                public void testBoundMemberProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/boundMemberProperty.kt");
                }

                @Test
                @TestMetadata("extensionProperty.kt")
                public void testExtensionProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/extensionProperty.kt");
                }

                @Test
                @TestMetadata("fakeOverride.kt")
                public void testFakeOverride() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/fakeOverride.kt");
                }

                @Test
                @TestMetadata("getExtensionDelegate.kt")
                public void testGetExtensionDelegate() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/getExtensionDelegate.kt");
                }

                @Test
                @TestMetadata("kPropertyForDelegatedProperty.kt")
                public void testKPropertyForDelegatedProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/kPropertyForDelegatedProperty.kt");
                }

                @Test
                @TestMetadata("memberExtensionProperty.kt")
                public void testMemberExtensionProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberExtensionProperty.kt");
                }

                @Test
                @TestMetadata("memberProperty.kt")
                public void testMemberProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/memberProperty.kt");
                }

                @Test
                @TestMetadata("nameClashClassAndCompanion.kt")
                public void testNameClashClassAndCompanion() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashClassAndCompanion.kt");
                }

                @Test
                @TestMetadata("nameClashExtensionProperties.kt")
                public void testNameClashExtensionProperties() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/nameClashExtensionProperties.kt");
                }

                @Test
                @TestMetadata("noSetAccessibleTrue.kt")
                public void testNoSetAccessibleTrue() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/noSetAccessibleTrue.kt");
                }

                @Test
                @TestMetadata("notDelegatedProperty.kt")
                public void testNotDelegatedProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/notDelegatedProperty.kt");
                }

                @Test
                @TestMetadata("overrideDelegatedByDelegated.kt")
                public void testOverrideDelegatedByDelegated() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/overrideDelegatedByDelegated.kt");
                }

                @Test
                @TestMetadata("topLevelProperty.kt")
                public void testTopLevelProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/getDelegate/topLevelProperty.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/properties/jvmField")
            @TestDataPath("$PROJECT_ROOT")
            public class JvmField extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInJvmField() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/jvmField"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("annotationCompanionWithAnnotation.kt")
                public void testAnnotationCompanionWithAnnotation() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/jvmField/annotationCompanionWithAnnotation.kt");
                }

                @Test
                @TestMetadata("interfaceCompanion.kt")
                public void testInterfaceCompanion() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/jvmField/interfaceCompanion.kt");
                }

                @Test
                @TestMetadata("interfaceCompanionWithAnnotation.kt")
                public void testInterfaceCompanionWithAnnotation() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/jvmField/interfaceCompanionWithAnnotation.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/properties/localDelegated")
            @TestDataPath("$PROJECT_ROOT")
            public class LocalDelegated extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInLocalDelegated() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/properties/localDelegated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("defaultImpls.kt")
                public void testDefaultImpls() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/defaultImpls.kt");
                }

                @Test
                @TestMetadata("inLambda.kt")
                public void testInLambda() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inLambda.kt");
                }

                @Test
                @TestMetadata("inLambdaInInline.kt")
                public void testInLambdaInInline() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inLambdaInInline.kt");
                }

                @Test
                @TestMetadata("inlineFun.kt")
                public void testInlineFun() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/inlineFun.kt");
                }

                @Test
                @TestMetadata("localAndNonLocal.kt")
                public void testLocalAndNonLocal() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/localAndNonLocal.kt");
                }

                @Test
                @TestMetadata("localDelegatedProperty.kt")
                public void testLocalDelegatedProperty() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/localDelegatedProperty.kt");
                }

                @Test
                @TestMetadata("multiFileClass.kt")
                public void testMultiFileClass() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/multiFileClass.kt");
                }

                @Test
                @TestMetadata("variableOfGenericType.kt")
                public void testVariableOfGenericType() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/properties/localDelegated/variableOfGenericType.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/supertypes")
        @TestDataPath("$PROJECT_ROOT")
        public class Supertypes extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSupertypes() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/supertypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("builtInClassSupertypes.kt")
            public void testBuiltInClassSupertypes() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/supertypes/builtInClassSupertypes.kt");
            }

            @Test
            @TestMetadata("genericSubstitution.kt")
            public void testGenericSubstitution() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/supertypes/genericSubstitution.kt");
            }

            @Test
            @TestMetadata("isSubclassOfIsSuperclassOf.kt")
            public void testIsSubclassOfIsSuperclassOf() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/supertypes/isSubclassOfIsSuperclassOf.kt");
            }

            @Test
            @TestMetadata("primitives.kt")
            public void testPrimitives() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/supertypes/primitives.kt");
            }

            @Test
            @TestMetadata("simpleSupertypes.kt")
            public void testSimpleSupertypes() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/supertypes/simpleSupertypes.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/typeOf")
        @TestDataPath("$PROJECT_ROOT")
        public class TypeOf extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInTypeOf() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("classes.kt")
            public void testClasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeOf/classes.kt");
            }

            @Test
            @TestMetadata("inlineClasses.kt")
            public void testInlineClasses() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeOf/inlineClasses.kt");
            }

            @Test
            @TestMetadata("manyTypeArguments.kt")
            public void testManyTypeArguments() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeOf/manyTypeArguments.kt");
            }

            @Test
            @TestMetadata("multipleLayers.kt")
            public void testMultipleLayers() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeOf/multipleLayers.kt");
            }

            @Test
            @TestMetadata("typeOfCapturedStar.kt")
            public void testTypeOfCapturedStar() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeOf/typeOfCapturedStar.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/js")
            @TestDataPath("$PROJECT_ROOT")
            public class Js extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInJs() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/js"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect")
            @TestDataPath("$PROJECT_ROOT")
            public class NoReflect extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInNoReflect() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("classes.kt")
                public void testClasses() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/classes.kt");
                }

                @Test
                @TestMetadata("inlineClasses.kt")
                public void testInlineClasses() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/inlineClasses.kt");
                }

                @Test
                @TestMetadata("typeReferenceEqualsHashCode.kt")
                public void testTypeReferenceEqualsHashCode() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/typeReferenceEqualsHashCode.kt");
                }

                @Nested
                @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters")
                @TestDataPath("$PROJECT_ROOT")
                public class NonReifiedTypeParameters extends AbstractBlackBoxCodegenTest {
                    @Test
                    public void testAllFilesPresentInNonReifiedTypeParameters() throws Exception {
                        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                    }

                    @Test
                    @TestMetadata("defaultUpperBound.kt")
                    public void testDefaultUpperBound() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/defaultUpperBound.kt");
                    }

                    @Test
                    @TestMetadata("equalsOnClassParameters.kt")
                    public void testEqualsOnClassParameters() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/equalsOnClassParameters.kt");
                    }

                    @Test
                    @TestMetadata("equalsOnFunctionParameters.kt")
                    public void testEqualsOnFunctionParameters() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/equalsOnFunctionParameters.kt");
                    }

                    @Test
                    @TestMetadata("innerGeneric.kt")
                    public void testInnerGeneric() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/innerGeneric.kt");
                    }

                    @Test
                    @TestMetadata("simpleClassParameter.kt")
                    public void testSimpleClassParameter() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simpleClassParameter.kt");
                    }

                    @Test
                    @TestMetadata("simpleFunctionParameter.kt")
                    public void testSimpleFunctionParameter() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simpleFunctionParameter.kt");
                    }

                    @Test
                    @TestMetadata("simplePropertyParameter.kt")
                    public void testSimplePropertyParameter() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/simplePropertyParameter.kt");
                    }

                    @Test
                    @TestMetadata("typeParameterFlags.kt")
                    public void testTypeParameterFlags() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/typeParameterFlags.kt");
                    }

                    @Test
                    @TestMetadata("upperBoundUsesOuterClassParameter.kt")
                    public void testUpperBoundUsesOuterClassParameter() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/upperBoundUsesOuterClassParameter.kt");
                    }

                    @Test
                    @TestMetadata("upperBounds.kt")
                    public void testUpperBounds() throws Exception {
                        runTest("compiler/testData/codegen/box/reflection/typeOf/noReflect/nonReifiedTypeParameters/upperBounds.kt");
                    }
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters")
            @TestDataPath("$PROJECT_ROOT")
            public class NonReifiedTypeParameters extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInNonReifiedTypeParameters() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("defaultUpperBound.kt")
                public void testDefaultUpperBound() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/defaultUpperBound.kt");
                }

                @Test
                @TestMetadata("equalsOnClassParameters.kt")
                public void testEqualsOnClassParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnClassParameters.kt");
                }

                @Test
                @TestMetadata("equalsOnClassParametersWithReflectAPI.kt")
                public void testEqualsOnClassParametersWithReflectAPI() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnClassParametersWithReflectAPI.kt");
                }

                @Test
                @TestMetadata("equalsOnFunctionParameters.kt")
                public void testEqualsOnFunctionParameters() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/equalsOnFunctionParameters.kt");
                }

                @Test
                @TestMetadata("innerGeneric.kt")
                public void testInnerGeneric() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/innerGeneric.kt");
                }

                @Test
                @TestMetadata("simpleClassParameter.kt")
                public void testSimpleClassParameter() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleClassParameter.kt");
                }

                @Test
                @TestMetadata("simpleFunctionParameter.kt")
                public void testSimpleFunctionParameter() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simpleFunctionParameter.kt");
                }

                @Test
                @TestMetadata("simplePropertyParameter.kt")
                public void testSimplePropertyParameter() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/simplePropertyParameter.kt");
                }

                @Test
                @TestMetadata("starProjectionInUpperBound.kt")
                public void testStarProjectionInUpperBound() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/starProjectionInUpperBound.kt");
                }

                @Test
                @TestMetadata("typeParameterFlags.kt")
                public void testTypeParameterFlags() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/typeParameterFlags.kt");
                }

                @Test
                @TestMetadata("upperBoundUsesOuterClassParameter.kt")
                public void testUpperBoundUsesOuterClassParameter() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBoundUsesOuterClassParameter.kt");
                }

                @Test
                @TestMetadata("upperBounds.kt")
                public void testUpperBounds() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/typeOf/nonReifiedTypeParameters/upperBounds.kt");
                }
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/typeParameters")
        @TestDataPath("$PROJECT_ROOT")
        public class TypeParameters extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInTypeParameters() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/typeParameters"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("declarationSiteVariance.kt")
            public void testDeclarationSiteVariance() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeParameters/declarationSiteVariance.kt");
            }

            @Test
            @TestMetadata("innerGenericParameter.kt")
            public void testInnerGenericParameter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeParameters/innerGenericParameter.kt");
            }

            @Test
            @TestMetadata("javaGenericTypeConstructor.kt")
            public void testJavaGenericTypeConstructor() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeParameters/javaGenericTypeConstructor.kt");
            }

            @Test
            @TestMetadata("typeParametersAndNames.kt")
            public void testTypeParametersAndNames() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeParameters/typeParametersAndNames.kt");
            }

            @Test
            @TestMetadata("upperBounds.kt")
            public void testUpperBounds() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/typeParameters/upperBounds.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reflection/types")
        @TestDataPath("$PROJECT_ROOT")
        public class Types extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInTypes() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("classifierIsClass.kt")
            public void testClassifierIsClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/classifierIsClass.kt");
            }

            @Test
            @TestMetadata("classifierIsTypeParameter.kt")
            public void testClassifierIsTypeParameter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/classifierIsTypeParameter.kt");
            }

            @Test
            @TestMetadata("classifiersOfBuiltInTypes.kt")
            public void testClassifiersOfBuiltInTypes() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/classifiersOfBuiltInTypes.kt");
            }

            @Test
            @TestMetadata("innerGenericArguments.kt")
            public void testInnerGenericArguments() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/innerGenericArguments.kt");
            }

            @Test
            @TestMetadata("jvmErasureOfClass.kt")
            public void testJvmErasureOfClass() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfClass.kt");
            }

            @Test
            @TestMetadata("jvmErasureOfTypeParameter.kt")
            public void testJvmErasureOfTypeParameter() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/jvmErasureOfTypeParameter.kt");
            }

            @Test
            @TestMetadata("platformTypeClassifier.kt")
            public void testPlatformTypeClassifier() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/platformTypeClassifier.kt");
            }

            @Test
            @TestMetadata("platformTypeNotEqualToKotlinType.kt")
            public void testPlatformTypeNotEqualToKotlinType() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/platformTypeNotEqualToKotlinType.kt");
            }

            @Test
            @TestMetadata("platformTypeToString.kt")
            public void testPlatformTypeToString() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/platformTypeToString.kt");
            }

            @Test
            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/typeArguments.kt");
            }

            @Test
            @TestMetadata("useSiteVariance.kt")
            public void testUseSiteVariance() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/useSiteVariance.kt");
            }

            @Test
            @TestMetadata("withNullability.kt")
            public void testWithNullability() throws Exception {
                runTest("compiler/testData/codegen/box/reflection/types/withNullability.kt");
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/types/createType")
            @TestDataPath("$PROJECT_ROOT")
            public class CreateType extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInCreateType() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/createType"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("equality.kt")
                public void testEquality() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/createType/equality.kt");
                }

                @Test
                @TestMetadata("innerGeneric.kt")
                public void testInnerGeneric() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/createType/innerGeneric.kt");
                }

                @Test
                @TestMetadata("simpleCreateType.kt")
                public void testSimpleCreateType() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/createType/simpleCreateType.kt");
                }

                @Test
                @TestMetadata("typeParameter.kt")
                public void testTypeParameter() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/createType/typeParameter.kt");
                }

                @Test
                @TestMetadata("wrongNumberOfArguments.kt")
                public void testWrongNumberOfArguments() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/createType/wrongNumberOfArguments.kt");
                }
            }

            @Nested
            @TestMetadata("compiler/testData/codegen/box/reflection/types/subtyping")
            @TestDataPath("$PROJECT_ROOT")
            public class Subtyping extends AbstractBlackBoxCodegenTest {
                @Test
                public void testAllFilesPresentInSubtyping() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reflection/types/subtyping"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
                }

                @Test
                @TestMetadata("platformType.kt")
                public void testPlatformType() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/subtyping/platformType.kt");
                }

                @Test
                @TestMetadata("simpleGenericTypes.kt")
                public void testSimpleGenericTypes() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleGenericTypes.kt");
                }

                @Test
                @TestMetadata("simpleSubtypeSupertype.kt")
                public void testSimpleSubtypeSupertype() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/subtyping/simpleSubtypeSupertype.kt");
                }

                @Test
                @TestMetadata("typeProjection.kt")
                public void testTypeProjection() throws Exception {
                    runTest("compiler/testData/codegen/box/reflection/types/subtyping/typeProjection.kt");
                }
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/regressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Regressions extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInRegressions() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/regressions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("approximateIntersectionType.kt")
        public void testApproximateIntersectionType() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/approximateIntersectionType.kt");
        }

        @Test
        @TestMetadata("arrayLengthNPE.kt")
        public void testArrayLengthNPE() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/arrayLengthNPE.kt");
        }

        @Test
        @TestMetadata("collections.kt")
        public void testCollections() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/collections.kt");
        }

        @Test
        @TestMetadata("commonSupertypeContravariant.kt")
        public void testCommonSupertypeContravariant() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant.kt");
        }

        @Test
        @TestMetadata("commonSupertypeContravariant2.kt")
        public void testCommonSupertypeContravariant2() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/commonSupertypeContravariant2.kt");
        }

        @Test
        @TestMetadata("dontCaptureTypesWithTypeVariables.kt")
        public void testDontCaptureTypesWithTypeVariables() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/dontCaptureTypesWithTypeVariables.kt");
        }

        @Test
        @TestMetadata("doubleMerge.kt")
        public void testDoubleMerge() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/doubleMerge.kt");
        }

        @Test
        @TestMetadata("floatMerge.kt")
        public void testFloatMerge() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/floatMerge.kt");
        }

        @Test
        @TestMetadata("functionLiteralAsLastExpressionInBlock.kt")
        public void testFunctionLiteralAsLastExpressionInBlock() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/functionLiteralAsLastExpressionInBlock.kt");
        }

        @Test
        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/generic.kt");
        }

        @Test
        @TestMetadata("getGenericInterfaces.kt")
        public void testGetGenericInterfaces() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/getGenericInterfaces.kt");
        }

        @Test
        @TestMetadata("hashCodeNPE.kt")
        public void testHashCodeNPE() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/hashCodeNPE.kt");
        }

        @Test
        @TestMetadata("internalTopLevelOtherPackage.kt")
        public void testInternalTopLevelOtherPackage() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/internalTopLevelOtherPackage.kt");
        }

        @Test
        @TestMetadata("intersectionAsLastLambda.kt")
        public void testIntersectionAsLastLambda() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/intersectionAsLastLambda.kt");
        }

        @Test
        @TestMetadata("intersectionOfEqualTypes.kt")
        public void testIntersectionOfEqualTypes() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/intersectionOfEqualTypes.kt");
        }

        @Test
        @TestMetadata("kt10143.kt")
        public void testKt10143() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt10143.kt");
        }

        @Test
        @TestMetadata("kt10934.kt")
        public void testKt10934() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt10934.kt");
        }

        @Test
        @TestMetadata("Kt1149.kt")
        public void testKt1149() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/Kt1149.kt");
        }

        @Test
        @TestMetadata("kt1172.kt")
        public void testKt1172() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1172.kt");
        }

        @Test
        @TestMetadata("kt1202.kt")
        public void testKt1202() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1202.kt");
        }

        @Test
        @TestMetadata("kt13381.kt")
        public void testKt13381() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt13381.kt");
        }

        @Test
        @TestMetadata("kt1406.kt")
        public void testKt1406() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1406.kt");
        }

        @Test
        @TestMetadata("kt14447.kt")
        public void testKt14447() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt14447.kt");
        }

        @Test
        @TestMetadata("kt1515.kt")
        public void testKt1515() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1515.kt");
        }

        @Test
        @TestMetadata("kt15196.kt")
        public void testKt15196() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt15196.kt");
        }

        @Test
        @TestMetadata("kt1528.kt")
        public void testKt1528() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1528.kt");
        }

        @Test
        @TestMetadata("kt1568.kt")
        public void testKt1568() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1568.kt");
        }

        @Test
        @TestMetadata("Kt1619Test.kt")
        public void testKt1619Test() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/Kt1619Test.kt");
        }

        @Test
        @TestMetadata("kt1779.kt")
        public void testKt1779() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1779.kt");
        }

        @Test
        @TestMetadata("kt1800.kt")
        public void testKt1800() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1800.kt");
        }

        @Test
        @TestMetadata("kt1845.kt")
        public void testKt1845() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1845.kt");
        }

        @Test
        @TestMetadata("kt18779.kt")
        public void testKt18779() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt18779.kt");
        }

        @Test
        @TestMetadata("kt1932.kt")
        public void testKt1932() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt1932.kt");
        }

        @Test
        @TestMetadata("kt2017.kt")
        public void testKt2017() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt2017.kt");
        }

        @Test
        @TestMetadata("kt2060.kt")
        public void testKt2060() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt2060.kt");
        }

        @Test
        @TestMetadata("kt2210.kt")
        public void testKt2210() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt2210.kt");
        }

        @Test
        @TestMetadata("kt2246.kt")
        public void testKt2246() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt2246.kt");
        }

        @Test
        @TestMetadata("kt2318.kt")
        public void testKt2318() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt2318.kt");
        }

        @Test
        @TestMetadata("kt24913.kt")
        public void testKt24913() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt24913.kt");
        }

        @Test
        @TestMetadata("Kt2495Test.kt")
        public void testKt2495Test() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/Kt2495Test.kt");
        }

        @Test
        @TestMetadata("kt2509.kt")
        public void testKt2509() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt2509.kt");
        }

        @Test
        @TestMetadata("kt2593.kt")
        public void testKt2593() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt2593.kt");
        }

        @Test
        @TestMetadata("kt274.kt")
        public void testKt274() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt274.kt");
        }

        @Test
        @TestMetadata("kt3046.kt")
        public void testKt3046() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt3046.kt");
        }

        @Test
        @TestMetadata("kt3107.kt")
        public void testKt3107() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt3107.kt");
        }

        @Test
        @TestMetadata("kt32949.kt")
        public void testKt32949() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt32949.kt");
        }

        @Test
        @TestMetadata("kt33638.kt")
        public void testKt33638() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt33638.kt");
        }

        @Test
        @TestMetadata("kt3421.kt")
        public void testKt3421() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt3421.kt");
        }

        @Test
        @TestMetadata("kt344.kt")
        public void testKt344() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt344.kt");
        }

        @Test
        @TestMetadata("kt3442.kt")
        public void testKt3442() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt3442.kt");
        }

        @Test
        @TestMetadata("kt3587.kt")
        public void testKt3587() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt3587.kt");
        }

        @Test
        @TestMetadata("kt35914.kt")
        public void testKt35914() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt35914.kt");
        }

        @Test
        @TestMetadata("kt3850.kt")
        public void testKt3850() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt3850.kt");
        }

        @Test
        @TestMetadata("kt3903.kt")
        public void testKt3903() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt3903.kt");
        }

        @Test
        @TestMetadata("kt39088.kt")
        public void testKt39088() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt39088.kt");
        }

        @Test
        @TestMetadata("kt41357.kt")
        public void testKt41357() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt41357.kt");
        }

        @Test
        @TestMetadata("kt4142.kt")
        public void testKt4142() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt4142.kt");
        }

        @Test
        @TestMetadata("kt41806.kt")
        public void testKt41806() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt41806.kt");
        }

        @Test
        @TestMetadata("kt4259.kt")
        public void testKt4259() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt4259.kt");
        }

        @Test
        @TestMetadata("kt4262.kt")
        public void testKt4262() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt4262.kt");
        }

        @Test
        @TestMetadata("kt4281.kt")
        public void testKt4281() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt4281.kt");
        }

        @Test
        @TestMetadata("kt5056.kt")
        public void testKt5056() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt5056.kt");
        }

        @Test
        @TestMetadata("kt528.kt")
        public void testKt528() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt528.kt");
        }

        @Test
        @TestMetadata("kt529.kt")
        public void testKt529() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt529.kt");
        }

        @Test
        @TestMetadata("kt533.kt")
        public void testKt533() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt533.kt");
        }

        @Test
        @TestMetadata("kt5395.kt")
        public void testKt5395() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt5395.kt");
        }

        @Test
        @TestMetadata("kt5445.kt")
        public void testKt5445() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt5445.kt");
        }

        @Test
        @TestMetadata("kt5445_2.kt")
        public void testKt5445_2() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt5445_2.kt");
        }

        @Test
        @TestMetadata("kt5786_privateWithDefault.kt")
        public void testKt5786_privateWithDefault() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt5786_privateWithDefault.kt");
        }

        @Test
        @TestMetadata("kt5953.kt")
        public void testKt5953() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt5953.kt");
        }

        @Test
        @TestMetadata("kt6153.kt")
        public void testKt6153() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt6153.kt");
        }

        @Test
        @TestMetadata("kt6434.kt")
        public void testKt6434() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt6434.kt");
        }

        @Test
        @TestMetadata("kt6434_2.kt")
        public void testKt6434_2() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt6434_2.kt");
        }

        @Test
        @TestMetadata("kt6485.kt")
        public void testKt6485() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt6485.kt");
        }

        @Test
        @TestMetadata("kt715.kt")
        public void testKt715() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt715.kt");
        }

        @Test
        @TestMetadata("kt7401.kt")
        public void testKt7401() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt7401.kt");
        }

        @Test
        @TestMetadata("kt789.kt")
        public void testKt789() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt789.kt");
        }

        @Test
        @TestMetadata("kt864.kt")
        public void testKt864() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt864.kt");
        }

        @Test
        @TestMetadata("kt9345.kt")
        public void testKt9345() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt9345.kt");
        }

        @Test
        @TestMetadata("kt998.kt")
        public void testKt998() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/kt998.kt");
        }

        @Test
        @TestMetadata("lambdaAsLastExpressionInLambda.kt")
        public void testLambdaAsLastExpressionInLambda() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/lambdaAsLastExpressionInLambda.kt");
        }

        @Test
        @TestMetadata("lambdaPostponeConstruction.kt")
        public void testLambdaPostponeConstruction() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/lambdaPostponeConstruction.kt");
        }

        @Test
        @TestMetadata("lambdaWrongReturnType.kt")
        public void testLambdaWrongReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/lambdaWrongReturnType.kt");
        }

        @Test
        @TestMetadata("nestedIntersection.kt")
        public void testNestedIntersection() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/nestedIntersection.kt");
        }

        @Test
        @TestMetadata("noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt")
        public void testNoAssertionsWhenNullableTypeParameterReplacedWithIntersectionType() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/noAssertionsWhenNullableTypeParameterReplacedWithIntersectionType.kt");
        }

        @Test
        @TestMetadata("noCapturingForTypesWithTypeVariables.kt")
        public void testNoCapturingForTypesWithTypeVariables() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/noCapturingForTypesWithTypeVariables.kt");
        }

        @Test
        @TestMetadata("noResolutionRecursion.kt")
        public void testNoResolutionRecursion() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/noResolutionRecursion.kt");
        }

        @Test
        @TestMetadata("nullabilityForCommonCapturedSupertypes.kt")
        public void testNullabilityForCommonCapturedSupertypes() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/nullabilityForCommonCapturedSupertypes.kt");
        }

        @Test
        @TestMetadata("nullableAfterExclExcl.kt")
        public void testNullableAfterExclExcl() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/nullableAfterExclExcl.kt");
        }

        @Test
        @TestMetadata("objectCaptureOuterConstructorProperty.kt")
        public void testObjectCaptureOuterConstructorProperty() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/objectCaptureOuterConstructorProperty.kt");
        }

        @Test
        @TestMetadata("objectInsideDelegation.kt")
        public void testObjectInsideDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/objectInsideDelegation.kt");
        }

        @Test
        @TestMetadata("referenceToSelfInLocal.kt")
        public void testReferenceToSelfInLocal() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/referenceToSelfInLocal.kt");
        }

        @Test
        @TestMetadata("resolvedCallForGetOperator.kt")
        public void testResolvedCallForGetOperator() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/resolvedCallForGetOperator.kt");
        }

        @Test
        @TestMetadata("supertypeDepth.kt")
        public void testSupertypeDepth() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/supertypeDepth.kt");
        }

        @Test
        @TestMetadata("typeCastException.kt")
        public void testTypeCastException() throws Exception {
            runTest("compiler/testData/codegen/box/regressions/typeCastException.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/reified")
    @TestDataPath("$PROJECT_ROOT")
    public class Reified extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInReified() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reified"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anonymousObject.kt")
        public void testAnonymousObject() throws Exception {
            runTest("compiler/testData/codegen/box/reified/anonymousObject.kt");
        }

        @Test
        @TestMetadata("anonymousObjectNoPropagate.kt")
        public void testAnonymousObjectNoPropagate() throws Exception {
            runTest("compiler/testData/codegen/box/reified/anonymousObjectNoPropagate.kt");
        }

        @Test
        @TestMetadata("anonymousObjectReifiedSupertype.kt")
        public void testAnonymousObjectReifiedSupertype() throws Exception {
            runTest("compiler/testData/codegen/box/reified/anonymousObjectReifiedSupertype.kt");
        }

        @Test
        @TestMetadata("approximateCapturedTypes.kt")
        public void testApproximateCapturedTypes() throws Exception {
            runTest("compiler/testData/codegen/box/reified/approximateCapturedTypes.kt");
        }

        @Test
        @TestMetadata("asOnPlatformType.kt")
        public void testAsOnPlatformType() throws Exception {
            runTest("compiler/testData/codegen/box/reified/asOnPlatformType.kt");
        }

        @Test
        @TestMetadata("checkcast.kt")
        public void testCheckcast() throws Exception {
            runTest("compiler/testData/codegen/box/reified/checkcast.kt");
        }

        @Test
        @TestMetadata("copyToArray.kt")
        public void testCopyToArray() throws Exception {
            runTest("compiler/testData/codegen/box/reified/copyToArray.kt");
        }

        @Test
        @TestMetadata("DIExample.kt")
        public void testDIExample() throws Exception {
            runTest("compiler/testData/codegen/box/reified/DIExample.kt");
        }

        @Test
        @TestMetadata("defaultJavaClass.kt")
        public void testDefaultJavaClass() throws Exception {
            runTest("compiler/testData/codegen/box/reified/defaultJavaClass.kt");
        }

        @Test
        @TestMetadata("expectedTypeFromCast.kt")
        public void testExpectedTypeFromCast() throws Exception {
            runTest("compiler/testData/codegen/box/reified/expectedTypeFromCast.kt");
        }

        @Test
        @TestMetadata("filterIsInstance.kt")
        public void testFilterIsInstance() throws Exception {
            runTest("compiler/testData/codegen/box/reified/filterIsInstance.kt");
        }

        @Test
        @TestMetadata("innerAnonymousObject.kt")
        public void testInnerAnonymousObject() throws Exception {
            runTest("compiler/testData/codegen/box/reified/innerAnonymousObject.kt");
        }

        @Test
        @TestMetadata("instanceof.kt")
        public void testInstanceof() throws Exception {
            runTest("compiler/testData/codegen/box/reified/instanceof.kt");
        }

        @Test
        @TestMetadata("isOnPlatformType.kt")
        public void testIsOnPlatformType() throws Exception {
            runTest("compiler/testData/codegen/box/reified/isOnPlatformType.kt");
        }

        @Test
        @TestMetadata("javaClass.kt")
        public void testJavaClass() throws Exception {
            runTest("compiler/testData/codegen/box/reified/javaClass.kt");
        }

        @Test
        @TestMetadata("nestedReified.kt")
        public void testNestedReified() throws Exception {
            runTest("compiler/testData/codegen/box/reified/nestedReified.kt");
        }

        @Test
        @TestMetadata("nestedReifiedSignature.kt")
        public void testNestedReifiedSignature() throws Exception {
            runTest("compiler/testData/codegen/box/reified/nestedReifiedSignature.kt");
        }

        @Test
        @TestMetadata("newArrayInt.kt")
        public void testNewArrayInt() throws Exception {
            runTest("compiler/testData/codegen/box/reified/newArrayInt.kt");
        }

        @Test
        @TestMetadata("nonInlineableLambdaInReifiedFunction.kt")
        public void testNonInlineableLambdaInReifiedFunction() throws Exception {
            runTest("compiler/testData/codegen/box/reified/nonInlineableLambdaInReifiedFunction.kt");
        }

        @Test
        @TestMetadata("recursiveInnerAnonymousObject.kt")
        public void testRecursiveInnerAnonymousObject() throws Exception {
            runTest("compiler/testData/codegen/box/reified/recursiveInnerAnonymousObject.kt");
        }

        @Test
        @TestMetadata("recursiveNewArray.kt")
        public void testRecursiveNewArray() throws Exception {
            runTest("compiler/testData/codegen/box/reified/recursiveNewArray.kt");
        }

        @Test
        @TestMetadata("recursiveNonInlineableLambda.kt")
        public void testRecursiveNonInlineableLambda() throws Exception {
            runTest("compiler/testData/codegen/box/reified/recursiveNonInlineableLambda.kt");
        }

        @Test
        @TestMetadata("reifiedChain.kt")
        public void testReifiedChain() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedChain.kt");
        }

        @Test
        @TestMetadata("reifiedInlineFunOfObject.kt")
        public void testReifiedInlineFunOfObject() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedInlineFunOfObject.kt");
        }

        @Test
        @TestMetadata("reifiedInlineFunOfObjectWithinReified.kt")
        public void testReifiedInlineFunOfObjectWithinReified() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedInlineFunOfObjectWithinReified.kt");
        }

        @Test
        @TestMetadata("reifiedInlineIntoNonInlineableLambda.kt")
        public void testReifiedInlineIntoNonInlineableLambda() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedInlineIntoNonInlineableLambda.kt");
        }

        @Test
        @TestMetadata("reifiedIntersectionType.kt")
        public void testReifiedIntersectionType() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedIntersectionType.kt");
        }

        @Test
        @TestMetadata("reifiedIntersectionTypeArgument.kt")
        public void testReifiedIntersectionTypeArgument() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedIntersectionTypeArgument.kt");
        }

        @Test
        @TestMetadata("reifiedIntersectionTypeArgumentCrossModule.kt")
        public void testReifiedIntersectionTypeArgumentCrossModule() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedIntersectionTypeArgumentCrossModule.kt");
        }

        @Test
        @TestMetadata("reifiedTypeArgumentWithIntersectionTypeAsTypeArgument.kt")
        public void testReifiedTypeArgumentWithIntersectionTypeAsTypeArgument() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedTypeArgumentWithIntersectionTypeAsTypeArgument.kt");
        }

        @Test
        @TestMetadata("reifiedTypeArgumentWithRecursion.kt")
        public void testReifiedTypeArgumentWithRecursion() throws Exception {
            runTest("compiler/testData/codegen/box/reified/reifiedTypeArgumentWithRecursion.kt");
        }

        @Test
        @TestMetadata("safecast.kt")
        public void testSafecast() throws Exception {
            runTest("compiler/testData/codegen/box/reified/safecast.kt");
        }

        @Test
        @TestMetadata("sameIndexRecursive.kt")
        public void testSameIndexRecursive() throws Exception {
            runTest("compiler/testData/codegen/box/reified/sameIndexRecursive.kt");
        }

        @Test
        @TestMetadata("spreads.kt")
        public void testSpreads() throws Exception {
            runTest("compiler/testData/codegen/box/reified/spreads.kt");
        }

        @Test
        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/reified/varargs.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/reified/arraysReification")
        @TestDataPath("$PROJECT_ROOT")
        public class ArraysReification extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInArraysReification() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/reified/arraysReification"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("instanceOf.kt")
            public void testInstanceOf() throws Exception {
                runTest("compiler/testData/codegen/box/reified/arraysReification/instanceOf.kt");
            }

            @Test
            @TestMetadata("instanceOfArrays.kt")
            public void testInstanceOfArrays() throws Exception {
                runTest("compiler/testData/codegen/box/reified/arraysReification/instanceOfArrays.kt");
            }

            @Test
            @TestMetadata("jClass.kt")
            public void testJClass() throws Exception {
                runTest("compiler/testData/codegen/box/reified/arraysReification/jClass.kt");
            }

            @Test
            @TestMetadata("jaggedArray.kt")
            public void testJaggedArray() throws Exception {
                runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedArray.kt");
            }

            @Test
            @TestMetadata("jaggedArrayOfNulls.kt")
            public void testJaggedArrayOfNulls() throws Exception {
                runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedArrayOfNulls.kt");
            }

            @Test
            @TestMetadata("jaggedDeep.kt")
            public void testJaggedDeep() throws Exception {
                runTest("compiler/testData/codegen/box/reified/arraysReification/jaggedDeep.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/safeCall")
    @TestDataPath("$PROJECT_ROOT")
    public class SafeCall extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSafeCall() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/safeCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("genericNull.kt")
        public void testGenericNull() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/genericNull.kt");
        }

        @Test
        @TestMetadata("kt1572.kt")
        public void testKt1572() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/kt1572.kt");
        }

        @Test
        @TestMetadata("kt232.kt")
        public void testKt232() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/kt232.kt");
        }

        @Test
        @TestMetadata("kt245.kt")
        public void testKt245() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/kt245.kt");
        }

        @Test
        @TestMetadata("kt247.kt")
        public void testKt247() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/kt247.kt");
        }

        @Test
        @TestMetadata("kt3430.kt")
        public void testKt3430() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/kt3430.kt");
        }

        @Test
        @TestMetadata("kt4733.kt")
        public void testKt4733() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/kt4733.kt");
        }

        @Test
        @TestMetadata("primitive.kt")
        public void testPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/primitive.kt");
        }

        @Test
        @TestMetadata("primitiveEqSafeCall.kt")
        public void testPrimitiveEqSafeCall() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/primitiveEqSafeCall.kt");
        }

        @Test
        @TestMetadata("primitiveNotEqSafeCall.kt")
        public void testPrimitiveNotEqSafeCall() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/primitiveNotEqSafeCall.kt");
        }

        @Test
        @TestMetadata("safeCallEqPrimitive.kt")
        public void testSafeCallEqPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/safeCallEqPrimitive.kt");
        }

        @Test
        @TestMetadata("safeCallNotEqPrimitive.kt")
        public void testSafeCallNotEqPrimitive() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/safeCallNotEqPrimitive.kt");
        }

        @Test
        @TestMetadata("safeCallOnLong.kt")
        public void testSafeCallOnLong() throws Exception {
            runTest("compiler/testData/codegen/box/safeCall/safeCallOnLong.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/sam")
    @TestDataPath("$PROJECT_ROOT")
    public class Sam extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSam() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("arrayAsVarargAfterSamArgument.kt")
        public void testArrayAsVarargAfterSamArgument() throws Exception {
            runTest("compiler/testData/codegen/box/sam/arrayAsVarargAfterSamArgument.kt");
        }

        @Test
        @TestMetadata("arrayAsVarargAfterSamArgumentWithoutSamConversionsPerArgument.kt")
        public void testArrayAsVarargAfterSamArgumentWithoutSamConversionsPerArgument() throws Exception {
            runTest("compiler/testData/codegen/box/sam/arrayAsVarargAfterSamArgumentWithoutSamConversionsPerArgument.kt");
        }

        @Test
        @TestMetadata("castFromAny.kt")
        public void testCastFromAny() throws Exception {
            runTest("compiler/testData/codegen/box/sam/castFromAny.kt");
        }

        @Test
        @TestMetadata("inlinedSamWrapper.kt")
        public void testInlinedSamWrapper() throws Exception {
            runTest("compiler/testData/codegen/box/sam/inlinedSamWrapper.kt");
        }

        @Test
        @TestMetadata("irrelevantStaticProperty.kt")
        public void testIrrelevantStaticProperty() throws Exception {
            runTest("compiler/testData/codegen/box/sam/irrelevantStaticProperty.kt");
        }

        @Test
        @TestMetadata("kt17091.kt")
        public void testKt17091() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt17091.kt");
        }

        @Test
        @TestMetadata("kt17091_2.kt")
        public void testKt17091_2() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt17091_2.kt");
        }

        @Test
        @TestMetadata("kt17091_3.kt")
        public void testKt17091_3() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt17091_3.kt");
        }

        @Test
        @TestMetadata("kt17091_4.kt")
        public void testKt17091_4() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt17091_4.kt");
        }

        @Test
        @TestMetadata("kt22906.kt")
        public void testKt22906() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt22906.kt");
        }

        @Test
        @TestMetadata("kt22906_2.kt")
        public void testKt22906_2() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt22906_2.kt");
        }

        @Test
        @TestMetadata("kt24825.kt")
        public void testKt24825() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt24825.kt");
        }

        @Test
        @TestMetadata("kt31908.kt")
        public void testKt31908() throws Exception {
            runTest("compiler/testData/codegen/box/sam/kt31908.kt");
        }

        @Test
        @TestMetadata("nonInlinedSamWrapper.kt")
        public void testNonInlinedSamWrapper() throws Exception {
            runTest("compiler/testData/codegen/box/sam/nonInlinedSamWrapper.kt");
        }

        @Test
        @TestMetadata("nullableSam.kt")
        public void testNullableSam() throws Exception {
            runTest("compiler/testData/codegen/box/sam/nullableSam.kt");
        }

        @Test
        @TestMetadata("partialSam.kt")
        public void testPartialSam() throws Exception {
            runTest("compiler/testData/codegen/box/sam/partialSam.kt");
        }

        @Test
        @TestMetadata("partialSamKT.kt")
        public void testPartialSamKT() throws Exception {
            runTest("compiler/testData/codegen/box/sam/partialSamKT.kt");
        }

        @Test
        @TestMetadata("passSubtypeOfFunctionSamConversion.kt")
        public void testPassSubtypeOfFunctionSamConversion() throws Exception {
            runTest("compiler/testData/codegen/box/sam/passSubtypeOfFunctionSamConversion.kt");
        }

        @Test
        @TestMetadata("predicateSamWrapper.kt")
        public void testPredicateSamWrapper() throws Exception {
            runTest("compiler/testData/codegen/box/sam/predicateSamWrapper.kt");
        }

        @Test
        @TestMetadata("receiverEvaluatedOnce.kt")
        public void testReceiverEvaluatedOnce() throws Exception {
            runTest("compiler/testData/codegen/box/sam/receiverEvaluatedOnce.kt");
        }

        @Test
        @TestMetadata("recordSubstitutedTypeForCallableSamParameter.kt")
        public void testRecordSubstitutedTypeForCallableSamParameter() throws Exception {
            runTest("compiler/testData/codegen/box/sam/recordSubstitutedTypeForCallableSamParameter.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/sam/constructors")
        @TestDataPath("$PROJECT_ROOT")
        public class Constructors extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInConstructors() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/constructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("comparator.kt")
            public void testComparator() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/comparator.kt");
            }

            @Test
            @TestMetadata("filenameFilter.kt")
            public void testFilenameFilter() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/filenameFilter.kt");
            }

            @Test
            @TestMetadata("kt16790.kt")
            public void testKt16790() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/kt16790.kt");
            }

            @Test
            @TestMetadata("kt19251.kt")
            public void testKt19251() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/kt19251.kt");
            }

            @Test
            @TestMetadata("kt19251_child.kt")
            public void testKt19251_child() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/kt19251_child.kt");
            }

            @Test
            @TestMetadata("nonLiteralComparator.kt")
            public void testNonLiteralComparator() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralComparator.kt");
            }

            @Test
            @TestMetadata("nonLiteralFilenameFilter.kt")
            public void testNonLiteralFilenameFilter() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralFilenameFilter.kt");
            }

            @Test
            @TestMetadata("nonLiteralRunnable.kt")
            public void testNonLiteralRunnable() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/nonLiteralRunnable.kt");
            }

            @Test
            @TestMetadata("nonTrivialRunnable.kt")
            public void testNonTrivialRunnable() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/nonTrivialRunnable.kt");
            }

            @Test
            @TestMetadata("runnable.kt")
            public void testRunnable() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/runnable.kt");
            }

            @Test
            @TestMetadata("runnableAccessingClosure1.kt")
            public void testRunnableAccessingClosure1() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/runnableAccessingClosure1.kt");
            }

            @Test
            @TestMetadata("runnableAccessingClosure2.kt")
            public void testRunnableAccessingClosure2() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/runnableAccessingClosure2.kt");
            }

            @Test
            @TestMetadata("samWrappersDifferentFiles.kt")
            public void testSamWrappersDifferentFiles() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/samWrappersDifferentFiles.kt");
            }

            @Test
            @TestMetadata("sameWrapperClass.kt")
            public void testSameWrapperClass() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/sameWrapperClass.kt");
            }

            @Test
            @TestMetadata("syntheticVsReal.kt")
            public void testSyntheticVsReal() throws Exception {
                runTest("compiler/testData/codegen/box/sam/constructors/syntheticVsReal.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/sam/equality")
        @TestDataPath("$PROJECT_ROOT")
        public class Equality extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEquality() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sam/equality"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("functionReferencesBound.kt")
            public void testFunctionReferencesBound() throws Exception {
                runTest("compiler/testData/codegen/box/sam/equality/functionReferencesBound.kt");
            }

            @Test
            @TestMetadata("functionReferencesUnbound.kt")
            public void testFunctionReferencesUnbound() throws Exception {
                runTest("compiler/testData/codegen/box/sam/equality/functionReferencesUnbound.kt");
            }

            @Test
            @TestMetadata("lambdaRuntimeConversion.kt")
            public void testLambdaRuntimeConversion() throws Exception {
                runTest("compiler/testData/codegen/box/sam/equality/lambdaRuntimeConversion.kt");
            }

            @Test
            @TestMetadata("localFunctionReferences.kt")
            public void testLocalFunctionReferences() throws Exception {
                runTest("compiler/testData/codegen/box/sam/equality/localFunctionReferences.kt");
            }

            @Test
            @TestMetadata("simpleLambdas.kt")
            public void testSimpleLambdas() throws Exception {
                runTest("compiler/testData/codegen/box/sam/equality/simpleLambdas.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/sealed")
    @TestDataPath("$PROJECT_ROOT")
    public class Sealed extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSealed() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/sealed"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("multipleFiles_enabled.kt")
        public void testMultipleFiles_enabled() throws Exception {
            runTest("compiler/testData/codegen/box/sealed/multipleFiles_enabled.kt");
        }

        @Test
        @TestMetadata("objects.kt")
        public void testObjects() throws Exception {
            runTest("compiler/testData/codegen/box/sealed/objects.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/sealed/simple.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/secondaryConstructors")
    @TestDataPath("$PROJECT_ROOT")
    public class SecondaryConstructors extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("accessToCompanion.kt")
        public void testAccessToCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/accessToCompanion.kt");
        }

        @Test
        @TestMetadata("accessToNestedObject.kt")
        public void testAccessToNestedObject() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/accessToNestedObject.kt");
        }

        @Test
        public void testAllFilesPresentInSecondaryConstructors() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/secondaryConstructors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("basicNoPrimaryManySinks.kt")
        public void testBasicNoPrimaryManySinks() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryManySinks.kt");
        }

        @Test
        @TestMetadata("basicNoPrimaryOneSink.kt")
        public void testBasicNoPrimaryOneSink() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/basicNoPrimaryOneSink.kt");
        }

        @Test
        @TestMetadata("basicPrimary.kt")
        public void testBasicPrimary() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/basicPrimary.kt");
        }

        @Test
        @TestMetadata("callFromLocalSubClass.kt")
        public void testCallFromLocalSubClass() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/callFromLocalSubClass.kt");
        }

        @Test
        @TestMetadata("callFromPrimaryWithNamedArgs.kt")
        public void testCallFromPrimaryWithNamedArgs() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithNamedArgs.kt");
        }

        @Test
        @TestMetadata("callFromPrimaryWithOptionalArgs.kt")
        public void testCallFromPrimaryWithOptionalArgs() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/callFromPrimaryWithOptionalArgs.kt");
        }

        @Test
        @TestMetadata("callFromSubClass.kt")
        public void testCallFromSubClass() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/callFromSubClass.kt");
        }

        @Test
        @TestMetadata("clashingDefaultConstructors.kt")
        public void testClashingDefaultConstructors() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/clashingDefaultConstructors.kt");
        }

        @Test
        @TestMetadata("dataClasses.kt")
        public void testDataClasses() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/dataClasses.kt");
        }

        @Test
        @TestMetadata("defaultArgs.kt")
        public void testDefaultArgs() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/defaultArgs.kt");
        }

        @Test
        @TestMetadata("defaultParametersNotDuplicated.kt")
        public void testDefaultParametersNotDuplicated() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/defaultParametersNotDuplicated.kt");
        }

        @Test
        @TestMetadata("delegateWithComplexExpression.kt")
        public void testDelegateWithComplexExpression() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/delegateWithComplexExpression.kt");
        }

        @Test
        @TestMetadata("delegatedThisWithLambda.kt")
        public void testDelegatedThisWithLambda() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/delegatedThisWithLambda.kt");
        }

        @Test
        @TestMetadata("delegationWithPrimary.kt")
        public void testDelegationWithPrimary() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/delegationWithPrimary.kt");
        }

        @Test
        @TestMetadata("enums.kt")
        public void testEnums() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/enums.kt");
        }

        @Test
        @TestMetadata("fieldInitializerOptimization.kt")
        public void testFieldInitializerOptimization() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/fieldInitializerOptimization.kt");
        }

        @Test
        @TestMetadata("fieldInitializerOptimization_inlineClass.kt")
        public void testFieldInitializerOptimization_inlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/fieldInitializerOptimization_inlineClass.kt");
        }

        @Test
        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/generics.kt");
        }

        @Test
        @TestMetadata("inlineIntoTwoConstructors.kt")
        public void testInlineIntoTwoConstructors() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/inlineIntoTwoConstructors.kt");
        }

        @Test
        @TestMetadata("innerClasses.kt")
        public void testInnerClasses() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/innerClasses.kt");
        }

        @Test
        @TestMetadata("innerClassesInheritance.kt")
        public void testInnerClassesInheritance() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/innerClassesInheritance.kt");
        }

        @Test
        @TestMetadata("localClasses.kt")
        public void testLocalClasses() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/localClasses.kt");
        }

        @Test
        @TestMetadata("superCallPrimary.kt")
        public void testSuperCallPrimary() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/superCallPrimary.kt");
        }

        @Test
        @TestMetadata("superCallSecondary.kt")
        public void testSuperCallSecondary() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/superCallSecondary.kt");
        }

        @Test
        @TestMetadata("varargs.kt")
        public void testVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/varargs.kt");
        }

        @Test
        @TestMetadata("withGenerics.kt")
        public void testWithGenerics() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withGenerics.kt");
        }

        @Test
        @TestMetadata("withNonLocalReturn.kt")
        public void testWithNonLocalReturn() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withNonLocalReturn.kt");
        }

        @Test
        @TestMetadata("withPrimary.kt")
        public void testWithPrimary() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withPrimary.kt");
        }

        @Test
        @TestMetadata("withReturn.kt")
        public void testWithReturn() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withReturn.kt");
        }

        @Test
        @TestMetadata("withReturnUnit.kt")
        public void testWithReturnUnit() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withReturnUnit.kt");
        }

        @Test
        @TestMetadata("withVarargs.kt")
        public void testWithVarargs() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withVarargs.kt");
        }

        @Test
        @TestMetadata("withoutPrimary.kt")
        public void testWithoutPrimary() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withoutPrimary.kt");
        }

        @Test
        @TestMetadata("withoutPrimarySimple.kt")
        public void testWithoutPrimarySimple() throws Exception {
            runTest("compiler/testData/codegen/box/secondaryConstructors/withoutPrimarySimple.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/signatureAnnotations")
    @TestDataPath("$PROJECT_ROOT")
    public class SignatureAnnotations extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSignatureAnnotations() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/signatureAnnotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("defaultAndNamedCombination.kt")
        public void testDefaultAndNamedCombination() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultAndNamedCombination.kt");
        }

        @Test
        @TestMetadata("defaultBoxTypes.kt")
        public void testDefaultBoxTypes() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultBoxTypes.kt");
        }

        @Test
        @TestMetadata("defaultEnumType.kt")
        public void testDefaultEnumType() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultEnumType.kt");
        }

        @Test
        @TestMetadata("defaultLongLiteral.kt")
        public void testDefaultLongLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultLongLiteral.kt");
        }

        @Test
        @TestMetadata("defaultMultipleParams.kt")
        public void testDefaultMultipleParams() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultMultipleParams.kt");
        }

        @Test
        @TestMetadata("defaultNull.kt")
        public void testDefaultNull() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultNull.kt");
        }

        @Test
        @TestMetadata("defaultNullableBoxTypes.kt")
        public void testDefaultNullableBoxTypes() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultNullableBoxTypes.kt");
        }

        @Test
        @TestMetadata("defaultOverrides.kt")
        public void testDefaultOverrides() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultOverrides.kt");
        }

        @Test
        @TestMetadata("defaultPrimitiveTypes.kt")
        public void testDefaultPrimitiveTypes() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultPrimitiveTypes.kt");
        }

        @Test
        @TestMetadata("defaultValueInConstructor.kt")
        public void testDefaultValueInConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultValueInConstructor.kt");
        }

        @Test
        @TestMetadata("defaultWithJavaBase.kt")
        public void testDefaultWithJavaBase() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultWithJavaBase.kt");
        }

        @Test
        @TestMetadata("defaultWithKotlinBase.kt")
        public void testDefaultWithKotlinBase() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/defaultWithKotlinBase.kt");
        }

        @Test
        @TestMetadata("reorderedParameterNames.kt")
        public void testReorderedParameterNames() throws Exception {
            runTest("compiler/testData/codegen/box/signatureAnnotations/reorderedParameterNames.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/smap")
    @TestDataPath("$PROJECT_ROOT")
    public class Smap extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSmap() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/smap"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("chainCalls.kt")
        public void testChainCalls() throws Exception {
            runTest("compiler/testData/codegen/box/smap/chainCalls.kt");
        }

        @Test
        @TestMetadata("infixCalls.kt")
        public void testInfixCalls() throws Exception {
            runTest("compiler/testData/codegen/box/smap/infixCalls.kt");
        }

        @Test
        @TestMetadata("simpleCallWithParams.kt")
        public void testSimpleCallWithParams() throws Exception {
            runTest("compiler/testData/codegen/box/smap/simpleCallWithParams.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class SmartCasts extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSmartCasts() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/smartCasts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("falseSmartCast.kt")
        public void testFalseSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/falseSmartCast.kt");
        }

        @Test
        @TestMetadata("genericIntersection.kt")
        public void testGenericIntersection() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/genericIntersection.kt");
        }

        @Test
        @TestMetadata("genericSet.kt")
        public void testGenericSet() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/genericSet.kt");
        }

        @Test
        @TestMetadata("implicitExtensionReceiver.kt")
        public void testImplicitExtensionReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/implicitExtensionReceiver.kt");
        }

        @Test
        @TestMetadata("implicitMemberReceiver.kt")
        public void testImplicitMemberReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/implicitMemberReceiver.kt");
        }

        @Test
        @TestMetadata("implicitReceiver.kt")
        public void testImplicitReceiver() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/implicitReceiver.kt");
        }

        @Test
        @TestMetadata("implicitReceiverInWhen.kt")
        public void testImplicitReceiverInWhen() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/implicitReceiverInWhen.kt");
        }

        @Test
        @TestMetadata("implicitToGrandSon.kt")
        public void testImplicitToGrandSon() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/implicitToGrandSon.kt");
        }

        @Test
        @TestMetadata("kt17725.kt")
        public void testKt17725() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/kt17725.kt");
        }

        @Test
        @TestMetadata("kt19058.kt")
        public void testKt19058() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/kt19058.kt");
        }

        @Test
        @TestMetadata("kt19100.kt")
        public void testKt19100() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/kt19100.kt");
        }

        @Test
        @TestMetadata("kt42517.kt")
        public void testKt42517() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/kt42517.kt");
        }

        @Test
        @TestMetadata("lambdaArgumentWithoutType.kt")
        public void testLambdaArgumentWithoutType() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/lambdaArgumentWithoutType.kt");
        }

        @Test
        @TestMetadata("multipleSmartCast.kt")
        public void testMultipleSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/multipleSmartCast.kt");
        }

        @Test
        @TestMetadata("nullSmartCast.kt")
        public void testNullSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/nullSmartCast.kt");
        }

        @Test
        @TestMetadata("smartCastInsideIf.kt")
        public void testSmartCastInsideIf() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/smartCastInsideIf.kt");
        }

        @Test
        @TestMetadata("whenSmartCast.kt")
        public void testWhenSmartCast() throws Exception {
            runTest("compiler/testData/codegen/box/smartCasts/whenSmartCast.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/specialBuiltins")
    @TestDataPath("$PROJECT_ROOT")
    public class SpecialBuiltins extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSpecialBuiltins() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/specialBuiltins"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("bridgeNotEmptyMap.kt")
        public void testBridgeNotEmptyMap() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/bridgeNotEmptyMap.kt");
        }

        @Test
        @TestMetadata("bridges.kt")
        public void testBridges() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/bridges.kt");
        }

        @Test
        @TestMetadata("collectionImpl.kt")
        public void testCollectionImpl() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/collectionImpl.kt");
        }

        @Test
        @TestMetadata("commonBridgesTarget.kt")
        public void testCommonBridgesTarget() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/commonBridgesTarget.kt");
        }

        @Test
        @TestMetadata("emptyList.kt")
        public void testEmptyList() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/emptyList.kt");
        }

        @Test
        @TestMetadata("emptyMap.kt")
        public void testEmptyMap() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/emptyMap.kt");
        }

        @Test
        @TestMetadata("emptyStringMap.kt")
        public void testEmptyStringMap() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/emptyStringMap.kt");
        }

        @Test
        @TestMetadata("entrySetSOE.kt")
        public void testEntrySetSOE() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/entrySetSOE.kt");
        }

        @Test
        @TestMetadata("enumAsOrdinaled.kt")
        public void testEnumAsOrdinaled() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/enumAsOrdinaled.kt");
        }

        @Test
        @TestMetadata("exceptionCause.kt")
        public void testExceptionCause() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/exceptionCause.kt");
        }

        @Test
        @TestMetadata("explicitSuperCall.kt")
        public void testExplicitSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/explicitSuperCall.kt");
        }

        @Test
        @TestMetadata("irrelevantRemoveAtOverride.kt")
        public void testIrrelevantRemoveAtOverride() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/irrelevantRemoveAtOverride.kt");
        }

        @Test
        @TestMetadata("mapGetOrDefault.kt")
        public void testMapGetOrDefault() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/mapGetOrDefault.kt");
        }

        @Test
        @TestMetadata("maps.kt")
        public void testMaps() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/maps.kt");
        }

        @Test
        @TestMetadata("noSpecialBridgeInSuperClass.kt")
        public void testNoSpecialBridgeInSuperClass() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/noSpecialBridgeInSuperClass.kt");
        }

        @Test
        @TestMetadata("notEmptyListAny.kt")
        public void testNotEmptyListAny() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyListAny.kt");
        }

        @Test
        @TestMetadata("notEmptyMap.kt")
        public void testNotEmptyMap() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/notEmptyMap.kt");
        }

        @Test
        @TestMetadata("redundantStubForSize.kt")
        public void testRedundantStubForSize() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/redundantStubForSize.kt");
        }

        @Test
        @TestMetadata("removeAtTwoSpecialBridges.kt")
        public void testRemoveAtTwoSpecialBridges() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/removeAtTwoSpecialBridges.kt");
        }

        @Test
        @TestMetadata("removeSetInt.kt")
        public void testRemoveSetInt() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/removeSetInt.kt");
        }

        @Test
        @TestMetadata("specialBridgeModality.kt")
        public void testSpecialBridgeModality() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/specialBridgeModality.kt");
        }

        @Test
        @TestMetadata("throwable.kt")
        public void testThrowable() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/throwable.kt");
        }

        @Test
        @TestMetadata("throwableCause.kt")
        public void testThrowableCause() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/throwableCause.kt");
        }

        @Test
        @TestMetadata("throwableComplex.kt")
        public void testThrowableComplex() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/throwableComplex.kt");
        }

        @Test
        @TestMetadata("throwableImpl.kt")
        public void testThrowableImpl() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/throwableImpl.kt");
        }

        @Test
        @TestMetadata("throwableImplWithSecondaryConstructor.kt")
        public void testThrowableImplWithSecondaryConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/throwableImplWithSecondaryConstructor.kt");
        }

        @Test
        @TestMetadata("valuesInsideEnum.kt")
        public void testValuesInsideEnum() throws Exception {
            runTest("compiler/testData/codegen/box/specialBuiltins/valuesInsideEnum.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/statics")
    @TestDataPath("$PROJECT_ROOT")
    public class Statics extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInStatics() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/statics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("anonymousInitializerIObject.kt")
        public void testAnonymousInitializerIObject() throws Exception {
            runTest("compiler/testData/codegen/box/statics/anonymousInitializerIObject.kt");
        }

        @Test
        @TestMetadata("anonymousInitializerInClassObject.kt")
        public void testAnonymousInitializerInClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/statics/anonymousInitializerInClassObject.kt");
        }

        @Test
        @TestMetadata("fields.kt")
        public void testFields() throws Exception {
            runTest("compiler/testData/codegen/box/statics/fields.kt");
        }

        @Test
        @TestMetadata("functions.kt")
        public void testFunctions() throws Exception {
            runTest("compiler/testData/codegen/box/statics/functions.kt");
        }

        @Test
        @TestMetadata("hidePrivateByPublic.kt")
        public void testHidePrivateByPublic() throws Exception {
            runTest("compiler/testData/codegen/box/statics/hidePrivateByPublic.kt");
        }

        @Test
        @TestMetadata("incInClassObject.kt")
        public void testIncInClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/statics/incInClassObject.kt");
        }

        @Test
        @TestMetadata("incInObject.kt")
        public void testIncInObject() throws Exception {
            runTest("compiler/testData/codegen/box/statics/incInObject.kt");
        }

        @Test
        @TestMetadata("inheritedPropertyInClassObject.kt")
        public void testInheritedPropertyInClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/statics/inheritedPropertyInClassObject.kt");
        }

        @Test
        @TestMetadata("inheritedPropertyInObject.kt")
        public void testInheritedPropertyInObject() throws Exception {
            runTest("compiler/testData/codegen/box/statics/inheritedPropertyInObject.kt");
        }

        @Test
        @TestMetadata("inlineCallsStaticMethod.kt")
        public void testInlineCallsStaticMethod() throws Exception {
            runTest("compiler/testData/codegen/box/statics/inlineCallsStaticMethod.kt");
        }

        @Test
        @TestMetadata("inlineCallsStaticMethodFromOtherPackage.kt")
        public void testInlineCallsStaticMethodFromOtherPackage() throws Exception {
            runTest("compiler/testData/codegen/box/statics/inlineCallsStaticMethodFromOtherPackage.kt");
        }

        @Test
        @TestMetadata("kt8089.kt")
        public void testKt8089() throws Exception {
            runTest("compiler/testData/codegen/box/statics/kt8089.kt");
        }

        @Test
        @TestMetadata("protectedSamConstructor.kt")
        public void testProtectedSamConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/statics/protectedSamConstructor.kt");
        }

        @Test
        @TestMetadata("protectedStatic.kt")
        public void testProtectedStatic() throws Exception {
            runTest("compiler/testData/codegen/box/statics/protectedStatic.kt");
        }

        @Test
        @TestMetadata("protectedStatic2.kt")
        public void testProtectedStatic2() throws Exception {
            runTest("compiler/testData/codegen/box/statics/protectedStatic2.kt");
        }

        @Test
        @TestMetadata("protectedStaticAndInline.kt")
        public void testProtectedStaticAndInline() throws Exception {
            runTest("compiler/testData/codegen/box/statics/protectedStaticAndInline.kt");
        }

        @Test
        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/statics/syntheticAccessor.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/storeStackBeforeInline")
    @TestDataPath("$PROJECT_ROOT")
    public class StoreStackBeforeInline extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInStoreStackBeforeInline() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/storeStackBeforeInline"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("differentTypes.kt")
        public void testDifferentTypes() throws Exception {
            runTest("compiler/testData/codegen/box/storeStackBeforeInline/differentTypes.kt");
        }

        @Test
        @TestMetadata("primitiveMerge.kt")
        public void testPrimitiveMerge() throws Exception {
            runTest("compiler/testData/codegen/box/storeStackBeforeInline/primitiveMerge.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/storeStackBeforeInline/simple.kt");
        }

        @Test
        @TestMetadata("unreachableMarker.kt")
        public void testUnreachableMarker() throws Exception {
            runTest("compiler/testData/codegen/box/storeStackBeforeInline/unreachableMarker.kt");
        }

        @Test
        @TestMetadata("withLambda.kt")
        public void testWithLambda() throws Exception {
            runTest("compiler/testData/codegen/box/storeStackBeforeInline/withLambda.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/strings")
    @TestDataPath("$PROJECT_ROOT")
    public class Strings extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInStrings() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/strings"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("constInStringTemplate.kt")
        public void testConstInStringTemplate() throws Exception {
            runTest("compiler/testData/codegen/box/strings/constInStringTemplate.kt");
        }

        @Test
        @TestMetadata("ea35743.kt")
        public void testEa35743() throws Exception {
            runTest("compiler/testData/codegen/box/strings/ea35743.kt");
        }

        @Test
        @TestMetadata("forInString.kt")
        public void testForInString() throws Exception {
            runTest("compiler/testData/codegen/box/strings/forInString.kt");
        }

        @Test
        @TestMetadata("interpolation.kt")
        public void testInterpolation() throws Exception {
            runTest("compiler/testData/codegen/box/strings/interpolation.kt");
        }

        @Test
        @TestMetadata("javaToStringNPE.kt")
        public void testJavaToStringNPE() throws Exception {
            runTest("compiler/testData/codegen/box/strings/javaToStringNPE.kt");
        }

        @Test
        @TestMetadata("kt13213.kt")
        public void testKt13213() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt13213.kt");
        }

        @Test
        @TestMetadata("kt13213a.kt")
        public void testKt13213a() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt13213a.kt");
        }

        @Test
        @TestMetadata("kt2592.kt")
        public void testKt2592() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt2592.kt");
        }

        @Test
        @TestMetadata("kt3571.kt")
        public void testKt3571() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt3571.kt");
        }

        @Test
        @TestMetadata("kt3652.kt")
        public void testKt3652() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt3652.kt");
        }

        @Test
        @TestMetadata("kt42457_old.kt")
        public void testKt42457_old() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt42457_old.kt");
        }

        @Test
        @TestMetadata("kt5389_stringBuilderGet.kt")
        public void testKt5389_stringBuilderGet() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt5389_stringBuilderGet.kt");
        }

        @Test
        @TestMetadata("kt5956.kt")
        public void testKt5956() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt5956.kt");
        }

        @Test
        @TestMetadata("kt881.kt")
        public void testKt881() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt881.kt");
        }

        @Test
        @TestMetadata("kt889.kt")
        public void testKt889() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt889.kt");
        }

        @Test
        @TestMetadata("kt894.kt")
        public void testKt894() throws Exception {
            runTest("compiler/testData/codegen/box/strings/kt894.kt");
        }

        @Test
        @TestMetadata("multilineStringsWithTemplates.kt")
        public void testMultilineStringsWithTemplates() throws Exception {
            runTest("compiler/testData/codegen/box/strings/multilineStringsWithTemplates.kt");
        }

        @Test
        @TestMetadata("nestedConcat.kt")
        public void testNestedConcat() throws Exception {
            runTest("compiler/testData/codegen/box/strings/nestedConcat.kt");
        }

        @Test
        @TestMetadata("rawStrings.kt")
        public void testRawStrings() throws Exception {
            runTest("compiler/testData/codegen/box/strings/rawStrings.kt");
        }

        @Test
        @TestMetadata("rawStringsWithManyQuotes.kt")
        public void testRawStringsWithManyQuotes() throws Exception {
            runTest("compiler/testData/codegen/box/strings/rawStringsWithManyQuotes.kt");
        }

        @Test
        @TestMetadata("simpleStringPlus.kt")
        public void testSimpleStringPlus() throws Exception {
            runTest("compiler/testData/codegen/box/strings/simpleStringPlus.kt");
        }

        @Test
        @TestMetadata("singleConcatNullable.kt")
        public void testSingleConcatNullable() throws Exception {
            runTest("compiler/testData/codegen/box/strings/singleConcatNullable.kt");
        }

        @Test
        @TestMetadata("stringBuilderAppend.kt")
        public void testStringBuilderAppend() throws Exception {
            runTest("compiler/testData/codegen/box/strings/stringBuilderAppend.kt");
        }

        @Test
        @TestMetadata("stringFromJavaPlus.kt")
        public void testStringFromJavaPlus() throws Exception {
            runTest("compiler/testData/codegen/box/strings/stringFromJavaPlus.kt");
        }

        @Test
        @TestMetadata("stringPlusOnlyWorksOnString.kt")
        public void testStringPlusOnlyWorksOnString() throws Exception {
            runTest("compiler/testData/codegen/box/strings/stringPlusOnlyWorksOnString.kt");
        }

        @Test
        @TestMetadata("stringPlusOverride.kt")
        public void testStringPlusOverride() throws Exception {
            runTest("compiler/testData/codegen/box/strings/stringPlusOverride.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/super")
    @TestDataPath("$PROJECT_ROOT")
    public class Super extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSuper() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/super"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("basicmethodSuperClass.kt")
        public void testBasicmethodSuperClass() throws Exception {
            runTest("compiler/testData/codegen/box/super/basicmethodSuperClass.kt");
        }

        @Test
        @TestMetadata("basicmethodSuperTrait.kt")
        public void testBasicmethodSuperTrait() throws Exception {
            runTest("compiler/testData/codegen/box/super/basicmethodSuperTrait.kt");
        }

        @Test
        @TestMetadata("basicproperty.kt")
        public void testBasicproperty() throws Exception {
            runTest("compiler/testData/codegen/box/super/basicproperty.kt");
        }

        @Test
        @TestMetadata("enclosedFun.kt")
        public void testEnclosedFun() throws Exception {
            runTest("compiler/testData/codegen/box/super/enclosedFun.kt");
        }

        @Test
        @TestMetadata("enclosedVar.kt")
        public void testEnclosedVar() throws Exception {
            runTest("compiler/testData/codegen/box/super/enclosedVar.kt");
        }

        @Test
        @TestMetadata("innerClassLabeledSuper.kt")
        public void testInnerClassLabeledSuper() throws Exception {
            runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper.kt");
        }

        @Test
        @TestMetadata("innerClassLabeledSuper2.kt")
        public void testInnerClassLabeledSuper2() throws Exception {
            runTest("compiler/testData/codegen/box/super/innerClassLabeledSuper2.kt");
        }

        @Test
        @TestMetadata("innerClassLabeledSuperProperty.kt")
        public void testInnerClassLabeledSuperProperty() throws Exception {
            runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty.kt");
        }

        @Test
        @TestMetadata("innerClassLabeledSuperProperty2.kt")
        public void testInnerClassLabeledSuperProperty2() throws Exception {
            runTest("compiler/testData/codegen/box/super/innerClassLabeledSuperProperty2.kt");
        }

        @Test
        @TestMetadata("innerClassQualifiedFunctionCall.kt")
        public void testInnerClassQualifiedFunctionCall() throws Exception {
            runTest("compiler/testData/codegen/box/super/innerClassQualifiedFunctionCall.kt");
        }

        @Test
        @TestMetadata("innerClassQualifiedPropertyAccess.kt")
        public void testInnerClassQualifiedPropertyAccess() throws Exception {
            runTest("compiler/testData/codegen/box/super/innerClassQualifiedPropertyAccess.kt");
        }

        @Test
        @TestMetadata("interfaceHashCode.kt")
        public void testInterfaceHashCode() throws Exception {
            runTest("compiler/testData/codegen/box/super/interfaceHashCode.kt");
        }

        @Test
        @TestMetadata("kt14243.kt")
        public void testKt14243() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt14243.kt");
        }

        @Test
        @TestMetadata("kt14243_2.kt")
        public void testKt14243_2() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt14243_2.kt");
        }

        @Test
        @TestMetadata("kt14243_class.kt")
        public void testKt14243_class() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt14243_class.kt");
        }

        @Test
        @TestMetadata("kt14243_prop.kt")
        public void testKt14243_prop() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt14243_prop.kt");
        }

        @Test
        @TestMetadata("kt3492ClassFun.kt")
        public void testKt3492ClassFun() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt3492ClassFun.kt");
        }

        @Test
        @TestMetadata("kt3492ClassProperty.kt")
        public void testKt3492ClassProperty() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt3492ClassProperty.kt");
        }

        @Test
        @TestMetadata("kt3492TraitFun.kt")
        public void testKt3492TraitFun() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt3492TraitFun.kt");
        }

        @Test
        @TestMetadata("kt3492TraitProperty.kt")
        public void testKt3492TraitProperty() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt3492TraitProperty.kt");
        }

        @Test
        @TestMetadata("kt4173.kt")
        public void testKt4173() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt4173.kt");
        }

        @Test
        @TestMetadata("kt4173_2.kt")
        public void testKt4173_2() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt4173_2.kt");
        }

        @Test
        @TestMetadata("kt4173_3.kt")
        public void testKt4173_3() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt4173_3.kt");
        }

        @Test
        @TestMetadata("kt4982.kt")
        public void testKt4982() throws Exception {
            runTest("compiler/testData/codegen/box/super/kt4982.kt");
        }

        @Test
        @TestMetadata("multipleSuperTraits.kt")
        public void testMultipleSuperTraits() throws Exception {
            runTest("compiler/testData/codegen/box/super/multipleSuperTraits.kt");
        }

        @Test
        @TestMetadata("superCallToNonGenericImplThroughGenericDefaultImpls.kt")
        public void testSuperCallToNonGenericImplThroughGenericDefaultImpls() throws Exception {
            runTest("compiler/testData/codegen/box/super/superCallToNonGenericImplThroughGenericDefaultImpls.kt");
        }

        @Test
        @TestMetadata("traitproperty.kt")
        public void testTraitproperty() throws Exception {
            runTest("compiler/testData/codegen/box/super/traitproperty.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuper.kt")
        public void testUnqualifiedSuper() throws Exception {
            runTest("compiler/testData/codegen/box/super/unqualifiedSuper.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithDeeperHierarchies.kt")
        public void testUnqualifiedSuperWithDeeperHierarchies() throws Exception {
            runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithDeeperHierarchies.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithMethodsOfAny.kt")
        public void testUnqualifiedSuperWithMethodsOfAny() throws Exception {
            runTest("compiler/testData/codegen/box/super/unqualifiedSuperWithMethodsOfAny.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/super/superConstructor")
        @TestDataPath("$PROJECT_ROOT")
        public class SuperConstructor extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInSuperConstructor() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/super/superConstructor"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("kt13846.kt")
            public void testKt13846() throws Exception {
                runTest("compiler/testData/codegen/box/super/superConstructor/kt13846.kt");
            }

            @Test
            @TestMetadata("kt17464_arrayOf.kt")
            public void testKt17464_arrayOf() throws Exception {
                runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_arrayOf.kt");
            }

            @Test
            @TestMetadata("kt17464_linkedMapOf.kt")
            public void testKt17464_linkedMapOf() throws Exception {
                runTest("compiler/testData/codegen/box/super/superConstructor/kt17464_linkedMapOf.kt");
            }

            @Test
            @TestMetadata("kt18356.kt")
            public void testKt18356() throws Exception {
                runTest("compiler/testData/codegen/box/super/superConstructor/kt18356.kt");
            }

            @Test
            @TestMetadata("kt18356_2.kt")
            public void testKt18356_2() throws Exception {
                runTest("compiler/testData/codegen/box/super/superConstructor/kt18356_2.kt");
            }

            @Test
            @TestMetadata("objectExtendsInner.kt")
            public void testObjectExtendsInner() throws Exception {
                runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsInner.kt");
            }

            @Test
            @TestMetadata("objectExtendsLocalInner.kt")
            public void testObjectExtendsLocalInner() throws Exception {
                runTest("compiler/testData/codegen/box/super/superConstructor/objectExtendsLocalInner.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/synchronized")
    @TestDataPath("$PROJECT_ROOT")
    public class Synchronized extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInSynchronized() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/synchronized"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("changeMonitor.kt")
        public void testChangeMonitor() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/changeMonitor.kt");
        }

        @Test
        @TestMetadata("exceptionInMonitorExpression.kt")
        public void testExceptionInMonitorExpression() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/exceptionInMonitorExpression.kt");
        }

        @Test
        @TestMetadata("finally.kt")
        public void testFinally() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/finally.kt");
        }

        @Test
        @TestMetadata("longValue.kt")
        public void testLongValue() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/longValue.kt");
        }

        @Test
        @TestMetadata("nestedDifferentObjects.kt")
        public void testNestedDifferentObjects() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/nestedDifferentObjects.kt");
        }

        @Test
        @TestMetadata("nestedSameObject.kt")
        public void testNestedSameObject() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/nestedSameObject.kt");
        }

        @Test
        @TestMetadata("nonLocalReturn.kt")
        public void testNonLocalReturn() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/nonLocalReturn.kt");
        }

        @Test
        @TestMetadata("objectValue.kt")
        public void testObjectValue() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/objectValue.kt");
        }

        @Test
        @TestMetadata("sync.kt")
        public void testSync() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/sync.kt");
        }

        @Test
        @TestMetadata("value.kt")
        public void testValue() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/value.kt");
        }

        @Test
        @TestMetadata("wait.kt")
        public void testWait() throws Exception {
            runTest("compiler/testData/codegen/box/synchronized/wait.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/syntheticAccessors")
    @TestDataPath("$PROJECT_ROOT")
    public class SyntheticAccessors extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("accessorForAbstractProtected.kt")
        public void testAccessorForAbstractProtected() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForAbstractProtected.kt");
        }

        @Test
        @TestMetadata("accessorForGenericConstructor.kt")
        public void testAccessorForGenericConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericConstructor.kt");
        }

        @Test
        @TestMetadata("accessorForGenericMethod.kt")
        public void testAccessorForGenericMethod() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethod.kt");
        }

        @Test
        @TestMetadata("accessorForGenericMethodWithDefaults.kt")
        public void testAccessorForGenericMethodWithDefaults() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForGenericMethodWithDefaults.kt");
        }

        @Test
        @TestMetadata("accessorForProtected.kt")
        public void testAccessorForProtected() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtected.kt");
        }

        @Test
        @TestMetadata("accessorForProtectedInvokeVirtual.kt")
        public void testAccessorForProtectedInvokeVirtual() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/accessorForProtectedInvokeVirtual.kt");
        }

        @Test
        public void testAllFilesPresentInSyntheticAccessors() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/syntheticAccessors"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("inline.kt")
        public void testInline() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/inline.kt");
        }

        @Test
        @TestMetadata("inlineInOtherClass.kt")
        public void testInlineInOtherClass() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/inlineInOtherClass.kt");
        }

        @Test
        @TestMetadata("jvmField.kt")
        public void testJvmField() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/jvmField.kt");
        }

        @Test
        @TestMetadata("jvmNameForAccessors.kt")
        public void testJvmNameForAccessors() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/jvmNameForAccessors.kt");
        }

        @Test
        @TestMetadata("kt10047.kt")
        public void testKt10047() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/kt10047.kt");
        }

        @Test
        @TestMetadata("kt21258_indirect.kt")
        public void testKt21258_indirect() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_indirect.kt");
        }

        @Test
        @TestMetadata("kt21258_simple.kt")
        public void testKt21258_simple() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/kt21258_simple.kt");
        }

        @Test
        @TestMetadata("kt9717.kt")
        public void testKt9717() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717.kt");
        }

        @Test
        @TestMetadata("kt9717DifferentPackages.kt")
        public void testKt9717DifferentPackages() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/kt9717DifferentPackages.kt");
        }

        @Test
        @TestMetadata("kt9958.kt")
        public void testKt9958() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958.kt");
        }

        @Test
        @TestMetadata("kt9958Interface.kt")
        public void testKt9958Interface() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/kt9958Interface.kt");
        }

        @Test
        @TestMetadata("protectedFromLambda.kt")
        public void testProtectedFromLambda() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/protectedFromLambda.kt");
        }

        @Test
        @TestMetadata("superCallFromMultipleSubclasses.kt")
        public void testSuperCallFromMultipleSubclasses() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/superCallFromMultipleSubclasses.kt");
        }

        @Test
        @TestMetadata("syntheticAccessorNames.kt")
        public void testSyntheticAccessorNames() throws Exception {
            runTest("compiler/testData/codegen/box/syntheticAccessors/syntheticAccessorNames.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/throws")
    @TestDataPath("$PROJECT_ROOT")
    public class Throws extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInThrows() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/throws"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("delegationAndThrows.kt")
        public void testDelegationAndThrows() throws Exception {
            runTest("compiler/testData/codegen/box/throws/delegationAndThrows.kt");
        }

        @Test
        @TestMetadata("delegationAndThrows_1_3.kt")
        public void testDelegationAndThrows_1_3() throws Exception {
            runTest("compiler/testData/codegen/box/throws/delegationAndThrows_1_3.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/toArray")
    @TestDataPath("$PROJECT_ROOT")
    public class ToArray extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInToArray() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/toArray"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("incorrectToArrayDetection.kt")
        public void testIncorrectToArrayDetection() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/incorrectToArrayDetection.kt");
        }

        @Test
        @TestMetadata("kt3177-toTypedArray.kt")
        public void testKt3177_toTypedArray() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/kt3177-toTypedArray.kt");
        }

        @Test
        @TestMetadata("returnToTypedArray.kt")
        public void testReturnToTypedArray() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/returnToTypedArray.kt");
        }

        @Test
        @TestMetadata("toArray.kt")
        public void testToArray() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/toArray.kt");
        }

        @Test
        @TestMetadata("toArrayAlreadyPresent.kt")
        public void testToArrayAlreadyPresent() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/toArrayAlreadyPresent.kt");
        }

        @Test
        @TestMetadata("toArrayFromJava.kt")
        public void testToArrayFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/toArrayFromJava.kt");
        }

        @Test
        @TestMetadata("toArrayShouldBePublic.kt")
        public void testToArrayShouldBePublic() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/toArrayShouldBePublic.kt");
        }

        @Test
        @TestMetadata("toArrayShouldBePublicWithJava.kt")
        public void testToArrayShouldBePublicWithJava() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/toArrayShouldBePublicWithJava.kt");
        }

        @Test
        @TestMetadata("toTypedArray.kt")
        public void testToTypedArray() throws Exception {
            runTest("compiler/testData/codegen/box/toArray/toTypedArray.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/topLevelPrivate")
    @TestDataPath("$PROJECT_ROOT")
    public class TopLevelPrivate extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInTopLevelPrivate() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/topLevelPrivate"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("noPrivateNoAccessorsInMultiFileFacade.kt")
        public void testNoPrivateNoAccessorsInMultiFileFacade() throws Exception {
            runTest("compiler/testData/codegen/box/topLevelPrivate/noPrivateNoAccessorsInMultiFileFacade.kt");
        }

        @Test
        @TestMetadata("noPrivateNoAccessorsInMultiFileFacade2.kt")
        public void testNoPrivateNoAccessorsInMultiFileFacade2() throws Exception {
            runTest("compiler/testData/codegen/box/topLevelPrivate/noPrivateNoAccessorsInMultiFileFacade2.kt");
        }

        @Test
        @TestMetadata("privateInInlineNested.kt")
        public void testPrivateInInlineNested() throws Exception {
            runTest("compiler/testData/codegen/box/topLevelPrivate/privateInInlineNested.kt");
        }

        @Test
        @TestMetadata("privateVisibility.kt")
        public void testPrivateVisibility() throws Exception {
            runTest("compiler/testData/codegen/box/topLevelPrivate/privateVisibility.kt");
        }

        @Test
        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/topLevelPrivate/syntheticAccessor.kt");
        }

        @Test
        @TestMetadata("syntheticAccessorInMultiFile.kt")
        public void testSyntheticAccessorInMultiFile() throws Exception {
            runTest("compiler/testData/codegen/box/topLevelPrivate/syntheticAccessorInMultiFile.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/trailingComma")
    @TestDataPath("$PROJECT_ROOT")
    public class TrailingComma extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInTrailingComma() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/trailingComma"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("noDisambiguation.kt")
        public void testNoDisambiguation() throws Exception {
            runTest("compiler/testData/codegen/box/trailingComma/noDisambiguation.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/traits")
    @TestDataPath("$PROJECT_ROOT")
    public class Traits extends AbstractBlackBoxCodegenTest {
        @Test
        @TestMetadata("abstractClassInheritsFromInterface.kt")
        public void testAbstractClassInheritsFromInterface() throws Exception {
            runTest("compiler/testData/codegen/box/traits/abstractClassInheritsFromInterface.kt");
        }

        @Test
        @TestMetadata("abstractClassWithFakeOverride.kt")
        public void testAbstractClassWithFakeOverride() throws Exception {
            runTest("compiler/testData/codegen/box/traits/abstractClassWithFakeOverride.kt");
        }

        @Test
        public void testAllFilesPresentInTraits() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/traits"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("defaultImplCall.kt")
        public void testDefaultImplCall() throws Exception {
            runTest("compiler/testData/codegen/box/traits/defaultImplCall.kt");
        }

        @Test
        @TestMetadata("diamondPropertyAccessors.kt")
        public void testDiamondPropertyAccessors() throws Exception {
            runTest("compiler/testData/codegen/box/traits/diamondPropertyAccessors.kt");
        }

        @Test
        @TestMetadata("doubleDiamond.kt")
        public void testDoubleDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/traits/doubleDiamond.kt");
        }

        @Test
        @TestMetadata("doubleGenericDiamond.kt")
        public void testDoubleGenericDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/traits/doubleGenericDiamond.kt");
        }

        @Test
        @TestMetadata("genericMethod.kt")
        public void testGenericMethod() throws Exception {
            runTest("compiler/testData/codegen/box/traits/genericMethod.kt");
        }

        @Test
        @TestMetadata("indirectlyInheritPropertyGetter.kt")
        public void testIndirectlyInheritPropertyGetter() throws Exception {
            runTest("compiler/testData/codegen/box/traits/indirectlyInheritPropertyGetter.kt");
        }

        @Test
        @TestMetadata("inheritJavaInterface.kt")
        public void testInheritJavaInterface() throws Exception {
            runTest("compiler/testData/codegen/box/traits/inheritJavaInterface.kt");
        }

        @Test
        @TestMetadata("inheritedFun.kt")
        public void testInheritedFun() throws Exception {
            runTest("compiler/testData/codegen/box/traits/inheritedFun.kt");
        }

        @Test
        @TestMetadata("inheritedVar.kt")
        public void testInheritedVar() throws Exception {
            runTest("compiler/testData/codegen/box/traits/inheritedVar.kt");
        }

        @Test
        @TestMetadata("interfaceDefaultImpls.kt")
        public void testInterfaceDefaultImpls() throws Exception {
            runTest("compiler/testData/codegen/box/traits/interfaceDefaultImpls.kt");
        }

        @Test
        @TestMetadata("interfaceWithNonAbstractFunIndirect.kt")
        public void testInterfaceWithNonAbstractFunIndirect() throws Exception {
            runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirect.kt");
        }

        @Test
        @TestMetadata("interfaceWithNonAbstractFunIndirectGeneric.kt")
        public void testInterfaceWithNonAbstractFunIndirectGeneric() throws Exception {
            runTest("compiler/testData/codegen/box/traits/interfaceWithNonAbstractFunIndirectGeneric.kt");
        }

        @Test
        @TestMetadata("kt1936.kt")
        public void testKt1936() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt1936.kt");
        }

        @Test
        @TestMetadata("kt1936_1.kt")
        public void testKt1936_1() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt1936_1.kt");
        }

        @Test
        @TestMetadata("kt2260.kt")
        public void testKt2260() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt2260.kt");
        }

        @Test
        @TestMetadata("kt2399.kt")
        public void testKt2399() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt2399.kt");
        }

        @Test
        @TestMetadata("kt2541.kt")
        public void testKt2541() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt2541.kt");
        }

        @Test
        @TestMetadata("kt3315.kt")
        public void testKt3315() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt3315.kt");
        }

        @Test
        @TestMetadata("kt3500.kt")
        public void testKt3500() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt3500.kt");
        }

        @Test
        @TestMetadata("kt3579.kt")
        public void testKt3579() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt3579.kt");
        }

        @Test
        @TestMetadata("kt3579_2.kt")
        public void testKt3579_2() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt3579_2.kt");
        }

        @Test
        @TestMetadata("kt36973.kt")
        public void testKt36973() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt36973.kt");
        }

        @Test
        @TestMetadata("kt5393.kt")
        public void testKt5393() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt5393.kt");
        }

        @Test
        @TestMetadata("kt5393_property.kt")
        public void testKt5393_property() throws Exception {
            runTest("compiler/testData/codegen/box/traits/kt5393_property.kt");
        }

        @Test
        @TestMetadata("multiple.kt")
        public void testMultiple() throws Exception {
            runTest("compiler/testData/codegen/box/traits/multiple.kt");
        }

        @Test
        @TestMetadata("multipleImplFromJava.kt")
        public void testMultipleImplFromJava() throws Exception {
            runTest("compiler/testData/codegen/box/traits/multipleImplFromJava.kt");
        }

        @Test
        @TestMetadata("noPrivateDelegation.kt")
        public void testNoPrivateDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/traits/noPrivateDelegation.kt");
        }

        @Test
        @TestMetadata("privateInterfaceMethod.kt")
        public void testPrivateInterfaceMethod() throws Exception {
            runTest("compiler/testData/codegen/box/traits/privateInterfaceMethod.kt");
        }

        @Test
        @TestMetadata("receiverOfIntersectionType.kt")
        public void testReceiverOfIntersectionType() throws Exception {
            runTest("compiler/testData/codegen/box/traits/receiverOfIntersectionType.kt");
        }

        @Test
        @TestMetadata("syntheticAccessor.kt")
        public void testSyntheticAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/traits/syntheticAccessor.kt");
        }

        @Test
        @TestMetadata("traitImplDelegationWithCovariantOverride.kt")
        public void testTraitImplDelegationWithCovariantOverride() throws Exception {
            runTest("compiler/testData/codegen/box/traits/traitImplDelegationWithCovariantOverride.kt");
        }

        @Test
        @TestMetadata("traitImplDiamond.kt")
        public void testTraitImplDiamond() throws Exception {
            runTest("compiler/testData/codegen/box/traits/traitImplDiamond.kt");
        }

        @Test
        @TestMetadata("traitImplGenericDelegation.kt")
        public void testTraitImplGenericDelegation() throws Exception {
            runTest("compiler/testData/codegen/box/traits/traitImplGenericDelegation.kt");
        }

        @Test
        @TestMetadata("traitWithPrivateExtension.kt")
        public void testTraitWithPrivateExtension() throws Exception {
            runTest("compiler/testData/codegen/box/traits/traitWithPrivateExtension.kt");
        }

        @Test
        @TestMetadata("traitWithPrivateMember.kt")
        public void testTraitWithPrivateMember() throws Exception {
            runTest("compiler/testData/codegen/box/traits/traitWithPrivateMember.kt");
        }

        @Test
        @TestMetadata("traitWithPrivateMemberAccessFromLambda.kt")
        public void testTraitWithPrivateMemberAccessFromLambda() throws Exception {
            runTest("compiler/testData/codegen/box/traits/traitWithPrivateMemberAccessFromLambda.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/typeInfo")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeInfo extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInTypeInfo() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typeInfo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("asInLoop.kt")
        public void testAsInLoop() throws Exception {
            runTest("compiler/testData/codegen/box/typeInfo/asInLoop.kt");
        }

        @Test
        @TestMetadata("ifOrWhenSpecialCall.kt")
        public void testIfOrWhenSpecialCall() throws Exception {
            runTest("compiler/testData/codegen/box/typeInfo/ifOrWhenSpecialCall.kt");
        }

        @Test
        @TestMetadata("implicitSmartCastThis.kt")
        public void testImplicitSmartCastThis() throws Exception {
            runTest("compiler/testData/codegen/box/typeInfo/implicitSmartCastThis.kt");
        }

        @Test
        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            runTest("compiler/testData/codegen/box/typeInfo/inheritance.kt");
        }

        @Test
        @TestMetadata("kt2811.kt")
        public void testKt2811() throws Exception {
            runTest("compiler/testData/codegen/box/typeInfo/kt2811.kt");
        }

        @Test
        @TestMetadata("primitiveTypeInfo.kt")
        public void testPrimitiveTypeInfo() throws Exception {
            runTest("compiler/testData/codegen/box/typeInfo/primitiveTypeInfo.kt");
        }

        @Test
        @TestMetadata("smartCastThis.kt")
        public void testSmartCastThis() throws Exception {
            runTest("compiler/testData/codegen/box/typeInfo/smartCastThis.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/typeMapping")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeMapping extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInTypeMapping() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typeMapping"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("enhancedPrimitiveInReturnType.kt")
        public void testEnhancedPrimitiveInReturnType() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/enhancedPrimitiveInReturnType.kt");
        }

        @Test
        @TestMetadata("enhancedPrimitives.kt")
        public void testEnhancedPrimitives() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/enhancedPrimitives.kt");
        }

        @Test
        @TestMetadata("genericTypeWithNothing.kt")
        public void testGenericTypeWithNothing() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/genericTypeWithNothing.kt");
        }

        @Test
        @TestMetadata("kt2831.kt")
        public void testKt2831() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/kt2831.kt");
        }

        @Test
        @TestMetadata("kt309.kt")
        public void testKt309() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/kt309.kt");
        }

        @Test
        @TestMetadata("kt3286.kt")
        public void testKt3286() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/kt3286.kt");
        }

        @Test
        @TestMetadata("kt3863.kt")
        public void testKt3863() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/kt3863.kt");
        }

        @Test
        @TestMetadata("kt3976.kt")
        public void testKt3976() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/kt3976.kt");
        }

        @Test
        @TestMetadata("nothing.kt")
        public void testNothing() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/nothing.kt");
        }

        @Test
        @TestMetadata("nullNothing.kt")
        public void testNullNothing() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/nullNothing.kt");
        }

        @Test
        @TestMetadata("nullableNothing.kt")
        public void testNullableNothing() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/nullableNothing.kt");
        }

        @Test
        @TestMetadata("typeParameterMultipleBounds.kt")
        public void testTypeParameterMultipleBounds() throws Exception {
            runTest("compiler/testData/codegen/box/typeMapping/typeParameterMultipleBounds.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInTypealias() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/typealias"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("enumEntryQualifier.kt")
        public void testEnumEntryQualifier() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/enumEntryQualifier.kt");
        }

        @Test
        @TestMetadata("genericTypeAliasConstructor.kt")
        public void testGenericTypeAliasConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor.kt");
        }

        @Test
        @TestMetadata("genericTypeAliasConstructor2.kt")
        public void testGenericTypeAliasConstructor2() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/genericTypeAliasConstructor2.kt");
        }

        @Test
        @TestMetadata("innerClassTypeAliasConstructor.kt")
        public void testInnerClassTypeAliasConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructor.kt");
        }

        @Test
        @TestMetadata("innerClassTypeAliasConstructorInSupertypes.kt")
        public void testInnerClassTypeAliasConstructorInSupertypes() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/innerClassTypeAliasConstructorInSupertypes.kt");
        }

        @Test
        @TestMetadata("kt15109.kt")
        public void testKt15109() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/kt15109.kt");
        }

        @Test
        @TestMetadata("objectLiteralConstructor.kt")
        public void testObjectLiteralConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/objectLiteralConstructor.kt");
        }

        @Test
        @TestMetadata("privateInKlib.kt")
        public void testPrivateInKlib() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/privateInKlib.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/simple.kt");
        }

        @Test
        @TestMetadata("typeAliasAsBareType.kt")
        public void testTypeAliasAsBareType() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasAsBareType.kt");
        }

        @Test
        @TestMetadata("typeAliasCompanion.kt")
        public void testTypeAliasCompanion() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasCompanion.kt");
        }

        @Test
        @TestMetadata("typeAliasConstructor.kt")
        public void testTypeAliasConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasConstructor.kt");
        }

        @Test
        @TestMetadata("typeAliasConstructorAccessor.kt")
        public void testTypeAliasConstructorAccessor() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorAccessor.kt");
        }

        @Test
        @TestMetadata("typeAliasConstructorForArray.kt")
        public void testTypeAliasConstructorForArray() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorForArray.kt");
        }

        @Test
        @TestMetadata("typeAliasConstructorInSuperCall.kt")
        public void testTypeAliasConstructorInSuperCall() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasConstructorInSuperCall.kt");
        }

        @Test
        @TestMetadata("typeAliasInAnonymousObjectType.kt")
        public void testTypeAliasInAnonymousObjectType() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasInAnonymousObjectType.kt");
        }

        @Test
        @TestMetadata("typeAliasObject.kt")
        public void testTypeAliasObject() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasObject.kt");
        }

        @Test
        @TestMetadata("typeAliasObjectCallable.kt")
        public void testTypeAliasObjectCallable() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasObjectCallable.kt");
        }

        @Test
        @TestMetadata("typeAliasSecondaryConstructor.kt")
        public void testTypeAliasSecondaryConstructor() throws Exception {
            runTest("compiler/testData/codegen/box/typealias/typeAliasSecondaryConstructor.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/unaryOp")
    @TestDataPath("$PROJECT_ROOT")
    public class UnaryOp extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInUnaryOp() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unaryOp"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("call.kt")
        public void testCall() throws Exception {
            runTest("compiler/testData/codegen/box/unaryOp/call.kt");
        }

        @Test
        @TestMetadata("callNullable.kt")
        public void testCallNullable() throws Exception {
            runTest("compiler/testData/codegen/box/unaryOp/callNullable.kt");
        }

        @Test
        @TestMetadata("callWithCommonType.kt")
        public void testCallWithCommonType() throws Exception {
            runTest("compiler/testData/codegen/box/unaryOp/callWithCommonType.kt");
        }

        @Test
        @TestMetadata("intrinsic.kt")
        public void testIntrinsic() throws Exception {
            runTest("compiler/testData/codegen/box/unaryOp/intrinsic.kt");
        }

        @Test
        @TestMetadata("intrinsicNullable.kt")
        public void testIntrinsicNullable() throws Exception {
            runTest("compiler/testData/codegen/box/unaryOp/intrinsicNullable.kt");
        }

        @Test
        @TestMetadata("longOverflow.kt")
        public void testLongOverflow() throws Exception {
            runTest("compiler/testData/codegen/box/unaryOp/longOverflow.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/unit")
    @TestDataPath("$PROJECT_ROOT")
    public class Unit extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInUnit() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("closureReturnsNullableUnit.kt")
        public void testClosureReturnsNullableUnit() throws Exception {
            runTest("compiler/testData/codegen/box/unit/closureReturnsNullableUnit.kt");
        }

        @Test
        @TestMetadata("ifElse.kt")
        public void testIfElse() throws Exception {
            runTest("compiler/testData/codegen/box/unit/ifElse.kt");
        }

        @Test
        @TestMetadata("kt3634.kt")
        public void testKt3634() throws Exception {
            runTest("compiler/testData/codegen/box/unit/kt3634.kt");
        }

        @Test
        @TestMetadata("kt4212.kt")
        public void testKt4212() throws Exception {
            runTest("compiler/testData/codegen/box/unit/kt4212.kt");
        }

        @Test
        @TestMetadata("kt4265.kt")
        public void testKt4265() throws Exception {
            runTest("compiler/testData/codegen/box/unit/kt4265.kt");
        }

        @Test
        @TestMetadata("nullableUnit.kt")
        public void testNullableUnit() throws Exception {
            runTest("compiler/testData/codegen/box/unit/nullableUnit.kt");
        }

        @Test
        @TestMetadata("nullableUnitInWhen1.kt")
        public void testNullableUnitInWhen1() throws Exception {
            runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen1.kt");
        }

        @Test
        @TestMetadata("nullableUnitInWhen2.kt")
        public void testNullableUnitInWhen2() throws Exception {
            runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen2.kt");
        }

        @Test
        @TestMetadata("nullableUnitInWhen3.kt")
        public void testNullableUnitInWhen3() throws Exception {
            runTest("compiler/testData/codegen/box/unit/nullableUnitInWhen3.kt");
        }

        @Test
        @TestMetadata("unitClassObject.kt")
        public void testUnitClassObject() throws Exception {
            runTest("compiler/testData/codegen/box/unit/unitClassObject.kt");
        }

        @Test
        @TestMetadata("UnitValue.kt")
        public void testUnitValue() throws Exception {
            runTest("compiler/testData/codegen/box/unit/UnitValue.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/unsignedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class UnsignedTypes extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInUnsignedTypes() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unsignedTypes"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("boxConstValOfUnsignedType.kt")
        public void testBoxConstValOfUnsignedType() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/boxConstValOfUnsignedType.kt");
        }

        @Test
        @TestMetadata("boxedUnsignedEqualsZero.kt")
        public void testBoxedUnsignedEqualsZero() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/boxedUnsignedEqualsZero.kt");
        }

        @Test
        @TestMetadata("checkBasicUnsignedLiterals.kt")
        public void testCheckBasicUnsignedLiterals() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/checkBasicUnsignedLiterals.kt");
        }

        @Test
        @TestMetadata("defaultArguments.kt")
        public void testDefaultArguments() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/defaultArguments.kt");
        }

        @Test
        @TestMetadata("equalsImplForInlineClassWrappingNullableInlineClass.kt")
        public void testEqualsImplForInlineClassWrappingNullableInlineClass() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/equalsImplForInlineClassWrappingNullableInlineClass.kt");
        }

        @Test
        @TestMetadata("evaluateConstructorOfUnsignedArrayType.kt")
        public void testEvaluateConstructorOfUnsignedArrayType() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/evaluateConstructorOfUnsignedArrayType.kt");
        }

        @Test
        @TestMetadata("evaluateConstructorOfUnsignedType.kt")
        public void testEvaluateConstructorOfUnsignedType() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/evaluateConstructorOfUnsignedType.kt");
        }

        @Test
        @TestMetadata("forEachIndexedInListOfUInts.kt")
        public void testForEachIndexedInListOfUInts() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/forEachIndexedInListOfUInts.kt");
        }

        @Test
        @TestMetadata("forInUnsignedDownTo.kt")
        public void testForInUnsignedDownTo() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedDownTo.kt");
        }

        @Test
        @TestMetadata("forInUnsignedProgression.kt")
        public void testForInUnsignedProgression() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedProgression.kt");
        }

        @Test
        @TestMetadata("forInUnsignedRange.kt")
        public void testForInUnsignedRange() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRange.kt");
        }

        @Test
        @TestMetadata("forInUnsignedRangeLiteral.kt")
        public void testForInUnsignedRangeLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRangeLiteral.kt");
        }

        @Test
        @TestMetadata("forInUnsignedRangeWithCoercion.kt")
        public void testForInUnsignedRangeWithCoercion() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedRangeWithCoercion.kt");
        }

        @Test
        @TestMetadata("forInUnsignedUntil.kt")
        public void testForInUnsignedUntil() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/forInUnsignedUntil.kt");
        }

        @Test
        @TestMetadata("inUnsignedDownTo.kt")
        public void testInUnsignedDownTo() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedDownTo.kt");
        }

        @Test
        @TestMetadata("inUnsignedRange.kt")
        public void testInUnsignedRange() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedRange.kt");
        }

        @Test
        @TestMetadata("inUnsignedRangeLiteral.kt")
        public void testInUnsignedRangeLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedRangeLiteral.kt");
        }

        @Test
        @TestMetadata("inUnsignedUntil.kt")
        public void testInUnsignedUntil() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/inUnsignedUntil.kt");
        }

        @Test
        @TestMetadata("iterateOverArrayOfUnsignedValues.kt")
        public void testIterateOverArrayOfUnsignedValues() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/iterateOverArrayOfUnsignedValues.kt");
        }

        @Test
        @TestMetadata("iterateOverListOfBoxedUnsignedValues.kt")
        public void testIterateOverListOfBoxedUnsignedValues() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/iterateOverListOfBoxedUnsignedValues.kt");
        }

        @Test
        @TestMetadata("kt25784.kt")
        public void testKt25784() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/kt25784.kt");
        }

        @Test
        @TestMetadata("kt30402.kt")
        public void testKt30402() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/kt30402.kt");
        }

        @Test
        @TestMetadata("kt43286.kt")
        public void testKt43286() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/kt43286.kt");
        }

        @Test
        @TestMetadata("kt43286a.kt")
        public void testKt43286a() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/kt43286a.kt");
        }

        @Test
        @TestMetadata("literalEqualsNullableUnsigned.kt")
        public void testLiteralEqualsNullableUnsigned() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/literalEqualsNullableUnsigned.kt");
        }

        @Test
        @TestMetadata("nullableUnsignedEqualsLiteral.kt")
        public void testNullableUnsignedEqualsLiteral() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/nullableUnsignedEqualsLiteral.kt");
        }

        @Test
        @TestMetadata("unsignedArraySize.kt")
        public void testUnsignedArraySize() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedArraySize.kt");
        }

        @Test
        @TestMetadata("unsignedIntCompare.kt")
        public void testUnsignedIntCompare() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntCompare.kt");
        }

        @Test
        @TestMetadata("unsignedIntDivide.kt")
        public void testUnsignedIntDivide() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntDivide.kt");
        }

        @Test
        @TestMetadata("unsignedIntRemainder.kt")
        public void testUnsignedIntRemainder() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntRemainder.kt");
        }

        @Test
        @TestMetadata("unsignedIntToString.kt")
        public void testUnsignedIntToString() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedIntToString.kt");
        }

        @Test
        @TestMetadata("unsignedLiteralsForMaxLongValue.kt")
        public void testUnsignedLiteralsForMaxLongValue() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsForMaxLongValue.kt");
        }

        @Test
        @TestMetadata("unsignedLiteralsWithSignedOverflow.kt")
        public void testUnsignedLiteralsWithSignedOverflow() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLiteralsWithSignedOverflow.kt");
        }

        @Test
        @TestMetadata("unsignedLongCompare.kt")
        public void testUnsignedLongCompare() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongCompare.kt");
        }

        @Test
        @TestMetadata("unsignedLongDivide.kt")
        public void testUnsignedLongDivide() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongDivide.kt");
        }

        @Test
        @TestMetadata("unsignedLongRemainder.kt")
        public void testUnsignedLongRemainder() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongRemainder.kt");
        }

        @Test
        @TestMetadata("unsignedLongToString.kt")
        public void testUnsignedLongToString() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedLongToString.kt");
        }

        @Test
        @TestMetadata("unsignedRangeIterator.kt")
        public void testUnsignedRangeIterator() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedRangeIterator.kt");
        }

        @Test
        @TestMetadata("unsignedToSignedConversion.kt")
        public void testUnsignedToSignedConversion() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedToSignedConversion.kt");
        }

        @Test
        @TestMetadata("unsignedTypePrefixIncrementDecrementBoxing.kt")
        public void testUnsignedTypePrefixIncrementDecrementBoxing() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedTypePrefixIncrementDecrementBoxing.kt");
        }

        @Test
        @TestMetadata("unsignedTypeValuesInsideStringTemplates.kt")
        public void testUnsignedTypeValuesInsideStringTemplates() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/unsignedTypeValuesInsideStringTemplates.kt");
        }

        @Test
        @TestMetadata("varargsOfUnsignedTypes.kt")
        public void testVarargsOfUnsignedTypes() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/varargsOfUnsignedTypes.kt");
        }

        @Test
        @TestMetadata("whenByUnsigned.kt")
        public void testWhenByUnsigned() throws Exception {
            runTest("compiler/testData/codegen/box/unsignedTypes/whenByUnsigned.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics")
        @TestDataPath("$PROJECT_ROOT")
        public class Jvm8Intrinsics extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInJvm8Intrinsics() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("unsignedIntCompare_jvm8.kt")
            public void testUnsignedIntCompare_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntCompare_jvm8.kt");
            }

            @Test
            @TestMetadata("unsignedIntDivide_jvm8.kt")
            public void testUnsignedIntDivide_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntDivide_jvm8.kt");
            }

            @Test
            @TestMetadata("unsignedIntRemainder_jvm8.kt")
            public void testUnsignedIntRemainder_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntRemainder_jvm8.kt");
            }

            @Test
            @TestMetadata("unsignedIntToString_jvm8.kt")
            public void testUnsignedIntToString_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedIntToString_jvm8.kt");
            }

            @Test
            @TestMetadata("unsignedLongCompare_jvm8.kt")
            public void testUnsignedLongCompare_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongCompare_jvm8.kt");
            }

            @Test
            @TestMetadata("unsignedLongDivide_jvm8.kt")
            public void testUnsignedLongDivide_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongDivide_jvm8.kt");
            }

            @Test
            @TestMetadata("unsignedLongRemainder_jvm8.kt")
            public void testUnsignedLongRemainder_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongRemainder_jvm8.kt");
            }

            @Test
            @TestMetadata("unsignedLongToString_jvm8.kt")
            public void testUnsignedLongToString_jvm8() throws Exception {
                runTest("compiler/testData/codegen/box/unsignedTypes/jvm8Intrinsics/unsignedLongToString_jvm8.kt");
            }
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/valueClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class ValueClasses extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInValueClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/valueClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("jvmInline.kt")
        public void testJvmInline() throws Exception {
            runTest("compiler/testData/codegen/box/valueClasses/jvmInline.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/vararg")
    @TestDataPath("$PROJECT_ROOT")
    public class Vararg extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInVararg() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/vararg"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("assigningArrayToVarargInAnnotation.kt")
        public void testAssigningArrayToVarargInAnnotation() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/assigningArrayToVarargInAnnotation.kt");
        }

        @Test
        @TestMetadata("doNotCopyImmediatelyCreatedArrays.kt")
        public void testDoNotCopyImmediatelyCreatedArrays() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/doNotCopyImmediatelyCreatedArrays.kt");
        }

        @Test
        @TestMetadata("emptyVarargOfBoxedPrimitiveType.kt")
        public void testEmptyVarargOfBoxedPrimitiveType() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/emptyVarargOfBoxedPrimitiveType.kt");
        }

        @Test
        @TestMetadata("evaluationOrder.kt")
        public void testEvaluationOrder() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/evaluationOrder.kt");
        }

        @Test
        @TestMetadata("kt1978.kt")
        public void testKt1978() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/kt1978.kt");
        }

        @Test
        @TestMetadata("kt37715.kt")
        public void testKt37715() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/kt37715.kt");
        }

        @Test
        @TestMetadata("kt37779.kt")
        public void testKt37779() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/kt37779.kt");
        }

        @Test
        @TestMetadata("kt581.kt")
        public void testKt581() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/kt581.kt");
        }

        @Test
        @TestMetadata("kt6192.kt")
        public void testKt6192() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/kt6192.kt");
        }

        @Test
        @TestMetadata("kt796_797.kt")
        public void testKt796_797() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/kt796_797.kt");
        }

        @Test
        @TestMetadata("notInLastPosition.kt")
        public void testNotInLastPosition() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/notInLastPosition.kt");
        }

        @Test
        @TestMetadata("referenceToContainsFromVarargParameter.kt")
        public void testReferenceToContainsFromVarargParameter() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/referenceToContainsFromVarargParameter.kt");
        }

        @Test
        @TestMetadata("singleAssignmentToVarargsInFunction.kt")
        public void testSingleAssignmentToVarargsInFunction() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/singleAssignmentToVarargsInFunction.kt");
        }

        @Test
        @TestMetadata("spreadCopiesArray.kt")
        public void testSpreadCopiesArray() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/spreadCopiesArray.kt");
        }

        @Test
        @TestMetadata("varargInFunParam.kt")
        public void testVarargInFunParam() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/varargInFunParam.kt");
        }

        @Test
        @TestMetadata("varargInJava.kt")
        public void testVarargInJava() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/varargInJava.kt");
        }

        @Test
        @TestMetadata("varargsAndFunctionLiterals.kt")
        public void testVarargsAndFunctionLiterals() throws Exception {
            runTest("compiler/testData/codegen/box/vararg/varargsAndFunctionLiterals.kt");
        }
    }

    @Nested
    @TestMetadata("compiler/testData/codegen/box/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When extends AbstractBlackBoxCodegenTest {
        @Test
        public void testAllFilesPresentInWhen() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
        }

        @Test
        @TestMetadata("callProperty.kt")
        public void testCallProperty() throws Exception {
            runTest("compiler/testData/codegen/box/when/callProperty.kt");
        }

        @Test
        @TestMetadata("edgeCases.kt")
        public void testEdgeCases() throws Exception {
            runTest("compiler/testData/codegen/box/when/edgeCases.kt");
        }

        @Test
        @TestMetadata("emptyWhen.kt")
        public void testEmptyWhen() throws Exception {
            runTest("compiler/testData/codegen/box/when/emptyWhen.kt");
        }

        @Test
        @TestMetadata("exceptionOnNoMatch.kt")
        public void testExceptionOnNoMatch() throws Exception {
            runTest("compiler/testData/codegen/box/when/exceptionOnNoMatch.kt");
        }

        @Test
        @TestMetadata("exhaustiveBoolean.kt")
        public void testExhaustiveBoolean() throws Exception {
            runTest("compiler/testData/codegen/box/when/exhaustiveBoolean.kt");
        }

        @Test
        @TestMetadata("exhaustiveBreakContinue.kt")
        public void testExhaustiveBreakContinue() throws Exception {
            runTest("compiler/testData/codegen/box/when/exhaustiveBreakContinue.kt");
        }

        @Test
        @TestMetadata("exhaustiveWhenInitialization.kt")
        public void testExhaustiveWhenInitialization() throws Exception {
            runTest("compiler/testData/codegen/box/when/exhaustiveWhenInitialization.kt");
        }

        @Test
        @TestMetadata("exhaustiveWhenReturn.kt")
        public void testExhaustiveWhenReturn() throws Exception {
            runTest("compiler/testData/codegen/box/when/exhaustiveWhenReturn.kt");
        }

        @Test
        @TestMetadata("implicitExhaustiveAndReturn.kt")
        public void testImplicitExhaustiveAndReturn() throws Exception {
            runTest("compiler/testData/codegen/box/when/implicitExhaustiveAndReturn.kt");
        }

        @Test
        @TestMetadata("inferredTypeParameters.kt")
        public void testInferredTypeParameters() throws Exception {
            runTest("compiler/testData/codegen/box/when/inferredTypeParameters.kt");
        }

        @Test
        @TestMetadata("integralWhenWithNoInlinedConstants.kt")
        public void testIntegralWhenWithNoInlinedConstants() throws Exception {
            runTest("compiler/testData/codegen/box/when/integralWhenWithNoInlinedConstants.kt");
        }

        @Test
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            runTest("compiler/testData/codegen/box/when/is.kt");
        }

        @Test
        @TestMetadata("kt2457.kt")
        public void testKt2457() throws Exception {
            runTest("compiler/testData/codegen/box/when/kt2457.kt");
        }

        @Test
        @TestMetadata("kt2466.kt")
        public void testKt2466() throws Exception {
            runTest("compiler/testData/codegen/box/when/kt2466.kt");
        }

        @Test
        @TestMetadata("kt43242.kt")
        public void testKt43242() throws Exception {
            runTest("compiler/testData/codegen/box/when/kt43242.kt");
        }

        @Test
        @TestMetadata("kt5307.kt")
        public void testKt5307() throws Exception {
            runTest("compiler/testData/codegen/box/when/kt5307.kt");
        }

        @Test
        @TestMetadata("kt5448.kt")
        public void testKt5448() throws Exception {
            runTest("compiler/testData/codegen/box/when/kt5448.kt");
        }

        @Test
        @TestMetadata("longInRange.kt")
        public void testLongInRange() throws Exception {
            runTest("compiler/testData/codegen/box/when/longInRange.kt");
        }

        @Test
        @TestMetadata("matchNotNullAgainstNullable.kt")
        public void testMatchNotNullAgainstNullable() throws Exception {
            runTest("compiler/testData/codegen/box/when/matchNotNullAgainstNullable.kt");
        }

        @Test
        @TestMetadata("multipleEntries.kt")
        public void testMultipleEntries() throws Exception {
            runTest("compiler/testData/codegen/box/when/multipleEntries.kt");
        }

        @Test
        @TestMetadata("noElseCoerceToUnit.kt")
        public void testNoElseCoerceToUnit() throws Exception {
            runTest("compiler/testData/codegen/box/when/noElseCoerceToUnit.kt");
        }

        @Test
        @TestMetadata("noElseExhaustive.kt")
        public void testNoElseExhaustive() throws Exception {
            runTest("compiler/testData/codegen/box/when/noElseExhaustive.kt");
        }

        @Test
        @TestMetadata("noElseExhaustiveStatement.kt")
        public void testNoElseExhaustiveStatement() throws Exception {
            runTest("compiler/testData/codegen/box/when/noElseExhaustiveStatement.kt");
        }

        @Test
        @TestMetadata("noElseExhaustiveUnitExpected.kt")
        public void testNoElseExhaustiveUnitExpected() throws Exception {
            runTest("compiler/testData/codegen/box/when/noElseExhaustiveUnitExpected.kt");
        }

        @Test
        @TestMetadata("noElseInStatement.kt")
        public void testNoElseInStatement() throws Exception {
            runTest("compiler/testData/codegen/box/when/noElseInStatement.kt");
        }

        @Test
        @TestMetadata("noElseNoMatch.kt")
        public void testNoElseNoMatch() throws Exception {
            runTest("compiler/testData/codegen/box/when/noElseNoMatch.kt");
        }

        @Test
        @TestMetadata("nullableWhen.kt")
        public void testNullableWhen() throws Exception {
            runTest("compiler/testData/codegen/box/when/nullableWhen.kt");
        }

        @Test
        @TestMetadata("range.kt")
        public void testRange() throws Exception {
            runTest("compiler/testData/codegen/box/when/range.kt");
        }

        @Test
        @TestMetadata("sealedWhenInitialization.kt")
        public void testSealedWhenInitialization() throws Exception {
            runTest("compiler/testData/codegen/box/when/sealedWhenInitialization.kt");
        }

        @Test
        @TestMetadata("switchBreakNoLabel.kt")
        public void testSwitchBreakNoLabel() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchBreakNoLabel.kt");
        }

        @Test
        @TestMetadata("switchOptimizationDense.kt")
        public void testSwitchOptimizationDense() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationDense.kt");
        }

        @Test
        @TestMetadata("switchOptimizationDuplicates.kt")
        public void testSwitchOptimizationDuplicates() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationDuplicates.kt");
        }

        @Test
        @TestMetadata("switchOptimizationMultipleConditions.kt")
        public void testSwitchOptimizationMultipleConditions() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationMultipleConditions.kt");
        }

        @Test
        @TestMetadata("switchOptimizationSingleStatementCase.kt")
        public void testSwitchOptimizationSingleStatementCase() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationSingleStatementCase.kt");
        }

        @Test
        @TestMetadata("switchOptimizationSparse.kt")
        public void testSwitchOptimizationSparse() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationSparse.kt");
        }

        @Test
        @TestMetadata("switchOptimizationStatement.kt")
        public void testSwitchOptimizationStatement() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationStatement.kt");
        }

        @Test
        @TestMetadata("switchOptimizationTypes.kt")
        public void testSwitchOptimizationTypes() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationTypes.kt");
        }

        @Test
        @TestMetadata("switchOptimizationUnordered.kt")
        public void testSwitchOptimizationUnordered() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationUnordered.kt");
        }

        @Test
        @TestMetadata("switchOptimizationWithGap.kt")
        public void testSwitchOptimizationWithGap() throws Exception {
            runTest("compiler/testData/codegen/box/when/switchOptimizationWithGap.kt");
        }

        @Test
        @TestMetadata("typeDisjunction.kt")
        public void testTypeDisjunction() throws Exception {
            runTest("compiler/testData/codegen/box/when/typeDisjunction.kt");
        }

        @Test
        @TestMetadata("whenArgumentIsEvaluatedOnlyOnce.kt")
        public void testWhenArgumentIsEvaluatedOnlyOnce() throws Exception {
            runTest("compiler/testData/codegen/box/when/whenArgumentIsEvaluatedOnlyOnce.kt");
        }

        @Test
        @TestMetadata("whenSafeCallSubjectEvaluatedOnce.kt")
        public void testWhenSafeCallSubjectEvaluatedOnce() throws Exception {
            runTest("compiler/testData/codegen/box/when/whenSafeCallSubjectEvaluatedOnce.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/when/enumOptimization")
        @TestDataPath("$PROJECT_ROOT")
        public class EnumOptimization extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInEnumOptimization() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/enumOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("bigEnum.kt")
            public void testBigEnum() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/bigEnum.kt");
            }

            @Test
            @TestMetadata("differentEnumClasses.kt")
            public void testDifferentEnumClasses() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/differentEnumClasses.kt");
            }

            @Test
            @TestMetadata("differentEnumClasses2.kt")
            public void testDifferentEnumClasses2() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/differentEnumClasses2.kt");
            }

            @Test
            @TestMetadata("duplicatingItems.kt")
            public void testDuplicatingItems() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/duplicatingItems.kt");
            }

            @Test
            @TestMetadata("enumInsideClassObject.kt")
            public void testEnumInsideClassObject() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/enumInsideClassObject.kt");
            }

            @Test
            @TestMetadata("expression.kt")
            public void testExpression() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/expression.kt");
            }

            @Test
            @TestMetadata("functionLiteralInTopLevel.kt")
            public void testFunctionLiteralInTopLevel() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/functionLiteralInTopLevel.kt");
            }

            @Test
            @TestMetadata("kt14597.kt")
            public void testKt14597() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597.kt");
            }

            @Test
            @TestMetadata("kt14597_full.kt")
            public void testKt14597_full() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/kt14597_full.kt");
            }

            @Test
            @TestMetadata("kt14802.kt")
            public void testKt14802() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/kt14802.kt");
            }

            @Test
            @TestMetadata("kt15806.kt")
            public void testKt15806() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/kt15806.kt");
            }

            @Test
            @TestMetadata("manyWhensWithinClass.kt")
            public void testManyWhensWithinClass() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/manyWhensWithinClass.kt");
            }

            @Test
            @TestMetadata("nonConstantEnum.kt")
            public void testNonConstantEnum() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/nonConstantEnum.kt");
            }

            @Test
            @TestMetadata("nullIsTheFirstEntry.kt")
            public void testNullIsTheFirstEntry() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/nullIsTheFirstEntry.kt");
            }

            @Test
            @TestMetadata("nullability.kt")
            public void testNullability() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/nullability.kt");
            }

            @Test
            @TestMetadata("nullableEnum.kt")
            public void testNullableEnum() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/nullableEnum.kt");
            }

            @Test
            @TestMetadata("subjectAny.kt")
            public void testSubjectAny() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/subjectAny.kt");
            }

            @Test
            @TestMetadata("withoutElse.kt")
            public void testWithoutElse() throws Exception {
                runTest("compiler/testData/codegen/box/when/enumOptimization/withoutElse.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/when/stringOptimization")
        @TestDataPath("$PROJECT_ROOT")
        public class StringOptimization extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInStringOptimization() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/stringOptimization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("duplicatingItems.kt")
            public void testDuplicatingItems() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItems.kt");
            }

            @Test
            @TestMetadata("duplicatingItemsSameHashCode.kt")
            public void testDuplicatingItemsSameHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode.kt");
            }

            @Test
            @TestMetadata("duplicatingItemsSameHashCode2.kt")
            public void testDuplicatingItemsSameHashCode2() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode2.kt");
            }

            @Test
            @TestMetadata("duplicatingItemsSameHashCode3.kt")
            public void testDuplicatingItemsSameHashCode3() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode3.kt");
            }

            @Test
            @TestMetadata("expression.kt")
            public void testExpression() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/expression.kt");
            }

            @Test
            @TestMetadata("nullability.kt")
            public void testNullability() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/nullability.kt");
            }

            @Test
            @TestMetadata("sameHashCode.kt")
            public void testSameHashCode() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/sameHashCode.kt");
            }

            @Test
            @TestMetadata("statement.kt")
            public void testStatement() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/statement.kt");
            }

            @Test
            @TestMetadata("temporaryVarInWhenByStringIsDisposedProperly.kt")
            public void testTemporaryVarInWhenByStringIsDisposedProperly() throws Exception {
                runTest("compiler/testData/codegen/box/when/stringOptimization/temporaryVarInWhenByStringIsDisposedProperly.kt");
            }
        }

        @Nested
        @TestMetadata("compiler/testData/codegen/box/when/whenSubjectVariable")
        @TestDataPath("$PROJECT_ROOT")
        public class WhenSubjectVariable extends AbstractBlackBoxCodegenTest {
            @Test
            public void testAllFilesPresentInWhenSubjectVariable() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/codegen/box/when/whenSubjectVariable"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM, true);
            }

            @Test
            @TestMetadata("captureSubjectVariable.kt")
            public void testCaptureSubjectVariable() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/captureSubjectVariable.kt");
            }

            @Test
            @TestMetadata("denseIntSwitchWithSubjectVariable.kt")
            public void testDenseIntSwitchWithSubjectVariable() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/denseIntSwitchWithSubjectVariable.kt");
            }

            @Test
            @TestMetadata("equalityWithSubjectVariable.kt")
            public void testEqualityWithSubjectVariable() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/equalityWithSubjectVariable.kt");
            }

            @Test
            @TestMetadata("ieee754Equality.kt")
            public void testIeee754Equality() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/ieee754Equality.kt");
            }

            @Test
            @TestMetadata("ieee754EqualityWithSmartCast.kt")
            public void testIeee754EqualityWithSmartCast() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/ieee754EqualityWithSmartCast.kt");
            }

            @Test
            @TestMetadata("isCheckOnSubjectVariable.kt")
            public void testIsCheckOnSubjectVariable() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/isCheckOnSubjectVariable.kt");
            }

            @Test
            @TestMetadata("kt27161.kt")
            public void testKt27161() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161.kt");
            }

            @Test
            @TestMetadata("kt27161_int.kt")
            public void testKt27161_int() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_int.kt");
            }

            @Test
            @TestMetadata("kt27161_nested.kt")
            public void testKt27161_nested() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_nested.kt");
            }

            @Test
            @TestMetadata("kt27161_nested2.kt")
            public void testKt27161_nested2() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_nested2.kt");
            }

            @Test
            @TestMetadata("kt27161_string.kt")
            public void testKt27161_string() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/kt27161_string.kt");
            }

            @Test
            @TestMetadata("rangeCheckOnSubjectVariable.kt")
            public void testRangeCheckOnSubjectVariable() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/rangeCheckOnSubjectVariable.kt");
            }

            @Test
            @TestMetadata("sparseIntSwitchWithSubjectVariable.kt")
            public void testSparseIntSwitchWithSubjectVariable() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/sparseIntSwitchWithSubjectVariable.kt");
            }

            @Test
            @TestMetadata("subjectExpressionIsEvaluatedOnce.kt")
            public void testSubjectExpressionIsEvaluatedOnce() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/subjectExpressionIsEvaluatedOnce.kt");
            }

            @Test
            @TestMetadata("whenByEnum.kt")
            public void testWhenByEnum() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByEnum.kt");
            }

            @Test
            @TestMetadata("whenByNullableEnum.kt")
            public void testWhenByNullableEnum() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByNullableEnum.kt");
            }

            @Test
            @TestMetadata("whenByString.kt")
            public void testWhenByString() throws Exception {
                runTest("compiler/testData/codegen/box/when/whenSubjectVariable/whenByString.kt");
            }
        }
    }
}
