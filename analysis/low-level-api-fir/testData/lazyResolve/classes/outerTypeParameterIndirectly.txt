RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(RAW_FIR)] class X<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor<[ResolvedTo(RAW_FIR)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(RAW_FIR)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] class A : X<String> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<X<String>>
        }

        public final? [ResolvedTo(RAW_FIR)] class D<[ResolvedTo(RAW_FIR)] U : Y> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor<[ResolvedTo(RAW_FIR)] U : Y>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(RAW_FIR)] class X<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor<[ResolvedTo(RAW_FIR)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(RAW_FIR)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] class A : X<String> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<X<String>>
        }

        public final? [ResolvedTo(RAW_FIR)] class D<[ResolvedTo(RAW_FIR)] U : Y> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=D] constructor<[ResolvedTo(RAW_FIR)] U : Y>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(RAW_FIR)] class X<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor<[ResolvedTo(RAW_FIR)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(RAW_FIR)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] class A : X<String> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<X<String>>
        }

        public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class D<[ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] U : Y> : R|kotlin/Any| {
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=D] constructor<[ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] U : Y>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(RAW_FIR)] class X<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor<[ResolvedTo(RAW_FIR)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(RAW_FIR)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(RAW_FIR)] class A : X<String> {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<X<String>>
        }

        public final? [ResolvedTo(COMPANION_GENERATION)] class D<[ResolvedTo(COMPANION_GENERATION)] U : Y> : R|kotlin/Any| {
            public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=D] constructor<[ResolvedTo(COMPANION_GENERATION)] U : Y>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(SUPER_TYPES)] class X<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(SUPER_TYPES)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(SUPER_TYPES)] class A : R|X<kotlin/String>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<X<R|kotlin/String|>>
        }

        public final? [ResolvedTo(SUPER_TYPES)] class D<[ResolvedTo(SUPER_TYPES)] U : Y> : R|kotlin/Any| {
            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=D] constructor<[ResolvedTo(SUPER_TYPES)] U : Y>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(SUPER_TYPES)] class X<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=X] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(SUPER_TYPES)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final? [ResolvedTo(TYPES)] class A : R|X<kotlin/String>| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<X<R|kotlin/String|>>
        }

        public final? [ResolvedTo(TYPES)] class D<[ResolvedTo(TYPES)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public? [ResolvedTo(TYPES)] [ContainingClassKey=D] constructor<[ResolvedTo(TYPES)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(STATUS)] class X<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor<[ResolvedTo(STATUS)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(STATUS)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|X<kotlin/String>|>
        }

        public final [ResolvedTo(STATUS)] class D<[ResolvedTo(STATUS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=D] constructor<[ResolvedTo(STATUS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(STATUS)] class X<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor<[ResolvedTo(STATUS)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(STATUS)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|X<kotlin/String>|>
        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class D<[ResolvedTo(EXPECT_ACTUAL_MATCHING)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=D] constructor<[ResolvedTo(EXPECT_ACTUAL_MATCHING)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(STATUS)] class X<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor<[ResolvedTo(STATUS)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(STATUS)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|X<kotlin/String>|>
        }

        public final [ResolvedTo(CONTRACTS)] class D<[ResolvedTo(CONTRACTS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=D] constructor<[ResolvedTo(CONTRACTS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(STATUS)] class X<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor<[ResolvedTo(STATUS)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(STATUS)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|X<kotlin/String>|>
        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class D<[ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=D] constructor<[ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(STATUS)] class X<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor<[ResolvedTo(STATUS)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(STATUS)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|X<kotlin/String>|>
        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] class D<[ResolvedTo(CONSTANT_EVALUATION)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=D] constructor<[ResolvedTo(CONSTANT_EVALUATION)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(STATUS)] class X<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor<[ResolvedTo(STATUS)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(STATUS)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|X<kotlin/String>|>
        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class D<[ResolvedTo(ANNOTATION_ARGUMENTS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=D] constructor<[ResolvedTo(ANNOTATION_ARGUMENTS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(STATUS)] class X<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=X] constructor<[ResolvedTo(STATUS)] T>(): R|X<T>| {
            LAZY_super<R|kotlin/Any|>
        }

        public open inner [ResolvedTo(RAW_FIR)] class Y<[ResolvedTo(STATUS)] Outer(T)> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(STATUS)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|X<kotlin/String>|>
        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class D<[ResolvedTo(ANNOTATION_ARGUMENTS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=D] constructor<[ResolvedTo(ANNOTATION_ARGUMENTS)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                super<R|kotlin/Any|>()
            }

        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] outerTypeParameterIndirectly.kt
    public open [ResolvedTo(BODY_RESOLVE)] class X<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=X] constructor<[ResolvedTo(BODY_RESOLVE)] T>(): R|X<T>| {
            super<R|kotlin/Any|>()
        }

        public open inner [ResolvedTo(BODY_RESOLVE)] class Y<[ResolvedTo(BODY_RESOLVE)] Outer(T)> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Y] X<T>.constructor(): R|X.Y<T>| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class A : R|X<kotlin/String>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|X<kotlin/String>|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] class D<[ResolvedTo(BODY_RESOLVE)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=D] constructor<[ResolvedTo(BODY_RESOLVE)] U : <ERROR TYPE REF: Type arguments should be specified for an outer class>>(): R|A.D<U>| {
                super<R|kotlin/Any|>()
            }

        }

    }
