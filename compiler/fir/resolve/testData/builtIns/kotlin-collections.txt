public abstract class BooleanIterator : R|kotlin/collections/Iterator<kotlin/Boolean>| {
    public final operator fun next(): R|kotlin/Boolean|

    public abstract fun nextBoolean(): R|kotlin/Boolean|

    public constructor(): R|kotlin/collections/BooleanIterator|

}

public abstract class ByteIterator : R|kotlin/collections/Iterator<kotlin/Byte>| {
    public final operator fun next(): R|kotlin/Byte|

    public abstract fun nextByte(): R|kotlin/Byte|

    public constructor(): R|kotlin/collections/ByteIterator|

}

public abstract class CharIterator : R|kotlin/collections/Iterator<kotlin/Char>| {
    public final operator fun next(): R|kotlin/Char|

    public abstract fun nextChar(): R|kotlin/Char|

    public constructor(): R|kotlin/collections/CharIterator|

}

public abstract interface Collection<out E> : R|kotlin/collections/Iterable<E>| {
    public abstract operator fun contains(element: R|E|): R|kotlin/Boolean|

    public abstract fun containsAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun isEmpty(): R|kotlin/Boolean|

    public abstract operator fun iterator(): R|kotlin/collections/Iterator<E>|

    public abstract val size: R|kotlin/Int|
        public get(): R|kotlin/Int|

}

public abstract class DoubleIterator : R|kotlin/collections/Iterator<kotlin/Double>| {
    public final operator fun next(): R|kotlin/Double|

    public abstract fun nextDouble(): R|kotlin/Double|

    public constructor(): R|kotlin/collections/DoubleIterator|

}

public abstract class FloatIterator : R|kotlin/collections/Iterator<kotlin/Float>| {
    public final operator fun next(): R|kotlin/Float|

    public abstract fun nextFloat(): R|kotlin/Float|

    public constructor(): R|kotlin/collections/FloatIterator|

}

public abstract class IntIterator : R|kotlin/collections/Iterator<kotlin/Int>| {
    public final operator fun next(): R|kotlin/Int|

    public abstract fun nextInt(): R|kotlin/Int|

    public constructor(): R|kotlin/collections/IntIterator|

}

public abstract interface Iterable<out T> : R|kotlin/Any| {
    public abstract operator fun iterator(): R|kotlin/collections/Iterator<T>|

}

public abstract interface Iterator<out T> : R|kotlin/Any| {
    public abstract operator fun hasNext(): R|kotlin/Boolean|

    public abstract operator fun next(): R|T|

}

public abstract interface List<out E> : R|kotlin/collections/Collection<E>| {
    public abstract operator fun contains(element: R|E|): R|kotlin/Boolean|

    public abstract fun containsAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract operator fun get(index: R|kotlin/Int|): R|E|

    public abstract fun indexOf(element: R|E|): R|kotlin/Int|

    public abstract fun isEmpty(): R|kotlin/Boolean|

    public abstract operator fun iterator(): R|kotlin/collections/Iterator<E>|

    public abstract fun lastIndexOf(element: R|E|): R|kotlin/Int|

    public abstract fun listIterator(): R|kotlin/collections/ListIterator<E>|

    public abstract fun listIterator(index: R|kotlin/Int|): R|kotlin/collections/ListIterator<E>|

    public abstract fun subList(fromIndex: R|kotlin/Int|, toIndex: R|kotlin/Int|): R|kotlin/collections/List<E>|

    public abstract val size: R|kotlin/Int|
        public get(): R|kotlin/Int|

}

public abstract interface ListIterator<out T> : R|kotlin/collections/Iterator<T>| {
    public abstract operator fun hasNext(): R|kotlin/Boolean|

    public abstract fun hasPrevious(): R|kotlin/Boolean|

    public abstract operator fun next(): R|T|

    public abstract fun nextIndex(): R|kotlin/Int|

    public abstract fun previous(): R|T|

    public abstract fun previousIndex(): R|kotlin/Int|

}

public abstract class LongIterator : R|kotlin/collections/Iterator<kotlin/Long>| {
    public final operator fun next(): R|kotlin/Long|

    public abstract fun nextLong(): R|kotlin/Long|

    public constructor(): R|kotlin/collections/LongIterator|

}

public abstract interface Map<K, out V> : R|kotlin/Any| {
    public abstract fun containsKey(key: R|K|): R|kotlin/Boolean|

    public abstract fun containsValue(value: R|V|): R|kotlin/Boolean|

    public abstract operator fun get(key: R|K|): R|V|

    @R|kotlin/SinceKotlin|(version = String(1.1)) @R|kotlin/internal/PlatformDependent|() public open fun getOrDefault(key: R|K|, defaultValue: R|V|): R|V|

    public abstract fun isEmpty(): R|kotlin/Boolean|

    public abstract val entries: R|kotlin/collections/Set<kotlin/collections/Map.Entry<K, V>>|
        public get(): R|kotlin/collections/Set<kotlin/collections/Map.Entry<K, V>>|

    public abstract val keys: R|kotlin/collections/Set<K>|
        public get(): R|kotlin/collections/Set<K>|

    public abstract val size: R|kotlin/Int|
        public get(): R|kotlin/Int|

    public abstract val values: R|kotlin/collections/Collection<V>|
        public get(): R|kotlin/collections/Collection<V>|

    public abstract interface Entry<out K, out V> : R|kotlin/Any| {
        public abstract val key: R|K|
            public get(): R|K|

        public abstract val value: R|V|
            public get(): R|V|

    }

}

public abstract interface MutableCollection<E> : R|kotlin/collections/Collection<E>|, R|kotlin/collections/MutableIterable<E>| {
    public abstract fun add(element: R|E|): R|kotlin/Boolean|

    public abstract fun addAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun clear(): R|kotlin/Unit|

    public abstract operator fun iterator(): R|kotlin/collections/MutableIterator<E>|

    public abstract fun remove(element: R|E|): R|kotlin/Boolean|

    public abstract fun removeAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun retainAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

}

public abstract interface MutableIterable<out T> : R|kotlin/collections/Iterable<T>| {
    public abstract operator fun iterator(): R|kotlin/collections/MutableIterator<T>|

}

public abstract interface MutableIterator<out T> : R|kotlin/collections/Iterator<T>| {
    public abstract fun remove(): R|kotlin/Unit|

}

public abstract interface MutableList<E> : R|kotlin/collections/List<E>|, R|kotlin/collections/MutableCollection<E>| {
    public abstract fun add(element: R|E|): R|kotlin/Boolean|

    public abstract fun add(index: R|kotlin/Int|, element: R|E|): R|kotlin/Unit|

    public abstract fun addAll(index: R|kotlin/Int|, elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun addAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun clear(): R|kotlin/Unit|

    public abstract fun listIterator(): R|kotlin/collections/MutableListIterator<E>|

    public abstract fun listIterator(index: R|kotlin/Int|): R|kotlin/collections/MutableListIterator<E>|

    public abstract fun remove(element: R|E|): R|kotlin/Boolean|

    public abstract fun removeAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun removeAt(index: R|kotlin/Int|): R|E|

    public abstract fun retainAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract operator fun set(index: R|kotlin/Int|, element: R|E|): R|E|

    public abstract fun subList(fromIndex: R|kotlin/Int|, toIndex: R|kotlin/Int|): R|kotlin/collections/MutableList<E>|

}

public abstract interface MutableListIterator<T> : R|kotlin/collections/ListIterator<T>|, R|kotlin/collections/MutableIterator<T>| {
    public abstract fun add(element: R|T|): R|kotlin/Unit|

    public abstract operator fun hasNext(): R|kotlin/Boolean|

    public abstract operator fun next(): R|T|

    public abstract fun remove(): R|kotlin/Unit|

    public abstract fun set(element: R|T|): R|kotlin/Unit|

}

public abstract interface MutableMap<K, V> : R|kotlin/collections/Map<K, V>| {
    public abstract fun clear(): R|kotlin/Unit|

    public abstract fun put(key: R|K|, value: R|V|): R|V|

    public abstract fun putAll(from: R|kotlin/collections/Map<out K, V>|): R|kotlin/Unit|

    public abstract fun remove(key: R|K|): R|V|

    @R|kotlin/SinceKotlin|(version = String(1.1)) @R|kotlin/internal/PlatformDependent|() public open fun remove(key: R|K|, value: R|V|): R|kotlin/Boolean|

    public abstract val entries: R|kotlin/collections/MutableSet<kotlin/collections/MutableMap.MutableEntry<K, V>>|
        public get(): R|kotlin/collections/MutableSet<kotlin/collections/MutableMap.MutableEntry<K, V>>|

    public abstract val keys: R|kotlin/collections/MutableSet<K>|
        public get(): R|kotlin/collections/MutableSet<K>|

    public abstract val values: R|kotlin/collections/MutableCollection<V>|
        public get(): R|kotlin/collections/MutableCollection<V>|

    public abstract interface MutableEntry<K, V> : R|kotlin/collections/Map.Entry<K, V>| {
        public abstract fun setValue(newValue: R|V|): R|V|

    }

}

public abstract interface MutableSet<E> : R|kotlin/collections/Set<E>|, R|kotlin/collections/MutableCollection<E>| {
    public abstract fun add(element: R|E|): R|kotlin/Boolean|

    public abstract fun addAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun clear(): R|kotlin/Unit|

    public abstract operator fun iterator(): R|kotlin/collections/MutableIterator<E>|

    public abstract fun remove(element: R|E|): R|kotlin/Boolean|

    public abstract fun removeAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun retainAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

}

public abstract interface Set<out E> : R|kotlin/collections/Collection<E>| {
    public abstract operator fun contains(element: R|E|): R|kotlin/Boolean|

    public abstract fun containsAll(elements: R|kotlin/collections/Collection<E>|): R|kotlin/Boolean|

    public abstract fun isEmpty(): R|kotlin/Boolean|

    public abstract operator fun iterator(): R|kotlin/collections/Iterator<E>|

    public abstract val size: R|kotlin/Int|
        public get(): R|kotlin/Int|

}

public abstract class ShortIterator : R|kotlin/collections/Iterator<kotlin/Short>| {
    public final operator fun next(): R|kotlin/Short|

    public abstract fun nextShort(): R|kotlin/Short|

    public constructor(): R|kotlin/collections/ShortIterator|

}
