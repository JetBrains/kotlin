package test

public open class RawOverrides {
    public constructor RawOverrides()

    public interface A</*0*/ T : kotlin.Any!> {
        public abstract fun </*0*/ E : kotlin.CharSequence!> foo(/*0*/ p0: T!, /*1*/ p1: (kotlin.collections.MutableList<out T!>..kotlin.collections.List<T!>?)): E!
    }

    public open inner class B : test.RawOverrides.A<(raw) kotlin.Any!> {
        public constructor B()
        public open override /*1*/ fun foo(/*0*/ p0: kotlin.Any!, /*1*/ p1: kotlin.collections.(Mutable)List<(raw) kotlin.Any?>!): kotlin.String!
    }

    public open inner class C {
        public constructor C()
        public/*package*/ open fun </*0*/ E : kotlin.CharSequence!, /*1*/ F : E!> bar(/*0*/ p0: F!, /*1*/ p1: kotlin.collections.(Mutable)List<kotlin.collections.(Mutable)Map<E!, F!>!>!): E!
    }

    public open inner class D : test.RawOverrides.C {
        public constructor D()
        public open override /*1*/ fun bar(/*0*/ p0: kotlin.CharSequence!, /*1*/ p1: kotlin.collections.(Mutable)List<(raw) kotlin.Any?>!): kotlin.String!
    }
}
