/*
 * Copyright 2010-2025 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.backend.konan.tests.integration

import org.jetbrains.kotlin.backend.konan.tests.integration.utils.*
import org.jetbrains.kotlin.backend.konan.tests.integration.utils.IntegrationTestReport.Issue
import org.jetbrains.kotlin.konan.target.HostManager
import org.jetbrains.kotlin.konan.test.blackbox.support.copyNativeHomeProperty
import org.jetbrains.kotlin.native.interop.gen.jvm.KotlinPlatform
import org.jetbrains.kotlin.native.interop.indexer.IndexerResult
import org.jetbrains.kotlin.native.interop.tool.ToolConfig
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.Assumptions.assumeTrue
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import java.io.File
import kotlin.test.assertTrue

/**
 * Test data is generated by [GenerateObjCExportIntegrationTestData]
 */
class ObjCExportIntegrationTest {

    init {
        if (HostManager.host.family.isAppleFamily) {
            copyNativeHomeProperty()
            ToolConfig(
                userProvidedTargetName = HostManager.hostName,
                flavor = KotlinPlatform.NATIVE,
                propertyOverrides = emptyMap(),
                konanDataDir = null
            ).loadLibclang()
        }
    }

    private var files = IntegrationTempFiles(integrationModuleName)

    /**
     * Currently failing is disabled, since we have unresolved K1/K2 issues
     */
    private val failOnFoundIssues = false

    @Test
    fun integration() {
        IntegrationTestFiles.getHeaders { name, k1, k2 ->
            val report = compileIndexAndBuildReport(name, k1, k2)

            if (failOnFoundIssues && report.hasIssues) {
                error("Failed due to ${report.issues.size} issues found in headers. See the report below:\n\n$report")
            }
        }
    }

    @AfterEach
    fun dispose() {
        assumeTrue(HostManager.host.family.isAppleFamily)
        disposeIndexerUtils()
    }

    @BeforeEach
    fun before() {
        assumeTrue(HostManager.host.family.isAppleFamily)
        initIndexerUtils()
        files = IntegrationTempFiles(integrationModuleName)
        assertTrue(File(appleSdkPath).exists(), "Apple SDK not found at `${appleSdkPath}`")
    }

    private fun compileIndexAndBuildReport(name: String, k1Header: String, k2Header: String): IntegrationTestReport {

        val baseHeader = files.file("Base.h", baseObjCTypes.trimIndent())

        val k1Index = try {
            compileAndIndex(k1Header, baseHeader)
        } catch (e: Throwable) {
            return IntegrationTestReport(name, listOf(Issue.FailedK1Compilation(e.message, k1Header, e)))
        }
        val k2Index = try {
            compileAndIndex(k2Header, baseHeader)
        } catch (e: Throwable) {
            return IntegrationTestReport(name, listOf(Issue.FailedK2CompilationK2(e.message, k2Header, e)))
        }

        return IntegrationTestReport(
            name, compareProtocolsOrClasses(k1Index, k2Index)
        )
    }

    private fun compileAndIndex(header: String, baseHeader: File): IndexerResult {
        val headerFile = files.file("Foo.h", header)
        return org.jetbrains.kotlin.backend.konan.tests.integration.utils.compileAndIndex(
            listOf(baseHeader, headerFile), files, integrationModuleName, "-isysroot", appleSdkPath, "-F", appleFrameworkPath
        )
    }
}