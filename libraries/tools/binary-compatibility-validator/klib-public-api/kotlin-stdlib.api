// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm32Hfp, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Alias: native => [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, linuxArm32Hfp, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <kotlin>
open annotation class kotlin.annotation/MustBeDocumented : kotlin/Annotation { // kotlin.annotation/MustBeDocumented|null[0]
    constructor <init>() // kotlin.annotation/MustBeDocumented.<init>|<init>(){}[0]
}

open annotation class kotlin.annotation/Repeatable : kotlin/Annotation { // kotlin.annotation/Repeatable|null[0]
    constructor <init>() // kotlin.annotation/Repeatable.<init>|<init>(){}[0]
}

open annotation class kotlin.annotation/Retention : kotlin/Annotation { // kotlin.annotation/Retention|null[0]
    constructor <init>(kotlin.annotation/AnnotationRetention = ...) // kotlin.annotation/Retention.<init>|<init>(kotlin.annotation.AnnotationRetention){}[0]

    final val value // kotlin.annotation/Retention.value|{}value[0]
        final fun <get-value>(): kotlin.annotation/AnnotationRetention // kotlin.annotation/Retention.value.<get-value>|<get-value>(){}[0]
}

open annotation class kotlin.annotation/Target : kotlin/Annotation { // kotlin.annotation/Target|null[0]
    constructor <init>(kotlin/Array<out kotlin.annotation/AnnotationTarget>...) // kotlin.annotation/Target.<init>|<init>(kotlin.Array<out|kotlin.annotation.AnnotationTarget>...){}[0]

    final val allowedTargets // kotlin.annotation/Target.allowedTargets|{}allowedTargets[0]
        final fun <get-allowedTargets>(): kotlin/Array<out kotlin.annotation/AnnotationTarget> // kotlin.annotation/Target.allowedTargets.<get-allowedTargets>|<get-allowedTargets>(){}[0]
}

open annotation class kotlin.contracts/ExperimentalContracts : kotlin/Annotation { // kotlin.contracts/ExperimentalContracts|null[0]
    constructor <init>() // kotlin.contracts/ExperimentalContracts.<init>|<init>(){}[0]
}

open annotation class kotlin.coroutines/RestrictsSuspension : kotlin/Annotation { // kotlin.coroutines/RestrictsSuspension|null[0]
    constructor <init>() // kotlin.coroutines/RestrictsSuspension.<init>|<init>(){}[0]
}

open annotation class kotlin.experimental/ExperimentalNativeApi : kotlin/Annotation { // kotlin.experimental/ExperimentalNativeApi|null[0]
    constructor <init>() // kotlin.experimental/ExperimentalNativeApi.<init>|<init>(){}[0]
}

open annotation class kotlin.experimental/ExperimentalObjCName : kotlin/Annotation { // kotlin.experimental/ExperimentalObjCName|null[0]
    constructor <init>() // kotlin.experimental/ExperimentalObjCName.<init>|<init>(){}[0]
}

open annotation class kotlin.experimental/ExperimentalObjCRefinement : kotlin/Annotation { // kotlin.experimental/ExperimentalObjCRefinement|null[0]
    constructor <init>() // kotlin.experimental/ExperimentalObjCRefinement.<init>|<init>(){}[0]
}

open annotation class kotlin.experimental/ExperimentalTypeInference : kotlin/Annotation { // kotlin.experimental/ExperimentalTypeInference|null[0]
    constructor <init>() // kotlin.experimental/ExperimentalTypeInference.<init>|<init>(){}[0]
}

open annotation class kotlin.io.encoding/ExperimentalEncodingApi : kotlin/Annotation { // kotlin.io.encoding/ExperimentalEncodingApi|null[0]
    constructor <init>() // kotlin.io.encoding/ExperimentalEncodingApi.<init>|<init>(){}[0]
}

open annotation class kotlin.js/ExperimentalJsCollectionsApi : kotlin/Annotation { // kotlin.js/ExperimentalJsCollectionsApi|null[0]
    constructor <init>() // kotlin.js/ExperimentalJsCollectionsApi.<init>|<init>(){}[0]
}

open annotation class kotlin.js/ExperimentalJsExport : kotlin/Annotation { // kotlin.js/ExperimentalJsExport|null[0]
    constructor <init>() // kotlin.js/ExperimentalJsExport.<init>|<init>(){}[0]
}

open annotation class kotlin.js/ExperimentalJsFileName : kotlin/Annotation { // kotlin.js/ExperimentalJsFileName|null[0]
    constructor <init>() // kotlin.js/ExperimentalJsFileName.<init>|<init>(){}[0]
}

open annotation class kotlin.js/ExperimentalJsReflectionCreateInstance : kotlin/Annotation { // kotlin.js/ExperimentalJsReflectionCreateInstance|null[0]
    constructor <init>() // kotlin.js/ExperimentalJsReflectionCreateInstance.<init>|<init>(){}[0]
}

open annotation class kotlin.js/ExperimentalJsStatic : kotlin/Annotation { // kotlin.js/ExperimentalJsStatic|null[0]
    constructor <init>() // kotlin.js/ExperimentalJsStatic.<init>|<init>(){}[0]
}

open annotation class kotlin.jvm/ImplicitlyActualizedByJvmDeclaration : kotlin/Annotation { // kotlin.jvm/ImplicitlyActualizedByJvmDeclaration|null[1]
    constructor <init>() // kotlin.jvm/ImplicitlyActualizedByJvmDeclaration.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmField : kotlin/Annotation { // kotlin.jvm/JvmField|null[1]
    constructor <init>() // kotlin.jvm/JvmField.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmInline : kotlin/Annotation { // kotlin.jvm/JvmInline|null[1]
    constructor <init>() // kotlin.jvm/JvmInline.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmMultifileClass : kotlin/Annotation { // kotlin.jvm/JvmMultifileClass|null[1]
    constructor <init>() // kotlin.jvm/JvmMultifileClass.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmName : kotlin/Annotation { // kotlin.jvm/JvmName|null[1]
    constructor <init>(kotlin/String) // kotlin.jvm/JvmName.<init>|<init>(kotlin.String){}[1]

    final val name // kotlin.jvm/JvmName.name|{}name[1]
        final fun <get-name>(): kotlin/String // kotlin.jvm/JvmName.name.<get-name>|<get-name>(){}[1]
}

open annotation class kotlin.jvm/JvmOverloads : kotlin/Annotation { // kotlin.jvm/JvmOverloads|null[1]
    constructor <init>() // kotlin.jvm/JvmOverloads.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmRecord : kotlin/Annotation { // kotlin.jvm/JvmRecord|null[1]
    constructor <init>() // kotlin.jvm/JvmRecord.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmSerializableLambda : kotlin/Annotation { // kotlin.jvm/JvmSerializableLambda|null[1]
    constructor <init>() // kotlin.jvm/JvmSerializableLambda.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmStatic : kotlin/Annotation { // kotlin.jvm/JvmStatic|null[1]
    constructor <init>() // kotlin.jvm/JvmStatic.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmSuppressWildcards : kotlin/Annotation { // kotlin.jvm/JvmSuppressWildcards|null[1]
    constructor <init>(kotlin/Boolean = ...) // kotlin.jvm/JvmSuppressWildcards.<init>|<init>(kotlin.Boolean){}[1]

    final val suppress // kotlin.jvm/JvmSuppressWildcards.suppress|{}suppress[1]
        final fun <get-suppress>(): kotlin/Boolean // kotlin.jvm/JvmSuppressWildcards.suppress.<get-suppress>|<get-suppress>(){}[1]
}

open annotation class kotlin.jvm/JvmSynthetic : kotlin/Annotation { // kotlin.jvm/JvmSynthetic|null[1]
    constructor <init>() // kotlin.jvm/JvmSynthetic.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/JvmWildcard : kotlin/Annotation { // kotlin.jvm/JvmWildcard|null[1]
    constructor <init>() // kotlin.jvm/JvmWildcard.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/Strictfp : kotlin/Annotation { // kotlin.jvm/Strictfp|null[1]
    constructor <init>() // kotlin.jvm/Strictfp.<init>|<init>(){}[1]
}

open annotation class kotlin.jvm/Transient : kotlin/Annotation { // kotlin.jvm/Transient|null[1]
    constructor <init>() // kotlin.jvm/Transient.<init>|<init>(){}[1]
}

open annotation class kotlin.reflect/AssociatedObjectKey : kotlin/Annotation { // kotlin.reflect/AssociatedObjectKey|null[0]
    constructor <init>() // kotlin.reflect/AssociatedObjectKey.<init>|<init>(){}[0]
}

open annotation class kotlin.reflect/ExperimentalAssociatedObjects : kotlin/Annotation { // kotlin.reflect/ExperimentalAssociatedObjects|null[0]
    constructor <init>() // kotlin.reflect/ExperimentalAssociatedObjects.<init>|<init>(){}[0]
}

open annotation class kotlin.time/ExperimentalTime : kotlin/Annotation { // kotlin.time/ExperimentalTime|null[0]
    constructor <init>() // kotlin.time/ExperimentalTime.<init>|<init>(){}[0]
}

open annotation class kotlin.uuid/ExperimentalUuidApi : kotlin/Annotation { // kotlin.uuid/ExperimentalUuidApi|null[0]
    constructor <init>() // kotlin.uuid/ExperimentalUuidApi.<init>|<init>(){}[0]
}

open annotation class kotlin/BuilderInference : kotlin/Annotation { // kotlin/BuilderInference|null[0]
    constructor <init>() // kotlin/BuilderInference.<init>|<init>(){}[0]
}

open annotation class kotlin/ConsistentCopyVisibility : kotlin/Annotation { // kotlin/ConsistentCopyVisibility|null[0]
    constructor <init>() // kotlin/ConsistentCopyVisibility.<init>|<init>(){}[0]
}

open annotation class kotlin/ContextFunctionTypeParams : kotlin/Annotation { // kotlin/ContextFunctionTypeParams|null[0]
    constructor <init>(kotlin/Int) // kotlin/ContextFunctionTypeParams.<init>|<init>(kotlin.Int){}[0]

    final val count // kotlin/ContextFunctionTypeParams.count|{}count[0]
        final fun <get-count>(): kotlin/Int // kotlin/ContextFunctionTypeParams.count.<get-count>|<get-count>(){}[0]
}

open annotation class kotlin/Deprecated : kotlin/Annotation { // kotlin/Deprecated|null[0]
    constructor <init>(kotlin/String, kotlin/ReplaceWith = ..., kotlin/DeprecationLevel = ...) // kotlin/Deprecated.<init>|<init>(kotlin.String;kotlin.ReplaceWith;kotlin.DeprecationLevel){}[0]

    final val level // kotlin/Deprecated.level|{}level[0]
        final fun <get-level>(): kotlin/DeprecationLevel // kotlin/Deprecated.level.<get-level>|<get-level>(){}[0]
    final val message // kotlin/Deprecated.message|{}message[0]
        final fun <get-message>(): kotlin/String // kotlin/Deprecated.message.<get-message>|<get-message>(){}[0]
    final val replaceWith // kotlin/Deprecated.replaceWith|{}replaceWith[0]
        final fun <get-replaceWith>(): kotlin/ReplaceWith // kotlin/Deprecated.replaceWith.<get-replaceWith>|<get-replaceWith>(){}[0]
}

open annotation class kotlin/DeprecatedSinceKotlin : kotlin/Annotation { // kotlin/DeprecatedSinceKotlin|null[0]
    constructor <init>(kotlin/String = ..., kotlin/String = ..., kotlin/String = ...) // kotlin/DeprecatedSinceKotlin.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]

    final val errorSince // kotlin/DeprecatedSinceKotlin.errorSince|{}errorSince[0]
        final fun <get-errorSince>(): kotlin/String // kotlin/DeprecatedSinceKotlin.errorSince.<get-errorSince>|<get-errorSince>(){}[0]
    final val hiddenSince // kotlin/DeprecatedSinceKotlin.hiddenSince|{}hiddenSince[0]
        final fun <get-hiddenSince>(): kotlin/String // kotlin/DeprecatedSinceKotlin.hiddenSince.<get-hiddenSince>|<get-hiddenSince>(){}[0]
    final val warningSince // kotlin/DeprecatedSinceKotlin.warningSince|{}warningSince[0]
        final fun <get-warningSince>(): kotlin/String // kotlin/DeprecatedSinceKotlin.warningSince.<get-warningSince>|<get-warningSince>(){}[0]
}

open annotation class kotlin/DslMarker : kotlin/Annotation { // kotlin/DslMarker|null[0]
    constructor <init>() // kotlin/DslMarker.<init>|<init>(){}[0]
}

open annotation class kotlin/ExperimentalMultiplatform : kotlin/Annotation { // kotlin/ExperimentalMultiplatform|null[0]
    constructor <init>() // kotlin/ExperimentalMultiplatform.<init>|<init>(){}[0]
}

open annotation class kotlin/ExperimentalStdlibApi : kotlin/Annotation { // kotlin/ExperimentalStdlibApi|null[0]
    constructor <init>() // kotlin/ExperimentalStdlibApi.<init>|<init>(){}[0]
}

open annotation class kotlin/ExperimentalSubclassOptIn : kotlin/Annotation { // kotlin/ExperimentalSubclassOptIn|null[0]
    constructor <init>() // kotlin/ExperimentalSubclassOptIn.<init>|<init>(){}[0]
}

open annotation class kotlin/ExperimentalUnsignedTypes : kotlin/Annotation { // kotlin/ExperimentalUnsignedTypes|null[0]
    constructor <init>() // kotlin/ExperimentalUnsignedTypes.<init>|<init>(){}[0]
}

open annotation class kotlin/ExposedCopyVisibility : kotlin/Annotation { // kotlin/ExposedCopyVisibility|null[0]
    constructor <init>() // kotlin/ExposedCopyVisibility.<init>|<init>(){}[0]
}

open annotation class kotlin/ExtensionFunctionType : kotlin/Annotation { // kotlin/ExtensionFunctionType|null[0]
    constructor <init>() // kotlin/ExtensionFunctionType.<init>|<init>(){}[0]
}

open annotation class kotlin/OptIn : kotlin/Annotation { // kotlin/OptIn|null[0]
    constructor <init>(kotlin/Array<out kotlin.reflect/KClass<out kotlin/Annotation>>...) // kotlin/OptIn.<init>|<init>(kotlin.Array<out|kotlin.reflect.KClass<out|kotlin.Annotation>>...){}[0]

    final val markerClass // kotlin/OptIn.markerClass|{}markerClass[0]
        final fun <get-markerClass>(): kotlin/Array<out kotlin.reflect/KClass<out kotlin/Annotation>> // kotlin/OptIn.markerClass.<get-markerClass>|<get-markerClass>(){}[0]
}

open annotation class kotlin/OptionalExpectation : kotlin/Annotation { // kotlin/OptionalExpectation|null[0]
    constructor <init>() // kotlin/OptionalExpectation.<init>|<init>(){}[0]
}

open annotation class kotlin/OverloadResolutionByLambdaReturnType : kotlin/Annotation { // kotlin/OverloadResolutionByLambdaReturnType|null[0]
    constructor <init>() // kotlin/OverloadResolutionByLambdaReturnType.<init>|<init>(){}[0]
}

open annotation class kotlin/ParameterName : kotlin/Annotation { // kotlin/ParameterName|null[0]
    constructor <init>(kotlin/String) // kotlin/ParameterName.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin/ParameterName.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin/ParameterName.name.<get-name>|<get-name>(){}[0]
}

open annotation class kotlin/PublishedApi : kotlin/Annotation { // kotlin/PublishedApi|null[0]
    constructor <init>() // kotlin/PublishedApi.<init>|<init>(){}[0]
}

open annotation class kotlin/ReplaceWith : kotlin/Annotation { // kotlin/ReplaceWith|null[0]
    constructor <init>(kotlin/String, kotlin/Array<out kotlin/String>...) // kotlin/ReplaceWith.<init>|<init>(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]

    final val expression // kotlin/ReplaceWith.expression|{}expression[0]
        final fun <get-expression>(): kotlin/String // kotlin/ReplaceWith.expression.<get-expression>|<get-expression>(){}[0]
    final val imports // kotlin/ReplaceWith.imports|{}imports[0]
        final fun <get-imports>(): kotlin/Array<out kotlin/String> // kotlin/ReplaceWith.imports.<get-imports>|<get-imports>(){}[0]
}

open annotation class kotlin/RequiresOptIn : kotlin/Annotation { // kotlin/RequiresOptIn|null[0]
    constructor <init>(kotlin/String = ..., kotlin/RequiresOptIn.Level = ...) // kotlin/RequiresOptIn.<init>|<init>(kotlin.String;kotlin.RequiresOptIn.Level){}[0]

    final val level // kotlin/RequiresOptIn.level|{}level[0]
        final fun <get-level>(): kotlin/RequiresOptIn.Level // kotlin/RequiresOptIn.level.<get-level>|<get-level>(){}[0]
    final val message // kotlin/RequiresOptIn.message|{}message[0]
        final fun <get-message>(): kotlin/String // kotlin/RequiresOptIn.message.<get-message>|<get-message>(){}[0]

    final enum class Level : kotlin/Enum<kotlin/RequiresOptIn.Level> { // kotlin/RequiresOptIn.Level|null[0]
        enum entry ERROR // kotlin/RequiresOptIn.Level.ERROR|null[0]
        enum entry WARNING // kotlin/RequiresOptIn.Level.WARNING|null[0]

        final val entries // kotlin/RequiresOptIn.Level.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin/RequiresOptIn.Level> // kotlin/RequiresOptIn.Level.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): kotlin/RequiresOptIn.Level // kotlin/RequiresOptIn.Level.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<kotlin/RequiresOptIn.Level> // kotlin/RequiresOptIn.Level.values|values#static(){}[0]
    }
}

open annotation class kotlin/SinceKotlin : kotlin/Annotation { // kotlin/SinceKotlin|null[0]
    constructor <init>(kotlin/String) // kotlin/SinceKotlin.<init>|<init>(kotlin.String){}[0]

    final val version // kotlin/SinceKotlin.version|{}version[0]
        final fun <get-version>(): kotlin/String // kotlin/SinceKotlin.version.<get-version>|<get-version>(){}[0]
}

open annotation class kotlin/SubclassOptInRequired : kotlin/Annotation { // kotlin/SubclassOptInRequired|null[0]
    constructor <init>(kotlin/Array<out kotlin.reflect/KClass<out kotlin/Annotation>>...) // kotlin/SubclassOptInRequired.<init>|<init>(kotlin.Array<out|kotlin.reflect.KClass<out|kotlin.Annotation>>...){}[0]

    final val markerClass // kotlin/SubclassOptInRequired.markerClass|{}markerClass[0]
        final fun <get-markerClass>(): kotlin/Array<out kotlin.reflect/KClass<out kotlin/Annotation>> // kotlin/SubclassOptInRequired.markerClass.<get-markerClass>|<get-markerClass>(){}[0]
}

open annotation class kotlin/Suppress : kotlin/Annotation { // kotlin/Suppress|null[0]
    constructor <init>(kotlin/Array<out kotlin/String>...) // kotlin/Suppress.<init>|<init>(kotlin.Array<out|kotlin.String>...){}[0]

    final val names // kotlin/Suppress.names|{}names[0]
        final fun <get-names>(): kotlin/Array<out kotlin/String> // kotlin/Suppress.names.<get-names>|<get-names>(){}[0]
}

open annotation class kotlin/UnsafeVariance : kotlin/Annotation { // kotlin/UnsafeVariance|null[0]
    constructor <init>() // kotlin/UnsafeVariance.<init>|<init>(){}[0]
}

final enum class kotlin.annotation/AnnotationRetention : kotlin/Enum<kotlin.annotation/AnnotationRetention> { // kotlin.annotation/AnnotationRetention|null[0]
    enum entry BINARY // kotlin.annotation/AnnotationRetention.BINARY|null[0]
    enum entry RUNTIME // kotlin.annotation/AnnotationRetention.RUNTIME|null[0]
    enum entry SOURCE // kotlin.annotation/AnnotationRetention.SOURCE|null[0]

    final val entries // kotlin.annotation/AnnotationRetention.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.annotation/AnnotationRetention> // kotlin.annotation/AnnotationRetention.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.annotation/AnnotationRetention // kotlin.annotation/AnnotationRetention.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.annotation/AnnotationRetention> // kotlin.annotation/AnnotationRetention.values|values#static(){}[0]
}

final enum class kotlin.annotation/AnnotationTarget : kotlin/Enum<kotlin.annotation/AnnotationTarget> { // kotlin.annotation/AnnotationTarget|null[0]
    enum entry ANNOTATION_CLASS // kotlin.annotation/AnnotationTarget.ANNOTATION_CLASS|null[0]
    enum entry CLASS // kotlin.annotation/AnnotationTarget.CLASS|null[0]
    enum entry CONSTRUCTOR // kotlin.annotation/AnnotationTarget.CONSTRUCTOR|null[0]
    enum entry EXPRESSION // kotlin.annotation/AnnotationTarget.EXPRESSION|null[0]
    enum entry FIELD // kotlin.annotation/AnnotationTarget.FIELD|null[0]
    enum entry FILE // kotlin.annotation/AnnotationTarget.FILE|null[0]
    enum entry FUNCTION // kotlin.annotation/AnnotationTarget.FUNCTION|null[0]
    enum entry LOCAL_VARIABLE // kotlin.annotation/AnnotationTarget.LOCAL_VARIABLE|null[0]
    enum entry PROPERTY // kotlin.annotation/AnnotationTarget.PROPERTY|null[0]
    enum entry PROPERTY_GETTER // kotlin.annotation/AnnotationTarget.PROPERTY_GETTER|null[0]
    enum entry PROPERTY_SETTER // kotlin.annotation/AnnotationTarget.PROPERTY_SETTER|null[0]
    enum entry TYPE // kotlin.annotation/AnnotationTarget.TYPE|null[0]
    enum entry TYPEALIAS // kotlin.annotation/AnnotationTarget.TYPEALIAS|null[0]
    enum entry TYPE_PARAMETER // kotlin.annotation/AnnotationTarget.TYPE_PARAMETER|null[0]
    enum entry VALUE_PARAMETER // kotlin.annotation/AnnotationTarget.VALUE_PARAMETER|null[0]

    final val entries // kotlin.annotation/AnnotationTarget.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.annotation/AnnotationTarget> // kotlin.annotation/AnnotationTarget.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.annotation/AnnotationTarget // kotlin.annotation/AnnotationTarget.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.annotation/AnnotationTarget> // kotlin.annotation/AnnotationTarget.values|values#static(){}[0]
}

final enum class kotlin.contracts/InvocationKind : kotlin/Enum<kotlin.contracts/InvocationKind> { // kotlin.contracts/InvocationKind|null[0]
    enum entry AT_LEAST_ONCE // kotlin.contracts/InvocationKind.AT_LEAST_ONCE|null[0]
    enum entry AT_MOST_ONCE // kotlin.contracts/InvocationKind.AT_MOST_ONCE|null[0]
    enum entry EXACTLY_ONCE // kotlin.contracts/InvocationKind.EXACTLY_ONCE|null[0]
    enum entry UNKNOWN // kotlin.contracts/InvocationKind.UNKNOWN|null[0]

    final val entries // kotlin.contracts/InvocationKind.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.contracts/InvocationKind> // kotlin.contracts/InvocationKind.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.contracts/InvocationKind // kotlin.contracts/InvocationKind.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.contracts/InvocationKind> // kotlin.contracts/InvocationKind.values|values#static(){}[0]
}

final enum class kotlin.coroutines.intrinsics/CoroutineSingletons : kotlin/Enum<kotlin.coroutines.intrinsics/CoroutineSingletons> { // kotlin.coroutines.intrinsics/CoroutineSingletons|null[0]
    enum entry COROUTINE_SUSPENDED // kotlin.coroutines.intrinsics/CoroutineSingletons.COROUTINE_SUSPENDED|null[0]
    enum entry RESUMED // kotlin.coroutines.intrinsics/CoroutineSingletons.RESUMED|null[0]
    enum entry UNDECIDED // kotlin.coroutines.intrinsics/CoroutineSingletons.UNDECIDED|null[0]

    final val entries // kotlin.coroutines.intrinsics/CoroutineSingletons.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.coroutines.intrinsics/CoroutineSingletons> // kotlin.coroutines.intrinsics/CoroutineSingletons.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.coroutines.intrinsics/CoroutineSingletons // kotlin.coroutines.intrinsics/CoroutineSingletons.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.coroutines.intrinsics/CoroutineSingletons> // kotlin.coroutines.intrinsics/CoroutineSingletons.values|values#static(){}[0]
}

final enum class kotlin.reflect/KVariance : kotlin/Enum<kotlin.reflect/KVariance> { // kotlin.reflect/KVariance|null[0]
    enum entry IN // kotlin.reflect/KVariance.IN|null[0]
    enum entry INVARIANT // kotlin.reflect/KVariance.INVARIANT|null[0]
    enum entry OUT // kotlin.reflect/KVariance.OUT|null[0]

    final val entries // kotlin.reflect/KVariance.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.reflect/KVariance> // kotlin.reflect/KVariance.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.reflect/KVariance // kotlin.reflect/KVariance.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.reflect/KVariance> // kotlin.reflect/KVariance.values|values#static(){}[0]
}

final enum class kotlin.text/CharCategory : kotlin/Enum<kotlin.text/CharCategory> { // kotlin.text/CharCategory|null[0]
    enum entry COMBINING_SPACING_MARK // kotlin.text/CharCategory.COMBINING_SPACING_MARK|null[0]
    enum entry CONNECTOR_PUNCTUATION // kotlin.text/CharCategory.CONNECTOR_PUNCTUATION|null[0]
    enum entry CONTROL // kotlin.text/CharCategory.CONTROL|null[0]
    enum entry CURRENCY_SYMBOL // kotlin.text/CharCategory.CURRENCY_SYMBOL|null[0]
    enum entry DASH_PUNCTUATION // kotlin.text/CharCategory.DASH_PUNCTUATION|null[0]
    enum entry DECIMAL_DIGIT_NUMBER // kotlin.text/CharCategory.DECIMAL_DIGIT_NUMBER|null[0]
    enum entry ENCLOSING_MARK // kotlin.text/CharCategory.ENCLOSING_MARK|null[0]
    enum entry END_PUNCTUATION // kotlin.text/CharCategory.END_PUNCTUATION|null[0]
    enum entry FINAL_QUOTE_PUNCTUATION // kotlin.text/CharCategory.FINAL_QUOTE_PUNCTUATION|null[0]
    enum entry FORMAT // kotlin.text/CharCategory.FORMAT|null[0]
    enum entry INITIAL_QUOTE_PUNCTUATION // kotlin.text/CharCategory.INITIAL_QUOTE_PUNCTUATION|null[0]
    enum entry LETTER_NUMBER // kotlin.text/CharCategory.LETTER_NUMBER|null[0]
    enum entry LINE_SEPARATOR // kotlin.text/CharCategory.LINE_SEPARATOR|null[0]
    enum entry LOWERCASE_LETTER // kotlin.text/CharCategory.LOWERCASE_LETTER|null[0]
    enum entry MATH_SYMBOL // kotlin.text/CharCategory.MATH_SYMBOL|null[0]
    enum entry MODIFIER_LETTER // kotlin.text/CharCategory.MODIFIER_LETTER|null[0]
    enum entry MODIFIER_SYMBOL // kotlin.text/CharCategory.MODIFIER_SYMBOL|null[0]
    enum entry NON_SPACING_MARK // kotlin.text/CharCategory.NON_SPACING_MARK|null[0]
    enum entry OTHER_LETTER // kotlin.text/CharCategory.OTHER_LETTER|null[0]
    enum entry OTHER_NUMBER // kotlin.text/CharCategory.OTHER_NUMBER|null[0]
    enum entry OTHER_PUNCTUATION // kotlin.text/CharCategory.OTHER_PUNCTUATION|null[0]
    enum entry OTHER_SYMBOL // kotlin.text/CharCategory.OTHER_SYMBOL|null[0]
    enum entry PARAGRAPH_SEPARATOR // kotlin.text/CharCategory.PARAGRAPH_SEPARATOR|null[0]
    enum entry PRIVATE_USE // kotlin.text/CharCategory.PRIVATE_USE|null[0]
    enum entry SPACE_SEPARATOR // kotlin.text/CharCategory.SPACE_SEPARATOR|null[0]
    enum entry START_PUNCTUATION // kotlin.text/CharCategory.START_PUNCTUATION|null[0]
    enum entry SURROGATE // kotlin.text/CharCategory.SURROGATE|null[0]
    enum entry TITLECASE_LETTER // kotlin.text/CharCategory.TITLECASE_LETTER|null[0]
    enum entry UNASSIGNED // kotlin.text/CharCategory.UNASSIGNED|null[0]
    enum entry UPPERCASE_LETTER // kotlin.text/CharCategory.UPPERCASE_LETTER|null[0]

    final val code // kotlin.text/CharCategory.code|{}code[0]
        final fun <get-code>(): kotlin/String // kotlin.text/CharCategory.code.<get-code>|<get-code>(){}[0]
    final val entries // kotlin.text/CharCategory.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.text/CharCategory> // kotlin.text/CharCategory.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun contains(kotlin/Char): kotlin/Boolean // kotlin.text/CharCategory.contains|contains(kotlin.Char){}[0]
    final fun valueOf(kotlin/String): kotlin.text/CharCategory // kotlin.text/CharCategory.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.text/CharCategory> // kotlin.text/CharCategory.values|values#static(){}[0]

    final object Companion // kotlin.text/CharCategory.Companion|null[0]
}

final enum class kotlin.text/RegexOption : kotlin/Enum<kotlin.text/RegexOption> { // kotlin.text/RegexOption|null[0]
    enum entry IGNORE_CASE // kotlin.text/RegexOption.IGNORE_CASE|null[0]
    enum entry MULTILINE // kotlin.text/RegexOption.MULTILINE|null[0]

    final val entries // kotlin.text/RegexOption.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.text/RegexOption> // kotlin.text/RegexOption.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.text/RegexOption // kotlin.text/RegexOption.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.text/RegexOption> // kotlin.text/RegexOption.values|values#static(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    enum entry CANON_EQ // kotlin.text/RegexOption.CANON_EQ|null[0]

    // Targets: [native, wasmJs, wasmWasi]
    enum entry COMMENTS // kotlin.text/RegexOption.COMMENTS|null[0]

    // Targets: [native, wasmJs, wasmWasi]
    enum entry DOT_MATCHES_ALL // kotlin.text/RegexOption.DOT_MATCHES_ALL|null[0]

    // Targets: [native, wasmJs, wasmWasi]
    enum entry LITERAL // kotlin.text/RegexOption.LITERAL|null[0]

    // Targets: [native, wasmJs, wasmWasi]
    enum entry UNIX_LINES // kotlin.text/RegexOption.UNIX_LINES|null[0]

    // Targets: [js]
    final val value // kotlin.text/RegexOption.value|{}value[0]
        final fun <get-value>(): kotlin/String // kotlin.text/RegexOption.value.<get-value>|<get-value>(){}[0]
}

final enum class kotlin.time/DurationUnit : kotlin/Enum<kotlin.time/DurationUnit> { // kotlin.time/DurationUnit|null[0]
    enum entry DAYS // kotlin.time/DurationUnit.DAYS|null[0]
    enum entry HOURS // kotlin.time/DurationUnit.HOURS|null[0]
    enum entry MICROSECONDS // kotlin.time/DurationUnit.MICROSECONDS|null[0]
    enum entry MILLISECONDS // kotlin.time/DurationUnit.MILLISECONDS|null[0]
    enum entry MINUTES // kotlin.time/DurationUnit.MINUTES|null[0]
    enum entry NANOSECONDS // kotlin.time/DurationUnit.NANOSECONDS|null[0]
    enum entry SECONDS // kotlin.time/DurationUnit.SECONDS|null[0]

    final val entries // kotlin.time/DurationUnit.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.time/DurationUnit> // kotlin.time/DurationUnit.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.time/DurationUnit // kotlin.time/DurationUnit.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.time/DurationUnit> // kotlin.time/DurationUnit.values|values#static(){}[0]
}

final enum class kotlin/DeprecationLevel : kotlin/Enum<kotlin/DeprecationLevel> { // kotlin/DeprecationLevel|null[0]
    enum entry ERROR // kotlin/DeprecationLevel.ERROR|null[0]
    enum entry HIDDEN // kotlin/DeprecationLevel.HIDDEN|null[0]
    enum entry WARNING // kotlin/DeprecationLevel.WARNING|null[0]

    final val entries // kotlin/DeprecationLevel.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin/DeprecationLevel> // kotlin/DeprecationLevel.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin/DeprecationLevel // kotlin/DeprecationLevel.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin/DeprecationLevel> // kotlin/DeprecationLevel.values|values#static(){}[0]
}

final enum class kotlin/LazyThreadSafetyMode : kotlin/Enum<kotlin/LazyThreadSafetyMode> { // kotlin/LazyThreadSafetyMode|null[0]
    enum entry NONE // kotlin/LazyThreadSafetyMode.NONE|null[0]
    enum entry PUBLICATION // kotlin/LazyThreadSafetyMode.PUBLICATION|null[0]
    enum entry SYNCHRONIZED // kotlin/LazyThreadSafetyMode.SYNCHRONIZED|null[0]

    final val entries // kotlin/LazyThreadSafetyMode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin/LazyThreadSafetyMode> // kotlin/LazyThreadSafetyMode.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin/LazyThreadSafetyMode // kotlin/LazyThreadSafetyMode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin/LazyThreadSafetyMode> // kotlin/LazyThreadSafetyMode.values|values#static(){}[0]
}

abstract fun interface <#A: in kotlin/Any?, #B: out kotlin/Any?> kotlin.properties/PropertyDelegateProvider { // kotlin.properties/PropertyDelegateProvider|null[0]
    abstract fun provideDelegate(#A, kotlin.reflect/KProperty<*>): #B // kotlin.properties/PropertyDelegateProvider.provideDelegate|provideDelegate(1:0;kotlin.reflect.KProperty<*>){}[0]
}

abstract fun interface <#A: in kotlin/Any?, #B: out kotlin/Any?> kotlin.properties/ReadOnlyProperty { // kotlin.properties/ReadOnlyProperty|null[0]
    abstract fun getValue(#A, kotlin.reflect/KProperty<*>): #B // kotlin.properties/ReadOnlyProperty.getValue|getValue(1:0;kotlin.reflect.KProperty<*>){}[0]
}

abstract fun interface <#A: kotlin/Any?> kotlin/Comparator { // kotlin/Comparator|null[0]
    abstract fun compare(#A, #A): kotlin/Int // kotlin/Comparator.compare|compare(1:0;1:0){}[0]
}

abstract interface <#A: in kotlin/Any?, #B: kotlin/Any?> kotlin.properties/ReadWriteProperty : kotlin.properties/ReadOnlyProperty<#A, #B> { // kotlin.properties/ReadWriteProperty|null[0]
    abstract fun getValue(#A, kotlin.reflect/KProperty<*>): #B // kotlin.properties/ReadWriteProperty.getValue|getValue(1:0;kotlin.reflect.KProperty<*>){}[0]
    abstract fun setValue(#A, kotlin.reflect/KProperty<*>, #B) // kotlin.properties/ReadWriteProperty.setValue|setValue(1:0;kotlin.reflect.KProperty<*>;1:1){}[0]
}

abstract interface <#A: in kotlin/Any?> kotlin.coroutines/Continuation { // kotlin.coroutines/Continuation|null[0]
    abstract val context // kotlin.coroutines/Continuation.context|{}context[0]
        abstract fun <get-context>(): kotlin.coroutines/CoroutineContext // kotlin.coroutines/Continuation.context.<get-context>|<get-context>(){}[0]

    abstract fun resumeWith(kotlin/Result<#A>) // kotlin.coroutines/Continuation.resumeWith|resumeWith(kotlin.Result<1:0>){}[0]
}

abstract interface <#A: in kotlin/Any?> kotlin/Comparable { // kotlin/Comparable|null[0]
    abstract fun compareTo(#A): kotlin/Int // kotlin/Comparable.compareTo|compareTo(1:0){}[0]
}

abstract interface <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> kotlin.reflect/KMutableProperty2 : kotlin.reflect/KMutableProperty<#C>, kotlin.reflect/KProperty2<#A, #B, #C> { // kotlin.reflect/KMutableProperty2|null[0]
    abstract fun set(#A, #B, #C) // kotlin.reflect/KMutableProperty2.set|set(1:0;1:1;1:2){}[0]
}

abstract interface <#A: kotlin/Any?, #B: kotlin/Any?, #C: out kotlin/Any?> kotlin.reflect/KProperty2 : kotlin.reflect/KProperty<#C>, kotlin/Function2<#A, #B, #C> { // kotlin.reflect/KProperty2|null[0]
    abstract fun get(#A, #B): #C // kotlin.reflect/KProperty2.get|get(1:0;1:1){}[0]

    // Targets: [native]
    abstract fun invoke(#A, #B): #C // kotlin.reflect/KProperty2.invoke|invoke(1:0;1:1){}[0]
}

abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/MutableMap : kotlin.collections/Map<#A, #B> { // kotlin.collections/MutableMap|null[0]
    abstract val entries // kotlin.collections/MutableMap.entries|{}entries[0]
        abstract fun <get-entries>(): kotlin.collections/MutableSet<kotlin.collections/MutableMap.MutableEntry<#A, #B>> // kotlin.collections/MutableMap.entries.<get-entries>|<get-entries>(){}[0]
    abstract val keys // kotlin.collections/MutableMap.keys|{}keys[0]
        abstract fun <get-keys>(): kotlin.collections/MutableSet<#A> // kotlin.collections/MutableMap.keys.<get-keys>|<get-keys>(){}[0]
    abstract val values // kotlin.collections/MutableMap.values|{}values[0]
        abstract fun <get-values>(): kotlin.collections/MutableCollection<#B> // kotlin.collections/MutableMap.values.<get-values>|<get-values>(){}[0]

    abstract fun clear() // kotlin.collections/MutableMap.clear|clear(){}[0]
    abstract fun put(#A, #B): #B? // kotlin.collections/MutableMap.put|put(1:0;1:1){}[0]
    abstract fun putAll(kotlin.collections/Map<out #A, #B>) // kotlin.collections/MutableMap.putAll|putAll(kotlin.collections.Map<out|1:0,1:1>){}[0]
    abstract fun remove(#A): #B? // kotlin.collections/MutableMap.remove|remove(1:0){}[0]

    abstract interface <#A1: kotlin/Any?, #B1: kotlin/Any?> MutableEntry : kotlin.collections/Map.Entry<#A1, #B1> { // kotlin.collections/MutableMap.MutableEntry|null[0]
        abstract fun setValue(#B1): #B1 // kotlin.collections/MutableMap.MutableEntry.setValue|setValue(1:1){}[0]
    }

    // Targets: [js]
    open fun asJsMapView(): kotlin.js.collections/JsMap<#A, #B> // kotlin.collections/MutableMap.asJsMapView|asJsMapView(){}[0]
}

abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.reflect/KMutableProperty1 : kotlin.reflect/KMutableProperty<#B>, kotlin.reflect/KProperty1<#A, #B> { // kotlin.reflect/KMutableProperty1|null[0]
    abstract fun set(#A, #B) // kotlin.reflect/KMutableProperty1.set|set(1:0;1:1){}[0]
}

abstract interface <#A: kotlin/Any?, #B: out kotlin/Any?> kotlin.collections/Grouping { // kotlin.collections/Grouping|null[0]
    abstract fun keyOf(#A): #B // kotlin.collections/Grouping.keyOf|keyOf(1:0){}[0]
    abstract fun sourceIterator(): kotlin.collections/Iterator<#A> // kotlin.collections/Grouping.sourceIterator|sourceIterator(){}[0]
}

abstract interface <#A: kotlin/Any?, #B: out kotlin/Any?> kotlin.collections/Map { // kotlin.collections/Map|null[0]
    abstract val entries // kotlin.collections/Map.entries|{}entries[0]
        abstract fun <get-entries>(): kotlin.collections/Set<kotlin.collections/Map.Entry<#A, #B>> // kotlin.collections/Map.entries.<get-entries>|<get-entries>(){}[0]
    abstract val keys // kotlin.collections/Map.keys|{}keys[0]
        abstract fun <get-keys>(): kotlin.collections/Set<#A> // kotlin.collections/Map.keys.<get-keys>|<get-keys>(){}[0]
    abstract val size // kotlin.collections/Map.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlin.collections/Map.size.<get-size>|<get-size>(){}[0]
    abstract val values // kotlin.collections/Map.values|{}values[0]
        abstract fun <get-values>(): kotlin.collections/Collection<#B> // kotlin.collections/Map.values.<get-values>|<get-values>(){}[0]

    abstract fun containsKey(#A): kotlin/Boolean // kotlin.collections/Map.containsKey|containsKey(1:0){}[0]
    abstract fun containsValue(#B): kotlin/Boolean // kotlin.collections/Map.containsValue|containsValue(1:1){}[0]
    abstract fun get(#A): #B? // kotlin.collections/Map.get|get(1:0){}[0]
    abstract fun isEmpty(): kotlin/Boolean // kotlin.collections/Map.isEmpty|isEmpty(){}[0]

    abstract interface <#A1: out kotlin/Any?, #B1: out kotlin/Any?> Entry { // kotlin.collections/Map.Entry|null[0]
        abstract val key // kotlin.collections/Map.Entry.key|{}key[0]
            abstract fun <get-key>(): #A1 // kotlin.collections/Map.Entry.key.<get-key>|<get-key>(){}[0]
        abstract val value // kotlin.collections/Map.Entry.value|{}value[0]
            abstract fun <get-value>(): #B1 // kotlin.collections/Map.Entry.value.<get-value>|<get-value>(){}[0]
    }

    // Targets: [js]
    open fun asJsReadonlyMapView(): kotlin.js.collections/JsReadonlyMap<#A, #B> // kotlin.collections/Map.asJsReadonlyMapView|asJsReadonlyMapView(){}[0]
}

abstract interface <#A: kotlin/Any?, #B: out kotlin/Any?> kotlin.reflect/KProperty1 : kotlin.reflect/KProperty<#B>, kotlin/Function1<#A, #B> { // kotlin.reflect/KProperty1|null[0]
    abstract fun get(#A): #B // kotlin.reflect/KProperty1.get|get(1:0){}[0]

    // Targets: [native]
    abstract fun invoke(#A): #B // kotlin.reflect/KProperty1.invoke|invoke(1:0){}[0]
}

abstract interface <#A: kotlin/Any?> kotlin.collections/MutableCollection : kotlin.collections/Collection<#A>, kotlin.collections/MutableIterable<#A> { // kotlin.collections/MutableCollection|null[0]
    abstract fun add(#A): kotlin/Boolean // kotlin.collections/MutableCollection.add|add(1:0){}[0]
    abstract fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableCollection.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun clear() // kotlin.collections/MutableCollection.clear|clear(){}[0]
    abstract fun iterator(): kotlin.collections/MutableIterator<#A> // kotlin.collections/MutableCollection.iterator|iterator(){}[0]
    abstract fun remove(#A): kotlin/Boolean // kotlin.collections/MutableCollection.remove|remove(1:0){}[0]
    abstract fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableCollection.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableCollection.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
}

abstract interface <#A: kotlin/Any?> kotlin.collections/MutableList : kotlin.collections/List<#A>, kotlin.collections/MutableCollection<#A> { // kotlin.collections/MutableList|null[0]
    abstract fun add(#A): kotlin/Boolean // kotlin.collections/MutableList.add|add(1:0){}[0]
    abstract fun add(kotlin/Int, #A) // kotlin.collections/MutableList.add|add(kotlin.Int;1:0){}[0]
    abstract fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableList.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun addAll(kotlin/Int, kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableList.addAll|addAll(kotlin.Int;kotlin.collections.Collection<1:0>){}[0]
    abstract fun clear() // kotlin.collections/MutableList.clear|clear(){}[0]
    abstract fun listIterator(): kotlin.collections/MutableListIterator<#A> // kotlin.collections/MutableList.listIterator|listIterator(){}[0]
    abstract fun listIterator(kotlin/Int): kotlin.collections/MutableListIterator<#A> // kotlin.collections/MutableList.listIterator|listIterator(kotlin.Int){}[0]
    abstract fun remove(#A): kotlin/Boolean // kotlin.collections/MutableList.remove|remove(1:0){}[0]
    abstract fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableList.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun removeAt(kotlin/Int): #A // kotlin.collections/MutableList.removeAt|removeAt(kotlin.Int){}[0]
    abstract fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableList.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun set(kotlin/Int, #A): #A // kotlin.collections/MutableList.set|set(kotlin.Int;1:0){}[0]
    abstract fun subList(kotlin/Int, kotlin/Int): kotlin.collections/MutableList<#A> // kotlin.collections/MutableList.subList|subList(kotlin.Int;kotlin.Int){}[0]

    // Targets: [js]
    open fun asJsArrayView(): kotlin.js.collections/JsArray<#A> // kotlin.collections/MutableList.asJsArrayView|asJsArrayView(){}[0]
}

abstract interface <#A: kotlin/Any?> kotlin.collections/MutableListIterator : kotlin.collections/ListIterator<#A>, kotlin.collections/MutableIterator<#A> { // kotlin.collections/MutableListIterator|null[0]
    abstract fun add(#A) // kotlin.collections/MutableListIterator.add|add(1:0){}[0]
    abstract fun hasNext(): kotlin/Boolean // kotlin.collections/MutableListIterator.hasNext|hasNext(){}[0]
    abstract fun next(): #A // kotlin.collections/MutableListIterator.next|next(){}[0]
    abstract fun remove() // kotlin.collections/MutableListIterator.remove|remove(){}[0]
    abstract fun set(#A) // kotlin.collections/MutableListIterator.set|set(1:0){}[0]
}

abstract interface <#A: kotlin/Any?> kotlin.collections/MutableSet : kotlin.collections/MutableCollection<#A>, kotlin.collections/Set<#A> { // kotlin.collections/MutableSet|null[0]
    abstract fun add(#A): kotlin/Boolean // kotlin.collections/MutableSet.add|add(1:0){}[0]
    abstract fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableSet.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun clear() // kotlin.collections/MutableSet.clear|clear(){}[0]
    abstract fun iterator(): kotlin.collections/MutableIterator<#A> // kotlin.collections/MutableSet.iterator|iterator(){}[0]
    abstract fun remove(#A): kotlin/Boolean // kotlin.collections/MutableSet.remove|remove(1:0){}[0]
    abstract fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableSet.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/MutableSet.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]

    // Targets: [js]
    open fun asJsSetView(): kotlin.js.collections/JsSet<#A> // kotlin.collections/MutableSet.asJsSetView|asJsSetView(){}[0]
}

abstract interface <#A: kotlin/Any?> kotlin.reflect/KMutableProperty : kotlin.reflect/KProperty<#A> // kotlin.reflect/KMutableProperty|null[0]

abstract interface <#A: kotlin/Any?> kotlin.reflect/KMutableProperty0 : kotlin.reflect/KMutableProperty<#A>, kotlin.reflect/KProperty0<#A> { // kotlin.reflect/KMutableProperty0|null[0]
    abstract fun set(#A) // kotlin.reflect/KMutableProperty0.set|set(1:0){}[0]
}

abstract interface <#A: kotlin/Comparable<#A>> kotlin.ranges/ClosedFloatingPointRange : kotlin.ranges/ClosedRange<#A> { // kotlin.ranges/ClosedFloatingPointRange|null[0]
    abstract fun lessThanOrEquals(#A, #A): kotlin/Boolean // kotlin.ranges/ClosedFloatingPointRange.lessThanOrEquals|lessThanOrEquals(1:0;1:0){}[0]
    open fun contains(#A): kotlin/Boolean // kotlin.ranges/ClosedFloatingPointRange.contains|contains(1:0){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/ClosedFloatingPointRange.isEmpty|isEmpty(){}[0]
}

abstract interface <#A: kotlin/Comparable<#A>> kotlin.ranges/ClosedRange { // kotlin.ranges/ClosedRange|null[0]
    abstract val endInclusive // kotlin.ranges/ClosedRange.endInclusive|{}endInclusive[0]
        abstract fun <get-endInclusive>(): #A // kotlin.ranges/ClosedRange.endInclusive.<get-endInclusive>|<get-endInclusive>(){}[0]
    abstract val start // kotlin.ranges/ClosedRange.start|{}start[0]
        abstract fun <get-start>(): #A // kotlin.ranges/ClosedRange.start.<get-start>|<get-start>(){}[0]

    open fun contains(#A): kotlin/Boolean // kotlin.ranges/ClosedRange.contains|contains(1:0){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/ClosedRange.isEmpty|isEmpty(){}[0]
}

abstract interface <#A: kotlin/Comparable<#A>> kotlin.ranges/OpenEndRange { // kotlin.ranges/OpenEndRange|null[0]
    abstract val endExclusive // kotlin.ranges/OpenEndRange.endExclusive|{}endExclusive[0]
        abstract fun <get-endExclusive>(): #A // kotlin.ranges/OpenEndRange.endExclusive.<get-endExclusive>|<get-endExclusive>(){}[0]
    abstract val start // kotlin.ranges/OpenEndRange.start|{}start[0]
        abstract fun <get-start>(): #A // kotlin.ranges/OpenEndRange.start.<get-start>|<get-start>(){}[0]

    open fun contains(#A): kotlin/Boolean // kotlin.ranges/OpenEndRange.contains|contains(1:0){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/OpenEndRange.isEmpty|isEmpty(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/Collection : kotlin.collections/Iterable<#A> { // kotlin.collections/Collection|null[0]
    abstract val size // kotlin.collections/Collection.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlin.collections/Collection.size.<get-size>|<get-size>(){}[0]

    abstract fun contains(#A): kotlin/Boolean // kotlin.collections/Collection.contains|contains(1:0){}[0]
    abstract fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/Collection.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun isEmpty(): kotlin/Boolean // kotlin.collections/Collection.isEmpty|isEmpty(){}[0]
    abstract fun iterator(): kotlin.collections/Iterator<#A> // kotlin.collections/Collection.iterator|iterator(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/Iterable { // kotlin.collections/Iterable|null[0]
    abstract fun iterator(): kotlin.collections/Iterator<#A> // kotlin.collections/Iterable.iterator|iterator(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/Iterator { // kotlin.collections/Iterator|null[0]
    abstract fun hasNext(): kotlin/Boolean // kotlin.collections/Iterator.hasNext|hasNext(){}[0]
    abstract fun next(): #A // kotlin.collections/Iterator.next|next(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/List : kotlin.collections/Collection<#A> { // kotlin.collections/List|null[0]
    abstract val size // kotlin.collections/List.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlin.collections/List.size.<get-size>|<get-size>(){}[0]

    abstract fun contains(#A): kotlin/Boolean // kotlin.collections/List.contains|contains(1:0){}[0]
    abstract fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/List.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun get(kotlin/Int): #A // kotlin.collections/List.get|get(kotlin.Int){}[0]
    abstract fun indexOf(#A): kotlin/Int // kotlin.collections/List.indexOf|indexOf(1:0){}[0]
    abstract fun isEmpty(): kotlin/Boolean // kotlin.collections/List.isEmpty|isEmpty(){}[0]
    abstract fun iterator(): kotlin.collections/Iterator<#A> // kotlin.collections/List.iterator|iterator(){}[0]
    abstract fun lastIndexOf(#A): kotlin/Int // kotlin.collections/List.lastIndexOf|lastIndexOf(1:0){}[0]
    abstract fun listIterator(): kotlin.collections/ListIterator<#A> // kotlin.collections/List.listIterator|listIterator(){}[0]
    abstract fun listIterator(kotlin/Int): kotlin.collections/ListIterator<#A> // kotlin.collections/List.listIterator|listIterator(kotlin.Int){}[0]
    abstract fun subList(kotlin/Int, kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/List.subList|subList(kotlin.Int;kotlin.Int){}[0]

    // Targets: [js]
    open fun asJsReadonlyArrayView(): kotlin.js.collections/JsReadonlyArray<#A> // kotlin.collections/List.asJsReadonlyArrayView|asJsReadonlyArrayView(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/ListIterator : kotlin.collections/Iterator<#A> { // kotlin.collections/ListIterator|null[0]
    abstract fun hasNext(): kotlin/Boolean // kotlin.collections/ListIterator.hasNext|hasNext(){}[0]
    abstract fun hasPrevious(): kotlin/Boolean // kotlin.collections/ListIterator.hasPrevious|hasPrevious(){}[0]
    abstract fun next(): #A // kotlin.collections/ListIterator.next|next(){}[0]
    abstract fun nextIndex(): kotlin/Int // kotlin.collections/ListIterator.nextIndex|nextIndex(){}[0]
    abstract fun previous(): #A // kotlin.collections/ListIterator.previous|previous(){}[0]
    abstract fun previousIndex(): kotlin/Int // kotlin.collections/ListIterator.previousIndex|previousIndex(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/MutableIterable : kotlin.collections/Iterable<#A> { // kotlin.collections/MutableIterable|null[0]
    abstract fun iterator(): kotlin.collections/MutableIterator<#A> // kotlin.collections/MutableIterable.iterator|iterator(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/MutableIterator : kotlin.collections/Iterator<#A> { // kotlin.collections/MutableIterator|null[0]
    abstract fun remove() // kotlin.collections/MutableIterator.remove|remove(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.collections/Set : kotlin.collections/Collection<#A> { // kotlin.collections/Set|null[0]
    abstract val size // kotlin.collections/Set.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlin.collections/Set.size.<get-size>|<get-size>(){}[0]

    abstract fun contains(#A): kotlin/Boolean // kotlin.collections/Set.contains|contains(1:0){}[0]
    abstract fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/Set.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun isEmpty(): kotlin/Boolean // kotlin.collections/Set.isEmpty|isEmpty(){}[0]
    abstract fun iterator(): kotlin.collections/Iterator<#A> // kotlin.collections/Set.iterator|iterator(){}[0]

    // Targets: [js]
    open fun asJsReadonlySetView(): kotlin.js.collections/JsReadonlySet<#A> // kotlin.collections/Set.asJsReadonlySetView|asJsReadonlySetView(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.reflect/KFunction : kotlin.reflect/KCallable<#A>, kotlin/Function<#A> // kotlin.reflect/KFunction|null[0]

abstract interface <#A: out kotlin/Any?> kotlin.reflect/KProperty : kotlin.reflect/KCallable<#A> // kotlin.reflect/KProperty|null[0]

abstract interface <#A: out kotlin/Any?> kotlin.reflect/KProperty0 : kotlin.reflect/KProperty<#A>, kotlin/Function0<#A> { // kotlin.reflect/KProperty0|null[0]
    abstract fun get(): #A // kotlin.reflect/KProperty0.get|get(){}[0]

    // Targets: [native]
    abstract fun invoke(): #A // kotlin.reflect/KProperty0.invoke|invoke(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin.sequences/Sequence { // kotlin.sequences/Sequence|null[0]
    abstract fun iterator(): kotlin.collections/Iterator<#A> // kotlin.sequences/Sequence.iterator|iterator(){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlin/Function // kotlin/Function|null[0]

abstract interface <#A: out kotlin/Any?> kotlin/Lazy { // kotlin/Lazy|null[0]
    abstract val value // kotlin/Lazy.value|{}value[0]
        abstract fun <get-value>(): #A // kotlin/Lazy.value.<get-value>|<get-value>(){}[0]

    abstract fun isInitialized(): kotlin/Boolean // kotlin/Lazy.isInitialized|isInitialized(){}[0]
}

abstract interface kotlin.collections/RandomAccess // kotlin.collections/RandomAccess|null[0]

abstract interface kotlin.contracts/CallsInPlace : kotlin.contracts/Effect // kotlin.contracts/CallsInPlace|null[0]

abstract interface kotlin.contracts/ConditionalEffect : kotlin.contracts/Effect // kotlin.contracts/ConditionalEffect|null[0]

abstract interface kotlin.contracts/ContractBuilder { // kotlin.contracts/ContractBuilder|null[0]
    abstract fun <#A1: kotlin/Any?> callsInPlace(kotlin/Function<#A1>, kotlin.contracts/InvocationKind = ...): kotlin.contracts/CallsInPlace // kotlin.contracts/ContractBuilder.callsInPlace|callsInPlace(kotlin.Function<0:0>;kotlin.contracts.InvocationKind){0§<kotlin.Any?>}[0]
    abstract fun returns(): kotlin.contracts/Returns // kotlin.contracts/ContractBuilder.returns|returns(){}[0]
    abstract fun returns(kotlin/Any?): kotlin.contracts/Returns // kotlin.contracts/ContractBuilder.returns|returns(kotlin.Any?){}[0]
    abstract fun returnsNotNull(): kotlin.contracts/ReturnsNotNull // kotlin.contracts/ContractBuilder.returnsNotNull|returnsNotNull(){}[0]
}

abstract interface kotlin.contracts/Effect // kotlin.contracts/Effect|null[0]

abstract interface kotlin.contracts/Returns : kotlin.contracts/SimpleEffect // kotlin.contracts/Returns|null[0]

abstract interface kotlin.contracts/ReturnsNotNull : kotlin.contracts/SimpleEffect // kotlin.contracts/ReturnsNotNull|null[0]

abstract interface kotlin.contracts/SimpleEffect : kotlin.contracts/Effect { // kotlin.contracts/SimpleEffect|null[0]
    abstract fun implies(kotlin/Boolean): kotlin.contracts/ConditionalEffect // kotlin.contracts/SimpleEffect.implies|implies(kotlin.Boolean){}[0]
}

abstract interface kotlin.coroutines/ContinuationInterceptor : kotlin.coroutines/CoroutineContext.Element { // kotlin.coroutines/ContinuationInterceptor|null[0]
    abstract fun <#A1: kotlin/Any?> interceptContinuation(kotlin.coroutines/Continuation<#A1>): kotlin.coroutines/Continuation<#A1> // kotlin.coroutines/ContinuationInterceptor.interceptContinuation|interceptContinuation(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin.coroutines/CoroutineContext.Element> get(kotlin.coroutines/CoroutineContext.Key<#A1>): #A1? // kotlin.coroutines/ContinuationInterceptor.get|get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}[0]
    open fun minusKey(kotlin.coroutines/CoroutineContext.Key<*>): kotlin.coroutines/CoroutineContext // kotlin.coroutines/ContinuationInterceptor.minusKey|minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}[0]
    open fun releaseInterceptedContinuation(kotlin.coroutines/Continuation<*>) // kotlin.coroutines/ContinuationInterceptor.releaseInterceptedContinuation|releaseInterceptedContinuation(kotlin.coroutines.Continuation<*>){}[0]

    final object Key : kotlin.coroutines/CoroutineContext.Key<kotlin.coroutines/ContinuationInterceptor> // kotlin.coroutines/ContinuationInterceptor.Key|null[0]
}

abstract interface kotlin.coroutines/CoroutineContext { // kotlin.coroutines/CoroutineContext|null[0]
    abstract fun <#A1: kotlin.coroutines/CoroutineContext.Element> get(kotlin.coroutines/CoroutineContext.Key<#A1>): #A1? // kotlin.coroutines/CoroutineContext.get|get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}[0]
    abstract fun <#A1: kotlin/Any?> fold(#A1, kotlin/Function2<#A1, kotlin.coroutines/CoroutineContext.Element, #A1>): #A1 // kotlin.coroutines/CoroutineContext.fold|fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}[0]
    abstract fun minusKey(kotlin.coroutines/CoroutineContext.Key<*>): kotlin.coroutines/CoroutineContext // kotlin.coroutines/CoroutineContext.minusKey|minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}[0]
    open fun plus(kotlin.coroutines/CoroutineContext): kotlin.coroutines/CoroutineContext // kotlin.coroutines/CoroutineContext.plus|plus(kotlin.coroutines.CoroutineContext){}[0]

    abstract interface <#A1: kotlin.coroutines/CoroutineContext.Element> Key // kotlin.coroutines/CoroutineContext.Key|null[0]

    abstract interface Element : kotlin.coroutines/CoroutineContext { // kotlin.coroutines/CoroutineContext.Element|null[0]
        abstract val key // kotlin.coroutines/CoroutineContext.Element.key|{}key[0]
            abstract fun <get-key>(): kotlin.coroutines/CoroutineContext.Key<*> // kotlin.coroutines/CoroutineContext.Element.key.<get-key>|<get-key>(){}[0]

        open fun <#A2: kotlin.coroutines/CoroutineContext.Element> get(kotlin.coroutines/CoroutineContext.Key<#A2>): #A2? // kotlin.coroutines/CoroutineContext.Element.get|get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}[0]
        open fun <#A2: kotlin/Any?> fold(#A2, kotlin/Function2<#A2, kotlin.coroutines/CoroutineContext.Element, #A2>): #A2 // kotlin.coroutines/CoroutineContext.Element.fold|fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}[0]
        open fun minusKey(kotlin.coroutines/CoroutineContext.Key<*>): kotlin.coroutines/CoroutineContext // kotlin.coroutines/CoroutineContext.Element.minusKey|minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}[0]
    }
}

abstract interface kotlin.reflect/KClassifier // kotlin.reflect/KClassifier|null[0]

abstract interface kotlin.reflect/KType { // kotlin.reflect/KType|null[0]
    abstract val arguments // kotlin.reflect/KType.arguments|{}arguments[0]
        abstract fun <get-arguments>(): kotlin.collections/List<kotlin.reflect/KTypeProjection> // kotlin.reflect/KType.arguments.<get-arguments>|<get-arguments>(){}[0]
    abstract val classifier // kotlin.reflect/KType.classifier|{}classifier[0]
        abstract fun <get-classifier>(): kotlin.reflect/KClassifier? // kotlin.reflect/KType.classifier.<get-classifier>|<get-classifier>(){}[0]
    abstract val isMarkedNullable // kotlin.reflect/KType.isMarkedNullable|{}isMarkedNullable[0]
        abstract fun <get-isMarkedNullable>(): kotlin/Boolean // kotlin.reflect/KType.isMarkedNullable.<get-isMarkedNullable>|<get-isMarkedNullable>(){}[0]
}

abstract interface kotlin.reflect/KTypeParameter : kotlin.reflect/KClassifier { // kotlin.reflect/KTypeParameter|null[0]
    abstract val isReified // kotlin.reflect/KTypeParameter.isReified|{}isReified[0]
        abstract fun <get-isReified>(): kotlin/Boolean // kotlin.reflect/KTypeParameter.isReified.<get-isReified>|<get-isReified>(){}[0]
    abstract val name // kotlin.reflect/KTypeParameter.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // kotlin.reflect/KTypeParameter.name.<get-name>|<get-name>(){}[0]
    abstract val upperBounds // kotlin.reflect/KTypeParameter.upperBounds|{}upperBounds[0]
        abstract fun <get-upperBounds>(): kotlin.collections/List<kotlin.reflect/KType> // kotlin.reflect/KTypeParameter.upperBounds.<get-upperBounds>|<get-upperBounds>(){}[0]
    abstract val variance // kotlin.reflect/KTypeParameter.variance|{}variance[0]
        abstract fun <get-variance>(): kotlin.reflect/KVariance // kotlin.reflect/KTypeParameter.variance.<get-variance>|<get-variance>(){}[0]
}

abstract interface kotlin.text/Appendable { // kotlin.text/Appendable|null[0]
    abstract fun append(kotlin/Char): kotlin.text/Appendable // kotlin.text/Appendable.append|append(kotlin.Char){}[0]
    abstract fun append(kotlin/CharSequence?): kotlin.text/Appendable // kotlin.text/Appendable.append|append(kotlin.CharSequence?){}[0]
    abstract fun append(kotlin/CharSequence?, kotlin/Int, kotlin/Int): kotlin.text/Appendable // kotlin.text/Appendable.append|append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}[0]
}

abstract interface kotlin.text/MatchGroupCollection : kotlin.collections/Collection<kotlin.text/MatchGroup?> { // kotlin.text/MatchGroupCollection|null[0]
    abstract fun get(kotlin/Int): kotlin.text/MatchGroup? // kotlin.text/MatchGroupCollection.get|get(kotlin.Int){}[0]
}

abstract interface kotlin.text/MatchNamedGroupCollection : kotlin.text/MatchGroupCollection { // kotlin.text/MatchNamedGroupCollection|null[0]
    abstract fun get(kotlin/String): kotlin.text/MatchGroup? // kotlin.text/MatchNamedGroupCollection.get|get(kotlin.String){}[0]
}

abstract interface kotlin.text/MatchResult { // kotlin.text/MatchResult|null[0]
    abstract val groupValues // kotlin.text/MatchResult.groupValues|{}groupValues[0]
        abstract fun <get-groupValues>(): kotlin.collections/List<kotlin/String> // kotlin.text/MatchResult.groupValues.<get-groupValues>|<get-groupValues>(){}[0]
    abstract val groups // kotlin.text/MatchResult.groups|{}groups[0]
        abstract fun <get-groups>(): kotlin.text/MatchGroupCollection // kotlin.text/MatchResult.groups.<get-groups>|<get-groups>(){}[0]
    abstract val range // kotlin.text/MatchResult.range|{}range[0]
        abstract fun <get-range>(): kotlin.ranges/IntRange // kotlin.text/MatchResult.range.<get-range>|<get-range>(){}[0]
    abstract val value // kotlin.text/MatchResult.value|{}value[0]
        abstract fun <get-value>(): kotlin/String // kotlin.text/MatchResult.value.<get-value>|<get-value>(){}[0]
    open val destructured // kotlin.text/MatchResult.destructured|{}destructured[0]
        open fun <get-destructured>(): kotlin.text/MatchResult.Destructured // kotlin.text/MatchResult.destructured.<get-destructured>|<get-destructured>(){}[0]

    abstract fun next(): kotlin.text/MatchResult? // kotlin.text/MatchResult.next|next(){}[0]

    final class Destructured { // kotlin.text/MatchResult.Destructured|null[0]
        final val match // kotlin.text/MatchResult.Destructured.match|{}match[0]
            final fun <get-match>(): kotlin.text/MatchResult // kotlin.text/MatchResult.Destructured.match.<get-match>|<get-match>(){}[0]

        final fun toList(): kotlin.collections/List<kotlin/String> // kotlin.text/MatchResult.Destructured.toList|toList(){}[0]
        final inline fun component1(): kotlin/String // kotlin.text/MatchResult.Destructured.component1|component1(){}[0]
        final inline fun component10(): kotlin/String // kotlin.text/MatchResult.Destructured.component10|component10(){}[0]
        final inline fun component2(): kotlin/String // kotlin.text/MatchResult.Destructured.component2|component2(){}[0]
        final inline fun component3(): kotlin/String // kotlin.text/MatchResult.Destructured.component3|component3(){}[0]
        final inline fun component4(): kotlin/String // kotlin.text/MatchResult.Destructured.component4|component4(){}[0]
        final inline fun component5(): kotlin/String // kotlin.text/MatchResult.Destructured.component5|component5(){}[0]
        final inline fun component6(): kotlin/String // kotlin.text/MatchResult.Destructured.component6|component6(){}[0]
        final inline fun component7(): kotlin/String // kotlin.text/MatchResult.Destructured.component7|component7(){}[0]
        final inline fun component8(): kotlin/String // kotlin.text/MatchResult.Destructured.component8|component8(){}[0]
        final inline fun component9(): kotlin/String // kotlin.text/MatchResult.Destructured.component9|component9(){}[0]
    }
}

abstract interface kotlin.time/ComparableTimeMark : kotlin.time/TimeMark, kotlin/Comparable<kotlin.time/ComparableTimeMark> { // kotlin.time/ComparableTimeMark|null[0]
    abstract fun equals(kotlin/Any?): kotlin/Boolean // kotlin.time/ComparableTimeMark.equals|equals(kotlin.Any?){}[0]
    abstract fun hashCode(): kotlin/Int // kotlin.time/ComparableTimeMark.hashCode|hashCode(){}[0]
    abstract fun minus(kotlin.time/ComparableTimeMark): kotlin.time/Duration // kotlin.time/ComparableTimeMark.minus|minus(kotlin.time.ComparableTimeMark){}[0]
    abstract fun plus(kotlin.time/Duration): kotlin.time/ComparableTimeMark // kotlin.time/ComparableTimeMark.plus|plus(kotlin.time.Duration){}[0]
    open fun compareTo(kotlin.time/ComparableTimeMark): kotlin/Int // kotlin.time/ComparableTimeMark.compareTo|compareTo(kotlin.time.ComparableTimeMark){}[0]
    open fun minus(kotlin.time/Duration): kotlin.time/ComparableTimeMark // kotlin.time/ComparableTimeMark.minus|minus(kotlin.time.Duration){}[0]
}

abstract interface kotlin.time/TimeMark { // kotlin.time/TimeMark|null[0]
    abstract fun elapsedNow(): kotlin.time/Duration // kotlin.time/TimeMark.elapsedNow|elapsedNow(){}[0]
    open fun hasNotPassedNow(): kotlin/Boolean // kotlin.time/TimeMark.hasNotPassedNow|hasNotPassedNow(){}[0]
    open fun hasPassedNow(): kotlin/Boolean // kotlin.time/TimeMark.hasPassedNow|hasPassedNow(){}[0]
    open fun minus(kotlin.time/Duration): kotlin.time/TimeMark // kotlin.time/TimeMark.minus|minus(kotlin.time.Duration){}[0]
    open fun plus(kotlin.time/Duration): kotlin.time/TimeMark // kotlin.time/TimeMark.plus|plus(kotlin.time.Duration){}[0]
}

abstract interface kotlin.time/TimeSource { // kotlin.time/TimeSource|null[0]
    abstract fun markNow(): kotlin.time/TimeMark // kotlin.time/TimeSource.markNow|markNow(){}[0]

    abstract interface WithComparableMarks : kotlin.time/TimeSource { // kotlin.time/TimeSource.WithComparableMarks|null[0]
        abstract fun markNow(): kotlin.time/ComparableTimeMark // kotlin.time/TimeSource.WithComparableMarks.markNow|markNow(){}[0]
    }

    final object Companion // kotlin.time/TimeSource.Companion|null[0]

    final object Monotonic : kotlin.time/TimeSource.WithComparableMarks { // kotlin.time/TimeSource.Monotonic|null[0]
        final fun markNow(): kotlin.time/TimeSource.Monotonic.ValueTimeMark // kotlin.time/TimeSource.Monotonic.markNow|markNow(){}[0]
        final fun toString(): kotlin/String // kotlin.time/TimeSource.Monotonic.toString|toString(){}[0]

        final value class ValueTimeMark : kotlin.time/ComparableTimeMark { // kotlin.time/TimeSource.Monotonic.ValueTimeMark|null[0]
            final fun compareTo(kotlin.time/TimeSource.Monotonic.ValueTimeMark): kotlin/Int // kotlin.time/TimeSource.Monotonic.ValueTimeMark.compareTo|compareTo(kotlin.time.TimeSource.Monotonic.ValueTimeMark){}[0]
            final fun elapsedNow(): kotlin.time/Duration // kotlin.time/TimeSource.Monotonic.ValueTimeMark.elapsedNow|elapsedNow(){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.time/TimeSource.Monotonic.ValueTimeMark.equals|equals(kotlin.Any?){}[0]
            final fun hasNotPassedNow(): kotlin/Boolean // kotlin.time/TimeSource.Monotonic.ValueTimeMark.hasNotPassedNow|hasNotPassedNow(){}[0]
            final fun hasPassedNow(): kotlin/Boolean // kotlin.time/TimeSource.Monotonic.ValueTimeMark.hasPassedNow|hasPassedNow(){}[0]
            final fun hashCode(): kotlin/Int // kotlin.time/TimeSource.Monotonic.ValueTimeMark.hashCode|hashCode(){}[0]
            final fun minus(kotlin.time/ComparableTimeMark): kotlin.time/Duration // kotlin.time/TimeSource.Monotonic.ValueTimeMark.minus|minus(kotlin.time.ComparableTimeMark){}[0]
            final fun minus(kotlin.time/Duration): kotlin.time/TimeSource.Monotonic.ValueTimeMark // kotlin.time/TimeSource.Monotonic.ValueTimeMark.minus|minus(kotlin.time.Duration){}[0]
            final fun minus(kotlin.time/TimeSource.Monotonic.ValueTimeMark): kotlin.time/Duration // kotlin.time/TimeSource.Monotonic.ValueTimeMark.minus|minus(kotlin.time.TimeSource.Monotonic.ValueTimeMark){}[0]
            final fun plus(kotlin.time/Duration): kotlin.time/TimeSource.Monotonic.ValueTimeMark // kotlin.time/TimeSource.Monotonic.ValueTimeMark.plus|plus(kotlin.time.Duration){}[0]
            final fun toString(): kotlin/String // kotlin.time/TimeSource.Monotonic.ValueTimeMark.toString|toString(){}[0]
        }
    }
}

abstract interface kotlin/Annotation // kotlin/Annotation|null[0]

abstract interface kotlin/AutoCloseable { // kotlin/AutoCloseable|null[0]
    abstract fun close() // kotlin/AutoCloseable.close|close(){}[0]
}

abstract interface kotlin/CharSequence { // kotlin/CharSequence|null[0]
    abstract val length // kotlin/CharSequence.length|{}length[0]
        abstract fun <get-length>(): kotlin/Int // kotlin/CharSequence.length.<get-length>|<get-length>(){}[0]

    abstract fun get(kotlin/Int): kotlin/Char // kotlin/CharSequence.get|get(kotlin.Int){}[0]
    abstract fun subSequence(kotlin/Int, kotlin/Int): kotlin/CharSequence // kotlin/CharSequence.subSequence|subSequence(kotlin.Int;kotlin.Int){}[0]
}

sealed interface <#A: kotlin/Enum<#A>> kotlin.enums/EnumEntries : kotlin.collections/List<#A> // kotlin.enums/EnumEntries|null[0]

abstract class <#A: in kotlin/Any?> kotlin.sequences/SequenceScope { // kotlin.sequences/SequenceScope|null[0]
    abstract suspend fun yield(#A) // kotlin.sequences/SequenceScope.yield|yield(1:0){}[0]
    abstract suspend fun yieldAll(kotlin.collections/Iterator<#A>) // kotlin.sequences/SequenceScope.yieldAll|yieldAll(kotlin.collections.Iterator<1:0>){}[0]
    final suspend fun yieldAll(kotlin.collections/Iterable<#A>) // kotlin.sequences/SequenceScope.yieldAll|yieldAll(kotlin.collections.Iterable<1:0>){}[0]
    final suspend fun yieldAll(kotlin.sequences/Sequence<#A>) // kotlin.sequences/SequenceScope.yieldAll|yieldAll(kotlin.sequences.Sequence<1:0>){}[0]
}

abstract class <#A: kotlin.coroutines/CoroutineContext.Element, #B: #A> kotlin.coroutines/AbstractCoroutineContextKey : kotlin.coroutines/CoroutineContext.Key<#B> { // kotlin.coroutines/AbstractCoroutineContextKey|null[0]
    constructor <init>(kotlin.coroutines/CoroutineContext.Key<#A>, kotlin/Function1<kotlin.coroutines/CoroutineContext.Element, #B?>) // kotlin.coroutines/AbstractCoroutineContextKey.<init>|<init>(kotlin.coroutines.CoroutineContext.Key<1:0>;kotlin.Function1<kotlin.coroutines.CoroutineContext.Element,1:1?>){}[0]
}

abstract class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/AbstractMutableMap : kotlin.collections/AbstractMap<#A, #B>, kotlin.collections/MutableMap<#A, #B> { // kotlin.collections/AbstractMutableMap|null[0]
    constructor <init>() // kotlin.collections/AbstractMutableMap.<init>|<init>(){}[0]

    open val keys // kotlin.collections/AbstractMutableMap.keys|{}keys[0]
        open fun <get-keys>(): kotlin.collections/MutableSet<#A> // kotlin.collections/AbstractMutableMap.keys.<get-keys>|<get-keys>(){}[0]
    open val values // kotlin.collections/AbstractMutableMap.values|{}values[0]
        open fun <get-values>(): kotlin.collections/MutableCollection<#B> // kotlin.collections/AbstractMutableMap.values.<get-values>|<get-values>(){}[0]

    abstract fun put(#A, #B): #B? // kotlin.collections/AbstractMutableMap.put|put(1:0;1:1){}[0]
    open fun clear() // kotlin.collections/AbstractMutableMap.clear|clear(){}[0]
    open fun putAll(kotlin.collections/Map<out #A, #B>) // kotlin.collections/AbstractMutableMap.putAll|putAll(kotlin.collections.Map<out|1:0,1:1>){}[0]
    open fun remove(#A): #B? // kotlin.collections/AbstractMutableMap.remove|remove(1:0){}[0]
}

abstract class <#A: kotlin/Any?, #B: out kotlin/Any?> kotlin.collections/AbstractMap : kotlin.collections/Map<#A, #B> { // kotlin.collections/AbstractMap|null[0]
    constructor <init>() // kotlin.collections/AbstractMap.<init>|<init>(){}[0]

    open val keys // kotlin.collections/AbstractMap.keys|{}keys[0]
        open fun <get-keys>(): kotlin.collections/Set<#A> // kotlin.collections/AbstractMap.keys.<get-keys>|<get-keys>(){}[0]
    open val size // kotlin.collections/AbstractMap.size|{}size[0]
        open fun <get-size>(): kotlin/Int // kotlin.collections/AbstractMap.size.<get-size>|<get-size>(){}[0]
    open val values // kotlin.collections/AbstractMap.values|{}values[0]
        open fun <get-values>(): kotlin.collections/Collection<#B> // kotlin.collections/AbstractMap.values.<get-values>|<get-values>(){}[0]

    open fun containsKey(#A): kotlin/Boolean // kotlin.collections/AbstractMap.containsKey|containsKey(1:0){}[0]
    open fun containsValue(#B): kotlin/Boolean // kotlin.collections/AbstractMap.containsValue|containsValue(1:1){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/AbstractMap.equals|equals(kotlin.Any?){}[0]
    open fun get(#A): #B? // kotlin.collections/AbstractMap.get|get(1:0){}[0]
    open fun hashCode(): kotlin/Int // kotlin.collections/AbstractMap.hashCode|hashCode(){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.collections/AbstractMap.isEmpty|isEmpty(){}[0]
    open fun toString(): kotlin/String // kotlin.collections/AbstractMap.toString|toString(){}[0]
}

abstract class <#A: kotlin/Any?> kotlin.collections/AbstractIterator : kotlin.collections/Iterator<#A> { // kotlin.collections/AbstractIterator|null[0]
    constructor <init>() // kotlin.collections/AbstractIterator.<init>|<init>(){}[0]

    abstract fun computeNext() // kotlin.collections/AbstractIterator.computeNext|computeNext(){}[0]
    final fun done() // kotlin.collections/AbstractIterator.done|done(){}[0]
    final fun setNext(#A) // kotlin.collections/AbstractIterator.setNext|setNext(1:0){}[0]
    open fun hasNext(): kotlin/Boolean // kotlin.collections/AbstractIterator.hasNext|hasNext(){}[0]
    open fun next(): #A // kotlin.collections/AbstractIterator.next|next(){}[0]
}

abstract class <#A: kotlin/Any?> kotlin.collections/AbstractMutableCollection : kotlin.collections/AbstractCollection<#A>, kotlin.collections/MutableCollection<#A> { // kotlin.collections/AbstractMutableCollection|null[0]
    constructor <init>() // kotlin.collections/AbstractMutableCollection.<init>|<init>(){}[0]

    open fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/AbstractMutableCollection.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    open fun clear() // kotlin.collections/AbstractMutableCollection.clear|clear(){}[0]
    open fun remove(#A): kotlin/Boolean // kotlin.collections/AbstractMutableCollection.remove|remove(1:0){}[0]
    open fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/AbstractMutableCollection.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    open fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/AbstractMutableCollection.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]

    // Targets: [js]
    abstract fun add(#A): kotlin/Boolean // kotlin.collections/AbstractMutableCollection.add|add(1:0){}[0]

    // Targets: [js]
    final fun toJSON(): kotlin/Any // kotlin.collections/AbstractMutableCollection.toJSON|toJSON(){}[0]
}

abstract class <#A: kotlin/Any?> kotlin.collections/AbstractMutableList : kotlin.collections/AbstractMutableCollection<#A>, kotlin.collections/MutableList<#A> { // kotlin.collections/AbstractMutableList|null[0]
    constructor <init>() // kotlin.collections/AbstractMutableList.<init>|<init>(){}[0]

    final var modCount // kotlin.collections/AbstractMutableList.modCount|{}modCount[0]
        final fun <get-modCount>(): kotlin/Int // kotlin.collections/AbstractMutableList.modCount.<get-modCount>|<get-modCount>(){}[0]
        final fun <set-modCount>(kotlin/Int) // kotlin.collections/AbstractMutableList.modCount.<set-modCount>|<set-modCount>(kotlin.Int){}[0]

    abstract fun add(kotlin/Int, #A) // kotlin.collections/AbstractMutableList.add|add(kotlin.Int;1:0){}[0]
    abstract fun removeAt(kotlin/Int): #A // kotlin.collections/AbstractMutableList.removeAt|removeAt(kotlin.Int){}[0]
    abstract fun set(kotlin/Int, #A): #A // kotlin.collections/AbstractMutableList.set|set(kotlin.Int;1:0){}[0]
    open fun add(#A): kotlin/Boolean // kotlin.collections/AbstractMutableList.add|add(1:0){}[0]
    open fun addAll(kotlin/Int, kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/AbstractMutableList.addAll|addAll(kotlin.Int;kotlin.collections.Collection<1:0>){}[0]
    open fun clear() // kotlin.collections/AbstractMutableList.clear|clear(){}[0]
    open fun contains(#A): kotlin/Boolean // kotlin.collections/AbstractMutableList.contains|contains(1:0){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/AbstractMutableList.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.collections/AbstractMutableList.hashCode|hashCode(){}[0]
    open fun indexOf(#A): kotlin/Int // kotlin.collections/AbstractMutableList.indexOf|indexOf(1:0){}[0]
    open fun iterator(): kotlin.collections/MutableIterator<#A> // kotlin.collections/AbstractMutableList.iterator|iterator(){}[0]
    open fun lastIndexOf(#A): kotlin/Int // kotlin.collections/AbstractMutableList.lastIndexOf|lastIndexOf(1:0){}[0]
    open fun listIterator(): kotlin.collections/MutableListIterator<#A> // kotlin.collections/AbstractMutableList.listIterator|listIterator(){}[0]
    open fun listIterator(kotlin/Int): kotlin.collections/MutableListIterator<#A> // kotlin.collections/AbstractMutableList.listIterator|listIterator(kotlin.Int){}[0]
    open fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/AbstractMutableList.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    open fun removeRange(kotlin/Int, kotlin/Int) // kotlin.collections/AbstractMutableList.removeRange|removeRange(kotlin.Int;kotlin.Int){}[0]
    open fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/AbstractMutableList.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
    open fun subList(kotlin/Int, kotlin/Int): kotlin.collections/MutableList<#A> // kotlin.collections/AbstractMutableList.subList|subList(kotlin.Int;kotlin.Int){}[0]
}

abstract class <#A: kotlin/Any?> kotlin.collections/AbstractMutableSet : kotlin.collections/AbstractMutableCollection<#A>, kotlin.collections/MutableSet<#A> { // kotlin.collections/AbstractMutableSet|null[0]
    constructor <init>() // kotlin.collections/AbstractMutableSet.<init>|<init>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/AbstractMutableSet.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.collections/AbstractMutableSet.hashCode|hashCode(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    abstract fun add(#A): kotlin/Boolean // kotlin.collections/AbstractMutableSet.add|add(1:0){}[0]
}

abstract class <#A: kotlin/Any?> kotlin.properties/ObservableProperty : kotlin.properties/ReadWriteProperty<kotlin/Any?, #A> { // kotlin.properties/ObservableProperty|null[0]
    constructor <init>(#A) // kotlin.properties/ObservableProperty.<init>|<init>(1:0){}[0]

    open fun afterChange(kotlin.reflect/KProperty<*>, #A, #A) // kotlin.properties/ObservableProperty.afterChange|afterChange(kotlin.reflect.KProperty<*>;1:0;1:0){}[0]
    open fun beforeChange(kotlin.reflect/KProperty<*>, #A, #A): kotlin/Boolean // kotlin.properties/ObservableProperty.beforeChange|beforeChange(kotlin.reflect.KProperty<*>;1:0;1:0){}[0]
    open fun getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A // kotlin.properties/ObservableProperty.getValue|getValue(kotlin.Any?;kotlin.reflect.KProperty<*>){}[0]
    open fun setValue(kotlin/Any?, kotlin.reflect/KProperty<*>, #A) // kotlin.properties/ObservableProperty.setValue|setValue(kotlin.Any?;kotlin.reflect.KProperty<*>;1:0){}[0]
    open fun toString(): kotlin/String // kotlin.properties/ObservableProperty.toString|toString(){}[0]
}

abstract class <#A: kotlin/Enum<#A>> kotlin/Enum : kotlin/Comparable<#A> { // kotlin/Enum|null[0]
    constructor <init>(kotlin/String, kotlin/Int) // kotlin/Enum.<init>|<init>(kotlin.String;kotlin.Int){}[0]

    final val name // kotlin/Enum.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin/Enum.name.<get-name>|<get-name>(){}[0]
    final val ordinal // kotlin/Enum.ordinal|{}ordinal[0]
        final fun <get-ordinal>(): kotlin/Int // kotlin/Enum.ordinal.<get-ordinal>|<get-ordinal>(){}[0]

    final fun compareTo(#A): kotlin/Int // kotlin/Enum.compareTo|compareTo(1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Enum.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Enum.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // kotlin/Enum.toString|toString(){}[0]

    final object Companion // kotlin/Enum.Companion|null[0]
}

abstract class <#A: out kotlin/Any?> kotlin.collections/AbstractCollection : kotlin.collections/Collection<#A> { // kotlin.collections/AbstractCollection|null[0]
    constructor <init>() // kotlin.collections/AbstractCollection.<init>|<init>(){}[0]

    abstract val size // kotlin.collections/AbstractCollection.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlin.collections/AbstractCollection.size.<get-size>|<get-size>(){}[0]

    abstract fun iterator(): kotlin.collections/Iterator<#A> // kotlin.collections/AbstractCollection.iterator|iterator(){}[0]
    open fun <#A1: kotlin/Any?> toArray(kotlin/Array<#A1>): kotlin/Array<#A1> // kotlin.collections/AbstractCollection.toArray|toArray(kotlin.Array<0:0>){0§<kotlin.Any?>}[0]
    open fun contains(#A): kotlin/Boolean // kotlin.collections/AbstractCollection.contains|contains(1:0){}[0]
    open fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/AbstractCollection.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.collections/AbstractCollection.isEmpty|isEmpty(){}[0]
    open fun toArray(): kotlin/Array<kotlin/Any?> // kotlin.collections/AbstractCollection.toArray|toArray(){}[0]
    open fun toString(): kotlin/String // kotlin.collections/AbstractCollection.toString|toString(){}[0]
}

abstract class <#A: out kotlin/Any?> kotlin.collections/AbstractList : kotlin.collections/AbstractCollection<#A>, kotlin.collections/List<#A> { // kotlin.collections/AbstractList|null[0]
    constructor <init>() // kotlin.collections/AbstractList.<init>|<init>(){}[0]

    abstract val size // kotlin.collections/AbstractList.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlin.collections/AbstractList.size.<get-size>|<get-size>(){}[0]

    abstract fun get(kotlin/Int): #A // kotlin.collections/AbstractList.get|get(kotlin.Int){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/AbstractList.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.collections/AbstractList.hashCode|hashCode(){}[0]
    open fun indexOf(#A): kotlin/Int // kotlin.collections/AbstractList.indexOf|indexOf(1:0){}[0]
    open fun iterator(): kotlin.collections/Iterator<#A> // kotlin.collections/AbstractList.iterator|iterator(){}[0]
    open fun lastIndexOf(#A): kotlin/Int // kotlin.collections/AbstractList.lastIndexOf|lastIndexOf(1:0){}[0]
    open fun listIterator(): kotlin.collections/ListIterator<#A> // kotlin.collections/AbstractList.listIterator|listIterator(){}[0]
    open fun listIterator(kotlin/Int): kotlin.collections/ListIterator<#A> // kotlin.collections/AbstractList.listIterator|listIterator(kotlin.Int){}[0]
    open fun subList(kotlin/Int, kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/AbstractList.subList|subList(kotlin.Int;kotlin.Int){}[0]
}

abstract class <#A: out kotlin/Any?> kotlin.collections/AbstractSet : kotlin.collections/AbstractCollection<#A>, kotlin.collections/Set<#A> { // kotlin.collections/AbstractSet|null[0]
    constructor <init>() // kotlin.collections/AbstractSet.<init>|<init>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/AbstractSet.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.collections/AbstractSet.hashCode|hashCode(){}[0]
}

abstract class kotlin.collections/BooleanIterator : kotlin.collections/Iterator<kotlin/Boolean> { // kotlin.collections/BooleanIterator|null[0]
    constructor <init>() // kotlin.collections/BooleanIterator.<init>|<init>(){}[0]

    abstract fun nextBoolean(): kotlin/Boolean // kotlin.collections/BooleanIterator.nextBoolean|nextBoolean(){}[0]
    final fun next(): kotlin/Boolean // kotlin.collections/BooleanIterator.next|next(){}[0]
}

abstract class kotlin.collections/ByteIterator : kotlin.collections/Iterator<kotlin/Byte> { // kotlin.collections/ByteIterator|null[0]
    constructor <init>() // kotlin.collections/ByteIterator.<init>|<init>(){}[0]

    abstract fun nextByte(): kotlin/Byte // kotlin.collections/ByteIterator.nextByte|nextByte(){}[0]
    final fun next(): kotlin/Byte // kotlin.collections/ByteIterator.next|next(){}[0]
}

abstract class kotlin.collections/CharIterator : kotlin.collections/Iterator<kotlin/Char> { // kotlin.collections/CharIterator|null[0]
    constructor <init>() // kotlin.collections/CharIterator.<init>|<init>(){}[0]

    abstract fun nextChar(): kotlin/Char // kotlin.collections/CharIterator.nextChar|nextChar(){}[0]
    final fun next(): kotlin/Char // kotlin.collections/CharIterator.next|next(){}[0]
}

abstract class kotlin.collections/DoubleIterator : kotlin.collections/Iterator<kotlin/Double> { // kotlin.collections/DoubleIterator|null[0]
    constructor <init>() // kotlin.collections/DoubleIterator.<init>|<init>(){}[0]

    abstract fun nextDouble(): kotlin/Double // kotlin.collections/DoubleIterator.nextDouble|nextDouble(){}[0]
    final fun next(): kotlin/Double // kotlin.collections/DoubleIterator.next|next(){}[0]
}

abstract class kotlin.collections/FloatIterator : kotlin.collections/Iterator<kotlin/Float> { // kotlin.collections/FloatIterator|null[0]
    constructor <init>() // kotlin.collections/FloatIterator.<init>|<init>(){}[0]

    abstract fun nextFloat(): kotlin/Float // kotlin.collections/FloatIterator.nextFloat|nextFloat(){}[0]
    final fun next(): kotlin/Float // kotlin.collections/FloatIterator.next|next(){}[0]
}

abstract class kotlin.collections/IntIterator : kotlin.collections/Iterator<kotlin/Int> { // kotlin.collections/IntIterator|null[0]
    constructor <init>() // kotlin.collections/IntIterator.<init>|<init>(){}[0]

    abstract fun nextInt(): kotlin/Int // kotlin.collections/IntIterator.nextInt|nextInt(){}[0]
    final fun next(): kotlin/Int // kotlin.collections/IntIterator.next|next(){}[0]
}

abstract class kotlin.collections/LongIterator : kotlin.collections/Iterator<kotlin/Long> { // kotlin.collections/LongIterator|null[0]
    constructor <init>() // kotlin.collections/LongIterator.<init>|<init>(){}[0]

    abstract fun nextLong(): kotlin/Long // kotlin.collections/LongIterator.nextLong|nextLong(){}[0]
    final fun next(): kotlin/Long // kotlin.collections/LongIterator.next|next(){}[0]
}

abstract class kotlin.collections/ShortIterator : kotlin.collections/Iterator<kotlin/Short> { // kotlin.collections/ShortIterator|null[0]
    constructor <init>() // kotlin.collections/ShortIterator.<init>|<init>(){}[0]

    abstract fun nextShort(): kotlin/Short // kotlin.collections/ShortIterator.nextShort|nextShort(){}[0]
    final fun next(): kotlin/Short // kotlin.collections/ShortIterator.next|next(){}[0]
}

abstract class kotlin.coroutines/AbstractCoroutineContextElement : kotlin.coroutines/CoroutineContext.Element { // kotlin.coroutines/AbstractCoroutineContextElement|null[0]
    constructor <init>(kotlin.coroutines/CoroutineContext.Key<*>) // kotlin.coroutines/AbstractCoroutineContextElement.<init>|<init>(kotlin.coroutines.CoroutineContext.Key<*>){}[0]

    open val key // kotlin.coroutines/AbstractCoroutineContextElement.key|{}key[0]
        open fun <get-key>(): kotlin.coroutines/CoroutineContext.Key<*> // kotlin.coroutines/AbstractCoroutineContextElement.key.<get-key>|<get-key>(){}[0]
}

abstract class kotlin.random/Random { // kotlin.random/Random|null[0]
    constructor <init>() // kotlin.random/Random.<init>|<init>(){}[0]

    abstract fun nextBits(kotlin/Int): kotlin/Int // kotlin.random/Random.nextBits|nextBits(kotlin.Int){}[0]
    open fun nextBoolean(): kotlin/Boolean // kotlin.random/Random.nextBoolean|nextBoolean(){}[0]
    open fun nextBytes(kotlin/ByteArray): kotlin/ByteArray // kotlin.random/Random.nextBytes|nextBytes(kotlin.ByteArray){}[0]
    open fun nextBytes(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // kotlin.random/Random.nextBytes|nextBytes(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    open fun nextBytes(kotlin/Int): kotlin/ByteArray // kotlin.random/Random.nextBytes|nextBytes(kotlin.Int){}[0]
    open fun nextDouble(): kotlin/Double // kotlin.random/Random.nextDouble|nextDouble(){}[0]
    open fun nextDouble(kotlin/Double): kotlin/Double // kotlin.random/Random.nextDouble|nextDouble(kotlin.Double){}[0]
    open fun nextDouble(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.random/Random.nextDouble|nextDouble(kotlin.Double;kotlin.Double){}[0]
    open fun nextFloat(): kotlin/Float // kotlin.random/Random.nextFloat|nextFloat(){}[0]
    open fun nextInt(): kotlin/Int // kotlin.random/Random.nextInt|nextInt(){}[0]
    open fun nextInt(kotlin/Int): kotlin/Int // kotlin.random/Random.nextInt|nextInt(kotlin.Int){}[0]
    open fun nextInt(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.random/Random.nextInt|nextInt(kotlin.Int;kotlin.Int){}[0]
    open fun nextLong(): kotlin/Long // kotlin.random/Random.nextLong|nextLong(){}[0]
    open fun nextLong(kotlin/Long): kotlin/Long // kotlin.random/Random.nextLong|nextLong(kotlin.Long){}[0]
    open fun nextLong(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.random/Random.nextLong|nextLong(kotlin.Long;kotlin.Long){}[0]

    final object Default : kotlin.io/Serializable, kotlin.random/Random { // kotlin.random/Random.Default|null[0]
        final fun nextBits(kotlin/Int): kotlin/Int // kotlin.random/Random.Default.nextBits|nextBits(kotlin.Int){}[0]
        final fun nextBoolean(): kotlin/Boolean // kotlin.random/Random.Default.nextBoolean|nextBoolean(){}[0]
        final fun nextBytes(kotlin/ByteArray): kotlin/ByteArray // kotlin.random/Random.Default.nextBytes|nextBytes(kotlin.ByteArray){}[0]
        final fun nextBytes(kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/ByteArray // kotlin.random/Random.Default.nextBytes|nextBytes(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
        final fun nextBytes(kotlin/Int): kotlin/ByteArray // kotlin.random/Random.Default.nextBytes|nextBytes(kotlin.Int){}[0]
        final fun nextDouble(): kotlin/Double // kotlin.random/Random.Default.nextDouble|nextDouble(){}[0]
        final fun nextDouble(kotlin/Double): kotlin/Double // kotlin.random/Random.Default.nextDouble|nextDouble(kotlin.Double){}[0]
        final fun nextDouble(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.random/Random.Default.nextDouble|nextDouble(kotlin.Double;kotlin.Double){}[0]
        final fun nextFloat(): kotlin/Float // kotlin.random/Random.Default.nextFloat|nextFloat(){}[0]
        final fun nextInt(): kotlin/Int // kotlin.random/Random.Default.nextInt|nextInt(){}[0]
        final fun nextInt(kotlin/Int): kotlin/Int // kotlin.random/Random.Default.nextInt|nextInt(kotlin.Int){}[0]
        final fun nextInt(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.random/Random.Default.nextInt|nextInt(kotlin.Int;kotlin.Int){}[0]
        final fun nextLong(): kotlin/Long // kotlin.random/Random.Default.nextLong|nextLong(){}[0]
        final fun nextLong(kotlin/Long): kotlin/Long // kotlin.random/Random.Default.nextLong|nextLong(kotlin.Long){}[0]
        final fun nextLong(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.random/Random.Default.nextLong|nextLong(kotlin.Long;kotlin.Long){}[0]
    }
}

abstract class kotlin.time/AbstractDoubleTimeSource : kotlin.time/TimeSource.WithComparableMarks { // kotlin.time/AbstractDoubleTimeSource|null[0]
    constructor <init>(kotlin.time/DurationUnit) // kotlin.time/AbstractDoubleTimeSource.<init>|<init>(kotlin.time.DurationUnit){}[0]

    final val unit // kotlin.time/AbstractDoubleTimeSource.unit|{}unit[0]
        final fun <get-unit>(): kotlin.time/DurationUnit // kotlin.time/AbstractDoubleTimeSource.unit.<get-unit>|<get-unit>(){}[0]

    abstract fun read(): kotlin/Double // kotlin.time/AbstractDoubleTimeSource.read|read(){}[0]
    open fun markNow(): kotlin.time/ComparableTimeMark // kotlin.time/AbstractDoubleTimeSource.markNow|markNow(){}[0]
}

abstract class kotlin.time/AbstractLongTimeSource : kotlin.time/TimeSource.WithComparableMarks { // kotlin.time/AbstractLongTimeSource|null[0]
    constructor <init>(kotlin.time/DurationUnit) // kotlin.time/AbstractLongTimeSource.<init>|<init>(kotlin.time.DurationUnit){}[0]

    final val unit // kotlin.time/AbstractLongTimeSource.unit|{}unit[0]
        final fun <get-unit>(): kotlin.time/DurationUnit // kotlin.time/AbstractLongTimeSource.unit.<get-unit>|<get-unit>(){}[0]

    abstract fun read(): kotlin/Long // kotlin.time/AbstractLongTimeSource.read|read(){}[0]
    open fun markNow(): kotlin.time/ComparableTimeMark // kotlin.time/AbstractLongTimeSource.markNow|markNow(){}[0]
}

abstract class kotlin/Number { // kotlin/Number|null[0]
    constructor <init>() // kotlin/Number.<init>|<init>(){}[0]

    abstract fun toByte(): kotlin/Byte // kotlin/Number.toByte|toByte(){}[0]
    abstract fun toDouble(): kotlin/Double // kotlin/Number.toDouble|toDouble(){}[0]
    abstract fun toFloat(): kotlin/Float // kotlin/Number.toFloat|toFloat(){}[0]
    abstract fun toInt(): kotlin/Int // kotlin/Number.toInt|toInt(){}[0]
    abstract fun toLong(): kotlin/Long // kotlin/Number.toLong|toLong(){}[0]
    abstract fun toShort(): kotlin/Short // kotlin/Number.toShort|toShort(){}[0]
    open fun toChar(): kotlin/Char // kotlin/Number.toChar|toChar(){}[0]
}

final class <#A: in kotlin/Any?> kotlin.coroutines/SafeContinuation : kotlin.coroutines/Continuation<#A> { // kotlin.coroutines/SafeContinuation|null[0]
    constructor <init>(kotlin.coroutines/Continuation<#A>) // kotlin.coroutines/SafeContinuation.<init>|<init>(kotlin.coroutines.Continuation<1:0>){}[0]

    final val context // kotlin.coroutines/SafeContinuation.context|{}context[0]
        final fun <get-context>(): kotlin.coroutines/CoroutineContext // kotlin.coroutines/SafeContinuation.context.<get-context>|<get-context>(){}[0]

    final fun getOrThrow(): kotlin/Any? // kotlin.coroutines/SafeContinuation.getOrThrow|getOrThrow(){}[0]
    final fun resumeWith(kotlin/Result<#A>) // kotlin.coroutines/SafeContinuation.resumeWith|resumeWith(kotlin.Result<1:0>){}[0]
}

final class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin/DeepRecursiveFunction { // kotlin/DeepRecursiveFunction|null[0]
    constructor <init>(kotlin.coroutines/SuspendFunction2<kotlin/DeepRecursiveScope<#A, #B>, #A, #B>) // kotlin/DeepRecursiveFunction.<init>|<init>(kotlin.coroutines.SuspendFunction2<kotlin.DeepRecursiveScope<1:0,1:1>,1:0,1:1>){}[0]
}

final class <#A: kotlin/Any?> kotlin.collections/ArrayDeque : kotlin.collections/AbstractMutableList<#A> { // kotlin.collections/ArrayDeque|null[0]
    constructor <init>() // kotlin.collections/ArrayDeque.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Collection<#A>) // kotlin.collections/ArrayDeque.<init>|<init>(kotlin.collections.Collection<1:0>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/ArrayDeque.<init>|<init>(kotlin.Int){}[0]

    final var size // kotlin.collections/ArrayDeque.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.collections/ArrayDeque.size.<get-size>|<get-size>(){}[0]

    final fun <#A1: kotlin/Any?> toArray(kotlin/Array<#A1>): kotlin/Array<#A1> // kotlin.collections/ArrayDeque.toArray|toArray(kotlin.Array<0:0>){0§<kotlin.Any?>}[0]
    final fun add(#A): kotlin/Boolean // kotlin.collections/ArrayDeque.add|add(1:0){}[0]
    final fun add(kotlin/Int, #A) // kotlin.collections/ArrayDeque.add|add(kotlin.Int;1:0){}[0]
    final fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayDeque.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    final fun addAll(kotlin/Int, kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayDeque.addAll|addAll(kotlin.Int;kotlin.collections.Collection<1:0>){}[0]
    final fun addFirst(#A) // kotlin.collections/ArrayDeque.addFirst|addFirst(1:0){}[0]
    final fun addLast(#A) // kotlin.collections/ArrayDeque.addLast|addLast(1:0){}[0]
    final fun clear() // kotlin.collections/ArrayDeque.clear|clear(){}[0]
    final fun contains(#A): kotlin/Boolean // kotlin.collections/ArrayDeque.contains|contains(1:0){}[0]
    final fun first(): #A // kotlin.collections/ArrayDeque.first|first(){}[0]
    final fun firstOrNull(): #A? // kotlin.collections/ArrayDeque.firstOrNull|firstOrNull(){}[0]
    final fun get(kotlin/Int): #A // kotlin.collections/ArrayDeque.get|get(kotlin.Int){}[0]
    final fun indexOf(#A): kotlin/Int // kotlin.collections/ArrayDeque.indexOf|indexOf(1:0){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.collections/ArrayDeque.isEmpty|isEmpty(){}[0]
    final fun last(): #A // kotlin.collections/ArrayDeque.last|last(){}[0]
    final fun lastIndexOf(#A): kotlin/Int // kotlin.collections/ArrayDeque.lastIndexOf|lastIndexOf(1:0){}[0]
    final fun lastOrNull(): #A? // kotlin.collections/ArrayDeque.lastOrNull|lastOrNull(){}[0]
    final fun remove(#A): kotlin/Boolean // kotlin.collections/ArrayDeque.remove|remove(1:0){}[0]
    final fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayDeque.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    final fun removeAt(kotlin/Int): #A // kotlin.collections/ArrayDeque.removeAt|removeAt(kotlin.Int){}[0]
    final fun removeFirst(): #A // kotlin.collections/ArrayDeque.removeFirst|removeFirst(){}[0]
    final fun removeFirstOrNull(): #A? // kotlin.collections/ArrayDeque.removeFirstOrNull|removeFirstOrNull(){}[0]
    final fun removeLast(): #A // kotlin.collections/ArrayDeque.removeLast|removeLast(){}[0]
    final fun removeLastOrNull(): #A? // kotlin.collections/ArrayDeque.removeLastOrNull|removeLastOrNull(){}[0]
    final fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayDeque.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
    final fun set(kotlin/Int, #A): #A // kotlin.collections/ArrayDeque.set|set(kotlin.Int;1:0){}[0]
    final fun toArray(): kotlin/Array<kotlin/Any?> // kotlin.collections/ArrayDeque.toArray|toArray(){}[0]
}

final class <#A: kotlin/Any?> kotlin.concurrent/AtomicArray { // kotlin.concurrent/AtomicArray|null[0]
    constructor <init>(kotlin/Array<#A>) // kotlin.concurrent/AtomicArray.<init>|<init>(kotlin.Array<1:0>){}[0]

    final val size // kotlin.concurrent/AtomicArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.concurrent/AtomicArray.size.<get-size>|<get-size>(){}[0]

    final fun compareAndExchangeAt(kotlin/Int, #A, #A): #A // kotlin.concurrent/AtomicArray.compareAndExchangeAt|compareAndExchangeAt(kotlin.Int;1:0;1:0){}[0]
    final fun compareAndSetAt(kotlin/Int, #A, #A): kotlin/Boolean // kotlin.concurrent/AtomicArray.compareAndSetAt|compareAndSetAt(kotlin.Int;1:0;1:0){}[0]
    final fun exchangeAt(kotlin/Int, #A): #A // kotlin.concurrent/AtomicArray.exchangeAt|exchangeAt(kotlin.Int;1:0){}[0]
    final fun loadAt(kotlin/Int): #A // kotlin.concurrent/AtomicArray.loadAt|loadAt(kotlin.Int){}[0]
    final fun storeAt(kotlin/Int, #A) // kotlin.concurrent/AtomicArray.storeAt|storeAt(kotlin.Int;1:0){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicArray.toString|toString(){}[0]

    // Targets: [native]
    final val length // kotlin.concurrent/AtomicArray.length|{}length[0]
        final fun <get-length>(): kotlin/Int // kotlin.concurrent/AtomicArray.length.<get-length>|<get-length>(){}[0]

    // Targets: [native]
    final fun compareAndExchange(kotlin/Int, #A, #A): #A // kotlin.concurrent/AtomicArray.compareAndExchange|compareAndExchange(kotlin.Int;1:0;1:0){}[0]

    // Targets: [native]
    final fun compareAndSet(kotlin/Int, #A, #A): kotlin/Boolean // kotlin.concurrent/AtomicArray.compareAndSet|compareAndSet(kotlin.Int;1:0;1:0){}[0]

    // Targets: [native]
    final fun get(kotlin/Int): #A // kotlin.concurrent/AtomicArray.get|get(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndSet(kotlin/Int, #A): #A // kotlin.concurrent/AtomicArray.getAndSet|getAndSet(kotlin.Int;1:0){}[0]

    // Targets: [native]
    final fun set(kotlin/Int, #A) // kotlin.concurrent/AtomicArray.set|set(kotlin.Int;1:0){}[0]
}

final class <#A: kotlin/Any?> kotlin.concurrent/AtomicReference { // kotlin.concurrent/AtomicReference|null[0]
    constructor <init>(#A) // kotlin.concurrent/AtomicReference.<init>|<init>(1:0){}[0]

    final fun compareAndExchange(#A, #A): #A // kotlin.concurrent/AtomicReference.compareAndExchange|compareAndExchange(1:0;1:0){}[0]
    final fun compareAndSet(#A, #A): kotlin/Boolean // kotlin.concurrent/AtomicReference.compareAndSet|compareAndSet(1:0;1:0){}[0]
    final fun exchange(#A): #A // kotlin.concurrent/AtomicReference.exchange|exchange(1:0){}[0]
    final fun load(): #A // kotlin.concurrent/AtomicReference.load|load(){}[0]
    final fun store(#A) // kotlin.concurrent/AtomicReference.store|store(1:0){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicReference.toString|toString(){}[0]

    // Targets: [native]
    final var value // kotlin.concurrent/AtomicReference.value|{}value[0]
        final fun <get-value>(): #A // kotlin.concurrent/AtomicReference.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(#A) // kotlin.concurrent/AtomicReference.value.<set-value>|<set-value>(1:0){}[0]

    // Targets: [native]
    final fun getAndSet(#A): #A // kotlin.concurrent/AtomicReference.getAndSet|getAndSet(1:0){}[0]
}

final class <#A: kotlin/Any?> kotlin.time/TimedValue { // kotlin.time/TimedValue|null[0]
    constructor <init>(#A, kotlin.time/Duration) // kotlin.time/TimedValue.<init>|<init>(1:0;kotlin.time.Duration){}[0]

    final val duration // kotlin.time/TimedValue.duration|{}duration[0]
        final fun <get-duration>(): kotlin.time/Duration // kotlin.time/TimedValue.duration.<get-duration>|<get-duration>(){}[0]
    final val value // kotlin.time/TimedValue.value|{}value[0]
        final fun <get-value>(): #A // kotlin.time/TimedValue.value.<get-value>|<get-value>(){}[0]

    final fun component1(): #A // kotlin.time/TimedValue.component1|component1(){}[0]
    final fun component2(): kotlin.time/Duration // kotlin.time/TimedValue.component2|component2(){}[0]
    final fun copy(#A = ..., kotlin.time/Duration = ...): kotlin.time/TimedValue<#A> // kotlin.time/TimedValue.copy|copy(1:0;kotlin.time.Duration){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.time/TimedValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.time/TimedValue.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.time/TimedValue.toString|toString(){}[0]
}

final class <#A: kotlin/Any?> kotlin/Array { // kotlin/Array|null[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, #A>) // kotlin/Array.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,1:0>){}[0]

    final val size // kotlin/Array.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/Array.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): #A // kotlin/Array.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/Iterator<#A> // kotlin/Array.iterator|iterator(){}[0]
    final fun set(kotlin/Int, #A) // kotlin/Array.set|set(kotlin.Int;1:0){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    constructor <init>(kotlin/Int) // kotlin/Array.<init>|<init>(kotlin.Int){}[0]
}

final class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?> kotlin/Triple : kotlin.io/Serializable { // kotlin/Triple|null[0]
    constructor <init>(#A, #B, #C) // kotlin/Triple.<init>|<init>(1:0;1:1;1:2){}[0]

    final val first // kotlin/Triple.first|{}first[0]
        final fun <get-first>(): #A // kotlin/Triple.first.<get-first>|<get-first>(){}[0]
    final val second // kotlin/Triple.second|{}second[0]
        final fun <get-second>(): #B // kotlin/Triple.second.<get-second>|<get-second>(){}[0]
    final val third // kotlin/Triple.third|{}third[0]
        final fun <get-third>(): #C // kotlin/Triple.third.<get-third>|<get-third>(){}[0]

    final fun component1(): #A // kotlin/Triple.component1|component1(){}[0]
    final fun component2(): #B // kotlin/Triple.component2|component2(){}[0]
    final fun component3(): #C // kotlin/Triple.component3|component3(){}[0]
    final fun copy(#A = ..., #B = ..., #C = ...): kotlin/Triple<#A, #B, #C> // kotlin/Triple.copy|copy(1:0;1:1;1:2){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Triple.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Triple.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin/Triple.toString|toString(){}[0]
}

final class <#A: out kotlin/Any?, #B: out kotlin/Any?> kotlin/Pair : kotlin.io/Serializable { // kotlin/Pair|null[0]
    constructor <init>(#A, #B) // kotlin/Pair.<init>|<init>(1:0;1:1){}[0]

    final val first // kotlin/Pair.first|{}first[0]
        final fun <get-first>(): #A // kotlin/Pair.first.<get-first>|<get-first>(){}[0]
    final val second // kotlin/Pair.second|{}second[0]
        final fun <get-second>(): #B // kotlin/Pair.second.<get-second>|<get-second>(){}[0]

    final fun component1(): #A // kotlin/Pair.component1|component1(){}[0]
    final fun component2(): #B // kotlin/Pair.component2|component2(){}[0]
    final fun copy(#A = ..., #B = ...): kotlin/Pair<#A, #B> // kotlin/Pair.copy|copy(1:0;1:1){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Pair.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Pair.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin/Pair.toString|toString(){}[0]
}

final class <#A: out kotlin/Any?> kotlin.collections/IndexedValue { // kotlin.collections/IndexedValue|null[0]
    constructor <init>(kotlin/Int, #A) // kotlin.collections/IndexedValue.<init>|<init>(kotlin.Int;1:0){}[0]

    final val index // kotlin.collections/IndexedValue.index|{}index[0]
        final fun <get-index>(): kotlin/Int // kotlin.collections/IndexedValue.index.<get-index>|<get-index>(){}[0]
    final val value // kotlin.collections/IndexedValue.value|{}value[0]
        final fun <get-value>(): #A // kotlin.collections/IndexedValue.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/Int // kotlin.collections/IndexedValue.component1|component1(){}[0]
    final fun component2(): #A // kotlin.collections/IndexedValue.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., #A = ...): kotlin.collections/IndexedValue<#A> // kotlin.collections/IndexedValue.copy|copy(kotlin.Int;1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/IndexedValue.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.collections/IndexedValue.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.collections/IndexedValue.toString|toString(){}[0]
}

final class kotlin.concurrent/AtomicBoolean { // kotlin.concurrent/AtomicBoolean|null[0]
    constructor <init>(kotlin/Boolean) // kotlin.concurrent/AtomicBoolean.<init>|<init>(kotlin.Boolean){}[0]

    final fun compareAndExchange(kotlin/Boolean, kotlin/Boolean): kotlin/Boolean // kotlin.concurrent/AtomicBoolean.compareAndExchange|compareAndExchange(kotlin.Boolean;kotlin.Boolean){}[0]
    final fun compareAndSet(kotlin/Boolean, kotlin/Boolean): kotlin/Boolean // kotlin.concurrent/AtomicBoolean.compareAndSet|compareAndSet(kotlin.Boolean;kotlin.Boolean){}[0]
    final fun exchange(kotlin/Boolean): kotlin/Boolean // kotlin.concurrent/AtomicBoolean.exchange|exchange(kotlin.Boolean){}[0]
    final fun load(): kotlin/Boolean // kotlin.concurrent/AtomicBoolean.load|load(){}[0]
    final fun store(kotlin/Boolean) // kotlin.concurrent/AtomicBoolean.store|store(kotlin.Boolean){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicBoolean.toString|toString(){}[0]
}

final class kotlin.concurrent/AtomicInt { // kotlin.concurrent/AtomicInt|null[0]
    constructor <init>(kotlin/Int) // kotlin.concurrent/AtomicInt.<init>|<init>(kotlin.Int){}[0]

    final fun addAndFetch(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicInt.addAndFetch|addAndFetch(kotlin.Int){}[0]
    final fun compareAndExchange(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicInt.compareAndExchange|compareAndExchange(kotlin.Int;kotlin.Int){}[0]
    final fun compareAndSet(kotlin/Int, kotlin/Int): kotlin/Boolean // kotlin.concurrent/AtomicInt.compareAndSet|compareAndSet(kotlin.Int;kotlin.Int){}[0]
    final fun exchange(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicInt.exchange|exchange(kotlin.Int){}[0]
    final fun fetchAndAdd(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicInt.fetchAndAdd|fetchAndAdd(kotlin.Int){}[0]
    final fun load(): kotlin/Int // kotlin.concurrent/AtomicInt.load|load(){}[0]
    final fun store(kotlin/Int) // kotlin.concurrent/AtomicInt.store|store(kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicInt.toString|toString(){}[0]

    // Targets: [native]
    final var value // kotlin.concurrent/AtomicInt.value|{}value[0]
        final fun <get-value>(): kotlin/Int // kotlin.concurrent/AtomicInt.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/Int) // kotlin.concurrent/AtomicInt.value.<set-value>|<set-value>(kotlin.Int){}[0]

    // Targets: [native]
    final fun addAndGet(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicInt.addAndGet|addAndGet(kotlin.Int){}[0]

    // Targets: [native]
    final fun decrementAndGet(): kotlin/Int // kotlin.concurrent/AtomicInt.decrementAndGet|decrementAndGet(){}[0]

    // Targets: [native]
    final fun getAndAdd(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicInt.getAndAdd|getAndAdd(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndDecrement(): kotlin/Int // kotlin.concurrent/AtomicInt.getAndDecrement|getAndDecrement(){}[0]

    // Targets: [native]
    final fun getAndIncrement(): kotlin/Int // kotlin.concurrent/AtomicInt.getAndIncrement|getAndIncrement(){}[0]

    // Targets: [native]
    final fun getAndSet(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicInt.getAndSet|getAndSet(kotlin.Int){}[0]

    // Targets: [native]
    final fun incrementAndGet(): kotlin/Int // kotlin.concurrent/AtomicInt.incrementAndGet|incrementAndGet(){}[0]
}

final class kotlin.concurrent/AtomicIntArray { // kotlin.concurrent/AtomicIntArray|null[0]
    constructor <init>(kotlin/Int) // kotlin.concurrent/AtomicIntArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/IntArray) // kotlin.concurrent/AtomicIntArray.<init>|<init>(kotlin.IntArray){}[0]

    final val size // kotlin.concurrent/AtomicIntArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.concurrent/AtomicIntArray.size.<get-size>|<get-size>(){}[0]

    final fun addAndFetchAt(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.addAndFetchAt|addAndFetchAt(kotlin.Int;kotlin.Int){}[0]
    final fun compareAndExchangeAt(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.compareAndExchangeAt|compareAndExchangeAt(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun compareAndSetAt(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Boolean // kotlin.concurrent/AtomicIntArray.compareAndSetAt|compareAndSetAt(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun exchangeAt(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.exchangeAt|exchangeAt(kotlin.Int;kotlin.Int){}[0]
    final fun fetchAndAddAt(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.fetchAndAddAt|fetchAndAddAt(kotlin.Int;kotlin.Int){}[0]
    final fun loadAt(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.loadAt|loadAt(kotlin.Int){}[0]
    final fun storeAt(kotlin/Int, kotlin/Int) // kotlin.concurrent/AtomicIntArray.storeAt|storeAt(kotlin.Int;kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicIntArray.toString|toString(){}[0]

    // Targets: [native]
    final val length // kotlin.concurrent/AtomicIntArray.length|{}length[0]
        final fun <get-length>(): kotlin/Int // kotlin.concurrent/AtomicIntArray.length.<get-length>|<get-length>(){}[0]

    // Targets: [native]
    final fun addAndGet(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.addAndGet|addAndGet(kotlin.Int;kotlin.Int){}[0]

    // Targets: [native]
    final fun compareAndExchange(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.compareAndExchange|compareAndExchange(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    // Targets: [native]
    final fun compareAndSet(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Boolean // kotlin.concurrent/AtomicIntArray.compareAndSet|compareAndSet(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    // Targets: [native]
    final fun decrementAndGet(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.decrementAndGet|decrementAndGet(kotlin.Int){}[0]

    // Targets: [native]
    final fun get(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.get|get(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndAdd(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.getAndAdd|getAndAdd(kotlin.Int;kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndDecrement(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.getAndDecrement|getAndDecrement(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndIncrement(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.getAndIncrement|getAndIncrement(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndSet(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.getAndSet|getAndSet(kotlin.Int;kotlin.Int){}[0]

    // Targets: [native]
    final fun incrementAndGet(kotlin/Int): kotlin/Int // kotlin.concurrent/AtomicIntArray.incrementAndGet|incrementAndGet(kotlin.Int){}[0]

    // Targets: [native]
    final fun set(kotlin/Int, kotlin/Int) // kotlin.concurrent/AtomicIntArray.set|set(kotlin.Int;kotlin.Int){}[0]
}

final class kotlin.concurrent/AtomicLong { // kotlin.concurrent/AtomicLong|null[0]
    constructor <init>(kotlin/Long) // kotlin.concurrent/AtomicLong.<init>|<init>(kotlin.Long){}[0]

    final fun addAndFetch(kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLong.addAndFetch|addAndFetch(kotlin.Long){}[0]
    final fun compareAndExchange(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLong.compareAndExchange|compareAndExchange(kotlin.Long;kotlin.Long){}[0]
    final fun compareAndSet(kotlin/Long, kotlin/Long): kotlin/Boolean // kotlin.concurrent/AtomicLong.compareAndSet|compareAndSet(kotlin.Long;kotlin.Long){}[0]
    final fun exchange(kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLong.exchange|exchange(kotlin.Long){}[0]
    final fun fetchAndAdd(kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLong.fetchAndAdd|fetchAndAdd(kotlin.Long){}[0]
    final fun load(): kotlin/Long // kotlin.concurrent/AtomicLong.load|load(){}[0]
    final fun store(kotlin/Long) // kotlin.concurrent/AtomicLong.store|store(kotlin.Long){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicLong.toString|toString(){}[0]

    // Targets: [native]
    final var value // kotlin.concurrent/AtomicLong.value|{}value[0]
        final fun <get-value>(): kotlin/Long // kotlin.concurrent/AtomicLong.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/Long) // kotlin.concurrent/AtomicLong.value.<set-value>|<set-value>(kotlin.Long){}[0]

    // Targets: [native]
    final fun addAndGet(kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLong.addAndGet|addAndGet(kotlin.Long){}[0]

    // Targets: [native]
    final fun decrementAndGet(): kotlin/Long // kotlin.concurrent/AtomicLong.decrementAndGet|decrementAndGet(){}[0]

    // Targets: [native]
    final fun getAndAdd(kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLong.getAndAdd|getAndAdd(kotlin.Long){}[0]

    // Targets: [native]
    final fun getAndDecrement(): kotlin/Long // kotlin.concurrent/AtomicLong.getAndDecrement|getAndDecrement(){}[0]

    // Targets: [native]
    final fun getAndIncrement(): kotlin/Long // kotlin.concurrent/AtomicLong.getAndIncrement|getAndIncrement(){}[0]

    // Targets: [native]
    final fun getAndSet(kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLong.getAndSet|getAndSet(kotlin.Long){}[0]

    // Targets: [native]
    final fun incrementAndGet(): kotlin/Long // kotlin.concurrent/AtomicLong.incrementAndGet|incrementAndGet(){}[0]
}

final class kotlin.concurrent/AtomicLongArray { // kotlin.concurrent/AtomicLongArray|null[0]
    constructor <init>(kotlin/Int) // kotlin.concurrent/AtomicLongArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/LongArray) // kotlin.concurrent/AtomicLongArray.<init>|<init>(kotlin.LongArray){}[0]

    final val size // kotlin.concurrent/AtomicLongArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.concurrent/AtomicLongArray.size.<get-size>|<get-size>(){}[0]

    final fun addAndFetchAt(kotlin/Int, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.addAndFetchAt|addAndFetchAt(kotlin.Int;kotlin.Long){}[0]
    final fun compareAndExchangeAt(kotlin/Int, kotlin/Long, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.compareAndExchangeAt|compareAndExchangeAt(kotlin.Int;kotlin.Long;kotlin.Long){}[0]
    final fun compareAndSetAt(kotlin/Int, kotlin/Long, kotlin/Long): kotlin/Boolean // kotlin.concurrent/AtomicLongArray.compareAndSetAt|compareAndSetAt(kotlin.Int;kotlin.Long;kotlin.Long){}[0]
    final fun exchangeAt(kotlin/Int, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.exchangeAt|exchangeAt(kotlin.Int;kotlin.Long){}[0]
    final fun fetchAndAddAt(kotlin/Int, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.fetchAndAddAt|fetchAndAddAt(kotlin.Int;kotlin.Long){}[0]
    final fun loadAt(kotlin/Int): kotlin/Long // kotlin.concurrent/AtomicLongArray.loadAt|loadAt(kotlin.Int){}[0]
    final fun storeAt(kotlin/Int, kotlin/Long) // kotlin.concurrent/AtomicLongArray.storeAt|storeAt(kotlin.Int;kotlin.Long){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicLongArray.toString|toString(){}[0]

    // Targets: [native]
    final val length // kotlin.concurrent/AtomicLongArray.length|{}length[0]
        final fun <get-length>(): kotlin/Int // kotlin.concurrent/AtomicLongArray.length.<get-length>|<get-length>(){}[0]

    // Targets: [native]
    final fun addAndGet(kotlin/Int, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.addAndGet|addAndGet(kotlin.Int;kotlin.Long){}[0]

    // Targets: [native]
    final fun compareAndExchange(kotlin/Int, kotlin/Long, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.compareAndExchange|compareAndExchange(kotlin.Int;kotlin.Long;kotlin.Long){}[0]

    // Targets: [native]
    final fun compareAndSet(kotlin/Int, kotlin/Long, kotlin/Long): kotlin/Boolean // kotlin.concurrent/AtomicLongArray.compareAndSet|compareAndSet(kotlin.Int;kotlin.Long;kotlin.Long){}[0]

    // Targets: [native]
    final fun decrementAndGet(kotlin/Int): kotlin/Long // kotlin.concurrent/AtomicLongArray.decrementAndGet|decrementAndGet(kotlin.Int){}[0]

    // Targets: [native]
    final fun get(kotlin/Int): kotlin/Long // kotlin.concurrent/AtomicLongArray.get|get(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndAdd(kotlin/Int, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.getAndAdd|getAndAdd(kotlin.Int;kotlin.Long){}[0]

    // Targets: [native]
    final fun getAndDecrement(kotlin/Int): kotlin/Long // kotlin.concurrent/AtomicLongArray.getAndDecrement|getAndDecrement(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndIncrement(kotlin/Int): kotlin/Long // kotlin.concurrent/AtomicLongArray.getAndIncrement|getAndIncrement(kotlin.Int){}[0]

    // Targets: [native]
    final fun getAndSet(kotlin/Int, kotlin/Long): kotlin/Long // kotlin.concurrent/AtomicLongArray.getAndSet|getAndSet(kotlin.Int;kotlin.Long){}[0]

    // Targets: [native]
    final fun incrementAndGet(kotlin/Int): kotlin/Long // kotlin.concurrent/AtomicLongArray.incrementAndGet|incrementAndGet(kotlin.Int){}[0]

    // Targets: [native]
    final fun set(kotlin/Int, kotlin/Long) // kotlin.concurrent/AtomicLongArray.set|set(kotlin.Int;kotlin.Long){}[0]
}

final class kotlin.ranges/CharRange : kotlin.ranges/CharProgression, kotlin.ranges/ClosedRange<kotlin/Char>, kotlin.ranges/OpenEndRange<kotlin/Char> { // kotlin.ranges/CharRange|null[0]
    constructor <init>(kotlin/Char, kotlin/Char) // kotlin.ranges/CharRange.<init>|<init>(kotlin.Char;kotlin.Char){}[0]

    final val endExclusive // kotlin.ranges/CharRange.endExclusive|{}endExclusive[0]
        final fun <get-endExclusive>(): kotlin/Char // kotlin.ranges/CharRange.endExclusive.<get-endExclusive>|<get-endExclusive>(){}[0]
    final val endInclusive // kotlin.ranges/CharRange.endInclusive|{}endInclusive[0]
        final fun <get-endInclusive>(): kotlin/Char // kotlin.ranges/CharRange.endInclusive.<get-endInclusive>|<get-endInclusive>(){}[0]
    final val start // kotlin.ranges/CharRange.start|{}start[0]
        final fun <get-start>(): kotlin/Char // kotlin.ranges/CharRange.start.<get-start>|<get-start>(){}[0]

    final fun contains(kotlin/Char): kotlin/Boolean // kotlin.ranges/CharRange.contains|contains(kotlin.Char){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/CharRange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.ranges/CharRange.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.ranges/CharRange.isEmpty|isEmpty(){}[0]
    final fun toString(): kotlin/String // kotlin.ranges/CharRange.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/CharRange.Companion|null[0]
        final val EMPTY // kotlin.ranges/CharRange.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): kotlin.ranges/CharRange // kotlin.ranges/CharRange.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]
    }
}

final class kotlin.ranges/IntRange : kotlin.ranges/ClosedRange<kotlin/Int>, kotlin.ranges/IntProgression, kotlin.ranges/OpenEndRange<kotlin/Int> { // kotlin.ranges/IntRange|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // kotlin.ranges/IntRange.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val endExclusive // kotlin.ranges/IntRange.endExclusive|{}endExclusive[0]
        final fun <get-endExclusive>(): kotlin/Int // kotlin.ranges/IntRange.endExclusive.<get-endExclusive>|<get-endExclusive>(){}[0]
    final val endInclusive // kotlin.ranges/IntRange.endInclusive|{}endInclusive[0]
        final fun <get-endInclusive>(): kotlin/Int // kotlin.ranges/IntRange.endInclusive.<get-endInclusive>|<get-endInclusive>(){}[0]
    final val start // kotlin.ranges/IntRange.start|{}start[0]
        final fun <get-start>(): kotlin/Int // kotlin.ranges/IntRange.start.<get-start>|<get-start>(){}[0]

    final fun contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/IntRange.contains|contains(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/IntRange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.ranges/IntRange.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.ranges/IntRange.isEmpty|isEmpty(){}[0]
    final fun toString(): kotlin/String // kotlin.ranges/IntRange.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/IntRange.Companion|null[0]
        final val EMPTY // kotlin.ranges/IntRange.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): kotlin.ranges/IntRange // kotlin.ranges/IntRange.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]
    }
}

final class kotlin.ranges/LongRange : kotlin.ranges/ClosedRange<kotlin/Long>, kotlin.ranges/LongProgression, kotlin.ranges/OpenEndRange<kotlin/Long> { // kotlin.ranges/LongRange|null[0]
    constructor <init>(kotlin/Long, kotlin/Long) // kotlin.ranges/LongRange.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

    final val endExclusive // kotlin.ranges/LongRange.endExclusive|{}endExclusive[0]
        final fun <get-endExclusive>(): kotlin/Long // kotlin.ranges/LongRange.endExclusive.<get-endExclusive>|<get-endExclusive>(){}[0]
    final val endInclusive // kotlin.ranges/LongRange.endInclusive|{}endInclusive[0]
        final fun <get-endInclusive>(): kotlin/Long // kotlin.ranges/LongRange.endInclusive.<get-endInclusive>|<get-endInclusive>(){}[0]
    final val start // kotlin.ranges/LongRange.start|{}start[0]
        final fun <get-start>(): kotlin/Long // kotlin.ranges/LongRange.start.<get-start>|<get-start>(){}[0]

    final fun contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/LongRange.contains|contains(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/LongRange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.ranges/LongRange.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.ranges/LongRange.isEmpty|isEmpty(){}[0]
    final fun toString(): kotlin/String // kotlin.ranges/LongRange.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/LongRange.Companion|null[0]
        final val EMPTY // kotlin.ranges/LongRange.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): kotlin.ranges/LongRange // kotlin.ranges/LongRange.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]
    }
}

final class kotlin.ranges/UIntRange : kotlin.ranges/ClosedRange<kotlin/UInt>, kotlin.ranges/OpenEndRange<kotlin/UInt>, kotlin.ranges/UIntProgression { // kotlin.ranges/UIntRange|null[0]
    constructor <init>(kotlin/UInt, kotlin/UInt) // kotlin.ranges/UIntRange.<init>|<init>(kotlin.UInt;kotlin.UInt){}[0]

    final val endExclusive // kotlin.ranges/UIntRange.endExclusive|{}endExclusive[0]
        final fun <get-endExclusive>(): kotlin/UInt // kotlin.ranges/UIntRange.endExclusive.<get-endExclusive>|<get-endExclusive>(){}[0]
    final val endInclusive // kotlin.ranges/UIntRange.endInclusive|{}endInclusive[0]
        final fun <get-endInclusive>(): kotlin/UInt // kotlin.ranges/UIntRange.endInclusive.<get-endInclusive>|<get-endInclusive>(){}[0]
    final val start // kotlin.ranges/UIntRange.start|{}start[0]
        final fun <get-start>(): kotlin/UInt // kotlin.ranges/UIntRange.start.<get-start>|<get-start>(){}[0]

    final fun contains(kotlin/UInt): kotlin/Boolean // kotlin.ranges/UIntRange.contains|contains(kotlin.UInt){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/UIntRange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.ranges/UIntRange.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.ranges/UIntRange.isEmpty|isEmpty(){}[0]
    final fun toString(): kotlin/String // kotlin.ranges/UIntRange.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/UIntRange.Companion|null[0]
        final val EMPTY // kotlin.ranges/UIntRange.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): kotlin.ranges/UIntRange // kotlin.ranges/UIntRange.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]
    }
}

final class kotlin.ranges/ULongRange : kotlin.ranges/ClosedRange<kotlin/ULong>, kotlin.ranges/OpenEndRange<kotlin/ULong>, kotlin.ranges/ULongProgression { // kotlin.ranges/ULongRange|null[0]
    constructor <init>(kotlin/ULong, kotlin/ULong) // kotlin.ranges/ULongRange.<init>|<init>(kotlin.ULong;kotlin.ULong){}[0]

    final val endExclusive // kotlin.ranges/ULongRange.endExclusive|{}endExclusive[0]
        final fun <get-endExclusive>(): kotlin/ULong // kotlin.ranges/ULongRange.endExclusive.<get-endExclusive>|<get-endExclusive>(){}[0]
    final val endInclusive // kotlin.ranges/ULongRange.endInclusive|{}endInclusive[0]
        final fun <get-endInclusive>(): kotlin/ULong // kotlin.ranges/ULongRange.endInclusive.<get-endInclusive>|<get-endInclusive>(){}[0]
    final val start // kotlin.ranges/ULongRange.start|{}start[0]
        final fun <get-start>(): kotlin/ULong // kotlin.ranges/ULongRange.start.<get-start>|<get-start>(){}[0]

    final fun contains(kotlin/ULong): kotlin/Boolean // kotlin.ranges/ULongRange.contains|contains(kotlin.ULong){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/ULongRange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.ranges/ULongRange.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.ranges/ULongRange.isEmpty|isEmpty(){}[0]
    final fun toString(): kotlin/String // kotlin.ranges/ULongRange.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/ULongRange.Companion|null[0]
        final val EMPTY // kotlin.ranges/ULongRange.Companion.EMPTY|{}EMPTY[0]
            final fun <get-EMPTY>(): kotlin.ranges/ULongRange // kotlin.ranges/ULongRange.Companion.EMPTY.<get-EMPTY>|<get-EMPTY>(){}[0]
    }
}

final class kotlin.reflect/KTypeProjection { // kotlin.reflect/KTypeProjection|null[0]
    constructor <init>(kotlin.reflect/KVariance?, kotlin.reflect/KType?) // kotlin.reflect/KTypeProjection.<init>|<init>(kotlin.reflect.KVariance?;kotlin.reflect.KType?){}[0]

    final val type // kotlin.reflect/KTypeProjection.type|{}type[0]
        final fun <get-type>(): kotlin.reflect/KType? // kotlin.reflect/KTypeProjection.type.<get-type>|<get-type>(){}[0]
    final val variance // kotlin.reflect/KTypeProjection.variance|{}variance[0]
        final fun <get-variance>(): kotlin.reflect/KVariance? // kotlin.reflect/KTypeProjection.variance.<get-variance>|<get-variance>(){}[0]

    final fun component1(): kotlin.reflect/KVariance? // kotlin.reflect/KTypeProjection.component1|component1(){}[0]
    final fun component2(): kotlin.reflect/KType? // kotlin.reflect/KTypeProjection.component2|component2(){}[0]
    final fun copy(kotlin.reflect/KVariance? = ..., kotlin.reflect/KType? = ...): kotlin.reflect/KTypeProjection // kotlin.reflect/KTypeProjection.copy|copy(kotlin.reflect.KVariance?;kotlin.reflect.KType?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.reflect/KTypeProjection.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.reflect/KTypeProjection.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.reflect/KTypeProjection.toString|toString(){}[0]

    final object Companion { // kotlin.reflect/KTypeProjection.Companion|null[0]
        final val STAR // kotlin.reflect/KTypeProjection.Companion.STAR|{}STAR[0]
            final fun <get-STAR>(): kotlin.reflect/KTypeProjection // kotlin.reflect/KTypeProjection.Companion.STAR.<get-STAR>|<get-STAR>(){}[0]
        final val star // kotlin.reflect/KTypeProjection.Companion.star|{}star[0]
            final fun <get-star>(): kotlin.reflect/KTypeProjection // kotlin.reflect/KTypeProjection.Companion.star.<get-star>|<get-star>(){}[0]

        final fun contravariant(kotlin.reflect/KType): kotlin.reflect/KTypeProjection // kotlin.reflect/KTypeProjection.Companion.contravariant|contravariant(kotlin.reflect.KType){}[0]
        final fun covariant(kotlin.reflect/KType): kotlin.reflect/KTypeProjection // kotlin.reflect/KTypeProjection.Companion.covariant|covariant(kotlin.reflect.KType){}[0]
        final fun invariant(kotlin.reflect/KType): kotlin.reflect/KTypeProjection // kotlin.reflect/KTypeProjection.Companion.invariant|invariant(kotlin.reflect.KType){}[0]
    }
}

final class kotlin.text/HexFormat { // kotlin.text/HexFormat|null[0]
    final val bytes // kotlin.text/HexFormat.bytes|{}bytes[0]
        final fun <get-bytes>(): kotlin.text/HexFormat.BytesHexFormat // kotlin.text/HexFormat.bytes.<get-bytes>|<get-bytes>(){}[0]
    final val number // kotlin.text/HexFormat.number|{}number[0]
        final fun <get-number>(): kotlin.text/HexFormat.NumberHexFormat // kotlin.text/HexFormat.number.<get-number>|<get-number>(){}[0]
    final val upperCase // kotlin.text/HexFormat.upperCase|{}upperCase[0]
        final fun <get-upperCase>(): kotlin/Boolean // kotlin.text/HexFormat.upperCase.<get-upperCase>|<get-upperCase>(){}[0]

    final fun toString(): kotlin/String // kotlin.text/HexFormat.toString|toString(){}[0]

    final class Builder { // kotlin.text/HexFormat.Builder|null[0]
        constructor <init>() // kotlin.text/HexFormat.Builder.<init>|<init>(){}[0]

        final val bytes // kotlin.text/HexFormat.Builder.bytes|{}bytes[0]
            final fun <get-bytes>(): kotlin.text/HexFormat.BytesHexFormat.Builder // kotlin.text/HexFormat.Builder.bytes.<get-bytes>|<get-bytes>(){}[0]
        final val number // kotlin.text/HexFormat.Builder.number|{}number[0]
            final fun <get-number>(): kotlin.text/HexFormat.NumberHexFormat.Builder // kotlin.text/HexFormat.Builder.number.<get-number>|<get-number>(){}[0]

        final var upperCase // kotlin.text/HexFormat.Builder.upperCase|{}upperCase[0]
            final fun <get-upperCase>(): kotlin/Boolean // kotlin.text/HexFormat.Builder.upperCase.<get-upperCase>|<get-upperCase>(){}[0]
            final fun <set-upperCase>(kotlin/Boolean) // kotlin.text/HexFormat.Builder.upperCase.<set-upperCase>|<set-upperCase>(kotlin.Boolean){}[0]

        final fun build(): kotlin.text/HexFormat // kotlin.text/HexFormat.Builder.build|build(){}[0]
        final inline fun bytes(kotlin/Function1<kotlin.text/HexFormat.BytesHexFormat.Builder, kotlin/Unit>) // kotlin.text/HexFormat.Builder.bytes|bytes(kotlin.Function1<kotlin.text.HexFormat.BytesHexFormat.Builder,kotlin.Unit>){}[0]
        final inline fun number(kotlin/Function1<kotlin.text/HexFormat.NumberHexFormat.Builder, kotlin/Unit>) // kotlin.text/HexFormat.Builder.number|number(kotlin.Function1<kotlin.text.HexFormat.NumberHexFormat.Builder,kotlin.Unit>){}[0]
    }

    final class BytesHexFormat { // kotlin.text/HexFormat.BytesHexFormat|null[0]
        final val bytePrefix // kotlin.text/HexFormat.BytesHexFormat.bytePrefix|{}bytePrefix[0]
            final fun <get-bytePrefix>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.bytePrefix.<get-bytePrefix>|<get-bytePrefix>(){}[0]
        final val byteSeparator // kotlin.text/HexFormat.BytesHexFormat.byteSeparator|{}byteSeparator[0]
            final fun <get-byteSeparator>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.byteSeparator.<get-byteSeparator>|<get-byteSeparator>(){}[0]
        final val byteSuffix // kotlin.text/HexFormat.BytesHexFormat.byteSuffix|{}byteSuffix[0]
            final fun <get-byteSuffix>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.byteSuffix.<get-byteSuffix>|<get-byteSuffix>(){}[0]
        final val bytesPerGroup // kotlin.text/HexFormat.BytesHexFormat.bytesPerGroup|{}bytesPerGroup[0]
            final fun <get-bytesPerGroup>(): kotlin/Int // kotlin.text/HexFormat.BytesHexFormat.bytesPerGroup.<get-bytesPerGroup>|<get-bytesPerGroup>(){}[0]
        final val bytesPerLine // kotlin.text/HexFormat.BytesHexFormat.bytesPerLine|{}bytesPerLine[0]
            final fun <get-bytesPerLine>(): kotlin/Int // kotlin.text/HexFormat.BytesHexFormat.bytesPerLine.<get-bytesPerLine>|<get-bytesPerLine>(){}[0]
        final val groupSeparator // kotlin.text/HexFormat.BytesHexFormat.groupSeparator|{}groupSeparator[0]
            final fun <get-groupSeparator>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.groupSeparator.<get-groupSeparator>|<get-groupSeparator>(){}[0]

        final fun toString(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.toString|toString(){}[0]

        final class Builder { // kotlin.text/HexFormat.BytesHexFormat.Builder|null[0]
            final var bytePrefix // kotlin.text/HexFormat.BytesHexFormat.Builder.bytePrefix|{}bytePrefix[0]
                final fun <get-bytePrefix>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.Builder.bytePrefix.<get-bytePrefix>|<get-bytePrefix>(){}[0]
                final fun <set-bytePrefix>(kotlin/String) // kotlin.text/HexFormat.BytesHexFormat.Builder.bytePrefix.<set-bytePrefix>|<set-bytePrefix>(kotlin.String){}[0]
            final var byteSeparator // kotlin.text/HexFormat.BytesHexFormat.Builder.byteSeparator|{}byteSeparator[0]
                final fun <get-byteSeparator>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.Builder.byteSeparator.<get-byteSeparator>|<get-byteSeparator>(){}[0]
                final fun <set-byteSeparator>(kotlin/String) // kotlin.text/HexFormat.BytesHexFormat.Builder.byteSeparator.<set-byteSeparator>|<set-byteSeparator>(kotlin.String){}[0]
            final var byteSuffix // kotlin.text/HexFormat.BytesHexFormat.Builder.byteSuffix|{}byteSuffix[0]
                final fun <get-byteSuffix>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.Builder.byteSuffix.<get-byteSuffix>|<get-byteSuffix>(){}[0]
                final fun <set-byteSuffix>(kotlin/String) // kotlin.text/HexFormat.BytesHexFormat.Builder.byteSuffix.<set-byteSuffix>|<set-byteSuffix>(kotlin.String){}[0]
            final var bytesPerGroup // kotlin.text/HexFormat.BytesHexFormat.Builder.bytesPerGroup|{}bytesPerGroup[0]
                final fun <get-bytesPerGroup>(): kotlin/Int // kotlin.text/HexFormat.BytesHexFormat.Builder.bytesPerGroup.<get-bytesPerGroup>|<get-bytesPerGroup>(){}[0]
                final fun <set-bytesPerGroup>(kotlin/Int) // kotlin.text/HexFormat.BytesHexFormat.Builder.bytesPerGroup.<set-bytesPerGroup>|<set-bytesPerGroup>(kotlin.Int){}[0]
            final var bytesPerLine // kotlin.text/HexFormat.BytesHexFormat.Builder.bytesPerLine|{}bytesPerLine[0]
                final fun <get-bytesPerLine>(): kotlin/Int // kotlin.text/HexFormat.BytesHexFormat.Builder.bytesPerLine.<get-bytesPerLine>|<get-bytesPerLine>(){}[0]
                final fun <set-bytesPerLine>(kotlin/Int) // kotlin.text/HexFormat.BytesHexFormat.Builder.bytesPerLine.<set-bytesPerLine>|<set-bytesPerLine>(kotlin.Int){}[0]
            final var groupSeparator // kotlin.text/HexFormat.BytesHexFormat.Builder.groupSeparator|{}groupSeparator[0]
                final fun <get-groupSeparator>(): kotlin/String // kotlin.text/HexFormat.BytesHexFormat.Builder.groupSeparator.<get-groupSeparator>|<get-groupSeparator>(){}[0]
                final fun <set-groupSeparator>(kotlin/String) // kotlin.text/HexFormat.BytesHexFormat.Builder.groupSeparator.<set-groupSeparator>|<set-groupSeparator>(kotlin.String){}[0]
        }
    }

    final class NumberHexFormat { // kotlin.text/HexFormat.NumberHexFormat|null[0]
        final val minLength // kotlin.text/HexFormat.NumberHexFormat.minLength|{}minLength[0]
            final fun <get-minLength>(): kotlin/Int // kotlin.text/HexFormat.NumberHexFormat.minLength.<get-minLength>|<get-minLength>(){}[0]
        final val prefix // kotlin.text/HexFormat.NumberHexFormat.prefix|{}prefix[0]
            final fun <get-prefix>(): kotlin/String // kotlin.text/HexFormat.NumberHexFormat.prefix.<get-prefix>|<get-prefix>(){}[0]
        final val removeLeadingZeros // kotlin.text/HexFormat.NumberHexFormat.removeLeadingZeros|{}removeLeadingZeros[0]
            final fun <get-removeLeadingZeros>(): kotlin/Boolean // kotlin.text/HexFormat.NumberHexFormat.removeLeadingZeros.<get-removeLeadingZeros>|<get-removeLeadingZeros>(){}[0]
        final val suffix // kotlin.text/HexFormat.NumberHexFormat.suffix|{}suffix[0]
            final fun <get-suffix>(): kotlin/String // kotlin.text/HexFormat.NumberHexFormat.suffix.<get-suffix>|<get-suffix>(){}[0]

        final fun toString(): kotlin/String // kotlin.text/HexFormat.NumberHexFormat.toString|toString(){}[0]

        final class Builder { // kotlin.text/HexFormat.NumberHexFormat.Builder|null[0]
            final var minLength // kotlin.text/HexFormat.NumberHexFormat.Builder.minLength|{}minLength[0]
                final fun <get-minLength>(): kotlin/Int // kotlin.text/HexFormat.NumberHexFormat.Builder.minLength.<get-minLength>|<get-minLength>(){}[0]
                final fun <set-minLength>(kotlin/Int) // kotlin.text/HexFormat.NumberHexFormat.Builder.minLength.<set-minLength>|<set-minLength>(kotlin.Int){}[0]
            final var prefix // kotlin.text/HexFormat.NumberHexFormat.Builder.prefix|{}prefix[0]
                final fun <get-prefix>(): kotlin/String // kotlin.text/HexFormat.NumberHexFormat.Builder.prefix.<get-prefix>|<get-prefix>(){}[0]
                final fun <set-prefix>(kotlin/String) // kotlin.text/HexFormat.NumberHexFormat.Builder.prefix.<set-prefix>|<set-prefix>(kotlin.String){}[0]
            final var removeLeadingZeros // kotlin.text/HexFormat.NumberHexFormat.Builder.removeLeadingZeros|{}removeLeadingZeros[0]
                final fun <get-removeLeadingZeros>(): kotlin/Boolean // kotlin.text/HexFormat.NumberHexFormat.Builder.removeLeadingZeros.<get-removeLeadingZeros>|<get-removeLeadingZeros>(){}[0]
                final fun <set-removeLeadingZeros>(kotlin/Boolean) // kotlin.text/HexFormat.NumberHexFormat.Builder.removeLeadingZeros.<set-removeLeadingZeros>|<set-removeLeadingZeros>(kotlin.Boolean){}[0]
            final var suffix // kotlin.text/HexFormat.NumberHexFormat.Builder.suffix|{}suffix[0]
                final fun <get-suffix>(): kotlin/String // kotlin.text/HexFormat.NumberHexFormat.Builder.suffix.<get-suffix>|<get-suffix>(){}[0]
                final fun <set-suffix>(kotlin/String) // kotlin.text/HexFormat.NumberHexFormat.Builder.suffix.<set-suffix>|<set-suffix>(kotlin.String){}[0]
        }
    }

    final object Companion { // kotlin.text/HexFormat.Companion|null[0]
        final val Default // kotlin.text/HexFormat.Companion.Default|{}Default[0]
            final fun <get-Default>(): kotlin.text/HexFormat // kotlin.text/HexFormat.Companion.Default.<get-Default>|<get-Default>(){}[0]
        final val UpperCase // kotlin.text/HexFormat.Companion.UpperCase|{}UpperCase[0]
            final fun <get-UpperCase>(): kotlin.text/HexFormat // kotlin.text/HexFormat.Companion.UpperCase.<get-UpperCase>|<get-UpperCase>(){}[0]
    }
}

final class kotlin.text/MatchGroup { // kotlin.text/MatchGroup|null[0]
    final val value // kotlin.text/MatchGroup.value|{}value[0]
        final fun <get-value>(): kotlin/String // kotlin.text/MatchGroup.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // kotlin.text/MatchGroup.component1|component1(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.text/MatchGroup.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.text/MatchGroup.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.text/MatchGroup.toString|toString(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    constructor <init>(kotlin/String, kotlin.ranges/IntRange) // kotlin.text/MatchGroup.<init>|<init>(kotlin.String;kotlin.ranges.IntRange){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final val range // kotlin.text/MatchGroup.range|{}range[0]
        final fun <get-range>(): kotlin.ranges/IntRange // kotlin.text/MatchGroup.range.<get-range>|<get-range>(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final fun component2(): kotlin.ranges/IntRange // kotlin.text/MatchGroup.component2|component2(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final fun copy(kotlin/String = ..., kotlin.ranges/IntRange = ...): kotlin.text/MatchGroup // kotlin.text/MatchGroup.copy|copy(kotlin.String;kotlin.ranges.IntRange){}[0]

    // Targets: [js]
    constructor <init>(kotlin/String) // kotlin.text/MatchGroup.<init>|<init>(kotlin.String){}[0]

    // Targets: [js]
    final fun copy(kotlin/String = ...): kotlin.text/MatchGroup // kotlin.text/MatchGroup.copy|copy(kotlin.String){}[0]
}

final class kotlin.text/Regex { // kotlin.text/Regex|null[0]
    constructor <init>(kotlin/String) // kotlin.text/Regex.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin.collections/Set<kotlin.text/RegexOption>) // kotlin.text/Regex.<init>|<init>(kotlin.String;kotlin.collections.Set<kotlin.text.RegexOption>){}[0]
    constructor <init>(kotlin/String, kotlin.text/RegexOption) // kotlin.text/Regex.<init>|<init>(kotlin.String;kotlin.text.RegexOption){}[0]

    final val options // kotlin.text/Regex.options|{}options[0]
        final fun <get-options>(): kotlin.collections/Set<kotlin.text/RegexOption> // kotlin.text/Regex.options.<get-options>|<get-options>(){}[0]
    final val pattern // kotlin.text/Regex.pattern|{}pattern[0]
        final fun <get-pattern>(): kotlin/String // kotlin.text/Regex.pattern.<get-pattern>|<get-pattern>(){}[0]

    final fun containsMatchIn(kotlin/CharSequence): kotlin/Boolean // kotlin.text/Regex.containsMatchIn|containsMatchIn(kotlin.CharSequence){}[0]
    final fun find(kotlin/CharSequence, kotlin/Int = ...): kotlin.text/MatchResult? // kotlin.text/Regex.find|find(kotlin.CharSequence;kotlin.Int){}[0]
    final fun findAll(kotlin/CharSequence, kotlin/Int = ...): kotlin.sequences/Sequence<kotlin.text/MatchResult> // kotlin.text/Regex.findAll|findAll(kotlin.CharSequence;kotlin.Int){}[0]
    final fun matchAt(kotlin/CharSequence, kotlin/Int): kotlin.text/MatchResult? // kotlin.text/Regex.matchAt|matchAt(kotlin.CharSequence;kotlin.Int){}[0]
    final fun matchEntire(kotlin/CharSequence): kotlin.text/MatchResult? // kotlin.text/Regex.matchEntire|matchEntire(kotlin.CharSequence){}[0]
    final fun matches(kotlin/CharSequence): kotlin/Boolean // kotlin.text/Regex.matches|matches(kotlin.CharSequence){}[0]
    final fun matchesAt(kotlin/CharSequence, kotlin/Int): kotlin/Boolean // kotlin.text/Regex.matchesAt|matchesAt(kotlin.CharSequence;kotlin.Int){}[0]
    final fun replace(kotlin/CharSequence, kotlin/Function1<kotlin.text/MatchResult, kotlin/CharSequence>): kotlin/String // kotlin.text/Regex.replace|replace(kotlin.CharSequence;kotlin.Function1<kotlin.text.MatchResult,kotlin.CharSequence>){}[0]
    final fun replace(kotlin/CharSequence, kotlin/String): kotlin/String // kotlin.text/Regex.replace|replace(kotlin.CharSequence;kotlin.String){}[0]
    final fun replaceFirst(kotlin/CharSequence, kotlin/String): kotlin/String // kotlin.text/Regex.replaceFirst|replaceFirst(kotlin.CharSequence;kotlin.String){}[0]
    final fun split(kotlin/CharSequence, kotlin/Int = ...): kotlin.collections/List<kotlin/String> // kotlin.text/Regex.split|split(kotlin.CharSequence;kotlin.Int){}[0]
    final fun splitToSequence(kotlin/CharSequence, kotlin/Int = ...): kotlin.sequences/Sequence<kotlin/String> // kotlin.text/Regex.splitToSequence|splitToSequence(kotlin.CharSequence;kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlin.text/Regex.toString|toString(){}[0]

    final object Companion { // kotlin.text/Regex.Companion|null[0]
        final fun escape(kotlin/String): kotlin/String // kotlin.text/Regex.Companion.escape|escape(kotlin.String){}[0]
        final fun escapeReplacement(kotlin/String): kotlin/String // kotlin.text/Regex.Companion.escapeReplacement|escapeReplacement(kotlin.String){}[0]
        final fun fromLiteral(kotlin/String): kotlin.text/Regex // kotlin.text/Regex.Companion.fromLiteral|fromLiteral(kotlin.String){}[0]
    }
}

final class kotlin.text/StringBuilder : kotlin.text/Appendable, kotlin/CharSequence { // kotlin.text/StringBuilder|null[0]
    constructor <init>() // kotlin.text/StringBuilder.<init>|<init>(){}[0]
    constructor <init>(kotlin/CharSequence) // kotlin.text/StringBuilder.<init>|<init>(kotlin.CharSequence){}[0]
    constructor <init>(kotlin/Int) // kotlin.text/StringBuilder.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/String) // kotlin.text/StringBuilder.<init>|<init>(kotlin.String){}[0]

    final val length // kotlin.text/StringBuilder.length|{}length[0]
        final fun <get-length>(): kotlin/Int // kotlin.text/StringBuilder.length.<get-length>|<get-length>(){}[0]

    final fun append(kotlin/Any?): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Any?){}[0]
    final fun append(kotlin/Boolean): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Boolean){}[0]
    final fun append(kotlin/Byte): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Byte){}[0]
    final fun append(kotlin/Char): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Char){}[0]
    final fun append(kotlin/CharArray): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.CharArray){}[0]
    final fun append(kotlin/CharSequence?): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.CharSequence?){}[0]
    final fun append(kotlin/CharSequence?, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}[0]
    final fun append(kotlin/Double): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Double){}[0]
    final fun append(kotlin/Float): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Float){}[0]
    final fun append(kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Int){}[0]
    final fun append(kotlin/Long): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Long){}[0]
    final fun append(kotlin/Short): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.Short){}[0]
    final fun append(kotlin/String?): kotlin.text/StringBuilder // kotlin.text/StringBuilder.append|append(kotlin.String?){}[0]
    final fun appendRange(kotlin/CharArray, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.appendRange|appendRange(kotlin.CharArray;kotlin.Int;kotlin.Int){}[0]
    final fun appendRange(kotlin/CharSequence, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.appendRange|appendRange(kotlin.CharSequence;kotlin.Int;kotlin.Int){}[0]
    final fun capacity(): kotlin/Int // kotlin.text/StringBuilder.capacity|capacity(){}[0]
    final fun deleteAt(kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.deleteAt|deleteAt(kotlin.Int){}[0]
    final fun deleteRange(kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.deleteRange|deleteRange(kotlin.Int;kotlin.Int){}[0]
    final fun ensureCapacity(kotlin/Int) // kotlin.text/StringBuilder.ensureCapacity|ensureCapacity(kotlin.Int){}[0]
    final fun get(kotlin/Int): kotlin/Char // kotlin.text/StringBuilder.get|get(kotlin.Int){}[0]
    final fun indexOf(kotlin/String): kotlin/Int // kotlin.text/StringBuilder.indexOf|indexOf(kotlin.String){}[0]
    final fun indexOf(kotlin/String, kotlin/Int): kotlin/Int // kotlin.text/StringBuilder.indexOf|indexOf(kotlin.String;kotlin.Int){}[0]
    final fun insert(kotlin/Int, kotlin/Any?): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Any?){}[0]
    final fun insert(kotlin/Int, kotlin/Boolean): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Boolean){}[0]
    final fun insert(kotlin/Int, kotlin/Byte): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Byte){}[0]
    final fun insert(kotlin/Int, kotlin/Char): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Char){}[0]
    final fun insert(kotlin/Int, kotlin/CharArray): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.CharArray){}[0]
    final fun insert(kotlin/Int, kotlin/CharSequence?): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.CharSequence?){}[0]
    final fun insert(kotlin/Int, kotlin/Double): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Double){}[0]
    final fun insert(kotlin/Int, kotlin/Float): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Float){}[0]
    final fun insert(kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Int){}[0]
    final fun insert(kotlin/Int, kotlin/Long): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Long){}[0]
    final fun insert(kotlin/Int, kotlin/Short): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.Short){}[0]
    final fun insert(kotlin/Int, kotlin/String?): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insert|insert(kotlin.Int;kotlin.String?){}[0]
    final fun insertRange(kotlin/Int, kotlin/CharArray, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insertRange|insertRange(kotlin.Int;kotlin.CharArray;kotlin.Int;kotlin.Int){}[0]
    final fun insertRange(kotlin/Int, kotlin/CharSequence, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/StringBuilder.insertRange|insertRange(kotlin.Int;kotlin.CharSequence;kotlin.Int;kotlin.Int){}[0]
    final fun lastIndexOf(kotlin/String): kotlin/Int // kotlin.text/StringBuilder.lastIndexOf|lastIndexOf(kotlin.String){}[0]
    final fun lastIndexOf(kotlin/String, kotlin/Int): kotlin/Int // kotlin.text/StringBuilder.lastIndexOf|lastIndexOf(kotlin.String;kotlin.Int){}[0]
    final fun reverse(): kotlin.text/StringBuilder // kotlin.text/StringBuilder.reverse|reverse(){}[0]
    final fun set(kotlin/Int, kotlin/Char) // kotlin.text/StringBuilder.set|set(kotlin.Int;kotlin.Char){}[0]
    final fun setLength(kotlin/Int) // kotlin.text/StringBuilder.setLength|setLength(kotlin.Int){}[0]
    final fun setRange(kotlin/Int, kotlin/Int, kotlin/String): kotlin.text/StringBuilder // kotlin.text/StringBuilder.setRange|setRange(kotlin.Int;kotlin.Int;kotlin.String){}[0]
    final fun subSequence(kotlin/Int, kotlin/Int): kotlin/CharSequence // kotlin.text/StringBuilder.subSequence|subSequence(kotlin.Int;kotlin.Int){}[0]
    final fun substring(kotlin/Int): kotlin/String // kotlin.text/StringBuilder.substring|substring(kotlin.Int){}[0]
    final fun substring(kotlin/Int, kotlin/Int): kotlin/String // kotlin.text/StringBuilder.substring|substring(kotlin.Int;kotlin.Int){}[0]
    final fun toCharArray(kotlin/CharArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...) // kotlin.text/StringBuilder.toCharArray|toCharArray(kotlin.CharArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlin.text/StringBuilder.toString|toString(){}[0]
    final fun trimToSize() // kotlin.text/StringBuilder.trimToSize|trimToSize(){}[0]

    // Targets: [js]
    final fun clear(): kotlin.text/StringBuilder // kotlin.text/StringBuilder.clear|clear(){}[0]
}

final class kotlin.time/TestTimeSource : kotlin.time/AbstractLongTimeSource { // kotlin.time/TestTimeSource|null[0]
    constructor <init>() // kotlin.time/TestTimeSource.<init>|<init>(){}[0]

    final fun plusAssign(kotlin.time/Duration) // kotlin.time/TestTimeSource.plusAssign|plusAssign(kotlin.time.Duration){}[0]
}

final class kotlin.uuid/Uuid : kotlin.io/Serializable { // kotlin.uuid/Uuid|null[0]
    final val leastSignificantBits // kotlin.uuid/Uuid.leastSignificantBits|{}leastSignificantBits[0]
        final fun <get-leastSignificantBits>(): kotlin/Long // kotlin.uuid/Uuid.leastSignificantBits.<get-leastSignificantBits>|<get-leastSignificantBits>(){}[0]
    final val mostSignificantBits // kotlin.uuid/Uuid.mostSignificantBits|{}mostSignificantBits[0]
        final fun <get-mostSignificantBits>(): kotlin/Long // kotlin.uuid/Uuid.mostSignificantBits.<get-mostSignificantBits>|<get-mostSignificantBits>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.uuid/Uuid.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.uuid/Uuid.hashCode|hashCode(){}[0]
    final fun toByteArray(): kotlin/ByteArray // kotlin.uuid/Uuid.toByteArray|toByteArray(){}[0]
    final fun toHexString(): kotlin/String // kotlin.uuid/Uuid.toHexString|toHexString(){}[0]
    final fun toString(): kotlin/String // kotlin.uuid/Uuid.toString|toString(){}[0]
    final inline fun <#A1: kotlin/Any?> toLongs(kotlin/Function2<kotlin/Long, kotlin/Long, #A1>): #A1 // kotlin.uuid/Uuid.toLongs|toLongs(kotlin.Function2<kotlin.Long,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> toULongs(kotlin/Function2<kotlin/ULong, kotlin/ULong, #A1>): #A1 // kotlin.uuid/Uuid.toULongs|toULongs(kotlin.Function2<kotlin.ULong,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]

    final object Companion { // kotlin.uuid/Uuid.Companion|null[0]
        final const val SIZE_BITS // kotlin.uuid/Uuid.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin.uuid/Uuid.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin.uuid/Uuid.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin.uuid/Uuid.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]

        final val LEXICAL_ORDER // kotlin.uuid/Uuid.Companion.LEXICAL_ORDER|{}LEXICAL_ORDER[0]
            final fun <get-LEXICAL_ORDER>(): kotlin/Comparator<kotlin.uuid/Uuid> // kotlin.uuid/Uuid.Companion.LEXICAL_ORDER.<get-LEXICAL_ORDER>|<get-LEXICAL_ORDER>(){}[0]
        final val NIL // kotlin.uuid/Uuid.Companion.NIL|{}NIL[0]
            final fun <get-NIL>(): kotlin.uuid/Uuid // kotlin.uuid/Uuid.Companion.NIL.<get-NIL>|<get-NIL>(){}[0]

        final fun fromByteArray(kotlin/ByteArray): kotlin.uuid/Uuid // kotlin.uuid/Uuid.Companion.fromByteArray|fromByteArray(kotlin.ByteArray){}[0]
        final fun fromLongs(kotlin/Long, kotlin/Long): kotlin.uuid/Uuid // kotlin.uuid/Uuid.Companion.fromLongs|fromLongs(kotlin.Long;kotlin.Long){}[0]
        final fun fromULongs(kotlin/ULong, kotlin/ULong): kotlin.uuid/Uuid // kotlin.uuid/Uuid.Companion.fromULongs|fromULongs(kotlin.ULong;kotlin.ULong){}[0]
        final fun parse(kotlin/String): kotlin.uuid/Uuid // kotlin.uuid/Uuid.Companion.parse|parse(kotlin.String){}[0]
        final fun parseHex(kotlin/String): kotlin.uuid/Uuid // kotlin.uuid/Uuid.Companion.parseHex|parseHex(kotlin.String){}[0]
        final fun random(): kotlin.uuid/Uuid // kotlin.uuid/Uuid.Companion.random|random(){}[0]
    }
}

final class kotlin/Boolean : kotlin/Comparable<kotlin/Boolean> { // kotlin/Boolean|null[0]
    final fun and(kotlin/Boolean): kotlin/Boolean // kotlin/Boolean.and|and(kotlin.Boolean){}[0]
    final fun compareTo(kotlin/Boolean): kotlin/Int // kotlin/Boolean.compareTo|compareTo(kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Boolean.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Boolean.hashCode|hashCode(){}[0]
    final fun not(): kotlin/Boolean // kotlin/Boolean.not|not(){}[0]
    final fun or(kotlin/Boolean): kotlin/Boolean // kotlin/Boolean.or|or(kotlin.Boolean){}[0]
    final fun toString(): kotlin/String // kotlin/Boolean.toString|toString(){}[0]
    final fun xor(kotlin/Boolean): kotlin/Boolean // kotlin/Boolean.xor|xor(kotlin.Boolean){}[0]

    final object Companion // kotlin/Boolean.Companion|null[0]

    // Targets: [native]
    final fun equals(kotlin/Boolean): kotlin/Boolean // kotlin/Boolean.equals|equals(kotlin.Boolean){}[0]
}

final class kotlin/BooleanArray { // kotlin/BooleanArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/BooleanArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Boolean>) // kotlin/BooleanArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]

    final val size // kotlin/BooleanArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/BooleanArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Boolean // kotlin/BooleanArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/BooleanIterator // kotlin/BooleanArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Boolean) // kotlin/BooleanArray.set|set(kotlin.Int;kotlin.Boolean){}[0]
}

final class kotlin/Byte : kotlin/Comparable<kotlin/Byte>, kotlin/Number { // kotlin/Byte|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Byte.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Byte.hashCode|hashCode(){}[0]
    final fun rangeTo(kotlin/Byte): kotlin.ranges/IntRange // kotlin/Byte.rangeTo|rangeTo(kotlin.Byte){}[0]
    final fun rangeTo(kotlin/Int): kotlin.ranges/IntRange // kotlin/Byte.rangeTo|rangeTo(kotlin.Int){}[0]
    final fun rangeTo(kotlin/Long): kotlin.ranges/LongRange // kotlin/Byte.rangeTo|rangeTo(kotlin.Long){}[0]
    final fun rangeTo(kotlin/Short): kotlin.ranges/IntRange // kotlin/Byte.rangeTo|rangeTo(kotlin.Short){}[0]
    final fun rangeUntil(kotlin/Byte): kotlin.ranges/IntRange // kotlin/Byte.rangeUntil|rangeUntil(kotlin.Byte){}[0]
    final fun rangeUntil(kotlin/Int): kotlin.ranges/IntRange // kotlin/Byte.rangeUntil|rangeUntil(kotlin.Int){}[0]
    final fun rangeUntil(kotlin/Long): kotlin.ranges/LongRange // kotlin/Byte.rangeUntil|rangeUntil(kotlin.Long){}[0]
    final fun rangeUntil(kotlin/Short): kotlin.ranges/IntRange // kotlin/Byte.rangeUntil|rangeUntil(kotlin.Short){}[0]
    final fun toChar(): kotlin/Char // kotlin/Byte.toChar|toChar(){}[0]
    final fun toDouble(): kotlin/Double // kotlin/Byte.toDouble|toDouble(){}[0]
    final fun toFloat(): kotlin/Float // kotlin/Byte.toFloat|toFloat(){}[0]
    final fun toInt(): kotlin/Int // kotlin/Byte.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // kotlin/Byte.toLong|toLong(){}[0]
    final fun toShort(): kotlin/Short // kotlin/Byte.toShort|toShort(){}[0]
    final fun toString(): kotlin/String // kotlin/Byte.toString|toString(){}[0]

    final object Companion { // kotlin/Byte.Companion|null[0]
        final const val MAX_VALUE // kotlin/Byte.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Byte // kotlin/Byte.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/Byte.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Byte // kotlin/Byte.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/Byte.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/Byte.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/Byte.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/Byte.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Double): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Float): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Int): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Long): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Short): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Byte): kotlin/Int // kotlin/Byte.div|div(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Double): kotlin/Double // kotlin/Byte.div|div(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Float): kotlin/Float // kotlin/Byte.div|div(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Int): kotlin/Int // kotlin/Byte.div|div(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Long): kotlin/Long // kotlin/Byte.div|div(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Short): kotlin/Int // kotlin/Byte.div|div(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Byte): kotlin/Int // kotlin/Byte.minus|minus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Double): kotlin/Double // kotlin/Byte.minus|minus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Float): kotlin/Float // kotlin/Byte.minus|minus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Int): kotlin/Int // kotlin/Byte.minus|minus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Long): kotlin/Long // kotlin/Byte.minus|minus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Short): kotlin/Int // kotlin/Byte.minus|minus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Byte): kotlin/Int // kotlin/Byte.plus|plus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Double): kotlin/Double // kotlin/Byte.plus|plus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Float): kotlin/Float // kotlin/Byte.plus|plus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Int): kotlin/Int // kotlin/Byte.plus|plus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Long): kotlin/Long // kotlin/Byte.plus|plus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Short): kotlin/Int // kotlin/Byte.plus|plus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Byte): kotlin/Int // kotlin/Byte.rem|rem(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Double): kotlin/Double // kotlin/Byte.rem|rem(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Float): kotlin/Float // kotlin/Byte.rem|rem(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Int): kotlin/Int // kotlin/Byte.rem|rem(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Long): kotlin/Long // kotlin/Byte.rem|rem(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Short): kotlin/Int // kotlin/Byte.rem|rem(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Byte): kotlin/Int // kotlin/Byte.times|times(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Double): kotlin/Double // kotlin/Byte.times|times(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Float): kotlin/Float // kotlin/Byte.times|times(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Int): kotlin/Int // kotlin/Byte.times|times(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Long): kotlin/Long // kotlin/Byte.times|times(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Short): kotlin/Int // kotlin/Byte.times|times(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun toByte(): kotlin/Byte // kotlin/Byte.toByte|toByte(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun unaryMinus(): kotlin/Int // kotlin/Byte.unaryMinus|unaryMinus(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun unaryPlus(): kotlin/Int // kotlin/Byte.unaryPlus|unaryPlus(){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [js, native]
    final fun dec(): kotlin/Byte // kotlin/Byte.dec|dec(){}[0]

    // Targets: [js, native]
    final fun inc(): kotlin/Byte // kotlin/Byte.inc|inc(){}[0]

    // Targets: [native]
    final fun equals(kotlin/Byte): kotlin/Boolean // kotlin/Byte.equals|equals(kotlin.Byte){}[0]

    // Targets: [wasmJs, wasmWasi]
    final fun reinterpretAsInt(): kotlin/Int // kotlin/Byte.reinterpretAsInt|reinterpretAsInt(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun dec(): kotlin/Byte // kotlin/Byte.dec|dec(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inc(): kotlin/Byte // kotlin/Byte.inc|inc(){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Double): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Float): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Int): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Long): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Short): kotlin/Int // kotlin/Byte.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [js]
    final fun div(kotlin/Byte): kotlin/Int // kotlin/Byte.div|div(kotlin.Byte){}[0]

    // Targets: [js]
    final fun div(kotlin/Double): kotlin/Double // kotlin/Byte.div|div(kotlin.Double){}[0]

    // Targets: [js]
    final fun div(kotlin/Float): kotlin/Float // kotlin/Byte.div|div(kotlin.Float){}[0]

    // Targets: [js]
    final fun div(kotlin/Int): kotlin/Int // kotlin/Byte.div|div(kotlin.Int){}[0]

    // Targets: [js]
    final fun div(kotlin/Long): kotlin/Long // kotlin/Byte.div|div(kotlin.Long){}[0]

    // Targets: [js]
    final fun div(kotlin/Short): kotlin/Int // kotlin/Byte.div|div(kotlin.Short){}[0]

    // Targets: [js]
    final fun minus(kotlin/Byte): kotlin/Int // kotlin/Byte.minus|minus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun minus(kotlin/Double): kotlin/Double // kotlin/Byte.minus|minus(kotlin.Double){}[0]

    // Targets: [js]
    final fun minus(kotlin/Float): kotlin/Float // kotlin/Byte.minus|minus(kotlin.Float){}[0]

    // Targets: [js]
    final fun minus(kotlin/Int): kotlin/Int // kotlin/Byte.minus|minus(kotlin.Int){}[0]

    // Targets: [js]
    final fun minus(kotlin/Long): kotlin/Long // kotlin/Byte.minus|minus(kotlin.Long){}[0]

    // Targets: [js]
    final fun minus(kotlin/Short): kotlin/Int // kotlin/Byte.minus|minus(kotlin.Short){}[0]

    // Targets: [js]
    final fun plus(kotlin/Byte): kotlin/Int // kotlin/Byte.plus|plus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun plus(kotlin/Double): kotlin/Double // kotlin/Byte.plus|plus(kotlin.Double){}[0]

    // Targets: [js]
    final fun plus(kotlin/Float): kotlin/Float // kotlin/Byte.plus|plus(kotlin.Float){}[0]

    // Targets: [js]
    final fun plus(kotlin/Int): kotlin/Int // kotlin/Byte.plus|plus(kotlin.Int){}[0]

    // Targets: [js]
    final fun plus(kotlin/Long): kotlin/Long // kotlin/Byte.plus|plus(kotlin.Long){}[0]

    // Targets: [js]
    final fun plus(kotlin/Short): kotlin/Int // kotlin/Byte.plus|plus(kotlin.Short){}[0]

    // Targets: [js]
    final fun rem(kotlin/Byte): kotlin/Int // kotlin/Byte.rem|rem(kotlin.Byte){}[0]

    // Targets: [js]
    final fun rem(kotlin/Double): kotlin/Double // kotlin/Byte.rem|rem(kotlin.Double){}[0]

    // Targets: [js]
    final fun rem(kotlin/Float): kotlin/Float // kotlin/Byte.rem|rem(kotlin.Float){}[0]

    // Targets: [js]
    final fun rem(kotlin/Int): kotlin/Int // kotlin/Byte.rem|rem(kotlin.Int){}[0]

    // Targets: [js]
    final fun rem(kotlin/Long): kotlin/Long // kotlin/Byte.rem|rem(kotlin.Long){}[0]

    // Targets: [js]
    final fun rem(kotlin/Short): kotlin/Int // kotlin/Byte.rem|rem(kotlin.Short){}[0]

    // Targets: [js]
    final fun times(kotlin/Byte): kotlin/Int // kotlin/Byte.times|times(kotlin.Byte){}[0]

    // Targets: [js]
    final fun times(kotlin/Double): kotlin/Double // kotlin/Byte.times|times(kotlin.Double){}[0]

    // Targets: [js]
    final fun times(kotlin/Float): kotlin/Float // kotlin/Byte.times|times(kotlin.Float){}[0]

    // Targets: [js]
    final fun times(kotlin/Int): kotlin/Int // kotlin/Byte.times|times(kotlin.Int){}[0]

    // Targets: [js]
    final fun times(kotlin/Long): kotlin/Long // kotlin/Byte.times|times(kotlin.Long){}[0]

    // Targets: [js]
    final fun times(kotlin/Short): kotlin/Int // kotlin/Byte.times|times(kotlin.Short){}[0]

    // Targets: [js]
    final fun toByte(): kotlin/Byte // kotlin/Byte.toByte|toByte(){}[0]

    // Targets: [js]
    final fun unaryMinus(): kotlin/Int // kotlin/Byte.unaryMinus|unaryMinus(){}[0]

    // Targets: [js]
    final fun unaryPlus(): kotlin/Int // kotlin/Byte.unaryPlus|unaryPlus(){}[0]
}

final class kotlin/ByteArray { // kotlin/ByteArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/ByteArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Byte>) // kotlin/ByteArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Byte>){}[0]

    final val size // kotlin/ByteArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/ByteArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Byte // kotlin/ByteArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/ByteIterator // kotlin/ByteArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Byte) // kotlin/ByteArray.set|set(kotlin.Int;kotlin.Byte){}[0]
}

final class kotlin/Char : kotlin/Comparable<kotlin/Char> { // kotlin/Char|null[0]
    final fun compareTo(kotlin/Char): kotlin/Int // kotlin/Char.compareTo|compareTo(kotlin.Char){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Char.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Char.hashCode|hashCode(){}[0]
    final fun rangeTo(kotlin/Char): kotlin.ranges/CharRange // kotlin/Char.rangeTo|rangeTo(kotlin.Char){}[0]
    final fun rangeUntil(kotlin/Char): kotlin.ranges/CharRange // kotlin/Char.rangeUntil|rangeUntil(kotlin.Char){}[0]
    final fun toInt(): kotlin/Int // kotlin/Char.toInt|toInt(){}[0]
    final fun toString(): kotlin/String // kotlin/Char.toString|toString(){}[0]

    final object Companion { // kotlin/Char.Companion|null[0]
        final const val MAX_HIGH_SURROGATE // kotlin/Char.Companion.MAX_HIGH_SURROGATE|{}MAX_HIGH_SURROGATE[0]
            final fun <get-MAX_HIGH_SURROGATE>(): kotlin/Char // kotlin/Char.Companion.MAX_HIGH_SURROGATE.<get-MAX_HIGH_SURROGATE>|<get-MAX_HIGH_SURROGATE>(){}[0]
        final const val MAX_LOW_SURROGATE // kotlin/Char.Companion.MAX_LOW_SURROGATE|{}MAX_LOW_SURROGATE[0]
            final fun <get-MAX_LOW_SURROGATE>(): kotlin/Char // kotlin/Char.Companion.MAX_LOW_SURROGATE.<get-MAX_LOW_SURROGATE>|<get-MAX_LOW_SURROGATE>(){}[0]
        final const val MAX_SURROGATE // kotlin/Char.Companion.MAX_SURROGATE|{}MAX_SURROGATE[0]
            final fun <get-MAX_SURROGATE>(): kotlin/Char // kotlin/Char.Companion.MAX_SURROGATE.<get-MAX_SURROGATE>|<get-MAX_SURROGATE>(){}[0]
        final const val MAX_VALUE // kotlin/Char.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Char // kotlin/Char.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_HIGH_SURROGATE // kotlin/Char.Companion.MIN_HIGH_SURROGATE|{}MIN_HIGH_SURROGATE[0]
            final fun <get-MIN_HIGH_SURROGATE>(): kotlin/Char // kotlin/Char.Companion.MIN_HIGH_SURROGATE.<get-MIN_HIGH_SURROGATE>|<get-MIN_HIGH_SURROGATE>(){}[0]
        final const val MIN_LOW_SURROGATE // kotlin/Char.Companion.MIN_LOW_SURROGATE|{}MIN_LOW_SURROGATE[0]
            final fun <get-MIN_LOW_SURROGATE>(): kotlin/Char // kotlin/Char.Companion.MIN_LOW_SURROGATE.<get-MIN_LOW_SURROGATE>|<get-MIN_LOW_SURROGATE>(){}[0]
        final const val MIN_SURROGATE // kotlin/Char.Companion.MIN_SURROGATE|{}MIN_SURROGATE[0]
            final fun <get-MIN_SURROGATE>(): kotlin/Char // kotlin/Char.Companion.MIN_SURROGATE.<get-MIN_SURROGATE>|<get-MIN_SURROGATE>(){}[0]
        final const val MIN_VALUE // kotlin/Char.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Char // kotlin/Char.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/Char.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/Char.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/Char.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/Char.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]

        // Targets: [native]
        final const val MAX_CODE_POINT // kotlin/Char.Companion.MAX_CODE_POINT|{}MAX_CODE_POINT[0]
            final fun <get-MAX_CODE_POINT>(): kotlin/Int // kotlin/Char.Companion.MAX_CODE_POINT.<get-MAX_CODE_POINT>|<get-MAX_CODE_POINT>(){}[0]

        // Targets: [native]
        final const val MAX_RADIX // kotlin/Char.Companion.MAX_RADIX|{}MAX_RADIX[0]
            final fun <get-MAX_RADIX>(): kotlin/Int // kotlin/Char.Companion.MAX_RADIX.<get-MAX_RADIX>|<get-MAX_RADIX>(){}[0]

        // Targets: [native]
        final const val MIN_CODE_POINT // kotlin/Char.Companion.MIN_CODE_POINT|{}MIN_CODE_POINT[0]
            final fun <get-MIN_CODE_POINT>(): kotlin/Int // kotlin/Char.Companion.MIN_CODE_POINT.<get-MIN_CODE_POINT>|<get-MIN_CODE_POINT>(){}[0]

        // Targets: [native]
        final const val MIN_RADIX // kotlin/Char.Companion.MIN_RADIX|{}MIN_RADIX[0]
            final fun <get-MIN_RADIX>(): kotlin/Int // kotlin/Char.Companion.MIN_RADIX.<get-MIN_RADIX>|<get-MIN_RADIX>(){}[0]

        // Targets: [native]
        final const val MIN_SUPPLEMENTARY_CODE_POINT // kotlin/Char.Companion.MIN_SUPPLEMENTARY_CODE_POINT|{}MIN_SUPPLEMENTARY_CODE_POINT[0]
            final fun <get-MIN_SUPPLEMENTARY_CODE_POINT>(): kotlin/Int // kotlin/Char.Companion.MIN_SUPPLEMENTARY_CODE_POINT.<get-MIN_SUPPLEMENTARY_CODE_POINT>|<get-MIN_SUPPLEMENTARY_CODE_POINT>(){}[0]
    }

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Char): kotlin/Int // kotlin/Char.minus|minus(kotlin.Char){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Int): kotlin/Char // kotlin/Char.minus|minus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Int): kotlin/Char // kotlin/Char.plus|plus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun toChar(): kotlin/Char // kotlin/Char.toChar|toChar(){}[0]

    // Targets: [js, native]
    final fun dec(): kotlin/Char // kotlin/Char.dec|dec(){}[0]

    // Targets: [js, native]
    final fun inc(): kotlin/Char // kotlin/Char.inc|inc(){}[0]

    // Targets: [js, native]
    final fun toByte(): kotlin/Byte // kotlin/Char.toByte|toByte(){}[0]

    // Targets: [js, native]
    final fun toDouble(): kotlin/Double // kotlin/Char.toDouble|toDouble(){}[0]

    // Targets: [js, native]
    final fun toFloat(): kotlin/Float // kotlin/Char.toFloat|toFloat(){}[0]

    // Targets: [js, native]
    final fun toLong(): kotlin/Long // kotlin/Char.toLong|toLong(){}[0]

    // Targets: [js, native]
    final fun toShort(): kotlin/Short // kotlin/Char.toShort|toShort(){}[0]

    // Targets: [native]
    final fun equals(kotlin/Char): kotlin/Boolean // kotlin/Char.equals|equals(kotlin.Char){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun dec(): kotlin/Char // kotlin/Char.dec|dec(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inc(): kotlin/Char // kotlin/Char.inc|inc(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toByte(): kotlin/Byte // kotlin/Char.toByte|toByte(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toDouble(): kotlin/Double // kotlin/Char.toDouble|toDouble(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toFloat(): kotlin/Float // kotlin/Char.toFloat|toFloat(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toLong(): kotlin/Long // kotlin/Char.toLong|toLong(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toShort(): kotlin/Short // kotlin/Char.toShort|toShort(){}[0]

    // Targets: [js]
    constructor <init>(kotlin/UShort) // kotlin/Char.<init>|<init>(kotlin.UShort){}[0]

    // Targets: [js]
    final fun minus(kotlin/Char): kotlin/Int // kotlin/Char.minus|minus(kotlin.Char){}[0]

    // Targets: [js]
    final fun minus(kotlin/Int): kotlin/Char // kotlin/Char.minus|minus(kotlin.Int){}[0]

    // Targets: [js]
    final fun plus(kotlin/Int): kotlin/Char // kotlin/Char.plus|plus(kotlin.Int){}[0]

    // Targets: [js]
    final fun toChar(): kotlin/Char // kotlin/Char.toChar|toChar(){}[0]
}

final class kotlin/CharArray { // kotlin/CharArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/CharArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Char>) // kotlin/CharArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Char>){}[0]

    final val size // kotlin/CharArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/CharArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Char // kotlin/CharArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/CharIterator // kotlin/CharArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Char) // kotlin/CharArray.set|set(kotlin.Int;kotlin.Char){}[0]
}

final class kotlin/Double : kotlin/Comparable<kotlin/Double>, kotlin/Number { // kotlin/Double|null[0]
    final fun compareTo(kotlin/Double): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Double){}[0]
    final fun div(kotlin/Double): kotlin/Double // kotlin/Double.div|div(kotlin.Double){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Double.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Double.hashCode|hashCode(){}[0]
    final fun minus(kotlin/Double): kotlin/Double // kotlin/Double.minus|minus(kotlin.Double){}[0]
    final fun plus(kotlin/Double): kotlin/Double // kotlin/Double.plus|plus(kotlin.Double){}[0]
    final fun rem(kotlin/Double): kotlin/Double // kotlin/Double.rem|rem(kotlin.Double){}[0]
    final fun times(kotlin/Double): kotlin/Double // kotlin/Double.times|times(kotlin.Double){}[0]
    final fun toFloat(): kotlin/Float // kotlin/Double.toFloat|toFloat(){}[0]
    final fun toInt(): kotlin/Int // kotlin/Double.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // kotlin/Double.toLong|toLong(){}[0]
    final fun toString(): kotlin/String // kotlin/Double.toString|toString(){}[0]
    final fun unaryMinus(): kotlin/Double // kotlin/Double.unaryMinus|unaryMinus(){}[0]

    final object Companion { // kotlin/Double.Companion|null[0]
        final const val MAX_VALUE // kotlin/Double.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Double // kotlin/Double.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/Double.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Double // kotlin/Double.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val NEGATIVE_INFINITY // kotlin/Double.Companion.NEGATIVE_INFINITY|{}NEGATIVE_INFINITY[0]
            final fun <get-NEGATIVE_INFINITY>(): kotlin/Double // kotlin/Double.Companion.NEGATIVE_INFINITY.<get-NEGATIVE_INFINITY>|<get-NEGATIVE_INFINITY>(){}[0]
        final const val NaN // kotlin/Double.Companion.NaN|{}NaN[0]
            final fun <get-NaN>(): kotlin/Double // kotlin/Double.Companion.NaN.<get-NaN>|<get-NaN>(){}[0]
        final const val POSITIVE_INFINITY // kotlin/Double.Companion.POSITIVE_INFINITY|{}POSITIVE_INFINITY[0]
            final fun <get-POSITIVE_INFINITY>(): kotlin/Double // kotlin/Double.Companion.POSITIVE_INFINITY.<get-POSITIVE_INFINITY>|<get-POSITIVE_INFINITY>(){}[0]
        final const val SIZE_BITS // kotlin/Double.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/Double.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/Double.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/Double.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Byte): kotlin/Double // kotlin/Double.div|div(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Float): kotlin/Double // kotlin/Double.div|div(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Int): kotlin/Double // kotlin/Double.div|div(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Long): kotlin/Double // kotlin/Double.div|div(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Short): kotlin/Double // kotlin/Double.div|div(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Byte): kotlin/Double // kotlin/Double.minus|minus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Float): kotlin/Double // kotlin/Double.minus|minus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Int): kotlin/Double // kotlin/Double.minus|minus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Long): kotlin/Double // kotlin/Double.minus|minus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Short): kotlin/Double // kotlin/Double.minus|minus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Byte): kotlin/Double // kotlin/Double.plus|plus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Float): kotlin/Double // kotlin/Double.plus|plus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Int): kotlin/Double // kotlin/Double.plus|plus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Long): kotlin/Double // kotlin/Double.plus|plus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Short): kotlin/Double // kotlin/Double.plus|plus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Byte): kotlin/Double // kotlin/Double.rem|rem(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Float): kotlin/Double // kotlin/Double.rem|rem(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Int): kotlin/Double // kotlin/Double.rem|rem(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Long): kotlin/Double // kotlin/Double.rem|rem(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Short): kotlin/Double // kotlin/Double.rem|rem(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Byte): kotlin/Double // kotlin/Double.times|times(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Float): kotlin/Double // kotlin/Double.times|times(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Int): kotlin/Double // kotlin/Double.times|times(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Long): kotlin/Double // kotlin/Double.times|times(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Short): kotlin/Double // kotlin/Double.times|times(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun toDouble(): kotlin/Double // kotlin/Double.toDouble|toDouble(){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Float): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Int): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Long): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Short): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [js, native]
    final fun dec(): kotlin/Double // kotlin/Double.dec|dec(){}[0]

    // Targets: [js, native]
    final fun inc(): kotlin/Double // kotlin/Double.inc|inc(){}[0]

    // Targets: [js, native]
    final fun toByte(): kotlin/Byte // kotlin/Double.toByte|toByte(){}[0]

    // Targets: [js, native]
    final fun toChar(): kotlin/Char // kotlin/Double.toChar|toChar(){}[0]

    // Targets: [js, native]
    final fun toShort(): kotlin/Short // kotlin/Double.toShort|toShort(){}[0]

    // Targets: [js, native]
    final fun unaryPlus(): kotlin/Double // kotlin/Double.unaryPlus|unaryPlus(){}[0]

    // Targets: [native]
    final fun bits(): kotlin/Long // kotlin/Double.bits|bits(){}[0]

    // Targets: [native]
    final fun equals(kotlin/Double): kotlin/Boolean // kotlin/Double.equals|equals(kotlin.Double){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Float): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Int): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Long): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Short): kotlin/Int // kotlin/Double.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun dec(): kotlin/Double // kotlin/Double.dec|dec(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inc(): kotlin/Double // kotlin/Double.inc|inc(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toByte(): kotlin/Byte // kotlin/Double.toByte|toByte(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toChar(): kotlin/Char // kotlin/Double.toChar|toChar(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toShort(): kotlin/Short // kotlin/Double.toShort|toShort(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun unaryPlus(): kotlin/Double // kotlin/Double.unaryPlus|unaryPlus(){}[0]

    // Targets: [js]
    final fun div(kotlin/Byte): kotlin/Double // kotlin/Double.div|div(kotlin.Byte){}[0]

    // Targets: [js]
    final fun div(kotlin/Float): kotlin/Double // kotlin/Double.div|div(kotlin.Float){}[0]

    // Targets: [js]
    final fun div(kotlin/Int): kotlin/Double // kotlin/Double.div|div(kotlin.Int){}[0]

    // Targets: [js]
    final fun div(kotlin/Long): kotlin/Double // kotlin/Double.div|div(kotlin.Long){}[0]

    // Targets: [js]
    final fun div(kotlin/Short): kotlin/Double // kotlin/Double.div|div(kotlin.Short){}[0]

    // Targets: [js]
    final fun minus(kotlin/Byte): kotlin/Double // kotlin/Double.minus|minus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun minus(kotlin/Float): kotlin/Double // kotlin/Double.minus|minus(kotlin.Float){}[0]

    // Targets: [js]
    final fun minus(kotlin/Int): kotlin/Double // kotlin/Double.minus|minus(kotlin.Int){}[0]

    // Targets: [js]
    final fun minus(kotlin/Long): kotlin/Double // kotlin/Double.minus|minus(kotlin.Long){}[0]

    // Targets: [js]
    final fun minus(kotlin/Short): kotlin/Double // kotlin/Double.minus|minus(kotlin.Short){}[0]

    // Targets: [js]
    final fun plus(kotlin/Byte): kotlin/Double // kotlin/Double.plus|plus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun plus(kotlin/Float): kotlin/Double // kotlin/Double.plus|plus(kotlin.Float){}[0]

    // Targets: [js]
    final fun plus(kotlin/Int): kotlin/Double // kotlin/Double.plus|plus(kotlin.Int){}[0]

    // Targets: [js]
    final fun plus(kotlin/Long): kotlin/Double // kotlin/Double.plus|plus(kotlin.Long){}[0]

    // Targets: [js]
    final fun plus(kotlin/Short): kotlin/Double // kotlin/Double.plus|plus(kotlin.Short){}[0]

    // Targets: [js]
    final fun rem(kotlin/Byte): kotlin/Double // kotlin/Double.rem|rem(kotlin.Byte){}[0]

    // Targets: [js]
    final fun rem(kotlin/Float): kotlin/Double // kotlin/Double.rem|rem(kotlin.Float){}[0]

    // Targets: [js]
    final fun rem(kotlin/Int): kotlin/Double // kotlin/Double.rem|rem(kotlin.Int){}[0]

    // Targets: [js]
    final fun rem(kotlin/Long): kotlin/Double // kotlin/Double.rem|rem(kotlin.Long){}[0]

    // Targets: [js]
    final fun rem(kotlin/Short): kotlin/Double // kotlin/Double.rem|rem(kotlin.Short){}[0]

    // Targets: [js]
    final fun times(kotlin/Byte): kotlin/Double // kotlin/Double.times|times(kotlin.Byte){}[0]

    // Targets: [js]
    final fun times(kotlin/Float): kotlin/Double // kotlin/Double.times|times(kotlin.Float){}[0]

    // Targets: [js]
    final fun times(kotlin/Int): kotlin/Double // kotlin/Double.times|times(kotlin.Int){}[0]

    // Targets: [js]
    final fun times(kotlin/Long): kotlin/Double // kotlin/Double.times|times(kotlin.Long){}[0]

    // Targets: [js]
    final fun times(kotlin/Short): kotlin/Double // kotlin/Double.times|times(kotlin.Short){}[0]

    // Targets: [js]
    final fun toDouble(): kotlin/Double // kotlin/Double.toDouble|toDouble(){}[0]
}

final class kotlin/DoubleArray { // kotlin/DoubleArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/DoubleArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Double>) // kotlin/DoubleArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]

    final val size // kotlin/DoubleArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/DoubleArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Double // kotlin/DoubleArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/DoubleIterator // kotlin/DoubleArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Double) // kotlin/DoubleArray.set|set(kotlin.Int;kotlin.Double){}[0]
}

final class kotlin/Float : kotlin/Comparable<kotlin/Float>, kotlin/Number { // kotlin/Float|null[0]
    final fun compareTo(kotlin/Float): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Float){}[0]
    final fun div(kotlin/Float): kotlin/Float // kotlin/Float.div|div(kotlin.Float){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Float.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Float.hashCode|hashCode(){}[0]
    final fun minus(kotlin/Float): kotlin/Float // kotlin/Float.minus|minus(kotlin.Float){}[0]
    final fun plus(kotlin/Float): kotlin/Float // kotlin/Float.plus|plus(kotlin.Float){}[0]
    final fun rem(kotlin/Float): kotlin/Float // kotlin/Float.rem|rem(kotlin.Float){}[0]
    final fun times(kotlin/Float): kotlin/Float // kotlin/Float.times|times(kotlin.Float){}[0]
    final fun toDouble(): kotlin/Double // kotlin/Float.toDouble|toDouble(){}[0]
    final fun toInt(): kotlin/Int // kotlin/Float.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // kotlin/Float.toLong|toLong(){}[0]
    final fun toString(): kotlin/String // kotlin/Float.toString|toString(){}[0]
    final fun unaryMinus(): kotlin/Float // kotlin/Float.unaryMinus|unaryMinus(){}[0]

    final object Companion { // kotlin/Float.Companion|null[0]
        final const val MAX_VALUE // kotlin/Float.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Float // kotlin/Float.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/Float.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Float // kotlin/Float.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val NEGATIVE_INFINITY // kotlin/Float.Companion.NEGATIVE_INFINITY|{}NEGATIVE_INFINITY[0]
            final fun <get-NEGATIVE_INFINITY>(): kotlin/Float // kotlin/Float.Companion.NEGATIVE_INFINITY.<get-NEGATIVE_INFINITY>|<get-NEGATIVE_INFINITY>(){}[0]
        final const val NaN // kotlin/Float.Companion.NaN|{}NaN[0]
            final fun <get-NaN>(): kotlin/Float // kotlin/Float.Companion.NaN.<get-NaN>|<get-NaN>(){}[0]
        final const val POSITIVE_INFINITY // kotlin/Float.Companion.POSITIVE_INFINITY|{}POSITIVE_INFINITY[0]
            final fun <get-POSITIVE_INFINITY>(): kotlin/Float // kotlin/Float.Companion.POSITIVE_INFINITY.<get-POSITIVE_INFINITY>|<get-POSITIVE_INFINITY>(){}[0]
        final const val SIZE_BITS // kotlin/Float.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/Float.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/Float.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/Float.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Byte): kotlin/Float // kotlin/Float.div|div(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Double): kotlin/Double // kotlin/Float.div|div(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Int): kotlin/Float // kotlin/Float.div|div(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Long): kotlin/Float // kotlin/Float.div|div(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Short): kotlin/Float // kotlin/Float.div|div(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Byte): kotlin/Float // kotlin/Float.minus|minus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Double): kotlin/Double // kotlin/Float.minus|minus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Int): kotlin/Float // kotlin/Float.minus|minus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Long): kotlin/Float // kotlin/Float.minus|minus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Short): kotlin/Float // kotlin/Float.minus|minus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Byte): kotlin/Float // kotlin/Float.plus|plus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Double): kotlin/Double // kotlin/Float.plus|plus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Int): kotlin/Float // kotlin/Float.plus|plus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Long): kotlin/Float // kotlin/Float.plus|plus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Short): kotlin/Float // kotlin/Float.plus|plus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Byte): kotlin/Float // kotlin/Float.rem|rem(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Double): kotlin/Double // kotlin/Float.rem|rem(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Int): kotlin/Float // kotlin/Float.rem|rem(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Long): kotlin/Float // kotlin/Float.rem|rem(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Short): kotlin/Float // kotlin/Float.rem|rem(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Byte): kotlin/Float // kotlin/Float.times|times(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Double): kotlin/Double // kotlin/Float.times|times(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Int): kotlin/Float // kotlin/Float.times|times(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Long): kotlin/Float // kotlin/Float.times|times(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Short): kotlin/Float // kotlin/Float.times|times(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun toFloat(): kotlin/Float // kotlin/Float.toFloat|toFloat(){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Double): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Int): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Long): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Short): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [js, native]
    final fun dec(): kotlin/Float // kotlin/Float.dec|dec(){}[0]

    // Targets: [js, native]
    final fun inc(): kotlin/Float // kotlin/Float.inc|inc(){}[0]

    // Targets: [js, native]
    final fun toByte(): kotlin/Byte // kotlin/Float.toByte|toByte(){}[0]

    // Targets: [js, native]
    final fun toChar(): kotlin/Char // kotlin/Float.toChar|toChar(){}[0]

    // Targets: [js, native]
    final fun toShort(): kotlin/Short // kotlin/Float.toShort|toShort(){}[0]

    // Targets: [js, native]
    final fun unaryPlus(): kotlin/Float // kotlin/Float.unaryPlus|unaryPlus(){}[0]

    // Targets: [native]
    final fun bits(): kotlin/Int // kotlin/Float.bits|bits(){}[0]

    // Targets: [native]
    final fun equals(kotlin/Float): kotlin/Boolean // kotlin/Float.equals|equals(kotlin.Float){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Double): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Int): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Long): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Short): kotlin/Int // kotlin/Float.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun dec(): kotlin/Float // kotlin/Float.dec|dec(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inc(): kotlin/Float // kotlin/Float.inc|inc(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toByte(): kotlin/Byte // kotlin/Float.toByte|toByte(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toChar(): kotlin/Char // kotlin/Float.toChar|toChar(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toShort(): kotlin/Short // kotlin/Float.toShort|toShort(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun unaryPlus(): kotlin/Float // kotlin/Float.unaryPlus|unaryPlus(){}[0]

    // Targets: [js]
    final fun div(kotlin/Byte): kotlin/Float // kotlin/Float.div|div(kotlin.Byte){}[0]

    // Targets: [js]
    final fun div(kotlin/Double): kotlin/Double // kotlin/Float.div|div(kotlin.Double){}[0]

    // Targets: [js]
    final fun div(kotlin/Int): kotlin/Float // kotlin/Float.div|div(kotlin.Int){}[0]

    // Targets: [js]
    final fun div(kotlin/Long): kotlin/Float // kotlin/Float.div|div(kotlin.Long){}[0]

    // Targets: [js]
    final fun div(kotlin/Short): kotlin/Float // kotlin/Float.div|div(kotlin.Short){}[0]

    // Targets: [js]
    final fun minus(kotlin/Byte): kotlin/Float // kotlin/Float.minus|minus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun minus(kotlin/Double): kotlin/Double // kotlin/Float.minus|minus(kotlin.Double){}[0]

    // Targets: [js]
    final fun minus(kotlin/Int): kotlin/Float // kotlin/Float.minus|minus(kotlin.Int){}[0]

    // Targets: [js]
    final fun minus(kotlin/Long): kotlin/Float // kotlin/Float.minus|minus(kotlin.Long){}[0]

    // Targets: [js]
    final fun minus(kotlin/Short): kotlin/Float // kotlin/Float.minus|minus(kotlin.Short){}[0]

    // Targets: [js]
    final fun plus(kotlin/Byte): kotlin/Float // kotlin/Float.plus|plus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun plus(kotlin/Double): kotlin/Double // kotlin/Float.plus|plus(kotlin.Double){}[0]

    // Targets: [js]
    final fun plus(kotlin/Int): kotlin/Float // kotlin/Float.plus|plus(kotlin.Int){}[0]

    // Targets: [js]
    final fun plus(kotlin/Long): kotlin/Float // kotlin/Float.plus|plus(kotlin.Long){}[0]

    // Targets: [js]
    final fun plus(kotlin/Short): kotlin/Float // kotlin/Float.plus|plus(kotlin.Short){}[0]

    // Targets: [js]
    final fun rem(kotlin/Byte): kotlin/Float // kotlin/Float.rem|rem(kotlin.Byte){}[0]

    // Targets: [js]
    final fun rem(kotlin/Double): kotlin/Double // kotlin/Float.rem|rem(kotlin.Double){}[0]

    // Targets: [js]
    final fun rem(kotlin/Int): kotlin/Float // kotlin/Float.rem|rem(kotlin.Int){}[0]

    // Targets: [js]
    final fun rem(kotlin/Long): kotlin/Float // kotlin/Float.rem|rem(kotlin.Long){}[0]

    // Targets: [js]
    final fun rem(kotlin/Short): kotlin/Float // kotlin/Float.rem|rem(kotlin.Short){}[0]

    // Targets: [js]
    final fun times(kotlin/Byte): kotlin/Float // kotlin/Float.times|times(kotlin.Byte){}[0]

    // Targets: [js]
    final fun times(kotlin/Double): kotlin/Double // kotlin/Float.times|times(kotlin.Double){}[0]

    // Targets: [js]
    final fun times(kotlin/Int): kotlin/Float // kotlin/Float.times|times(kotlin.Int){}[0]

    // Targets: [js]
    final fun times(kotlin/Long): kotlin/Float // kotlin/Float.times|times(kotlin.Long){}[0]

    // Targets: [js]
    final fun times(kotlin/Short): kotlin/Float // kotlin/Float.times|times(kotlin.Short){}[0]

    // Targets: [js]
    final fun toFloat(): kotlin/Float // kotlin/Float.toFloat|toFloat(){}[0]
}

final class kotlin/FloatArray { // kotlin/FloatArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/FloatArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Float>) // kotlin/FloatArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Float>){}[0]

    final val size // kotlin/FloatArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/FloatArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Float // kotlin/FloatArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/FloatIterator // kotlin/FloatArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Float) // kotlin/FloatArray.set|set(kotlin.Int;kotlin.Float){}[0]
}

final class kotlin/Int : kotlin/Comparable<kotlin/Int>, kotlin/Number { // kotlin/Int|null[0]
    final fun and(kotlin/Int): kotlin/Int // kotlin/Int.and|and(kotlin.Int){}[0]
    final fun dec(): kotlin/Int // kotlin/Int.dec|dec(){}[0]
    final fun div(kotlin/Int): kotlin/Int // kotlin/Int.div|div(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Int.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Int.hashCode|hashCode(){}[0]
    final fun minus(kotlin/Int): kotlin/Int // kotlin/Int.minus|minus(kotlin.Int){}[0]
    final fun or(kotlin/Int): kotlin/Int // kotlin/Int.or|or(kotlin.Int){}[0]
    final fun plus(kotlin/Int): kotlin/Int // kotlin/Int.plus|plus(kotlin.Int){}[0]
    final fun rangeTo(kotlin/Byte): kotlin.ranges/IntRange // kotlin/Int.rangeTo|rangeTo(kotlin.Byte){}[0]
    final fun rangeTo(kotlin/Int): kotlin.ranges/IntRange // kotlin/Int.rangeTo|rangeTo(kotlin.Int){}[0]
    final fun rangeTo(kotlin/Long): kotlin.ranges/LongRange // kotlin/Int.rangeTo|rangeTo(kotlin.Long){}[0]
    final fun rangeTo(kotlin/Short): kotlin.ranges/IntRange // kotlin/Int.rangeTo|rangeTo(kotlin.Short){}[0]
    final fun rangeUntil(kotlin/Byte): kotlin.ranges/IntRange // kotlin/Int.rangeUntil|rangeUntil(kotlin.Byte){}[0]
    final fun rangeUntil(kotlin/Int): kotlin.ranges/IntRange // kotlin/Int.rangeUntil|rangeUntil(kotlin.Int){}[0]
    final fun rangeUntil(kotlin/Long): kotlin.ranges/LongRange // kotlin/Int.rangeUntil|rangeUntil(kotlin.Long){}[0]
    final fun rangeUntil(kotlin/Short): kotlin.ranges/IntRange // kotlin/Int.rangeUntil|rangeUntil(kotlin.Short){}[0]
    final fun rem(kotlin/Int): kotlin/Int // kotlin/Int.rem|rem(kotlin.Int){}[0]
    final fun shl(kotlin/Int): kotlin/Int // kotlin/Int.shl|shl(kotlin.Int){}[0]
    final fun shr(kotlin/Int): kotlin/Int // kotlin/Int.shr|shr(kotlin.Int){}[0]
    final fun times(kotlin/Int): kotlin/Int // kotlin/Int.times|times(kotlin.Int){}[0]
    final fun toByte(): kotlin/Byte // kotlin/Int.toByte|toByte(){}[0]
    final fun toChar(): kotlin/Char // kotlin/Int.toChar|toChar(){}[0]
    final fun toDouble(): kotlin/Double // kotlin/Int.toDouble|toDouble(){}[0]
    final fun toFloat(): kotlin/Float // kotlin/Int.toFloat|toFloat(){}[0]
    final fun toLong(): kotlin/Long // kotlin/Int.toLong|toLong(){}[0]
    final fun toShort(): kotlin/Short // kotlin/Int.toShort|toShort(){}[0]
    final fun toString(): kotlin/String // kotlin/Int.toString|toString(){}[0]
    final fun ushr(kotlin/Int): kotlin/Int // kotlin/Int.ushr|ushr(kotlin.Int){}[0]
    final fun xor(kotlin/Int): kotlin/Int // kotlin/Int.xor|xor(kotlin.Int){}[0]

    final object Companion { // kotlin/Int.Companion|null[0]
        final const val MAX_VALUE // kotlin/Int.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Int // kotlin/Int.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/Int.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Int // kotlin/Int.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/Int.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/Int.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/Int.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/Int.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Double): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Float): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Long): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Short): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Byte): kotlin/Int // kotlin/Int.div|div(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Double): kotlin/Double // kotlin/Int.div|div(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Float): kotlin/Float // kotlin/Int.div|div(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Long): kotlin/Long // kotlin/Int.div|div(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Short): kotlin/Int // kotlin/Int.div|div(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Byte): kotlin/Int // kotlin/Int.minus|minus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Double): kotlin/Double // kotlin/Int.minus|minus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Float): kotlin/Float // kotlin/Int.minus|minus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Long): kotlin/Long // kotlin/Int.minus|minus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Short): kotlin/Int // kotlin/Int.minus|minus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Byte): kotlin/Int // kotlin/Int.plus|plus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Double): kotlin/Double // kotlin/Int.plus|plus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Float): kotlin/Float // kotlin/Int.plus|plus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Long): kotlin/Long // kotlin/Int.plus|plus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Short): kotlin/Int // kotlin/Int.plus|plus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Byte): kotlin/Int // kotlin/Int.rem|rem(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Double): kotlin/Double // kotlin/Int.rem|rem(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Float): kotlin/Float // kotlin/Int.rem|rem(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Long): kotlin/Long // kotlin/Int.rem|rem(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Short): kotlin/Int // kotlin/Int.rem|rem(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Byte): kotlin/Int // kotlin/Int.times|times(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Double): kotlin/Double // kotlin/Int.times|times(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Float): kotlin/Float // kotlin/Int.times|times(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Long): kotlin/Long // kotlin/Int.times|times(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Short): kotlin/Int // kotlin/Int.times|times(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun toInt(): kotlin/Int // kotlin/Int.toInt|toInt(){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Int): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [js, native]
    final fun inc(): kotlin/Int // kotlin/Int.inc|inc(){}[0]

    // Targets: [js, native]
    final fun inv(): kotlin/Int // kotlin/Int.inv|inv(){}[0]

    // Targets: [js, native]
    final fun unaryMinus(): kotlin/Int // kotlin/Int.unaryMinus|unaryMinus(){}[0]

    // Targets: [js, native]
    final fun unaryPlus(): kotlin/Int // kotlin/Int.unaryPlus|unaryPlus(){}[0]

    // Targets: [native]
    final fun equals(kotlin/Int): kotlin/Boolean // kotlin/Int.equals|equals(kotlin.Int){}[0]

    // Targets: [wasmJs, wasmWasi]
    final fun reinterpretAsBoolean(): kotlin/Boolean // kotlin/Int.reinterpretAsBoolean|reinterpretAsBoolean(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final fun reinterpretAsByte(): kotlin/Byte // kotlin/Int.reinterpretAsByte|reinterpretAsByte(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final fun reinterpretAsChar(): kotlin/Char // kotlin/Int.reinterpretAsChar|reinterpretAsChar(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final fun reinterpretAsShort(): kotlin/Short // kotlin/Int.reinterpretAsShort|reinterpretAsShort(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Int): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inc(): kotlin/Int // kotlin/Int.inc|inc(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inv(): kotlin/Int // kotlin/Int.inv|inv(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun unaryMinus(): kotlin/Int // kotlin/Int.unaryMinus|unaryMinus(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun unaryPlus(): kotlin/Int // kotlin/Int.unaryPlus|unaryPlus(){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Double): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Float): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Long): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Short): kotlin/Int // kotlin/Int.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [js]
    final fun div(kotlin/Byte): kotlin/Int // kotlin/Int.div|div(kotlin.Byte){}[0]

    // Targets: [js]
    final fun div(kotlin/Double): kotlin/Double // kotlin/Int.div|div(kotlin.Double){}[0]

    // Targets: [js]
    final fun div(kotlin/Float): kotlin/Float // kotlin/Int.div|div(kotlin.Float){}[0]

    // Targets: [js]
    final fun div(kotlin/Long): kotlin/Long // kotlin/Int.div|div(kotlin.Long){}[0]

    // Targets: [js]
    final fun div(kotlin/Short): kotlin/Int // kotlin/Int.div|div(kotlin.Short){}[0]

    // Targets: [js]
    final fun minus(kotlin/Byte): kotlin/Int // kotlin/Int.minus|minus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun minus(kotlin/Double): kotlin/Double // kotlin/Int.minus|minus(kotlin.Double){}[0]

    // Targets: [js]
    final fun minus(kotlin/Float): kotlin/Float // kotlin/Int.minus|minus(kotlin.Float){}[0]

    // Targets: [js]
    final fun minus(kotlin/Long): kotlin/Long // kotlin/Int.minus|minus(kotlin.Long){}[0]

    // Targets: [js]
    final fun minus(kotlin/Short): kotlin/Int // kotlin/Int.minus|minus(kotlin.Short){}[0]

    // Targets: [js]
    final fun plus(kotlin/Byte): kotlin/Int // kotlin/Int.plus|plus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun plus(kotlin/Double): kotlin/Double // kotlin/Int.plus|plus(kotlin.Double){}[0]

    // Targets: [js]
    final fun plus(kotlin/Float): kotlin/Float // kotlin/Int.plus|plus(kotlin.Float){}[0]

    // Targets: [js]
    final fun plus(kotlin/Long): kotlin/Long // kotlin/Int.plus|plus(kotlin.Long){}[0]

    // Targets: [js]
    final fun plus(kotlin/Short): kotlin/Int // kotlin/Int.plus|plus(kotlin.Short){}[0]

    // Targets: [js]
    final fun rem(kotlin/Byte): kotlin/Int // kotlin/Int.rem|rem(kotlin.Byte){}[0]

    // Targets: [js]
    final fun rem(kotlin/Double): kotlin/Double // kotlin/Int.rem|rem(kotlin.Double){}[0]

    // Targets: [js]
    final fun rem(kotlin/Float): kotlin/Float // kotlin/Int.rem|rem(kotlin.Float){}[0]

    // Targets: [js]
    final fun rem(kotlin/Long): kotlin/Long // kotlin/Int.rem|rem(kotlin.Long){}[0]

    // Targets: [js]
    final fun rem(kotlin/Short): kotlin/Int // kotlin/Int.rem|rem(kotlin.Short){}[0]

    // Targets: [js]
    final fun times(kotlin/Byte): kotlin/Int // kotlin/Int.times|times(kotlin.Byte){}[0]

    // Targets: [js]
    final fun times(kotlin/Double): kotlin/Double // kotlin/Int.times|times(kotlin.Double){}[0]

    // Targets: [js]
    final fun times(kotlin/Float): kotlin/Float // kotlin/Int.times|times(kotlin.Float){}[0]

    // Targets: [js]
    final fun times(kotlin/Long): kotlin/Long // kotlin/Int.times|times(kotlin.Long){}[0]

    // Targets: [js]
    final fun times(kotlin/Short): kotlin/Int // kotlin/Int.times|times(kotlin.Short){}[0]

    // Targets: [js]
    final fun toInt(): kotlin/Int // kotlin/Int.toInt|toInt(){}[0]
}

final class kotlin/IntArray { // kotlin/IntArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/IntArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Int>) // kotlin/IntArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Int>){}[0]

    final val size // kotlin/IntArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/IntArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Int // kotlin/IntArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/IntIterator // kotlin/IntArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Int) // kotlin/IntArray.set|set(kotlin.Int;kotlin.Int){}[0]
}

final class kotlin/KotlinNothingValueException : kotlin/RuntimeException { // kotlin/KotlinNothingValueException|null[0]
    constructor <init>() // kotlin/KotlinNothingValueException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/KotlinNothingValueException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/KotlinNothingValueException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/KotlinNothingValueException.<init>|<init>(kotlin.Throwable?){}[0]
}

final class kotlin/KotlinVersion : kotlin/Comparable<kotlin/KotlinVersion> { // kotlin/KotlinVersion|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // kotlin/KotlinVersion.<init>|<init>(kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int) // kotlin/KotlinVersion.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

    final val major // kotlin/KotlinVersion.major|{}major[0]
        final fun <get-major>(): kotlin/Int // kotlin/KotlinVersion.major.<get-major>|<get-major>(){}[0]
    final val minor // kotlin/KotlinVersion.minor|{}minor[0]
        final fun <get-minor>(): kotlin/Int // kotlin/KotlinVersion.minor.<get-minor>|<get-minor>(){}[0]
    final val patch // kotlin/KotlinVersion.patch|{}patch[0]
        final fun <get-patch>(): kotlin/Int // kotlin/KotlinVersion.patch.<get-patch>|<get-patch>(){}[0]

    final fun compareTo(kotlin/KotlinVersion): kotlin/Int // kotlin/KotlinVersion.compareTo|compareTo(kotlin.KotlinVersion){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/KotlinVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/KotlinVersion.hashCode|hashCode(){}[0]
    final fun isAtLeast(kotlin/Int, kotlin/Int): kotlin/Boolean // kotlin/KotlinVersion.isAtLeast|isAtLeast(kotlin.Int;kotlin.Int){}[0]
    final fun isAtLeast(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Boolean // kotlin/KotlinVersion.isAtLeast|isAtLeast(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlin/KotlinVersion.toString|toString(){}[0]

    final object Companion { // kotlin/KotlinVersion.Companion|null[0]
        final const val MAX_COMPONENT_VALUE // kotlin/KotlinVersion.Companion.MAX_COMPONENT_VALUE|{}MAX_COMPONENT_VALUE[0]
            final fun <get-MAX_COMPONENT_VALUE>(): kotlin/Int // kotlin/KotlinVersion.Companion.MAX_COMPONENT_VALUE.<get-MAX_COMPONENT_VALUE>|<get-MAX_COMPONENT_VALUE>(){}[0]

        final val CURRENT // kotlin/KotlinVersion.Companion.CURRENT|{}CURRENT[0]
            final fun <get-CURRENT>(): kotlin/KotlinVersion // kotlin/KotlinVersion.Companion.CURRENT.<get-CURRENT>|<get-CURRENT>(){}[0]
    }
}

final class kotlin/Long : kotlin/Comparable<kotlin/Long>, kotlin/Number { // kotlin/Long|null[0]
    final fun and(kotlin/Long): kotlin/Long // kotlin/Long.and|and(kotlin.Long){}[0]
    final fun div(kotlin/Long): kotlin/Long // kotlin/Long.div|div(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Long.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Long.hashCode|hashCode(){}[0]
    final fun minus(kotlin/Long): kotlin/Long // kotlin/Long.minus|minus(kotlin.Long){}[0]
    final fun or(kotlin/Long): kotlin/Long // kotlin/Long.or|or(kotlin.Long){}[0]
    final fun plus(kotlin/Long): kotlin/Long // kotlin/Long.plus|plus(kotlin.Long){}[0]
    final fun rangeTo(kotlin/Byte): kotlin.ranges/LongRange // kotlin/Long.rangeTo|rangeTo(kotlin.Byte){}[0]
    final fun rangeTo(kotlin/Int): kotlin.ranges/LongRange // kotlin/Long.rangeTo|rangeTo(kotlin.Int){}[0]
    final fun rangeTo(kotlin/Long): kotlin.ranges/LongRange // kotlin/Long.rangeTo|rangeTo(kotlin.Long){}[0]
    final fun rangeTo(kotlin/Short): kotlin.ranges/LongRange // kotlin/Long.rangeTo|rangeTo(kotlin.Short){}[0]
    final fun rangeUntil(kotlin/Byte): kotlin.ranges/LongRange // kotlin/Long.rangeUntil|rangeUntil(kotlin.Byte){}[0]
    final fun rangeUntil(kotlin/Int): kotlin.ranges/LongRange // kotlin/Long.rangeUntil|rangeUntil(kotlin.Int){}[0]
    final fun rangeUntil(kotlin/Long): kotlin.ranges/LongRange // kotlin/Long.rangeUntil|rangeUntil(kotlin.Long){}[0]
    final fun rangeUntil(kotlin/Short): kotlin.ranges/LongRange // kotlin/Long.rangeUntil|rangeUntil(kotlin.Short){}[0]
    final fun rem(kotlin/Long): kotlin/Long // kotlin/Long.rem|rem(kotlin.Long){}[0]
    final fun times(kotlin/Long): kotlin/Long // kotlin/Long.times|times(kotlin.Long){}[0]
    final fun toDouble(): kotlin/Double // kotlin/Long.toDouble|toDouble(){}[0]
    final fun toFloat(): kotlin/Float // kotlin/Long.toFloat|toFloat(){}[0]
    final fun toInt(): kotlin/Int // kotlin/Long.toInt|toInt(){}[0]
    final fun toString(): kotlin/String // kotlin/Long.toString|toString(){}[0]
    final fun xor(kotlin/Long): kotlin/Long // kotlin/Long.xor|xor(kotlin.Long){}[0]
    final inline fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Long.compareTo|compareTo(kotlin.Byte){}[0]
    final inline fun compareTo(kotlin/Double): kotlin/Int // kotlin/Long.compareTo|compareTo(kotlin.Double){}[0]
    final inline fun compareTo(kotlin/Float): kotlin/Int // kotlin/Long.compareTo|compareTo(kotlin.Float){}[0]
    final inline fun compareTo(kotlin/Int): kotlin/Int // kotlin/Long.compareTo|compareTo(kotlin.Int){}[0]
    final inline fun compareTo(kotlin/Short): kotlin/Int // kotlin/Long.compareTo|compareTo(kotlin.Short){}[0]
    final inline fun div(kotlin/Byte): kotlin/Long // kotlin/Long.div|div(kotlin.Byte){}[0]
    final inline fun div(kotlin/Double): kotlin/Double // kotlin/Long.div|div(kotlin.Double){}[0]
    final inline fun div(kotlin/Float): kotlin/Float // kotlin/Long.div|div(kotlin.Float){}[0]
    final inline fun div(kotlin/Int): kotlin/Long // kotlin/Long.div|div(kotlin.Int){}[0]
    final inline fun div(kotlin/Short): kotlin/Long // kotlin/Long.div|div(kotlin.Short){}[0]
    final inline fun minus(kotlin/Byte): kotlin/Long // kotlin/Long.minus|minus(kotlin.Byte){}[0]
    final inline fun minus(kotlin/Double): kotlin/Double // kotlin/Long.minus|minus(kotlin.Double){}[0]
    final inline fun minus(kotlin/Float): kotlin/Float // kotlin/Long.minus|minus(kotlin.Float){}[0]
    final inline fun minus(kotlin/Int): kotlin/Long // kotlin/Long.minus|minus(kotlin.Int){}[0]
    final inline fun minus(kotlin/Short): kotlin/Long // kotlin/Long.minus|minus(kotlin.Short){}[0]
    final inline fun plus(kotlin/Byte): kotlin/Long // kotlin/Long.plus|plus(kotlin.Byte){}[0]
    final inline fun plus(kotlin/Double): kotlin/Double // kotlin/Long.plus|plus(kotlin.Double){}[0]
    final inline fun plus(kotlin/Float): kotlin/Float // kotlin/Long.plus|plus(kotlin.Float){}[0]
    final inline fun plus(kotlin/Int): kotlin/Long // kotlin/Long.plus|plus(kotlin.Int){}[0]
    final inline fun plus(kotlin/Short): kotlin/Long // kotlin/Long.plus|plus(kotlin.Short){}[0]
    final inline fun rem(kotlin/Byte): kotlin/Long // kotlin/Long.rem|rem(kotlin.Byte){}[0]
    final inline fun rem(kotlin/Double): kotlin/Double // kotlin/Long.rem|rem(kotlin.Double){}[0]
    final inline fun rem(kotlin/Float): kotlin/Float // kotlin/Long.rem|rem(kotlin.Float){}[0]
    final inline fun rem(kotlin/Int): kotlin/Long // kotlin/Long.rem|rem(kotlin.Int){}[0]
    final inline fun rem(kotlin/Short): kotlin/Long // kotlin/Long.rem|rem(kotlin.Short){}[0]
    final inline fun times(kotlin/Byte): kotlin/Long // kotlin/Long.times|times(kotlin.Byte){}[0]
    final inline fun times(kotlin/Double): kotlin/Double // kotlin/Long.times|times(kotlin.Double){}[0]
    final inline fun times(kotlin/Float): kotlin/Float // kotlin/Long.times|times(kotlin.Float){}[0]
    final inline fun times(kotlin/Int): kotlin/Long // kotlin/Long.times|times(kotlin.Int){}[0]
    final inline fun times(kotlin/Short): kotlin/Long // kotlin/Long.times|times(kotlin.Short){}[0]
    final inline fun unaryPlus(): kotlin/Long // kotlin/Long.unaryPlus|unaryPlus(){}[0]

    final object Companion { // kotlin/Long.Companion|null[0]
        final const val MAX_VALUE // kotlin/Long.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Long // kotlin/Long.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/Long.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Long // kotlin/Long.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/Long.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/Long.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/Long.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/Long.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun toLong(): kotlin/Long // kotlin/Long.toLong|toLong(){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Long): kotlin/Int // kotlin/Long.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [js, native]
    final fun dec(): kotlin/Long // kotlin/Long.dec|dec(){}[0]

    // Targets: [js, native]
    final fun inc(): kotlin/Long // kotlin/Long.inc|inc(){}[0]

    // Targets: [js, native]
    final fun inv(): kotlin/Long // kotlin/Long.inv|inv(){}[0]

    // Targets: [js, native]
    final fun shl(kotlin/Int): kotlin/Long // kotlin/Long.shl|shl(kotlin.Int){}[0]

    // Targets: [js, native]
    final fun shr(kotlin/Int): kotlin/Long // kotlin/Long.shr|shr(kotlin.Int){}[0]

    // Targets: [js, native]
    final fun toByte(): kotlin/Byte // kotlin/Long.toByte|toByte(){}[0]

    // Targets: [js, native]
    final fun toChar(): kotlin/Char // kotlin/Long.toChar|toChar(){}[0]

    // Targets: [js, native]
    final fun toShort(): kotlin/Short // kotlin/Long.toShort|toShort(){}[0]

    // Targets: [js, native]
    final fun unaryMinus(): kotlin/Long // kotlin/Long.unaryMinus|unaryMinus(){}[0]

    // Targets: [js, native]
    final fun ushr(kotlin/Int): kotlin/Long // kotlin/Long.ushr|ushr(kotlin.Int){}[0]

    // Targets: [native]
    final fun equals(kotlin/Long): kotlin/Boolean // kotlin/Long.equals|equals(kotlin.Long){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Long): kotlin/Int // kotlin/Long.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun dec(): kotlin/Long // kotlin/Long.dec|dec(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inc(): kotlin/Long // kotlin/Long.inc|inc(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inv(): kotlin/Long // kotlin/Long.inv|inv(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun shl(kotlin/Int): kotlin/Long // kotlin/Long.shl|shl(kotlin.Int){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun shr(kotlin/Int): kotlin/Long // kotlin/Long.shr|shr(kotlin.Int){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toByte(): kotlin/Byte // kotlin/Long.toByte|toByte(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toChar(): kotlin/Char // kotlin/Long.toChar|toChar(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toShort(): kotlin/Short // kotlin/Long.toShort|toShort(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun unaryMinus(): kotlin/Long // kotlin/Long.unaryMinus|unaryMinus(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun ushr(kotlin/Int): kotlin/Long // kotlin/Long.ushr|ushr(kotlin.Int){}[0]

    // Targets: [js]
    final fun toLong(): kotlin/Long // kotlin/Long.toLong|toLong(){}[0]
}

final class kotlin/LongArray { // kotlin/LongArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/LongArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Long>) // kotlin/LongArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Long>){}[0]

    final val size // kotlin/LongArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/LongArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Long // kotlin/LongArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/LongIterator // kotlin/LongArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Long) // kotlin/LongArray.set|set(kotlin.Int;kotlin.Long){}[0]
}

final class kotlin/NotImplementedError : kotlin/Error { // kotlin/NotImplementedError|null[0]
    constructor <init>(kotlin/String = ...) // kotlin/NotImplementedError.<init>|<init>(kotlin.String){}[0]
}

final class kotlin/Nothing // kotlin/Nothing|null[0]

final class kotlin/Short : kotlin/Comparable<kotlin/Short>, kotlin/Number { // kotlin/Short|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Short.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Short.hashCode|hashCode(){}[0]
    final fun rangeTo(kotlin/Byte): kotlin.ranges/IntRange // kotlin/Short.rangeTo|rangeTo(kotlin.Byte){}[0]
    final fun rangeTo(kotlin/Int): kotlin.ranges/IntRange // kotlin/Short.rangeTo|rangeTo(kotlin.Int){}[0]
    final fun rangeTo(kotlin/Long): kotlin.ranges/LongRange // kotlin/Short.rangeTo|rangeTo(kotlin.Long){}[0]
    final fun rangeTo(kotlin/Short): kotlin.ranges/IntRange // kotlin/Short.rangeTo|rangeTo(kotlin.Short){}[0]
    final fun rangeUntil(kotlin/Byte): kotlin.ranges/IntRange // kotlin/Short.rangeUntil|rangeUntil(kotlin.Byte){}[0]
    final fun rangeUntil(kotlin/Int): kotlin.ranges/IntRange // kotlin/Short.rangeUntil|rangeUntil(kotlin.Int){}[0]
    final fun rangeUntil(kotlin/Long): kotlin.ranges/LongRange // kotlin/Short.rangeUntil|rangeUntil(kotlin.Long){}[0]
    final fun rangeUntil(kotlin/Short): kotlin.ranges/IntRange // kotlin/Short.rangeUntil|rangeUntil(kotlin.Short){}[0]
    final fun toChar(): kotlin/Char // kotlin/Short.toChar|toChar(){}[0]
    final fun toDouble(): kotlin/Double // kotlin/Short.toDouble|toDouble(){}[0]
    final fun toFloat(): kotlin/Float // kotlin/Short.toFloat|toFloat(){}[0]
    final fun toInt(): kotlin/Int // kotlin/Short.toInt|toInt(){}[0]
    final fun toLong(): kotlin/Long // kotlin/Short.toLong|toLong(){}[0]
    final fun toString(): kotlin/String // kotlin/Short.toString|toString(){}[0]

    final object Companion { // kotlin/Short.Companion|null[0]
        final const val MAX_VALUE // kotlin/Short.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/Short // kotlin/Short.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/Short.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/Short // kotlin/Short.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/Short.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/Short.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/Short.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/Short.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Double): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Float): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Int): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Long): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Byte): kotlin/Int // kotlin/Short.div|div(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Double): kotlin/Double // kotlin/Short.div|div(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Float): kotlin/Float // kotlin/Short.div|div(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Int): kotlin/Int // kotlin/Short.div|div(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Long): kotlin/Long // kotlin/Short.div|div(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun div(kotlin/Short): kotlin/Int // kotlin/Short.div|div(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Byte): kotlin/Int // kotlin/Short.minus|minus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Double): kotlin/Double // kotlin/Short.minus|minus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Float): kotlin/Float // kotlin/Short.minus|minus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Int): kotlin/Int // kotlin/Short.minus|minus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Long): kotlin/Long // kotlin/Short.minus|minus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun minus(kotlin/Short): kotlin/Int // kotlin/Short.minus|minus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Byte): kotlin/Int // kotlin/Short.plus|plus(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Double): kotlin/Double // kotlin/Short.plus|plus(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Float): kotlin/Float // kotlin/Short.plus|plus(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Int): kotlin/Int // kotlin/Short.plus|plus(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Long): kotlin/Long // kotlin/Short.plus|plus(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun plus(kotlin/Short): kotlin/Int // kotlin/Short.plus|plus(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Byte): kotlin/Int // kotlin/Short.rem|rem(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Double): kotlin/Double // kotlin/Short.rem|rem(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Float): kotlin/Float // kotlin/Short.rem|rem(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Int): kotlin/Int // kotlin/Short.rem|rem(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Long): kotlin/Long // kotlin/Short.rem|rem(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun rem(kotlin/Short): kotlin/Int // kotlin/Short.rem|rem(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Byte): kotlin/Int // kotlin/Short.times|times(kotlin.Byte){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Double): kotlin/Double // kotlin/Short.times|times(kotlin.Double){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Float): kotlin/Float // kotlin/Short.times|times(kotlin.Float){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Int): kotlin/Int // kotlin/Short.times|times(kotlin.Int){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Long): kotlin/Long // kotlin/Short.times|times(kotlin.Long){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun times(kotlin/Short): kotlin/Int // kotlin/Short.times|times(kotlin.Short){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun toShort(): kotlin/Short // kotlin/Short.toShort|toShort(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun unaryMinus(): kotlin/Int // kotlin/Short.unaryMinus|unaryMinus(){}[0]

    // Targets: [native, wasmJs, wasmWasi]
    final inline fun unaryPlus(): kotlin/Int // kotlin/Short.unaryPlus|unaryPlus(){}[0]

    // Targets: [js, native]
    final fun compareTo(kotlin/Short): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [js, native]
    final fun dec(): kotlin/Short // kotlin/Short.dec|dec(){}[0]

    // Targets: [js, native]
    final fun inc(): kotlin/Short // kotlin/Short.inc|inc(){}[0]

    // Targets: [js, native]
    final fun toByte(): kotlin/Byte // kotlin/Short.toByte|toByte(){}[0]

    // Targets: [native]
    final fun equals(kotlin/Short): kotlin/Boolean // kotlin/Short.equals|equals(kotlin.Short){}[0]

    // Targets: [wasmJs, wasmWasi]
    final fun reinterpretAsInt(): kotlin/Int // kotlin/Short.reinterpretAsInt|reinterpretAsInt(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun compareTo(kotlin/Short): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Short){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun dec(): kotlin/Short // kotlin/Short.dec|dec(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun inc(): kotlin/Short // kotlin/Short.inc|inc(){}[0]

    // Targets: [wasmJs, wasmWasi]
    final inline fun toByte(): kotlin/Byte // kotlin/Short.toByte|toByte(){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Byte): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Byte){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Double): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Double){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Float): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Float){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Int): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Int){}[0]

    // Targets: [js]
    final fun compareTo(kotlin/Long): kotlin/Int // kotlin/Short.compareTo|compareTo(kotlin.Long){}[0]

    // Targets: [js]
    final fun div(kotlin/Byte): kotlin/Int // kotlin/Short.div|div(kotlin.Byte){}[0]

    // Targets: [js]
    final fun div(kotlin/Double): kotlin/Double // kotlin/Short.div|div(kotlin.Double){}[0]

    // Targets: [js]
    final fun div(kotlin/Float): kotlin/Float // kotlin/Short.div|div(kotlin.Float){}[0]

    // Targets: [js]
    final fun div(kotlin/Int): kotlin/Int // kotlin/Short.div|div(kotlin.Int){}[0]

    // Targets: [js]
    final fun div(kotlin/Long): kotlin/Long // kotlin/Short.div|div(kotlin.Long){}[0]

    // Targets: [js]
    final fun div(kotlin/Short): kotlin/Int // kotlin/Short.div|div(kotlin.Short){}[0]

    // Targets: [js]
    final fun minus(kotlin/Byte): kotlin/Int // kotlin/Short.minus|minus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun minus(kotlin/Double): kotlin/Double // kotlin/Short.minus|minus(kotlin.Double){}[0]

    // Targets: [js]
    final fun minus(kotlin/Float): kotlin/Float // kotlin/Short.minus|minus(kotlin.Float){}[0]

    // Targets: [js]
    final fun minus(kotlin/Int): kotlin/Int // kotlin/Short.minus|minus(kotlin.Int){}[0]

    // Targets: [js]
    final fun minus(kotlin/Long): kotlin/Long // kotlin/Short.minus|minus(kotlin.Long){}[0]

    // Targets: [js]
    final fun minus(kotlin/Short): kotlin/Int // kotlin/Short.minus|minus(kotlin.Short){}[0]

    // Targets: [js]
    final fun plus(kotlin/Byte): kotlin/Int // kotlin/Short.plus|plus(kotlin.Byte){}[0]

    // Targets: [js]
    final fun plus(kotlin/Double): kotlin/Double // kotlin/Short.plus|plus(kotlin.Double){}[0]

    // Targets: [js]
    final fun plus(kotlin/Float): kotlin/Float // kotlin/Short.plus|plus(kotlin.Float){}[0]

    // Targets: [js]
    final fun plus(kotlin/Int): kotlin/Int // kotlin/Short.plus|plus(kotlin.Int){}[0]

    // Targets: [js]
    final fun plus(kotlin/Long): kotlin/Long // kotlin/Short.plus|plus(kotlin.Long){}[0]

    // Targets: [js]
    final fun plus(kotlin/Short): kotlin/Int // kotlin/Short.plus|plus(kotlin.Short){}[0]

    // Targets: [js]
    final fun rem(kotlin/Byte): kotlin/Int // kotlin/Short.rem|rem(kotlin.Byte){}[0]

    // Targets: [js]
    final fun rem(kotlin/Double): kotlin/Double // kotlin/Short.rem|rem(kotlin.Double){}[0]

    // Targets: [js]
    final fun rem(kotlin/Float): kotlin/Float // kotlin/Short.rem|rem(kotlin.Float){}[0]

    // Targets: [js]
    final fun rem(kotlin/Int): kotlin/Int // kotlin/Short.rem|rem(kotlin.Int){}[0]

    // Targets: [js]
    final fun rem(kotlin/Long): kotlin/Long // kotlin/Short.rem|rem(kotlin.Long){}[0]

    // Targets: [js]
    final fun rem(kotlin/Short): kotlin/Int // kotlin/Short.rem|rem(kotlin.Short){}[0]

    // Targets: [js]
    final fun times(kotlin/Byte): kotlin/Int // kotlin/Short.times|times(kotlin.Byte){}[0]

    // Targets: [js]
    final fun times(kotlin/Double): kotlin/Double // kotlin/Short.times|times(kotlin.Double){}[0]

    // Targets: [js]
    final fun times(kotlin/Float): kotlin/Float // kotlin/Short.times|times(kotlin.Float){}[0]

    // Targets: [js]
    final fun times(kotlin/Int): kotlin/Int // kotlin/Short.times|times(kotlin.Int){}[0]

    // Targets: [js]
    final fun times(kotlin/Long): kotlin/Long // kotlin/Short.times|times(kotlin.Long){}[0]

    // Targets: [js]
    final fun times(kotlin/Short): kotlin/Int // kotlin/Short.times|times(kotlin.Short){}[0]

    // Targets: [js]
    final fun toShort(): kotlin/Short // kotlin/Short.toShort|toShort(){}[0]

    // Targets: [js]
    final fun unaryMinus(): kotlin/Int // kotlin/Short.unaryMinus|unaryMinus(){}[0]

    // Targets: [js]
    final fun unaryPlus(): kotlin/Int // kotlin/Short.unaryPlus|unaryPlus(){}[0]
}

final class kotlin/ShortArray { // kotlin/ShortArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/ShortArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Short>) // kotlin/ShortArray.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Short>){}[0]

    final val size // kotlin/ShortArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/ShortArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Short // kotlin/ShortArray.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/ShortIterator // kotlin/ShortArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/Short) // kotlin/ShortArray.set|set(kotlin.Int;kotlin.Short){}[0]
}

final class kotlin/String : kotlin/CharSequence, kotlin/Comparable<kotlin/String> { // kotlin/String|null[0]
    final val length // kotlin/String.length|{}length[0]
        final fun <get-length>(): kotlin/Int // kotlin/String.length.<get-length>|<get-length>(){}[0]

    final fun compareTo(kotlin/String): kotlin/Int // kotlin/String.compareTo|compareTo(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/String.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): kotlin/Char // kotlin/String.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlin/String.hashCode|hashCode(){}[0]
    final fun plus(kotlin/Any?): kotlin/String // kotlin/String.plus|plus(kotlin.Any?){}[0]
    final fun subSequence(kotlin/Int, kotlin/Int): kotlin/CharSequence // kotlin/String.subSequence|subSequence(kotlin.Int;kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlin/String.toString|toString(){}[0]

    final object Companion // kotlin/String.Companion|null[0]

    // Targets: [js, native]
    constructor <init>() // kotlin/String.<init>|<init>(){}[0]

    // Targets: [native]
    final fun plusImpl(kotlin/String): kotlin/String // kotlin/String.plusImpl|plusImpl(kotlin.String){}[0]
}

final value class <#A: out kotlin/Any?> kotlin/Result : kotlin.io/Serializable { // kotlin/Result|null[0]
    constructor <init>(kotlin/Any?) // kotlin/Result.<init>|<init>(kotlin.Any?){}[0]

    final val isFailure // kotlin/Result.isFailure|{}isFailure[0]
        final fun <get-isFailure>(): kotlin/Boolean // kotlin/Result.isFailure.<get-isFailure>|<get-isFailure>(){}[0]
    final val isSuccess // kotlin/Result.isSuccess|{}isSuccess[0]
        final fun <get-isSuccess>(): kotlin/Boolean // kotlin/Result.isSuccess.<get-isSuccess>|<get-isSuccess>(){}[0]
    final val value // kotlin/Result.value|{}value[0]
        final fun <get-value>(): kotlin/Any? // kotlin/Result.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Result.equals|equals(kotlin.Any?){}[0]
    final fun exceptionOrNull(): kotlin/Throwable? // kotlin/Result.exceptionOrNull|exceptionOrNull(){}[0]
    final fun hashCode(): kotlin/Int // kotlin/Result.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin/Result.toString|toString(){}[0]
    final inline fun getOrNull(): #A? // kotlin/Result.getOrNull|getOrNull(){}[0]

    final object Companion { // kotlin/Result.Companion|null[0]
        final inline fun <#A2: kotlin/Any?> failure(kotlin/Throwable): kotlin/Result<#A2> // kotlin/Result.Companion.failure|failure(kotlin.Throwable){0§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?> success(#A2): kotlin/Result<#A2> // kotlin/Result.Companion.success|success(0:0){0§<kotlin.Any?>}[0]
    }
}

final value class kotlin.time/Duration : kotlin/Comparable<kotlin.time/Duration> { // kotlin.time/Duration|null[0]
    final val absoluteValue // kotlin.time/Duration.absoluteValue|{}absoluteValue[0]
        final fun <get-absoluteValue>(): kotlin.time/Duration // kotlin.time/Duration.absoluteValue.<get-absoluteValue>|<get-absoluteValue>(){}[0]
    final val hoursComponent // kotlin.time/Duration.hoursComponent|{}hoursComponent[0]
        final fun <get-hoursComponent>(): kotlin/Int // kotlin.time/Duration.hoursComponent.<get-hoursComponent>|<get-hoursComponent>(){}[0]
    final val inWholeDays // kotlin.time/Duration.inWholeDays|{}inWholeDays[0]
        final fun <get-inWholeDays>(): kotlin/Long // kotlin.time/Duration.inWholeDays.<get-inWholeDays>|<get-inWholeDays>(){}[0]
    final val inWholeHours // kotlin.time/Duration.inWholeHours|{}inWholeHours[0]
        final fun <get-inWholeHours>(): kotlin/Long // kotlin.time/Duration.inWholeHours.<get-inWholeHours>|<get-inWholeHours>(){}[0]
    final val inWholeMicroseconds // kotlin.time/Duration.inWholeMicroseconds|{}inWholeMicroseconds[0]
        final fun <get-inWholeMicroseconds>(): kotlin/Long // kotlin.time/Duration.inWholeMicroseconds.<get-inWholeMicroseconds>|<get-inWholeMicroseconds>(){}[0]
    final val inWholeMilliseconds // kotlin.time/Duration.inWholeMilliseconds|{}inWholeMilliseconds[0]
        final fun <get-inWholeMilliseconds>(): kotlin/Long // kotlin.time/Duration.inWholeMilliseconds.<get-inWholeMilliseconds>|<get-inWholeMilliseconds>(){}[0]
    final val inWholeMinutes // kotlin.time/Duration.inWholeMinutes|{}inWholeMinutes[0]
        final fun <get-inWholeMinutes>(): kotlin/Long // kotlin.time/Duration.inWholeMinutes.<get-inWholeMinutes>|<get-inWholeMinutes>(){}[0]
    final val inWholeNanoseconds // kotlin.time/Duration.inWholeNanoseconds|{}inWholeNanoseconds[0]
        final fun <get-inWholeNanoseconds>(): kotlin/Long // kotlin.time/Duration.inWholeNanoseconds.<get-inWholeNanoseconds>|<get-inWholeNanoseconds>(){}[0]
    final val inWholeSeconds // kotlin.time/Duration.inWholeSeconds|{}inWholeSeconds[0]
        final fun <get-inWholeSeconds>(): kotlin/Long // kotlin.time/Duration.inWholeSeconds.<get-inWholeSeconds>|<get-inWholeSeconds>(){}[0]
    final val minutesComponent // kotlin.time/Duration.minutesComponent|{}minutesComponent[0]
        final fun <get-minutesComponent>(): kotlin/Int // kotlin.time/Duration.minutesComponent.<get-minutesComponent>|<get-minutesComponent>(){}[0]
    final val nanosecondsComponent // kotlin.time/Duration.nanosecondsComponent|{}nanosecondsComponent[0]
        final fun <get-nanosecondsComponent>(): kotlin/Int // kotlin.time/Duration.nanosecondsComponent.<get-nanosecondsComponent>|<get-nanosecondsComponent>(){}[0]
    final val secondsComponent // kotlin.time/Duration.secondsComponent|{}secondsComponent[0]
        final fun <get-secondsComponent>(): kotlin/Int // kotlin.time/Duration.secondsComponent.<get-secondsComponent>|<get-secondsComponent>(){}[0]

    final fun compareTo(kotlin.time/Duration): kotlin/Int // kotlin.time/Duration.compareTo|compareTo(kotlin.time.Duration){}[0]
    final fun div(kotlin.time/Duration): kotlin/Double // kotlin.time/Duration.div|div(kotlin.time.Duration){}[0]
    final fun div(kotlin/Double): kotlin.time/Duration // kotlin.time/Duration.div|div(kotlin.Double){}[0]
    final fun div(kotlin/Int): kotlin.time/Duration // kotlin.time/Duration.div|div(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.time/Duration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.time/Duration.hashCode|hashCode(){}[0]
    final fun isFinite(): kotlin/Boolean // kotlin.time/Duration.isFinite|isFinite(){}[0]
    final fun isInfinite(): kotlin/Boolean // kotlin.time/Duration.isInfinite|isInfinite(){}[0]
    final fun isNegative(): kotlin/Boolean // kotlin.time/Duration.isNegative|isNegative(){}[0]
    final fun isPositive(): kotlin/Boolean // kotlin.time/Duration.isPositive|isPositive(){}[0]
    final fun minus(kotlin.time/Duration): kotlin.time/Duration // kotlin.time/Duration.minus|minus(kotlin.time.Duration){}[0]
    final fun plus(kotlin.time/Duration): kotlin.time/Duration // kotlin.time/Duration.plus|plus(kotlin.time.Duration){}[0]
    final fun times(kotlin/Double): kotlin.time/Duration // kotlin.time/Duration.times|times(kotlin.Double){}[0]
    final fun times(kotlin/Int): kotlin.time/Duration // kotlin.time/Duration.times|times(kotlin.Int){}[0]
    final fun toDouble(kotlin.time/DurationUnit): kotlin/Double // kotlin.time/Duration.toDouble|toDouble(kotlin.time.DurationUnit){}[0]
    final fun toInt(kotlin.time/DurationUnit): kotlin/Int // kotlin.time/Duration.toInt|toInt(kotlin.time.DurationUnit){}[0]
    final fun toIsoString(): kotlin/String // kotlin.time/Duration.toIsoString|toIsoString(){}[0]
    final fun toLong(kotlin.time/DurationUnit): kotlin/Long // kotlin.time/Duration.toLong|toLong(kotlin.time.DurationUnit){}[0]
    final fun toString(): kotlin/String // kotlin.time/Duration.toString|toString(){}[0]
    final fun toString(kotlin.time/DurationUnit, kotlin/Int = ...): kotlin/String // kotlin.time/Duration.toString|toString(kotlin.time.DurationUnit;kotlin.Int){}[0]
    final fun unaryMinus(): kotlin.time/Duration // kotlin.time/Duration.unaryMinus|unaryMinus(){}[0]
    final inline fun <#A1: kotlin/Any?> toComponents(kotlin/Function2<kotlin/Long, kotlin/Int, #A1>): #A1 // kotlin.time/Duration.toComponents|toComponents(kotlin.Function2<kotlin.Long,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> toComponents(kotlin/Function3<kotlin/Long, kotlin/Int, kotlin/Int, #A1>): #A1 // kotlin.time/Duration.toComponents|toComponents(kotlin.Function3<kotlin.Long,kotlin.Int,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> toComponents(kotlin/Function4<kotlin/Long, kotlin/Int, kotlin/Int, kotlin/Int, #A1>): #A1 // kotlin.time/Duration.toComponents|toComponents(kotlin.Function4<kotlin.Long,kotlin.Int,kotlin.Int,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> toComponents(kotlin/Function5<kotlin/Long, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, #A1>): #A1 // kotlin.time/Duration.toComponents|toComponents(kotlin.Function5<kotlin.Long,kotlin.Int,kotlin.Int,kotlin.Int,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]

    final object Companion { // kotlin.time/Duration.Companion|null[0]
        final val INFINITE // kotlin.time/Duration.Companion.INFINITE|{}INFINITE[0]
            final fun <get-INFINITE>(): kotlin.time/Duration // kotlin.time/Duration.Companion.INFINITE.<get-INFINITE>|<get-INFINITE>(){}[0]
        final val ZERO // kotlin.time/Duration.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): kotlin.time/Duration // kotlin.time/Duration.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]
        final val days // kotlin.time/Duration.Companion.days|@kotlin.Double{}days[0]
            final inline fun (kotlin/Double).<get-days>(): kotlin.time/Duration // kotlin.time/Duration.Companion.days.<get-days>|<get-days>@kotlin.Double(){}[0]
        final val days // kotlin.time/Duration.Companion.days|@kotlin.Int{}days[0]
            final inline fun (kotlin/Int).<get-days>(): kotlin.time/Duration // kotlin.time/Duration.Companion.days.<get-days>|<get-days>@kotlin.Int(){}[0]
        final val days // kotlin.time/Duration.Companion.days|@kotlin.Long{}days[0]
            final inline fun (kotlin/Long).<get-days>(): kotlin.time/Duration // kotlin.time/Duration.Companion.days.<get-days>|<get-days>@kotlin.Long(){}[0]
        final val hours // kotlin.time/Duration.Companion.hours|@kotlin.Double{}hours[0]
            final inline fun (kotlin/Double).<get-hours>(): kotlin.time/Duration // kotlin.time/Duration.Companion.hours.<get-hours>|<get-hours>@kotlin.Double(){}[0]
        final val hours // kotlin.time/Duration.Companion.hours|@kotlin.Int{}hours[0]
            final inline fun (kotlin/Int).<get-hours>(): kotlin.time/Duration // kotlin.time/Duration.Companion.hours.<get-hours>|<get-hours>@kotlin.Int(){}[0]
        final val hours // kotlin.time/Duration.Companion.hours|@kotlin.Long{}hours[0]
            final inline fun (kotlin/Long).<get-hours>(): kotlin.time/Duration // kotlin.time/Duration.Companion.hours.<get-hours>|<get-hours>@kotlin.Long(){}[0]
        final val microseconds // kotlin.time/Duration.Companion.microseconds|@kotlin.Double{}microseconds[0]
            final inline fun (kotlin/Double).<get-microseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.microseconds.<get-microseconds>|<get-microseconds>@kotlin.Double(){}[0]
        final val microseconds // kotlin.time/Duration.Companion.microseconds|@kotlin.Int{}microseconds[0]
            final inline fun (kotlin/Int).<get-microseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.microseconds.<get-microseconds>|<get-microseconds>@kotlin.Int(){}[0]
        final val microseconds // kotlin.time/Duration.Companion.microseconds|@kotlin.Long{}microseconds[0]
            final inline fun (kotlin/Long).<get-microseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.microseconds.<get-microseconds>|<get-microseconds>@kotlin.Long(){}[0]
        final val milliseconds // kotlin.time/Duration.Companion.milliseconds|@kotlin.Double{}milliseconds[0]
            final inline fun (kotlin/Double).<get-milliseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.milliseconds.<get-milliseconds>|<get-milliseconds>@kotlin.Double(){}[0]
        final val milliseconds // kotlin.time/Duration.Companion.milliseconds|@kotlin.Int{}milliseconds[0]
            final inline fun (kotlin/Int).<get-milliseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.milliseconds.<get-milliseconds>|<get-milliseconds>@kotlin.Int(){}[0]
        final val milliseconds // kotlin.time/Duration.Companion.milliseconds|@kotlin.Long{}milliseconds[0]
            final inline fun (kotlin/Long).<get-milliseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.milliseconds.<get-milliseconds>|<get-milliseconds>@kotlin.Long(){}[0]
        final val minutes // kotlin.time/Duration.Companion.minutes|@kotlin.Double{}minutes[0]
            final inline fun (kotlin/Double).<get-minutes>(): kotlin.time/Duration // kotlin.time/Duration.Companion.minutes.<get-minutes>|<get-minutes>@kotlin.Double(){}[0]
        final val minutes // kotlin.time/Duration.Companion.minutes|@kotlin.Int{}minutes[0]
            final inline fun (kotlin/Int).<get-minutes>(): kotlin.time/Duration // kotlin.time/Duration.Companion.minutes.<get-minutes>|<get-minutes>@kotlin.Int(){}[0]
        final val minutes // kotlin.time/Duration.Companion.minutes|@kotlin.Long{}minutes[0]
            final inline fun (kotlin/Long).<get-minutes>(): kotlin.time/Duration // kotlin.time/Duration.Companion.minutes.<get-minutes>|<get-minutes>@kotlin.Long(){}[0]
        final val nanoseconds // kotlin.time/Duration.Companion.nanoseconds|@kotlin.Double{}nanoseconds[0]
            final inline fun (kotlin/Double).<get-nanoseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.nanoseconds.<get-nanoseconds>|<get-nanoseconds>@kotlin.Double(){}[0]
        final val nanoseconds // kotlin.time/Duration.Companion.nanoseconds|@kotlin.Int{}nanoseconds[0]
            final inline fun (kotlin/Int).<get-nanoseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.nanoseconds.<get-nanoseconds>|<get-nanoseconds>@kotlin.Int(){}[0]
        final val nanoseconds // kotlin.time/Duration.Companion.nanoseconds|@kotlin.Long{}nanoseconds[0]
            final inline fun (kotlin/Long).<get-nanoseconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.nanoseconds.<get-nanoseconds>|<get-nanoseconds>@kotlin.Long(){}[0]
        final val seconds // kotlin.time/Duration.Companion.seconds|@kotlin.Double{}seconds[0]
            final inline fun (kotlin/Double).<get-seconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.seconds.<get-seconds>|<get-seconds>@kotlin.Double(){}[0]
        final val seconds // kotlin.time/Duration.Companion.seconds|@kotlin.Int{}seconds[0]
            final inline fun (kotlin/Int).<get-seconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.seconds.<get-seconds>|<get-seconds>@kotlin.Int(){}[0]
        final val seconds // kotlin.time/Duration.Companion.seconds|@kotlin.Long{}seconds[0]
            final inline fun (kotlin/Long).<get-seconds>(): kotlin.time/Duration // kotlin.time/Duration.Companion.seconds.<get-seconds>|<get-seconds>@kotlin.Long(){}[0]

        final fun convert(kotlin/Double, kotlin.time/DurationUnit, kotlin.time/DurationUnit): kotlin/Double // kotlin.time/Duration.Companion.convert|convert(kotlin.Double;kotlin.time.DurationUnit;kotlin.time.DurationUnit){}[0]
        final fun parse(kotlin/String): kotlin.time/Duration // kotlin.time/Duration.Companion.parse|parse(kotlin.String){}[0]
        final fun parseIsoString(kotlin/String): kotlin.time/Duration // kotlin.time/Duration.Companion.parseIsoString|parseIsoString(kotlin.String){}[0]
        final fun parseIsoStringOrNull(kotlin/String): kotlin.time/Duration? // kotlin.time/Duration.Companion.parseIsoStringOrNull|parseIsoStringOrNull(kotlin.String){}[0]
        final fun parseOrNull(kotlin/String): kotlin.time/Duration? // kotlin.time/Duration.Companion.parseOrNull|parseOrNull(kotlin.String){}[0]
    }
}

final value class kotlin/UByte : kotlin/Comparable<kotlin/UByte> { // kotlin/UByte|null[0]
    constructor <init>(kotlin/Byte) // kotlin/UByte.<init>|<init>(kotlin.Byte){}[0]

    final val data // kotlin/UByte.data|{}data[0]
        final fun <get-data>(): kotlin/Byte // kotlin/UByte.data.<get-data>|<get-data>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/UByte.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/UByte.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin/UByte.toString|toString(){}[0]
    final inline fun and(kotlin/UByte): kotlin/UByte // kotlin/UByte.and|and(kotlin.UByte){}[0]
    final inline fun compareTo(kotlin/UByte): kotlin/Int // kotlin/UByte.compareTo|compareTo(kotlin.UByte){}[0]
    final inline fun compareTo(kotlin/UInt): kotlin/Int // kotlin/UByte.compareTo|compareTo(kotlin.UInt){}[0]
    final inline fun compareTo(kotlin/ULong): kotlin/Int // kotlin/UByte.compareTo|compareTo(kotlin.ULong){}[0]
    final inline fun compareTo(kotlin/UShort): kotlin/Int // kotlin/UByte.compareTo|compareTo(kotlin.UShort){}[0]
    final inline fun dec(): kotlin/UByte // kotlin/UByte.dec|dec(){}[0]
    final inline fun div(kotlin/UByte): kotlin/UInt // kotlin/UByte.div|div(kotlin.UByte){}[0]
    final inline fun div(kotlin/UInt): kotlin/UInt // kotlin/UByte.div|div(kotlin.UInt){}[0]
    final inline fun div(kotlin/ULong): kotlin/ULong // kotlin/UByte.div|div(kotlin.ULong){}[0]
    final inline fun div(kotlin/UShort): kotlin/UInt // kotlin/UByte.div|div(kotlin.UShort){}[0]
    final inline fun floorDiv(kotlin/UByte): kotlin/UInt // kotlin/UByte.floorDiv|floorDiv(kotlin.UByte){}[0]
    final inline fun floorDiv(kotlin/UInt): kotlin/UInt // kotlin/UByte.floorDiv|floorDiv(kotlin.UInt){}[0]
    final inline fun floorDiv(kotlin/ULong): kotlin/ULong // kotlin/UByte.floorDiv|floorDiv(kotlin.ULong){}[0]
    final inline fun floorDiv(kotlin/UShort): kotlin/UInt // kotlin/UByte.floorDiv|floorDiv(kotlin.UShort){}[0]
    final inline fun inc(): kotlin/UByte // kotlin/UByte.inc|inc(){}[0]
    final inline fun inv(): kotlin/UByte // kotlin/UByte.inv|inv(){}[0]
    final inline fun minus(kotlin/UByte): kotlin/UInt // kotlin/UByte.minus|minus(kotlin.UByte){}[0]
    final inline fun minus(kotlin/UInt): kotlin/UInt // kotlin/UByte.minus|minus(kotlin.UInt){}[0]
    final inline fun minus(kotlin/ULong): kotlin/ULong // kotlin/UByte.minus|minus(kotlin.ULong){}[0]
    final inline fun minus(kotlin/UShort): kotlin/UInt // kotlin/UByte.minus|minus(kotlin.UShort){}[0]
    final inline fun mod(kotlin/UByte): kotlin/UByte // kotlin/UByte.mod|mod(kotlin.UByte){}[0]
    final inline fun mod(kotlin/UInt): kotlin/UInt // kotlin/UByte.mod|mod(kotlin.UInt){}[0]
    final inline fun mod(kotlin/ULong): kotlin/ULong // kotlin/UByte.mod|mod(kotlin.ULong){}[0]
    final inline fun mod(kotlin/UShort): kotlin/UShort // kotlin/UByte.mod|mod(kotlin.UShort){}[0]
    final inline fun or(kotlin/UByte): kotlin/UByte // kotlin/UByte.or|or(kotlin.UByte){}[0]
    final inline fun plus(kotlin/UByte): kotlin/UInt // kotlin/UByte.plus|plus(kotlin.UByte){}[0]
    final inline fun plus(kotlin/UInt): kotlin/UInt // kotlin/UByte.plus|plus(kotlin.UInt){}[0]
    final inline fun plus(kotlin/ULong): kotlin/ULong // kotlin/UByte.plus|plus(kotlin.ULong){}[0]
    final inline fun plus(kotlin/UShort): kotlin/UInt // kotlin/UByte.plus|plus(kotlin.UShort){}[0]
    final inline fun rangeTo(kotlin/UByte): kotlin.ranges/UIntRange // kotlin/UByte.rangeTo|rangeTo(kotlin.UByte){}[0]
    final inline fun rangeUntil(kotlin/UByte): kotlin.ranges/UIntRange // kotlin/UByte.rangeUntil|rangeUntil(kotlin.UByte){}[0]
    final inline fun rem(kotlin/UByte): kotlin/UInt // kotlin/UByte.rem|rem(kotlin.UByte){}[0]
    final inline fun rem(kotlin/UInt): kotlin/UInt // kotlin/UByte.rem|rem(kotlin.UInt){}[0]
    final inline fun rem(kotlin/ULong): kotlin/ULong // kotlin/UByte.rem|rem(kotlin.ULong){}[0]
    final inline fun rem(kotlin/UShort): kotlin/UInt // kotlin/UByte.rem|rem(kotlin.UShort){}[0]
    final inline fun times(kotlin/UByte): kotlin/UInt // kotlin/UByte.times|times(kotlin.UByte){}[0]
    final inline fun times(kotlin/UInt): kotlin/UInt // kotlin/UByte.times|times(kotlin.UInt){}[0]
    final inline fun times(kotlin/ULong): kotlin/ULong // kotlin/UByte.times|times(kotlin.ULong){}[0]
    final inline fun times(kotlin/UShort): kotlin/UInt // kotlin/UByte.times|times(kotlin.UShort){}[0]
    final inline fun toByte(): kotlin/Byte // kotlin/UByte.toByte|toByte(){}[0]
    final inline fun toDouble(): kotlin/Double // kotlin/UByte.toDouble|toDouble(){}[0]
    final inline fun toFloat(): kotlin/Float // kotlin/UByte.toFloat|toFloat(){}[0]
    final inline fun toInt(): kotlin/Int // kotlin/UByte.toInt|toInt(){}[0]
    final inline fun toLong(): kotlin/Long // kotlin/UByte.toLong|toLong(){}[0]
    final inline fun toShort(): kotlin/Short // kotlin/UByte.toShort|toShort(){}[0]
    final inline fun toUByte(): kotlin/UByte // kotlin/UByte.toUByte|toUByte(){}[0]
    final inline fun toUInt(): kotlin/UInt // kotlin/UByte.toUInt|toUInt(){}[0]
    final inline fun toULong(): kotlin/ULong // kotlin/UByte.toULong|toULong(){}[0]
    final inline fun toUShort(): kotlin/UShort // kotlin/UByte.toUShort|toUShort(){}[0]
    final inline fun xor(kotlin/UByte): kotlin/UByte // kotlin/UByte.xor|xor(kotlin.UByte){}[0]

    final object Companion { // kotlin/UByte.Companion|null[0]
        final const val MAX_VALUE // kotlin/UByte.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/UByte // kotlin/UByte.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/UByte.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/UByte // kotlin/UByte.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/UByte.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/UByte.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/UByte.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/UByte.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }
}

final value class kotlin/UByteArray : kotlin.collections/Collection<kotlin/UByte> { // kotlin/UByteArray|null[0]
    constructor <init>(kotlin/ByteArray) // kotlin/UByteArray.<init>|<init>(kotlin.ByteArray){}[0]
    constructor <init>(kotlin/Int) // kotlin/UByteArray.<init>|<init>(kotlin.Int){}[0]

    final val size // kotlin/UByteArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/UByteArray.size.<get-size>|<get-size>(){}[0]
    final val storage // kotlin/UByteArray.storage|{}storage[0]
        final fun <get-storage>(): kotlin/ByteArray // kotlin/UByteArray.storage.<get-storage>|<get-storage>(){}[0]

    final fun contains(kotlin/UByte): kotlin/Boolean // kotlin/UByteArray.contains|contains(kotlin.UByte){}[0]
    final fun containsAll(kotlin.collections/Collection<kotlin/UByte>): kotlin/Boolean // kotlin/UByteArray.containsAll|containsAll(kotlin.collections.Collection<kotlin.UByte>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/UByteArray.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): kotlin/UByte // kotlin/UByteArray.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlin/UByteArray.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin/UByteArray.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotlin/UByte> // kotlin/UByteArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/UByte) // kotlin/UByteArray.set|set(kotlin.Int;kotlin.UByte){}[0]
    final fun toString(): kotlin/String // kotlin/UByteArray.toString|toString(){}[0]
}

final value class kotlin/UInt : kotlin/Comparable<kotlin/UInt> { // kotlin/UInt|null[0]
    constructor <init>(kotlin/Int) // kotlin/UInt.<init>|<init>(kotlin.Int){}[0]

    final val data // kotlin/UInt.data|{}data[0]
        final fun <get-data>(): kotlin/Int // kotlin/UInt.data.<get-data>|<get-data>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/UInt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/UInt.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin/UInt.toString|toString(){}[0]
    final inline fun and(kotlin/UInt): kotlin/UInt // kotlin/UInt.and|and(kotlin.UInt){}[0]
    final inline fun compareTo(kotlin/UByte): kotlin/Int // kotlin/UInt.compareTo|compareTo(kotlin.UByte){}[0]
    final inline fun compareTo(kotlin/UInt): kotlin/Int // kotlin/UInt.compareTo|compareTo(kotlin.UInt){}[0]
    final inline fun compareTo(kotlin/ULong): kotlin/Int // kotlin/UInt.compareTo|compareTo(kotlin.ULong){}[0]
    final inline fun compareTo(kotlin/UShort): kotlin/Int // kotlin/UInt.compareTo|compareTo(kotlin.UShort){}[0]
    final inline fun dec(): kotlin/UInt // kotlin/UInt.dec|dec(){}[0]
    final inline fun div(kotlin/UByte): kotlin/UInt // kotlin/UInt.div|div(kotlin.UByte){}[0]
    final inline fun div(kotlin/UInt): kotlin/UInt // kotlin/UInt.div|div(kotlin.UInt){}[0]
    final inline fun div(kotlin/ULong): kotlin/ULong // kotlin/UInt.div|div(kotlin.ULong){}[0]
    final inline fun div(kotlin/UShort): kotlin/UInt // kotlin/UInt.div|div(kotlin.UShort){}[0]
    final inline fun floorDiv(kotlin/UByte): kotlin/UInt // kotlin/UInt.floorDiv|floorDiv(kotlin.UByte){}[0]
    final inline fun floorDiv(kotlin/UInt): kotlin/UInt // kotlin/UInt.floorDiv|floorDiv(kotlin.UInt){}[0]
    final inline fun floorDiv(kotlin/ULong): kotlin/ULong // kotlin/UInt.floorDiv|floorDiv(kotlin.ULong){}[0]
    final inline fun floorDiv(kotlin/UShort): kotlin/UInt // kotlin/UInt.floorDiv|floorDiv(kotlin.UShort){}[0]
    final inline fun inc(): kotlin/UInt // kotlin/UInt.inc|inc(){}[0]
    final inline fun inv(): kotlin/UInt // kotlin/UInt.inv|inv(){}[0]
    final inline fun minus(kotlin/UByte): kotlin/UInt // kotlin/UInt.minus|minus(kotlin.UByte){}[0]
    final inline fun minus(kotlin/UInt): kotlin/UInt // kotlin/UInt.minus|minus(kotlin.UInt){}[0]
    final inline fun minus(kotlin/ULong): kotlin/ULong // kotlin/UInt.minus|minus(kotlin.ULong){}[0]
    final inline fun minus(kotlin/UShort): kotlin/UInt // kotlin/UInt.minus|minus(kotlin.UShort){}[0]
    final inline fun mod(kotlin/UByte): kotlin/UByte // kotlin/UInt.mod|mod(kotlin.UByte){}[0]
    final inline fun mod(kotlin/UInt): kotlin/UInt // kotlin/UInt.mod|mod(kotlin.UInt){}[0]
    final inline fun mod(kotlin/ULong): kotlin/ULong // kotlin/UInt.mod|mod(kotlin.ULong){}[0]
    final inline fun mod(kotlin/UShort): kotlin/UShort // kotlin/UInt.mod|mod(kotlin.UShort){}[0]
    final inline fun or(kotlin/UInt): kotlin/UInt // kotlin/UInt.or|or(kotlin.UInt){}[0]
    final inline fun plus(kotlin/UByte): kotlin/UInt // kotlin/UInt.plus|plus(kotlin.UByte){}[0]
    final inline fun plus(kotlin/UInt): kotlin/UInt // kotlin/UInt.plus|plus(kotlin.UInt){}[0]
    final inline fun plus(kotlin/ULong): kotlin/ULong // kotlin/UInt.plus|plus(kotlin.ULong){}[0]
    final inline fun plus(kotlin/UShort): kotlin/UInt // kotlin/UInt.plus|plus(kotlin.UShort){}[0]
    final inline fun rangeTo(kotlin/UInt): kotlin.ranges/UIntRange // kotlin/UInt.rangeTo|rangeTo(kotlin.UInt){}[0]
    final inline fun rangeUntil(kotlin/UInt): kotlin.ranges/UIntRange // kotlin/UInt.rangeUntil|rangeUntil(kotlin.UInt){}[0]
    final inline fun rem(kotlin/UByte): kotlin/UInt // kotlin/UInt.rem|rem(kotlin.UByte){}[0]
    final inline fun rem(kotlin/UInt): kotlin/UInt // kotlin/UInt.rem|rem(kotlin.UInt){}[0]
    final inline fun rem(kotlin/ULong): kotlin/ULong // kotlin/UInt.rem|rem(kotlin.ULong){}[0]
    final inline fun rem(kotlin/UShort): kotlin/UInt // kotlin/UInt.rem|rem(kotlin.UShort){}[0]
    final inline fun shl(kotlin/Int): kotlin/UInt // kotlin/UInt.shl|shl(kotlin.Int){}[0]
    final inline fun shr(kotlin/Int): kotlin/UInt // kotlin/UInt.shr|shr(kotlin.Int){}[0]
    final inline fun times(kotlin/UByte): kotlin/UInt // kotlin/UInt.times|times(kotlin.UByte){}[0]
    final inline fun times(kotlin/UInt): kotlin/UInt // kotlin/UInt.times|times(kotlin.UInt){}[0]
    final inline fun times(kotlin/ULong): kotlin/ULong // kotlin/UInt.times|times(kotlin.ULong){}[0]
    final inline fun times(kotlin/UShort): kotlin/UInt // kotlin/UInt.times|times(kotlin.UShort){}[0]
    final inline fun toByte(): kotlin/Byte // kotlin/UInt.toByte|toByte(){}[0]
    final inline fun toDouble(): kotlin/Double // kotlin/UInt.toDouble|toDouble(){}[0]
    final inline fun toFloat(): kotlin/Float // kotlin/UInt.toFloat|toFloat(){}[0]
    final inline fun toInt(): kotlin/Int // kotlin/UInt.toInt|toInt(){}[0]
    final inline fun toLong(): kotlin/Long // kotlin/UInt.toLong|toLong(){}[0]
    final inline fun toShort(): kotlin/Short // kotlin/UInt.toShort|toShort(){}[0]
    final inline fun toUByte(): kotlin/UByte // kotlin/UInt.toUByte|toUByte(){}[0]
    final inline fun toUInt(): kotlin/UInt // kotlin/UInt.toUInt|toUInt(){}[0]
    final inline fun toULong(): kotlin/ULong // kotlin/UInt.toULong|toULong(){}[0]
    final inline fun toUShort(): kotlin/UShort // kotlin/UInt.toUShort|toUShort(){}[0]
    final inline fun xor(kotlin/UInt): kotlin/UInt // kotlin/UInt.xor|xor(kotlin.UInt){}[0]

    final object Companion { // kotlin/UInt.Companion|null[0]
        final const val MAX_VALUE // kotlin/UInt.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/UInt // kotlin/UInt.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/UInt.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/UInt // kotlin/UInt.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/UInt.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/UInt.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/UInt.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/UInt.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }
}

final value class kotlin/UIntArray : kotlin.collections/Collection<kotlin/UInt> { // kotlin/UIntArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/UIntArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/IntArray) // kotlin/UIntArray.<init>|<init>(kotlin.IntArray){}[0]

    final val size // kotlin/UIntArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/UIntArray.size.<get-size>|<get-size>(){}[0]
    final val storage // kotlin/UIntArray.storage|{}storage[0]
        final fun <get-storage>(): kotlin/IntArray // kotlin/UIntArray.storage.<get-storage>|<get-storage>(){}[0]

    final fun contains(kotlin/UInt): kotlin/Boolean // kotlin/UIntArray.contains|contains(kotlin.UInt){}[0]
    final fun containsAll(kotlin.collections/Collection<kotlin/UInt>): kotlin/Boolean // kotlin/UIntArray.containsAll|containsAll(kotlin.collections.Collection<kotlin.UInt>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/UIntArray.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): kotlin/UInt // kotlin/UIntArray.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlin/UIntArray.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin/UIntArray.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotlin/UInt> // kotlin/UIntArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/UInt) // kotlin/UIntArray.set|set(kotlin.Int;kotlin.UInt){}[0]
    final fun toString(): kotlin/String // kotlin/UIntArray.toString|toString(){}[0]
}

final value class kotlin/ULong : kotlin/Comparable<kotlin/ULong> { // kotlin/ULong|null[0]
    constructor <init>(kotlin/Long) // kotlin/ULong.<init>|<init>(kotlin.Long){}[0]

    final val data // kotlin/ULong.data|{}data[0]
        final fun <get-data>(): kotlin/Long // kotlin/ULong.data.<get-data>|<get-data>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/ULong.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/ULong.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin/ULong.toString|toString(){}[0]
    final inline fun and(kotlin/ULong): kotlin/ULong // kotlin/ULong.and|and(kotlin.ULong){}[0]
    final inline fun compareTo(kotlin/UByte): kotlin/Int // kotlin/ULong.compareTo|compareTo(kotlin.UByte){}[0]
    final inline fun compareTo(kotlin/UInt): kotlin/Int // kotlin/ULong.compareTo|compareTo(kotlin.UInt){}[0]
    final inline fun compareTo(kotlin/ULong): kotlin/Int // kotlin/ULong.compareTo|compareTo(kotlin.ULong){}[0]
    final inline fun compareTo(kotlin/UShort): kotlin/Int // kotlin/ULong.compareTo|compareTo(kotlin.UShort){}[0]
    final inline fun dec(): kotlin/ULong // kotlin/ULong.dec|dec(){}[0]
    final inline fun div(kotlin/UByte): kotlin/ULong // kotlin/ULong.div|div(kotlin.UByte){}[0]
    final inline fun div(kotlin/UInt): kotlin/ULong // kotlin/ULong.div|div(kotlin.UInt){}[0]
    final inline fun div(kotlin/ULong): kotlin/ULong // kotlin/ULong.div|div(kotlin.ULong){}[0]
    final inline fun div(kotlin/UShort): kotlin/ULong // kotlin/ULong.div|div(kotlin.UShort){}[0]
    final inline fun floorDiv(kotlin/UByte): kotlin/ULong // kotlin/ULong.floorDiv|floorDiv(kotlin.UByte){}[0]
    final inline fun floorDiv(kotlin/UInt): kotlin/ULong // kotlin/ULong.floorDiv|floorDiv(kotlin.UInt){}[0]
    final inline fun floorDiv(kotlin/ULong): kotlin/ULong // kotlin/ULong.floorDiv|floorDiv(kotlin.ULong){}[0]
    final inline fun floorDiv(kotlin/UShort): kotlin/ULong // kotlin/ULong.floorDiv|floorDiv(kotlin.UShort){}[0]
    final inline fun inc(): kotlin/ULong // kotlin/ULong.inc|inc(){}[0]
    final inline fun inv(): kotlin/ULong // kotlin/ULong.inv|inv(){}[0]
    final inline fun minus(kotlin/UByte): kotlin/ULong // kotlin/ULong.minus|minus(kotlin.UByte){}[0]
    final inline fun minus(kotlin/UInt): kotlin/ULong // kotlin/ULong.minus|minus(kotlin.UInt){}[0]
    final inline fun minus(kotlin/ULong): kotlin/ULong // kotlin/ULong.minus|minus(kotlin.ULong){}[0]
    final inline fun minus(kotlin/UShort): kotlin/ULong // kotlin/ULong.minus|minus(kotlin.UShort){}[0]
    final inline fun mod(kotlin/UByte): kotlin/UByte // kotlin/ULong.mod|mod(kotlin.UByte){}[0]
    final inline fun mod(kotlin/UInt): kotlin/UInt // kotlin/ULong.mod|mod(kotlin.UInt){}[0]
    final inline fun mod(kotlin/ULong): kotlin/ULong // kotlin/ULong.mod|mod(kotlin.ULong){}[0]
    final inline fun mod(kotlin/UShort): kotlin/UShort // kotlin/ULong.mod|mod(kotlin.UShort){}[0]
    final inline fun or(kotlin/ULong): kotlin/ULong // kotlin/ULong.or|or(kotlin.ULong){}[0]
    final inline fun plus(kotlin/UByte): kotlin/ULong // kotlin/ULong.plus|plus(kotlin.UByte){}[0]
    final inline fun plus(kotlin/UInt): kotlin/ULong // kotlin/ULong.plus|plus(kotlin.UInt){}[0]
    final inline fun plus(kotlin/ULong): kotlin/ULong // kotlin/ULong.plus|plus(kotlin.ULong){}[0]
    final inline fun plus(kotlin/UShort): kotlin/ULong // kotlin/ULong.plus|plus(kotlin.UShort){}[0]
    final inline fun rangeTo(kotlin/ULong): kotlin.ranges/ULongRange // kotlin/ULong.rangeTo|rangeTo(kotlin.ULong){}[0]
    final inline fun rangeUntil(kotlin/ULong): kotlin.ranges/ULongRange // kotlin/ULong.rangeUntil|rangeUntil(kotlin.ULong){}[0]
    final inline fun rem(kotlin/UByte): kotlin/ULong // kotlin/ULong.rem|rem(kotlin.UByte){}[0]
    final inline fun rem(kotlin/UInt): kotlin/ULong // kotlin/ULong.rem|rem(kotlin.UInt){}[0]
    final inline fun rem(kotlin/ULong): kotlin/ULong // kotlin/ULong.rem|rem(kotlin.ULong){}[0]
    final inline fun rem(kotlin/UShort): kotlin/ULong // kotlin/ULong.rem|rem(kotlin.UShort){}[0]
    final inline fun shl(kotlin/Int): kotlin/ULong // kotlin/ULong.shl|shl(kotlin.Int){}[0]
    final inline fun shr(kotlin/Int): kotlin/ULong // kotlin/ULong.shr|shr(kotlin.Int){}[0]
    final inline fun times(kotlin/UByte): kotlin/ULong // kotlin/ULong.times|times(kotlin.UByte){}[0]
    final inline fun times(kotlin/UInt): kotlin/ULong // kotlin/ULong.times|times(kotlin.UInt){}[0]
    final inline fun times(kotlin/ULong): kotlin/ULong // kotlin/ULong.times|times(kotlin.ULong){}[0]
    final inline fun times(kotlin/UShort): kotlin/ULong // kotlin/ULong.times|times(kotlin.UShort){}[0]
    final inline fun toByte(): kotlin/Byte // kotlin/ULong.toByte|toByte(){}[0]
    final inline fun toDouble(): kotlin/Double // kotlin/ULong.toDouble|toDouble(){}[0]
    final inline fun toFloat(): kotlin/Float // kotlin/ULong.toFloat|toFloat(){}[0]
    final inline fun toInt(): kotlin/Int // kotlin/ULong.toInt|toInt(){}[0]
    final inline fun toLong(): kotlin/Long // kotlin/ULong.toLong|toLong(){}[0]
    final inline fun toShort(): kotlin/Short // kotlin/ULong.toShort|toShort(){}[0]
    final inline fun toUByte(): kotlin/UByte // kotlin/ULong.toUByte|toUByte(){}[0]
    final inline fun toUInt(): kotlin/UInt // kotlin/ULong.toUInt|toUInt(){}[0]
    final inline fun toULong(): kotlin/ULong // kotlin/ULong.toULong|toULong(){}[0]
    final inline fun toUShort(): kotlin/UShort // kotlin/ULong.toUShort|toUShort(){}[0]
    final inline fun xor(kotlin/ULong): kotlin/ULong // kotlin/ULong.xor|xor(kotlin.ULong){}[0]

    final object Companion { // kotlin/ULong.Companion|null[0]
        final const val MAX_VALUE // kotlin/ULong.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/ULong // kotlin/ULong.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/ULong.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/ULong // kotlin/ULong.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/ULong.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/ULong.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/ULong.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/ULong.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }
}

final value class kotlin/ULongArray : kotlin.collections/Collection<kotlin/ULong> { // kotlin/ULongArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/ULongArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/LongArray) // kotlin/ULongArray.<init>|<init>(kotlin.LongArray){}[0]

    final val size // kotlin/ULongArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/ULongArray.size.<get-size>|<get-size>(){}[0]
    final val storage // kotlin/ULongArray.storage|{}storage[0]
        final fun <get-storage>(): kotlin/LongArray // kotlin/ULongArray.storage.<get-storage>|<get-storage>(){}[0]

    final fun contains(kotlin/ULong): kotlin/Boolean // kotlin/ULongArray.contains|contains(kotlin.ULong){}[0]
    final fun containsAll(kotlin.collections/Collection<kotlin/ULong>): kotlin/Boolean // kotlin/ULongArray.containsAll|containsAll(kotlin.collections.Collection<kotlin.ULong>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/ULongArray.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): kotlin/ULong // kotlin/ULongArray.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlin/ULongArray.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin/ULongArray.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotlin/ULong> // kotlin/ULongArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/ULong) // kotlin/ULongArray.set|set(kotlin.Int;kotlin.ULong){}[0]
    final fun toString(): kotlin/String // kotlin/ULongArray.toString|toString(){}[0]
}

final value class kotlin/UShort : kotlin/Comparable<kotlin/UShort> { // kotlin/UShort|null[0]
    constructor <init>(kotlin/Short) // kotlin/UShort.<init>|<init>(kotlin.Short){}[0]

    final val data // kotlin/UShort.data|{}data[0]
        final fun <get-data>(): kotlin/Short // kotlin/UShort.data.<get-data>|<get-data>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/UShort.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin/UShort.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin/UShort.toString|toString(){}[0]
    final inline fun and(kotlin/UShort): kotlin/UShort // kotlin/UShort.and|and(kotlin.UShort){}[0]
    final inline fun compareTo(kotlin/UByte): kotlin/Int // kotlin/UShort.compareTo|compareTo(kotlin.UByte){}[0]
    final inline fun compareTo(kotlin/UInt): kotlin/Int // kotlin/UShort.compareTo|compareTo(kotlin.UInt){}[0]
    final inline fun compareTo(kotlin/ULong): kotlin/Int // kotlin/UShort.compareTo|compareTo(kotlin.ULong){}[0]
    final inline fun compareTo(kotlin/UShort): kotlin/Int // kotlin/UShort.compareTo|compareTo(kotlin.UShort){}[0]
    final inline fun dec(): kotlin/UShort // kotlin/UShort.dec|dec(){}[0]
    final inline fun div(kotlin/UByte): kotlin/UInt // kotlin/UShort.div|div(kotlin.UByte){}[0]
    final inline fun div(kotlin/UInt): kotlin/UInt // kotlin/UShort.div|div(kotlin.UInt){}[0]
    final inline fun div(kotlin/ULong): kotlin/ULong // kotlin/UShort.div|div(kotlin.ULong){}[0]
    final inline fun div(kotlin/UShort): kotlin/UInt // kotlin/UShort.div|div(kotlin.UShort){}[0]
    final inline fun floorDiv(kotlin/UByte): kotlin/UInt // kotlin/UShort.floorDiv|floorDiv(kotlin.UByte){}[0]
    final inline fun floorDiv(kotlin/UInt): kotlin/UInt // kotlin/UShort.floorDiv|floorDiv(kotlin.UInt){}[0]
    final inline fun floorDiv(kotlin/ULong): kotlin/ULong // kotlin/UShort.floorDiv|floorDiv(kotlin.ULong){}[0]
    final inline fun floorDiv(kotlin/UShort): kotlin/UInt // kotlin/UShort.floorDiv|floorDiv(kotlin.UShort){}[0]
    final inline fun inc(): kotlin/UShort // kotlin/UShort.inc|inc(){}[0]
    final inline fun inv(): kotlin/UShort // kotlin/UShort.inv|inv(){}[0]
    final inline fun minus(kotlin/UByte): kotlin/UInt // kotlin/UShort.minus|minus(kotlin.UByte){}[0]
    final inline fun minus(kotlin/UInt): kotlin/UInt // kotlin/UShort.minus|minus(kotlin.UInt){}[0]
    final inline fun minus(kotlin/ULong): kotlin/ULong // kotlin/UShort.minus|minus(kotlin.ULong){}[0]
    final inline fun minus(kotlin/UShort): kotlin/UInt // kotlin/UShort.minus|minus(kotlin.UShort){}[0]
    final inline fun mod(kotlin/UByte): kotlin/UByte // kotlin/UShort.mod|mod(kotlin.UByte){}[0]
    final inline fun mod(kotlin/UInt): kotlin/UInt // kotlin/UShort.mod|mod(kotlin.UInt){}[0]
    final inline fun mod(kotlin/ULong): kotlin/ULong // kotlin/UShort.mod|mod(kotlin.ULong){}[0]
    final inline fun mod(kotlin/UShort): kotlin/UShort // kotlin/UShort.mod|mod(kotlin.UShort){}[0]
    final inline fun or(kotlin/UShort): kotlin/UShort // kotlin/UShort.or|or(kotlin.UShort){}[0]
    final inline fun plus(kotlin/UByte): kotlin/UInt // kotlin/UShort.plus|plus(kotlin.UByte){}[0]
    final inline fun plus(kotlin/UInt): kotlin/UInt // kotlin/UShort.plus|plus(kotlin.UInt){}[0]
    final inline fun plus(kotlin/ULong): kotlin/ULong // kotlin/UShort.plus|plus(kotlin.ULong){}[0]
    final inline fun plus(kotlin/UShort): kotlin/UInt // kotlin/UShort.plus|plus(kotlin.UShort){}[0]
    final inline fun rangeTo(kotlin/UShort): kotlin.ranges/UIntRange // kotlin/UShort.rangeTo|rangeTo(kotlin.UShort){}[0]
    final inline fun rangeUntil(kotlin/UShort): kotlin.ranges/UIntRange // kotlin/UShort.rangeUntil|rangeUntil(kotlin.UShort){}[0]
    final inline fun rem(kotlin/UByte): kotlin/UInt // kotlin/UShort.rem|rem(kotlin.UByte){}[0]
    final inline fun rem(kotlin/UInt): kotlin/UInt // kotlin/UShort.rem|rem(kotlin.UInt){}[0]
    final inline fun rem(kotlin/ULong): kotlin/ULong // kotlin/UShort.rem|rem(kotlin.ULong){}[0]
    final inline fun rem(kotlin/UShort): kotlin/UInt // kotlin/UShort.rem|rem(kotlin.UShort){}[0]
    final inline fun times(kotlin/UByte): kotlin/UInt // kotlin/UShort.times|times(kotlin.UByte){}[0]
    final inline fun times(kotlin/UInt): kotlin/UInt // kotlin/UShort.times|times(kotlin.UInt){}[0]
    final inline fun times(kotlin/ULong): kotlin/ULong // kotlin/UShort.times|times(kotlin.ULong){}[0]
    final inline fun times(kotlin/UShort): kotlin/UInt // kotlin/UShort.times|times(kotlin.UShort){}[0]
    final inline fun toByte(): kotlin/Byte // kotlin/UShort.toByte|toByte(){}[0]
    final inline fun toDouble(): kotlin/Double // kotlin/UShort.toDouble|toDouble(){}[0]
    final inline fun toFloat(): kotlin/Float // kotlin/UShort.toFloat|toFloat(){}[0]
    final inline fun toInt(): kotlin/Int // kotlin/UShort.toInt|toInt(){}[0]
    final inline fun toLong(): kotlin/Long // kotlin/UShort.toLong|toLong(){}[0]
    final inline fun toShort(): kotlin/Short // kotlin/UShort.toShort|toShort(){}[0]
    final inline fun toUByte(): kotlin/UByte // kotlin/UShort.toUByte|toUByte(){}[0]
    final inline fun toUInt(): kotlin/UInt // kotlin/UShort.toUInt|toUInt(){}[0]
    final inline fun toULong(): kotlin/ULong // kotlin/UShort.toULong|toULong(){}[0]
    final inline fun toUShort(): kotlin/UShort // kotlin/UShort.toUShort|toUShort(){}[0]
    final inline fun xor(kotlin/UShort): kotlin/UShort // kotlin/UShort.xor|xor(kotlin.UShort){}[0]

    final object Companion { // kotlin/UShort.Companion|null[0]
        final const val MAX_VALUE // kotlin/UShort.Companion.MAX_VALUE|{}MAX_VALUE[0]
            final fun <get-MAX_VALUE>(): kotlin/UShort // kotlin/UShort.Companion.MAX_VALUE.<get-MAX_VALUE>|<get-MAX_VALUE>(){}[0]
        final const val MIN_VALUE // kotlin/UShort.Companion.MIN_VALUE|{}MIN_VALUE[0]
            final fun <get-MIN_VALUE>(): kotlin/UShort // kotlin/UShort.Companion.MIN_VALUE.<get-MIN_VALUE>|<get-MIN_VALUE>(){}[0]
        final const val SIZE_BITS // kotlin/UShort.Companion.SIZE_BITS|{}SIZE_BITS[0]
            final fun <get-SIZE_BITS>(): kotlin/Int // kotlin/UShort.Companion.SIZE_BITS.<get-SIZE_BITS>|<get-SIZE_BITS>(){}[0]
        final const val SIZE_BYTES // kotlin/UShort.Companion.SIZE_BYTES|{}SIZE_BYTES[0]
            final fun <get-SIZE_BYTES>(): kotlin/Int // kotlin/UShort.Companion.SIZE_BYTES.<get-SIZE_BYTES>|<get-SIZE_BYTES>(){}[0]
    }
}

final value class kotlin/UShortArray : kotlin.collections/Collection<kotlin/UShort> { // kotlin/UShortArray|null[0]
    constructor <init>(kotlin/Int) // kotlin/UShortArray.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/ShortArray) // kotlin/UShortArray.<init>|<init>(kotlin.ShortArray){}[0]

    final val size // kotlin/UShortArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin/UShortArray.size.<get-size>|<get-size>(){}[0]
    final val storage // kotlin/UShortArray.storage|{}storage[0]
        final fun <get-storage>(): kotlin/ShortArray // kotlin/UShortArray.storage.<get-storage>|<get-storage>(){}[0]

    final fun contains(kotlin/UShort): kotlin/Boolean // kotlin/UShortArray.contains|contains(kotlin.UShort){}[0]
    final fun containsAll(kotlin.collections/Collection<kotlin/UShort>): kotlin/Boolean // kotlin/UShortArray.containsAll|containsAll(kotlin.collections.Collection<kotlin.UShort>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin/UShortArray.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): kotlin/UShort // kotlin/UShortArray.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlin/UShortArray.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin/UShortArray.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotlin/UShort> // kotlin/UShortArray.iterator|iterator(){}[0]
    final fun set(kotlin/Int, kotlin/UShort) // kotlin/UShortArray.set|set(kotlin.Int;kotlin.UShort){}[0]
    final fun toString(): kotlin/String // kotlin/UShortArray.toString|toString(){}[0]
}

open class kotlin.coroutines.cancellation/CancellationException : kotlin/IllegalStateException { // kotlin.coroutines.cancellation/CancellationException|null[0]
    constructor <init>() // kotlin.coroutines.cancellation/CancellationException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin.coroutines.cancellation/CancellationException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin.coroutines.cancellation/CancellationException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin.coroutines.cancellation/CancellationException.<init>|<init>(kotlin.Throwable?){}[0]
}

open class kotlin.io.encoding/Base64 { // kotlin.io.encoding/Base64|null[0]
    final fun <#A1: kotlin.text/Appendable> encodeToAppendable(kotlin/ByteArray, #A1, kotlin/Int = ..., kotlin/Int = ...): #A1 // kotlin.io.encoding/Base64.encodeToAppendable|encodeToAppendable(kotlin.ByteArray;0:0;kotlin.Int;kotlin.Int){0§<kotlin.text.Appendable>}[0]
    final fun decode(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // kotlin.io.encoding/Base64.decode|decode(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    final fun decode(kotlin/CharSequence, kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // kotlin.io.encoding/Base64.decode|decode(kotlin.CharSequence;kotlin.Int;kotlin.Int){}[0]
    final fun decodeIntoByteArray(kotlin/ByteArray, kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/Int // kotlin.io.encoding/Base64.decodeIntoByteArray|decodeIntoByteArray(kotlin.ByteArray;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun decodeIntoByteArray(kotlin/CharSequence, kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/Int // kotlin.io.encoding/Base64.decodeIntoByteArray|decodeIntoByteArray(kotlin.CharSequence;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun encode(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/String // kotlin.io.encoding/Base64.encode|encode(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    final fun encodeIntoByteArray(kotlin/ByteArray, kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/Int // kotlin.io.encoding/Base64.encodeIntoByteArray|encodeIntoByteArray(kotlin.ByteArray;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun encodeToByteArray(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // kotlin.io.encoding/Base64.encodeToByteArray|encodeToByteArray(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    final fun withPadding(kotlin.io.encoding/Base64.PaddingOption): kotlin.io.encoding/Base64 // kotlin.io.encoding/Base64.withPadding|withPadding(kotlin.io.encoding.Base64.PaddingOption){}[0]

    final enum class PaddingOption : kotlin/Enum<kotlin.io.encoding/Base64.PaddingOption> { // kotlin.io.encoding/Base64.PaddingOption|null[0]
        enum entry ABSENT // kotlin.io.encoding/Base64.PaddingOption.ABSENT|null[0]
        enum entry ABSENT_OPTIONAL // kotlin.io.encoding/Base64.PaddingOption.ABSENT_OPTIONAL|null[0]
        enum entry PRESENT // kotlin.io.encoding/Base64.PaddingOption.PRESENT|null[0]
        enum entry PRESENT_OPTIONAL // kotlin.io.encoding/Base64.PaddingOption.PRESENT_OPTIONAL|null[0]

        final val entries // kotlin.io.encoding/Base64.PaddingOption.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.io.encoding/Base64.PaddingOption> // kotlin.io.encoding/Base64.PaddingOption.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): kotlin.io.encoding/Base64.PaddingOption // kotlin.io.encoding/Base64.PaddingOption.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<kotlin.io.encoding/Base64.PaddingOption> // kotlin.io.encoding/Base64.PaddingOption.values|values#static(){}[0]
    }

    final object Default : kotlin.io.encoding/Base64 { // kotlin.io.encoding/Base64.Default|null[0]
        final val Mime // kotlin.io.encoding/Base64.Default.Mime|{}Mime[0]
            final fun <get-Mime>(): kotlin.io.encoding/Base64 // kotlin.io.encoding/Base64.Default.Mime.<get-Mime>|<get-Mime>(){}[0]
        final val UrlSafe // kotlin.io.encoding/Base64.Default.UrlSafe|{}UrlSafe[0]
            final fun <get-UrlSafe>(): kotlin.io.encoding/Base64 // kotlin.io.encoding/Base64.Default.UrlSafe.<get-UrlSafe>|<get-UrlSafe>(){}[0]
    }
}

open class kotlin.ranges/CharProgression : kotlin.collections/Iterable<kotlin/Char> { // kotlin.ranges/CharProgression|null[0]
    final val first // kotlin.ranges/CharProgression.first|{}first[0]
        final fun <get-first>(): kotlin/Char // kotlin.ranges/CharProgression.first.<get-first>|<get-first>(){}[0]
    final val last // kotlin.ranges/CharProgression.last|{}last[0]
        final fun <get-last>(): kotlin/Char // kotlin.ranges/CharProgression.last.<get-last>|<get-last>(){}[0]
    final val step // kotlin.ranges/CharProgression.step|{}step[0]
        final fun <get-step>(): kotlin/Int // kotlin.ranges/CharProgression.step.<get-step>|<get-step>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/CharProgression.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.ranges/CharProgression.hashCode|hashCode(){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/CharProgression.isEmpty|isEmpty(){}[0]
    open fun iterator(): kotlin.collections/CharIterator // kotlin.ranges/CharProgression.iterator|iterator(){}[0]
    open fun toString(): kotlin/String // kotlin.ranges/CharProgression.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/CharProgression.Companion|null[0]
        final fun fromClosedRange(kotlin/Char, kotlin/Char, kotlin/Int): kotlin.ranges/CharProgression // kotlin.ranges/CharProgression.Companion.fromClosedRange|fromClosedRange(kotlin.Char;kotlin.Char;kotlin.Int){}[0]
    }
}

open class kotlin.ranges/IntProgression : kotlin.collections/Iterable<kotlin/Int> { // kotlin.ranges/IntProgression|null[0]
    final val first // kotlin.ranges/IntProgression.first|{}first[0]
        final fun <get-first>(): kotlin/Int // kotlin.ranges/IntProgression.first.<get-first>|<get-first>(){}[0]
    final val last // kotlin.ranges/IntProgression.last|{}last[0]
        final fun <get-last>(): kotlin/Int // kotlin.ranges/IntProgression.last.<get-last>|<get-last>(){}[0]
    final val step // kotlin.ranges/IntProgression.step|{}step[0]
        final fun <get-step>(): kotlin/Int // kotlin.ranges/IntProgression.step.<get-step>|<get-step>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/IntProgression.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.ranges/IntProgression.hashCode|hashCode(){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/IntProgression.isEmpty|isEmpty(){}[0]
    open fun iterator(): kotlin.collections/IntIterator // kotlin.ranges/IntProgression.iterator|iterator(){}[0]
    open fun toString(): kotlin/String // kotlin.ranges/IntProgression.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/IntProgression.Companion|null[0]
        final fun fromClosedRange(kotlin/Int, kotlin/Int, kotlin/Int): kotlin.ranges/IntProgression // kotlin.ranges/IntProgression.Companion.fromClosedRange|fromClosedRange(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    }
}

open class kotlin.ranges/LongProgression : kotlin.collections/Iterable<kotlin/Long> { // kotlin.ranges/LongProgression|null[0]
    final val first // kotlin.ranges/LongProgression.first|{}first[0]
        final fun <get-first>(): kotlin/Long // kotlin.ranges/LongProgression.first.<get-first>|<get-first>(){}[0]
    final val last // kotlin.ranges/LongProgression.last|{}last[0]
        final fun <get-last>(): kotlin/Long // kotlin.ranges/LongProgression.last.<get-last>|<get-last>(){}[0]
    final val step // kotlin.ranges/LongProgression.step|{}step[0]
        final fun <get-step>(): kotlin/Long // kotlin.ranges/LongProgression.step.<get-step>|<get-step>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/LongProgression.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.ranges/LongProgression.hashCode|hashCode(){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/LongProgression.isEmpty|isEmpty(){}[0]
    open fun iterator(): kotlin.collections/LongIterator // kotlin.ranges/LongProgression.iterator|iterator(){}[0]
    open fun toString(): kotlin/String // kotlin.ranges/LongProgression.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/LongProgression.Companion|null[0]
        final fun fromClosedRange(kotlin/Long, kotlin/Long, kotlin/Long): kotlin.ranges/LongProgression // kotlin.ranges/LongProgression.Companion.fromClosedRange|fromClosedRange(kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    }
}

open class kotlin.ranges/UIntProgression : kotlin.collections/Iterable<kotlin/UInt> { // kotlin.ranges/UIntProgression|null[0]
    final val first // kotlin.ranges/UIntProgression.first|{}first[0]
        final fun <get-first>(): kotlin/UInt // kotlin.ranges/UIntProgression.first.<get-first>|<get-first>(){}[0]
    final val last // kotlin.ranges/UIntProgression.last|{}last[0]
        final fun <get-last>(): kotlin/UInt // kotlin.ranges/UIntProgression.last.<get-last>|<get-last>(){}[0]
    final val step // kotlin.ranges/UIntProgression.step|{}step[0]
        final fun <get-step>(): kotlin/Int // kotlin.ranges/UIntProgression.step.<get-step>|<get-step>(){}[0]

    final fun iterator(): kotlin.collections/Iterator<kotlin/UInt> // kotlin.ranges/UIntProgression.iterator|iterator(){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/UIntProgression.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.ranges/UIntProgression.hashCode|hashCode(){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/UIntProgression.isEmpty|isEmpty(){}[0]
    open fun toString(): kotlin/String // kotlin.ranges/UIntProgression.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/UIntProgression.Companion|null[0]
        final fun fromClosedRange(kotlin/UInt, kotlin/UInt, kotlin/Int): kotlin.ranges/UIntProgression // kotlin.ranges/UIntProgression.Companion.fromClosedRange|fromClosedRange(kotlin.UInt;kotlin.UInt;kotlin.Int){}[0]
    }
}

open class kotlin.ranges/ULongProgression : kotlin.collections/Iterable<kotlin/ULong> { // kotlin.ranges/ULongProgression|null[0]
    final val first // kotlin.ranges/ULongProgression.first|{}first[0]
        final fun <get-first>(): kotlin/ULong // kotlin.ranges/ULongProgression.first.<get-first>|<get-first>(){}[0]
    final val last // kotlin.ranges/ULongProgression.last|{}last[0]
        final fun <get-last>(): kotlin/ULong // kotlin.ranges/ULongProgression.last.<get-last>|<get-last>(){}[0]
    final val step // kotlin.ranges/ULongProgression.step|{}step[0]
        final fun <get-step>(): kotlin/Long // kotlin.ranges/ULongProgression.step.<get-step>|<get-step>(){}[0]

    final fun iterator(): kotlin.collections/Iterator<kotlin/ULong> // kotlin.ranges/ULongProgression.iterator|iterator(){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin.ranges/ULongProgression.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin.ranges/ULongProgression.hashCode|hashCode(){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.ranges/ULongProgression.isEmpty|isEmpty(){}[0]
    open fun toString(): kotlin/String // kotlin.ranges/ULongProgression.toString|toString(){}[0]

    final object Companion { // kotlin.ranges/ULongProgression.Companion|null[0]
        final fun fromClosedRange(kotlin/ULong, kotlin/ULong, kotlin/Long): kotlin.ranges/ULongProgression // kotlin.ranges/ULongProgression.Companion.fromClosedRange|fromClosedRange(kotlin.ULong;kotlin.ULong;kotlin.Long){}[0]
    }
}

open class kotlin.text/CharacterCodingException : kotlin/Exception { // kotlin.text/CharacterCodingException|null[0]
    constructor <init>() // kotlin.text/CharacterCodingException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin.text/CharacterCodingException.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/Any { // kotlin/Any|null[0]
    constructor <init>() // kotlin/Any.<init>|<init>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotlin/Any.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlin/Any.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // kotlin/Any.toString|toString(){}[0]
}

open class kotlin/ArithmeticException : kotlin/RuntimeException { // kotlin/ArithmeticException|null[0]
    constructor <init>() // kotlin/ArithmeticException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/ArithmeticException.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/AssertionError : kotlin/Error { // kotlin/AssertionError|null[0]
    constructor <init>() // kotlin/AssertionError.<init>|<init>(){}[0]
    constructor <init>(kotlin/Any?) // kotlin/AssertionError.<init>|<init>(kotlin.Any?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/AssertionError.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]

    // Targets: [native]
    constructor <init>(kotlin/Throwable?) // kotlin/AssertionError.<init>|<init>(kotlin.Throwable?){}[0]

    // Targets: [js, wasmJs, wasmWasi]
    constructor <init>(kotlin/String?) // kotlin/AssertionError.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/ClassCastException : kotlin/RuntimeException { // kotlin/ClassCastException|null[0]
    constructor <init>() // kotlin/ClassCastException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/ClassCastException.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/ConcurrentModificationException : kotlin/RuntimeException { // kotlin/ConcurrentModificationException|null[0]
    constructor <init>() // kotlin/ConcurrentModificationException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/ConcurrentModificationException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/ConcurrentModificationException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/ConcurrentModificationException.<init>|<init>(kotlin.Throwable?){}[0]
}

open class kotlin/Error : kotlin/Throwable { // kotlin/Error|null[0]
    constructor <init>() // kotlin/Error.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/Error.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/Error.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/Error.<init>|<init>(kotlin.Throwable?){}[0]
}

open class kotlin/Exception : kotlin/Throwable { // kotlin/Exception|null[0]
    constructor <init>() // kotlin/Exception.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/Exception.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/Exception.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/Exception.<init>|<init>(kotlin.Throwable?){}[0]
}

open class kotlin/IllegalArgumentException : kotlin/RuntimeException { // kotlin/IllegalArgumentException|null[0]
    constructor <init>() // kotlin/IllegalArgumentException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/IllegalArgumentException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/IllegalArgumentException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/IllegalArgumentException.<init>|<init>(kotlin.Throwable?){}[0]
}

open class kotlin/IllegalStateException : kotlin/RuntimeException { // kotlin/IllegalStateException|null[0]
    constructor <init>() // kotlin/IllegalStateException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/IllegalStateException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/IllegalStateException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/IllegalStateException.<init>|<init>(kotlin.Throwable?){}[0]
}

open class kotlin/IndexOutOfBoundsException : kotlin/RuntimeException { // kotlin/IndexOutOfBoundsException|null[0]
    constructor <init>() // kotlin/IndexOutOfBoundsException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/IndexOutOfBoundsException.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/NoSuchElementException : kotlin/RuntimeException { // kotlin/NoSuchElementException|null[0]
    constructor <init>() // kotlin/NoSuchElementException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/NoSuchElementException.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/NullPointerException : kotlin/RuntimeException { // kotlin/NullPointerException|null[0]
    constructor <init>() // kotlin/NullPointerException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/NullPointerException.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/NumberFormatException : kotlin/IllegalArgumentException { // kotlin/NumberFormatException|null[0]
    constructor <init>() // kotlin/NumberFormatException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/NumberFormatException.<init>|<init>(kotlin.String?){}[0]
}

open class kotlin/RuntimeException : kotlin/Exception { // kotlin/RuntimeException|null[0]
    constructor <init>() // kotlin/RuntimeException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/RuntimeException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/RuntimeException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/RuntimeException.<init>|<init>(kotlin.Throwable?){}[0]
}

open class kotlin/Throwable { // kotlin/Throwable|null[0]
    constructor <init>() // kotlin/Throwable.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/Throwable.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/Throwable.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/Throwable.<init>|<init>(kotlin.Throwable?){}[0]

    open val cause // kotlin/Throwable.cause|{}cause[0]
        open fun <get-cause>(): kotlin/Throwable? // kotlin/Throwable.cause.<get-cause>|<get-cause>(){}[0]
    open val message // kotlin/Throwable.message|{}message[0]
        open fun <get-message>(): kotlin/String? // kotlin/Throwable.message.<get-message>|<get-message>(){}[0]

    open fun toString(): kotlin/String // kotlin/Throwable.toString|toString(){}[0]

    // Targets: [native]
    final fun getStackTrace(): kotlin/Array<kotlin/String> // kotlin/Throwable.getStackTrace|getStackTrace(){}[0]

    // Targets: [native]
    final fun printStackTrace() // kotlin/Throwable.printStackTrace|printStackTrace(){}[0]
}

open class kotlin/UnsupportedOperationException : kotlin/RuntimeException { // kotlin/UnsupportedOperationException|null[0]
    constructor <init>() // kotlin/UnsupportedOperationException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/UnsupportedOperationException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/UnsupportedOperationException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/UnsupportedOperationException.<init>|<init>(kotlin.Throwable?){}[0]
}

sealed class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin/DeepRecursiveScope { // kotlin/DeepRecursiveScope|null[0]
    abstract suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin/DeepRecursiveFunction<#A1, #B1>).callRecursive(#A1): #B1 // kotlin/DeepRecursiveScope.callRecursive|callRecursive@kotlin.DeepRecursiveFunction<0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    abstract suspend fun callRecursive(#A): #B // kotlin/DeepRecursiveScope.callRecursive|callRecursive(1:0){}[0]
    final fun (kotlin/DeepRecursiveFunction<*, *>).invoke(kotlin/Any?): kotlin/Nothing // kotlin/DeepRecursiveScope.invoke|invoke@kotlin.DeepRecursiveFunction<*,*>(kotlin.Any?){}[0]
}

final object kotlin.coroutines/EmptyCoroutineContext : kotlin.coroutines/CoroutineContext, kotlin.io/Serializable { // kotlin.coroutines/EmptyCoroutineContext|null[0]
    final fun <#A1: kotlin.coroutines/CoroutineContext.Element> get(kotlin.coroutines/CoroutineContext.Key<#A1>): #A1? // kotlin.coroutines/EmptyCoroutineContext.get|get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}[0]
    final fun <#A1: kotlin/Any?> fold(#A1, kotlin/Function2<#A1, kotlin.coroutines/CoroutineContext.Element, #A1>): #A1 // kotlin.coroutines/EmptyCoroutineContext.fold|fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}[0]
    final fun hashCode(): kotlin/Int // kotlin.coroutines/EmptyCoroutineContext.hashCode|hashCode(){}[0]
    final fun minusKey(kotlin.coroutines/CoroutineContext.Key<*>): kotlin.coroutines/CoroutineContext // kotlin.coroutines/EmptyCoroutineContext.minusKey|minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}[0]
    final fun plus(kotlin.coroutines/CoroutineContext): kotlin.coroutines/CoroutineContext // kotlin.coroutines/EmptyCoroutineContext.plus|plus(kotlin.coroutines.CoroutineContext){}[0]
    final fun toString(): kotlin/String // kotlin.coroutines/EmptyCoroutineContext.toString|toString(){}[0]
}

final object kotlin.properties/Delegates { // kotlin.properties/Delegates|null[0]
    final fun <#A1: kotlin/Any> notNull(): kotlin.properties/ReadWriteProperty<kotlin/Any?, #A1> // kotlin.properties/Delegates.notNull|notNull(){0§<kotlin.Any>}[0]
    final inline fun <#A1: kotlin/Any?> observable(#A1, crossinline kotlin/Function3<kotlin.reflect/KProperty<*>, #A1, #A1, kotlin/Unit>): kotlin.properties/ReadWriteProperty<kotlin/Any?, #A1> // kotlin.properties/Delegates.observable|observable(0:0;kotlin.Function3<kotlin.reflect.KProperty<*>,0:0,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> vetoable(#A1, crossinline kotlin/Function3<kotlin.reflect/KProperty<*>, #A1, #A1, kotlin/Boolean>): kotlin.properties/ReadWriteProperty<kotlin/Any?, #A1> // kotlin.properties/Delegates.vetoable|vetoable(0:0;kotlin.Function3<kotlin.reflect.KProperty<*>,0:0,0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
}

final object kotlin.text/Typography { // kotlin.text/Typography|null[0]
    final const val almostEqual // kotlin.text/Typography.almostEqual|{}almostEqual[0]
        final fun <get-almostEqual>(): kotlin/Char // kotlin.text/Typography.almostEqual.<get-almostEqual>|<get-almostEqual>(){}[0]
    final const val amp // kotlin.text/Typography.amp|{}amp[0]
        final fun <get-amp>(): kotlin/Char // kotlin.text/Typography.amp.<get-amp>|<get-amp>(){}[0]
    final const val bullet // kotlin.text/Typography.bullet|{}bullet[0]
        final fun <get-bullet>(): kotlin/Char // kotlin.text/Typography.bullet.<get-bullet>|<get-bullet>(){}[0]
    final const val cent // kotlin.text/Typography.cent|{}cent[0]
        final fun <get-cent>(): kotlin/Char // kotlin.text/Typography.cent.<get-cent>|<get-cent>(){}[0]
    final const val copyright // kotlin.text/Typography.copyright|{}copyright[0]
        final fun <get-copyright>(): kotlin/Char // kotlin.text/Typography.copyright.<get-copyright>|<get-copyright>(){}[0]
    final const val dagger // kotlin.text/Typography.dagger|{}dagger[0]
        final fun <get-dagger>(): kotlin/Char // kotlin.text/Typography.dagger.<get-dagger>|<get-dagger>(){}[0]
    final const val degree // kotlin.text/Typography.degree|{}degree[0]
        final fun <get-degree>(): kotlin/Char // kotlin.text/Typography.degree.<get-degree>|<get-degree>(){}[0]
    final const val dollar // kotlin.text/Typography.dollar|{}dollar[0]
        final fun <get-dollar>(): kotlin/Char // kotlin.text/Typography.dollar.<get-dollar>|<get-dollar>(){}[0]
    final const val doubleDagger // kotlin.text/Typography.doubleDagger|{}doubleDagger[0]
        final fun <get-doubleDagger>(): kotlin/Char // kotlin.text/Typography.doubleDagger.<get-doubleDagger>|<get-doubleDagger>(){}[0]
    final const val doublePrime // kotlin.text/Typography.doublePrime|{}doublePrime[0]
        final fun <get-doublePrime>(): kotlin/Char // kotlin.text/Typography.doublePrime.<get-doublePrime>|<get-doublePrime>(){}[0]
    final const val ellipsis // kotlin.text/Typography.ellipsis|{}ellipsis[0]
        final fun <get-ellipsis>(): kotlin/Char // kotlin.text/Typography.ellipsis.<get-ellipsis>|<get-ellipsis>(){}[0]
    final const val euro // kotlin.text/Typography.euro|{}euro[0]
        final fun <get-euro>(): kotlin/Char // kotlin.text/Typography.euro.<get-euro>|<get-euro>(){}[0]
    final const val greater // kotlin.text/Typography.greater|{}greater[0]
        final fun <get-greater>(): kotlin/Char // kotlin.text/Typography.greater.<get-greater>|<get-greater>(){}[0]
    final const val greaterOrEqual // kotlin.text/Typography.greaterOrEqual|{}greaterOrEqual[0]
        final fun <get-greaterOrEqual>(): kotlin/Char // kotlin.text/Typography.greaterOrEqual.<get-greaterOrEqual>|<get-greaterOrEqual>(){}[0]
    final const val half // kotlin.text/Typography.half|{}half[0]
        final fun <get-half>(): kotlin/Char // kotlin.text/Typography.half.<get-half>|<get-half>(){}[0]
    final const val leftDoubleQuote // kotlin.text/Typography.leftDoubleQuote|{}leftDoubleQuote[0]
        final fun <get-leftDoubleQuote>(): kotlin/Char // kotlin.text/Typography.leftDoubleQuote.<get-leftDoubleQuote>|<get-leftDoubleQuote>(){}[0]
    final const val leftGuillemet // kotlin.text/Typography.leftGuillemet|{}leftGuillemet[0]
        final fun <get-leftGuillemet>(): kotlin/Char // kotlin.text/Typography.leftGuillemet.<get-leftGuillemet>|<get-leftGuillemet>(){}[0]
    final const val leftGuillemete // kotlin.text/Typography.leftGuillemete|{}leftGuillemete[0]
        final fun <get-leftGuillemete>(): kotlin/Char // kotlin.text/Typography.leftGuillemete.<get-leftGuillemete>|<get-leftGuillemete>(){}[0]
    final const val leftSingleQuote // kotlin.text/Typography.leftSingleQuote|{}leftSingleQuote[0]
        final fun <get-leftSingleQuote>(): kotlin/Char // kotlin.text/Typography.leftSingleQuote.<get-leftSingleQuote>|<get-leftSingleQuote>(){}[0]
    final const val less // kotlin.text/Typography.less|{}less[0]
        final fun <get-less>(): kotlin/Char // kotlin.text/Typography.less.<get-less>|<get-less>(){}[0]
    final const val lessOrEqual // kotlin.text/Typography.lessOrEqual|{}lessOrEqual[0]
        final fun <get-lessOrEqual>(): kotlin/Char // kotlin.text/Typography.lessOrEqual.<get-lessOrEqual>|<get-lessOrEqual>(){}[0]
    final const val lowDoubleQuote // kotlin.text/Typography.lowDoubleQuote|{}lowDoubleQuote[0]
        final fun <get-lowDoubleQuote>(): kotlin/Char // kotlin.text/Typography.lowDoubleQuote.<get-lowDoubleQuote>|<get-lowDoubleQuote>(){}[0]
    final const val lowSingleQuote // kotlin.text/Typography.lowSingleQuote|{}lowSingleQuote[0]
        final fun <get-lowSingleQuote>(): kotlin/Char // kotlin.text/Typography.lowSingleQuote.<get-lowSingleQuote>|<get-lowSingleQuote>(){}[0]
    final const val mdash // kotlin.text/Typography.mdash|{}mdash[0]
        final fun <get-mdash>(): kotlin/Char // kotlin.text/Typography.mdash.<get-mdash>|<get-mdash>(){}[0]
    final const val middleDot // kotlin.text/Typography.middleDot|{}middleDot[0]
        final fun <get-middleDot>(): kotlin/Char // kotlin.text/Typography.middleDot.<get-middleDot>|<get-middleDot>(){}[0]
    final const val nbsp // kotlin.text/Typography.nbsp|{}nbsp[0]
        final fun <get-nbsp>(): kotlin/Char // kotlin.text/Typography.nbsp.<get-nbsp>|<get-nbsp>(){}[0]
    final const val ndash // kotlin.text/Typography.ndash|{}ndash[0]
        final fun <get-ndash>(): kotlin/Char // kotlin.text/Typography.ndash.<get-ndash>|<get-ndash>(){}[0]
    final const val notEqual // kotlin.text/Typography.notEqual|{}notEqual[0]
        final fun <get-notEqual>(): kotlin/Char // kotlin.text/Typography.notEqual.<get-notEqual>|<get-notEqual>(){}[0]
    final const val paragraph // kotlin.text/Typography.paragraph|{}paragraph[0]
        final fun <get-paragraph>(): kotlin/Char // kotlin.text/Typography.paragraph.<get-paragraph>|<get-paragraph>(){}[0]
    final const val plusMinus // kotlin.text/Typography.plusMinus|{}plusMinus[0]
        final fun <get-plusMinus>(): kotlin/Char // kotlin.text/Typography.plusMinus.<get-plusMinus>|<get-plusMinus>(){}[0]
    final const val pound // kotlin.text/Typography.pound|{}pound[0]
        final fun <get-pound>(): kotlin/Char // kotlin.text/Typography.pound.<get-pound>|<get-pound>(){}[0]
    final const val prime // kotlin.text/Typography.prime|{}prime[0]
        final fun <get-prime>(): kotlin/Char // kotlin.text/Typography.prime.<get-prime>|<get-prime>(){}[0]
    final const val quote // kotlin.text/Typography.quote|{}quote[0]
        final fun <get-quote>(): kotlin/Char // kotlin.text/Typography.quote.<get-quote>|<get-quote>(){}[0]
    final const val registered // kotlin.text/Typography.registered|{}registered[0]
        final fun <get-registered>(): kotlin/Char // kotlin.text/Typography.registered.<get-registered>|<get-registered>(){}[0]
    final const val rightDoubleQuote // kotlin.text/Typography.rightDoubleQuote|{}rightDoubleQuote[0]
        final fun <get-rightDoubleQuote>(): kotlin/Char // kotlin.text/Typography.rightDoubleQuote.<get-rightDoubleQuote>|<get-rightDoubleQuote>(){}[0]
    final const val rightGuillemet // kotlin.text/Typography.rightGuillemet|{}rightGuillemet[0]
        final fun <get-rightGuillemet>(): kotlin/Char // kotlin.text/Typography.rightGuillemet.<get-rightGuillemet>|<get-rightGuillemet>(){}[0]
    final const val rightGuillemete // kotlin.text/Typography.rightGuillemete|{}rightGuillemete[0]
        final fun <get-rightGuillemete>(): kotlin/Char // kotlin.text/Typography.rightGuillemete.<get-rightGuillemete>|<get-rightGuillemete>(){}[0]
    final const val rightSingleQuote // kotlin.text/Typography.rightSingleQuote|{}rightSingleQuote[0]
        final fun <get-rightSingleQuote>(): kotlin/Char // kotlin.text/Typography.rightSingleQuote.<get-rightSingleQuote>|<get-rightSingleQuote>(){}[0]
    final const val section // kotlin.text/Typography.section|{}section[0]
        final fun <get-section>(): kotlin/Char // kotlin.text/Typography.section.<get-section>|<get-section>(){}[0]
    final const val times // kotlin.text/Typography.times|{}times[0]
        final fun <get-times>(): kotlin/Char // kotlin.text/Typography.times.<get-times>|<get-times>(){}[0]
    final const val tm // kotlin.text/Typography.tm|{}tm[0]
        final fun <get-tm>(): kotlin/Char // kotlin.text/Typography.tm.<get-tm>|<get-tm>(){}[0]
}

final object kotlin/Unit { // kotlin/Unit|null[0]
    final fun toString(): kotlin/String // kotlin/Unit.toString|toString(){}[0]
}

final const val kotlin.math/E // kotlin.math/E|{}E[0]
    final fun <get-E>(): kotlin/Double // kotlin.math/E.<get-E>|<get-E>(){}[0]
final const val kotlin.math/PI // kotlin.math/PI|{}PI[0]
    final fun <get-PI>(): kotlin/Double // kotlin.math/PI.<get-PI>|<get-PI>(){}[0]

final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.Array<out|0:0>{0§<kotlin.Any?>}indices[0]
    final fun <#A1: kotlin/Any?> (kotlin/Array<out #A1>).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.BooleanArray{}indices[0]
    final fun (kotlin/BooleanArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.BooleanArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.ByteArray{}indices[0]
    final fun (kotlin/ByteArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.ByteArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.CharArray{}indices[0]
    final fun (kotlin/CharArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.CharArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.DoubleArray{}indices[0]
    final fun (kotlin/DoubleArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.DoubleArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.FloatArray{}indices[0]
    final fun (kotlin/FloatArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.FloatArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.IntArray{}indices[0]
    final fun (kotlin/IntArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.IntArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.LongArray{}indices[0]
    final fun (kotlin/LongArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.LongArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.ShortArray{}indices[0]
    final fun (kotlin/ShortArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.ShortArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.UByteArray{}indices[0]
    final inline fun (kotlin/UByteArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.UByteArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.UIntArray{}indices[0]
    final inline fun (kotlin/UIntArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.UIntArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.ULongArray{}indices[0]
    final inline fun (kotlin/ULongArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.ULongArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.UShortArray{}indices[0]
    final inline fun (kotlin/UShortArray).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.UShortArray(){}[0]
final val kotlin.collections/indices // kotlin.collections/indices|@kotlin.collections.Collection<*>{}indices[0]
    final fun (kotlin.collections/Collection<*>).<get-indices>(): kotlin.ranges/IntRange // kotlin.collections/indices.<get-indices>|<get-indices>@kotlin.collections.Collection<*>(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.Array<out|0:0>{0§<kotlin.Any?>}lastIndex[0]
    final fun <#A1: kotlin/Any?> (kotlin/Array<out #A1>).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.BooleanArray{}lastIndex[0]
    final fun (kotlin/BooleanArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.BooleanArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.ByteArray{}lastIndex[0]
    final fun (kotlin/ByteArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.ByteArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.CharArray{}lastIndex[0]
    final fun (kotlin/CharArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.CharArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.DoubleArray{}lastIndex[0]
    final fun (kotlin/DoubleArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.DoubleArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.FloatArray{}lastIndex[0]
    final fun (kotlin/FloatArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.FloatArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.IntArray{}lastIndex[0]
    final fun (kotlin/IntArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.IntArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.LongArray{}lastIndex[0]
    final fun (kotlin/LongArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.LongArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.ShortArray{}lastIndex[0]
    final fun (kotlin/ShortArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.ShortArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.UByteArray{}lastIndex[0]
    final inline fun (kotlin/UByteArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.UByteArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.UIntArray{}lastIndex[0]
    final inline fun (kotlin/UIntArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.UIntArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.ULongArray{}lastIndex[0]
    final inline fun (kotlin/ULongArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.ULongArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.UShortArray{}lastIndex[0]
    final inline fun (kotlin/UShortArray).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.UShortArray(){}[0]
final val kotlin.collections/lastIndex // kotlin.collections/lastIndex|@kotlin.collections.List<0:0>{0§<kotlin.Any?>}lastIndex[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/List<#A1>).<get-lastIndex>(): kotlin/Int // kotlin.collections/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final val kotlin.coroutines.intrinsics/COROUTINE_SUSPENDED // kotlin.coroutines.intrinsics/COROUTINE_SUSPENDED|{}COROUTINE_SUSPENDED[0]
    final fun <get-COROUTINE_SUSPENDED>(): kotlin/Any // kotlin.coroutines.intrinsics/COROUTINE_SUSPENDED.<get-COROUTINE_SUSPENDED>|<get-COROUTINE_SUSPENDED>(){}[0]
final val kotlin.coroutines/coroutineContext // kotlin.coroutines/coroutineContext|{}coroutineContext[0]
    final inline fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // kotlin.coroutines/coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
final val kotlin.math/absoluteValue // kotlin.math/absoluteValue|@kotlin.Double{}absoluteValue[0]
    // Targets: [native, wasmJs, wasmWasi]
    final fun (kotlin/Double).<get-absoluteValue>(): kotlin/Double // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Double(){}[0]

    // Targets: [js]
    final inline fun (kotlin/Double).<get-absoluteValue>(): kotlin/Double // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Double(){}[0]
final val kotlin.math/absoluteValue // kotlin.math/absoluteValue|@kotlin.Float{}absoluteValue[0]
    // Targets: [native, wasmJs, wasmWasi]
    final fun (kotlin/Float).<get-absoluteValue>(): kotlin/Float // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Float(){}[0]

    // Targets: [js]
    final inline fun (kotlin/Float).<get-absoluteValue>(): kotlin/Float // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Float(){}[0]
final val kotlin.math/absoluteValue // kotlin.math/absoluteValue|@kotlin.Int{}absoluteValue[0]
    // Targets: [native, wasmJs, wasmWasi]
    final fun (kotlin/Int).<get-absoluteValue>(): kotlin/Int // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Int(){}[0]

    // Targets: [js]
    final inline fun (kotlin/Int).<get-absoluteValue>(): kotlin/Int // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Int(){}[0]
final val kotlin.math/absoluteValue // kotlin.math/absoluteValue|@kotlin.Long{}absoluteValue[0]
    // Targets: [native, wasmJs, wasmWasi]
    final fun (kotlin/Long).<get-absoluteValue>(): kotlin/Long // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Long(){}[0]

    // Targets: [js]
    final inline fun (kotlin/Long).<get-absoluteValue>(): kotlin/Long // kotlin.math/absoluteValue.<get-absoluteValue>|<get-absoluteValue>@kotlin.Long(){}[0]
final val kotlin.math/sign // kotlin.math/sign|@kotlin.Double{}sign[0]
    // Targets: [native, wasmJs, wasmWasi]
    final fun (kotlin/Double).<get-sign>(): kotlin/Double // kotlin.math/sign.<get-sign>|<get-sign>@kotlin.Double(){}[0]

    // Targets: [js]
    final inline fun (kotlin/Double).<get-sign>(): kotlin/Double // kotlin.math/sign.<get-sign>|<get-sign>@kotlin.Double(){}[0]
final val kotlin.math/sign // kotlin.math/sign|@kotlin.Float{}sign[0]
    // Targets: [native, wasmJs, wasmWasi]
    final fun (kotlin/Float).<get-sign>(): kotlin/Float // kotlin.math/sign.<get-sign>|<get-sign>@kotlin.Float(){}[0]

    // Targets: [js]
    final inline fun (kotlin/Float).<get-sign>(): kotlin/Float // kotlin.math/sign.<get-sign>|<get-sign>@kotlin.Float(){}[0]
final val kotlin.math/sign // kotlin.math/sign|@kotlin.Int{}sign[0]
    final fun (kotlin/Int).<get-sign>(): kotlin/Int // kotlin.math/sign.<get-sign>|<get-sign>@kotlin.Int(){}[0]
final val kotlin.math/sign // kotlin.math/sign|@kotlin.Long{}sign[0]
    final fun (kotlin/Long).<get-sign>(): kotlin/Int // kotlin.math/sign.<get-sign>|<get-sign>@kotlin.Long(){}[0]
final val kotlin.math/ulp // kotlin.math/ulp|@kotlin.Double{}ulp[0]
    final fun (kotlin/Double).<get-ulp>(): kotlin/Double // kotlin.math/ulp.<get-ulp>|<get-ulp>@kotlin.Double(){}[0]
final val kotlin.text/CASE_INSENSITIVE_ORDER // kotlin.text/CASE_INSENSITIVE_ORDER|@kotlin.String.Companion{}CASE_INSENSITIVE_ORDER[0]
    final fun (kotlin/String.Companion).<get-CASE_INSENSITIVE_ORDER>(): kotlin/Comparator<kotlin/String> // kotlin.text/CASE_INSENSITIVE_ORDER.<get-CASE_INSENSITIVE_ORDER>|<get-CASE_INSENSITIVE_ORDER>@kotlin.String.Companion(){}[0]
final val kotlin.text/category // kotlin.text/category|@kotlin.Char{}category[0]
    final fun (kotlin/Char).<get-category>(): kotlin.text/CharCategory // kotlin.text/category.<get-category>|<get-category>@kotlin.Char(){}[0]
final val kotlin.text/indices // kotlin.text/indices|@kotlin.CharSequence{}indices[0]
    final fun (kotlin/CharSequence).<get-indices>(): kotlin.ranges/IntRange // kotlin.text/indices.<get-indices>|<get-indices>@kotlin.CharSequence(){}[0]
final val kotlin.text/lastIndex // kotlin.text/lastIndex|@kotlin.CharSequence{}lastIndex[0]
    final fun (kotlin/CharSequence).<get-lastIndex>(): kotlin/Int // kotlin.text/lastIndex.<get-lastIndex>|<get-lastIndex>@kotlin.CharSequence(){}[0]
final val kotlin/code // kotlin/code|@kotlin.Char{}code[0]
    final inline fun (kotlin/Char).<get-code>(): kotlin/Int // kotlin/code.<get-code>|<get-code>@kotlin.Char(){}[0]
final val kotlin/isInitialized // kotlin/isInitialized|@kotlin.reflect.KProperty0<*>{}isInitialized[0]
    final inline fun (kotlin.reflect/KProperty0<*>).<get-isInitialized>(): kotlin/Boolean // kotlin/isInitialized.<get-isInitialized>|<get-isInitialized>@kotlin.reflect.KProperty0<*>(){}[0]
final val kotlin/suppressedExceptions // kotlin/suppressedExceptions|@kotlin.Throwable{}suppressedExceptions[0]
    final fun (kotlin/Throwable).<get-suppressedExceptions>(): kotlin.collections/List<kotlin/Throwable> // kotlin/suppressedExceptions.<get-suppressedExceptions>|<get-suppressedExceptions>@kotlin.Throwable(){}[0]

final fun (kotlin.collections/Collection<kotlin/Boolean>).kotlin.collections/toBooleanArray(): kotlin/BooleanArray // kotlin.collections/toBooleanArray|toBooleanArray@kotlin.collections.Collection<kotlin.Boolean>(){}[0]
final fun (kotlin.collections/Collection<kotlin/Byte>).kotlin.collections/toByteArray(): kotlin/ByteArray // kotlin.collections/toByteArray|toByteArray@kotlin.collections.Collection<kotlin.Byte>(){}[0]
final fun (kotlin.collections/Collection<kotlin/Char>).kotlin.collections/toCharArray(): kotlin/CharArray // kotlin.collections/toCharArray|toCharArray@kotlin.collections.Collection<kotlin.Char>(){}[0]
final fun (kotlin.collections/Collection<kotlin/Double>).kotlin.collections/toDoubleArray(): kotlin/DoubleArray // kotlin.collections/toDoubleArray|toDoubleArray@kotlin.collections.Collection<kotlin.Double>(){}[0]
final fun (kotlin.collections/Collection<kotlin/Float>).kotlin.collections/toFloatArray(): kotlin/FloatArray // kotlin.collections/toFloatArray|toFloatArray@kotlin.collections.Collection<kotlin.Float>(){}[0]
final fun (kotlin.collections/Collection<kotlin/Int>).kotlin.collections/toIntArray(): kotlin/IntArray // kotlin.collections/toIntArray|toIntArray@kotlin.collections.Collection<kotlin.Int>(){}[0]
final fun (kotlin.collections/Collection<kotlin/Long>).kotlin.collections/toLongArray(): kotlin/LongArray // kotlin.collections/toLongArray|toLongArray@kotlin.collections.Collection<kotlin.Long>(){}[0]
final fun (kotlin.collections/Collection<kotlin/Short>).kotlin.collections/toShortArray(): kotlin/ShortArray // kotlin.collections/toShortArray|toShortArray@kotlin.collections.Collection<kotlin.Short>(){}[0]
final fun (kotlin.collections/Collection<kotlin/UByte>).kotlin.collections/toUByteArray(): kotlin/UByteArray // kotlin.collections/toUByteArray|toUByteArray@kotlin.collections.Collection<kotlin.UByte>(){}[0]
final fun (kotlin.collections/Collection<kotlin/UInt>).kotlin.collections/toUIntArray(): kotlin/UIntArray // kotlin.collections/toUIntArray|toUIntArray@kotlin.collections.Collection<kotlin.UInt>(){}[0]
final fun (kotlin.collections/Collection<kotlin/ULong>).kotlin.collections/toULongArray(): kotlin/ULongArray // kotlin.collections/toULongArray|toULongArray@kotlin.collections.Collection<kotlin.ULong>(){}[0]
final fun (kotlin.collections/Collection<kotlin/UShort>).kotlin.collections/toUShortArray(): kotlin/UShortArray // kotlin.collections/toUShortArray|toUShortArray@kotlin.collections.Collection<kotlin.UShort>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Byte>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.collections.Iterable<kotlin.Byte>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Byte>).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.Byte>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Double>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.collections.Iterable<kotlin.Double>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Double>).kotlin.collections/max(): kotlin/Double // kotlin.collections/max|max@kotlin.collections.Iterable<kotlin.Double>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Double>).kotlin.collections/maxOrNull(): kotlin/Double? // kotlin.collections/maxOrNull|maxOrNull@kotlin.collections.Iterable<kotlin.Double>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Double>).kotlin.collections/min(): kotlin/Double // kotlin.collections/min|min@kotlin.collections.Iterable<kotlin.Double>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Double>).kotlin.collections/minOrNull(): kotlin/Double? // kotlin.collections/minOrNull|minOrNull@kotlin.collections.Iterable<kotlin.Double>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Double>).kotlin.collections/sum(): kotlin/Double // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.Double>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Float>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.collections.Iterable<kotlin.Float>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Float>).kotlin.collections/max(): kotlin/Float // kotlin.collections/max|max@kotlin.collections.Iterable<kotlin.Float>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Float>).kotlin.collections/maxOrNull(): kotlin/Float? // kotlin.collections/maxOrNull|maxOrNull@kotlin.collections.Iterable<kotlin.Float>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Float>).kotlin.collections/min(): kotlin/Float // kotlin.collections/min|min@kotlin.collections.Iterable<kotlin.Float>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Float>).kotlin.collections/minOrNull(): kotlin/Float? // kotlin.collections/minOrNull|minOrNull@kotlin.collections.Iterable<kotlin.Float>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Float>).kotlin.collections/sum(): kotlin/Float // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.Float>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Int>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.collections.Iterable<kotlin.Int>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Int>).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.Int>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Long>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.collections.Iterable<kotlin.Long>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Long>).kotlin.collections/sum(): kotlin/Long // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.Long>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Short>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.collections.Iterable<kotlin.Short>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/Short>).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.Short>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/UByte>).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.UByte>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/UInt>).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.UInt>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/ULong>).kotlin.collections/sum(): kotlin/ULong // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.ULong>(){}[0]
final fun (kotlin.collections/Iterable<kotlin/UShort>).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.collections.Iterable<kotlin.UShort>(){}[0]
final fun (kotlin.concurrent/AtomicInt).kotlin.concurrent/decrementAndFetch(): kotlin/Int // kotlin.concurrent/decrementAndFetch|decrementAndFetch@kotlin.concurrent.AtomicInt(){}[0]
final fun (kotlin.concurrent/AtomicInt).kotlin.concurrent/fetchAndDecrement(): kotlin/Int // kotlin.concurrent/fetchAndDecrement|fetchAndDecrement@kotlin.concurrent.AtomicInt(){}[0]
final fun (kotlin.concurrent/AtomicInt).kotlin.concurrent/fetchAndIncrement(): kotlin/Int // kotlin.concurrent/fetchAndIncrement|fetchAndIncrement@kotlin.concurrent.AtomicInt(){}[0]
final fun (kotlin.concurrent/AtomicInt).kotlin.concurrent/incrementAndFetch(): kotlin/Int // kotlin.concurrent/incrementAndFetch|incrementAndFetch@kotlin.concurrent.AtomicInt(){}[0]
final fun (kotlin.concurrent/AtomicInt).kotlin.concurrent/minusAssign(kotlin/Int) // kotlin.concurrent/minusAssign|minusAssign@kotlin.concurrent.AtomicInt(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicInt).kotlin.concurrent/plusAssign(kotlin/Int) // kotlin.concurrent/plusAssign|plusAssign@kotlin.concurrent.AtomicInt(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicIntArray).kotlin.concurrent/decrementAndFetchAt(kotlin/Int): kotlin/Int // kotlin.concurrent/decrementAndFetchAt|decrementAndFetchAt@kotlin.concurrent.AtomicIntArray(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicIntArray).kotlin.concurrent/fetchAndDecrementAt(kotlin/Int): kotlin/Int // kotlin.concurrent/fetchAndDecrementAt|fetchAndDecrementAt@kotlin.concurrent.AtomicIntArray(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicIntArray).kotlin.concurrent/fetchAndIncrementAt(kotlin/Int): kotlin/Int // kotlin.concurrent/fetchAndIncrementAt|fetchAndIncrementAt@kotlin.concurrent.AtomicIntArray(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicIntArray).kotlin.concurrent/incrementAndFetchAt(kotlin/Int): kotlin/Int // kotlin.concurrent/incrementAndFetchAt|incrementAndFetchAt@kotlin.concurrent.AtomicIntArray(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicLong).kotlin.concurrent/decrementAndFetch(): kotlin/Long // kotlin.concurrent/decrementAndFetch|decrementAndFetch@kotlin.concurrent.AtomicLong(){}[0]
final fun (kotlin.concurrent/AtomicLong).kotlin.concurrent/fetchAndDecrement(): kotlin/Long // kotlin.concurrent/fetchAndDecrement|fetchAndDecrement@kotlin.concurrent.AtomicLong(){}[0]
final fun (kotlin.concurrent/AtomicLong).kotlin.concurrent/fetchAndIncrement(): kotlin/Long // kotlin.concurrent/fetchAndIncrement|fetchAndIncrement@kotlin.concurrent.AtomicLong(){}[0]
final fun (kotlin.concurrent/AtomicLong).kotlin.concurrent/incrementAndFetch(): kotlin/Long // kotlin.concurrent/incrementAndFetch|incrementAndFetch@kotlin.concurrent.AtomicLong(){}[0]
final fun (kotlin.concurrent/AtomicLong).kotlin.concurrent/minusAssign(kotlin/Long) // kotlin.concurrent/minusAssign|minusAssign@kotlin.concurrent.AtomicLong(kotlin.Long){}[0]
final fun (kotlin.concurrent/AtomicLong).kotlin.concurrent/plusAssign(kotlin/Long) // kotlin.concurrent/plusAssign|plusAssign@kotlin.concurrent.AtomicLong(kotlin.Long){}[0]
final fun (kotlin.concurrent/AtomicLongArray).kotlin.concurrent/decrementAndFetchAt(kotlin/Int): kotlin/Long // kotlin.concurrent/decrementAndFetchAt|decrementAndFetchAt@kotlin.concurrent.AtomicLongArray(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicLongArray).kotlin.concurrent/fetchAndDecrementAt(kotlin/Int): kotlin/Long // kotlin.concurrent/fetchAndDecrementAt|fetchAndDecrementAt@kotlin.concurrent.AtomicLongArray(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicLongArray).kotlin.concurrent/fetchAndIncrementAt(kotlin/Int): kotlin/Long // kotlin.concurrent/fetchAndIncrementAt|fetchAndIncrementAt@kotlin.concurrent.AtomicLongArray(kotlin.Int){}[0]
final fun (kotlin.concurrent/AtomicLongArray).kotlin.concurrent/incrementAndFetchAt(kotlin/Int): kotlin/Long // kotlin.concurrent/incrementAndFetchAt|incrementAndFetchAt@kotlin.concurrent.AtomicLongArray(kotlin.Int){}[0]
final fun (kotlin.coroutines/CoroutineContext.Element).kotlin.coroutines/minusPolymorphicKey(kotlin.coroutines/CoroutineContext.Key<*>): kotlin.coroutines/CoroutineContext // kotlin.coroutines/minusPolymorphicKey|minusPolymorphicKey@kotlin.coroutines.CoroutineContext.Element(kotlin.coroutines.CoroutineContext.Key<*>){}[0]
final fun (kotlin.random/Random).kotlin.random/nextInt(kotlin.ranges/IntRange): kotlin/Int // kotlin.random/nextInt|nextInt@kotlin.random.Random(kotlin.ranges.IntRange){}[0]
final fun (kotlin.random/Random).kotlin.random/nextLong(kotlin.ranges/LongRange): kotlin/Long // kotlin.random/nextLong|nextLong@kotlin.random.Random(kotlin.ranges.LongRange){}[0]
final fun (kotlin.random/Random).kotlin.random/nextUBytes(kotlin/Int): kotlin/UByteArray // kotlin.random/nextUBytes|nextUBytes@kotlin.random.Random(kotlin.Int){}[0]
final fun (kotlin.random/Random).kotlin.random/nextUBytes(kotlin/UByteArray): kotlin/UByteArray // kotlin.random/nextUBytes|nextUBytes@kotlin.random.Random(kotlin.UByteArray){}[0]
final fun (kotlin.random/Random).kotlin.random/nextUBytes(kotlin/UByteArray, kotlin/Int = ..., kotlin/Int = ...): kotlin/UByteArray // kotlin.random/nextUBytes|nextUBytes@kotlin.random.Random(kotlin.UByteArray;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin.random/Random).kotlin.random/nextUInt(): kotlin/UInt // kotlin.random/nextUInt|nextUInt@kotlin.random.Random(){}[0]
final fun (kotlin.random/Random).kotlin.random/nextUInt(kotlin.ranges/UIntRange): kotlin/UInt // kotlin.random/nextUInt|nextUInt@kotlin.random.Random(kotlin.ranges.UIntRange){}[0]
final fun (kotlin.random/Random).kotlin.random/nextUInt(kotlin/UInt): kotlin/UInt // kotlin.random/nextUInt|nextUInt@kotlin.random.Random(kotlin.UInt){}[0]
final fun (kotlin.random/Random).kotlin.random/nextUInt(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.random/nextUInt|nextUInt@kotlin.random.Random(kotlin.UInt;kotlin.UInt){}[0]
final fun (kotlin.random/Random).kotlin.random/nextULong(): kotlin/ULong // kotlin.random/nextULong|nextULong@kotlin.random.Random(){}[0]
final fun (kotlin.random/Random).kotlin.random/nextULong(kotlin.ranges/ULongRange): kotlin/ULong // kotlin.random/nextULong|nextULong@kotlin.random.Random(kotlin.ranges.ULongRange){}[0]
final fun (kotlin.random/Random).kotlin.random/nextULong(kotlin/ULong): kotlin/ULong // kotlin.random/nextULong|nextULong@kotlin.random.Random(kotlin.ULong){}[0]
final fun (kotlin.random/Random).kotlin.random/nextULong(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.random/nextULong|nextULong@kotlin.random.Random(kotlin.ULong;kotlin.ULong){}[0]
final fun (kotlin.ranges/CharProgression).kotlin.ranges/first(): kotlin/Char // kotlin.ranges/first|first@kotlin.ranges.CharProgression(){}[0]
final fun (kotlin.ranges/CharProgression).kotlin.ranges/firstOrNull(): kotlin/Char? // kotlin.ranges/firstOrNull|firstOrNull@kotlin.ranges.CharProgression(){}[0]
final fun (kotlin.ranges/CharProgression).kotlin.ranges/last(): kotlin/Char // kotlin.ranges/last|last@kotlin.ranges.CharProgression(){}[0]
final fun (kotlin.ranges/CharProgression).kotlin.ranges/lastOrNull(): kotlin/Char? // kotlin.ranges/lastOrNull|lastOrNull@kotlin.ranges.CharProgression(){}[0]
final fun (kotlin.ranges/CharProgression).kotlin.ranges/reversed(): kotlin.ranges/CharProgression // kotlin.ranges/reversed|reversed@kotlin.ranges.CharProgression(){}[0]
final fun (kotlin.ranges/CharProgression).kotlin.ranges/step(kotlin/Int): kotlin.ranges/CharProgression // kotlin.ranges/step|step@kotlin.ranges.CharProgression(kotlin.Int){}[0]
final fun (kotlin.ranges/CharRange).kotlin.ranges/random(kotlin.random/Random): kotlin/Char // kotlin.ranges/random|random@kotlin.ranges.CharRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/CharRange).kotlin.ranges/randomOrNull(kotlin.random/Random): kotlin/Char? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.CharRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Double): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Byte>(kotlin.Double){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Float): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Byte>(kotlin.Float){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Byte>(kotlin.Int){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Byte>(kotlin.Long){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Byte>(kotlin.Short){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Double>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Double>(kotlin.Byte){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Double>).kotlin.ranges/contains(kotlin/Float): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Double>(kotlin.Float){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Double>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Double>(kotlin.Int){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Double>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Double>(kotlin.Long){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Double>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Double>(kotlin.Short){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Float>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Float>(kotlin.Byte){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Float>).kotlin.ranges/contains(kotlin/Double): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Float>(kotlin.Double){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Float>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Float>(kotlin.Int){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Float>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Float>(kotlin.Long){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Float>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Float>(kotlin.Short){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Int>(kotlin.Byte){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Double): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Int>(kotlin.Double){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Float): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Int>(kotlin.Float){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Int>(kotlin.Long){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Int>(kotlin.Short){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Long>(kotlin.Byte){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Double): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Long>(kotlin.Double){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Float): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Long>(kotlin.Float){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Long>(kotlin.Int){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Long>(kotlin.Short){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Short>(kotlin.Byte){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Double): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Short>(kotlin.Double){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Float): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Short>(kotlin.Float){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Short>(kotlin.Int){}[0]
final fun (kotlin.ranges/ClosedRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ClosedRange<kotlin.Short>(kotlin.Long){}[0]
final fun (kotlin.ranges/IntProgression).kotlin.ranges/first(): kotlin/Int // kotlin.ranges/first|first@kotlin.ranges.IntProgression(){}[0]
final fun (kotlin.ranges/IntProgression).kotlin.ranges/firstOrNull(): kotlin/Int? // kotlin.ranges/firstOrNull|firstOrNull@kotlin.ranges.IntProgression(){}[0]
final fun (kotlin.ranges/IntProgression).kotlin.ranges/last(): kotlin/Int // kotlin.ranges/last|last@kotlin.ranges.IntProgression(){}[0]
final fun (kotlin.ranges/IntProgression).kotlin.ranges/lastOrNull(): kotlin/Int? // kotlin.ranges/lastOrNull|lastOrNull@kotlin.ranges.IntProgression(){}[0]
final fun (kotlin.ranges/IntProgression).kotlin.ranges/reversed(): kotlin.ranges/IntProgression // kotlin.ranges/reversed|reversed@kotlin.ranges.IntProgression(){}[0]
final fun (kotlin.ranges/IntProgression).kotlin.ranges/step(kotlin/Int): kotlin.ranges/IntProgression // kotlin.ranges/step|step@kotlin.ranges.IntProgression(kotlin.Int){}[0]
final fun (kotlin.ranges/IntRange).kotlin.ranges/random(kotlin.random/Random): kotlin/Int // kotlin.ranges/random|random@kotlin.ranges.IntRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/IntRange).kotlin.ranges/randomOrNull(kotlin.random/Random): kotlin/Int? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.IntRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/LongProgression).kotlin.ranges/first(): kotlin/Long // kotlin.ranges/first|first@kotlin.ranges.LongProgression(){}[0]
final fun (kotlin.ranges/LongProgression).kotlin.ranges/firstOrNull(): kotlin/Long? // kotlin.ranges/firstOrNull|firstOrNull@kotlin.ranges.LongProgression(){}[0]
final fun (kotlin.ranges/LongProgression).kotlin.ranges/last(): kotlin/Long // kotlin.ranges/last|last@kotlin.ranges.LongProgression(){}[0]
final fun (kotlin.ranges/LongProgression).kotlin.ranges/lastOrNull(): kotlin/Long? // kotlin.ranges/lastOrNull|lastOrNull@kotlin.ranges.LongProgression(){}[0]
final fun (kotlin.ranges/LongProgression).kotlin.ranges/reversed(): kotlin.ranges/LongProgression // kotlin.ranges/reversed|reversed@kotlin.ranges.LongProgression(){}[0]
final fun (kotlin.ranges/LongProgression).kotlin.ranges/step(kotlin/Long): kotlin.ranges/LongProgression // kotlin.ranges/step|step@kotlin.ranges.LongProgression(kotlin.Long){}[0]
final fun (kotlin.ranges/LongRange).kotlin.ranges/random(kotlin.random/Random): kotlin/Long // kotlin.ranges/random|random@kotlin.ranges.LongRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/LongRange).kotlin.ranges/randomOrNull(kotlin.random/Random): kotlin/Long? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.LongRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Byte>(kotlin.Int){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Byte>(kotlin.Long){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Byte>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Byte>(kotlin.Short){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Double>).kotlin.ranges/contains(kotlin/Float): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Double>(kotlin.Float){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Int>(kotlin.Byte){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Int>(kotlin.Long){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Int>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Int>(kotlin.Short){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Long>(kotlin.Byte){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Long>(kotlin.Int){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Long>).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Long>(kotlin.Short){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Short>(kotlin.Byte){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Short>(kotlin.Int){}[0]
final fun (kotlin.ranges/OpenEndRange<kotlin/Short>).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.OpenEndRange<kotlin.Short>(kotlin.Long){}[0]
final fun (kotlin.ranges/UIntProgression).kotlin.ranges/first(): kotlin/UInt // kotlin.ranges/first|first@kotlin.ranges.UIntProgression(){}[0]
final fun (kotlin.ranges/UIntProgression).kotlin.ranges/firstOrNull(): kotlin/UInt? // kotlin.ranges/firstOrNull|firstOrNull@kotlin.ranges.UIntProgression(){}[0]
final fun (kotlin.ranges/UIntProgression).kotlin.ranges/last(): kotlin/UInt // kotlin.ranges/last|last@kotlin.ranges.UIntProgression(){}[0]
final fun (kotlin.ranges/UIntProgression).kotlin.ranges/lastOrNull(): kotlin/UInt? // kotlin.ranges/lastOrNull|lastOrNull@kotlin.ranges.UIntProgression(){}[0]
final fun (kotlin.ranges/UIntProgression).kotlin.ranges/reversed(): kotlin.ranges/UIntProgression // kotlin.ranges/reversed|reversed@kotlin.ranges.UIntProgression(){}[0]
final fun (kotlin.ranges/UIntProgression).kotlin.ranges/step(kotlin/Int): kotlin.ranges/UIntProgression // kotlin.ranges/step|step@kotlin.ranges.UIntProgression(kotlin.Int){}[0]
final fun (kotlin.ranges/UIntRange).kotlin.ranges/contains(kotlin/UByte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.UIntRange(kotlin.UByte){}[0]
final fun (kotlin.ranges/UIntRange).kotlin.ranges/contains(kotlin/ULong): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.UIntRange(kotlin.ULong){}[0]
final fun (kotlin.ranges/UIntRange).kotlin.ranges/contains(kotlin/UShort): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.UIntRange(kotlin.UShort){}[0]
final fun (kotlin.ranges/UIntRange).kotlin.ranges/random(kotlin.random/Random): kotlin/UInt // kotlin.ranges/random|random@kotlin.ranges.UIntRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/UIntRange).kotlin.ranges/randomOrNull(kotlin.random/Random): kotlin/UInt? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.UIntRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/ULongProgression).kotlin.ranges/first(): kotlin/ULong // kotlin.ranges/first|first@kotlin.ranges.ULongProgression(){}[0]
final fun (kotlin.ranges/ULongProgression).kotlin.ranges/firstOrNull(): kotlin/ULong? // kotlin.ranges/firstOrNull|firstOrNull@kotlin.ranges.ULongProgression(){}[0]
final fun (kotlin.ranges/ULongProgression).kotlin.ranges/last(): kotlin/ULong // kotlin.ranges/last|last@kotlin.ranges.ULongProgression(){}[0]
final fun (kotlin.ranges/ULongProgression).kotlin.ranges/lastOrNull(): kotlin/ULong? // kotlin.ranges/lastOrNull|lastOrNull@kotlin.ranges.ULongProgression(){}[0]
final fun (kotlin.ranges/ULongProgression).kotlin.ranges/reversed(): kotlin.ranges/ULongProgression // kotlin.ranges/reversed|reversed@kotlin.ranges.ULongProgression(){}[0]
final fun (kotlin.ranges/ULongProgression).kotlin.ranges/step(kotlin/Long): kotlin.ranges/ULongProgression // kotlin.ranges/step|step@kotlin.ranges.ULongProgression(kotlin.Long){}[0]
final fun (kotlin.ranges/ULongRange).kotlin.ranges/contains(kotlin/UByte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ULongRange(kotlin.UByte){}[0]
final fun (kotlin.ranges/ULongRange).kotlin.ranges/contains(kotlin/UInt): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ULongRange(kotlin.UInt){}[0]
final fun (kotlin.ranges/ULongRange).kotlin.ranges/contains(kotlin/UShort): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ULongRange(kotlin.UShort){}[0]
final fun (kotlin.ranges/ULongRange).kotlin.ranges/random(kotlin.random/Random): kotlin/ULong // kotlin.ranges/random|random@kotlin.ranges.ULongRange(kotlin.random.Random){}[0]
final fun (kotlin.ranges/ULongRange).kotlin.ranges/randomOrNull(kotlin.random/Random): kotlin/ULong? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.ULongRange(kotlin.random.Random){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Byte>).kotlin.sequences/average(): kotlin/Double // kotlin.sequences/average|average@kotlin.sequences.Sequence<kotlin.Byte>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Byte>).kotlin.sequences/sum(): kotlin/Int // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.Byte>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Double>).kotlin.sequences/average(): kotlin/Double // kotlin.sequences/average|average@kotlin.sequences.Sequence<kotlin.Double>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Double>).kotlin.sequences/max(): kotlin/Double // kotlin.sequences/max|max@kotlin.sequences.Sequence<kotlin.Double>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Double>).kotlin.sequences/maxOrNull(): kotlin/Double? // kotlin.sequences/maxOrNull|maxOrNull@kotlin.sequences.Sequence<kotlin.Double>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Double>).kotlin.sequences/min(): kotlin/Double // kotlin.sequences/min|min@kotlin.sequences.Sequence<kotlin.Double>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Double>).kotlin.sequences/minOrNull(): kotlin/Double? // kotlin.sequences/minOrNull|minOrNull@kotlin.sequences.Sequence<kotlin.Double>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Double>).kotlin.sequences/sum(): kotlin/Double // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.Double>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Float>).kotlin.sequences/average(): kotlin/Double // kotlin.sequences/average|average@kotlin.sequences.Sequence<kotlin.Float>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Float>).kotlin.sequences/max(): kotlin/Float // kotlin.sequences/max|max@kotlin.sequences.Sequence<kotlin.Float>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Float>).kotlin.sequences/maxOrNull(): kotlin/Float? // kotlin.sequences/maxOrNull|maxOrNull@kotlin.sequences.Sequence<kotlin.Float>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Float>).kotlin.sequences/min(): kotlin/Float // kotlin.sequences/min|min@kotlin.sequences.Sequence<kotlin.Float>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Float>).kotlin.sequences/minOrNull(): kotlin/Float? // kotlin.sequences/minOrNull|minOrNull@kotlin.sequences.Sequence<kotlin.Float>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Float>).kotlin.sequences/sum(): kotlin/Float // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.Float>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Int>).kotlin.sequences/average(): kotlin/Double // kotlin.sequences/average|average@kotlin.sequences.Sequence<kotlin.Int>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Int>).kotlin.sequences/sum(): kotlin/Int // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.Int>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Long>).kotlin.sequences/average(): kotlin/Double // kotlin.sequences/average|average@kotlin.sequences.Sequence<kotlin.Long>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Long>).kotlin.sequences/sum(): kotlin/Long // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.Long>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Short>).kotlin.sequences/average(): kotlin/Double // kotlin.sequences/average|average@kotlin.sequences.Sequence<kotlin.Short>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/Short>).kotlin.sequences/sum(): kotlin/Int // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.Short>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/UByte>).kotlin.sequences/sum(): kotlin/UInt // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.UByte>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/UInt>).kotlin.sequences/sum(): kotlin/UInt // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.UInt>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/ULong>).kotlin.sequences/sum(): kotlin/ULong // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.ULong>(){}[0]
final fun (kotlin.sequences/Sequence<kotlin/UShort>).kotlin.sequences/sum(): kotlin/UInt // kotlin.sequences/sum|sum@kotlin.sequences.Sequence<kotlin.UShort>(){}[0]
final fun (kotlin.text/MatchGroupCollection).kotlin.text/get(kotlin/String): kotlin.text/MatchGroup? // kotlin.text/get|get@kotlin.text.MatchGroupCollection(kotlin.String){}[0]
final fun (kotlin.text/StringBuilder).kotlin.text/append(kotlin/Array<out kotlin/Any?>...): kotlin.text/StringBuilder // kotlin.text/append|append@kotlin.text.StringBuilder(kotlin.Array<out|kotlin.Any?>...){}[0]
final fun (kotlin.text/StringBuilder).kotlin.text/append(kotlin/Array<out kotlin/String?>...): kotlin.text/StringBuilder // kotlin.text/append|append@kotlin.text.StringBuilder(kotlin.Array<out|kotlin.String?>...){}[0]
final fun (kotlin/Array<out kotlin/Boolean>).kotlin.collections/toBooleanArray(): kotlin/BooleanArray // kotlin.collections/toBooleanArray|toBooleanArray@kotlin.Array<out|kotlin.Boolean>(){}[0]
final fun (kotlin/Array<out kotlin/Byte>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.Array<out|kotlin.Byte>(){}[0]
final fun (kotlin/Array<out kotlin/Byte>).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.Byte>(){}[0]
final fun (kotlin/Array<out kotlin/Byte>).kotlin.collections/toByteArray(): kotlin/ByteArray // kotlin.collections/toByteArray|toByteArray@kotlin.Array<out|kotlin.Byte>(){}[0]
final fun (kotlin/Array<out kotlin/Char>).kotlin.collections/toCharArray(): kotlin/CharArray // kotlin.collections/toCharArray|toCharArray@kotlin.Array<out|kotlin.Char>(){}[0]
final fun (kotlin/Array<out kotlin/Double>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.Array<out|kotlin.Double>(){}[0]
final fun (kotlin/Array<out kotlin/Double>).kotlin.collections/max(): kotlin/Double // kotlin.collections/max|max@kotlin.Array<out|kotlin.Double>(){}[0]
final fun (kotlin/Array<out kotlin/Double>).kotlin.collections/maxOrNull(): kotlin/Double? // kotlin.collections/maxOrNull|maxOrNull@kotlin.Array<out|kotlin.Double>(){}[0]
final fun (kotlin/Array<out kotlin/Double>).kotlin.collections/min(): kotlin/Double // kotlin.collections/min|min@kotlin.Array<out|kotlin.Double>(){}[0]
final fun (kotlin/Array<out kotlin/Double>).kotlin.collections/minOrNull(): kotlin/Double? // kotlin.collections/minOrNull|minOrNull@kotlin.Array<out|kotlin.Double>(){}[0]
final fun (kotlin/Array<out kotlin/Double>).kotlin.collections/sum(): kotlin/Double // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.Double>(){}[0]
final fun (kotlin/Array<out kotlin/Double>).kotlin.collections/toDoubleArray(): kotlin/DoubleArray // kotlin.collections/toDoubleArray|toDoubleArray@kotlin.Array<out|kotlin.Double>(){}[0]
final fun (kotlin/Array<out kotlin/Float>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.Array<out|kotlin.Float>(){}[0]
final fun (kotlin/Array<out kotlin/Float>).kotlin.collections/max(): kotlin/Float // kotlin.collections/max|max@kotlin.Array<out|kotlin.Float>(){}[0]
final fun (kotlin/Array<out kotlin/Float>).kotlin.collections/maxOrNull(): kotlin/Float? // kotlin.collections/maxOrNull|maxOrNull@kotlin.Array<out|kotlin.Float>(){}[0]
final fun (kotlin/Array<out kotlin/Float>).kotlin.collections/min(): kotlin/Float // kotlin.collections/min|min@kotlin.Array<out|kotlin.Float>(){}[0]
final fun (kotlin/Array<out kotlin/Float>).kotlin.collections/minOrNull(): kotlin/Float? // kotlin.collections/minOrNull|minOrNull@kotlin.Array<out|kotlin.Float>(){}[0]
final fun (kotlin/Array<out kotlin/Float>).kotlin.collections/sum(): kotlin/Float // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.Float>(){}[0]
final fun (kotlin/Array<out kotlin/Float>).kotlin.collections/toFloatArray(): kotlin/FloatArray // kotlin.collections/toFloatArray|toFloatArray@kotlin.Array<out|kotlin.Float>(){}[0]
final fun (kotlin/Array<out kotlin/Int>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.Array<out|kotlin.Int>(){}[0]
final fun (kotlin/Array<out kotlin/Int>).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.Int>(){}[0]
final fun (kotlin/Array<out kotlin/Int>).kotlin.collections/toIntArray(): kotlin/IntArray // kotlin.collections/toIntArray|toIntArray@kotlin.Array<out|kotlin.Int>(){}[0]
final fun (kotlin/Array<out kotlin/Long>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.Array<out|kotlin.Long>(){}[0]
final fun (kotlin/Array<out kotlin/Long>).kotlin.collections/sum(): kotlin/Long // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.Long>(){}[0]
final fun (kotlin/Array<out kotlin/Long>).kotlin.collections/toLongArray(): kotlin/LongArray // kotlin.collections/toLongArray|toLongArray@kotlin.Array<out|kotlin.Long>(){}[0]
final fun (kotlin/Array<out kotlin/Short>).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.Array<out|kotlin.Short>(){}[0]
final fun (kotlin/Array<out kotlin/Short>).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.Short>(){}[0]
final fun (kotlin/Array<out kotlin/Short>).kotlin.collections/toShortArray(): kotlin/ShortArray // kotlin.collections/toShortArray|toShortArray@kotlin.Array<out|kotlin.Short>(){}[0]
final fun (kotlin/Array<out kotlin/UByte>).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.UByte>(){}[0]
final fun (kotlin/Array<out kotlin/UByte>).kotlin.collections/toUByteArray(): kotlin/UByteArray // kotlin.collections/toUByteArray|toUByteArray@kotlin.Array<out|kotlin.UByte>(){}[0]
final fun (kotlin/Array<out kotlin/UInt>).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.UInt>(){}[0]
final fun (kotlin/Array<out kotlin/UInt>).kotlin.collections/toUIntArray(): kotlin/UIntArray // kotlin.collections/toUIntArray|toUIntArray@kotlin.Array<out|kotlin.UInt>(){}[0]
final fun (kotlin/Array<out kotlin/ULong>).kotlin.collections/sum(): kotlin/ULong // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.ULong>(){}[0]
final fun (kotlin/Array<out kotlin/ULong>).kotlin.collections/toULongArray(): kotlin/ULongArray // kotlin.collections/toULongArray|toULongArray@kotlin.Array<out|kotlin.ULong>(){}[0]
final fun (kotlin/Array<out kotlin/UShort>).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.Array<out|kotlin.UShort>(){}[0]
final fun (kotlin/Array<out kotlin/UShort>).kotlin.collections/toUShortArray(): kotlin/UShortArray // kotlin.collections/toUShortArray|toUShortArray@kotlin.Array<out|kotlin.UShort>(){}[0]
final fun (kotlin/AutoCloseable?).kotlin/closeFinally(kotlin/Throwable?) // kotlin/closeFinally|closeFinally@kotlin.AutoCloseable?(kotlin.Throwable?){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Boolean> // kotlin.collections/asIterable|asIterable@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Boolean> // kotlin.collections/asSequence|asSequence@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/contains(kotlin/Boolean): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.BooleanArray(kotlin.Boolean){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/copyOf(): kotlin/BooleanArray // kotlin.collections/copyOf|copyOf@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/copyOf(kotlin/Int): kotlin/BooleanArray // kotlin.collections/copyOf|copyOf@kotlin.BooleanArray(kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/BooleanArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.BooleanArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/distinct|distinct@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/drop|drop@kotlin.BooleanArray(kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/dropLast|dropLast@kotlin.BooleanArray(kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/fill(kotlin/Boolean, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.BooleanArray(kotlin.Boolean;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/first(): kotlin/Boolean // kotlin.collections/first|first@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/firstOrNull(): kotlin/Boolean? // kotlin.collections/firstOrNull|firstOrNull@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Boolean? // kotlin.collections/getOrNull|getOrNull@kotlin.BooleanArray(kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/indexOf(kotlin/Boolean): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.BooleanArray(kotlin.Boolean){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Boolean>): kotlin.collections/Set<kotlin/Boolean> // kotlin.collections/intersect|intersect@kotlin.BooleanArray(kotlin.collections.Iterable<kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Boolean, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.BooleanArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Boolean,kotlin.CharSequence>?){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/last(): kotlin/Boolean // kotlin.collections/last|last@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/lastIndexOf(kotlin/Boolean): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.BooleanArray(kotlin.Boolean){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/lastOrNull(): kotlin/Boolean? // kotlin.collections/lastOrNull|lastOrNull@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Boolean>): kotlin/Boolean // kotlin.collections/maxWith|maxWith@kotlin.BooleanArray(kotlin.Comparator<in|kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.BooleanArray(kotlin.Comparator<in|kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Boolean>): kotlin/Boolean // kotlin.collections/minWith|minWith@kotlin.BooleanArray(kotlin.Comparator<in|kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.BooleanArray(kotlin.Comparator<in|kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Boolean>): kotlin/BooleanArray // kotlin.collections/plus|plus@kotlin.BooleanArray(kotlin.collections.Collection<kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/random(kotlin.random/Random): kotlin/Boolean // kotlin.collections/random|random@kotlin.BooleanArray(kotlin.random.Random){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Boolean? // kotlin.collections/randomOrNull|randomOrNull@kotlin.BooleanArray(kotlin.random.Random){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.BooleanArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/reversed|reversed@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/reversedArray(): kotlin/BooleanArray // kotlin.collections/reversedArray|reversedArray@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.BooleanArray(kotlin.random.Random){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/single(): kotlin/Boolean // kotlin.collections/single|single@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/singleOrNull(): kotlin/Boolean? // kotlin.collections/singleOrNull|singleOrNull@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/slice|slice@kotlin.BooleanArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/slice|slice@kotlin.BooleanArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/BooleanArray // kotlin.collections/sliceArray|sliceArray@kotlin.BooleanArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/BooleanArray // kotlin.collections/sliceArray|sliceArray@kotlin.BooleanArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/sortedWith|sortedWith@kotlin.BooleanArray(kotlin.Comparator<in|kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Boolean>): kotlin.collections/Set<kotlin/Boolean> // kotlin.collections/subtract|subtract@kotlin.BooleanArray(kotlin.collections.Iterable<kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/take|take@kotlin.BooleanArray(kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/takeLast|takeLast@kotlin.BooleanArray(kotlin.Int){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Boolean> // kotlin.collections/toHashSet|toHashSet@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/toList|toList@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Boolean> // kotlin.collections/toMutableList|toMutableList@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Boolean> // kotlin.collections/toMutableSet|toMutableSet@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Boolean> // kotlin.collections/toSet|toSet@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Boolean> // kotlin.collections/toTypedArray|toTypedArray@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Boolean>): kotlin.collections/Set<kotlin/Boolean> // kotlin.collections/union|union@kotlin.BooleanArray(kotlin.collections.Iterable<kotlin.Boolean>){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Boolean>> // kotlin.collections/withIndex|withIndex@kotlin.BooleanArray(){}[0]
final fun (kotlin/BooleanArray).kotlin.collections/zip(kotlin/BooleanArray): kotlin.collections/List<kotlin/Pair<kotlin/Boolean, kotlin/Boolean>> // kotlin.collections/zip|zip@kotlin.BooleanArray(kotlin.BooleanArray){}[0]
final fun (kotlin/BooleanArray?).kotlin.collections/contentEquals(kotlin/BooleanArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.BooleanArray?(kotlin.BooleanArray?){}[0]
final fun (kotlin/BooleanArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.BooleanArray?(){}[0]
final fun (kotlin/BooleanArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.BooleanArray?(){}[0]
final fun (kotlin/Byte).kotlin.ranges/coerceAtLeast(kotlin/Byte): kotlin/Byte // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.Byte(kotlin.Byte){}[0]
final fun (kotlin/Byte).kotlin.ranges/coerceAtMost(kotlin/Byte): kotlin/Byte // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.Byte(kotlin.Byte){}[0]
final fun (kotlin/Byte).kotlin.ranges/coerceIn(kotlin/Byte, kotlin/Byte): kotlin/Byte // kotlin.ranges/coerceIn|coerceIn@kotlin.Byte(kotlin.Byte;kotlin.Byte){}[0]
final fun (kotlin/Byte).kotlin.ranges/downTo(kotlin/Byte): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Byte(kotlin.Byte){}[0]
final fun (kotlin/Byte).kotlin.ranges/downTo(kotlin/Int): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Byte(kotlin.Int){}[0]
final fun (kotlin/Byte).kotlin.ranges/downTo(kotlin/Long): kotlin.ranges/LongProgression // kotlin.ranges/downTo|downTo@kotlin.Byte(kotlin.Long){}[0]
final fun (kotlin/Byte).kotlin.ranges/downTo(kotlin/Short): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Byte(kotlin.Short){}[0]
final fun (kotlin/Byte).kotlin.ranges/until(kotlin/Byte): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Byte(kotlin.Byte){}[0]
final fun (kotlin/Byte).kotlin.ranges/until(kotlin/Int): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Byte(kotlin.Int){}[0]
final fun (kotlin/Byte).kotlin.ranges/until(kotlin/Long): kotlin.ranges/LongRange // kotlin.ranges/until|until@kotlin.Byte(kotlin.Long){}[0]
final fun (kotlin/Byte).kotlin.ranges/until(kotlin/Short): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Byte(kotlin.Short){}[0]
final fun (kotlin/Byte).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.Byte(kotlin.text.HexFormat){}[0]
final fun (kotlin/Byte).kotlin/rotateLeft(kotlin/Int): kotlin/Byte // kotlin/rotateLeft|rotateLeft@kotlin.Byte(kotlin.Int){}[0]
final fun (kotlin/Byte).kotlin/rotateRight(kotlin/Int): kotlin/Byte // kotlin/rotateRight|rotateRight@kotlin.Byte(kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Byte> // kotlin.collections/asIterable|asIterable@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Byte> // kotlin.collections/asSequence|asSequence@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/contains(kotlin/Byte): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.ByteArray(kotlin.Byte){}[0]
final fun (kotlin/ByteArray).kotlin.collections/copyOf(kotlin/Int): kotlin/ByteArray // kotlin.collections/copyOf|copyOf@kotlin.ByteArray(kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/ByteArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Byte> // kotlin.collections/distinct|distinct@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Byte> // kotlin.collections/drop|drop@kotlin.ByteArray(kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Byte> // kotlin.collections/dropLast|dropLast@kotlin.ByteArray(kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/fill(kotlin/Byte, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.ByteArray(kotlin.Byte;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/first(): kotlin/Byte // kotlin.collections/first|first@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/firstOrNull(): kotlin/Byte? // kotlin.collections/firstOrNull|firstOrNull@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Byte? // kotlin.collections/getOrNull|getOrNull@kotlin.ByteArray(kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/indexOf(kotlin/Byte): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.ByteArray(kotlin.Byte){}[0]
final fun (kotlin/ByteArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Byte>): kotlin.collections/Set<kotlin/Byte> // kotlin.collections/intersect|intersect@kotlin.ByteArray(kotlin.collections.Iterable<kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Byte, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.ByteArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Byte,kotlin.CharSequence>?){}[0]
final fun (kotlin/ByteArray).kotlin.collections/last(): kotlin/Byte // kotlin.collections/last|last@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/lastIndexOf(kotlin/Byte): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.ByteArray(kotlin.Byte){}[0]
final fun (kotlin/ByteArray).kotlin.collections/lastOrNull(): kotlin/Byte? // kotlin.collections/lastOrNull|lastOrNull@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/max(): kotlin/Byte // kotlin.collections/max|max@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/maxOrNull(): kotlin/Byte? // kotlin.collections/maxOrNull|maxOrNull@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Byte>): kotlin/Byte // kotlin.collections/maxWith|maxWith@kotlin.ByteArray(kotlin.Comparator<in|kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Byte>): kotlin/Byte? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.ByteArray(kotlin.Comparator<in|kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/min(): kotlin/Byte // kotlin.collections/min|min@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/minOrNull(): kotlin/Byte? // kotlin.collections/minOrNull|minOrNull@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Byte>): kotlin/Byte // kotlin.collections/minWith|minWith@kotlin.ByteArray(kotlin.Comparator<in|kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Byte>): kotlin/Byte? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.ByteArray(kotlin.Comparator<in|kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Byte>): kotlin/ByteArray // kotlin.collections/plus|plus@kotlin.ByteArray(kotlin.collections.Collection<kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/random(kotlin.random/Random): kotlin/Byte // kotlin.collections/random|random@kotlin.ByteArray(kotlin.random.Random){}[0]
final fun (kotlin/ByteArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Byte? // kotlin.collections/randomOrNull|randomOrNull@kotlin.ByteArray(kotlin.random.Random){}[0]
final fun (kotlin/ByteArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Byte> // kotlin.collections/reversed|reversed@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/reversedArray(): kotlin/ByteArray // kotlin.collections/reversedArray|reversedArray@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.ByteArray(kotlin.random.Random){}[0]
final fun (kotlin/ByteArray).kotlin.collections/single(): kotlin/Byte // kotlin.collections/single|single@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/singleOrNull(): kotlin/Byte? // kotlin.collections/singleOrNull|singleOrNull@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/slice|slice@kotlin.ByteArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Byte> // kotlin.collections/slice|slice@kotlin.ByteArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/ByteArray // kotlin.collections/sliceArray|sliceArray@kotlin.ByteArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/ByteArray // kotlin.collections/sliceArray|sliceArray@kotlin.ByteArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/Byte> // kotlin.collections/sorted|sorted@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sortedArray(): kotlin/ByteArray // kotlin.collections/sortedArray|sortedArray@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sortedArrayDescending(): kotlin/ByteArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/Byte> // kotlin.collections/sortedDescending|sortedDescending@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Byte>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/sortedWith|sortedWith@kotlin.ByteArray(kotlin.Comparator<in|kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Byte>): kotlin.collections/Set<kotlin/Byte> // kotlin.collections/subtract|subtract@kotlin.ByteArray(kotlin.collections.Iterable<kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Byte> // kotlin.collections/take|take@kotlin.ByteArray(kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Byte> // kotlin.collections/takeLast|takeLast@kotlin.ByteArray(kotlin.Int){}[0]
final fun (kotlin/ByteArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Byte> // kotlin.collections/toHashSet|toHashSet@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Byte> // kotlin.collections/toList|toList@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Byte> // kotlin.collections/toMutableList|toMutableList@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Byte> // kotlin.collections/toMutableSet|toMutableSet@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Byte> // kotlin.collections/toSet|toSet@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Byte> // kotlin.collections/toTypedArray|toTypedArray@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Byte>): kotlin.collections/Set<kotlin/Byte> // kotlin.collections/union|union@kotlin.ByteArray(kotlin.collections.Iterable<kotlin.Byte>){}[0]
final fun (kotlin/ByteArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Byte>> // kotlin.collections/withIndex|withIndex@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.collections/zip(kotlin/ByteArray): kotlin.collections/List<kotlin/Pair<kotlin/Byte, kotlin/Byte>> // kotlin.collections/zip|zip@kotlin.ByteArray(kotlin.ByteArray){}[0]
final fun (kotlin/ByteArray).kotlin.text/decodeToString(): kotlin/String // kotlin.text/decodeToString|decodeToString@kotlin.ByteArray(){}[0]
final fun (kotlin/ByteArray).kotlin.text/decodeToString(kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ...): kotlin/String // kotlin.text/decodeToString|decodeToString@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/ByteArray).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.ByteArray(kotlin.text.HexFormat){}[0]
final fun (kotlin/ByteArray).kotlin.text/toHexString(kotlin/Int = ..., kotlin/Int = ..., kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.text.HexFormat){}[0]
final fun (kotlin/ByteArray?).kotlin.collections/contentEquals(kotlin/ByteArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.ByteArray?(kotlin.ByteArray?){}[0]
final fun (kotlin/ByteArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.ByteArray?(){}[0]
final fun (kotlin/ByteArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.ByteArray?(){}[0]
final fun (kotlin/Char).kotlin.ranges/downTo(kotlin/Char): kotlin.ranges/CharProgression // kotlin.ranges/downTo|downTo@kotlin.Char(kotlin.Char){}[0]
final fun (kotlin/Char).kotlin.ranges/until(kotlin/Char): kotlin.ranges/CharRange // kotlin.ranges/until|until@kotlin.Char(kotlin.Char){}[0]
final fun (kotlin/Char).kotlin.text/digitToInt(): kotlin/Int // kotlin.text/digitToInt|digitToInt@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/digitToInt(kotlin/Int): kotlin/Int // kotlin.text/digitToInt|digitToInt@kotlin.Char(kotlin.Int){}[0]
final fun (kotlin/Char).kotlin.text/digitToIntOrNull(): kotlin/Int? // kotlin.text/digitToIntOrNull|digitToIntOrNull@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/digitToIntOrNull(kotlin/Int): kotlin/Int? // kotlin.text/digitToIntOrNull|digitToIntOrNull@kotlin.Char(kotlin.Int){}[0]
final fun (kotlin/Char).kotlin.text/equals(kotlin/Char, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/equals|equals@kotlin.Char(kotlin.Char;kotlin.Boolean){}[0]
final fun (kotlin/Char).kotlin.text/isDefined(): kotlin/Boolean // kotlin.text/isDefined|isDefined@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isDigit(): kotlin/Boolean // kotlin.text/isDigit|isDigit@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isHighSurrogate(): kotlin/Boolean // kotlin.text/isHighSurrogate|isHighSurrogate@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isISOControl(): kotlin/Boolean // kotlin.text/isISOControl|isISOControl@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isLetter(): kotlin/Boolean // kotlin.text/isLetter|isLetter@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isLetterOrDigit(): kotlin/Boolean // kotlin.text/isLetterOrDigit|isLetterOrDigit@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isLowSurrogate(): kotlin/Boolean // kotlin.text/isLowSurrogate|isLowSurrogate@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isLowerCase(): kotlin/Boolean // kotlin.text/isLowerCase|isLowerCase@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isSurrogate(): kotlin/Boolean // kotlin.text/isSurrogate|isSurrogate@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isTitleCase(): kotlin/Boolean // kotlin.text/isTitleCase|isTitleCase@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isUpperCase(): kotlin/Boolean // kotlin.text/isUpperCase|isUpperCase@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/isWhitespace(): kotlin/Boolean // kotlin.text/isWhitespace|isWhitespace@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/titlecase(): kotlin/String // kotlin.text/titlecase|titlecase@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/titlecaseChar(): kotlin/Char // kotlin.text/titlecaseChar|titlecaseChar@kotlin.Char(){}[0]
final fun (kotlin/Char).kotlin.text/uppercaseChar(): kotlin/Char // kotlin.text/uppercaseChar|uppercaseChar@kotlin.Char(){}[0]
final fun (kotlin/CharArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Char> // kotlin.collections/asIterable|asIterable@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Char> // kotlin.collections/asList|asList@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Char> // kotlin.collections/asSequence|asSequence@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/contains(kotlin/Char): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.CharArray(kotlin.Char){}[0]
final fun (kotlin/CharArray).kotlin.collections/copyOf(): kotlin/CharArray // kotlin.collections/copyOf|copyOf@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/copyOf(kotlin/Int): kotlin/CharArray // kotlin.collections/copyOf|copyOf@kotlin.CharArray(kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/CharArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.CharArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Char> // kotlin.collections/distinct|distinct@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Char> // kotlin.collections/drop|drop@kotlin.CharArray(kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Char> // kotlin.collections/dropLast|dropLast@kotlin.CharArray(kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/fill(kotlin/Char, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.CharArray(kotlin.Char;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/first(): kotlin/Char // kotlin.collections/first|first@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/firstOrNull(): kotlin/Char? // kotlin.collections/firstOrNull|firstOrNull@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Char? // kotlin.collections/getOrNull|getOrNull@kotlin.CharArray(kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/indexOf(kotlin/Char): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.CharArray(kotlin.Char){}[0]
final fun (kotlin/CharArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Char>): kotlin.collections/Set<kotlin/Char> // kotlin.collections/intersect|intersect@kotlin.CharArray(kotlin.collections.Iterable<kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Char, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.CharArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Char,kotlin.CharSequence>?){}[0]
final fun (kotlin/CharArray).kotlin.collections/last(): kotlin/Char // kotlin.collections/last|last@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/lastIndexOf(kotlin/Char): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.CharArray(kotlin.Char){}[0]
final fun (kotlin/CharArray).kotlin.collections/lastOrNull(): kotlin/Char? // kotlin.collections/lastOrNull|lastOrNull@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/max(): kotlin/Char // kotlin.collections/max|max@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/maxOrNull(): kotlin/Char? // kotlin.collections/maxOrNull|maxOrNull@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Char>): kotlin/Char // kotlin.collections/maxWith|maxWith@kotlin.CharArray(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Char>): kotlin/Char? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.CharArray(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/min(): kotlin/Char // kotlin.collections/min|min@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/minOrNull(): kotlin/Char? // kotlin.collections/minOrNull|minOrNull@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Char>): kotlin/Char // kotlin.collections/minWith|minWith@kotlin.CharArray(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Char>): kotlin/Char? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.CharArray(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Char>): kotlin/CharArray // kotlin.collections/plus|plus@kotlin.CharArray(kotlin.collections.Collection<kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/random(kotlin.random/Random): kotlin/Char // kotlin.collections/random|random@kotlin.CharArray(kotlin.random.Random){}[0]
final fun (kotlin/CharArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Char? // kotlin.collections/randomOrNull|randomOrNull@kotlin.CharArray(kotlin.random.Random){}[0]
final fun (kotlin/CharArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.CharArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Char> // kotlin.collections/reversed|reversed@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/reversedArray(): kotlin/CharArray // kotlin.collections/reversedArray|reversedArray@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.CharArray(kotlin.random.Random){}[0]
final fun (kotlin/CharArray).kotlin.collections/single(): kotlin/Char // kotlin.collections/single|single@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/singleOrNull(): kotlin/Char? // kotlin.collections/singleOrNull|singleOrNull@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Char> // kotlin.collections/slice|slice@kotlin.CharArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/CharArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Char> // kotlin.collections/slice|slice@kotlin.CharArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/CharArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/CharArray // kotlin.collections/sliceArray|sliceArray@kotlin.CharArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/CharArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/CharArray // kotlin.collections/sliceArray|sliceArray@kotlin.CharArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/CharArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.CharArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.CharArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/Char> // kotlin.collections/sorted|sorted@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/sortedArray(): kotlin/CharArray // kotlin.collections/sortedArray|sortedArray@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/sortedArrayDescending(): kotlin/CharArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/Char> // kotlin.collections/sortedDescending|sortedDescending@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Char>): kotlin.collections/List<kotlin/Char> // kotlin.collections/sortedWith|sortedWith@kotlin.CharArray(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Char>): kotlin.collections/Set<kotlin/Char> // kotlin.collections/subtract|subtract@kotlin.CharArray(kotlin.collections.Iterable<kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Char> // kotlin.collections/take|take@kotlin.CharArray(kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Char> // kotlin.collections/takeLast|takeLast@kotlin.CharArray(kotlin.Int){}[0]
final fun (kotlin/CharArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Char> // kotlin.collections/toHashSet|toHashSet@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Char> // kotlin.collections/toList|toList@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Char> // kotlin.collections/toMutableList|toMutableList@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Char> // kotlin.collections/toMutableSet|toMutableSet@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Char> // kotlin.collections/toSet|toSet@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Char> // kotlin.collections/toTypedArray|toTypedArray@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Char>): kotlin.collections/Set<kotlin/Char> // kotlin.collections/union|union@kotlin.CharArray(kotlin.collections.Iterable<kotlin.Char>){}[0]
final fun (kotlin/CharArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Char>> // kotlin.collections/withIndex|withIndex@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.collections/zip(kotlin/CharArray): kotlin.collections/List<kotlin/Pair<kotlin/Char, kotlin/Char>> // kotlin.collections/zip|zip@kotlin.CharArray(kotlin.CharArray){}[0]
final fun (kotlin/CharArray).kotlin.text/concatToString(): kotlin/String // kotlin.text/concatToString|concatToString@kotlin.CharArray(){}[0]
final fun (kotlin/CharArray).kotlin.text/concatToString(kotlin/Int = ..., kotlin/Int = ...): kotlin/String // kotlin.text/concatToString|concatToString@kotlin.CharArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/CharArray?).kotlin.collections/contentEquals(kotlin/CharArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.CharArray?(kotlin.CharArray?){}[0]
final fun (kotlin/CharArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.CharArray?(){}[0]
final fun (kotlin/CharArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.CharArray?(){}[0]
final fun (kotlin/CharSequence).kotlin.text/any(): kotlin/Boolean // kotlin.text/any|any@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/asIterable(): kotlin.collections/Iterable<kotlin/Char> // kotlin.text/asIterable|asIterable@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/asSequence(): kotlin.sequences/Sequence<kotlin/Char> // kotlin.text/asSequence|asSequence@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/chunked(kotlin/Int): kotlin.collections/List<kotlin/String> // kotlin.text/chunked|chunked@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/chunkedSequence(kotlin/Int): kotlin.sequences/Sequence<kotlin/String> // kotlin.text/chunkedSequence|chunkedSequence@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/commonPrefixWith(kotlin/CharSequence, kotlin/Boolean = ...): kotlin/String // kotlin.text/commonPrefixWith|commonPrefixWith@kotlin.CharSequence(kotlin.CharSequence;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/commonSuffixWith(kotlin/CharSequence, kotlin/Boolean = ...): kotlin/String // kotlin.text/commonSuffixWith|commonSuffixWith@kotlin.CharSequence(kotlin.CharSequence;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/contains(kotlin/Char, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/contains|contains@kotlin.CharSequence(kotlin.Char;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/contains(kotlin/CharSequence, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/contains|contains@kotlin.CharSequence(kotlin.CharSequence;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/drop(kotlin/Int): kotlin/CharSequence // kotlin.text/drop|drop@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/dropLast(kotlin/Int): kotlin/CharSequence // kotlin.text/dropLast|dropLast@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/endsWith(kotlin/Char, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/endsWith|endsWith@kotlin.CharSequence(kotlin.Char;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/endsWith(kotlin/CharSequence, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/endsWith|endsWith@kotlin.CharSequence(kotlin.CharSequence;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/findAnyOf(kotlin.collections/Collection<kotlin/String>, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Pair<kotlin/Int, kotlin/String>? // kotlin.text/findAnyOf|findAnyOf@kotlin.CharSequence(kotlin.collections.Collection<kotlin.String>;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/findLastAnyOf(kotlin.collections/Collection<kotlin/String>, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Pair<kotlin/Int, kotlin/String>? // kotlin.text/findLastAnyOf|findLastAnyOf@kotlin.CharSequence(kotlin.collections.Collection<kotlin.String>;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/first(): kotlin/Char // kotlin.text/first|first@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/firstOrNull(): kotlin/Char? // kotlin.text/firstOrNull|firstOrNull@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/getOrNull(kotlin/Int): kotlin/Char? // kotlin.text/getOrNull|getOrNull@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/hasSurrogatePairAt(kotlin/Int): kotlin/Boolean // kotlin.text/hasSurrogatePairAt|hasSurrogatePairAt@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/indexOf(kotlin/Char, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/indexOf|indexOf@kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/indexOf(kotlin/String, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/indexOf|indexOf@kotlin.CharSequence(kotlin.String;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/indexOfAny(kotlin.collections/Collection<kotlin/String>, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/indexOfAny|indexOfAny@kotlin.CharSequence(kotlin.collections.Collection<kotlin.String>;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/indexOfAny(kotlin/CharArray, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/indexOfAny|indexOfAny@kotlin.CharSequence(kotlin.CharArray;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/isBlank(): kotlin/Boolean // kotlin.text/isBlank|isBlank@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/iterator(): kotlin.collections/CharIterator // kotlin.text/iterator|iterator@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/last(): kotlin/Char // kotlin.text/last|last@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/lastIndexOf(kotlin/Char, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/lastIndexOf|lastIndexOf@kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/lastIndexOf(kotlin/String, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/lastIndexOf|lastIndexOf@kotlin.CharSequence(kotlin.String;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/lastIndexOfAny(kotlin.collections/Collection<kotlin/String>, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/lastIndexOfAny|lastIndexOfAny@kotlin.CharSequence(kotlin.collections.Collection<kotlin.String>;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/lastIndexOfAny(kotlin/CharArray, kotlin/Int = ..., kotlin/Boolean = ...): kotlin/Int // kotlin.text/lastIndexOfAny|lastIndexOfAny@kotlin.CharSequence(kotlin.CharArray;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/lastOrNull(): kotlin/Char? // kotlin.text/lastOrNull|lastOrNull@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/lineSequence(): kotlin.sequences/Sequence<kotlin/String> // kotlin.text/lineSequence|lineSequence@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/lines(): kotlin.collections/List<kotlin/String> // kotlin.text/lines|lines@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/max(): kotlin/Char // kotlin.text/max|max@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/maxOrNull(): kotlin/Char? // kotlin.text/maxOrNull|maxOrNull@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/maxWith(kotlin/Comparator<in kotlin/Char>): kotlin/Char // kotlin.text/maxWith|maxWith@kotlin.CharSequence(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharSequence).kotlin.text/maxWithOrNull(kotlin/Comparator<in kotlin/Char>): kotlin/Char? // kotlin.text/maxWithOrNull|maxWithOrNull@kotlin.CharSequence(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharSequence).kotlin.text/min(): kotlin/Char // kotlin.text/min|min@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/minOrNull(): kotlin/Char? // kotlin.text/minOrNull|minOrNull@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/minWith(kotlin/Comparator<in kotlin/Char>): kotlin/Char // kotlin.text/minWith|minWith@kotlin.CharSequence(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharSequence).kotlin.text/minWithOrNull(kotlin/Comparator<in kotlin/Char>): kotlin/Char? // kotlin.text/minWithOrNull|minWithOrNull@kotlin.CharSequence(kotlin.Comparator<in|kotlin.Char>){}[0]
final fun (kotlin/CharSequence).kotlin.text/none(): kotlin/Boolean // kotlin.text/none|none@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/padEnd(kotlin/Int, kotlin/Char = ...): kotlin/CharSequence // kotlin.text/padEnd|padEnd@kotlin.CharSequence(kotlin.Int;kotlin.Char){}[0]
final fun (kotlin/CharSequence).kotlin.text/padStart(kotlin/Int, kotlin/Char = ...): kotlin/CharSequence // kotlin.text/padStart|padStart@kotlin.CharSequence(kotlin.Int;kotlin.Char){}[0]
final fun (kotlin/CharSequence).kotlin.text/random(kotlin.random/Random): kotlin/Char // kotlin.text/random|random@kotlin.CharSequence(kotlin.random.Random){}[0]
final fun (kotlin/CharSequence).kotlin.text/randomOrNull(kotlin.random/Random): kotlin/Char? // kotlin.text/randomOrNull|randomOrNull@kotlin.CharSequence(kotlin.random.Random){}[0]
final fun (kotlin/CharSequence).kotlin.text/regionMatches(kotlin/Int, kotlin/CharSequence, kotlin/Int, kotlin/Int, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/regionMatches|regionMatches@kotlin.CharSequence(kotlin.Int;kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/removePrefix(kotlin/CharSequence): kotlin/CharSequence // kotlin.text/removePrefix|removePrefix@kotlin.CharSequence(kotlin.CharSequence){}[0]
final fun (kotlin/CharSequence).kotlin.text/removeRange(kotlin.ranges/IntRange): kotlin/CharSequence // kotlin.text/removeRange|removeRange@kotlin.CharSequence(kotlin.ranges.IntRange){}[0]
final fun (kotlin/CharSequence).kotlin.text/removeRange(kotlin/Int, kotlin/Int): kotlin/CharSequence // kotlin.text/removeRange|removeRange@kotlin.CharSequence(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/removeSuffix(kotlin/CharSequence): kotlin/CharSequence // kotlin.text/removeSuffix|removeSuffix@kotlin.CharSequence(kotlin.CharSequence){}[0]
final fun (kotlin/CharSequence).kotlin.text/removeSurrounding(kotlin/CharSequence): kotlin/CharSequence // kotlin.text/removeSurrounding|removeSurrounding@kotlin.CharSequence(kotlin.CharSequence){}[0]
final fun (kotlin/CharSequence).kotlin.text/removeSurrounding(kotlin/CharSequence, kotlin/CharSequence): kotlin/CharSequence // kotlin.text/removeSurrounding|removeSurrounding@kotlin.CharSequence(kotlin.CharSequence;kotlin.CharSequence){}[0]
final fun (kotlin/CharSequence).kotlin.text/repeat(kotlin/Int): kotlin/String // kotlin.text/repeat|repeat@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/replaceRange(kotlin.ranges/IntRange, kotlin/CharSequence): kotlin/CharSequence // kotlin.text/replaceRange|replaceRange@kotlin.CharSequence(kotlin.ranges.IntRange;kotlin.CharSequence){}[0]
final fun (kotlin/CharSequence).kotlin.text/replaceRange(kotlin/Int, kotlin/Int, kotlin/CharSequence): kotlin/CharSequence // kotlin.text/replaceRange|replaceRange@kotlin.CharSequence(kotlin.Int;kotlin.Int;kotlin.CharSequence){}[0]
final fun (kotlin/CharSequence).kotlin.text/reversed(): kotlin/CharSequence // kotlin.text/reversed|reversed@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/single(): kotlin/Char // kotlin.text/single|single@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/singleOrNull(): kotlin/Char? // kotlin.text/singleOrNull|singleOrNull@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin/CharSequence // kotlin.text/slice|slice@kotlin.CharSequence(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/CharSequence).kotlin.text/slice(kotlin.ranges/IntRange): kotlin/CharSequence // kotlin.text/slice|slice@kotlin.CharSequence(kotlin.ranges.IntRange){}[0]
final fun (kotlin/CharSequence).kotlin.text/split(kotlin/Array<out kotlin/String>..., kotlin/Boolean = ..., kotlin/Int = ...): kotlin.collections/List<kotlin/String> // kotlin.text/split|split@kotlin.CharSequence(kotlin.Array<out|kotlin.String>...;kotlin.Boolean;kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/split(kotlin/CharArray..., kotlin/Boolean = ..., kotlin/Int = ...): kotlin.collections/List<kotlin/String> // kotlin.text/split|split@kotlin.CharSequence(kotlin.CharArray...;kotlin.Boolean;kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/splitToSequence(kotlin/Array<out kotlin/String>..., kotlin/Boolean = ..., kotlin/Int = ...): kotlin.sequences/Sequence<kotlin/String> // kotlin.text/splitToSequence|splitToSequence@kotlin.CharSequence(kotlin.Array<out|kotlin.String>...;kotlin.Boolean;kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/splitToSequence(kotlin/CharArray..., kotlin/Boolean = ..., kotlin/Int = ...): kotlin.sequences/Sequence<kotlin/String> // kotlin.text/splitToSequence|splitToSequence@kotlin.CharSequence(kotlin.CharArray...;kotlin.Boolean;kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/startsWith(kotlin/Char, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/startsWith|startsWith@kotlin.CharSequence(kotlin.Char;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/startsWith(kotlin/CharSequence, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/startsWith|startsWith@kotlin.CharSequence(kotlin.CharSequence;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/startsWith(kotlin/CharSequence, kotlin/Int, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/startsWith|startsWith@kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/subSequence(kotlin.ranges/IntRange): kotlin/CharSequence // kotlin.text/subSequence|subSequence@kotlin.CharSequence(kotlin.ranges.IntRange){}[0]
final fun (kotlin/CharSequence).kotlin.text/substring(kotlin.ranges/IntRange): kotlin/String // kotlin.text/substring|substring@kotlin.CharSequence(kotlin.ranges.IntRange){}[0]
final fun (kotlin/CharSequence).kotlin.text/take(kotlin/Int): kotlin/CharSequence // kotlin.text/take|take@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/takeLast(kotlin/Int): kotlin/CharSequence // kotlin.text/takeLast|takeLast@kotlin.CharSequence(kotlin.Int){}[0]
final fun (kotlin/CharSequence).kotlin.text/toHashSet(): kotlin.collections/HashSet<kotlin/Char> // kotlin.text/toHashSet|toHashSet@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/toList(): kotlin.collections/List<kotlin/Char> // kotlin.text/toList|toList@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/toMutableList(): kotlin.collections/MutableList<kotlin/Char> // kotlin.text/toMutableList|toMutableList@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/toSet(): kotlin.collections/Set<kotlin/Char> // kotlin.text/toSet|toSet@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/trim(): kotlin/CharSequence // kotlin.text/trim|trim@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/trim(kotlin/CharArray...): kotlin/CharSequence // kotlin.text/trim|trim@kotlin.CharSequence(kotlin.CharArray...){}[0]
final fun (kotlin/CharSequence).kotlin.text/trimEnd(): kotlin/CharSequence // kotlin.text/trimEnd|trimEnd@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/trimEnd(kotlin/CharArray...): kotlin/CharSequence // kotlin.text/trimEnd|trimEnd@kotlin.CharSequence(kotlin.CharArray...){}[0]
final fun (kotlin/CharSequence).kotlin.text/trimStart(): kotlin/CharSequence // kotlin.text/trimStart|trimStart@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/trimStart(kotlin/CharArray...): kotlin/CharSequence // kotlin.text/trimStart|trimStart@kotlin.CharSequence(kotlin.CharArray...){}[0]
final fun (kotlin/CharSequence).kotlin.text/windowed(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ...): kotlin.collections/List<kotlin/String> // kotlin.text/windowed|windowed@kotlin.CharSequence(kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/windowedSequence(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ...): kotlin.sequences/Sequence<kotlin/String> // kotlin.text/windowedSequence|windowedSequence@kotlin.CharSequence(kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/CharSequence).kotlin.text/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Char>> // kotlin.text/withIndex|withIndex@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlin.text/zip(kotlin/CharSequence): kotlin.collections/List<kotlin/Pair<kotlin/Char, kotlin/Char>> // kotlin.text/zip|zip@kotlin.CharSequence(kotlin.CharSequence){}[0]
final fun (kotlin/CharSequence).kotlin.text/zipWithNext(): kotlin.collections/List<kotlin/Pair<kotlin/Char, kotlin/Char>> // kotlin.text/zipWithNext|zipWithNext@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence?).kotlin.text/contentEquals(kotlin/CharSequence?): kotlin/Boolean // kotlin.text/contentEquals|contentEquals@kotlin.CharSequence?(kotlin.CharSequence?){}[0]
final fun (kotlin/CharSequence?).kotlin.text/contentEquals(kotlin/CharSequence?, kotlin/Boolean): kotlin/Boolean // kotlin.text/contentEquals|contentEquals@kotlin.CharSequence?(kotlin.CharSequence?;kotlin.Boolean){}[0]
final fun (kotlin/Double).kotlin.math/nextDown(): kotlin/Double // kotlin.math/nextDown|nextDown@kotlin.Double(){}[0]
final fun (kotlin/Double).kotlin.math/nextTowards(kotlin/Double): kotlin/Double // kotlin.math/nextTowards|nextTowards@kotlin.Double(kotlin.Double){}[0]
final fun (kotlin/Double).kotlin.math/nextUp(): kotlin/Double // kotlin.math/nextUp|nextUp@kotlin.Double(){}[0]
final fun (kotlin/Double).kotlin.math/roundToInt(): kotlin/Int // kotlin.math/roundToInt|roundToInt@kotlin.Double(){}[0]
final fun (kotlin/Double).kotlin.math/roundToLong(): kotlin/Long // kotlin.math/roundToLong|roundToLong@kotlin.Double(){}[0]
final fun (kotlin/Double).kotlin.math/withSign(kotlin/Double): kotlin/Double // kotlin.math/withSign|withSign@kotlin.Double(kotlin.Double){}[0]
final fun (kotlin/Double).kotlin.ranges/coerceAtLeast(kotlin/Double): kotlin/Double // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.Double(kotlin.Double){}[0]
final fun (kotlin/Double).kotlin.ranges/coerceAtMost(kotlin/Double): kotlin/Double // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.Double(kotlin.Double){}[0]
final fun (kotlin/Double).kotlin.ranges/coerceIn(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.ranges/coerceIn|coerceIn@kotlin.Double(kotlin.Double;kotlin.Double){}[0]
final fun (kotlin/Double).kotlin.ranges/rangeTo(kotlin/Double): kotlin.ranges/ClosedFloatingPointRange<kotlin/Double> // kotlin.ranges/rangeTo|rangeTo@kotlin.Double(kotlin.Double){}[0]
final fun (kotlin/Double).kotlin.ranges/rangeUntil(kotlin/Double): kotlin.ranges/OpenEndRange<kotlin/Double> // kotlin.ranges/rangeUntil|rangeUntil@kotlin.Double(kotlin.Double){}[0]
final fun (kotlin/Double).kotlin.time/toDuration(kotlin.time/DurationUnit): kotlin.time/Duration // kotlin.time/toDuration|toDuration@kotlin.Double(kotlin.time.DurationUnit){}[0]
final fun (kotlin/Double).kotlin/isFinite(): kotlin/Boolean // kotlin/isFinite|isFinite@kotlin.Double(){}[0]
final fun (kotlin/Double).kotlin/isInfinite(): kotlin/Boolean // kotlin/isInfinite|isInfinite@kotlin.Double(){}[0]
final fun (kotlin/Double).kotlin/isNaN(): kotlin/Boolean // kotlin/isNaN|isNaN@kotlin.Double(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Double> // kotlin.collections/asIterable|asIterable@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Double> // kotlin.collections/asSequence|asSequence@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/contains(kotlin/Double): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.DoubleArray(kotlin.Double){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/copyOf(kotlin/Int): kotlin/DoubleArray // kotlin.collections/copyOf|copyOf@kotlin.DoubleArray(kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/DoubleArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.DoubleArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Double> // kotlin.collections/distinct|distinct@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Double> // kotlin.collections/drop|drop@kotlin.DoubleArray(kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Double> // kotlin.collections/dropLast|dropLast@kotlin.DoubleArray(kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/fill(kotlin/Double, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.DoubleArray(kotlin.Double;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/first(): kotlin/Double // kotlin.collections/first|first@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/firstOrNull(): kotlin/Double? // kotlin.collections/firstOrNull|firstOrNull@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Double? // kotlin.collections/getOrNull|getOrNull@kotlin.DoubleArray(kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/indexOf(kotlin/Double): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.DoubleArray(kotlin.Double){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Double>): kotlin.collections/Set<kotlin/Double> // kotlin.collections/intersect|intersect@kotlin.DoubleArray(kotlin.collections.Iterable<kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Double, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.DoubleArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Double,kotlin.CharSequence>?){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/last(): kotlin/Double // kotlin.collections/last|last@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/lastIndexOf(kotlin/Double): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.DoubleArray(kotlin.Double){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/lastOrNull(): kotlin/Double? // kotlin.collections/lastOrNull|lastOrNull@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/max(): kotlin/Double // kotlin.collections/max|max@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/maxOrNull(): kotlin/Double? // kotlin.collections/maxOrNull|maxOrNull@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Double>): kotlin/Double // kotlin.collections/maxWith|maxWith@kotlin.DoubleArray(kotlin.Comparator<in|kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Double>): kotlin/Double? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.DoubleArray(kotlin.Comparator<in|kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/min(): kotlin/Double // kotlin.collections/min|min@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/minOrNull(): kotlin/Double? // kotlin.collections/minOrNull|minOrNull@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Double>): kotlin/Double // kotlin.collections/minWith|minWith@kotlin.DoubleArray(kotlin.Comparator<in|kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Double>): kotlin/Double? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.DoubleArray(kotlin.Comparator<in|kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Double>): kotlin/DoubleArray // kotlin.collections/plus|plus@kotlin.DoubleArray(kotlin.collections.Collection<kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/random(kotlin.random/Random): kotlin/Double // kotlin.collections/random|random@kotlin.DoubleArray(kotlin.random.Random){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Double? // kotlin.collections/randomOrNull|randomOrNull@kotlin.DoubleArray(kotlin.random.Random){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.DoubleArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Double> // kotlin.collections/reversed|reversed@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/reversedArray(): kotlin/DoubleArray // kotlin.collections/reversedArray|reversedArray@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.DoubleArray(kotlin.random.Random){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/single(): kotlin/Double // kotlin.collections/single|single@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/singleOrNull(): kotlin/Double? // kotlin.collections/singleOrNull|singleOrNull@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Double> // kotlin.collections/slice|slice@kotlin.DoubleArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Double> // kotlin.collections/slice|slice@kotlin.DoubleArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/DoubleArray // kotlin.collections/sliceArray|sliceArray@kotlin.DoubleArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/DoubleArray // kotlin.collections/sliceArray|sliceArray@kotlin.DoubleArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.DoubleArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.DoubleArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/Double> // kotlin.collections/sorted|sorted@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sortedArray(): kotlin/DoubleArray // kotlin.collections/sortedArray|sortedArray@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sortedArrayDescending(): kotlin/DoubleArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/Double> // kotlin.collections/sortedDescending|sortedDescending@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Double>): kotlin.collections/List<kotlin/Double> // kotlin.collections/sortedWith|sortedWith@kotlin.DoubleArray(kotlin.Comparator<in|kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Double>): kotlin.collections/Set<kotlin/Double> // kotlin.collections/subtract|subtract@kotlin.DoubleArray(kotlin.collections.Iterable<kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/sum(): kotlin/Double // kotlin.collections/sum|sum@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Double> // kotlin.collections/take|take@kotlin.DoubleArray(kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Double> // kotlin.collections/takeLast|takeLast@kotlin.DoubleArray(kotlin.Int){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Double> // kotlin.collections/toHashSet|toHashSet@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Double> // kotlin.collections/toList|toList@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Double> // kotlin.collections/toMutableList|toMutableList@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Double> // kotlin.collections/toMutableSet|toMutableSet@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Double> // kotlin.collections/toSet|toSet@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Double> // kotlin.collections/toTypedArray|toTypedArray@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Double>): kotlin.collections/Set<kotlin/Double> // kotlin.collections/union|union@kotlin.DoubleArray(kotlin.collections.Iterable<kotlin.Double>){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Double>> // kotlin.collections/withIndex|withIndex@kotlin.DoubleArray(){}[0]
final fun (kotlin/DoubleArray).kotlin.collections/zip(kotlin/DoubleArray): kotlin.collections/List<kotlin/Pair<kotlin/Double, kotlin/Double>> // kotlin.collections/zip|zip@kotlin.DoubleArray(kotlin.DoubleArray){}[0]
final fun (kotlin/DoubleArray?).kotlin.collections/contentEquals(kotlin/DoubleArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.DoubleArray?(kotlin.DoubleArray?){}[0]
final fun (kotlin/DoubleArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.DoubleArray?(){}[0]
final fun (kotlin/DoubleArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.DoubleArray?(){}[0]
final fun (kotlin/Float).kotlin.ranges/coerceAtLeast(kotlin/Float): kotlin/Float // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.Float(kotlin.Float){}[0]
final fun (kotlin/Float).kotlin.ranges/coerceAtMost(kotlin/Float): kotlin/Float // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.Float(kotlin.Float){}[0]
final fun (kotlin/Float).kotlin.ranges/coerceIn(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.ranges/coerceIn|coerceIn@kotlin.Float(kotlin.Float;kotlin.Float){}[0]
final fun (kotlin/Float).kotlin.ranges/rangeTo(kotlin/Float): kotlin.ranges/ClosedFloatingPointRange<kotlin/Float> // kotlin.ranges/rangeTo|rangeTo@kotlin.Float(kotlin.Float){}[0]
final fun (kotlin/Float).kotlin.ranges/rangeUntil(kotlin/Float): kotlin.ranges/OpenEndRange<kotlin/Float> // kotlin.ranges/rangeUntil|rangeUntil@kotlin.Float(kotlin.Float){}[0]
final fun (kotlin/Float).kotlin/isFinite(): kotlin/Boolean // kotlin/isFinite|isFinite@kotlin.Float(){}[0]
final fun (kotlin/Float).kotlin/isInfinite(): kotlin/Boolean // kotlin/isInfinite|isInfinite@kotlin.Float(){}[0]
final fun (kotlin/Float).kotlin/isNaN(): kotlin/Boolean // kotlin/isNaN|isNaN@kotlin.Float(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Float> // kotlin.collections/asIterable|asIterable@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Float> // kotlin.collections/asSequence|asSequence@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/contains(kotlin/Float): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.FloatArray(kotlin.Float){}[0]
final fun (kotlin/FloatArray).kotlin.collections/copyOf(kotlin/Int): kotlin/FloatArray // kotlin.collections/copyOf|copyOf@kotlin.FloatArray(kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/FloatArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.FloatArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Float> // kotlin.collections/distinct|distinct@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Float> // kotlin.collections/drop|drop@kotlin.FloatArray(kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Float> // kotlin.collections/dropLast|dropLast@kotlin.FloatArray(kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/fill(kotlin/Float, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.FloatArray(kotlin.Float;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/first(): kotlin/Float // kotlin.collections/first|first@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/firstOrNull(): kotlin/Float? // kotlin.collections/firstOrNull|firstOrNull@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Float? // kotlin.collections/getOrNull|getOrNull@kotlin.FloatArray(kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/indexOf(kotlin/Float): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.FloatArray(kotlin.Float){}[0]
final fun (kotlin/FloatArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Float>): kotlin.collections/Set<kotlin/Float> // kotlin.collections/intersect|intersect@kotlin.FloatArray(kotlin.collections.Iterable<kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Float, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.FloatArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Float,kotlin.CharSequence>?){}[0]
final fun (kotlin/FloatArray).kotlin.collections/last(): kotlin/Float // kotlin.collections/last|last@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/lastIndexOf(kotlin/Float): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.FloatArray(kotlin.Float){}[0]
final fun (kotlin/FloatArray).kotlin.collections/lastOrNull(): kotlin/Float? // kotlin.collections/lastOrNull|lastOrNull@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/max(): kotlin/Float // kotlin.collections/max|max@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/maxOrNull(): kotlin/Float? // kotlin.collections/maxOrNull|maxOrNull@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Float>): kotlin/Float // kotlin.collections/maxWith|maxWith@kotlin.FloatArray(kotlin.Comparator<in|kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Float>): kotlin/Float? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.FloatArray(kotlin.Comparator<in|kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/min(): kotlin/Float // kotlin.collections/min|min@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/minOrNull(): kotlin/Float? // kotlin.collections/minOrNull|minOrNull@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Float>): kotlin/Float // kotlin.collections/minWith|minWith@kotlin.FloatArray(kotlin.Comparator<in|kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Float>): kotlin/Float? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.FloatArray(kotlin.Comparator<in|kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Float>): kotlin/FloatArray // kotlin.collections/plus|plus@kotlin.FloatArray(kotlin.collections.Collection<kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/random(kotlin.random/Random): kotlin/Float // kotlin.collections/random|random@kotlin.FloatArray(kotlin.random.Random){}[0]
final fun (kotlin/FloatArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Float? // kotlin.collections/randomOrNull|randomOrNull@kotlin.FloatArray(kotlin.random.Random){}[0]
final fun (kotlin/FloatArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.FloatArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Float> // kotlin.collections/reversed|reversed@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/reversedArray(): kotlin/FloatArray // kotlin.collections/reversedArray|reversedArray@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.FloatArray(kotlin.random.Random){}[0]
final fun (kotlin/FloatArray).kotlin.collections/single(): kotlin/Float // kotlin.collections/single|single@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/singleOrNull(): kotlin/Float? // kotlin.collections/singleOrNull|singleOrNull@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Float> // kotlin.collections/slice|slice@kotlin.FloatArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Float> // kotlin.collections/slice|slice@kotlin.FloatArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/FloatArray // kotlin.collections/sliceArray|sliceArray@kotlin.FloatArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/FloatArray // kotlin.collections/sliceArray|sliceArray@kotlin.FloatArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.FloatArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.FloatArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/Float> // kotlin.collections/sorted|sorted@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sortedArray(): kotlin/FloatArray // kotlin.collections/sortedArray|sortedArray@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sortedArrayDescending(): kotlin/FloatArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/Float> // kotlin.collections/sortedDescending|sortedDescending@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Float>): kotlin.collections/List<kotlin/Float> // kotlin.collections/sortedWith|sortedWith@kotlin.FloatArray(kotlin.Comparator<in|kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Float>): kotlin.collections/Set<kotlin/Float> // kotlin.collections/subtract|subtract@kotlin.FloatArray(kotlin.collections.Iterable<kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/sum(): kotlin/Float // kotlin.collections/sum|sum@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Float> // kotlin.collections/take|take@kotlin.FloatArray(kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Float> // kotlin.collections/takeLast|takeLast@kotlin.FloatArray(kotlin.Int){}[0]
final fun (kotlin/FloatArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Float> // kotlin.collections/toHashSet|toHashSet@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Float> // kotlin.collections/toList|toList@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Float> // kotlin.collections/toMutableList|toMutableList@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Float> // kotlin.collections/toMutableSet|toMutableSet@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Float> // kotlin.collections/toSet|toSet@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Float> // kotlin.collections/toTypedArray|toTypedArray@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Float>): kotlin.collections/Set<kotlin/Float> // kotlin.collections/union|union@kotlin.FloatArray(kotlin.collections.Iterable<kotlin.Float>){}[0]
final fun (kotlin/FloatArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Float>> // kotlin.collections/withIndex|withIndex@kotlin.FloatArray(){}[0]
final fun (kotlin/FloatArray).kotlin.collections/zip(kotlin/FloatArray): kotlin.collections/List<kotlin/Pair<kotlin/Float, kotlin/Float>> // kotlin.collections/zip|zip@kotlin.FloatArray(kotlin.FloatArray){}[0]
final fun (kotlin/FloatArray?).kotlin.collections/contentEquals(kotlin/FloatArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.FloatArray?(kotlin.FloatArray?){}[0]
final fun (kotlin/FloatArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.FloatArray?(){}[0]
final fun (kotlin/FloatArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.FloatArray?(){}[0]
final fun (kotlin/Int).kotlin.ranges/coerceAtLeast(kotlin/Int): kotlin/Int // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.Int(kotlin.Int){}[0]
final fun (kotlin/Int).kotlin.ranges/coerceAtMost(kotlin/Int): kotlin/Int // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.Int(kotlin.Int){}[0]
final fun (kotlin/Int).kotlin.ranges/coerceIn(kotlin.ranges/ClosedRange<kotlin/Int>): kotlin/Int // kotlin.ranges/coerceIn|coerceIn@kotlin.Int(kotlin.ranges.ClosedRange<kotlin.Int>){}[0]
final fun (kotlin/Int).kotlin.ranges/coerceIn(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.ranges/coerceIn|coerceIn@kotlin.Int(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/Int).kotlin.ranges/downTo(kotlin/Byte): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Int(kotlin.Byte){}[0]
final fun (kotlin/Int).kotlin.ranges/downTo(kotlin/Int): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Int(kotlin.Int){}[0]
final fun (kotlin/Int).kotlin.ranges/downTo(kotlin/Long): kotlin.ranges/LongProgression // kotlin.ranges/downTo|downTo@kotlin.Int(kotlin.Long){}[0]
final fun (kotlin/Int).kotlin.ranges/downTo(kotlin/Short): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Int(kotlin.Short){}[0]
final fun (kotlin/Int).kotlin.ranges/until(kotlin/Byte): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Int(kotlin.Byte){}[0]
final fun (kotlin/Int).kotlin.ranges/until(kotlin/Int): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Int(kotlin.Int){}[0]
final fun (kotlin/Int).kotlin.ranges/until(kotlin/Long): kotlin.ranges/LongRange // kotlin.ranges/until|until@kotlin.Int(kotlin.Long){}[0]
final fun (kotlin/Int).kotlin.ranges/until(kotlin/Short): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Int(kotlin.Short){}[0]
final fun (kotlin/Int).kotlin.text/digitToChar(): kotlin/Char // kotlin.text/digitToChar|digitToChar@kotlin.Int(){}[0]
final fun (kotlin/Int).kotlin.text/digitToChar(kotlin/Int): kotlin/Char // kotlin.text/digitToChar|digitToChar@kotlin.Int(kotlin.Int){}[0]
final fun (kotlin/Int).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.Int(kotlin.text.HexFormat){}[0]
final fun (kotlin/Int).kotlin.time/toDuration(kotlin.time/DurationUnit): kotlin.time/Duration // kotlin.time/toDuration|toDuration@kotlin.Int(kotlin.time.DurationUnit){}[0]
final fun (kotlin/Int).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.Int(){}[0]
final fun (kotlin/Int).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.Int(){}[0]
final fun (kotlin/Int).kotlin/rotateLeft(kotlin/Int): kotlin/Int // kotlin/rotateLeft|rotateLeft@kotlin.Int(kotlin.Int){}[0]
final fun (kotlin/Int).kotlin/rotateRight(kotlin/Int): kotlin/Int // kotlin/rotateRight|rotateRight@kotlin.Int(kotlin.Int){}[0]
final fun (kotlin/Int).kotlin/takeHighestOneBit(): kotlin/Int // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.Int(){}[0]
final fun (kotlin/Int).kotlin/takeLowestOneBit(): kotlin/Int // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.Int(){}[0]
final fun (kotlin/IntArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Int> // kotlin.collections/asIterable|asIterable@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Int> // kotlin.collections/asSequence|asSequence@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/contains(kotlin/Int): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/copyOf(kotlin/Int): kotlin/IntArray // kotlin.collections/copyOf|copyOf@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/IntArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.IntArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Int> // kotlin.collections/distinct|distinct@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Int> // kotlin.collections/drop|drop@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Int> // kotlin.collections/dropLast|dropLast@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/fill(kotlin/Int, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.IntArray(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/first(): kotlin/Int // kotlin.collections/first|first@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/firstOrNull(): kotlin/Int? // kotlin.collections/firstOrNull|firstOrNull@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Int? // kotlin.collections/getOrNull|getOrNull@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/indexOf(kotlin/Int): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/Set<kotlin/Int> // kotlin.collections/intersect|intersect@kotlin.IntArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Int, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.IntArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Int,kotlin.CharSequence>?){}[0]
final fun (kotlin/IntArray).kotlin.collections/last(): kotlin/Int // kotlin.collections/last|last@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/lastIndexOf(kotlin/Int): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/lastOrNull(): kotlin/Int? // kotlin.collections/lastOrNull|lastOrNull@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/max(): kotlin/Int // kotlin.collections/max|max@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/maxOrNull(): kotlin/Int? // kotlin.collections/maxOrNull|maxOrNull@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Int>): kotlin/Int // kotlin.collections/maxWith|maxWith@kotlin.IntArray(kotlin.Comparator<in|kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Int>): kotlin/Int? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.IntArray(kotlin.Comparator<in|kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/min(): kotlin/Int // kotlin.collections/min|min@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/minOrNull(): kotlin/Int? // kotlin.collections/minOrNull|minOrNull@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Int>): kotlin/Int // kotlin.collections/minWith|minWith@kotlin.IntArray(kotlin.Comparator<in|kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Int>): kotlin/Int? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.IntArray(kotlin.Comparator<in|kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Int>): kotlin/IntArray // kotlin.collections/plus|plus@kotlin.IntArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/random(kotlin.random/Random): kotlin/Int // kotlin.collections/random|random@kotlin.IntArray(kotlin.random.Random){}[0]
final fun (kotlin/IntArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Int? // kotlin.collections/randomOrNull|randomOrNull@kotlin.IntArray(kotlin.random.Random){}[0]
final fun (kotlin/IntArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.IntArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Int> // kotlin.collections/reversed|reversed@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/reversedArray(): kotlin/IntArray // kotlin.collections/reversedArray|reversedArray@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.IntArray(kotlin.random.Random){}[0]
final fun (kotlin/IntArray).kotlin.collections/single(): kotlin/Int // kotlin.collections/single|single@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/singleOrNull(): kotlin/Int? // kotlin.collections/singleOrNull|singleOrNull@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Int> // kotlin.collections/slice|slice@kotlin.IntArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Int> // kotlin.collections/slice|slice@kotlin.IntArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/IntArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/IntArray // kotlin.collections/sliceArray|sliceArray@kotlin.IntArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/IntArray // kotlin.collections/sliceArray|sliceArray@kotlin.IntArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/IntArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.IntArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.IntArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/Int> // kotlin.collections/sorted|sorted@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/sortedArray(): kotlin/IntArray // kotlin.collections/sortedArray|sortedArray@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/sortedArrayDescending(): kotlin/IntArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/Int> // kotlin.collections/sortedDescending|sortedDescending@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Int>): kotlin.collections/List<kotlin/Int> // kotlin.collections/sortedWith|sortedWith@kotlin.IntArray(kotlin.Comparator<in|kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/Set<kotlin/Int> // kotlin.collections/subtract|subtract@kotlin.IntArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Int> // kotlin.collections/take|take@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Int> // kotlin.collections/takeLast|takeLast@kotlin.IntArray(kotlin.Int){}[0]
final fun (kotlin/IntArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Int> // kotlin.collections/toHashSet|toHashSet@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Int> // kotlin.collections/toList|toList@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Int> // kotlin.collections/toMutableList|toMutableList@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Int> // kotlin.collections/toMutableSet|toMutableSet@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Int> // kotlin.collections/toSet|toSet@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Int> // kotlin.collections/toTypedArray|toTypedArray@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/Set<kotlin/Int> // kotlin.collections/union|union@kotlin.IntArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/IntArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Int>> // kotlin.collections/withIndex|withIndex@kotlin.IntArray(){}[0]
final fun (kotlin/IntArray).kotlin.collections/zip(kotlin/IntArray): kotlin.collections/List<kotlin/Pair<kotlin/Int, kotlin/Int>> // kotlin.collections/zip|zip@kotlin.IntArray(kotlin.IntArray){}[0]
final fun (kotlin/IntArray?).kotlin.collections/contentEquals(kotlin/IntArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.IntArray?(kotlin.IntArray?){}[0]
final fun (kotlin/IntArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.IntArray?(){}[0]
final fun (kotlin/IntArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.IntArray?(){}[0]
final fun (kotlin/Long).kotlin.ranges/coerceAtLeast(kotlin/Long): kotlin/Long // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.Long(kotlin.Long){}[0]
final fun (kotlin/Long).kotlin.ranges/coerceAtMost(kotlin/Long): kotlin/Long // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.Long(kotlin.Long){}[0]
final fun (kotlin/Long).kotlin.ranges/coerceIn(kotlin.ranges/ClosedRange<kotlin/Long>): kotlin/Long // kotlin.ranges/coerceIn|coerceIn@kotlin.Long(kotlin.ranges.ClosedRange<kotlin.Long>){}[0]
final fun (kotlin/Long).kotlin.ranges/coerceIn(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.ranges/coerceIn|coerceIn@kotlin.Long(kotlin.Long;kotlin.Long){}[0]
final fun (kotlin/Long).kotlin.ranges/downTo(kotlin/Byte): kotlin.ranges/LongProgression // kotlin.ranges/downTo|downTo@kotlin.Long(kotlin.Byte){}[0]
final fun (kotlin/Long).kotlin.ranges/downTo(kotlin/Int): kotlin.ranges/LongProgression // kotlin.ranges/downTo|downTo@kotlin.Long(kotlin.Int){}[0]
final fun (kotlin/Long).kotlin.ranges/downTo(kotlin/Long): kotlin.ranges/LongProgression // kotlin.ranges/downTo|downTo@kotlin.Long(kotlin.Long){}[0]
final fun (kotlin/Long).kotlin.ranges/downTo(kotlin/Short): kotlin.ranges/LongProgression // kotlin.ranges/downTo|downTo@kotlin.Long(kotlin.Short){}[0]
final fun (kotlin/Long).kotlin.ranges/until(kotlin/Byte): kotlin.ranges/LongRange // kotlin.ranges/until|until@kotlin.Long(kotlin.Byte){}[0]
final fun (kotlin/Long).kotlin.ranges/until(kotlin/Int): kotlin.ranges/LongRange // kotlin.ranges/until|until@kotlin.Long(kotlin.Int){}[0]
final fun (kotlin/Long).kotlin.ranges/until(kotlin/Long): kotlin.ranges/LongRange // kotlin.ranges/until|until@kotlin.Long(kotlin.Long){}[0]
final fun (kotlin/Long).kotlin.ranges/until(kotlin/Short): kotlin.ranges/LongRange // kotlin.ranges/until|until@kotlin.Long(kotlin.Short){}[0]
final fun (kotlin/Long).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.Long(kotlin.text.HexFormat){}[0]
final fun (kotlin/Long).kotlin.time/toDuration(kotlin.time/DurationUnit): kotlin.time/Duration // kotlin.time/toDuration|toDuration@kotlin.Long(kotlin.time.DurationUnit){}[0]
final fun (kotlin/Long).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.Long(){}[0]
final fun (kotlin/Long).kotlin/rotateLeft(kotlin/Int): kotlin/Long // kotlin/rotateLeft|rotateLeft@kotlin.Long(kotlin.Int){}[0]
final fun (kotlin/Long).kotlin/takeHighestOneBit(): kotlin/Long // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.Long(){}[0]
final fun (kotlin/Long).kotlin/takeLowestOneBit(): kotlin/Long // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.Long(){}[0]
final fun (kotlin/LongArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Long> // kotlin.collections/asIterable|asIterable@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Long> // kotlin.collections/asSequence|asSequence@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/contains(kotlin/Long): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.LongArray(kotlin.Long){}[0]
final fun (kotlin/LongArray).kotlin.collections/copyOf(): kotlin/LongArray // kotlin.collections/copyOf|copyOf@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/copyOf(kotlin/Int): kotlin/LongArray // kotlin.collections/copyOf|copyOf@kotlin.LongArray(kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/LongArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.LongArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Long> // kotlin.collections/distinct|distinct@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Long> // kotlin.collections/drop|drop@kotlin.LongArray(kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Long> // kotlin.collections/dropLast|dropLast@kotlin.LongArray(kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/fill(kotlin/Long, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.LongArray(kotlin.Long;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/first(): kotlin/Long // kotlin.collections/first|first@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/firstOrNull(): kotlin/Long? // kotlin.collections/firstOrNull|firstOrNull@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Long? // kotlin.collections/getOrNull|getOrNull@kotlin.LongArray(kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/indexOf(kotlin/Long): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.LongArray(kotlin.Long){}[0]
final fun (kotlin/LongArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Long>): kotlin.collections/Set<kotlin/Long> // kotlin.collections/intersect|intersect@kotlin.LongArray(kotlin.collections.Iterable<kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Long, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.LongArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Long,kotlin.CharSequence>?){}[0]
final fun (kotlin/LongArray).kotlin.collections/last(): kotlin/Long // kotlin.collections/last|last@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/lastIndexOf(kotlin/Long): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.LongArray(kotlin.Long){}[0]
final fun (kotlin/LongArray).kotlin.collections/lastOrNull(): kotlin/Long? // kotlin.collections/lastOrNull|lastOrNull@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/max(): kotlin/Long // kotlin.collections/max|max@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/maxOrNull(): kotlin/Long? // kotlin.collections/maxOrNull|maxOrNull@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Long>): kotlin/Long // kotlin.collections/maxWith|maxWith@kotlin.LongArray(kotlin.Comparator<in|kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Long>): kotlin/Long? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.LongArray(kotlin.Comparator<in|kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/min(): kotlin/Long // kotlin.collections/min|min@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/minOrNull(): kotlin/Long? // kotlin.collections/minOrNull|minOrNull@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Long>): kotlin/Long // kotlin.collections/minWith|minWith@kotlin.LongArray(kotlin.Comparator<in|kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Long>): kotlin/Long? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.LongArray(kotlin.Comparator<in|kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Long>): kotlin/LongArray // kotlin.collections/plus|plus@kotlin.LongArray(kotlin.collections.Collection<kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/random(kotlin.random/Random): kotlin/Long // kotlin.collections/random|random@kotlin.LongArray(kotlin.random.Random){}[0]
final fun (kotlin/LongArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Long? // kotlin.collections/randomOrNull|randomOrNull@kotlin.LongArray(kotlin.random.Random){}[0]
final fun (kotlin/LongArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.LongArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Long> // kotlin.collections/reversed|reversed@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/reversedArray(): kotlin/LongArray // kotlin.collections/reversedArray|reversedArray@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.LongArray(kotlin.random.Random){}[0]
final fun (kotlin/LongArray).kotlin.collections/single(): kotlin/Long // kotlin.collections/single|single@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/singleOrNull(): kotlin/Long? // kotlin.collections/singleOrNull|singleOrNull@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Long> // kotlin.collections/slice|slice@kotlin.LongArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/LongArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Long> // kotlin.collections/slice|slice@kotlin.LongArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/LongArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/LongArray // kotlin.collections/sliceArray|sliceArray@kotlin.LongArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/LongArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/LongArray // kotlin.collections/sliceArray|sliceArray@kotlin.LongArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/LongArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.LongArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.LongArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/Long> // kotlin.collections/sorted|sorted@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/sortedArray(): kotlin/LongArray // kotlin.collections/sortedArray|sortedArray@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/sortedArrayDescending(): kotlin/LongArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/Long> // kotlin.collections/sortedDescending|sortedDescending@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Long>): kotlin.collections/List<kotlin/Long> // kotlin.collections/sortedWith|sortedWith@kotlin.LongArray(kotlin.Comparator<in|kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Long>): kotlin.collections/Set<kotlin/Long> // kotlin.collections/subtract|subtract@kotlin.LongArray(kotlin.collections.Iterable<kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/sum(): kotlin/Long // kotlin.collections/sum|sum@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Long> // kotlin.collections/take|take@kotlin.LongArray(kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Long> // kotlin.collections/takeLast|takeLast@kotlin.LongArray(kotlin.Int){}[0]
final fun (kotlin/LongArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Long> // kotlin.collections/toHashSet|toHashSet@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Long> // kotlin.collections/toList|toList@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Long> // kotlin.collections/toMutableList|toMutableList@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Long> // kotlin.collections/toMutableSet|toMutableSet@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Long> // kotlin.collections/toSet|toSet@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Long> // kotlin.collections/toTypedArray|toTypedArray@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Long>): kotlin.collections/Set<kotlin/Long> // kotlin.collections/union|union@kotlin.LongArray(kotlin.collections.Iterable<kotlin.Long>){}[0]
final fun (kotlin/LongArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Long>> // kotlin.collections/withIndex|withIndex@kotlin.LongArray(){}[0]
final fun (kotlin/LongArray).kotlin.collections/zip(kotlin/LongArray): kotlin.collections/List<kotlin/Pair<kotlin/Long, kotlin/Long>> // kotlin.collections/zip|zip@kotlin.LongArray(kotlin.LongArray){}[0]
final fun (kotlin/LongArray?).kotlin.collections/contentEquals(kotlin/LongArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.LongArray?(kotlin.LongArray?){}[0]
final fun (kotlin/LongArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.LongArray?(){}[0]
final fun (kotlin/LongArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.LongArray?(){}[0]
final fun (kotlin/Result<*>).kotlin/throwOnFailure() // kotlin/throwOnFailure|throwOnFailure@kotlin.Result<*>(){}[0]
final fun (kotlin/Short).kotlin.ranges/coerceAtLeast(kotlin/Short): kotlin/Short // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.Short(kotlin.Short){}[0]
final fun (kotlin/Short).kotlin.ranges/coerceAtMost(kotlin/Short): kotlin/Short // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.Short(kotlin.Short){}[0]
final fun (kotlin/Short).kotlin.ranges/coerceIn(kotlin/Short, kotlin/Short): kotlin/Short // kotlin.ranges/coerceIn|coerceIn@kotlin.Short(kotlin.Short;kotlin.Short){}[0]
final fun (kotlin/Short).kotlin.ranges/downTo(kotlin/Byte): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Short(kotlin.Byte){}[0]
final fun (kotlin/Short).kotlin.ranges/downTo(kotlin/Int): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Short(kotlin.Int){}[0]
final fun (kotlin/Short).kotlin.ranges/downTo(kotlin/Long): kotlin.ranges/LongProgression // kotlin.ranges/downTo|downTo@kotlin.Short(kotlin.Long){}[0]
final fun (kotlin/Short).kotlin.ranges/downTo(kotlin/Short): kotlin.ranges/IntProgression // kotlin.ranges/downTo|downTo@kotlin.Short(kotlin.Short){}[0]
final fun (kotlin/Short).kotlin.ranges/until(kotlin/Byte): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Short(kotlin.Byte){}[0]
final fun (kotlin/Short).kotlin.ranges/until(kotlin/Int): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Short(kotlin.Int){}[0]
final fun (kotlin/Short).kotlin.ranges/until(kotlin/Long): kotlin.ranges/LongRange // kotlin.ranges/until|until@kotlin.Short(kotlin.Long){}[0]
final fun (kotlin/Short).kotlin.ranges/until(kotlin/Short): kotlin.ranges/IntRange // kotlin.ranges/until|until@kotlin.Short(kotlin.Short){}[0]
final fun (kotlin/Short).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.Short(kotlin.text.HexFormat){}[0]
final fun (kotlin/Short).kotlin/rotateLeft(kotlin/Int): kotlin/Short // kotlin/rotateLeft|rotateLeft@kotlin.Short(kotlin.Int){}[0]
final fun (kotlin/Short).kotlin/rotateRight(kotlin/Int): kotlin/Short // kotlin/rotateRight|rotateRight@kotlin.Short(kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin/Short> // kotlin.collections/asIterable|asIterable@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin/Short> // kotlin.collections/asSequence|asSequence@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/average(): kotlin/Double // kotlin.collections/average|average@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/contains(kotlin/Short): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.ShortArray(kotlin.Short){}[0]
final fun (kotlin/ShortArray).kotlin.collections/copyOf(kotlin/Int): kotlin/ShortArray // kotlin.collections/copyOf|copyOf@kotlin.ShortArray(kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/ShortArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.ShortArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/distinct(): kotlin.collections/List<kotlin/Short> // kotlin.collections/distinct|distinct@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/Short> // kotlin.collections/drop|drop@kotlin.ShortArray(kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/Short> // kotlin.collections/dropLast|dropLast@kotlin.ShortArray(kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/fill(kotlin/Short, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.ShortArray(kotlin.Short;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/first(): kotlin/Short // kotlin.collections/first|first@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/firstOrNull(): kotlin/Short? // kotlin.collections/firstOrNull|firstOrNull@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/Short? // kotlin.collections/getOrNull|getOrNull@kotlin.ShortArray(kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/indexOf(kotlin/Short): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.ShortArray(kotlin.Short){}[0]
final fun (kotlin/ShortArray).kotlin.collections/intersect(kotlin.collections/Iterable<kotlin/Short>): kotlin.collections/Set<kotlin/Short> // kotlin.collections/intersect|intersect@kotlin.ShortArray(kotlin.collections.Iterable<kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Short, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.ShortArray(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Short,kotlin.CharSequence>?){}[0]
final fun (kotlin/ShortArray).kotlin.collections/last(): kotlin/Short // kotlin.collections/last|last@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/lastIndexOf(kotlin/Short): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.ShortArray(kotlin.Short){}[0]
final fun (kotlin/ShortArray).kotlin.collections/lastOrNull(): kotlin/Short? // kotlin.collections/lastOrNull|lastOrNull@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/max(): kotlin/Short // kotlin.collections/max|max@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/maxOrNull(): kotlin/Short? // kotlin.collections/maxOrNull|maxOrNull@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/Short>): kotlin/Short // kotlin.collections/maxWith|maxWith@kotlin.ShortArray(kotlin.Comparator<in|kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/Short>): kotlin/Short? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.ShortArray(kotlin.Comparator<in|kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/min(): kotlin/Short // kotlin.collections/min|min@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/minOrNull(): kotlin/Short? // kotlin.collections/minOrNull|minOrNull@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/Short>): kotlin/Short // kotlin.collections/minWith|minWith@kotlin.ShortArray(kotlin.Comparator<in|kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/Short>): kotlin/Short? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.ShortArray(kotlin.Comparator<in|kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/Short>): kotlin/ShortArray // kotlin.collections/plus|plus@kotlin.ShortArray(kotlin.collections.Collection<kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/random(kotlin.random/Random): kotlin/Short // kotlin.collections/random|random@kotlin.ShortArray(kotlin.random.Random){}[0]
final fun (kotlin/ShortArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/Short? // kotlin.collections/randomOrNull|randomOrNull@kotlin.ShortArray(kotlin.random.Random){}[0]
final fun (kotlin/ShortArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.ShortArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/Short> // kotlin.collections/reversed|reversed@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/reversedArray(): kotlin/ShortArray // kotlin.collections/reversedArray|reversedArray@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.ShortArray(kotlin.random.Random){}[0]
final fun (kotlin/ShortArray).kotlin.collections/single(): kotlin/Short // kotlin.collections/single|single@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/singleOrNull(): kotlin/Short? // kotlin.collections/singleOrNull|singleOrNull@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/Short> // kotlin.collections/slice|slice@kotlin.ShortArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/Short> // kotlin.collections/slice|slice@kotlin.ShortArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/ShortArray // kotlin.collections/sliceArray|sliceArray@kotlin.ShortArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/ShortArray // kotlin.collections/sliceArray|sliceArray@kotlin.ShortArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.ShortArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.ShortArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/Short> // kotlin.collections/sorted|sorted@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sortedArray(): kotlin/ShortArray // kotlin.collections/sortedArray|sortedArray@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sortedArrayDescending(): kotlin/ShortArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/Short> // kotlin.collections/sortedDescending|sortedDescending@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sortedWith(kotlin/Comparator<in kotlin/Short>): kotlin.collections/List<kotlin/Short> // kotlin.collections/sortedWith|sortedWith@kotlin.ShortArray(kotlin.Comparator<in|kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/subtract(kotlin.collections/Iterable<kotlin/Short>): kotlin.collections/Set<kotlin/Short> // kotlin.collections/subtract|subtract@kotlin.ShortArray(kotlin.collections.Iterable<kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/sum(): kotlin/Int // kotlin.collections/sum|sum@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/Short> // kotlin.collections/take|take@kotlin.ShortArray(kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/Short> // kotlin.collections/takeLast|takeLast@kotlin.ShortArray(kotlin.Int){}[0]
final fun (kotlin/ShortArray).kotlin.collections/toHashSet(): kotlin.collections/HashSet<kotlin/Short> // kotlin.collections/toHashSet|toHashSet@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/toList(): kotlin.collections/List<kotlin/Short> // kotlin.collections/toList|toList@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/toMutableList(): kotlin.collections/MutableList<kotlin/Short> // kotlin.collections/toMutableList|toMutableList@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<kotlin/Short> // kotlin.collections/toMutableSet|toMutableSet@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/toSet(): kotlin.collections/Set<kotlin/Short> // kotlin.collections/toSet|toSet@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/Short> // kotlin.collections/toTypedArray|toTypedArray@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/union(kotlin.collections/Iterable<kotlin/Short>): kotlin.collections/Set<kotlin/Short> // kotlin.collections/union|union@kotlin.ShortArray(kotlin.collections.Iterable<kotlin.Short>){}[0]
final fun (kotlin/ShortArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/Short>> // kotlin.collections/withIndex|withIndex@kotlin.ShortArray(){}[0]
final fun (kotlin/ShortArray).kotlin.collections/zip(kotlin/ShortArray): kotlin.collections/List<kotlin/Pair<kotlin/Short, kotlin/Short>> // kotlin.collections/zip|zip@kotlin.ShortArray(kotlin.ShortArray){}[0]
final fun (kotlin/ShortArray?).kotlin.collections/contentEquals(kotlin/ShortArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.ShortArray?(kotlin.ShortArray?){}[0]
final fun (kotlin/ShortArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.ShortArray?(){}[0]
final fun (kotlin/ShortArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.ShortArray?(){}[0]
final fun (kotlin/String).kotlin.text/capitalize(): kotlin/String // kotlin.text/capitalize|capitalize@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/compareTo(kotlin/String, kotlin/Boolean = ...): kotlin/Int // kotlin.text/compareTo|compareTo@kotlin.String(kotlin.String;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/decapitalize(): kotlin/String // kotlin.text/decapitalize|decapitalize@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/drop(kotlin/Int): kotlin/String // kotlin.text/drop|drop@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/dropLast(kotlin/Int): kotlin/String // kotlin.text/dropLast|dropLast@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/encodeToByteArray(): kotlin/ByteArray // kotlin.text/encodeToByteArray|encodeToByteArray@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/encodeToByteArray(kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ...): kotlin/ByteArray // kotlin.text/encodeToByteArray|encodeToByteArray@kotlin.String(kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/endsWith(kotlin/String, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/endsWith|endsWith@kotlin.String(kotlin.String;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/hexToByte(kotlin.text/HexFormat = ...): kotlin/Byte // kotlin.text/hexToByte|hexToByte@kotlin.String(kotlin.text.HexFormat){}[0]
final fun (kotlin/String).kotlin.text/hexToByteArray(kotlin.text/HexFormat = ...): kotlin/ByteArray // kotlin.text/hexToByteArray|hexToByteArray@kotlin.String(kotlin.text.HexFormat){}[0]
final fun (kotlin/String).kotlin.text/hexToInt(kotlin.text/HexFormat = ...): kotlin/Int // kotlin.text/hexToInt|hexToInt@kotlin.String(kotlin.text.HexFormat){}[0]
final fun (kotlin/String).kotlin.text/hexToLong(kotlin.text/HexFormat = ...): kotlin/Long // kotlin.text/hexToLong|hexToLong@kotlin.String(kotlin.text.HexFormat){}[0]
final fun (kotlin/String).kotlin.text/hexToShort(kotlin.text/HexFormat = ...): kotlin/Short // kotlin.text/hexToShort|hexToShort@kotlin.String(kotlin.text.HexFormat){}[0]
final fun (kotlin/String).kotlin.text/padEnd(kotlin/Int, kotlin/Char = ...): kotlin/String // kotlin.text/padEnd|padEnd@kotlin.String(kotlin.Int;kotlin.Char){}[0]
final fun (kotlin/String).kotlin.text/padStart(kotlin/Int, kotlin/Char = ...): kotlin/String // kotlin.text/padStart|padStart@kotlin.String(kotlin.Int;kotlin.Char){}[0]
final fun (kotlin/String).kotlin.text/prependIndent(kotlin/String = ...): kotlin/String // kotlin.text/prependIndent|prependIndent@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/regionMatches(kotlin/Int, kotlin/String, kotlin/Int, kotlin/Int, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/regionMatches|regionMatches@kotlin.String(kotlin.Int;kotlin.String;kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/removePrefix(kotlin/CharSequence): kotlin/String // kotlin.text/removePrefix|removePrefix@kotlin.String(kotlin.CharSequence){}[0]
final fun (kotlin/String).kotlin.text/removeSuffix(kotlin/CharSequence): kotlin/String // kotlin.text/removeSuffix|removeSuffix@kotlin.String(kotlin.CharSequence){}[0]
final fun (kotlin/String).kotlin.text/removeSurrounding(kotlin/CharSequence): kotlin/String // kotlin.text/removeSurrounding|removeSurrounding@kotlin.String(kotlin.CharSequence){}[0]
final fun (kotlin/String).kotlin.text/removeSurrounding(kotlin/CharSequence, kotlin/CharSequence): kotlin/String // kotlin.text/removeSurrounding|removeSurrounding@kotlin.String(kotlin.CharSequence;kotlin.CharSequence){}[0]
final fun (kotlin/String).kotlin.text/replace(kotlin/Char, kotlin/Char, kotlin/Boolean = ...): kotlin/String // kotlin.text/replace|replace@kotlin.String(kotlin.Char;kotlin.Char;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/replace(kotlin/String, kotlin/String, kotlin/Boolean = ...): kotlin/String // kotlin.text/replace|replace@kotlin.String(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/replaceAfter(kotlin/Char, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceAfter|replaceAfter@kotlin.String(kotlin.Char;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceAfter(kotlin/String, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceAfter|replaceAfter@kotlin.String(kotlin.String;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceAfterLast(kotlin/Char, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceAfterLast|replaceAfterLast@kotlin.String(kotlin.Char;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceAfterLast(kotlin/String, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceAfterLast|replaceAfterLast@kotlin.String(kotlin.String;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceBefore(kotlin/Char, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceBefore|replaceBefore@kotlin.String(kotlin.Char;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceBefore(kotlin/String, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceBefore|replaceBefore@kotlin.String(kotlin.String;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceBeforeLast(kotlin/Char, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceBeforeLast|replaceBeforeLast@kotlin.String(kotlin.Char;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceBeforeLast(kotlin/String, kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/replaceBeforeLast|replaceBeforeLast@kotlin.String(kotlin.String;kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceFirst(kotlin/Char, kotlin/Char, kotlin/Boolean = ...): kotlin/String // kotlin.text/replaceFirst|replaceFirst@kotlin.String(kotlin.Char;kotlin.Char;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/replaceFirst(kotlin/String, kotlin/String, kotlin/Boolean = ...): kotlin/String // kotlin.text/replaceFirst|replaceFirst@kotlin.String(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/replaceIndent(kotlin/String = ...): kotlin/String // kotlin.text/replaceIndent|replaceIndent@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/replaceIndentByMargin(kotlin/String = ..., kotlin/String = ...): kotlin/String // kotlin.text/replaceIndentByMargin|replaceIndentByMargin@kotlin.String(kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/slice(kotlin.ranges/IntRange): kotlin/String // kotlin.text/slice|slice@kotlin.String(kotlin.ranges.IntRange){}[0]
final fun (kotlin/String).kotlin.text/startsWith(kotlin/String, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/startsWith|startsWith@kotlin.String(kotlin.String;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/startsWith(kotlin/String, kotlin/Int, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/startsWith|startsWith@kotlin.String(kotlin.String;kotlin.Int;kotlin.Boolean){}[0]
final fun (kotlin/String).kotlin.text/substring(kotlin.ranges/IntRange): kotlin/String // kotlin.text/substring|substring@kotlin.String(kotlin.ranges.IntRange){}[0]
final fun (kotlin/String).kotlin.text/substringAfter(kotlin/Char, kotlin/String = ...): kotlin/String // kotlin.text/substringAfter|substringAfter@kotlin.String(kotlin.Char;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/substringAfter(kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/substringAfter|substringAfter@kotlin.String(kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/substringAfterLast(kotlin/Char, kotlin/String = ...): kotlin/String // kotlin.text/substringAfterLast|substringAfterLast@kotlin.String(kotlin.Char;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/substringAfterLast(kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/substringAfterLast|substringAfterLast@kotlin.String(kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/substringBefore(kotlin/Char, kotlin/String = ...): kotlin/String // kotlin.text/substringBefore|substringBefore@kotlin.String(kotlin.Char;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/substringBefore(kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/substringBefore|substringBefore@kotlin.String(kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/substringBeforeLast(kotlin/Char, kotlin/String = ...): kotlin/String // kotlin.text/substringBeforeLast|substringBeforeLast@kotlin.String(kotlin.Char;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/substringBeforeLast(kotlin/String, kotlin/String = ...): kotlin/String // kotlin.text/substringBeforeLast|substringBeforeLast@kotlin.String(kotlin.String;kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/take(kotlin/Int): kotlin/String // kotlin.text/take|take@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/takeLast(kotlin/Int): kotlin/String // kotlin.text/takeLast|takeLast@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toBooleanStrict(): kotlin/Boolean // kotlin.text/toBooleanStrict|toBooleanStrict@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toBooleanStrictOrNull(): kotlin/Boolean? // kotlin.text/toBooleanStrictOrNull|toBooleanStrictOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toByteOrNull(): kotlin/Byte? // kotlin.text/toByteOrNull|toByteOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toByteOrNull(kotlin/Int): kotlin/Byte? // kotlin.text/toByteOrNull|toByteOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toCharArray(): kotlin/CharArray // kotlin.text/toCharArray|toCharArray@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toCharArray(kotlin/CharArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/CharArray // kotlin.text/toCharArray|toCharArray@kotlin.String(kotlin.CharArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toCharArray(kotlin/Int = ..., kotlin/Int = ...): kotlin/CharArray // kotlin.text/toCharArray|toCharArray@kotlin.String(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toDouble(): kotlin/Double // kotlin.text/toDouble|toDouble@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toDoubleOrNull(): kotlin/Double? // kotlin.text/toDoubleOrNull|toDoubleOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toIntOrNull(): kotlin/Int? // kotlin.text/toIntOrNull|toIntOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toIntOrNull(kotlin/Int): kotlin/Int? // kotlin.text/toIntOrNull|toIntOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toLongOrNull(): kotlin/Long? // kotlin.text/toLongOrNull|toLongOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toLongOrNull(kotlin/Int): kotlin/Long? // kotlin.text/toLongOrNull|toLongOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toShortOrNull(): kotlin/Short? // kotlin.text/toShortOrNull|toShortOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toShortOrNull(kotlin/Int): kotlin/Short? // kotlin.text/toShortOrNull|toShortOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toUByte(): kotlin/UByte // kotlin.text/toUByte|toUByte@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toUByte(kotlin/Int): kotlin/UByte // kotlin.text/toUByte|toUByte@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toUByteOrNull(): kotlin/UByte? // kotlin.text/toUByteOrNull|toUByteOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toUByteOrNull(kotlin/Int): kotlin/UByte? // kotlin.text/toUByteOrNull|toUByteOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toUInt(): kotlin/UInt // kotlin.text/toUInt|toUInt@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toUInt(kotlin/Int): kotlin/UInt // kotlin.text/toUInt|toUInt@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toUIntOrNull(): kotlin/UInt? // kotlin.text/toUIntOrNull|toUIntOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toUIntOrNull(kotlin/Int): kotlin/UInt? // kotlin.text/toUIntOrNull|toUIntOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toULong(): kotlin/ULong // kotlin.text/toULong|toULong@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toULong(kotlin/Int): kotlin/ULong // kotlin.text/toULong|toULong@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toULongOrNull(): kotlin/ULong? // kotlin.text/toULongOrNull|toULongOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toULongOrNull(kotlin/Int): kotlin/ULong? // kotlin.text/toULongOrNull|toULongOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toUShort(): kotlin/UShort // kotlin.text/toUShort|toUShort@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toUShort(kotlin/Int): kotlin/UShort // kotlin.text/toUShort|toUShort@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/toUShortOrNull(): kotlin/UShort? // kotlin.text/toUShortOrNull|toUShortOrNull@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/toUShortOrNull(kotlin/Int): kotlin/UShort? // kotlin.text/toUShortOrNull|toUShortOrNull@kotlin.String(kotlin.Int){}[0]
final fun (kotlin/String).kotlin.text/trim(kotlin/CharArray...): kotlin/String // kotlin.text/trim|trim@kotlin.String(kotlin.CharArray...){}[0]
final fun (kotlin/String).kotlin.text/trimEnd(kotlin/CharArray...): kotlin/String // kotlin.text/trimEnd|trimEnd@kotlin.String(kotlin.CharArray...){}[0]
final fun (kotlin/String).kotlin.text/trimIndent(): kotlin/String // kotlin.text/trimIndent|trimIndent@kotlin.String(){}[0]
final fun (kotlin/String).kotlin.text/trimMargin(kotlin/String = ...): kotlin/String // kotlin.text/trimMargin|trimMargin@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String).kotlin.text/trimStart(kotlin/CharArray...): kotlin/String // kotlin.text/trimStart|trimStart@kotlin.String(kotlin.CharArray...){}[0]
final fun (kotlin/String?).kotlin.text/equals(kotlin/String?, kotlin/Boolean = ...): kotlin/Boolean // kotlin.text/equals|equals@kotlin.String?(kotlin.String?;kotlin.Boolean){}[0]
final fun (kotlin/Throwable).kotlin/addSuppressed(kotlin/Throwable) // kotlin/addSuppressed|addSuppressed@kotlin.Throwable(kotlin.Throwable){}[0]
final fun (kotlin/Throwable).kotlin/stackTraceToString(): kotlin/String // kotlin/stackTraceToString|stackTraceToString@kotlin.Throwable(){}[0]
final fun (kotlin/UByte).kotlin.ranges/coerceAtLeast(kotlin/UByte): kotlin/UByte // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.UByte(kotlin.UByte){}[0]
final fun (kotlin/UByte).kotlin.ranges/coerceAtMost(kotlin/UByte): kotlin/UByte // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.UByte(kotlin.UByte){}[0]
final fun (kotlin/UByte).kotlin.ranges/coerceIn(kotlin/UByte, kotlin/UByte): kotlin/UByte // kotlin.ranges/coerceIn|coerceIn@kotlin.UByte(kotlin.UByte;kotlin.UByte){}[0]
final fun (kotlin/UByte).kotlin.ranges/downTo(kotlin/UByte): kotlin.ranges/UIntProgression // kotlin.ranges/downTo|downTo@kotlin.UByte(kotlin.UByte){}[0]
final fun (kotlin/UByte).kotlin.ranges/until(kotlin/UByte): kotlin.ranges/UIntRange // kotlin.ranges/until|until@kotlin.UByte(kotlin.UByte){}[0]
final fun (kotlin/UByte).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.UByte(kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/UByte> // kotlin.collections/asList|asList@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/UByte> // kotlin.collections/drop|drop@kotlin.UByteArray(kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/UByte> // kotlin.collections/dropLast|dropLast@kotlin.UByteArray(kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/fill(kotlin/UByte, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.UByteArray(kotlin.UByte;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/firstOrNull(): kotlin/UByte? // kotlin.collections/firstOrNull|firstOrNull@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/UByte? // kotlin.collections/getOrNull|getOrNull@kotlin.UByteArray(kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/lastOrNull(): kotlin/UByte? // kotlin.collections/lastOrNull|lastOrNull@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/max(): kotlin/UByte // kotlin.collections/max|max@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/maxOrNull(): kotlin/UByte? // kotlin.collections/maxOrNull|maxOrNull@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/UByte>): kotlin/UByte // kotlin.collections/maxWith|maxWith@kotlin.UByteArray(kotlin.Comparator<in|kotlin.UByte>){}[0]
final fun (kotlin/UByteArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/UByte>): kotlin/UByte? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.UByteArray(kotlin.Comparator<in|kotlin.UByte>){}[0]
final fun (kotlin/UByteArray).kotlin.collections/min(): kotlin/UByte // kotlin.collections/min|min@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/minOrNull(): kotlin/UByte? // kotlin.collections/minOrNull|minOrNull@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/UByte>): kotlin/UByte // kotlin.collections/minWith|minWith@kotlin.UByteArray(kotlin.Comparator<in|kotlin.UByte>){}[0]
final fun (kotlin/UByteArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/UByte>): kotlin/UByte? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.UByteArray(kotlin.Comparator<in|kotlin.UByte>){}[0]
final fun (kotlin/UByteArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/UByte>): kotlin/UByteArray // kotlin.collections/plus|plus@kotlin.UByteArray(kotlin.collections.Collection<kotlin.UByte>){}[0]
final fun (kotlin/UByteArray).kotlin.collections/random(kotlin.random/Random): kotlin/UByte // kotlin.collections/random|random@kotlin.UByteArray(kotlin.random.Random){}[0]
final fun (kotlin/UByteArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/UByte? // kotlin.collections/randomOrNull|randomOrNull@kotlin.UByteArray(kotlin.random.Random){}[0]
final fun (kotlin/UByteArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/UByte> // kotlin.collections/reversed|reversed@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.UByteArray(kotlin.random.Random){}[0]
final fun (kotlin/UByteArray).kotlin.collections/singleOrNull(): kotlin/UByte? // kotlin.collections/singleOrNull|singleOrNull@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/slice|slice@kotlin.UByteArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/UByteArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/UByte> // kotlin.collections/slice|slice@kotlin.UByteArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/UByteArray // kotlin.collections/sliceArray|sliceArray@kotlin.UByteArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/UByteArray // kotlin.collections/sliceArray|sliceArray@kotlin.UByteArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.UByteArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.UByteArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/UByte> // kotlin.collections/sorted|sorted@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sortedArray(): kotlin/UByteArray // kotlin.collections/sortedArray|sortedArray@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sortedArrayDescending(): kotlin/UByteArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/UByte> // kotlin.collections/sortedDescending|sortedDescending@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/UByte> // kotlin.collections/take|take@kotlin.UByteArray(kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/UByte> // kotlin.collections/takeLast|takeLast@kotlin.UByteArray(kotlin.Int){}[0]
final fun (kotlin/UByteArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/UByte> // kotlin.collections/toTypedArray|toTypedArray@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/UByte>> // kotlin.collections/withIndex|withIndex@kotlin.UByteArray(){}[0]
final fun (kotlin/UByteArray).kotlin.collections/zip(kotlin/UByteArray): kotlin.collections/List<kotlin/Pair<kotlin/UByte, kotlin/UByte>> // kotlin.collections/zip|zip@kotlin.UByteArray(kotlin.UByteArray){}[0]
final fun (kotlin/UByteArray?).kotlin.collections/contentEquals(kotlin/UByteArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.UByteArray?(kotlin.UByteArray?){}[0]
final fun (kotlin/UByteArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.UByteArray?(){}[0]
final fun (kotlin/UByteArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.UByteArray?(){}[0]
final fun (kotlin/UInt).kotlin.ranges/coerceAtLeast(kotlin/UInt): kotlin/UInt // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.UInt(kotlin.UInt){}[0]
final fun (kotlin/UInt).kotlin.ranges/coerceAtMost(kotlin/UInt): kotlin/UInt // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.UInt(kotlin.UInt){}[0]
final fun (kotlin/UInt).kotlin.ranges/coerceIn(kotlin.ranges/ClosedRange<kotlin/UInt>): kotlin/UInt // kotlin.ranges/coerceIn|coerceIn@kotlin.UInt(kotlin.ranges.ClosedRange<kotlin.UInt>){}[0]
final fun (kotlin/UInt).kotlin.ranges/coerceIn(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.ranges/coerceIn|coerceIn@kotlin.UInt(kotlin.UInt;kotlin.UInt){}[0]
final fun (kotlin/UInt).kotlin.ranges/downTo(kotlin/UInt): kotlin.ranges/UIntProgression // kotlin.ranges/downTo|downTo@kotlin.UInt(kotlin.UInt){}[0]
final fun (kotlin/UInt).kotlin.ranges/until(kotlin/UInt): kotlin.ranges/UIntRange // kotlin.ranges/until|until@kotlin.UInt(kotlin.UInt){}[0]
final fun (kotlin/UInt).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.UInt(kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/UInt> // kotlin.collections/asList|asList@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/UInt> // kotlin.collections/drop|drop@kotlin.UIntArray(kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/UInt> // kotlin.collections/dropLast|dropLast@kotlin.UIntArray(kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/fill(kotlin/UInt, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.UIntArray(kotlin.UInt;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/firstOrNull(): kotlin/UInt? // kotlin.collections/firstOrNull|firstOrNull@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/UInt? // kotlin.collections/getOrNull|getOrNull@kotlin.UIntArray(kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/lastOrNull(): kotlin/UInt? // kotlin.collections/lastOrNull|lastOrNull@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/max(): kotlin/UInt // kotlin.collections/max|max@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/maxOrNull(): kotlin/UInt? // kotlin.collections/maxOrNull|maxOrNull@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/UInt>): kotlin/UInt // kotlin.collections/maxWith|maxWith@kotlin.UIntArray(kotlin.Comparator<in|kotlin.UInt>){}[0]
final fun (kotlin/UIntArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/UInt>): kotlin/UInt? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.UIntArray(kotlin.Comparator<in|kotlin.UInt>){}[0]
final fun (kotlin/UIntArray).kotlin.collections/min(): kotlin/UInt // kotlin.collections/min|min@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/minOrNull(): kotlin/UInt? // kotlin.collections/minOrNull|minOrNull@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/UInt>): kotlin/UInt // kotlin.collections/minWith|minWith@kotlin.UIntArray(kotlin.Comparator<in|kotlin.UInt>){}[0]
final fun (kotlin/UIntArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/UInt>): kotlin/UInt? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.UIntArray(kotlin.Comparator<in|kotlin.UInt>){}[0]
final fun (kotlin/UIntArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/UInt>): kotlin/UIntArray // kotlin.collections/plus|plus@kotlin.UIntArray(kotlin.collections.Collection<kotlin.UInt>){}[0]
final fun (kotlin/UIntArray).kotlin.collections/random(kotlin.random/Random): kotlin/UInt // kotlin.collections/random|random@kotlin.UIntArray(kotlin.random.Random){}[0]
final fun (kotlin/UIntArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/UInt? // kotlin.collections/randomOrNull|randomOrNull@kotlin.UIntArray(kotlin.random.Random){}[0]
final fun (kotlin/UIntArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/UInt> // kotlin.collections/reversed|reversed@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.UIntArray(kotlin.random.Random){}[0]
final fun (kotlin/UIntArray).kotlin.collections/singleOrNull(): kotlin/UInt? // kotlin.collections/singleOrNull|singleOrNull@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/slice|slice@kotlin.UIntArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/UIntArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/UInt> // kotlin.collections/slice|slice@kotlin.UIntArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/UIntArray // kotlin.collections/sliceArray|sliceArray@kotlin.UIntArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/UIntArray // kotlin.collections/sliceArray|sliceArray@kotlin.UIntArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.UIntArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.UIntArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/UInt> // kotlin.collections/sorted|sorted@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sortedArray(): kotlin/UIntArray // kotlin.collections/sortedArray|sortedArray@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sortedArrayDescending(): kotlin/UIntArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/UInt> // kotlin.collections/sortedDescending|sortedDescending@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/UInt> // kotlin.collections/take|take@kotlin.UIntArray(kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/UInt> // kotlin.collections/takeLast|takeLast@kotlin.UIntArray(kotlin.Int){}[0]
final fun (kotlin/UIntArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/UInt> // kotlin.collections/toTypedArray|toTypedArray@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/UInt>> // kotlin.collections/withIndex|withIndex@kotlin.UIntArray(){}[0]
final fun (kotlin/UIntArray).kotlin.collections/zip(kotlin/UIntArray): kotlin.collections/List<kotlin/Pair<kotlin/UInt, kotlin/UInt>> // kotlin.collections/zip|zip@kotlin.UIntArray(kotlin.UIntArray){}[0]
final fun (kotlin/UIntArray?).kotlin.collections/contentEquals(kotlin/UIntArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.UIntArray?(kotlin.UIntArray?){}[0]
final fun (kotlin/UIntArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.UIntArray?(){}[0]
final fun (kotlin/UIntArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.UIntArray?(){}[0]
final fun (kotlin/ULong).kotlin.ranges/coerceAtLeast(kotlin/ULong): kotlin/ULong // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.ULong(kotlin.ULong){}[0]
final fun (kotlin/ULong).kotlin.ranges/coerceAtMost(kotlin/ULong): kotlin/ULong // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.ULong(kotlin.ULong){}[0]
final fun (kotlin/ULong).kotlin.ranges/coerceIn(kotlin.ranges/ClosedRange<kotlin/ULong>): kotlin/ULong // kotlin.ranges/coerceIn|coerceIn@kotlin.ULong(kotlin.ranges.ClosedRange<kotlin.ULong>){}[0]
final fun (kotlin/ULong).kotlin.ranges/coerceIn(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.ranges/coerceIn|coerceIn@kotlin.ULong(kotlin.ULong;kotlin.ULong){}[0]
final fun (kotlin/ULong).kotlin.ranges/downTo(kotlin/ULong): kotlin.ranges/ULongProgression // kotlin.ranges/downTo|downTo@kotlin.ULong(kotlin.ULong){}[0]
final fun (kotlin/ULong).kotlin.ranges/until(kotlin/ULong): kotlin.ranges/ULongRange // kotlin.ranges/until|until@kotlin.ULong(kotlin.ULong){}[0]
final fun (kotlin/ULong).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.ULong(kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/ULong> // kotlin.collections/asList|asList@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/ULong> // kotlin.collections/drop|drop@kotlin.ULongArray(kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/ULong> // kotlin.collections/dropLast|dropLast@kotlin.ULongArray(kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/fill(kotlin/ULong, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.ULongArray(kotlin.ULong;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/firstOrNull(): kotlin/ULong? // kotlin.collections/firstOrNull|firstOrNull@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/ULong? // kotlin.collections/getOrNull|getOrNull@kotlin.ULongArray(kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/lastOrNull(): kotlin/ULong? // kotlin.collections/lastOrNull|lastOrNull@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/max(): kotlin/ULong // kotlin.collections/max|max@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/maxOrNull(): kotlin/ULong? // kotlin.collections/maxOrNull|maxOrNull@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/ULong>): kotlin/ULong // kotlin.collections/maxWith|maxWith@kotlin.ULongArray(kotlin.Comparator<in|kotlin.ULong>){}[0]
final fun (kotlin/ULongArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/ULong>): kotlin/ULong? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.ULongArray(kotlin.Comparator<in|kotlin.ULong>){}[0]
final fun (kotlin/ULongArray).kotlin.collections/min(): kotlin/ULong // kotlin.collections/min|min@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/minOrNull(): kotlin/ULong? // kotlin.collections/minOrNull|minOrNull@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/ULong>): kotlin/ULong // kotlin.collections/minWith|minWith@kotlin.ULongArray(kotlin.Comparator<in|kotlin.ULong>){}[0]
final fun (kotlin/ULongArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/ULong>): kotlin/ULong? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.ULongArray(kotlin.Comparator<in|kotlin.ULong>){}[0]
final fun (kotlin/ULongArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/ULong>): kotlin/ULongArray // kotlin.collections/plus|plus@kotlin.ULongArray(kotlin.collections.Collection<kotlin.ULong>){}[0]
final fun (kotlin/ULongArray).kotlin.collections/random(kotlin.random/Random): kotlin/ULong // kotlin.collections/random|random@kotlin.ULongArray(kotlin.random.Random){}[0]
final fun (kotlin/ULongArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/ULong? // kotlin.collections/randomOrNull|randomOrNull@kotlin.ULongArray(kotlin.random.Random){}[0]
final fun (kotlin/ULongArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/ULong> // kotlin.collections/reversed|reversed@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.ULongArray(kotlin.random.Random){}[0]
final fun (kotlin/ULongArray).kotlin.collections/singleOrNull(): kotlin/ULong? // kotlin.collections/singleOrNull|singleOrNull@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/slice|slice@kotlin.ULongArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/ULongArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/ULong> // kotlin.collections/slice|slice@kotlin.ULongArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/ULongArray // kotlin.collections/sliceArray|sliceArray@kotlin.ULongArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/ULongArray // kotlin.collections/sliceArray|sliceArray@kotlin.ULongArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.ULongArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.ULongArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/ULong> // kotlin.collections/sorted|sorted@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sortedArray(): kotlin/ULongArray // kotlin.collections/sortedArray|sortedArray@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sortedArrayDescending(): kotlin/ULongArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/ULong> // kotlin.collections/sortedDescending|sortedDescending@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/ULong> // kotlin.collections/take|take@kotlin.ULongArray(kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/ULong> // kotlin.collections/takeLast|takeLast@kotlin.ULongArray(kotlin.Int){}[0]
final fun (kotlin/ULongArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/ULong> // kotlin.collections/toTypedArray|toTypedArray@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/ULong>> // kotlin.collections/withIndex|withIndex@kotlin.ULongArray(){}[0]
final fun (kotlin/ULongArray).kotlin.collections/zip(kotlin/ULongArray): kotlin.collections/List<kotlin/Pair<kotlin/ULong, kotlin/ULong>> // kotlin.collections/zip|zip@kotlin.ULongArray(kotlin.ULongArray){}[0]
final fun (kotlin/ULongArray?).kotlin.collections/contentEquals(kotlin/ULongArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.ULongArray?(kotlin.ULongArray?){}[0]
final fun (kotlin/ULongArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.ULongArray?(){}[0]
final fun (kotlin/ULongArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.ULongArray?(){}[0]
final fun (kotlin/UShort).kotlin.ranges/coerceAtLeast(kotlin/UShort): kotlin/UShort // kotlin.ranges/coerceAtLeast|coerceAtLeast@kotlin.UShort(kotlin.UShort){}[0]
final fun (kotlin/UShort).kotlin.ranges/coerceAtMost(kotlin/UShort): kotlin/UShort // kotlin.ranges/coerceAtMost|coerceAtMost@kotlin.UShort(kotlin.UShort){}[0]
final fun (kotlin/UShort).kotlin.ranges/coerceIn(kotlin/UShort, kotlin/UShort): kotlin/UShort // kotlin.ranges/coerceIn|coerceIn@kotlin.UShort(kotlin.UShort;kotlin.UShort){}[0]
final fun (kotlin/UShort).kotlin.ranges/downTo(kotlin/UShort): kotlin.ranges/UIntProgression // kotlin.ranges/downTo|downTo@kotlin.UShort(kotlin.UShort){}[0]
final fun (kotlin/UShort).kotlin.ranges/until(kotlin/UShort): kotlin.ranges/UIntRange // kotlin.ranges/until|until@kotlin.UShort(kotlin.UShort){}[0]
final fun (kotlin/UShort).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.UShort(kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/UShort> // kotlin.collections/asList|asList@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<kotlin/UShort> // kotlin.collections/drop|drop@kotlin.UShortArray(kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<kotlin/UShort> // kotlin.collections/dropLast|dropLast@kotlin.UShortArray(kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/fill(kotlin/UShort, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.UShortArray(kotlin.UShort;kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/firstOrNull(): kotlin/UShort? // kotlin.collections/firstOrNull|firstOrNull@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/getOrNull(kotlin/Int): kotlin/UShort? // kotlin.collections/getOrNull|getOrNull@kotlin.UShortArray(kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/lastOrNull(): kotlin/UShort? // kotlin.collections/lastOrNull|lastOrNull@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/max(): kotlin/UShort // kotlin.collections/max|max@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/maxOrNull(): kotlin/UShort? // kotlin.collections/maxOrNull|maxOrNull@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/maxWith(kotlin/Comparator<in kotlin/UShort>): kotlin/UShort // kotlin.collections/maxWith|maxWith@kotlin.UShortArray(kotlin.Comparator<in|kotlin.UShort>){}[0]
final fun (kotlin/UShortArray).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin/UShort>): kotlin/UShort? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.UShortArray(kotlin.Comparator<in|kotlin.UShort>){}[0]
final fun (kotlin/UShortArray).kotlin.collections/min(): kotlin/UShort // kotlin.collections/min|min@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/minOrNull(): kotlin/UShort? // kotlin.collections/minOrNull|minOrNull@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/minWith(kotlin/Comparator<in kotlin/UShort>): kotlin/UShort // kotlin.collections/minWith|minWith@kotlin.UShortArray(kotlin.Comparator<in|kotlin.UShort>){}[0]
final fun (kotlin/UShortArray).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin/UShort>): kotlin/UShort? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.UShortArray(kotlin.Comparator<in|kotlin.UShort>){}[0]
final fun (kotlin/UShortArray).kotlin.collections/plus(kotlin.collections/Collection<kotlin/UShort>): kotlin/UShortArray // kotlin.collections/plus|plus@kotlin.UShortArray(kotlin.collections.Collection<kotlin.UShort>){}[0]
final fun (kotlin/UShortArray).kotlin.collections/random(kotlin.random/Random): kotlin/UShort // kotlin.collections/random|random@kotlin.UShortArray(kotlin.random.Random){}[0]
final fun (kotlin/UShortArray).kotlin.collections/randomOrNull(kotlin.random/Random): kotlin/UShort? // kotlin.collections/randomOrNull|randomOrNull@kotlin.UShortArray(kotlin.random.Random){}[0]
final fun (kotlin/UShortArray).kotlin.collections/reversed(): kotlin.collections/List<kotlin/UShort> // kotlin.collections/reversed|reversed@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.UShortArray(kotlin.random.Random){}[0]
final fun (kotlin/UShortArray).kotlin.collections/singleOrNull(): kotlin/UShort? // kotlin.collections/singleOrNull|singleOrNull@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/slice|slice@kotlin.UShortArray(kotlin.collections.Iterable<kotlin.Int>){}[0]
final fun (kotlin/UShortArray).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<kotlin/UShort> // kotlin.collections/slice|slice@kotlin.UShortArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/UShortArray // kotlin.collections/sliceArray|sliceArray@kotlin.UShortArray(kotlin.collections.Collection<kotlin.Int>){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/UShortArray // kotlin.collections/sliceArray|sliceArray@kotlin.UShortArray(kotlin.ranges.IntRange){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.UShortArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.UShortArray(kotlin.Int;kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sorted(): kotlin.collections/List<kotlin/UShort> // kotlin.collections/sorted|sorted@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sortedArray(): kotlin/UShortArray // kotlin.collections/sortedArray|sortedArray@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sortedArrayDescending(): kotlin/UShortArray // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/sortedDescending(): kotlin.collections/List<kotlin/UShort> // kotlin.collections/sortedDescending|sortedDescending@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/take(kotlin/Int): kotlin.collections/List<kotlin/UShort> // kotlin.collections/take|take@kotlin.UShortArray(kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<kotlin/UShort> // kotlin.collections/takeLast|takeLast@kotlin.UShortArray(kotlin.Int){}[0]
final fun (kotlin/UShortArray).kotlin.collections/toTypedArray(): kotlin/Array<kotlin/UShort> // kotlin.collections/toTypedArray|toTypedArray@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<kotlin/UShort>> // kotlin.collections/withIndex|withIndex@kotlin.UShortArray(){}[0]
final fun (kotlin/UShortArray).kotlin.collections/zip(kotlin/UShortArray): kotlin.collections/List<kotlin/Pair<kotlin/UShort, kotlin/UShort>> // kotlin.collections/zip|zip@kotlin.UShortArray(kotlin.UShortArray){}[0]
final fun (kotlin/UShortArray?).kotlin.collections/contentEquals(kotlin/UShortArray?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.UShortArray?(kotlin.UShortArray?){}[0]
final fun (kotlin/UShortArray?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.UShortArray?(){}[0]
final fun (kotlin/UShortArray?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.UShortArray?(){}[0]
final fun <#A: kotlin.collections/MutableCollection<in #B>, #B: kotlin/Any> (kotlin.collections/Iterable<#B?>).kotlin.collections/filterNotNullTo(#A): #A // kotlin.collections/filterNotNullTo|filterNotNullTo@kotlin.collections.Iterable<0:1?>(0:0){0§<kotlin.collections.MutableCollection<in|0:1>>;1§<kotlin.Any>}[0]
final fun <#A: kotlin.collections/MutableCollection<in #B>, #B: kotlin/Any> (kotlin.sequences/Sequence<#B?>).kotlin.sequences/filterNotNullTo(#A): #A // kotlin.sequences/filterNotNullTo|filterNotNullTo@kotlin.sequences.Sequence<0:1?>(0:0){0§<kotlin.collections.MutableCollection<in|0:1>>;1§<kotlin.Any>}[0]
final fun <#A: kotlin.collections/MutableCollection<in #B>, #B: kotlin/Any> (kotlin/Array<out #B?>).kotlin.collections/filterNotNullTo(#A): #A // kotlin.collections/filterNotNullTo|filterNotNullTo@kotlin.Array<out|0:1?>(0:0){0§<kotlin.collections.MutableCollection<in|0:1>>;1§<kotlin.Any>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Boolean>> (kotlin/BooleanArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.BooleanArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Boolean>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Byte>> (kotlin/ByteArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.ByteArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Byte>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Char>> (kotlin/CharArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.CharArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Char>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Char>> (kotlin/CharSequence).kotlin.text/toCollection(#A): #A // kotlin.text/toCollection|toCollection@kotlin.CharSequence(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Char>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Double>> (kotlin/DoubleArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.DoubleArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Double>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Float>> (kotlin/FloatArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.FloatArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Float>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Int>> (kotlin/IntArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.IntArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Int>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Long>> (kotlin/LongArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.LongArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Long>>}[0]
final fun <#A: kotlin.collections/MutableCollection<in kotlin/Short>> (kotlin/ShortArray).kotlin.collections/toCollection(#A): #A // kotlin.collections/toCollection|toCollection@kotlin.ShortArray(0:0){0§<kotlin.collections.MutableCollection<in|kotlin.Short>>}[0]
final fun <#A: kotlin.coroutines/CoroutineContext.Element> (kotlin.coroutines/CoroutineContext.Element).kotlin.coroutines/getPolymorphicElement(kotlin.coroutines/CoroutineContext.Key<#A>): #A? // kotlin.coroutines/getPolymorphicElement|getPolymorphicElement@kotlin.coroutines.CoroutineContext.Element(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}[0]
final fun <#A: kotlin.text/Appendable> (#A).kotlin.text/append(kotlin/Array<out kotlin/CharSequence?>...): #A // kotlin.text/append|append@0:0(kotlin.Array<out|kotlin.CharSequence?>...){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (#A).kotlin.text/appendRange(kotlin/CharSequence, kotlin/Int, kotlin/Int): #A // kotlin.text/appendRange|appendRange@0:0(kotlin.CharSequence;kotlin.Int;kotlin.Int){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/BooleanArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Boolean, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.BooleanArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Boolean,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/ByteArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Byte, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.ByteArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Byte,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/CharArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Char, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.CharArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Char,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/DoubleArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Double, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.DoubleArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Double,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/FloatArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Float, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.FloatArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Float,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/IntArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Int, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.IntArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Int,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/LongArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Long, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.LongArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Long,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin.text/Appendable> (kotlin/ShortArray).kotlin.collections/joinTo(#A, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<kotlin/Short, kotlin/CharSequence>? = ...): #A // kotlin.collections/joinTo|joinTo@kotlin.ShortArray(0:0;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<kotlin.Short,kotlin.CharSequence>?){0§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin/Any> (kotlin.collections/Iterable<#A?>).kotlin.collections/filterNotNull(): kotlin.collections/List<#A> // kotlin.collections/filterNotNull|filterNotNull@kotlin.collections.Iterable<0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.collections/Iterable<#A?>).kotlin.collections/requireNoNulls(): kotlin.collections/Iterable<#A> // kotlin.collections/requireNoNulls|requireNoNulls@kotlin.collections.Iterable<0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.collections/List<#A?>).kotlin.collections/requireNoNulls(): kotlin.collections/List<#A> // kotlin.collections/requireNoNulls|requireNoNulls@kotlin.collections.List<0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.reflect/KClass<#A>).kotlin.reflect/cast(kotlin/Any?): #A // kotlin.reflect/cast|cast@kotlin.reflect.KClass<0:0>(kotlin.Any?){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.reflect/KClass<#A>).kotlin.reflect/safeCast(kotlin/Any?): #A? // kotlin.reflect/safeCast|safeCast@kotlin.reflect.KClass<0:0>(kotlin.Any?){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.sequences/Sequence<#A?>).kotlin.sequences/filterNotNull(): kotlin.sequences/Sequence<#A> // kotlin.sequences/filterNotNull|filterNotNull@kotlin.sequences.Sequence<0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.sequences/Sequence<#A?>).kotlin.sequences/requireNoNulls(): kotlin.sequences/Sequence<#A> // kotlin.sequences/requireNoNulls|requireNoNulls@kotlin.sequences.Sequence<0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin/Array<#A?>).kotlin.collections/requireNoNulls(): kotlin/Array<#A> // kotlin.collections/requireNoNulls|requireNoNulls@kotlin.Array<0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin/Array<out #A?>).kotlin.collections/filterNotNull(): kotlin.collections/List<#A> // kotlin.collections/filterNotNull|filterNotNull@kotlin.Array<out|0:0?>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.collections/listOfNotNull(#A?): kotlin.collections/List<#A> // kotlin.collections/listOfNotNull|listOfNotNull(0:0?){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.collections/listOfNotNull(kotlin/Array<out #A?>...): kotlin.collections/List<#A> // kotlin.collections/listOfNotNull|listOfNotNull(kotlin.Array<out|0:0?>...){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.collections/setOfNotNull(#A?): kotlin.collections/Set<#A> // kotlin.collections/setOfNotNull|setOfNotNull(0:0?){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.collections/setOfNotNull(kotlin/Array<out #A?>...): kotlin.collections/Set<#A> // kotlin.collections/setOfNotNull|setOfNotNull(kotlin.Array<out|0:0?>...){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.comparisons/nullsFirst(kotlin/Comparator<in #A>): kotlin/Comparator<#A?> // kotlin.comparisons/nullsFirst|nullsFirst(kotlin.Comparator<in|0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.comparisons/nullsLast(kotlin/Comparator<in #A>): kotlin/Comparator<#A?> // kotlin.comparisons/nullsLast|nullsLast(kotlin.Comparator<in|0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.sequences/generateSequence(#A?, kotlin/Function1<#A, #A?>): kotlin.sequences/Sequence<#A> // kotlin.sequences/generateSequence|generateSequence(0:0?;kotlin.Function1<0:0,0:0?>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.sequences/generateSequence(kotlin/Function0<#A?>): kotlin.sequences/Sequence<#A> // kotlin.sequences/generateSequence|generateSequence(kotlin.Function0<0:0?>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> kotlin.sequences/generateSequence(kotlin/Function0<#A?>, kotlin/Function1<#A, #A?>): kotlin.sequences/Sequence<#A> // kotlin.sequences/generateSequence|generateSequence(kotlin.Function0<0:0?>;kotlin.Function1<0:0,0:0?>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: #A> (kotlin.sequences/Sequence<#B>).kotlin.sequences/runningReduce(kotlin/Function2<#A, #B, #A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/runningReduce|runningReduce@kotlin.sequences.Sequence<0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final fun <#A: kotlin/Any?, #B: #A> (kotlin.sequences/Sequence<#B>).kotlin.sequences/runningReduceIndexed(kotlin/Function3<kotlin/Int, #A, #B, #A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/runningReduceIndexed|runningReduceIndexed@kotlin.sequences.Sequence<0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.collections/Iterable<#A>).kotlin.collections/toCollection(#B): #B // kotlin.collections/toCollection|toCollection@kotlin.collections.Iterable<0:0>(0:1){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/toCollection(#B): #B // kotlin.sequences/toCollection|toCollection@kotlin.sequences.Sequence<0:0>(0:1){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/Array<out #A>).kotlin.collections/toCollection(#B): #B // kotlin.collections/toCollection|toCollection@kotlin.Array<out|0:0>(0:1){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin.text/Appendable> (kotlin.collections/Iterable<#A>).kotlin.collections/joinTo(#B, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<#A, kotlin/CharSequence>? = ...): #B // kotlin.collections/joinTo|joinTo@kotlin.collections.Iterable<0:0>(0:1;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>;1§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin/Any?, #B: kotlin.text/Appendable> (kotlin.sequences/Sequence<#A>).kotlin.sequences/joinTo(#B, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<#A, kotlin/CharSequence>? = ...): #B // kotlin.sequences/joinTo|joinTo@kotlin.sequences.Sequence<0:0>(0:1;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>;1§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin/Any?, #B: kotlin.text/Appendable> (kotlin/Array<out #A>).kotlin.collections/joinTo(#B, kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<#A, kotlin/CharSequence>? = ...): #B // kotlin.collections/joinTo|joinTo@kotlin.Array<out|0:0>(0:1;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>;1§<kotlin.text.Appendable>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.sequences/Sequence<#A>).kotlin.sequences/mapIndexedNotNull(kotlin/Function2<kotlin/Int, #A, #B?>): kotlin.sequences/Sequence<#B> // kotlin.sequences/mapIndexedNotNull|mapIndexedNotNull@kotlin.sequences.Sequence<0:0>(kotlin.Function2<kotlin.Int,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.sequences/Sequence<#A>).kotlin.sequences/mapNotNull(kotlin/Function1<#A, #B?>): kotlin.sequences/Sequence<#B> // kotlin.sequences/mapNotNull|mapNotNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin.collections/Iterable<kotlin/Pair<#A, #B>>).kotlin.collections/toMap(#C): #C // kotlin.collections/toMap|toMap@kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>(0:2){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/toMap(#C): #C // kotlin.collections/toMap|toMap@kotlin.collections.Map<out|0:0,0:1>(0:2){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>).kotlin.collections/toMap(#C): #C // kotlin.collections/toMap|toMap@kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>(0:2){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/Array<out kotlin/Pair<#A, #B>>).kotlin.collections/toMap(#C): #C // kotlin.collections/toMap|toMap@kotlin.Array<out|kotlin.Pair<0:0,0:1>>(0:2){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #B, kotlin/Int>> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/eachCountTo(#C): #C // kotlin.collections/eachCountTo|eachCountTo@kotlin.collections.Grouping<0:0,0:1>(0:2){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:1,kotlin.Int>>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/zip(kotlin.sequences/Sequence<#B>, kotlin/Function2<#A, #B, #C>): kotlin.sequences/Sequence<#C> // kotlin.sequences/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (#A).kotlin/to(#B): kotlin/Pair<#A, #B> // kotlin/to|to@0:0(0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/eachCount(): kotlin.collections/Map<#B, kotlin/Int> // kotlin.collections/eachCount|eachCount@kotlin.collections.Grouping<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/chunked(kotlin/Int, kotlin/Function1<kotlin.collections/List<#A>, #B>): kotlin.collections/List<#B> // kotlin.collections/chunked|chunked@kotlin.collections.Iterable<0:0>(kotlin.Int;kotlin.Function1<kotlin.collections.List<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/windowed(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Function1<kotlin.collections/List<#A>, #B>): kotlin.collections/List<#B> // kotlin.collections/windowed|windowed@kotlin.collections.Iterable<0:0>(kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Function1<kotlin.collections.List<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/zip(kotlin.collections/Iterable<#B>): kotlin.collections/List<kotlin/Pair<#A, #B>> // kotlin.collections/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/zip(kotlin/Array<out #B>): kotlin.collections/List<kotlin/Pair<#A, #B>> // kotlin.collections/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.Array<out|0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin/Pair<#A, #B>>).kotlin.collections/toMap(): kotlin.collections/Map<#A, #B> // kotlin.collections/toMap|toMap@kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin/Pair<#A, #B>>).kotlin.collections/unzip(): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#B>> // kotlin.collections/unzip|unzip@kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlin.collections/getOrImplicitDefault(#A): #B // kotlin.collections/getOrImplicitDefault|getOrImplicitDefault@kotlin.collections.Map<0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlin.collections/getValue(#A): #B // kotlin.collections/getValue|getValue@kotlin.collections.Map<0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlin.collections/withDefault(kotlin/Function1<#A, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/withDefault|withDefault@kotlin.collections.Map<0:0,0:1>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/asSequence(): kotlin.sequences/Sequence<kotlin.collections/Map.Entry<#A, #B>> // kotlin.collections/asSequence|asSequence@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minus(#A): kotlin.collections/Map<#A, #B> // kotlin.collections/minus|minus@kotlin.collections.Map<out|0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minus(kotlin.collections/Iterable<#A>): kotlin.collections/Map<#A, #B> // kotlin.collections/minus|minus@kotlin.collections.Map<out|0:0,0:1>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minus(kotlin.sequences/Sequence<#A>): kotlin.collections/Map<#A, #B> // kotlin.collections/minus|minus@kotlin.collections.Map<out|0:0,0:1>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minus(kotlin/Array<out #A>): kotlin.collections/Map<#A, #B> // kotlin.collections/minus|minus@kotlin.collections.Map<out|0:0,0:1>(kotlin.Array<out|0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/plus(kotlin.collections/Iterable<kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/plus|plus@kotlin.collections.Map<out|0:0,0:1>(kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/plus(kotlin.collections/Map<out #A, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/plus|plus@kotlin.collections.Map<out|0:0,0:1>(kotlin.collections.Map<out|0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/plus(kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/plus|plus@kotlin.collections.Map<out|0:0,0:1>(kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/plus(kotlin/Array<out kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/plus|plus@kotlin.collections.Map<out|0:0,0:1>(kotlin.Array<out|kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/plus(kotlin/Pair<#A, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/plus|plus@kotlin.collections.Map<out|0:0,0:1>(kotlin.Pair<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/toList(): kotlin.collections/List<kotlin/Pair<#A, #B>> // kotlin.collections/toList|toList@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/toMap(): kotlin.collections/Map<#A, #B> // kotlin.collections/toMap|toMap@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/toMutableMap(): kotlin.collections/MutableMap<#A, #B> // kotlin.collections/toMutableMap|toMutableMap@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/withDefault(kotlin/Function1<#A, #B>): kotlin.collections/MutableMap<#A, #B> // kotlin.collections/withDefault|withDefault@kotlin.collections.MutableMap<0:0,0:1>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/putAll(kotlin.collections/Iterable<kotlin/Pair<#A, #B>>) // kotlin.collections/putAll|putAll@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/putAll(kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>) // kotlin.collections/putAll|putAll@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/putAll(kotlin/Array<out kotlin/Pair<#A, #B>>) // kotlin.collections/putAll|putAll@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.Array<out|kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<#A, #B>).kotlin.coroutines.intrinsics/createCoroutineUnintercepted(#A, kotlin.coroutines/Continuation<#B>): kotlin.coroutines/Continuation<kotlin/Unit> // kotlin.coroutines.intrinsics/createCoroutineUnintercepted|createCoroutineUnintercepted@kotlin.coroutines.SuspendFunction1<0:0,0:1>(0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<#A, #B>).kotlin.coroutines/createCoroutine(#A, kotlin.coroutines/Continuation<#B>): kotlin.coroutines/Continuation<kotlin/Unit> // kotlin.coroutines/createCoroutine|createCoroutine@kotlin.coroutines.SuspendFunction1<0:0,0:1>(0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<#A, #B>).kotlin.coroutines/startCoroutine(#A, kotlin.coroutines/Continuation<#B>) // kotlin.coroutines/startCoroutine|startCoroutine@kotlin.coroutines.SuspendFunction1<0:0,0:1>(0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/chunked(kotlin/Int, kotlin/Function1<kotlin.collections/List<#A>, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/chunked|chunked@kotlin.sequences.Sequence<0:0>(kotlin.Int;kotlin.Function1<kotlin.collections.List<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/distinctBy(kotlin/Function1<#A, #B>): kotlin.sequences/Sequence<#A> // kotlin.sequences/distinctBy|distinctBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMap(kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): kotlin.sequences/Sequence<#B> // kotlin.sequences/flatMap|flatMap@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMap(kotlin/Function1<#A, kotlin.sequences/Sequence<#B>>): kotlin.sequences/Sequence<#B> // kotlin.sequences/flatMap|flatMap@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMapIndexed(kotlin/Function2<kotlin/Int, #A, kotlin.collections/Iterable<#B>>): kotlin.sequences/Sequence<#B> // kotlin.sequences/flatMapIndexed|flatMapIndexed@kotlin.sequences.Sequence<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMapIndexed(kotlin/Function2<kotlin/Int, #A, kotlin.sequences/Sequence<#B>>): kotlin.sequences/Sequence<#B> // kotlin.sequences/flatMapIndexed|flatMapIndexed@kotlin.sequences.Sequence<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/map(kotlin/Function1<#A, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/map|map@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/mapIndexed(kotlin/Function2<kotlin/Int, #A, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/mapIndexed|mapIndexed@kotlin.sequences.Sequence<0:0>(kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/runningFold(#B, kotlin/Function2<#B, #A, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/runningFold|runningFold@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/runningFoldIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/runningFoldIndexed|runningFoldIndexed@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/scan(#B, kotlin/Function2<#B, #A, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/scan|scan@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/scanIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/scanIndexed|scanIndexed@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/windowed(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Function1<kotlin.collections/List<#A>, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/windowed|windowed@kotlin.sequences.Sequence<0:0>(kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Function1<kotlin.collections.List<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/zip(kotlin.sequences/Sequence<#B>): kotlin.sequences/Sequence<kotlin/Pair<#A, #B>> // kotlin.sequences/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/zipWithNext(kotlin/Function2<#A, #A, #B>): kotlin.sequences/Sequence<#B> // kotlin.sequences/zipWithNext|zipWithNext@kotlin.sequences.Sequence<0:0>(kotlin.Function2<0:0,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>).kotlin.collections/toMap(): kotlin.collections/Map<#A, #B> // kotlin.collections/toMap|toMap@kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>).kotlin.sequences/unzip(): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#B>> // kotlin.sequences/unzip|unzip@kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/zip(kotlin.collections/Iterable<#B>): kotlin.collections/List<kotlin/Pair<#A, #B>> // kotlin.collections/zip|zip@kotlin.Array<out|0:0>(kotlin.collections.Iterable<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/zip(kotlin/Array<out #B>): kotlin.collections/List<kotlin/Pair<#A, #B>> // kotlin.collections/zip|zip@kotlin.Array<out|0:0>(kotlin.Array<out|0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out kotlin/Pair<#A, #B>>).kotlin.collections/toMap(): kotlin.collections/Map<#A, #B> // kotlin.collections/toMap|toMap@kotlin.Array<out|kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out kotlin/Pair<#A, #B>>).kotlin.collections/unzip(): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#B>> // kotlin.collections/unzip|unzip@kotlin.Array<out|kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/DeepRecursiveFunction<#A, #B>).kotlin/invoke(#A): #B // kotlin/invoke|invoke@kotlin.DeepRecursiveFunction<0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/emptyMap(): kotlin.collections/Map<#A, #B> // kotlin.collections/emptyMap|emptyMap(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/hashMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlin.collections/HashMap<#A, #B> // kotlin.collections/hashMapOf|hashMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/mapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlin.collections/Map<#A, #B> // kotlin.collections/mapOf|mapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/mapOf(kotlin/Pair<#A, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/mapOf|mapOf(kotlin.Pair<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/mutableMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlin.collections/MutableMap<#A, #B> // kotlin.collections/mutableMapOf|mutableMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/plus(#A): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Collection<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/plus(kotlin.collections/Iterable<#A>): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Collection<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/plus(kotlin.sequences/Sequence<#A>): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Collection<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/plus(kotlin/Array<out #A>): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Collection<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/random(kotlin.random/Random): #A // kotlin.collections/random|random@kotlin.collections.Collection<0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/randomOrNull(kotlin.random/Random): #A? // kotlin.collections/randomOrNull|randomOrNull@kotlin.collections.Collection<0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/toMutableList(): kotlin.collections/MutableList<#A> // kotlin.collections/toMutableList|toMutableList@kotlin.collections.Collection<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/asSequence(): kotlin.sequences/Sequence<#A> // kotlin.collections/asSequence|asSequence@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/chunked(kotlin/Int): kotlin.collections/List<kotlin.collections/List<#A>> // kotlin.collections/chunked|chunked@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/collectionSizeOrDefault(kotlin/Int): kotlin/Int // kotlin.collections/collectionSizeOrDefault|collectionSizeOrDefault@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/collectionSizeOrNull(): kotlin/Int? // kotlin.collections/collectionSizeOrNull|collectionSizeOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/contains(#A): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.collections.Iterable<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/distinct(): kotlin.collections/List<#A> // kotlin.collections/distinct|distinct@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/drop|drop@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/elementAt(kotlin/Int): #A // kotlin.collections/elementAt|elementAt@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.collections.Iterable<0:0>(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/elementAtOrNull(kotlin/Int): #A? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/first(): #A // kotlin.collections/first|first@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/firstOrNull(): #A? // kotlin.collections/firstOrNull|firstOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/indexOf(#A): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.collections.Iterable<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/intersect(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/intersect|intersect@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<#A, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/last(): #A // kotlin.collections/last|last@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/lastIndexOf(#A): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.collections.Iterable<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/lastOrNull(): #A? // kotlin.collections/lastOrNull|lastOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxWith(kotlin/Comparator<in #A>): #A // kotlin.collections/maxWith|maxWith@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxWithOrNull(kotlin/Comparator<in #A>): #A? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minWith(kotlin/Comparator<in #A>): #A // kotlin.collections/minWith|minWith@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minWithOrNull(kotlin/Comparator<in #A>): #A? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minus(#A): kotlin.collections/List<#A> // kotlin.collections/minus|minus@kotlin.collections.Iterable<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minus(kotlin.collections/Iterable<#A>): kotlin.collections/List<#A> // kotlin.collections/minus|minus@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minus(kotlin.sequences/Sequence<#A>): kotlin.collections/List<#A> // kotlin.collections/minus|minus@kotlin.collections.Iterable<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minus(kotlin/Array<out #A>): kotlin.collections/List<#A> // kotlin.collections/minus|minus@kotlin.collections.Iterable<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/plus(#A): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Iterable<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/plus(kotlin.collections/Iterable<#A>): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/plus(kotlin.sequences/Sequence<#A>): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Iterable<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/plus(kotlin/Array<out #A>): kotlin.collections/List<#A> // kotlin.collections/plus|plus@kotlin.collections.Iterable<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/reversed(): kotlin.collections/List<#A> // kotlin.collections/reversed|reversed@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/shuffled(): kotlin.collections/List<#A> // kotlin.collections/shuffled|shuffled@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/shuffled(kotlin.random/Random): kotlin.collections/List<#A> // kotlin.collections/shuffled|shuffled@kotlin.collections.Iterable<0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/single(): #A // kotlin.collections/single|single@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/singleOrNull(): #A? // kotlin.collections/singleOrNull|singleOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sortedWith(kotlin/Comparator<in #A>): kotlin.collections/List<#A> // kotlin.collections/sortedWith|sortedWith@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/subtract(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/subtract|subtract@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/take(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/take|take@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/toHashSet(): kotlin.collections/HashSet<#A> // kotlin.collections/toHashSet|toHashSet@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/toList(): kotlin.collections/List<#A> // kotlin.collections/toList|toList@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/toMutableList(): kotlin.collections/MutableList<#A> // kotlin.collections/toMutableList|toMutableList@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<#A> // kotlin.collections/toMutableSet|toMutableSet@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/toSet(): kotlin.collections/Set<#A> // kotlin.collections/toSet|toSet@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/union(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/union|union@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/windowed(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ...): kotlin.collections/List<kotlin.collections/List<#A>> // kotlin.collections/windowed|windowed@kotlin.collections.Iterable<0:0>(kotlin.Int;kotlin.Int;kotlin.Boolean){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<#A>> // kotlin.collections/withIndex|withIndex@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/zipWithNext(): kotlin.collections/List<kotlin/Pair<#A, #A>> // kotlin.collections/zipWithNext|zipWithNext@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.collections/Iterable<#A>>).kotlin.collections/flatten(): kotlin.collections/List<#A> // kotlin.collections/flatten|flatten@kotlin.collections.Iterable<kotlin.collections.Iterable<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterator<#A>).kotlin.collections/withIndex(): kotlin.collections/Iterator<kotlin.collections/IndexedValue<#A>> // kotlin.collections/withIndex|withIndex@kotlin.collections.Iterator<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterator<#A>).kotlin.sequences/asSequence(): kotlin.sequences/Sequence<#A> // kotlin.sequences/asSequence|asSequence@kotlin.collections.Iterator<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/asReversed(): kotlin.collections/List<#A> // kotlin.collections/asReversed|asReversed@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/binarySearch(#A, kotlin/Comparator<in #A>, kotlin/Int = ..., kotlin/Int = ...): kotlin/Int // kotlin.collections/binarySearch|binarySearch@kotlin.collections.List<0:0>(0:0;kotlin.Comparator<in|0:0>;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/binarySearch(kotlin/Int = ..., kotlin/Int = ..., kotlin/Function1<#A, kotlin/Int>): kotlin/Int // kotlin.collections/binarySearch|binarySearch@kotlin.collections.List<0:0>(kotlin.Int;kotlin.Int;kotlin.Function1<0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/dropLast|dropLast@kotlin.collections.List<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/first(): #A // kotlin.collections/first|first@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/firstOrNull(): #A? // kotlin.collections/firstOrNull|firstOrNull@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/getOrNull(kotlin/Int): #A? // kotlin.collections/getOrNull|getOrNull@kotlin.collections.List<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/indexOf(#A): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.collections.List<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/last(): #A // kotlin.collections/last|last@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/lastIndexOf(#A): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.collections.List<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/lastOrNull(): #A? // kotlin.collections/lastOrNull|lastOrNull@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/single(): #A // kotlin.collections/single|single@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/singleOrNull(): #A? // kotlin.collections/singleOrNull|singleOrNull@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<#A> // kotlin.collections/slice|slice@kotlin.collections.List<0:0>(kotlin.collections.Iterable<kotlin.Int>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<#A> // kotlin.collections/slice|slice@kotlin.collections.List<0:0>(kotlin.ranges.IntRange){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/takeLast|takeLast@kotlin.collections.List<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/addAll(kotlin.collections/Iterable<#A>): kotlin/Boolean // kotlin.collections/addAll|addAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/addAll(kotlin.sequences/Sequence<#A>): kotlin/Boolean // kotlin.collections/addAll|addAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/addAll(kotlin/Array<out #A>): kotlin/Boolean // kotlin.collections/addAll|addAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/removeAll(kotlin.collections/Iterable<#A>): kotlin/Boolean // kotlin.collections/removeAll|removeAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/removeAll(kotlin.sequences/Sequence<#A>): kotlin/Boolean // kotlin.collections/removeAll|removeAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/removeAll(kotlin/Array<out #A>): kotlin/Boolean // kotlin.collections/removeAll|removeAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/retainAll(kotlin.collections/Iterable<#A>): kotlin/Boolean // kotlin.collections/retainAll|retainAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/retainAll(kotlin.sequences/Sequence<#A>): kotlin/Boolean // kotlin.collections/retainAll|retainAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/retainAll(kotlin/Array<out #A>): kotlin/Boolean // kotlin.collections/retainAll|retainAll@kotlin.collections.MutableCollection<in|0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableIterable<#A>).kotlin.collections/removeAll(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/removeAll|removeAll@kotlin.collections.MutableIterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableIterable<#A>).kotlin.collections/retainAll(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/retainAll|retainAll@kotlin.collections.MutableIterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/asReversed(): kotlin.collections/MutableList<#A> // kotlin.collections/asReversed|asReversed@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/fill(#A) // kotlin.collections/fill|fill@kotlin.collections.MutableList<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/removeAll(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/removeAll|removeAll@kotlin.collections.MutableList<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/removeFirst(): #A // kotlin.collections/removeFirst|removeFirst@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/removeFirstOrNull(): #A? // kotlin.collections/removeFirstOrNull|removeFirstOrNull@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/removeLast(): #A // kotlin.collections/removeLast|removeLast@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/removeLastOrNull(): #A? // kotlin.collections/removeLastOrNull|removeLastOrNull@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/retainAll(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/retainAll|retainAll@kotlin.collections.MutableList<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.collections.MutableList<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.collections.MutableList<0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/sortWith(kotlin/Comparator<in #A>) // kotlin.collections/sortWith|sortWith@kotlin.collections.MutableList<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/minus(#A): kotlin.collections/Set<#A> // kotlin.collections/minus|minus@kotlin.collections.Set<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/minus(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/minus|minus@kotlin.collections.Set<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/minus(kotlin.sequences/Sequence<#A>): kotlin.collections/Set<#A> // kotlin.collections/minus|minus@kotlin.collections.Set<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/minus(kotlin/Array<out #A>): kotlin.collections/Set<#A> // kotlin.collections/minus|minus@kotlin.collections.Set<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/plus(#A): kotlin.collections/Set<#A> // kotlin.collections/plus|plus@kotlin.collections.Set<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/plus(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/plus|plus@kotlin.collections.Set<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/plus(kotlin.sequences/Sequence<#A>): kotlin.collections/Set<#A> // kotlin.collections/plus|plus@kotlin.collections.Set<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/plus(kotlin/Array<out #A>): kotlin.collections/Set<#A> // kotlin.collections/plus|plus@kotlin.collections.Set<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.coroutines/Continuation<#A>).kotlin.coroutines.intrinsics/intercepted(): kotlin.coroutines/Continuation<#A> // kotlin.coroutines.intrinsics/intercepted|intercepted@kotlin.coroutines.Continuation<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction0<#A>).kotlin.coroutines.intrinsics/createCoroutineUnintercepted(kotlin.coroutines/Continuation<#A>): kotlin.coroutines/Continuation<kotlin/Unit> // kotlin.coroutines.intrinsics/createCoroutineUnintercepted|createCoroutineUnintercepted@kotlin.coroutines.SuspendFunction0<0:0>(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction0<#A>).kotlin.coroutines/createCoroutine(kotlin.coroutines/Continuation<#A>): kotlin.coroutines/Continuation<kotlin/Unit> // kotlin.coroutines/createCoroutine|createCoroutine@kotlin.coroutines.SuspendFunction0<0:0>(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction0<#A>).kotlin.coroutines/startCoroutine(kotlin.coroutines/Continuation<#A>) // kotlin.coroutines/startCoroutine|startCoroutine@kotlin.coroutines.SuspendFunction0<0:0>(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/any(): kotlin/Boolean // kotlin.sequences/any|any@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/asIterable(): kotlin.collections/Iterable<#A> // kotlin.sequences/asIterable|asIterable@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/chunked(kotlin/Int): kotlin.sequences/Sequence<kotlin.collections/List<#A>> // kotlin.sequences/chunked|chunked@kotlin.sequences.Sequence<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/constrainOnce(): kotlin.sequences/Sequence<#A> // kotlin.sequences/constrainOnce|constrainOnce@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/contains(#A): kotlin/Boolean // kotlin.sequences/contains|contains@kotlin.sequences.Sequence<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/count(): kotlin/Int // kotlin.sequences/count|count@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/distinct(): kotlin.sequences/Sequence<#A> // kotlin.sequences/distinct|distinct@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/drop(kotlin/Int): kotlin.sequences/Sequence<#A> // kotlin.sequences/drop|drop@kotlin.sequences.Sequence<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/dropWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.sequences/Sequence<#A> // kotlin.sequences/dropWhile|dropWhile@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/elementAt(kotlin/Int): #A // kotlin.sequences/elementAt|elementAt@kotlin.sequences.Sequence<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.sequences/elementAtOrElse|elementAtOrElse@kotlin.sequences.Sequence<0:0>(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/elementAtOrNull(kotlin/Int): #A? // kotlin.sequences/elementAtOrNull|elementAtOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/filter(kotlin/Function1<#A, kotlin/Boolean>): kotlin.sequences/Sequence<#A> // kotlin.sequences/filter|filter@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/filterIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Boolean>): kotlin.sequences/Sequence<#A> // kotlin.sequences/filterIndexed|filterIndexed@kotlin.sequences.Sequence<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/filterNot(kotlin/Function1<#A, kotlin/Boolean>): kotlin.sequences/Sequence<#A> // kotlin.sequences/filterNot|filterNot@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/first(): #A // kotlin.sequences/first|first@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/firstOrNull(): #A? // kotlin.sequences/firstOrNull|firstOrNull@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/ifEmpty(kotlin/Function0<kotlin.sequences/Sequence<#A>>): kotlin.sequences/Sequence<#A> // kotlin.sequences/ifEmpty|ifEmpty@kotlin.sequences.Sequence<0:0>(kotlin.Function0<kotlin.sequences.Sequence<0:0>>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/indexOf(#A): kotlin/Int // kotlin.sequences/indexOf|indexOf@kotlin.sequences.Sequence<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<#A, kotlin/CharSequence>? = ...): kotlin/String // kotlin.sequences/joinToString|joinToString@kotlin.sequences.Sequence<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/last(): #A // kotlin.sequences/last|last@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/lastIndexOf(#A): kotlin/Int // kotlin.sequences/lastIndexOf|lastIndexOf@kotlin.sequences.Sequence<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/lastOrNull(): #A? // kotlin.sequences/lastOrNull|lastOrNull@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxWith(kotlin/Comparator<in #A>): #A // kotlin.sequences/maxWith|maxWith@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxWithOrNull(kotlin/Comparator<in #A>): #A? // kotlin.sequences/maxWithOrNull|maxWithOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minWith(kotlin/Comparator<in #A>): #A // kotlin.sequences/minWith|minWith@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minWithOrNull(kotlin/Comparator<in #A>): #A? // kotlin.sequences/minWithOrNull|minWithOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minus(#A): kotlin.sequences/Sequence<#A> // kotlin.sequences/minus|minus@kotlin.sequences.Sequence<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minus(kotlin.collections/Iterable<#A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/minus|minus@kotlin.sequences.Sequence<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minus(kotlin.sequences/Sequence<#A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/minus|minus@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minus(kotlin/Array<out #A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/minus|minus@kotlin.sequences.Sequence<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/none(): kotlin/Boolean // kotlin.sequences/none|none@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/onEach(kotlin/Function1<#A, kotlin/Unit>): kotlin.sequences/Sequence<#A> // kotlin.sequences/onEach|onEach@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/onEachIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Unit>): kotlin.sequences/Sequence<#A> // kotlin.sequences/onEachIndexed|onEachIndexed@kotlin.sequences.Sequence<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/plus(#A): kotlin.sequences/Sequence<#A> // kotlin.sequences/plus|plus@kotlin.sequences.Sequence<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/plus(kotlin.collections/Iterable<#A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/plus|plus@kotlin.sequences.Sequence<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/plus(kotlin.sequences/Sequence<#A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/plus|plus@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/plus(kotlin/Array<out #A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/plus|plus@kotlin.sequences.Sequence<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/shuffled(): kotlin.sequences/Sequence<#A> // kotlin.sequences/shuffled|shuffled@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/shuffled(kotlin.random/Random): kotlin.sequences/Sequence<#A> // kotlin.sequences/shuffled|shuffled@kotlin.sequences.Sequence<0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/single(): #A // kotlin.sequences/single|single@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/singleOrNull(): #A? // kotlin.sequences/singleOrNull|singleOrNull@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sortedWith(kotlin/Comparator<in #A>): kotlin.sequences/Sequence<#A> // kotlin.sequences/sortedWith|sortedWith@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/take(kotlin/Int): kotlin.sequences/Sequence<#A> // kotlin.sequences/take|take@kotlin.sequences.Sequence<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/takeWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.sequences/Sequence<#A> // kotlin.sequences/takeWhile|takeWhile@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/toHashSet(): kotlin.collections/HashSet<#A> // kotlin.sequences/toHashSet|toHashSet@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/toList(): kotlin.collections/List<#A> // kotlin.sequences/toList|toList@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/toMutableList(): kotlin.collections/MutableList<#A> // kotlin.sequences/toMutableList|toMutableList@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/toMutableSet(): kotlin.collections/MutableSet<#A> // kotlin.sequences/toMutableSet|toMutableSet@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/toSet(): kotlin.collections/Set<#A> // kotlin.sequences/toSet|toSet@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/windowed(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ...): kotlin.sequences/Sequence<kotlin.collections/List<#A>> // kotlin.sequences/windowed|windowed@kotlin.sequences.Sequence<0:0>(kotlin.Int;kotlin.Int;kotlin.Boolean){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/withIndex(): kotlin.sequences/Sequence<kotlin.collections/IndexedValue<#A>> // kotlin.sequences/withIndex|withIndex@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/zipWithNext(): kotlin.sequences/Sequence<kotlin/Pair<#A, #A>> // kotlin.sequences/zipWithNext|zipWithNext@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<kotlin.collections/Iterable<#A>>).kotlin.sequences/flatten(): kotlin.sequences/Sequence<#A> // kotlin.sequences/flatten|flatten@kotlin.sequences.Sequence<kotlin.collections.Iterable<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<kotlin.sequences/Sequence<#A>>).kotlin.sequences/flatten(): kotlin.sequences/Sequence<#A> // kotlin.sequences/flatten|flatten@kotlin.sequences.Sequence<kotlin.sequences.Sequence<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/fill(#A, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/fill|fill@kotlin.Array<0:0>(0:0;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.Array<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/reversedArray(): kotlin/Array<#A> // kotlin.collections/reversedArray|reversedArray@kotlin.Array<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/shuffle() // kotlin.collections/shuffle|shuffle@kotlin.Array<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/shuffle(kotlin.random/Random) // kotlin.collections/shuffle|shuffle@kotlin.Array<0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/sliceArray(kotlin.collections/Collection<kotlin/Int>): kotlin/Array<#A> // kotlin.collections/sliceArray|sliceArray@kotlin.Array<0:0>(kotlin.collections.Collection<kotlin.Int>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/sliceArray(kotlin.ranges/IntRange): kotlin/Array<#A> // kotlin.collections/sliceArray|sliceArray@kotlin.Array<0:0>(kotlin.ranges.IntRange){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/asIterable(): kotlin.collections/Iterable<#A> // kotlin.collections/asIterable|asIterable@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/asList(): kotlin.collections/List<#A> // kotlin.collections/asList|asList@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/asSequence(): kotlin.sequences/Sequence<#A> // kotlin.collections/asSequence|asSequence@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/contains(#A): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.Array<out|0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/contentDeepEquals(kotlin/Array<out #A>): kotlin/Boolean // kotlin.collections/contentDeepEquals|contentDeepEquals@kotlin.Array<out|0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/contentDeepHashCode(): kotlin/Int // kotlin.collections/contentDeepHashCode|contentDeepHashCode@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/contentDeepToString(): kotlin/String // kotlin.collections/contentDeepToString|contentDeepToString@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/distinct(): kotlin.collections/List<#A> // kotlin.collections/distinct|distinct@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/drop(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/drop|drop@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/dropLast(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/dropLast|dropLast@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/first(): #A // kotlin.collections/first|first@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/firstOrNull(): #A? // kotlin.collections/firstOrNull|firstOrNull@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/getOrNull(kotlin/Int): #A? // kotlin.collections/getOrNull|getOrNull@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/indexOf(#A): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.Array<out|0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/intersect(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/intersect|intersect@kotlin.Array<out|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/joinToString(kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/CharSequence = ..., kotlin/Int = ..., kotlin/CharSequence = ..., kotlin/Function1<#A, kotlin/CharSequence>? = ...): kotlin/String // kotlin.collections/joinToString|joinToString@kotlin.Array<out|0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/last(): #A // kotlin.collections/last|last@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/lastIndexOf(#A): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.Array<out|0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/lastOrNull(): #A? // kotlin.collections/lastOrNull|lastOrNull@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxWith(kotlin/Comparator<in #A>): #A // kotlin.collections/maxWith|maxWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxWithOrNull(kotlin/Comparator<in #A>): #A? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minWith(kotlin/Comparator<in #A>): #A // kotlin.collections/minWith|minWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minWithOrNull(kotlin/Comparator<in #A>): #A? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/random(kotlin.random/Random): #A // kotlin.collections/random|random@kotlin.Array<out|0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/randomOrNull(kotlin.random/Random): #A? // kotlin.collections/randomOrNull|randomOrNull@kotlin.Array<out|0:0>(kotlin.random.Random){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/reversed(): kotlin.collections/List<#A> // kotlin.collections/reversed|reversed@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/single(): #A // kotlin.collections/single|single@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/singleOrNull(): #A? // kotlin.collections/singleOrNull|singleOrNull@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin.collections/List<#A> // kotlin.collections/slice|slice@kotlin.Array<out|0:0>(kotlin.collections.Iterable<kotlin.Int>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/slice(kotlin.ranges/IntRange): kotlin.collections/List<#A> // kotlin.collections/slice|slice@kotlin.Array<out|0:0>(kotlin.ranges.IntRange){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sortWith(kotlin/Comparator<in #A>) // kotlin.collections/sortWith|sortWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sortWith(kotlin/Comparator<in #A>, kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sortWith|sortWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sortedArrayWith(kotlin/Comparator<in #A>): kotlin/Array<out #A> // kotlin.collections/sortedArrayWith|sortedArrayWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sortedWith(kotlin/Comparator<in #A>): kotlin.collections/List<#A> // kotlin.collections/sortedWith|sortedWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/subtract(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/subtract|subtract@kotlin.Array<out|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/take(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/take|take@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/takeLast(kotlin/Int): kotlin.collections/List<#A> // kotlin.collections/takeLast|takeLast@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/toHashSet(): kotlin.collections/HashSet<#A> // kotlin.collections/toHashSet|toHashSet@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/toList(): kotlin.collections/List<#A> // kotlin.collections/toList|toList@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/toMutableList(): kotlin.collections/MutableList<#A> // kotlin.collections/toMutableList|toMutableList@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/toMutableSet(): kotlin.collections/MutableSet<#A> // kotlin.collections/toMutableSet|toMutableSet@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/toSet(): kotlin.collections/Set<#A> // kotlin.collections/toSet|toSet@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/union(kotlin.collections/Iterable<#A>): kotlin.collections/Set<#A> // kotlin.collections/union|union@kotlin.Array<out|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/withIndex(): kotlin.collections/Iterable<kotlin.collections/IndexedValue<#A>> // kotlin.collections/withIndex|withIndex@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentDeepEquals(kotlin/Array<out #A>?): kotlin/Boolean // kotlin.collections/contentDeepEquals|contentDeepEquals@kotlin.Array<out|0:0>?(kotlin.Array<out|0:0>?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentDeepEqualsImpl(kotlin/Array<out #A>?): kotlin/Boolean // kotlin.collections/contentDeepEqualsImpl|contentDeepEqualsImpl@kotlin.Array<out|0:0>?(kotlin.Array<out|0:0>?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentDeepHashCode(): kotlin/Int // kotlin.collections/contentDeepHashCode|contentDeepHashCode@kotlin.Array<out|0:0>?(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentDeepToString(): kotlin/String // kotlin.collections/contentDeepToString|contentDeepToString@kotlin.Array<out|0:0>?(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentDeepToStringImpl(): kotlin/String // kotlin.collections/contentDeepToStringImpl|contentDeepToStringImpl@kotlin.Array<out|0:0>?(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentEquals(kotlin/Array<out #A>?): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.Array<out|0:0>?(kotlin.Array<out|0:0>?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.Array<out|0:0>?(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.Array<out|0:0>?(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out kotlin/Array<out #A>>).kotlin.collections/flatten(): kotlin.collections/List<#A> // kotlin.collections/flatten|flatten@kotlin.Array<out|kotlin.Array<out|0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Boolean, #A>> // kotlin.collections/zip|zip@kotlin.BooleanArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Boolean, #A>> // kotlin.collections/zip|zip@kotlin.BooleanArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Byte, #A>> // kotlin.collections/zip|zip@kotlin.ByteArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Byte, #A>> // kotlin.collections/zip|zip@kotlin.ByteArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Char, #A>> // kotlin.collections/zip|zip@kotlin.CharArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Char, #A>> // kotlin.collections/zip|zip@kotlin.CharArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/chunked(kotlin/Int, kotlin/Function1<kotlin/CharSequence, #A>): kotlin.collections/List<#A> // kotlin.text/chunked|chunked@kotlin.CharSequence(kotlin.Int;kotlin.Function1<kotlin.CharSequence,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/chunkedSequence(kotlin/Int, kotlin/Function1<kotlin/CharSequence, #A>): kotlin.sequences/Sequence<#A> // kotlin.text/chunkedSequence|chunkedSequence@kotlin.CharSequence(kotlin.Int;kotlin.Function1<kotlin.CharSequence,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/windowed(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Function1<kotlin/CharSequence, #A>): kotlin.collections/List<#A> // kotlin.text/windowed|windowed@kotlin.CharSequence(kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Function1<kotlin.CharSequence,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/windowedSequence(kotlin/Int, kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Function1<kotlin/CharSequence, #A>): kotlin.sequences/Sequence<#A> // kotlin.text/windowedSequence|windowedSequence@kotlin.CharSequence(kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Function1<kotlin.CharSequence,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/reversed(): kotlin/Comparator<#A> // kotlin.comparisons/reversed|reversed@kotlin.Comparator<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/then(kotlin/Comparator<in #A>): kotlin/Comparator<#A> // kotlin.comparisons/then|then@kotlin.Comparator<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/thenDescending(kotlin/Comparator<in #A>): kotlin/Comparator<#A> // kotlin.comparisons/thenDescending|thenDescending@kotlin.Comparator<0:0>(kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Double, #A>> // kotlin.collections/zip|zip@kotlin.DoubleArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Double, #A>> // kotlin.collections/zip|zip@kotlin.DoubleArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Float, #A>> // kotlin.collections/zip|zip@kotlin.FloatArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Float, #A>> // kotlin.collections/zip|zip@kotlin.FloatArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Int, #A>> // kotlin.collections/zip|zip@kotlin.IntArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Int, #A>> // kotlin.collections/zip|zip@kotlin.IntArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Long, #A>> // kotlin.collections/zip|zip@kotlin.LongArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Long, #A>> // kotlin.collections/zip|zip@kotlin.LongArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Pair<#A, #A>).kotlin/toList(): kotlin.collections/List<#A> // kotlin/toList|toList@kotlin.Pair<0:0,0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/Short, #A>> // kotlin.collections/zip|zip@kotlin.ShortArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/Short, #A>> // kotlin.collections/zip|zip@kotlin.ShortArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Triple<#A, #A, #A>).kotlin/toList(): kotlin.collections/List<#A> // kotlin/toList|toList@kotlin.Triple<0:0,0:0,0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/UByte, #A>> // kotlin.collections/zip|zip@kotlin.UByteArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/UByte, #A>> // kotlin.collections/zip|zip@kotlin.UByteArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/UInt, #A>> // kotlin.collections/zip|zip@kotlin.UIntArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/UInt, #A>> // kotlin.collections/zip|zip@kotlin.UIntArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/ULong, #A>> // kotlin.collections/zip|zip@kotlin.ULongArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/ULong, #A>> // kotlin.collections/zip|zip@kotlin.ULongArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>): kotlin.collections/List<kotlin/Pair<kotlin/UShort, #A>> // kotlin.collections/zip|zip@kotlin.UShortArray(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/zip(kotlin/Array<out #A>): kotlin.collections/List<kotlin/Pair<kotlin/UShort, #A>> // kotlin.collections/zip|zip@kotlin.UShortArray(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/arrayListOf(kotlin/Array<out #A>...): kotlin.collections/ArrayList<#A> // kotlin.collections/arrayListOf|arrayListOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/emptyList(): kotlin.collections/List<#A> // kotlin.collections/emptyList|emptyList(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/emptySet(): kotlin.collections/Set<#A> // kotlin.collections/emptySet|emptySet(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/hashSetOf(kotlin/Array<out #A>...): kotlin.collections/HashSet<#A> // kotlin.collections/hashSetOf|hashSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/listOf(#A): kotlin.collections/List<#A> // kotlin.collections/listOf|listOf(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/listOf(kotlin/Array<out #A>...): kotlin.collections/List<#A> // kotlin.collections/listOf|listOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/mutableListOf(kotlin/Array<out #A>...): kotlin.collections/MutableList<#A> // kotlin.collections/mutableListOf|mutableListOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/mutableSetOf(kotlin/Array<out #A>...): kotlin.collections/MutableSet<#A> // kotlin.collections/mutableSetOf|mutableSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/setOf(#A): kotlin.collections/Set<#A> // kotlin.collections/setOf|setOf(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.collections/setOf(kotlin/Array<out #A>...): kotlin.collections/Set<#A> // kotlin.collections/setOf|setOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/compareBy(kotlin/Array<out kotlin/Function1<#A, kotlin/Comparable<*>?>>...): kotlin/Comparator<#A> // kotlin.comparisons/compareBy|compareBy(kotlin.Array<out|kotlin.Function1<0:0,kotlin.Comparable<*>?>>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/compareValuesBy(#A, #A, kotlin/Array<out kotlin/Function1<#A, kotlin/Comparable<*>?>>...): kotlin/Int // kotlin.comparisons/compareValuesBy|compareValuesBy(0:0;0:0;kotlin.Array<out|kotlin.Function1<0:0,kotlin.Comparable<*>?>>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/maxOf(#A, #A, #A, kotlin/Comparator<in #A>): #A // kotlin.comparisons/maxOf|maxOf(0:0;0:0;0:0;kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/maxOf(#A, #A, kotlin/Comparator<in #A>): #A // kotlin.comparisons/maxOf|maxOf(0:0;0:0;kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/maxOf(#A, kotlin/Array<out #A>..., kotlin/Comparator<in #A>): #A // kotlin.comparisons/maxOf|maxOf(0:0;kotlin.Array<out|0:0>...;kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/minOf(#A, #A, #A, kotlin/Comparator<in #A>): #A // kotlin.comparisons/minOf|minOf(0:0;0:0;0:0;kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/minOf(#A, #A, kotlin/Comparator<in #A>): #A // kotlin.comparisons/minOf|minOf(0:0;0:0;kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.comparisons/minOf(#A, kotlin/Array<out #A>..., kotlin/Comparator<in #A>): #A // kotlin.comparisons/minOf|minOf(0:0;kotlin.Array<out|0:0>...;kotlin.Comparator<in|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.sequences/emptySequence(): kotlin.sequences/Sequence<#A> // kotlin.sequences/emptySequence|emptySequence(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.sequences/iterator(kotlin.coroutines/SuspendFunction1<kotlin.sequences/SequenceScope<#A>, kotlin/Unit>): kotlin.collections/Iterator<#A> // kotlin.sequences/iterator|iterator(kotlin.coroutines.SuspendFunction1<kotlin.sequences.SequenceScope<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.sequences/sequence(kotlin.coroutines/SuspendFunction1<kotlin.sequences/SequenceScope<#A>, kotlin/Unit>): kotlin.sequences/Sequence<#A> // kotlin.sequences/sequence|sequence(kotlin.coroutines.SuspendFunction1<kotlin.sequences.SequenceScope<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin.sequences/sequenceOf(kotlin/Array<out #A>...): kotlin.sequences/Sequence<#A> // kotlin.sequences/sequenceOf|sequenceOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin/lazy(kotlin/Any?, kotlin/Function0<#A>): kotlin/Lazy<#A> // kotlin/lazy|lazy(kotlin.Any?;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin/lazy(kotlin/Function0<#A>): kotlin/Lazy<#A> // kotlin/lazy|lazy(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin/lazy(kotlin/LazyThreadSafetyMode, kotlin/Function0<#A>): kotlin/Lazy<#A> // kotlin/lazy|lazy(kotlin.LazyThreadSafetyMode;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlin/lazyOf(#A): kotlin/Lazy<#A> // kotlin/lazyOf|lazyOf(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Comparable<#A>> (#A).kotlin.ranges/coerceAtLeast(#A): #A // kotlin.ranges/coerceAtLeast|coerceAtLeast@0:0(0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (#A).kotlin.ranges/coerceAtMost(#A): #A // kotlin.ranges/coerceAtMost|coerceAtMost@0:0(0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (#A).kotlin.ranges/coerceIn(#A?, #A?): #A // kotlin.ranges/coerceIn|coerceIn@0:0(0:0?;0:0?){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (#A).kotlin.ranges/coerceIn(kotlin.ranges/ClosedFloatingPointRange<#A>): #A // kotlin.ranges/coerceIn|coerceIn@0:0(kotlin.ranges.ClosedFloatingPointRange<0:0>){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (#A).kotlin.ranges/coerceIn(kotlin.ranges/ClosedRange<#A>): #A // kotlin.ranges/coerceIn|coerceIn@0:0(kotlin.ranges.ClosedRange<0:0>){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (#A).kotlin.ranges/rangeTo(#A): kotlin.ranges/ClosedRange<#A> // kotlin.ranges/rangeTo|rangeTo@0:0(0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (#A).kotlin.ranges/rangeUntil(#A): kotlin.ranges/OpenEndRange<#A> // kotlin.ranges/rangeUntil|rangeUntil@0:0(0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/Iterable<#A>).kotlin.collections/max(): #A // kotlin.collections/max|max@kotlin.collections.Iterable<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOrNull(): #A? // kotlin.collections/maxOrNull|maxOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/Iterable<#A>).kotlin.collections/min(): #A // kotlin.collections/min|min@kotlin.collections.Iterable<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/Iterable<#A>).kotlin.collections/minOrNull(): #A? // kotlin.collections/minOrNull|minOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/Iterable<#A>).kotlin.collections/sorted(): kotlin.collections/List<#A> // kotlin.collections/sorted|sorted@kotlin.collections.Iterable<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/Iterable<#A>).kotlin.collections/sortedDescending(): kotlin.collections/List<#A> // kotlin.collections/sortedDescending|sortedDescending@kotlin.collections.Iterable<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/List<#A?>).kotlin.collections/binarySearch(#A?, kotlin/Int = ..., kotlin/Int = ...): kotlin/Int // kotlin.collections/binarySearch|binarySearch@kotlin.collections.List<0:0?>(0:0?;kotlin.Int;kotlin.Int){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/MutableList<#A>).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.collections.MutableList<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/MutableList<#A>).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.collections.MutableList<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/max(): #A // kotlin.sequences/max|max@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOrNull(): #A? // kotlin.sequences/maxOrNull|maxOrNull@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/min(): #A // kotlin.sequences/min|min@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOrNull(): #A? // kotlin.sequences/minOrNull|minOrNull@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sorted(): kotlin.sequences/Sequence<#A> // kotlin.sequences/sorted|sorted@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sortedDescending(): kotlin.sequences/Sequence<#A> // kotlin.sequences/sortedDescending|sortedDescending@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<#A>).kotlin.collections/sortedArray(): kotlin/Array<#A> // kotlin.collections/sortedArray|sortedArray@kotlin.Array<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<#A>).kotlin.collections/sortedArrayDescending(): kotlin/Array<#A> // kotlin.collections/sortedArrayDescending|sortedArrayDescending@kotlin.Array<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/max(): #A // kotlin.collections/max|max@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/maxOrNull(): #A? // kotlin.collections/maxOrNull|maxOrNull@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/min(): #A // kotlin.collections/min|min@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/minOrNull(): #A? // kotlin.collections/minOrNull|minOrNull@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/sort() // kotlin.collections/sort|sort@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/sort(kotlin/Int = ..., kotlin/Int = ...) // kotlin.collections/sort|sort@kotlin.Array<out|0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/sortDescending() // kotlin.collections/sortDescending|sortDescending@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/sortDescending(kotlin/Int, kotlin/Int) // kotlin.collections/sortDescending|sortDescending@kotlin.Array<out|0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/sorted(): kotlin.collections/List<#A> // kotlin.collections/sorted|sorted@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin/Array<out #A>).kotlin.collections/sortedDescending(): kotlin.collections/List<#A> // kotlin.collections/sortedDescending|sortedDescending@kotlin.Array<out|0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/maxOf(#A, #A): #A // kotlin.comparisons/maxOf|maxOf(0:0;0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/maxOf(#A, #A, #A): #A // kotlin.comparisons/maxOf|maxOf(0:0;0:0;0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/maxOf(#A, kotlin/Array<out #A>...): #A // kotlin.comparisons/maxOf|maxOf(0:0;kotlin.Array<out|0:0>...){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/minOf(#A, #A): #A // kotlin.comparisons/minOf|minOf(0:0;0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/minOf(#A, #A, #A): #A // kotlin.comparisons/minOf|minOf(0:0;0:0;0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/minOf(#A, kotlin/Array<out #A>...): #A // kotlin.comparisons/minOf|minOf(0:0;kotlin.Array<out|0:0>...){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/naturalOrder(): kotlin/Comparator<#A> // kotlin.comparisons/naturalOrder|naturalOrder(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/reverseOrder(): kotlin/Comparator<#A> // kotlin.comparisons/reverseOrder|reverseOrder(){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<*>> kotlin.comparisons/compareValues(#A?, #A?): kotlin/Int // kotlin.comparisons/compareValues|compareValues(0:0?;0:0?){0§<kotlin.Comparable<*>>}[0]
final fun <#A: kotlin/Enum<#A>> kotlin.enums/enumEntries(kotlin/Array<#A>): kotlin.enums/EnumEntries<#A> // kotlin.enums/enumEntries|enumEntries(kotlin.Array<0:0>){0§<kotlin.Enum<0:0>>}[0]
final fun <#A: kotlin/Enum<#A>> kotlin.enums/enumEntries(kotlin/Function0<kotlin/Array<#A>>): kotlin.enums/EnumEntries<#A> // kotlin.enums/enumEntries|enumEntries(kotlin.Function0<kotlin.Array<0:0>>){0§<kotlin.Enum<0:0>>}[0]
final fun <#A: kotlin/Enum<#A>> kotlin.enums/enumEntriesIntrinsic(): kotlin.enums/EnumEntries<#A> // kotlin.enums/enumEntriesIntrinsic|enumEntriesIntrinsic(){0§<kotlin.Enum<0:0>>}[0]
final fun kotlin.collections/mapCapacity(kotlin/Int): kotlin/Int // kotlin.collections/mapCapacity|mapCapacity(kotlin.Int){}[0]
final fun kotlin.collections/throwCountOverflow() // kotlin.collections/throwCountOverflow|throwCountOverflow(){}[0]
final fun kotlin.collections/throwIndexOverflow() // kotlin.collections/throwIndexOverflow|throwIndexOverflow(){}[0]
final fun kotlin.comparisons/maxOf(kotlin/Byte, kotlin/ByteArray...): kotlin/Byte // kotlin.comparisons/maxOf|maxOf(kotlin.Byte;kotlin.ByteArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/Double, kotlin/DoubleArray...): kotlin/Double // kotlin.comparisons/maxOf|maxOf(kotlin.Double;kotlin.DoubleArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/Float, kotlin/FloatArray...): kotlin/Float // kotlin.comparisons/maxOf|maxOf(kotlin.Float;kotlin.FloatArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/Int, kotlin/IntArray...): kotlin/Int // kotlin.comparisons/maxOf|maxOf(kotlin.Int;kotlin.IntArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/Long, kotlin/LongArray...): kotlin/Long // kotlin.comparisons/maxOf|maxOf(kotlin.Long;kotlin.LongArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/Short, kotlin/ShortArray...): kotlin/Short // kotlin.comparisons/maxOf|maxOf(kotlin.Short;kotlin.ShortArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/UByte, kotlin/UByte): kotlin/UByte // kotlin.comparisons/maxOf|maxOf(kotlin.UByte;kotlin.UByte){}[0]
final fun kotlin.comparisons/maxOf(kotlin/UByte, kotlin/UByteArray...): kotlin/UByte // kotlin.comparisons/maxOf|maxOf(kotlin.UByte;kotlin.UByteArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.comparisons/maxOf|maxOf(kotlin.UInt;kotlin.UInt){}[0]
final fun kotlin.comparisons/maxOf(kotlin/UInt, kotlin/UIntArray...): kotlin/UInt // kotlin.comparisons/maxOf|maxOf(kotlin.UInt;kotlin.UIntArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.comparisons/maxOf|maxOf(kotlin.ULong;kotlin.ULong){}[0]
final fun kotlin.comparisons/maxOf(kotlin/ULong, kotlin/ULongArray...): kotlin/ULong // kotlin.comparisons/maxOf|maxOf(kotlin.ULong;kotlin.ULongArray...){}[0]
final fun kotlin.comparisons/maxOf(kotlin/UShort, kotlin/UShort): kotlin/UShort // kotlin.comparisons/maxOf|maxOf(kotlin.UShort;kotlin.UShort){}[0]
final fun kotlin.comparisons/maxOf(kotlin/UShort, kotlin/UShortArray...): kotlin/UShort // kotlin.comparisons/maxOf|maxOf(kotlin.UShort;kotlin.UShortArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/Byte, kotlin/ByteArray...): kotlin/Byte // kotlin.comparisons/minOf|minOf(kotlin.Byte;kotlin.ByteArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/Double, kotlin/DoubleArray...): kotlin/Double // kotlin.comparisons/minOf|minOf(kotlin.Double;kotlin.DoubleArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/Float, kotlin/FloatArray...): kotlin/Float // kotlin.comparisons/minOf|minOf(kotlin.Float;kotlin.FloatArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/Int, kotlin/IntArray...): kotlin/Int // kotlin.comparisons/minOf|minOf(kotlin.Int;kotlin.IntArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/Long, kotlin/LongArray...): kotlin/Long // kotlin.comparisons/minOf|minOf(kotlin.Long;kotlin.LongArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/Short, kotlin/ShortArray...): kotlin/Short // kotlin.comparisons/minOf|minOf(kotlin.Short;kotlin.ShortArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/UByte, kotlin/UByte): kotlin/UByte // kotlin.comparisons/minOf|minOf(kotlin.UByte;kotlin.UByte){}[0]
final fun kotlin.comparisons/minOf(kotlin/UByte, kotlin/UByteArray...): kotlin/UByte // kotlin.comparisons/minOf|minOf(kotlin.UByte;kotlin.UByteArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.comparisons/minOf|minOf(kotlin.UInt;kotlin.UInt){}[0]
final fun kotlin.comparisons/minOf(kotlin/UInt, kotlin/UIntArray...): kotlin/UInt // kotlin.comparisons/minOf|minOf(kotlin.UInt;kotlin.UIntArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.comparisons/minOf|minOf(kotlin.ULong;kotlin.ULong){}[0]
final fun kotlin.comparisons/minOf(kotlin/ULong, kotlin/ULongArray...): kotlin/ULong // kotlin.comparisons/minOf|minOf(kotlin.ULong;kotlin.ULongArray...){}[0]
final fun kotlin.comparisons/minOf(kotlin/UShort, kotlin/UShort): kotlin/UShort // kotlin.comparisons/minOf|minOf(kotlin.UShort;kotlin.UShort){}[0]
final fun kotlin.comparisons/minOf(kotlin/UShort, kotlin/UShortArray...): kotlin/UShort // kotlin.comparisons/minOf|minOf(kotlin.UShort;kotlin.UShortArray...){}[0]
final fun kotlin.internal/getProgressionLastElement(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlin.internal/getProgressionLastElement|getProgressionLastElement(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun kotlin.internal/getProgressionLastElement(kotlin/Long, kotlin/Long, kotlin/Long): kotlin/Long // kotlin.internal/getProgressionLastElement|getProgressionLastElement(kotlin.Long;kotlin.Long;kotlin.Long){}[0]
final fun kotlin.internal/getProgressionLastElement(kotlin/UInt, kotlin/UInt, kotlin/Int): kotlin/UInt // kotlin.internal/getProgressionLastElement|getProgressionLastElement(kotlin.UInt;kotlin.UInt;kotlin.Int){}[0]
final fun kotlin.internal/getProgressionLastElement(kotlin/ULong, kotlin/ULong, kotlin/Long): kotlin/ULong // kotlin.internal/getProgressionLastElement|getProgressionLastElement(kotlin.ULong;kotlin.ULong;kotlin.Long){}[0]
final fun kotlin.io/print(kotlin/Any?) // kotlin.io/print|print(kotlin.Any?){}[0]
final fun kotlin.io/println() // kotlin.io/println|println(){}[0]
final fun kotlin.io/println(kotlin/Any?) // kotlin.io/println|println(kotlin.Any?){}[0]
final fun kotlin.io/readln(): kotlin/String // kotlin.io/readln|readln(){}[0]
final fun kotlin.io/readlnOrNull(): kotlin/String? // kotlin.io/readlnOrNull|readlnOrNull(){}[0]
final fun kotlin.math/abs(kotlin/Int): kotlin/Int // kotlin.math/abs|abs(kotlin.Int){}[0]
final fun kotlin.math/abs(kotlin/Long): kotlin/Long // kotlin.math/abs|abs(kotlin.Long){}[0]
final fun kotlin.math/log(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/log|log(kotlin.Double;kotlin.Double){}[0]
final fun kotlin.math/round(kotlin/Double): kotlin/Double // kotlin.math/round|round(kotlin.Double){}[0]
final fun kotlin.random/Random(kotlin/Int): kotlin.random/Random // kotlin.random/Random|Random(kotlin.Int){}[0]
final fun kotlin.random/Random(kotlin/Long): kotlin.random/Random // kotlin.random/Random|Random(kotlin.Long){}[0]
final fun kotlin.text/String(kotlin/CharArray): kotlin/String // kotlin.text/String|String(kotlin.CharArray){}[0]
final fun kotlin.text/String(kotlin/CharArray, kotlin/Int, kotlin/Int): kotlin/String // kotlin.text/String|String(kotlin.CharArray;kotlin.Int;kotlin.Int){}[0]
final fun kotlin.text/checkRadix(kotlin/Int): kotlin/Int // kotlin.text/checkRadix|checkRadix(kotlin.Int){}[0]
final fun kotlin/createFailure(kotlin/Throwable): kotlin/Any // kotlin/createFailure|createFailure(kotlin.Throwable){}[0]
final fun kotlin/doubleToUInt(kotlin/Double): kotlin/UInt // kotlin/doubleToUInt|doubleToUInt(kotlin.Double){}[0]
final fun kotlin/doubleToULong(kotlin/Double): kotlin/ULong // kotlin/doubleToULong|doubleToULong(kotlin.Double){}[0]
final fun kotlin/uintDivide(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin/uintDivide|uintDivide(kotlin.UInt;kotlin.UInt){}[0]
final fun kotlin/uintRemainder(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin/uintRemainder|uintRemainder(kotlin.UInt;kotlin.UInt){}[0]
final fun kotlin/uintToDouble(kotlin/Int): kotlin/Double // kotlin/uintToDouble|uintToDouble(kotlin.Int){}[0]
final fun kotlin/ulongDivide(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin/ulongDivide|ulongDivide(kotlin.ULong;kotlin.ULong){}[0]
final fun kotlin/ulongRemainder(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin/ulongRemainder|ulongRemainder(kotlin.ULong;kotlin.ULong){}[0]
final fun kotlin/ulongToDouble(kotlin/Long): kotlin/Double // kotlin/ulongToDouble|ulongToDouble(kotlin.Long){}[0]
final inline fun (kotlin.ranges/CharRange).kotlin.ranges/contains(kotlin/Char?): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.CharRange(kotlin.Char?){}[0]
final inline fun (kotlin.ranges/CharRange).kotlin.ranges/random(): kotlin/Char // kotlin.ranges/random|random@kotlin.ranges.CharRange(){}[0]
final inline fun (kotlin.ranges/CharRange).kotlin.ranges/randomOrNull(): kotlin/Char? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.CharRange(){}[0]
final inline fun (kotlin.ranges/IntRange).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.IntRange(kotlin.Byte){}[0]
final inline fun (kotlin.ranges/IntRange).kotlin.ranges/contains(kotlin/Int?): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.IntRange(kotlin.Int?){}[0]
final inline fun (kotlin.ranges/IntRange).kotlin.ranges/contains(kotlin/Long): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.IntRange(kotlin.Long){}[0]
final inline fun (kotlin.ranges/IntRange).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.IntRange(kotlin.Short){}[0]
final inline fun (kotlin.ranges/IntRange).kotlin.ranges/random(): kotlin/Int // kotlin.ranges/random|random@kotlin.ranges.IntRange(){}[0]
final inline fun (kotlin.ranges/IntRange).kotlin.ranges/randomOrNull(): kotlin/Int? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.IntRange(){}[0]
final inline fun (kotlin.ranges/LongRange).kotlin.ranges/contains(kotlin/Byte): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.LongRange(kotlin.Byte){}[0]
final inline fun (kotlin.ranges/LongRange).kotlin.ranges/contains(kotlin/Int): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.LongRange(kotlin.Int){}[0]
final inline fun (kotlin.ranges/LongRange).kotlin.ranges/contains(kotlin/Long?): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.LongRange(kotlin.Long?){}[0]
final inline fun (kotlin.ranges/LongRange).kotlin.ranges/contains(kotlin/Short): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.LongRange(kotlin.Short){}[0]
final inline fun (kotlin.ranges/LongRange).kotlin.ranges/random(): kotlin/Long // kotlin.ranges/random|random@kotlin.ranges.LongRange(){}[0]
final inline fun (kotlin.ranges/LongRange).kotlin.ranges/randomOrNull(): kotlin/Long? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.LongRange(){}[0]
final inline fun (kotlin.ranges/UIntRange).kotlin.ranges/contains(kotlin/UInt?): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.UIntRange(kotlin.UInt?){}[0]
final inline fun (kotlin.ranges/UIntRange).kotlin.ranges/random(): kotlin/UInt // kotlin.ranges/random|random@kotlin.ranges.UIntRange(){}[0]
final inline fun (kotlin.ranges/UIntRange).kotlin.ranges/randomOrNull(): kotlin/UInt? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.UIntRange(){}[0]
final inline fun (kotlin.ranges/ULongRange).kotlin.ranges/contains(kotlin/ULong?): kotlin/Boolean // kotlin.ranges/contains|contains@kotlin.ranges.ULongRange(kotlin.ULong?){}[0]
final inline fun (kotlin.ranges/ULongRange).kotlin.ranges/random(): kotlin/ULong // kotlin.ranges/random|random@kotlin.ranges.ULongRange(){}[0]
final inline fun (kotlin.ranges/ULongRange).kotlin.ranges/randomOrNull(): kotlin/ULong? // kotlin.ranges/randomOrNull|randomOrNull@kotlin.ranges.ULongRange(){}[0]
final inline fun (kotlin.text/Appendable).kotlin.text/appendLine(): kotlin.text/Appendable // kotlin.text/appendLine|appendLine@kotlin.text.Appendable(){}[0]
final inline fun (kotlin.text/Appendable).kotlin.text/appendLine(kotlin/Char): kotlin.text/Appendable // kotlin.text/appendLine|appendLine@kotlin.text.Appendable(kotlin.Char){}[0]
final inline fun (kotlin.text/Appendable).kotlin.text/appendLine(kotlin/CharSequence?): kotlin.text/Appendable // kotlin.text/appendLine|appendLine@kotlin.text.Appendable(kotlin.CharSequence?){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/append(kotlin/Any?): kotlin.text/StringBuilder // kotlin.text/append|append@kotlin.text.StringBuilder(kotlin.Any?){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/append(kotlin/Byte): kotlin.text/StringBuilder // kotlin.text/append|append@kotlin.text.StringBuilder(kotlin.Byte){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/append(kotlin/CharArray, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/append|append@kotlin.text.StringBuilder(kotlin.CharArray;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/append(kotlin/Short): kotlin.text/StringBuilder // kotlin.text/append|append@kotlin.text.StringBuilder(kotlin.Short){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Any?): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Any?){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Boolean): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Boolean){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Byte): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Byte){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Char): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Char){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/CharArray): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.CharArray){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/CharSequence?): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.CharSequence?){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Double): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Double){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Float): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Float){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Int): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Long): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Long){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/Short): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.Short){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendLine(kotlin/String?): kotlin.text/StringBuilder // kotlin.text/appendLine|appendLine@kotlin.text.StringBuilder(kotlin.String?){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendRange(kotlin/CharArray, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/appendRange|appendRange@kotlin.text.StringBuilder(kotlin.CharArray;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/appendRange(kotlin/CharSequence, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/appendRange|appendRange@kotlin.text.StringBuilder(kotlin.CharSequence;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/deleteAt(kotlin/Int): kotlin.text/StringBuilder // kotlin.text/deleteAt|deleteAt@kotlin.text.StringBuilder(kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/deleteRange(kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/deleteRange|deleteRange@kotlin.text.StringBuilder(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/insert(kotlin/Int, kotlin/Byte): kotlin.text/StringBuilder // kotlin.text/insert|insert@kotlin.text.StringBuilder(kotlin.Int;kotlin.Byte){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/insert(kotlin/Int, kotlin/Short): kotlin.text/StringBuilder // kotlin.text/insert|insert@kotlin.text.StringBuilder(kotlin.Int;kotlin.Short){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/insertRange(kotlin/Int, kotlin/CharArray, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/insertRange|insertRange@kotlin.text.StringBuilder(kotlin.Int;kotlin.CharArray;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/insertRange(kotlin/Int, kotlin/CharSequence, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/insertRange|insertRange@kotlin.text.StringBuilder(kotlin.Int;kotlin.CharSequence;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/set(kotlin/Int, kotlin/Char) // kotlin.text/set|set@kotlin.text.StringBuilder(kotlin.Int;kotlin.Char){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/setRange(kotlin/Int, kotlin/Int, kotlin/String): kotlin.text/StringBuilder // kotlin.text/setRange|setRange@kotlin.text.StringBuilder(kotlin.Int;kotlin.Int;kotlin.String){}[0]
final inline fun (kotlin.text/StringBuilder).kotlin.text/toCharArray(kotlin/CharArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...) // kotlin.text/toCharArray|toCharArray@kotlin.text.StringBuilder(kotlin.CharArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin.time/TimeSource).kotlin.time/measureTime(kotlin/Function0<kotlin/Unit>): kotlin.time/Duration // kotlin.time/measureTime|measureTime@kotlin.time.TimeSource(kotlin.Function0<kotlin.Unit>){}[0]
final inline fun (kotlin.time/TimeSource.Monotonic).kotlin.time/measureTime(kotlin/Function0<kotlin/Unit>): kotlin.time/Duration // kotlin.time/measureTime|measureTime@kotlin.time.TimeSource.Monotonic(kotlin.Function0<kotlin.Unit>){}[0]
final inline fun (kotlin/Any?).kotlin/hashCode(): kotlin/Int // kotlin/hashCode|hashCode@kotlin.Any?(){}[0]
final inline fun (kotlin/Array<*>?).kotlin.collections/isNullOrEmpty(): kotlin/Boolean // kotlin.collections/isNullOrEmpty|isNullOrEmpty@kotlin.Array<*>?(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/all(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/any(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/component1(): kotlin/Boolean // kotlin.collections/component1|component1@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/component2(): kotlin/Boolean // kotlin.collections/component2|component2@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/component3(): kotlin/Boolean // kotlin.collections/component3|component3@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/component4(): kotlin/Boolean // kotlin.collections/component4|component4@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/component5(): kotlin/Boolean // kotlin.collections/component5|component5@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/count(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/dropWhile|dropWhile@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.BooleanArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Boolean? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.BooleanArray(kotlin.Int){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/filter(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/filter|filter@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/filterIndexed|filterIndexed@kotlin.BooleanArray(kotlin.Function2<kotlin.Int,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/filterNot|filterNot@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/find(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/find|find@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/findLast|findLast@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/first(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/first|first@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/firstOrNull|firstOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Boolean, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Unit>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Boolean, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.BooleanArray(kotlin.Function2<kotlin.Int,kotlin.Boolean,kotlin.Unit>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/getOrElse|getOrElse@kotlin.BooleanArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/last(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/last|last@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/lastOrNull|lastOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Boolean, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Double>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Boolean, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Float>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Boolean, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Double>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Boolean, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Float>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Boolean, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Double>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Boolean, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Float>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Boolean, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Double>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Boolean, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Float>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/none(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Boolean, kotlin/Unit>): kotlin/BooleanArray // kotlin.collections/onEach|onEach@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Unit>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Boolean, kotlin/Unit>): kotlin/BooleanArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.BooleanArray(kotlin.Function2<kotlin.Int,kotlin.Boolean,kotlin.Unit>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/partition(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Boolean>, kotlin.collections/List<kotlin/Boolean>> // kotlin.collections/partition|partition@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/random(): kotlin/Boolean // kotlin.collections/random|random@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/randomOrNull(): kotlin/Boolean? // kotlin.collections/randomOrNull|randomOrNull@kotlin.BooleanArray(){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/reduce|reduce@kotlin.BooleanArray(kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.BooleanArray(kotlin.Function3<kotlin.Int,kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.BooleanArray(kotlin.Function3<kotlin.Int,kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.BooleanArray(kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/reduceRight|reduceRight@kotlin.BooleanArray(kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.BooleanArray(kotlin.Function3<kotlin.Int,kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.BooleanArray(kotlin.Function3<kotlin.Int,kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.BooleanArray(kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/runningReduce|runningReduce@kotlin.BooleanArray(kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.BooleanArray(kotlin.Function3<kotlin.Int,kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/single(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/single|single@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin/Boolean? // kotlin.collections/singleOrNull|singleOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Boolean, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Int>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Boolean, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Double>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Boolean, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Double>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Boolean, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Int>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Boolean, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Long>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Boolean, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.UInt>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Boolean, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.ULong>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/BooleanArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/takeWhile|takeWhile@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){}[0]
final inline fun (kotlin/Byte).kotlin.experimental/and(kotlin/Byte): kotlin/Byte // kotlin.experimental/and|and@kotlin.Byte(kotlin.Byte){}[0]
final inline fun (kotlin/Byte).kotlin.experimental/inv(): kotlin/Byte // kotlin.experimental/inv|inv@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin.experimental/or(kotlin/Byte): kotlin/Byte // kotlin.experimental/or|or@kotlin.Byte(kotlin.Byte){}[0]
final inline fun (kotlin/Byte).kotlin.experimental/xor(kotlin/Byte): kotlin/Byte // kotlin.experimental/xor|xor@kotlin.Byte(kotlin.Byte){}[0]
final inline fun (kotlin/Byte).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/floorDiv(kotlin/Byte): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Byte(kotlin.Byte){}[0]
final inline fun (kotlin/Byte).kotlin/floorDiv(kotlin/Int): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Byte(kotlin.Int){}[0]
final inline fun (kotlin/Byte).kotlin/floorDiv(kotlin/Long): kotlin/Long // kotlin/floorDiv|floorDiv@kotlin.Byte(kotlin.Long){}[0]
final inline fun (kotlin/Byte).kotlin/floorDiv(kotlin/Short): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Byte(kotlin.Short){}[0]
final inline fun (kotlin/Byte).kotlin/mod(kotlin/Byte): kotlin/Byte // kotlin/mod|mod@kotlin.Byte(kotlin.Byte){}[0]
final inline fun (kotlin/Byte).kotlin/mod(kotlin/Int): kotlin/Int // kotlin/mod|mod@kotlin.Byte(kotlin.Int){}[0]
final inline fun (kotlin/Byte).kotlin/mod(kotlin/Long): kotlin/Long // kotlin/mod|mod@kotlin.Byte(kotlin.Long){}[0]
final inline fun (kotlin/Byte).kotlin/mod(kotlin/Short): kotlin/Short // kotlin/mod|mod@kotlin.Byte(kotlin.Short){}[0]
final inline fun (kotlin/Byte).kotlin/takeHighestOneBit(): kotlin/Byte // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/takeLowestOneBit(): kotlin/Byte // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/toUByte(): kotlin/UByte // kotlin/toUByte|toUByte@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/toUInt(): kotlin/UInt // kotlin/toUInt|toUInt@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/toULong(): kotlin/ULong // kotlin/toULong|toULong@kotlin.Byte(){}[0]
final inline fun (kotlin/Byte).kotlin/toUShort(): kotlin/UShort // kotlin/toUShort|toUShort@kotlin.Byte(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/all(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/any(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/asUByteArray(): kotlin/UByteArray // kotlin.collections/asUByteArray|asUByteArray@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/component1(): kotlin/Byte // kotlin.collections/component1|component1@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/component2(): kotlin/Byte // kotlin.collections/component2|component2@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/component3(): kotlin/Byte // kotlin.collections/component3|component3@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/component4(): kotlin/Byte // kotlin.collections/component4|component4@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/component5(): kotlin/Byte // kotlin.collections/component5|component5@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/count(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/dropWhile|dropWhile@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Byte>): kotlin/Byte // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.ByteArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Byte? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.ByteArray(kotlin.Int){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/filter(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/filter|filter@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Byte, kotlin/Boolean>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/filterIndexed|filterIndexed@kotlin.ByteArray(kotlin.Function2<kotlin.Int,kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/filterNot|filterNot@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/find(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte? // kotlin.collections/find|find@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte? // kotlin.collections/findLast|findLast@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/first(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte // kotlin.collections/first|first@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte? // kotlin.collections/firstOrNull|firstOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Byte, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Unit>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Byte, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.ByteArray(kotlin.Function2<kotlin.Int,kotlin.Byte,kotlin.Unit>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Byte>): kotlin/Byte // kotlin.collections/getOrElse|getOrElse@kotlin.ByteArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/last(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte // kotlin.collections/last|last@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte? // kotlin.collections/lastOrNull|lastOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Byte, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Double>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Byte, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Float>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Byte, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Double>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Byte, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Float>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Byte, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Double>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Byte, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Float>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Byte, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Double>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Byte, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Float>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/none(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Byte, kotlin/Unit>): kotlin/ByteArray // kotlin.collections/onEach|onEach@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Unit>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Byte, kotlin/Unit>): kotlin/ByteArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.ByteArray(kotlin.Function2<kotlin.Int,kotlin.Byte,kotlin.Unit>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/partition(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Byte>, kotlin.collections/List<kotlin/Byte>> // kotlin.collections/partition|partition@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/random(): kotlin/Byte // kotlin.collections/random|random@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/randomOrNull(): kotlin/Byte? // kotlin.collections/randomOrNull|randomOrNull@kotlin.ByteArray(){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte // kotlin.collections/reduce|reduce@kotlin.ByteArray(kotlin.Function2<kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.ByteArray(kotlin.Function3<kotlin.Int,kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.ByteArray(kotlin.Function3<kotlin.Int,kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.ByteArray(kotlin.Function2<kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte // kotlin.collections/reduceRight|reduceRight@kotlin.ByteArray(kotlin.Function2<kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.ByteArray(kotlin.Function3<kotlin.Int,kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.ByteArray(kotlin.Function3<kotlin.Int,kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin/Byte? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.ByteArray(kotlin.Function2<kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/runningReduce|runningReduce@kotlin.ByteArray(kotlin.Function2<kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Byte, kotlin/Byte, kotlin/Byte>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.ByteArray(kotlin.Function3<kotlin.Int,kotlin.Byte,kotlin.Byte,kotlin.Byte>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/single(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte // kotlin.collections/single|single@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin/Byte? // kotlin.collections/singleOrNull|singleOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Byte, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Int>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Byte, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Double>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Byte, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Double>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Byte, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Int>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Byte, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Long>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Byte, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.UInt>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Byte, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.ULong>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Byte, kotlin/Boolean>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/takeWhile|takeWhile@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Boolean>){}[0]
final inline fun (kotlin/ByteArray).kotlin.collections/toUByteArray(): kotlin/UByteArray // kotlin.collections/toUByteArray|toUByteArray@kotlin.ByteArray(){}[0]
final inline fun (kotlin/Char).kotlin.text/plus(kotlin/String): kotlin/String // kotlin.text/plus|plus@kotlin.Char(kotlin.String){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/all(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/any(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/component1(): kotlin/Char // kotlin.collections/component1|component1@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/component2(): kotlin/Char // kotlin.collections/component2|component2@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/component3(): kotlin/Char // kotlin.collections/component3|component3@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/component4(): kotlin/Char // kotlin.collections/component4|component4@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/component5(): kotlin/Char // kotlin.collections/component5|component5@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/count(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin.collections/List<kotlin/Char> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin.collections/List<kotlin/Char> // kotlin.collections/dropWhile|dropWhile@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Char>): kotlin/Char // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.CharArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Char? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.CharArray(kotlin.Int){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/filter(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin.collections/List<kotlin/Char> // kotlin.collections/filter|filter@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Boolean>): kotlin.collections/List<kotlin/Char> // kotlin.collections/filterIndexed|filterIndexed@kotlin.CharArray(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin.collections/List<kotlin/Char> // kotlin.collections/filterNot|filterNot@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/find(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.collections/find|find@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.collections/findLast|findLast@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/first(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char // kotlin.collections/first|first@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.collections/firstOrNull|firstOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Char, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Unit>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.CharArray(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Unit>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Char>): kotlin/Char // kotlin.collections/getOrElse|getOrElse@kotlin.CharArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/last(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char // kotlin.collections/last|last@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.collections/lastOrNull|lastOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/none(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Char, kotlin/Unit>): kotlin/CharArray // kotlin.collections/onEach|onEach@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Unit>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Unit>): kotlin/CharArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.CharArray(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Unit>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/partition(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Char>, kotlin.collections/List<kotlin/Char>> // kotlin.collections/partition|partition@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/random(): kotlin/Char // kotlin.collections/random|random@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/randomOrNull(): kotlin/Char? // kotlin.collections/randomOrNull|randomOrNull@kotlin.CharArray(){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.collections/reduce|reduce@kotlin.CharArray(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.CharArray(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.CharArray(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.CharArray(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.collections/reduceRight|reduceRight@kotlin.CharArray(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.CharArray(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.CharArray(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.CharArray(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin.collections/List<kotlin/Char> // kotlin.collections/runningReduce|runningReduce@kotlin.CharArray(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin.collections/List<kotlin/Char> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.CharArray(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/single(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char // kotlin.collections/single|single@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.collections/singleOrNull|singleOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Char, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Int>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Char, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Int>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Char, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Long>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Char, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.UInt>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Char, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.ULong>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin.collections/List<kotlin/Char> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin.collections/List<kotlin/Char> // kotlin.collections/takeWhile|takeWhile@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/all(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Boolean // kotlin.text/all|all@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/any(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Boolean // kotlin.text/any|any@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/contains(kotlin.text/Regex): kotlin/Boolean // kotlin.text/contains|contains@kotlin.CharSequence(kotlin.text.Regex){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/count(): kotlin/Int // kotlin.text/count|count@kotlin.CharSequence(){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/count(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Int // kotlin.text/count|count@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/dropLastWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/dropLastWhile|dropLastWhile@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/dropWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/dropWhile|dropWhile@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Char>): kotlin/Char // kotlin.text/elementAtOrElse|elementAtOrElse@kotlin.CharSequence(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/elementAtOrNull(kotlin/Int): kotlin/Char? // kotlin.text/elementAtOrNull|elementAtOrNull@kotlin.CharSequence(kotlin.Int){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/filter(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/filter|filter@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/filterIndexed|filterIndexed@kotlin.CharSequence(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/filterNot(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/filterNot|filterNot@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/find(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.text/find|find@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/findLast(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.text/findLast|findLast@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/first(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char // kotlin.text/first|first@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/firstOrNull(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.text/firstOrNull|firstOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/forEach(kotlin/Function1<kotlin/Char, kotlin/Unit>) // kotlin.text/forEach|forEach@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Unit>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Unit>) // kotlin.text/forEachIndexed|forEachIndexed@kotlin.CharSequence(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Unit>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Char>): kotlin/Char // kotlin.text/getOrElse|getOrElse@kotlin.CharSequence(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/indexOfFirst(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Int // kotlin.text/indexOfFirst|indexOfFirst@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/indexOfLast(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Int // kotlin.text/indexOfLast|indexOfLast@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/isEmpty(): kotlin/Boolean // kotlin.text/isEmpty|isEmpty@kotlin.CharSequence(){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/isNotBlank(): kotlin/Boolean // kotlin.text/isNotBlank|isNotBlank@kotlin.CharSequence(){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/isNotEmpty(): kotlin/Boolean // kotlin.text/isNotEmpty|isNotEmpty@kotlin.CharSequence(){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/last(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char // kotlin.text/last|last@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/lastOrNull(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.text/lastOrNull|lastOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/matches(kotlin.text/Regex): kotlin/Boolean // kotlin.text/matches|matches@kotlin.CharSequence(kotlin.text.Regex){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/maxOf(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.text/maxOf|maxOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/maxOf(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float // kotlin.text/maxOf|maxOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/maxOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double? // kotlin.text/maxOfOrNull|maxOfOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/maxOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float? // kotlin.text/maxOfOrNull|maxOfOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/minOf(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.text/minOf|minOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/minOf(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float // kotlin.text/minOf|minOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/minOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double? // kotlin.text/minOfOrNull|minOfOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/minOfOrNull(kotlin/Function1<kotlin/Char, kotlin/Float>): kotlin/Float? // kotlin.text/minOfOrNull|minOfOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Float>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/none(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Boolean // kotlin.text/none|none@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/partition(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Pair<kotlin/CharSequence, kotlin/CharSequence> // kotlin.text/partition|partition@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/random(): kotlin/Char // kotlin.text/random|random@kotlin.CharSequence(){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/randomOrNull(): kotlin/Char? // kotlin.text/randomOrNull|randomOrNull@kotlin.CharSequence(){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduce(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.text/reduce|reduce@kotlin.CharSequence(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.text/reduceIndexed|reduceIndexed@kotlin.CharSequence(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.text/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.CharSequence(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduceOrNull(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.text/reduceOrNull|reduceOrNull@kotlin.CharSequence(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduceRight(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.text/reduceRight|reduceRight@kotlin.CharSequence(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char // kotlin.text/reduceRightIndexed|reduceRightIndexed@kotlin.CharSequence(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.text/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.CharSequence(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/reduceRightOrNull(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin/Char? // kotlin.text/reduceRightOrNull|reduceRightOrNull@kotlin.CharSequence(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/replace(kotlin.text/Regex, kotlin/String): kotlin/String // kotlin.text/replace|replace@kotlin.CharSequence(kotlin.text.Regex;kotlin.String){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/replace(kotlin.text/Regex, noinline kotlin/Function1<kotlin.text/MatchResult, kotlin/CharSequence>): kotlin/String // kotlin.text/replace|replace@kotlin.CharSequence(kotlin.text.Regex;kotlin.Function1<kotlin.text.MatchResult,kotlin.CharSequence>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/replaceFirst(kotlin.text/Regex, kotlin/String): kotlin/String // kotlin.text/replaceFirst|replaceFirst@kotlin.CharSequence(kotlin.text.Regex;kotlin.String){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/runningReduce(kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Char>): kotlin.collections/List<kotlin/Char> // kotlin.text/runningReduce|runningReduce@kotlin.CharSequence(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Char, kotlin/Char, kotlin/Char>): kotlin.collections/List<kotlin/Char> // kotlin.text/runningReduceIndexed|runningReduceIndexed@kotlin.CharSequence(kotlin.Function3<kotlin.Int,kotlin.Char,kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/single(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char // kotlin.text/single|single@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/singleOrNull(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Char? // kotlin.text/singleOrNull|singleOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/split(kotlin.text/Regex, kotlin/Int = ...): kotlin.collections/List<kotlin/String> // kotlin.text/split|split@kotlin.CharSequence(kotlin.text.Regex;kotlin.Int){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/splitToSequence(kotlin.text/Regex, kotlin/Int = ...): kotlin.sequences/Sequence<kotlin/String> // kotlin.text/splitToSequence|splitToSequence@kotlin.CharSequence(kotlin.text.Regex;kotlin.Int){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/substring(kotlin/Int, kotlin/Int = ...): kotlin/String // kotlin.text/substring|substring@kotlin.CharSequence(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/sumBy(kotlin/Function1<kotlin/Char, kotlin/Int>): kotlin/Int // kotlin.text/sumBy|sumBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Int>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/sumByDouble(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.text/sumByDouble|sumByDouble@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/sumOf(kotlin/Function1<kotlin/Char, kotlin/Double>): kotlin/Double // kotlin.text/sumOf|sumOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Double>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/sumOf(kotlin/Function1<kotlin/Char, kotlin/Int>): kotlin/Int // kotlin.text/sumOf|sumOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Int>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/sumOf(kotlin/Function1<kotlin/Char, kotlin/Long>): kotlin/Long // kotlin.text/sumOf|sumOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Long>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/sumOf(kotlin/Function1<kotlin/Char, kotlin/UInt>): kotlin/UInt // kotlin.text/sumOf|sumOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.UInt>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/sumOf(kotlin/Function1<kotlin/Char, kotlin/ULong>): kotlin/ULong // kotlin.text/sumOf|sumOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.ULong>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/takeLastWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/takeLastWhile|takeLastWhile@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/takeWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/takeWhile|takeWhile@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/trim(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/trim|trim@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/trimEnd(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/trimEnd|trimEnd@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence).kotlin.text/trimStart(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/CharSequence // kotlin.text/trimStart|trimStart@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/CharSequence?).kotlin.text/isNullOrBlank(): kotlin/Boolean // kotlin.text/isNullOrBlank|isNullOrBlank@kotlin.CharSequence?(){}[0]
final inline fun (kotlin/CharSequence?).kotlin.text/isNullOrEmpty(): kotlin/Boolean // kotlin.text/isNullOrEmpty|isNullOrEmpty@kotlin.CharSequence?(){}[0]
final inline fun (kotlin/Double).kotlin.time/times(kotlin.time/Duration): kotlin.time/Duration // kotlin.time/times|times@kotlin.Double(kotlin.time.Duration){}[0]
final inline fun (kotlin/Double).kotlin/mod(kotlin/Double): kotlin/Double // kotlin/mod|mod@kotlin.Double(kotlin.Double){}[0]
final inline fun (kotlin/Double).kotlin/mod(kotlin/Float): kotlin/Double // kotlin/mod|mod@kotlin.Double(kotlin.Float){}[0]
final inline fun (kotlin/Double).kotlin/toUInt(): kotlin/UInt // kotlin/toUInt|toUInt@kotlin.Double(){}[0]
final inline fun (kotlin/Double).kotlin/toULong(): kotlin/ULong // kotlin/toULong|toULong@kotlin.Double(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/all(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/any(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/component1(): kotlin/Double // kotlin.collections/component1|component1@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/component2(): kotlin/Double // kotlin.collections/component2|component2@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/component3(): kotlin/Double // kotlin.collections/component3|component3@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/component4(): kotlin/Double // kotlin.collections/component4|component4@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/component5(): kotlin/Double // kotlin.collections/component5|component5@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/count(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin.collections/List<kotlin/Double> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin.collections/List<kotlin/Double> // kotlin.collections/dropWhile|dropWhile@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.DoubleArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Double? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.DoubleArray(kotlin.Int){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/filter(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin.collections/List<kotlin/Double> // kotlin.collections/filter|filter@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Double, kotlin/Boolean>): kotlin.collections/List<kotlin/Double> // kotlin.collections/filterIndexed|filterIndexed@kotlin.DoubleArray(kotlin.Function2<kotlin.Int,kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin.collections/List<kotlin/Double> // kotlin.collections/filterNot|filterNot@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/find(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double? // kotlin.collections/find|find@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double? // kotlin.collections/findLast|findLast@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/first(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double // kotlin.collections/first|first@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double? // kotlin.collections/firstOrNull|firstOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Double, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Unit>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Double, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.DoubleArray(kotlin.Function2<kotlin.Int,kotlin.Double,kotlin.Unit>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double // kotlin.collections/getOrElse|getOrElse@kotlin.DoubleArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/last(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double // kotlin.collections/last|last@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double? // kotlin.collections/lastOrNull|lastOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Double, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Float>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Double, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Double, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Float>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Double, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Float>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Double, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Double, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Float>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/none(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Double, kotlin/Unit>): kotlin/DoubleArray // kotlin.collections/onEach|onEach@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Unit>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Double, kotlin/Unit>): kotlin/DoubleArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.DoubleArray(kotlin.Function2<kotlin.Int,kotlin.Double,kotlin.Unit>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/partition(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Double>, kotlin.collections/List<kotlin/Double>> // kotlin.collections/partition|partition@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/random(): kotlin/Double // kotlin.collections/random|random@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/randomOrNull(): kotlin/Double? // kotlin.collections/randomOrNull|randomOrNull@kotlin.DoubleArray(){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/reduce|reduce@kotlin.DoubleArray(kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.DoubleArray(kotlin.Function3<kotlin.Int,kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.DoubleArray(kotlin.Function3<kotlin.Int,kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.DoubleArray(kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/reduceRight|reduceRight@kotlin.DoubleArray(kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.DoubleArray(kotlin.Function3<kotlin.Int,kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.DoubleArray(kotlin.Function3<kotlin.Int,kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Double>): kotlin/Double? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.DoubleArray(kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Double>): kotlin.collections/List<kotlin/Double> // kotlin.collections/runningReduce|runningReduce@kotlin.DoubleArray(kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Double, kotlin/Double, kotlin/Double>): kotlin.collections/List<kotlin/Double> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.DoubleArray(kotlin.Function3<kotlin.Int,kotlin.Double,kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/single(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double // kotlin.collections/single|single@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin/Double? // kotlin.collections/singleOrNull|singleOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Double, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Int>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Double, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Double>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Double, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Int>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Double, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Long>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Double, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.UInt>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Double, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.ULong>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin.collections/List<kotlin/Double> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/DoubleArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Double, kotlin/Boolean>): kotlin.collections/List<kotlin/Double> // kotlin.collections/takeWhile|takeWhile@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Boolean>){}[0]
final inline fun (kotlin/Float).kotlin/mod(kotlin/Double): kotlin/Double // kotlin/mod|mod@kotlin.Float(kotlin.Double){}[0]
final inline fun (kotlin/Float).kotlin/mod(kotlin/Float): kotlin/Float // kotlin/mod|mod@kotlin.Float(kotlin.Float){}[0]
final inline fun (kotlin/Float).kotlin/toUInt(): kotlin/UInt // kotlin/toUInt|toUInt@kotlin.Float(){}[0]
final inline fun (kotlin/Float).kotlin/toULong(): kotlin/ULong // kotlin/toULong|toULong@kotlin.Float(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/all(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/any(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/component1(): kotlin/Float // kotlin.collections/component1|component1@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/component2(): kotlin/Float // kotlin.collections/component2|component2@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/component3(): kotlin/Float // kotlin.collections/component3|component3@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/component4(): kotlin/Float // kotlin.collections/component4|component4@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/component5(): kotlin/Float // kotlin.collections/component5|component5@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/count(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin.collections/List<kotlin/Float> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin.collections/List<kotlin/Float> // kotlin.collections/dropWhile|dropWhile@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Float>): kotlin/Float // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.FloatArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Float? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.FloatArray(kotlin.Int){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/filter(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin.collections/List<kotlin/Float> // kotlin.collections/filter|filter@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Float, kotlin/Boolean>): kotlin.collections/List<kotlin/Float> // kotlin.collections/filterIndexed|filterIndexed@kotlin.FloatArray(kotlin.Function2<kotlin.Int,kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin.collections/List<kotlin/Float> // kotlin.collections/filterNot|filterNot@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/find(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float? // kotlin.collections/find|find@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float? // kotlin.collections/findLast|findLast@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/first(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float // kotlin.collections/first|first@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float? // kotlin.collections/firstOrNull|firstOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Float, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Unit>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Float, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.FloatArray(kotlin.Function2<kotlin.Int,kotlin.Float,kotlin.Unit>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Float>): kotlin/Float // kotlin.collections/getOrElse|getOrElse@kotlin.FloatArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/last(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float // kotlin.collections/last|last@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float? // kotlin.collections/lastOrNull|lastOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Float, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Double>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Float, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Float, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Double>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Float, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Float, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Double>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Float, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Float, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Double>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Float, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/none(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Float, kotlin/Unit>): kotlin/FloatArray // kotlin.collections/onEach|onEach@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Unit>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Float, kotlin/Unit>): kotlin/FloatArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.FloatArray(kotlin.Function2<kotlin.Int,kotlin.Float,kotlin.Unit>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/partition(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Float>, kotlin.collections/List<kotlin/Float>> // kotlin.collections/partition|partition@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/random(): kotlin/Float // kotlin.collections/random|random@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/randomOrNull(): kotlin/Float? // kotlin.collections/randomOrNull|randomOrNull@kotlin.FloatArray(){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float // kotlin.collections/reduce|reduce@kotlin.FloatArray(kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.FloatArray(kotlin.Function3<kotlin.Int,kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.FloatArray(kotlin.Function3<kotlin.Int,kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.FloatArray(kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float // kotlin.collections/reduceRight|reduceRight@kotlin.FloatArray(kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.FloatArray(kotlin.Function3<kotlin.Int,kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.FloatArray(kotlin.Function3<kotlin.Int,kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Float>): kotlin/Float? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.FloatArray(kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Float>): kotlin.collections/List<kotlin/Float> // kotlin.collections/runningReduce|runningReduce@kotlin.FloatArray(kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Float, kotlin/Float, kotlin/Float>): kotlin.collections/List<kotlin/Float> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.FloatArray(kotlin.Function3<kotlin.Int,kotlin.Float,kotlin.Float,kotlin.Float>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/single(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float // kotlin.collections/single|single@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin/Float? // kotlin.collections/singleOrNull|singleOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Float, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Int>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Float, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Double>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Float, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Double>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Float, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Int>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Float, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Long>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Float, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.UInt>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Float, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.ULong>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin.collections/List<kotlin/Float> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/FloatArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Float, kotlin/Boolean>): kotlin.collections/List<kotlin/Float> // kotlin.collections/takeWhile|takeWhile@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Boolean>){}[0]
final inline fun (kotlin/Int).kotlin.time/times(kotlin.time/Duration): kotlin.time/Duration // kotlin.time/times|times@kotlin.Int(kotlin.time.Duration){}[0]
final inline fun (kotlin/Int).kotlin/floorDiv(kotlin/Byte): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Int(kotlin.Byte){}[0]
final inline fun (kotlin/Int).kotlin/floorDiv(kotlin/Int): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Int(kotlin.Int){}[0]
final inline fun (kotlin/Int).kotlin/floorDiv(kotlin/Long): kotlin/Long // kotlin/floorDiv|floorDiv@kotlin.Int(kotlin.Long){}[0]
final inline fun (kotlin/Int).kotlin/floorDiv(kotlin/Short): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Int(kotlin.Short){}[0]
final inline fun (kotlin/Int).kotlin/mod(kotlin/Byte): kotlin/Byte // kotlin/mod|mod@kotlin.Int(kotlin.Byte){}[0]
final inline fun (kotlin/Int).kotlin/mod(kotlin/Int): kotlin/Int // kotlin/mod|mod@kotlin.Int(kotlin.Int){}[0]
final inline fun (kotlin/Int).kotlin/mod(kotlin/Long): kotlin/Long // kotlin/mod|mod@kotlin.Int(kotlin.Long){}[0]
final inline fun (kotlin/Int).kotlin/mod(kotlin/Short): kotlin/Short // kotlin/mod|mod@kotlin.Int(kotlin.Short){}[0]
final inline fun (kotlin/Int).kotlin/toUByte(): kotlin/UByte // kotlin/toUByte|toUByte@kotlin.Int(){}[0]
final inline fun (kotlin/Int).kotlin/toUInt(): kotlin/UInt // kotlin/toUInt|toUInt@kotlin.Int(){}[0]
final inline fun (kotlin/Int).kotlin/toULong(): kotlin/ULong // kotlin/toULong|toULong@kotlin.Int(){}[0]
final inline fun (kotlin/Int).kotlin/toUShort(): kotlin/UShort // kotlin/toUShort|toUShort@kotlin.Int(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/all(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/any(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/asUIntArray(): kotlin/UIntArray // kotlin.collections/asUIntArray|asUIntArray@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/component1(): kotlin/Int // kotlin.collections/component1|component1@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/component2(): kotlin/Int // kotlin.collections/component2|component2@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/component3(): kotlin/Int // kotlin.collections/component3|component3@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/component4(): kotlin/Int // kotlin.collections/component4|component4@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/component5(): kotlin/Int // kotlin.collections/component5|component5@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/count(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin.collections/List<kotlin/Int> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin.collections/List<kotlin/Int> // kotlin.collections/dropWhile|dropWhile@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.IntArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Int? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.IntArray(kotlin.Int){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/filter(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin.collections/List<kotlin/Int> // kotlin.collections/filter|filter@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Boolean>): kotlin.collections/List<kotlin/Int> // kotlin.collections/filterIndexed|filterIndexed@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin.collections/List<kotlin/Int> // kotlin.collections/filterNot|filterNot@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/find(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int? // kotlin.collections/find|find@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int? // kotlin.collections/findLast|findLast@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/first(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int // kotlin.collections/first|first@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int? // kotlin.collections/firstOrNull|firstOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Int, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Unit>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Unit>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/getOrElse|getOrElse@kotlin.IntArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/last(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int // kotlin.collections/last|last@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int? // kotlin.collections/lastOrNull|lastOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Int, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Float>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Int, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Float>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Int, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Float>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Int, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Float>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/none(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Int, kotlin/Unit>): kotlin/IntArray // kotlin.collections/onEach|onEach@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Unit>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Unit>): kotlin/IntArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Unit>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/partition(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Int>, kotlin.collections/List<kotlin/Int>> // kotlin.collections/partition|partition@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/random(): kotlin/Int // kotlin.collections/random|random@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/randomOrNull(): kotlin/Int? // kotlin.collections/randomOrNull|randomOrNull@kotlin.IntArray(){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/reduce|reduce@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.IntArray(kotlin.Function3<kotlin.Int,kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.IntArray(kotlin.Function3<kotlin.Int,kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/reduceRight|reduceRight@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.IntArray(kotlin.Function3<kotlin.Int,kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.IntArray(kotlin.Function3<kotlin.Int,kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>): kotlin/Int? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>): kotlin.collections/List<kotlin/Int> // kotlin.collections/runningReduce|runningReduce@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int>): kotlin.collections/List<kotlin/Int> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.IntArray(kotlin.Function3<kotlin.Int,kotlin.Int,kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/single(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int // kotlin.collections/single|single@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin/Int? // kotlin.collections/singleOrNull|singleOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Int, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Double>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Int, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Int>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Int, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Long>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Int, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.UInt>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Int, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.ULong>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin.collections/List<kotlin/Int> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Int, kotlin/Boolean>): kotlin.collections/List<kotlin/Int> // kotlin.collections/takeWhile|takeWhile@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]
final inline fun (kotlin/IntArray).kotlin.collections/toUIntArray(): kotlin/UIntArray // kotlin.collections/toUIntArray|toUIntArray@kotlin.IntArray(){}[0]
final inline fun (kotlin/Long).kotlin/floorDiv(kotlin/Byte): kotlin/Long // kotlin/floorDiv|floorDiv@kotlin.Long(kotlin.Byte){}[0]
final inline fun (kotlin/Long).kotlin/floorDiv(kotlin/Int): kotlin/Long // kotlin/floorDiv|floorDiv@kotlin.Long(kotlin.Int){}[0]
final inline fun (kotlin/Long).kotlin/floorDiv(kotlin/Long): kotlin/Long // kotlin/floorDiv|floorDiv@kotlin.Long(kotlin.Long){}[0]
final inline fun (kotlin/Long).kotlin/floorDiv(kotlin/Short): kotlin/Long // kotlin/floorDiv|floorDiv@kotlin.Long(kotlin.Short){}[0]
final inline fun (kotlin/Long).kotlin/mod(kotlin/Byte): kotlin/Byte // kotlin/mod|mod@kotlin.Long(kotlin.Byte){}[0]
final inline fun (kotlin/Long).kotlin/mod(kotlin/Int): kotlin/Int // kotlin/mod|mod@kotlin.Long(kotlin.Int){}[0]
final inline fun (kotlin/Long).kotlin/mod(kotlin/Long): kotlin/Long // kotlin/mod|mod@kotlin.Long(kotlin.Long){}[0]
final inline fun (kotlin/Long).kotlin/mod(kotlin/Short): kotlin/Short // kotlin/mod|mod@kotlin.Long(kotlin.Short){}[0]
final inline fun (kotlin/Long).kotlin/rotateRight(kotlin/Int): kotlin/Long // kotlin/rotateRight|rotateRight@kotlin.Long(kotlin.Int){}[0]
final inline fun (kotlin/Long).kotlin/toUByte(): kotlin/UByte // kotlin/toUByte|toUByte@kotlin.Long(){}[0]
final inline fun (kotlin/Long).kotlin/toUInt(): kotlin/UInt // kotlin/toUInt|toUInt@kotlin.Long(){}[0]
final inline fun (kotlin/Long).kotlin/toULong(): kotlin/ULong // kotlin/toULong|toULong@kotlin.Long(){}[0]
final inline fun (kotlin/Long).kotlin/toUShort(): kotlin/UShort // kotlin/toUShort|toUShort@kotlin.Long(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/all(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/any(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/asULongArray(): kotlin/ULongArray // kotlin.collections/asULongArray|asULongArray@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/component1(): kotlin/Long // kotlin.collections/component1|component1@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/component2(): kotlin/Long // kotlin.collections/component2|component2@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/component3(): kotlin/Long // kotlin.collections/component3|component3@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/component4(): kotlin/Long // kotlin.collections/component4|component4@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/component5(): kotlin/Long // kotlin.collections/component5|component5@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/count(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin.collections/List<kotlin/Long> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin.collections/List<kotlin/Long> // kotlin.collections/dropWhile|dropWhile@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Long>): kotlin/Long // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.LongArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Long? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.LongArray(kotlin.Int){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/filter(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin.collections/List<kotlin/Long> // kotlin.collections/filter|filter@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Long, kotlin/Boolean>): kotlin.collections/List<kotlin/Long> // kotlin.collections/filterIndexed|filterIndexed@kotlin.LongArray(kotlin.Function2<kotlin.Int,kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin.collections/List<kotlin/Long> // kotlin.collections/filterNot|filterNot@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/find(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long? // kotlin.collections/find|find@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long? // kotlin.collections/findLast|findLast@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/first(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long // kotlin.collections/first|first@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long? // kotlin.collections/firstOrNull|firstOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Long, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Unit>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Long, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.LongArray(kotlin.Function2<kotlin.Int,kotlin.Long,kotlin.Unit>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Long>): kotlin/Long // kotlin.collections/getOrElse|getOrElse@kotlin.LongArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/last(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long // kotlin.collections/last|last@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long? // kotlin.collections/lastOrNull|lastOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Long, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Double>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Long, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Float>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Long, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Double>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Long, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Float>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Long, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Double>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Long, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Float>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Long, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Double>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Long, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Float>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/none(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Long, kotlin/Unit>): kotlin/LongArray // kotlin.collections/onEach|onEach@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Unit>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Long, kotlin/Unit>): kotlin/LongArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.LongArray(kotlin.Function2<kotlin.Int,kotlin.Long,kotlin.Unit>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/partition(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Long>, kotlin.collections/List<kotlin/Long>> // kotlin.collections/partition|partition@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/random(): kotlin/Long // kotlin.collections/random|random@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/randomOrNull(): kotlin/Long? // kotlin.collections/randomOrNull|randomOrNull@kotlin.LongArray(){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long // kotlin.collections/reduce|reduce@kotlin.LongArray(kotlin.Function2<kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.LongArray(kotlin.Function3<kotlin.Int,kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.LongArray(kotlin.Function3<kotlin.Int,kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.LongArray(kotlin.Function2<kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long // kotlin.collections/reduceRight|reduceRight@kotlin.LongArray(kotlin.Function2<kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.LongArray(kotlin.Function3<kotlin.Int,kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.LongArray(kotlin.Function3<kotlin.Int,kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Long, kotlin/Long, kotlin/Long>): kotlin/Long? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.LongArray(kotlin.Function2<kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Long, kotlin/Long, kotlin/Long>): kotlin.collections/List<kotlin/Long> // kotlin.collections/runningReduce|runningReduce@kotlin.LongArray(kotlin.Function2<kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long>): kotlin.collections/List<kotlin/Long> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.LongArray(kotlin.Function3<kotlin.Int,kotlin.Long,kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/single(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long // kotlin.collections/single|single@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin/Long? // kotlin.collections/singleOrNull|singleOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Long, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Int>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Long, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Double>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Long, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Double>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Long, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Int>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Long, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Long>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Long, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.UInt>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Long, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.ULong>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin.collections/List<kotlin/Long> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Long, kotlin/Boolean>): kotlin.collections/List<kotlin/Long> // kotlin.collections/takeWhile|takeWhile@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Boolean>){}[0]
final inline fun (kotlin/LongArray).kotlin.collections/toULongArray(): kotlin/ULongArray // kotlin.collections/toULongArray|toULongArray@kotlin.LongArray(){}[0]
final inline fun (kotlin/Short).kotlin.experimental/and(kotlin/Short): kotlin/Short // kotlin.experimental/and|and@kotlin.Short(kotlin.Short){}[0]
final inline fun (kotlin/Short).kotlin.experimental/inv(): kotlin/Short // kotlin.experimental/inv|inv@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin.experimental/or(kotlin/Short): kotlin/Short // kotlin.experimental/or|or@kotlin.Short(kotlin.Short){}[0]
final inline fun (kotlin/Short).kotlin.experimental/xor(kotlin/Short): kotlin/Short // kotlin.experimental/xor|xor@kotlin.Short(kotlin.Short){}[0]
final inline fun (kotlin/Short).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/floorDiv(kotlin/Byte): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Short(kotlin.Byte){}[0]
final inline fun (kotlin/Short).kotlin/floorDiv(kotlin/Int): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Short(kotlin.Int){}[0]
final inline fun (kotlin/Short).kotlin/floorDiv(kotlin/Long): kotlin/Long // kotlin/floorDiv|floorDiv@kotlin.Short(kotlin.Long){}[0]
final inline fun (kotlin/Short).kotlin/floorDiv(kotlin/Short): kotlin/Int // kotlin/floorDiv|floorDiv@kotlin.Short(kotlin.Short){}[0]
final inline fun (kotlin/Short).kotlin/mod(kotlin/Byte): kotlin/Byte // kotlin/mod|mod@kotlin.Short(kotlin.Byte){}[0]
final inline fun (kotlin/Short).kotlin/mod(kotlin/Int): kotlin/Int // kotlin/mod|mod@kotlin.Short(kotlin.Int){}[0]
final inline fun (kotlin/Short).kotlin/mod(kotlin/Long): kotlin/Long // kotlin/mod|mod@kotlin.Short(kotlin.Long){}[0]
final inline fun (kotlin/Short).kotlin/mod(kotlin/Short): kotlin/Short // kotlin/mod|mod@kotlin.Short(kotlin.Short){}[0]
final inline fun (kotlin/Short).kotlin/takeHighestOneBit(): kotlin/Short // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/takeLowestOneBit(): kotlin/Short // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/toUByte(): kotlin/UByte // kotlin/toUByte|toUByte@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/toUInt(): kotlin/UInt // kotlin/toUInt|toUInt@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/toULong(): kotlin/ULong // kotlin/toULong|toULong@kotlin.Short(){}[0]
final inline fun (kotlin/Short).kotlin/toUShort(): kotlin/UShort // kotlin/toUShort|toUShort@kotlin.Short(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/all(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/any(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/asUShortArray(): kotlin/UShortArray // kotlin.collections/asUShortArray|asUShortArray@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/component1(): kotlin/Short // kotlin.collections/component1|component1@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/component2(): kotlin/Short // kotlin.collections/component2|component2@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/component3(): kotlin/Short // kotlin.collections/component3|component3@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/component4(): kotlin/Short // kotlin.collections/component4|component4@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/component5(): kotlin/Short // kotlin.collections/component5|component5@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/count(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin.collections/List<kotlin/Short> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin.collections/List<kotlin/Short> // kotlin.collections/dropWhile|dropWhile@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Short>): kotlin/Short // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.ShortArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/Short? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.ShortArray(kotlin.Int){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/filter(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin.collections/List<kotlin/Short> // kotlin.collections/filter|filter@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Short, kotlin/Boolean>): kotlin.collections/List<kotlin/Short> // kotlin.collections/filterIndexed|filterIndexed@kotlin.ShortArray(kotlin.Function2<kotlin.Int,kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin.collections/List<kotlin/Short> // kotlin.collections/filterNot|filterNot@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/find(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short? // kotlin.collections/find|find@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/findLast(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short? // kotlin.collections/findLast|findLast@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/first(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short // kotlin.collections/first|first@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short? // kotlin.collections/firstOrNull|firstOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/forEach(kotlin/Function1<kotlin/Short, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Unit>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Short, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.ShortArray(kotlin.Function2<kotlin.Int,kotlin.Short,kotlin.Unit>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Short>): kotlin/Short // kotlin.collections/getOrElse|getOrElse@kotlin.ShortArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/last(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short // kotlin.collections/last|last@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short? // kotlin.collections/lastOrNull|lastOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Short, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Double>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Short, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Float>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Short, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Double>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Short, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Float>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Short, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Double>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Short, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Float>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Short, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Double>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Short, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Float>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/none(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/onEach(kotlin/Function1<kotlin/Short, kotlin/Unit>): kotlin/ShortArray // kotlin.collections/onEach|onEach@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Unit>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Short, kotlin/Unit>): kotlin/ShortArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.ShortArray(kotlin.Function2<kotlin.Int,kotlin.Short,kotlin.Unit>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/partition(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<kotlin/Short>, kotlin.collections/List<kotlin/Short>> // kotlin.collections/partition|partition@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/random(): kotlin/Short // kotlin.collections/random|random@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/randomOrNull(): kotlin/Short? // kotlin.collections/randomOrNull|randomOrNull@kotlin.ShortArray(){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduce(kotlin/Function2<kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short // kotlin.collections/reduce|reduce@kotlin.ShortArray(kotlin.Function2<kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.ShortArray(kotlin.Function3<kotlin.Int,kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.ShortArray(kotlin.Function3<kotlin.Int,kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.ShortArray(kotlin.Function2<kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short // kotlin.collections/reduceRight|reduceRight@kotlin.ShortArray(kotlin.Function2<kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.ShortArray(kotlin.Function3<kotlin.Int,kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.ShortArray(kotlin.Function3<kotlin.Int,kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/Short, kotlin/Short, kotlin/Short>): kotlin/Short? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.ShortArray(kotlin.Function2<kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/Short, kotlin/Short, kotlin/Short>): kotlin.collections/List<kotlin/Short> // kotlin.collections/runningReduce|runningReduce@kotlin.ShortArray(kotlin.Function2<kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/Short, kotlin/Short, kotlin/Short>): kotlin.collections/List<kotlin/Short> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.ShortArray(kotlin.Function3<kotlin.Int,kotlin.Short,kotlin.Short,kotlin.Short>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/single(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short // kotlin.collections/single|single@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin/Short? // kotlin.collections/singleOrNull|singleOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/Short, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Int>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/Short, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Double>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Short, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Double>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Short, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Int>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Short, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Long>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Short, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.UInt>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/Short, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.ULong>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin.collections/List<kotlin/Short> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/Short, kotlin/Boolean>): kotlin.collections/List<kotlin/Short> // kotlin.collections/takeWhile|takeWhile@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Boolean>){}[0]
final inline fun (kotlin/ShortArray).kotlin.collections/toUShortArray(): kotlin/UShortArray // kotlin.collections/toUShortArray|toUShortArray@kotlin.ShortArray(){}[0]
final inline fun (kotlin/String).kotlin.text/dropLastWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/dropLastWhile|dropLastWhile@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/dropWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/dropWhile|dropWhile@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/filter(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/filter|filter@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/filterIndexed|filterIndexed@kotlin.String(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/filterNot(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/filterNot|filterNot@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/hexToUByte(kotlin.text/HexFormat = ...): kotlin/UByte // kotlin.text/hexToUByte|hexToUByte@kotlin.String(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/String).kotlin.text/hexToUByteArray(kotlin.text/HexFormat = ...): kotlin/UByteArray // kotlin.text/hexToUByteArray|hexToUByteArray@kotlin.String(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/String).kotlin.text/hexToUInt(kotlin.text/HexFormat = ...): kotlin/UInt // kotlin.text/hexToUInt|hexToUInt@kotlin.String(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/String).kotlin.text/hexToULong(kotlin.text/HexFormat = ...): kotlin/ULong // kotlin.text/hexToULong|hexToULong@kotlin.String(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/String).kotlin.text/hexToUShort(kotlin.text/HexFormat = ...): kotlin/UShort // kotlin.text/hexToUShort|hexToUShort@kotlin.String(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/String).kotlin.text/partition(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/Pair<kotlin/String, kotlin/String> // kotlin.text/partition|partition@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/removeRange(kotlin.ranges/IntRange): kotlin/String // kotlin.text/removeRange|removeRange@kotlin.String(kotlin.ranges.IntRange){}[0]
final inline fun (kotlin/String).kotlin.text/removeRange(kotlin/Int, kotlin/Int): kotlin/String // kotlin.text/removeRange|removeRange@kotlin.String(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/String).kotlin.text/replaceFirstChar(kotlin/Function1<kotlin/Char, kotlin/Char>): kotlin/String // kotlin.text/replaceFirstChar|replaceFirstChar@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Char>){}[0]
final inline fun (kotlin/String).kotlin.text/replaceFirstChar(kotlin/Function1<kotlin/Char, kotlin/CharSequence>): kotlin/String // kotlin.text/replaceFirstChar|replaceFirstChar@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.CharSequence>){}[0]
final inline fun (kotlin/String).kotlin.text/replaceRange(kotlin.ranges/IntRange, kotlin/CharSequence): kotlin/String // kotlin.text/replaceRange|replaceRange@kotlin.String(kotlin.ranges.IntRange;kotlin.CharSequence){}[0]
final inline fun (kotlin/String).kotlin.text/replaceRange(kotlin/Int, kotlin/Int, kotlin/CharSequence): kotlin/String // kotlin.text/replaceRange|replaceRange@kotlin.String(kotlin.Int;kotlin.Int;kotlin.CharSequence){}[0]
final inline fun (kotlin/String).kotlin.text/reversed(): kotlin/String // kotlin.text/reversed|reversed@kotlin.String(){}[0]
final inline fun (kotlin/String).kotlin.text/slice(kotlin.collections/Iterable<kotlin/Int>): kotlin/String // kotlin.text/slice|slice@kotlin.String(kotlin.collections.Iterable<kotlin.Int>){}[0]
final inline fun (kotlin/String).kotlin.text/subSequence(kotlin/Int, kotlin/Int): kotlin/CharSequence // kotlin.text/subSequence|subSequence@kotlin.String(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/String).kotlin.text/takeLastWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/takeLastWhile|takeLastWhile@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/takeWhile(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/takeWhile|takeWhile@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/toRegex(): kotlin.text/Regex // kotlin.text/toRegex|toRegex@kotlin.String(){}[0]
final inline fun (kotlin/String).kotlin.text/toRegex(kotlin.collections/Set<kotlin.text/RegexOption>): kotlin.text/Regex // kotlin.text/toRegex|toRegex@kotlin.String(kotlin.collections.Set<kotlin.text.RegexOption>){}[0]
final inline fun (kotlin/String).kotlin.text/toRegex(kotlin.text/RegexOption): kotlin.text/Regex // kotlin.text/toRegex|toRegex@kotlin.String(kotlin.text.RegexOption){}[0]
final inline fun (kotlin/String).kotlin.text/trim(): kotlin/String // kotlin.text/trim|trim@kotlin.String(){}[0]
final inline fun (kotlin/String).kotlin.text/trim(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/trim|trim@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/trimEnd(): kotlin/String // kotlin.text/trimEnd|trimEnd@kotlin.String(){}[0]
final inline fun (kotlin/String).kotlin.text/trimEnd(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/trimEnd|trimEnd@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String).kotlin.text/trimStart(): kotlin/String // kotlin.text/trimStart|trimStart@kotlin.String(){}[0]
final inline fun (kotlin/String).kotlin.text/trimStart(kotlin/Function1<kotlin/Char, kotlin/Boolean>): kotlin/String // kotlin.text/trimStart|trimStart@kotlin.String(kotlin.Function1<kotlin.Char,kotlin.Boolean>){}[0]
final inline fun (kotlin/String?).kotlin.text/orEmpty(): kotlin/String // kotlin.text/orEmpty|orEmpty@kotlin.String?(){}[0]
final inline fun (kotlin/UByte).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.UByte(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/UByte).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.UByte(){}[0]
final inline fun (kotlin/UByte).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.UByte(){}[0]
final inline fun (kotlin/UByte).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.UByte(){}[0]
final inline fun (kotlin/UByte).kotlin/rotateLeft(kotlin/Int): kotlin/UByte // kotlin/rotateLeft|rotateLeft@kotlin.UByte(kotlin.Int){}[0]
final inline fun (kotlin/UByte).kotlin/rotateRight(kotlin/Int): kotlin/UByte // kotlin/rotateRight|rotateRight@kotlin.UByte(kotlin.Int){}[0]
final inline fun (kotlin/UByte).kotlin/takeHighestOneBit(): kotlin/UByte // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.UByte(){}[0]
final inline fun (kotlin/UByte).kotlin/takeLowestOneBit(): kotlin/UByte // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.UByte(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/all(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/any(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/asByteArray(): kotlin/ByteArray // kotlin.collections/asByteArray|asByteArray@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/component1(): kotlin/UByte // kotlin.collections/component1|component1@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/component2(): kotlin/UByte // kotlin.collections/component2|component2@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/component3(): kotlin/UByte // kotlin.collections/component3|component3@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/component4(): kotlin/UByte // kotlin.collections/component4|component4@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/component5(): kotlin/UByte // kotlin.collections/component5|component5@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/copyInto(kotlin/UByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/UByteArray // kotlin.collections/copyInto|copyInto@kotlin.UByteArray(kotlin.UByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/copyOf(): kotlin/UByteArray // kotlin.collections/copyOf|copyOf@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/copyOf(kotlin/Int): kotlin/UByteArray // kotlin.collections/copyOf|copyOf@kotlin.UByteArray(kotlin.Int){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/UByteArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.UByteArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/count(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/dropWhile|dropWhile@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UByte>): kotlin/UByte // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.UByteArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/UByte? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.UByteArray(kotlin.Int){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/filter(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/filter|filter@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/UByte, kotlin/Boolean>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/filterIndexed|filterIndexed@kotlin.UByteArray(kotlin.Function2<kotlin.Int,kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/filterNot|filterNot@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/find(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte? // kotlin.collections/find|find@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/findLast(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte? // kotlin.collections/findLast|findLast@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/first(): kotlin/UByte // kotlin.collections/first|first@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/first(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte // kotlin.collections/first|first@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte? // kotlin.collections/firstOrNull|firstOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/forEach(kotlin/Function1<kotlin/UByte, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Unit>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/UByte, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.UByteArray(kotlin.Function2<kotlin.Int,kotlin.UByte,kotlin.Unit>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UByte>): kotlin/UByte // kotlin.collections/getOrElse|getOrElse@kotlin.UByteArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/indexOf(kotlin/UByte): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.UByteArray(kotlin.UByte){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/last(): kotlin/UByte // kotlin.collections/last|last@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/last(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte // kotlin.collections/last|last@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/lastIndexOf(kotlin/UByte): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.UByteArray(kotlin.UByte){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte? // kotlin.collections/lastOrNull|lastOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UByte, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Double>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UByte, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Float>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UByte, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Double>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UByte, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Float>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UByte, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Double>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UByte, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Float>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UByte, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Double>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UByte, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Float>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/none(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/onEach(kotlin/Function1<kotlin/UByte, kotlin/Unit>): kotlin/UByteArray // kotlin.collections/onEach|onEach@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Unit>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/UByte, kotlin/Unit>): kotlin/UByteArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.UByteArray(kotlin.Function2<kotlin.Int,kotlin.UByte,kotlin.Unit>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/plus(kotlin/UByte): kotlin/UByteArray // kotlin.collections/plus|plus@kotlin.UByteArray(kotlin.UByte){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/plus(kotlin/UByteArray): kotlin/UByteArray // kotlin.collections/plus|plus@kotlin.UByteArray(kotlin.UByteArray){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/random(): kotlin/UByte // kotlin.collections/random|random@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/randomOrNull(): kotlin/UByte? // kotlin.collections/randomOrNull|randomOrNull@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduce(kotlin/Function2<kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte // kotlin.collections/reduce|reduce@kotlin.UByteArray(kotlin.Function2<kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.UByteArray(kotlin.Function3<kotlin.Int,kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.UByteArray(kotlin.Function3<kotlin.Int,kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.UByteArray(kotlin.Function2<kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte // kotlin.collections/reduceRight|reduceRight@kotlin.UByteArray(kotlin.Function2<kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.UByteArray(kotlin.Function3<kotlin.Int,kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.UByteArray(kotlin.Function3<kotlin.Int,kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin/UByte? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.UByteArray(kotlin.Function2<kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.UByteArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/reversedArray(): kotlin/UByteArray // kotlin.collections/reversedArray|reversedArray@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/runningReduce|runningReduce@kotlin.UByteArray(kotlin.Function2<kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/UByte, kotlin/UByte, kotlin/UByte>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.UByteArray(kotlin.Function3<kotlin.Int,kotlin.UByte,kotlin.UByte,kotlin.UByte>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/single(): kotlin/UByte // kotlin.collections/single|single@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/single(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte // kotlin.collections/single|single@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin/UByte? // kotlin.collections/singleOrNull|singleOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/UByte, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumBy|sumBy@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.UInt>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/UByte, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Double>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UByte, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Double>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UByte, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Int>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UByte, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Long>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UByte, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.UInt>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UByte, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.ULong>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/UByte, kotlin/Boolean>): kotlin.collections/List<kotlin/UByte> // kotlin.collections/takeWhile|takeWhile@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.Boolean>){}[0]
final inline fun (kotlin/UByteArray).kotlin.collections/toByteArray(): kotlin/ByteArray // kotlin.collections/toByteArray|toByteArray@kotlin.UByteArray(){}[0]
final inline fun (kotlin/UByteArray).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.UByteArray(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/UByteArray).kotlin.text/toHexString(kotlin/Int = ..., kotlin/Int = ..., kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.UByteArray(kotlin.Int;kotlin.Int;kotlin.text.HexFormat){}[0]
final inline fun (kotlin/UInt).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.UInt(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/UInt).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.UInt(){}[0]
final inline fun (kotlin/UInt).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.UInt(){}[0]
final inline fun (kotlin/UInt).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.UInt(){}[0]
final inline fun (kotlin/UInt).kotlin/rotateLeft(kotlin/Int): kotlin/UInt // kotlin/rotateLeft|rotateLeft@kotlin.UInt(kotlin.Int){}[0]
final inline fun (kotlin/UInt).kotlin/rotateRight(kotlin/Int): kotlin/UInt // kotlin/rotateRight|rotateRight@kotlin.UInt(kotlin.Int){}[0]
final inline fun (kotlin/UInt).kotlin/takeHighestOneBit(): kotlin/UInt // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.UInt(){}[0]
final inline fun (kotlin/UInt).kotlin/takeLowestOneBit(): kotlin/UInt // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.UInt(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/all(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/any(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/asIntArray(): kotlin/IntArray // kotlin.collections/asIntArray|asIntArray@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/component1(): kotlin/UInt // kotlin.collections/component1|component1@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/component2(): kotlin/UInt // kotlin.collections/component2|component2@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/component3(): kotlin/UInt // kotlin.collections/component3|component3@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/component4(): kotlin/UInt // kotlin.collections/component4|component4@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/component5(): kotlin/UInt // kotlin.collections/component5|component5@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/copyInto(kotlin/UIntArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/UIntArray // kotlin.collections/copyInto|copyInto@kotlin.UIntArray(kotlin.UIntArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/copyOf(): kotlin/UIntArray // kotlin.collections/copyOf|copyOf@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/copyOf(kotlin/Int): kotlin/UIntArray // kotlin.collections/copyOf|copyOf@kotlin.UIntArray(kotlin.Int){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/UIntArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.UIntArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/count(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/dropWhile|dropWhile@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UInt>): kotlin/UInt // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.UIntArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/UInt? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.UIntArray(kotlin.Int){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/filter(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/filter|filter@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/UInt, kotlin/Boolean>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/filterIndexed|filterIndexed@kotlin.UIntArray(kotlin.Function2<kotlin.Int,kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/filterNot|filterNot@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/find(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt? // kotlin.collections/find|find@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/findLast(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt? // kotlin.collections/findLast|findLast@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/first(): kotlin/UInt // kotlin.collections/first|first@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/first(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt // kotlin.collections/first|first@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt? // kotlin.collections/firstOrNull|firstOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/forEach(kotlin/Function1<kotlin/UInt, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Unit>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/UInt, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.UIntArray(kotlin.Function2<kotlin.Int,kotlin.UInt,kotlin.Unit>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UInt>): kotlin/UInt // kotlin.collections/getOrElse|getOrElse@kotlin.UIntArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/indexOf(kotlin/UInt): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.UIntArray(kotlin.UInt){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/last(): kotlin/UInt // kotlin.collections/last|last@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/last(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt // kotlin.collections/last|last@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/lastIndexOf(kotlin/UInt): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.UIntArray(kotlin.UInt){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt? // kotlin.collections/lastOrNull|lastOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UInt, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Double>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UInt, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Float>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UInt, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Double>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UInt, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Float>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UInt, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Double>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UInt, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Float>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UInt, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Double>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UInt, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Float>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/none(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/onEach(kotlin/Function1<kotlin/UInt, kotlin/Unit>): kotlin/UIntArray // kotlin.collections/onEach|onEach@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Unit>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/UInt, kotlin/Unit>): kotlin/UIntArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.UIntArray(kotlin.Function2<kotlin.Int,kotlin.UInt,kotlin.Unit>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/plus(kotlin/UInt): kotlin/UIntArray // kotlin.collections/plus|plus@kotlin.UIntArray(kotlin.UInt){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/plus(kotlin/UIntArray): kotlin/UIntArray // kotlin.collections/plus|plus@kotlin.UIntArray(kotlin.UIntArray){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/random(): kotlin/UInt // kotlin.collections/random|random@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/randomOrNull(): kotlin/UInt? // kotlin.collections/randomOrNull|randomOrNull@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduce(kotlin/Function2<kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt // kotlin.collections/reduce|reduce@kotlin.UIntArray(kotlin.Function2<kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.UIntArray(kotlin.Function3<kotlin.Int,kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.UIntArray(kotlin.Function3<kotlin.Int,kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.UIntArray(kotlin.Function2<kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt // kotlin.collections/reduceRight|reduceRight@kotlin.UIntArray(kotlin.Function2<kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.UIntArray(kotlin.Function3<kotlin.Int,kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.UIntArray(kotlin.Function3<kotlin.Int,kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin/UInt? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.UIntArray(kotlin.Function2<kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.UIntArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/reversedArray(): kotlin/UIntArray // kotlin.collections/reversedArray|reversedArray@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/runningReduce|runningReduce@kotlin.UIntArray(kotlin.Function2<kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/UInt, kotlin/UInt, kotlin/UInt>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.UIntArray(kotlin.Function3<kotlin.Int,kotlin.UInt,kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/single(): kotlin/UInt // kotlin.collections/single|single@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/single(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt // kotlin.collections/single|single@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin/UInt? // kotlin.collections/singleOrNull|singleOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.UIntArray(){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/UInt, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumBy|sumBy@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/UInt, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Double>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UInt, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Double>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UInt, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Int>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UInt, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Long>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UInt, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.UInt>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UInt, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.ULong>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/UInt, kotlin/Boolean>): kotlin.collections/List<kotlin/UInt> // kotlin.collections/takeWhile|takeWhile@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.Boolean>){}[0]
final inline fun (kotlin/UIntArray).kotlin.collections/toIntArray(): kotlin/IntArray // kotlin.collections/toIntArray|toIntArray@kotlin.UIntArray(){}[0]
final inline fun (kotlin/ULong).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.ULong(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/ULong).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.ULong(){}[0]
final inline fun (kotlin/ULong).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.ULong(){}[0]
final inline fun (kotlin/ULong).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.ULong(){}[0]
final inline fun (kotlin/ULong).kotlin/rotateLeft(kotlin/Int): kotlin/ULong // kotlin/rotateLeft|rotateLeft@kotlin.ULong(kotlin.Int){}[0]
final inline fun (kotlin/ULong).kotlin/rotateRight(kotlin/Int): kotlin/ULong // kotlin/rotateRight|rotateRight@kotlin.ULong(kotlin.Int){}[0]
final inline fun (kotlin/ULong).kotlin/takeHighestOneBit(): kotlin/ULong // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.ULong(){}[0]
final inline fun (kotlin/ULong).kotlin/takeLowestOneBit(): kotlin/ULong // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.ULong(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/all(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/any(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/asLongArray(): kotlin/LongArray // kotlin.collections/asLongArray|asLongArray@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/component1(): kotlin/ULong // kotlin.collections/component1|component1@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/component2(): kotlin/ULong // kotlin.collections/component2|component2@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/component3(): kotlin/ULong // kotlin.collections/component3|component3@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/component4(): kotlin/ULong // kotlin.collections/component4|component4@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/component5(): kotlin/ULong // kotlin.collections/component5|component5@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/copyInto(kotlin/ULongArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/ULongArray // kotlin.collections/copyInto|copyInto@kotlin.ULongArray(kotlin.ULongArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/copyOf(): kotlin/ULongArray // kotlin.collections/copyOf|copyOf@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/copyOf(kotlin/Int): kotlin/ULongArray // kotlin.collections/copyOf|copyOf@kotlin.ULongArray(kotlin.Int){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/ULongArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.ULongArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/count(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/dropWhile|dropWhile@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/ULong>): kotlin/ULong // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.ULongArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/ULong? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.ULongArray(kotlin.Int){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/filter(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/filter|filter@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/ULong, kotlin/Boolean>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/filterIndexed|filterIndexed@kotlin.ULongArray(kotlin.Function2<kotlin.Int,kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/filterNot|filterNot@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/find(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong? // kotlin.collections/find|find@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/findLast(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong? // kotlin.collections/findLast|findLast@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/first(): kotlin/ULong // kotlin.collections/first|first@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/first(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong // kotlin.collections/first|first@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong? // kotlin.collections/firstOrNull|firstOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/forEach(kotlin/Function1<kotlin/ULong, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Unit>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/ULong, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.ULongArray(kotlin.Function2<kotlin.Int,kotlin.ULong,kotlin.Unit>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/ULong>): kotlin/ULong // kotlin.collections/getOrElse|getOrElse@kotlin.ULongArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/indexOf(kotlin/ULong): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.ULongArray(kotlin.ULong){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/last(): kotlin/ULong // kotlin.collections/last|last@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/last(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong // kotlin.collections/last|last@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/lastIndexOf(kotlin/ULong): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.ULongArray(kotlin.ULong){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong? // kotlin.collections/lastOrNull|lastOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/ULong, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Double>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/ULong, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Float>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/ULong, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Double>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/ULong, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Float>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/minOf(kotlin/Function1<kotlin/ULong, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Double>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/minOf(kotlin/Function1<kotlin/ULong, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Float>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/ULong, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Double>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/ULong, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Float>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/none(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/onEach(kotlin/Function1<kotlin/ULong, kotlin/Unit>): kotlin/ULongArray // kotlin.collections/onEach|onEach@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Unit>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/ULong, kotlin/Unit>): kotlin/ULongArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.ULongArray(kotlin.Function2<kotlin.Int,kotlin.ULong,kotlin.Unit>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/plus(kotlin/ULong): kotlin/ULongArray // kotlin.collections/plus|plus@kotlin.ULongArray(kotlin.ULong){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/plus(kotlin/ULongArray): kotlin/ULongArray // kotlin.collections/plus|plus@kotlin.ULongArray(kotlin.ULongArray){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/random(): kotlin/ULong // kotlin.collections/random|random@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/randomOrNull(): kotlin/ULong? // kotlin.collections/randomOrNull|randomOrNull@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduce(kotlin/Function2<kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong // kotlin.collections/reduce|reduce@kotlin.ULongArray(kotlin.Function2<kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.ULongArray(kotlin.Function3<kotlin.Int,kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.ULongArray(kotlin.Function3<kotlin.Int,kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.ULongArray(kotlin.Function2<kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong // kotlin.collections/reduceRight|reduceRight@kotlin.ULongArray(kotlin.Function2<kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.ULongArray(kotlin.Function3<kotlin.Int,kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.ULongArray(kotlin.Function3<kotlin.Int,kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin/ULong? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.ULongArray(kotlin.Function2<kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.ULongArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/reversedArray(): kotlin/ULongArray // kotlin.collections/reversedArray|reversedArray@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/runningReduce|runningReduce@kotlin.ULongArray(kotlin.Function2<kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/ULong, kotlin/ULong, kotlin/ULong>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.ULongArray(kotlin.Function3<kotlin.Int,kotlin.ULong,kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/single(): kotlin/ULong // kotlin.collections/single|single@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/single(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong // kotlin.collections/single|single@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin/ULong? // kotlin.collections/singleOrNull|singleOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sum(): kotlin/ULong // kotlin.collections/sum|sum@kotlin.ULongArray(){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/ULong, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumBy|sumBy@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.UInt>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/ULong, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Double>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/ULong, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Double>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/ULong, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Int>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/ULong, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Long>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/ULong, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.UInt>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/ULong, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.ULong>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/ULong, kotlin/Boolean>): kotlin.collections/List<kotlin/ULong> // kotlin.collections/takeWhile|takeWhile@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.Boolean>){}[0]
final inline fun (kotlin/ULongArray).kotlin.collections/toLongArray(): kotlin/LongArray // kotlin.collections/toLongArray|toLongArray@kotlin.ULongArray(){}[0]
final inline fun (kotlin/UShort).kotlin.text/toHexString(kotlin.text/HexFormat = ...): kotlin/String // kotlin.text/toHexString|toHexString@kotlin.UShort(kotlin.text.HexFormat){}[0]
final inline fun (kotlin/UShort).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.UShort(){}[0]
final inline fun (kotlin/UShort).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.UShort(){}[0]
final inline fun (kotlin/UShort).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.UShort(){}[0]
final inline fun (kotlin/UShort).kotlin/rotateLeft(kotlin/Int): kotlin/UShort // kotlin/rotateLeft|rotateLeft@kotlin.UShort(kotlin.Int){}[0]
final inline fun (kotlin/UShort).kotlin/rotateRight(kotlin/Int): kotlin/UShort // kotlin/rotateRight|rotateRight@kotlin.UShort(kotlin.Int){}[0]
final inline fun (kotlin/UShort).kotlin/takeHighestOneBit(): kotlin/UShort // kotlin/takeHighestOneBit|takeHighestOneBit@kotlin.UShort(){}[0]
final inline fun (kotlin/UShort).kotlin/takeLowestOneBit(): kotlin/UShort // kotlin/takeLowestOneBit|takeLowestOneBit@kotlin.UShort(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/all(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/any(): kotlin/Boolean // kotlin.collections/any|any@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/any(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/asShortArray(): kotlin/ShortArray // kotlin.collections/asShortArray|asShortArray@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/component1(): kotlin/UShort // kotlin.collections/component1|component1@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/component2(): kotlin/UShort // kotlin.collections/component2|component2@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/component3(): kotlin/UShort // kotlin.collections/component3|component3@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/component4(): kotlin/UShort // kotlin.collections/component4|component4@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/component5(): kotlin/UShort // kotlin.collections/component5|component5@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/copyInto(kotlin/UShortArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/UShortArray // kotlin.collections/copyInto|copyInto@kotlin.UShortArray(kotlin.UShortArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/copyOf(): kotlin/UShortArray // kotlin.collections/copyOf|copyOf@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/copyOf(kotlin/Int): kotlin/UShortArray // kotlin.collections/copyOf|copyOf@kotlin.UShortArray(kotlin.Int){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/UShortArray // kotlin.collections/copyOfRange|copyOfRange@kotlin.UShortArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/count(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/dropLastWhile(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/dropWhile(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/dropWhile|dropWhile@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UShort>): kotlin/UShort // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.UShortArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/elementAtOrNull(kotlin/Int): kotlin/UShort? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.UShortArray(kotlin.Int){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/filter(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/filter|filter@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, kotlin/UShort, kotlin/Boolean>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/filterIndexed|filterIndexed@kotlin.UShortArray(kotlin.Function2<kotlin.Int,kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/filterNot(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/filterNot|filterNot@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/find(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort? // kotlin.collections/find|find@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/findLast(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort? // kotlin.collections/findLast|findLast@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/first(): kotlin/UShort // kotlin.collections/first|first@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/first(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort // kotlin.collections/first|first@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/firstOrNull(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort? // kotlin.collections/firstOrNull|firstOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/forEach(kotlin/Function1<kotlin/UShort, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Unit>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, kotlin/UShort, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.UShortArray(kotlin.Function2<kotlin.Int,kotlin.UShort,kotlin.Unit>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UShort>): kotlin/UShort // kotlin.collections/getOrElse|getOrElse@kotlin.UShortArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/indexOf(kotlin/UShort): kotlin/Int // kotlin.collections/indexOf|indexOf@kotlin.UShortArray(kotlin.UShort){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/indexOfFirst(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/indexOfLast(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/last(): kotlin/UShort // kotlin.collections/last|last@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/last(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort // kotlin.collections/last|last@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/lastIndexOf(kotlin/UShort): kotlin/Int // kotlin.collections/lastIndexOf|lastIndexOf@kotlin.UShortArray(kotlin.UShort){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/lastOrNull(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort? // kotlin.collections/lastOrNull|lastOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UShort, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Double>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UShort, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Float>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UShort, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Double>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UShort, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Float>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UShort, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Double>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UShort, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Float>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UShort, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Double>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UShort, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Float>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/none(): kotlin/Boolean // kotlin.collections/none|none@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/none(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/onEach(kotlin/Function1<kotlin/UShort, kotlin/Unit>): kotlin/UShortArray // kotlin.collections/onEach|onEach@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Unit>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/UShort, kotlin/Unit>): kotlin/UShortArray // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.UShortArray(kotlin.Function2<kotlin.Int,kotlin.UShort,kotlin.Unit>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/plus(kotlin/UShort): kotlin/UShortArray // kotlin.collections/plus|plus@kotlin.UShortArray(kotlin.UShort){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/plus(kotlin/UShortArray): kotlin/UShortArray // kotlin.collections/plus|plus@kotlin.UShortArray(kotlin.UShortArray){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/random(): kotlin/UShort // kotlin.collections/random|random@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/randomOrNull(): kotlin/UShort? // kotlin.collections/randomOrNull|randomOrNull@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduce(kotlin/Function2<kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort // kotlin.collections/reduce|reduce@kotlin.UShortArray(kotlin.Function2<kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.UShortArray(kotlin.Function3<kotlin.Int,kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.UShortArray(kotlin.Function3<kotlin.Int,kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduceOrNull(kotlin/Function2<kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.UShortArray(kotlin.Function2<kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduceRight(kotlin/Function2<kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort // kotlin.collections/reduceRight|reduceRight@kotlin.UShortArray(kotlin.Function2<kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.UShortArray(kotlin.Function3<kotlin.Int,kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.UShortArray(kotlin.Function3<kotlin.Int,kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reduceRightOrNull(kotlin/Function2<kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin/UShort? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.UShortArray(kotlin.Function2<kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reverse() // kotlin.collections/reverse|reverse@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reverse(kotlin/Int, kotlin/Int) // kotlin.collections/reverse|reverse@kotlin.UShortArray(kotlin.Int;kotlin.Int){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/reversedArray(): kotlin/UShortArray // kotlin.collections/reversedArray|reversedArray@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/runningReduce(kotlin/Function2<kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/runningReduce|runningReduce@kotlin.UShortArray(kotlin.Function2<kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, kotlin/UShort, kotlin/UShort, kotlin/UShort>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.UShortArray(kotlin.Function3<kotlin.Int,kotlin.UShort,kotlin.UShort,kotlin.UShort>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/single(): kotlin/UShort // kotlin.collections/single|single@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/single(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort // kotlin.collections/single|single@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/singleOrNull(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin/UShort? // kotlin.collections/singleOrNull|singleOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sum(): kotlin/UInt // kotlin.collections/sum|sum@kotlin.UShortArray(){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sumBy(kotlin/Function1<kotlin/UShort, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumBy|sumBy@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.UInt>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sumByDouble(kotlin/Function1<kotlin/UShort, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Double>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UShort, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Double>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UShort, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Int>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UShort, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Long>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UShort, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.UInt>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/sumOf(kotlin/Function1<kotlin/UShort, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.ULong>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/takeLastWhile(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/takeWhile(kotlin/Function1<kotlin/UShort, kotlin/Boolean>): kotlin.collections/List<kotlin/UShort> // kotlin.collections/takeWhile|takeWhile@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.Boolean>){}[0]
final inline fun (kotlin/UShortArray).kotlin.collections/toShortArray(): kotlin/ShortArray // kotlin.collections/toShortArray|toShortArray@kotlin.UShortArray(){}[0]
final inline fun <#A: #B & kotlin.collections/Collection<*>, #B: kotlin/Any?> (#A).kotlin.collections/ifEmpty(kotlin/Function0<#B>): #B // kotlin.collections/ifEmpty|ifEmpty@0:0(kotlin.Function0<0:1>){0§<kotlin.collections.Collection<*>&0:1>;1§<kotlin.Any?>}[0]
final inline fun <#A: #B & kotlin.collections/Map<*, *>, #B: kotlin/Any?> (#A).kotlin.collections/ifEmpty(kotlin/Function0<#B>): #B // kotlin.collections/ifEmpty|ifEmpty@0:0(kotlin.Function0<0:1>){0§<kotlin.collections.Map<*,*>&0:1>;1§<kotlin.Any?>}[0]
final inline fun <#A: #B & kotlin/Array<*>, #B: kotlin/Any?> (#A).kotlin.collections/ifEmpty(kotlin/Function0<#B>): #B // kotlin.collections/ifEmpty|ifEmpty@0:0(kotlin.Function0<0:1>){0§<kotlin.Array<*>&0:1>;1§<kotlin.Any?>}[0]
final inline fun <#A: #B & kotlin/CharSequence, #B: kotlin/Any?> (#A).kotlin.text/ifBlank(kotlin/Function0<#B>): #B // kotlin.text/ifBlank|ifBlank@0:0(kotlin.Function0<0:1>){0§<kotlin.CharSequence&0:1>;1§<kotlin.Any?>}[0]
final inline fun <#A: #B & kotlin/CharSequence, #B: kotlin/Any?> (#A).kotlin.text/ifEmpty(kotlin/Function0<#B>): #B // kotlin.text/ifEmpty|ifEmpty@0:0(kotlin.Function0<0:1>){0§<kotlin.CharSequence&0:1>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Boolean>> (kotlin/BooleanArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Boolean, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.BooleanArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Boolean,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Boolean>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Boolean>> (kotlin/BooleanArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.BooleanArray(0:0;kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Boolean>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Boolean>> (kotlin/BooleanArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Boolean, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.BooleanArray(0:0;kotlin.Function1<kotlin.Boolean,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Boolean>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Byte>> (kotlin/ByteArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Byte, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.ByteArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Byte,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Byte>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Byte>> (kotlin/ByteArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Byte, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.ByteArray(0:0;kotlin.Function1<kotlin.Byte,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Byte>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Byte>> (kotlin/ByteArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Byte, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.ByteArray(0:0;kotlin.Function1<kotlin.Byte,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Byte>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Char>> (kotlin/CharArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.CharArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Char>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Char>> (kotlin/CharArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Char, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.CharArray(0:0;kotlin.Function1<kotlin.Char,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Char>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Char>> (kotlin/CharArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Char, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.CharArray(0:0;kotlin.Function1<kotlin.Char,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Char>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Double>> (kotlin/DoubleArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Double, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.DoubleArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Double,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Double>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Double>> (kotlin/DoubleArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Double, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.DoubleArray(0:0;kotlin.Function1<kotlin.Double,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Double>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Double>> (kotlin/DoubleArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Double, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.DoubleArray(0:0;kotlin.Function1<kotlin.Double,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Double>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Float>> (kotlin/FloatArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Float, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.FloatArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Float,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Float>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Float>> (kotlin/FloatArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Float, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.FloatArray(0:0;kotlin.Function1<kotlin.Float,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Float>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Float>> (kotlin/FloatArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Float, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.FloatArray(0:0;kotlin.Function1<kotlin.Float,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Float>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Int>> (kotlin/IntArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.IntArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Int>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Int>> (kotlin/IntArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Int, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.IntArray(0:0;kotlin.Function1<kotlin.Int,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Int>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Int>> (kotlin/IntArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Int, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.IntArray(0:0;kotlin.Function1<kotlin.Int,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Int>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Long>> (kotlin/LongArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Long, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.LongArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Long,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Long>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Long>> (kotlin/LongArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Long, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.LongArray(0:0;kotlin.Function1<kotlin.Long,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Long>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Long>> (kotlin/LongArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Long, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.LongArray(0:0;kotlin.Function1<kotlin.Long,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Long>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Short>> (kotlin/ShortArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Short, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.ShortArray(0:0;kotlin.Function2<kotlin.Int,kotlin.Short,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Short>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Short>> (kotlin/ShortArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/Short, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.ShortArray(0:0;kotlin.Function1<kotlin.Short,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Short>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/Short>> (kotlin/ShortArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/Short, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.ShortArray(0:0;kotlin.Function1<kotlin.Short,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.Short>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UByte>> (kotlin/UByteArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/UByte, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.UByteArray(0:0;kotlin.Function2<kotlin.Int,kotlin.UByte,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UByte>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UByte>> (kotlin/UByteArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/UByte, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.UByteArray(0:0;kotlin.Function1<kotlin.UByte,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UByte>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UByte>> (kotlin/UByteArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/UByte, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.UByteArray(0:0;kotlin.Function1<kotlin.UByte,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UByte>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UInt>> (kotlin/UIntArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/UInt, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.UIntArray(0:0;kotlin.Function2<kotlin.Int,kotlin.UInt,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UInt>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UInt>> (kotlin/UIntArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/UInt, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.UIntArray(0:0;kotlin.Function1<kotlin.UInt,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UInt>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UInt>> (kotlin/UIntArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/UInt, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.UIntArray(0:0;kotlin.Function1<kotlin.UInt,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UInt>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/ULong>> (kotlin/ULongArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/ULong, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.ULongArray(0:0;kotlin.Function2<kotlin.Int,kotlin.ULong,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.ULong>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/ULong>> (kotlin/ULongArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/ULong, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.ULongArray(0:0;kotlin.Function1<kotlin.ULong,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.ULong>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/ULong>> (kotlin/ULongArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/ULong, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.ULongArray(0:0;kotlin.Function1<kotlin.ULong,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.ULong>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UShort>> (kotlin/UShortArray).kotlin.collections/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/UShort, kotlin/Boolean>): #A // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.UShortArray(0:0;kotlin.Function2<kotlin.Int,kotlin.UShort,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UShort>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UShort>> (kotlin/UShortArray).kotlin.collections/filterNotTo(#A, kotlin/Function1<kotlin/UShort, kotlin/Boolean>): #A // kotlin.collections/filterNotTo|filterNotTo@kotlin.UShortArray(0:0;kotlin.Function1<kotlin.UShort,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UShort>>}[0]
final inline fun <#A: kotlin.collections/MutableCollection<in kotlin/UShort>> (kotlin/UShortArray).kotlin.collections/filterTo(#A, kotlin/Function1<kotlin/UShort, kotlin/Boolean>): #A // kotlin.collections/filterTo|filterTo@kotlin.UShortArray(0:0;kotlin.Function1<kotlin.UShort,kotlin.Boolean>){0§<kotlin.collections.MutableCollection<in|kotlin.UShort>>}[0]
final inline fun <#A: kotlin.text/Appendable> (kotlin/CharSequence).kotlin.text/filterIndexedTo(#A, kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Boolean>): #A // kotlin.text/filterIndexedTo|filterIndexedTo@kotlin.CharSequence(0:0;kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Boolean>){0§<kotlin.text.Appendable>}[0]
final inline fun <#A: kotlin.text/Appendable> (kotlin/CharSequence).kotlin.text/filterNotTo(#A, kotlin/Function1<kotlin/Char, kotlin/Boolean>): #A // kotlin.text/filterNotTo|filterNotTo@kotlin.CharSequence(0:0;kotlin.Function1<kotlin.Char,kotlin.Boolean>){0§<kotlin.text.Appendable>}[0]
final inline fun <#A: kotlin.text/Appendable> (kotlin/CharSequence).kotlin.text/filterTo(#A, kotlin/Function1<kotlin/Char, kotlin/Boolean>): #A // kotlin.text/filterTo|filterTo@kotlin.CharSequence(0:0;kotlin.Function1<kotlin.Char,kotlin.Boolean>){0§<kotlin.text.Appendable>}[0]
final inline fun <#A: kotlin/Any, #B: kotlin.collections/Iterable<#A> & kotlin.ranges/ClosedRange<#A>> (#B).kotlin.ranges/contains(#A?): kotlin/Boolean // kotlin.ranges/contains|contains@0:1(0:0?){0§<kotlin.Any>;1§<kotlin.ranges.ClosedRange<0:0>&kotlin.collections.Iterable<0:0>>}[0]
final inline fun <#A: kotlin/Any, #B: kotlin.collections/Iterable<#A> & kotlin.ranges/OpenEndRange<#A>> (#B).kotlin.ranges/contains(#A?): kotlin/Boolean // kotlin.ranges/contains|contains@0:1(0:0?){0§<kotlin.Any>;1§<kotlin.ranges.OpenEndRange<0:0>&kotlin.collections.Iterable<0:0>>}[0]
final inline fun <#A: kotlin/Any, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharSequence).kotlin.text/mapIndexedNotNullTo(#B, kotlin/Function2<kotlin/Int, kotlin/Char, #A?>): #B // kotlin.text/mapIndexedNotNullTo|mapIndexedNotNullTo@kotlin.CharSequence(0:1;kotlin.Function2<kotlin.Int,kotlin.Char,0:0?>){0§<kotlin.Any>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharSequence).kotlin.text/mapNotNullTo(#B, kotlin/Function1<kotlin/Char, #A?>): #B // kotlin.text/mapNotNullTo|mapNotNullTo@kotlin.CharSequence(0:1;kotlin.Function1<kotlin.Char,0:0?>){0§<kotlin.Any>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any> (kotlin/CharSequence).kotlin.text/firstNotNullOf(kotlin/Function1<kotlin/Char, #A?>): #A // kotlin.text/firstNotNullOf|firstNotNullOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0?>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (kotlin/CharSequence).kotlin.text/firstNotNullOfOrNull(kotlin/Function1<kotlin/Char, #A?>): #A? // kotlin.text/firstNotNullOfOrNull|firstNotNullOfOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0?>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (kotlin/CharSequence).kotlin.text/mapIndexedNotNull(kotlin/Function2<kotlin/Int, kotlin/Char, #A?>): kotlin.collections/List<#A> // kotlin.text/mapIndexedNotNull|mapIndexedNotNull@kotlin.CharSequence(kotlin.Function2<kotlin.Int,kotlin.Char,0:0?>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (kotlin/CharSequence).kotlin.text/mapNotNull(kotlin/Function1<kotlin/Char, #A?>): kotlin.collections/List<#A> // kotlin.text/mapNotNull|mapNotNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0?>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> kotlin/checkNotNull(#A?): #A // kotlin/checkNotNull|checkNotNull(0:0?){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> kotlin/checkNotNull(#A?, kotlin/Function0<kotlin/Any>): #A // kotlin/checkNotNull|checkNotNull(0:0?;kotlin.Function0<kotlin.Any>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> kotlin/requireNotNull(#A?): #A // kotlin/requireNotNull|requireNotNull(0:0?){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> kotlin/requireNotNull(#A?, kotlin/Function0<kotlin/Any>): #A // kotlin/requireNotNull|requireNotNull(0:0?;kotlin.Function0<kotlin.Any>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: #A, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #C, #A>> (kotlin.collections/Grouping<#B, #C>).kotlin.collections/reduceTo(#D, kotlin/Function3<#C, #A, #B, #A>): #D // kotlin.collections/reduceTo|reduceTo@kotlin.collections.Grouping<0:1,0:2>(0:3;kotlin.Function3<0:2,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:2,0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: #A, #C: kotlin/Any?> (kotlin.collections/Grouping<#B, #C>).kotlin.collections/reduce(kotlin/Function3<#C, #A, #B, #A>): kotlin.collections/Map<#C, #A> // kotlin.collections/reduce|reduce@kotlin.collections.Grouping<0:1,0:2>(kotlin.Function3<0:2,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/Iterable<#B>).kotlin.collections/reduce(kotlin/Function2<#A, #B, #A>): #A // kotlin.collections/reduce|reduce@kotlin.collections.Iterable<0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/Iterable<#B>).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, #A, #B, #A>): #A // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.collections.Iterable<0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/Iterable<#B>).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, #A, #B, #A>): #A? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.collections.Iterable<0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/Iterable<#B>).kotlin.collections/reduceOrNull(kotlin/Function2<#A, #B, #A>): #A? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.collections.Iterable<0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/Iterable<#B>).kotlin.collections/runningReduce(kotlin/Function2<#A, #B, #A>): kotlin.collections/List<#A> // kotlin.collections/runningReduce|runningReduce@kotlin.collections.Iterable<0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/Iterable<#B>).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, #A, #B, #A>): kotlin.collections/List<#A> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.collections.Iterable<0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/List<#B>).kotlin.collections/reduceRight(kotlin/Function2<#B, #A, #A>): #A // kotlin.collections/reduceRight|reduceRight@kotlin.collections.List<0:1>(kotlin.Function2<0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/List<#B>).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, #B, #A, #A>): #A // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.collections.List<0:1>(kotlin.Function3<kotlin.Int,0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/List<#B>).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, #B, #A, #A>): #A? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.collections.List<0:1>(kotlin.Function3<kotlin.Int,0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/List<#B>).kotlin.collections/reduceRightOrNull(kotlin/Function2<#B, #A, #A>): #A? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.collections.List<0:1>(kotlin.Function2<0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/Map<in kotlin/String, #A>).kotlin.collections/getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #B // kotlin.collections/getValue|getValue@kotlin.collections.Map<in|kotlin.String,0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.collections/MutableMap<in kotlin/String, out #A>).kotlin.collections/getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #B // kotlin.collections/getValue|getValue@kotlin.collections.MutableMap<in|kotlin.String,out|0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.sequences/Sequence<#B>).kotlin.sequences/reduce(kotlin/Function2<#A, #B, #A>): #A // kotlin.sequences/reduce|reduce@kotlin.sequences.Sequence<0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.sequences/Sequence<#B>).kotlin.sequences/reduceIndexed(kotlin/Function3<kotlin/Int, #A, #B, #A>): #A // kotlin.sequences/reduceIndexed|reduceIndexed@kotlin.sequences.Sequence<0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.sequences/Sequence<#B>).kotlin.sequences/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, #A, #B, #A>): #A? // kotlin.sequences/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.sequences.Sequence<0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin.sequences/Sequence<#B>).kotlin.sequences/reduceOrNull(kotlin/Function2<#A, #B, #A>): #A? // kotlin.sequences/reduceOrNull|reduceOrNull@kotlin.sequences.Sequence<0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduce(kotlin/Function2<#A, #B, #A>): #A // kotlin.collections/reduce|reduce@kotlin.Array<out|0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduceIndexed(kotlin/Function3<kotlin/Int, #A, #B, #A>): #A // kotlin.collections/reduceIndexed|reduceIndexed@kotlin.Array<out|0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduceIndexedOrNull(kotlin/Function3<kotlin/Int, #A, #B, #A>): #A? // kotlin.collections/reduceIndexedOrNull|reduceIndexedOrNull@kotlin.Array<out|0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduceOrNull(kotlin/Function2<#A, #B, #A>): #A? // kotlin.collections/reduceOrNull|reduceOrNull@kotlin.Array<out|0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduceRight(kotlin/Function2<#B, #A, #A>): #A // kotlin.collections/reduceRight|reduceRight@kotlin.Array<out|0:1>(kotlin.Function2<0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduceRightIndexed(kotlin/Function3<kotlin/Int, #B, #A, #A>): #A // kotlin.collections/reduceRightIndexed|reduceRightIndexed@kotlin.Array<out|0:1>(kotlin.Function3<kotlin.Int,0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduceRightIndexedOrNull(kotlin/Function3<kotlin/Int, #B, #A, #A>): #A? // kotlin.collections/reduceRightIndexedOrNull|reduceRightIndexedOrNull@kotlin.Array<out|0:1>(kotlin.Function3<kotlin.Int,0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/reduceRightOrNull(kotlin/Function2<#B, #A, #A>): #A? // kotlin.collections/reduceRightOrNull|reduceRightOrNull@kotlin.Array<out|0:1>(kotlin.Function2<0:1,0:0,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/runningReduce(kotlin/Function2<#A, #B, #A>): kotlin.collections/List<#A> // kotlin.collections/runningReduce|runningReduce@kotlin.Array<out|0:1>(kotlin.Function2<0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Array<out #B>).kotlin.collections/runningReduceIndexed(kotlin/Function3<kotlin/Int, #A, #B, #A>): kotlin.collections/List<#A> // kotlin.collections/runningReduceIndexed|runningReduceIndexed@kotlin.Array<out|0:1>(kotlin.Function3<kotlin.Int,0:0,0:1,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Result<#B>).kotlin/getOrDefault(#A): #A // kotlin/getOrDefault|getOrDefault@kotlin.Result<0:1>(0:0){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Result<#B>).kotlin/getOrElse(kotlin/Function1<kotlin/Throwable, #A>): #A // kotlin/getOrElse|getOrElse@kotlin.Result<0:1>(kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Result<#B>).kotlin/recover(kotlin/Function1<kotlin/Throwable, #A>): kotlin/Result<#A> // kotlin/recover|recover@kotlin.Result<0:1>(kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: #A> (kotlin/Result<#B>).kotlin/recoverCatching(kotlin/Function1<kotlin/Throwable, #A>): kotlin/Result<#A> // kotlin/recoverCatching|recoverCatching@kotlin.Result<0:1>(kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>;1§<0:0>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/Iterable<#A>> (#B).kotlin.collections/onEach(kotlin/Function1<#A, kotlin/Unit>): #B // kotlin.collections/onEach|onEach@0:1(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.collections.Iterable<0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/Iterable<#A>> (#B).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Unit>): #B // kotlin.collections/onEachIndexed|onEachIndexed@0:1(kotlin.Function2<kotlin.Int,0:0,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.collections.Iterable<0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.collections/Iterable<#A>).kotlin.collections/filterIndexedTo(#B, kotlin/Function2<kotlin/Int, #A, kotlin/Boolean>): #B // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function2<kotlin.Int,0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.collections/Iterable<#A>).kotlin.collections/filterNotTo(#B, kotlin/Function1<#A, kotlin/Boolean>): #B // kotlin.collections/filterNotTo|filterNotTo@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.collections/Iterable<#A>).kotlin.collections/filterTo(#B, kotlin/Function1<#A, kotlin/Boolean>): #B // kotlin.collections/filterTo|filterTo@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/filterIndexedTo(#B, kotlin/Function2<kotlin/Int, #A, kotlin/Boolean>): #B // kotlin.sequences/filterIndexedTo|filterIndexedTo@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function2<kotlin.Int,0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/filterNotTo(#B, kotlin/Function1<#A, kotlin/Boolean>): #B // kotlin.sequences/filterNotTo|filterNotTo@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/filterTo(#B, kotlin/Function1<#A, kotlin/Boolean>): #B // kotlin.sequences/filterTo|filterTo@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/Array<out #A>).kotlin.collections/filterIndexedTo(#B, kotlin/Function2<kotlin/Int, #A, kotlin/Boolean>): #B // kotlin.collections/filterIndexedTo|filterIndexedTo@kotlin.Array<out|0:0>(0:1;kotlin.Function2<kotlin.Int,0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/Array<out #A>).kotlin.collections/filterNotTo(#B, kotlin/Function1<#A, kotlin/Boolean>): #B // kotlin.collections/filterNotTo|filterNotTo@kotlin.Array<out|0:0>(0:1;kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/Array<out #A>).kotlin.collections/filterTo(#B, kotlin/Function1<#A, kotlin/Boolean>): #B // kotlin.collections/filterTo|filterTo@kotlin.Array<out|0:0>(0:1;kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/BooleanArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Boolean, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.BooleanArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Boolean,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/BooleanArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Boolean, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.BooleanArray(0:1;kotlin.Function1<kotlin.Boolean,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/BooleanArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Boolean, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.BooleanArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Boolean,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/BooleanArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Boolean, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.BooleanArray(0:1;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ByteArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Byte, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.ByteArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Byte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ByteArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Byte, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.ByteArray(0:1;kotlin.Function1<kotlin.Byte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ByteArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Byte, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.ByteArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Byte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ByteArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Byte, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.ByteArray(0:1;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Char, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.CharArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Char, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.CharArray(0:1;kotlin.Function1<kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Char, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.CharArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.CharArray(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharSequence).kotlin.text/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Char, kotlin.collections/Iterable<#A>>): #B // kotlin.text/flatMapIndexedTo|flatMapIndexedTo@kotlin.CharSequence(0:1;kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharSequence).kotlin.text/flatMapTo(#B, kotlin/Function1<kotlin/Char, kotlin.collections/Iterable<#A>>): #B // kotlin.text/flatMapTo|flatMapTo@kotlin.CharSequence(0:1;kotlin.Function1<kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharSequence).kotlin.text/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Char, #A>): #B // kotlin.text/mapIndexedTo|mapIndexedTo@kotlin.CharSequence(0:1;kotlin.Function2<kotlin.Int,kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/CharSequence).kotlin.text/mapTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.text/mapTo|mapTo@kotlin.CharSequence(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/DoubleArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Double, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.DoubleArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Double,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/DoubleArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Double, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.DoubleArray(0:1;kotlin.Function1<kotlin.Double,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/DoubleArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Double, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.DoubleArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Double,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/DoubleArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Double, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.DoubleArray(0:1;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/FloatArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Float, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.FloatArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Float,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/FloatArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Float, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.FloatArray(0:1;kotlin.Function1<kotlin.Float,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/FloatArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Float, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.FloatArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Float,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/FloatArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Float, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.FloatArray(0:1;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/IntArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Int, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.IntArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/IntArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Int, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.IntArray(0:1;kotlin.Function1<kotlin.Int,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/IntArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Int, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.IntArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Int,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/IntArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Int, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.IntArray(0:1;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/LongArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Long, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.LongArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Long,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/LongArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Long, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.LongArray(0:1;kotlin.Function1<kotlin.Long,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/LongArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Long, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.LongArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Long,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/LongArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Long, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.LongArray(0:1;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ShortArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Short, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.ShortArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Short,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ShortArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/Short, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.ShortArray(0:1;kotlin.Function1<kotlin.Short,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ShortArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/Short, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.ShortArray(0:1;kotlin.Function2<kotlin.Int,kotlin.Short,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ShortArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/Short, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.ShortArray(0:1;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UByteArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/UByte, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.UByteArray(0:1;kotlin.Function2<kotlin.Int,kotlin.UByte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UByteArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/UByte, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.UByteArray(0:1;kotlin.Function1<kotlin.UByte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UByteArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/UByte, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.UByteArray(0:1;kotlin.Function2<kotlin.Int,kotlin.UByte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UByteArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/UByte, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.UByteArray(0:1;kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UIntArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/UInt, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.UIntArray(0:1;kotlin.Function2<kotlin.Int,kotlin.UInt,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UIntArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/UInt, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.UIntArray(0:1;kotlin.Function1<kotlin.UInt,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UIntArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/UInt, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.UIntArray(0:1;kotlin.Function2<kotlin.Int,kotlin.UInt,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UIntArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/UInt, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.UIntArray(0:1;kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ULongArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/ULong, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.ULongArray(0:1;kotlin.Function2<kotlin.Int,kotlin.ULong,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ULongArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/ULong, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.ULongArray(0:1;kotlin.Function1<kotlin.ULong,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ULongArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/ULong, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.ULongArray(0:1;kotlin.Function2<kotlin.Int,kotlin.ULong,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/ULongArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/ULong, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.ULongArray(0:1;kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UShortArray).kotlin.collections/flatMapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/UShort, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.UShortArray(0:1;kotlin.Function2<kotlin.Int,kotlin.UShort,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UShortArray).kotlin.collections/flatMapTo(#B, kotlin/Function1<kotlin/UShort, kotlin.collections/Iterable<#A>>): #B // kotlin.collections/flatMapTo|flatMapTo@kotlin.UShortArray(0:1;kotlin.Function1<kotlin.UShort,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UShortArray).kotlin.collections/mapIndexedTo(#B, kotlin/Function2<kotlin/Int, kotlin/UShort, #A>): #B // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.UShortArray(0:1;kotlin.Function2<kotlin.Int,kotlin.UShort,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/UShortArray).kotlin.collections/mapTo(#B, kotlin/Function1<kotlin/UShort, #A>): #B // kotlin.collections/mapTo|mapTo@kotlin.UShortArray(0:1;kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Boolean>> (kotlin/BooleanArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Boolean, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.BooleanArray(0:1;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Boolean>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Byte>> (kotlin/ByteArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Byte, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.ByteArray(0:1;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Byte>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Char>> (kotlin/CharArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.CharArray(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Char>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Char>> (kotlin/CharSequence).kotlin.text/associateByTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.text/associateByTo|associateByTo@kotlin.CharSequence(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Char>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Double>> (kotlin/DoubleArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Double, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.DoubleArray(0:1;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Double>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Float>> (kotlin/FloatArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Float, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.FloatArray(0:1;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Float>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Int>> (kotlin/IntArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Int, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.IntArray(0:1;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Int>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Long>> (kotlin/LongArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Long, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.LongArray(0:1;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Long>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, in kotlin/Short>> (kotlin/ShortArray).kotlin.collections/associateByTo(#B, kotlin/Function1<kotlin/Short, #A>): #B // kotlin.collections/associateByTo|associateByTo@kotlin.ShortArray(0:1;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,in|kotlin.Short>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Boolean>>> (kotlin/BooleanArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Boolean, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.BooleanArray(0:1;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Boolean>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Byte>>> (kotlin/ByteArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Byte, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.ByteArray(0:1;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Byte>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Char>>> (kotlin/CharArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.CharArray(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Char>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Char>>> (kotlin/CharSequence).kotlin.text/groupByTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.text/groupByTo|groupByTo@kotlin.CharSequence(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Char>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Double>>> (kotlin/DoubleArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Double, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.DoubleArray(0:1;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Double>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Float>>> (kotlin/FloatArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Float, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.FloatArray(0:1;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Float>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Int>>> (kotlin/IntArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Int, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.IntArray(0:1;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Int>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Long>>> (kotlin/LongArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Long, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.LongArray(0:1;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Long>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/Short>>> (kotlin/ShortArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/Short, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.ShortArray(0:1;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.Short>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/UByte>>> (kotlin/UByteArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/UByte, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.UByteArray(0:1;kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.UByte>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/UInt>>> (kotlin/UIntArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/UInt, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.UIntArray(0:1;kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.UInt>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/ULong>>> (kotlin/ULongArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/ULong, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.ULongArray(0:1;kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.ULong>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<kotlin/UShort>>> (kotlin/UShortArray).kotlin.collections/groupByTo(#B, kotlin/Function1<kotlin/UShort, #A>): #B // kotlin.collections/groupByTo|groupByTo@kotlin.UShortArray(0:1;kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<kotlin.UShort>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Boolean, in #A>> (kotlin/BooleanArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Boolean, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.BooleanArray(0:1;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Boolean,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Byte, in #A>> (kotlin/ByteArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Byte, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.ByteArray(0:1;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Byte,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Char, in #A>> (kotlin/CharArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.CharArray(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Char,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Char, in #A>> (kotlin/CharSequence).kotlin.text/associateWithTo(#B, kotlin/Function1<kotlin/Char, #A>): #B // kotlin.text/associateWithTo|associateWithTo@kotlin.CharSequence(0:1;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Char,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Double, in #A>> (kotlin/DoubleArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Double, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.DoubleArray(0:1;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Double,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Float, in #A>> (kotlin/FloatArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Float, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.FloatArray(0:1;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Float,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Int, in #A>> (kotlin/IntArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Int, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.IntArray(0:1;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Int,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Long, in #A>> (kotlin/LongArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Long, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.LongArray(0:1;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Long,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/Short, in #A>> (kotlin/ShortArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/Short, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.ShortArray(0:1;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.Short,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/UByte, in #A>> (kotlin/UByteArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/UByte, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.UByteArray(0:1;kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.UByte,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/UInt, in #A>> (kotlin/UIntArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/UInt, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.UIntArray(0:1;kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.UInt,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/ULong, in #A>> (kotlin/ULongArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/ULong, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.ULongArray(0:1;kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.ULong,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin.collections/MutableMap<in kotlin/UShort, in #A>> (kotlin/UShortArray).kotlin.collections/associateWithTo(#B, kotlin/Function1<kotlin/UShort, #A>): #B // kotlin.collections/associateWithTo|associateWithTo@kotlin.UShortArray(0:1;kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>;1§<kotlin.collections.MutableMap<in|kotlin.UShort,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/mapIndexedNotNullTo(#C, kotlin/Function2<kotlin/Int, #A, #B?>): #C // kotlin.collections/mapIndexedNotNullTo|mapIndexedNotNullTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/mapNotNullTo(#C, kotlin/Function1<#A, #B?>): #C // kotlin.collections/mapNotNullTo|mapNotNullTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/mapIndexedNotNullTo(#C, kotlin/Function2<kotlin/Int, #A, #B?>): #C // kotlin.sequences/mapIndexedNotNullTo|mapIndexedNotNullTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/mapNotNullTo(#C, kotlin/Function1<#A, #B?>): #C // kotlin.sequences/mapNotNullTo|mapNotNullTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/mapIndexedNotNullTo(#C, kotlin/Function2<kotlin/Int, #A, #B?>): #C // kotlin.collections/mapIndexedNotNullTo|mapIndexedNotNullTo@kotlin.Array<out|0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/mapNotNullTo(#C, kotlin/Function1<#A, #B?>): #C // kotlin.collections/mapNotNullTo|mapNotNullTo@kotlin.Array<out|0:0>(0:2;kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.collections/Iterable<#A>).kotlin.collections/firstNotNullOf(kotlin/Function1<#A, #B?>): #B // kotlin.collections/firstNotNullOf|firstNotNullOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.collections/Iterable<#A>).kotlin.collections/firstNotNullOfOrNull(kotlin/Function1<#A, #B?>): #B? // kotlin.collections/firstNotNullOfOrNull|firstNotNullOfOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.collections/Iterable<#A>).kotlin.collections/mapIndexedNotNull(kotlin/Function2<kotlin/Int, #A, #B?>): kotlin.collections/List<#B> // kotlin.collections/mapIndexedNotNull|mapIndexedNotNull@kotlin.collections.Iterable<0:0>(kotlin.Function2<kotlin.Int,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.collections/Iterable<#A>).kotlin.collections/mapNotNull(kotlin/Function1<#A, #B?>): kotlin.collections/List<#B> // kotlin.collections/mapNotNull|mapNotNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.sequences/Sequence<#A>).kotlin.sequences/firstNotNullOf(kotlin/Function1<#A, #B?>): #B // kotlin.sequences/firstNotNullOf|firstNotNullOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin.sequences/Sequence<#A>).kotlin.sequences/firstNotNullOfOrNull(kotlin/Function1<#A, #B?>): #B? // kotlin.sequences/firstNotNullOfOrNull|firstNotNullOfOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin/Array<out #A>).kotlin.collections/firstNotNullOf(kotlin/Function1<#A, #B?>): #B // kotlin.collections/firstNotNullOf|firstNotNullOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin/Array<out #A>).kotlin.collections/firstNotNullOfOrNull(kotlin/Function1<#A, #B?>): #B? // kotlin.collections/firstNotNullOfOrNull|firstNotNullOfOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin/Array<out #A>).kotlin.collections/mapIndexedNotNull(kotlin/Function2<kotlin/Int, #A, #B?>): kotlin.collections/List<#B> // kotlin.collections/mapIndexedNotNull|mapIndexedNotNull@kotlin.Array<out|0:0>(kotlin.Function2<kotlin.Int,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (kotlin/Array<out #A>).kotlin.collections/mapNotNull(kotlin/Function1<#A, #B?>): kotlin.collections/List<#B> // kotlin.collections/mapNotNull|mapNotNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/Map<out #A, #B>> (#C).kotlin.collections/onEach(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Unit>): #C // kotlin.collections/onEach|onEach@0:2(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.Map<out|0:0,0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/Map<out #A, #B>> (#C).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin.collections/Map.Entry<#A, #B>, kotlin/Unit>): #C // kotlin.collections/onEachIndexed|onEachIndexed@0:2(kotlin.Function2<kotlin.Int,kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.Map<out|0:0,0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, kotlin.collections/Iterable<#B>>): #C // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, kotlin.sequences/Sequence<#B>>): #C // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMapTo(#C, kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): #C // kotlin.collections/flatMapTo|flatMapTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMapTo(#C, kotlin/Function1<#A, kotlin.sequences/Sequence<#B>>): #C // kotlin.collections/flatMapTo|flatMapTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function1<0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/mapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, #B>): #C // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/mapTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/mapTo|mapTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, kotlin.collections/Iterable<#B>>): #C // kotlin.sequences/flatMapIndexedTo|flatMapIndexedTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, kotlin.sequences/Sequence<#B>>): #C // kotlin.sequences/flatMapIndexedTo|flatMapIndexedTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMapTo(#C, kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): #C // kotlin.sequences/flatMapTo|flatMapTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/flatMapTo(#C, kotlin/Function1<#A, kotlin.sequences/Sequence<#B>>): #C // kotlin.sequences/flatMapTo|flatMapTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function1<0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/mapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, #B>): #C // kotlin.sequences/mapIndexedTo|mapIndexedTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/mapTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.sequences/mapTo|mapTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/flatMapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, kotlin.collections/Iterable<#B>>): #C // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.Array<out|0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/flatMapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, kotlin.sequences/Sequence<#B>>): #C // kotlin.collections/flatMapIndexedTo|flatMapIndexedTo@kotlin.Array<out|0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/flatMapTo(#C, kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): #C // kotlin.collections/flatMapTo|flatMapTo@kotlin.Array<out|0:0>(0:2;kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/flatMapTo(#C, kotlin/Function1<#A, kotlin.sequences/Sequence<#B>>): #C // kotlin.collections/flatMapTo|flatMapTo@kotlin.Array<out|0:0>(0:2;kotlin.Function1<0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/mapIndexedTo(#C, kotlin/Function2<kotlin/Int, #A, #B>): #C // kotlin.collections/mapIndexedTo|mapIndexedTo@kotlin.Array<out|0:0>(0:2;kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableCollection<in #B>> (kotlin/Array<out #A>).kotlin.collections/mapTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/mapTo|mapTo@kotlin.Array<out|0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableCollection<in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin.collections/Iterable<#A>).kotlin.collections/associateWithTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/associateWithTo|associateWithTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/filterNotTo(#C, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): #C // kotlin.collections/filterNotTo|filterNotTo@kotlin.collections.Map<out|0:0,0:1>(0:2;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/filterTo(#C, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): #C // kotlin.collections/filterTo|filterTo@kotlin.collections.Map<out|0:0,0:1>(0:2;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associateWithTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.sequences/associateWithTo|associateWithTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/Array<out #A>).kotlin.collections/associateWithTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/associateWithTo|associateWithTo@kotlin.Array<out|0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/BooleanArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Boolean, #A>, kotlin/Function1<kotlin/Boolean, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.BooleanArray(0:2;kotlin.Function1<kotlin.Boolean,0:0>;kotlin.Function1<kotlin.Boolean,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/BooleanArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Boolean, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.BooleanArray(0:2;kotlin.Function1<kotlin.Boolean,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/ByteArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Byte, #A>, kotlin/Function1<kotlin/Byte, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.ByteArray(0:2;kotlin.Function1<kotlin.Byte,0:0>;kotlin.Function1<kotlin.Byte,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/ByteArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Byte, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.ByteArray(0:2;kotlin.Function1<kotlin.Byte,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/CharArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.CharArray(0:2;kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/CharArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Char, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.CharArray(0:2;kotlin.Function1<kotlin.Char,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/CharSequence).kotlin.text/associateByTo(#C, kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): #C // kotlin.text/associateByTo|associateByTo@kotlin.CharSequence(0:2;kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/CharSequence).kotlin.text/associateTo(#C, kotlin/Function1<kotlin/Char, kotlin/Pair<#A, #B>>): #C // kotlin.text/associateTo|associateTo@kotlin.CharSequence(0:2;kotlin.Function1<kotlin.Char,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/DoubleArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Double, #A>, kotlin/Function1<kotlin/Double, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.DoubleArray(0:2;kotlin.Function1<kotlin.Double,0:0>;kotlin.Function1<kotlin.Double,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/DoubleArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Double, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.DoubleArray(0:2;kotlin.Function1<kotlin.Double,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/FloatArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Float, #A>, kotlin/Function1<kotlin/Float, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.FloatArray(0:2;kotlin.Function1<kotlin.Float,0:0>;kotlin.Function1<kotlin.Float,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/FloatArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Float, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.FloatArray(0:2;kotlin.Function1<kotlin.Float,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/IntArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Int, #A>, kotlin/Function1<kotlin/Int, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.IntArray(0:2;kotlin.Function1<kotlin.Int,0:0>;kotlin.Function1<kotlin.Int,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/IntArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Int, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.IntArray(0:2;kotlin.Function1<kotlin.Int,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/LongArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Long, #A>, kotlin/Function1<kotlin/Long, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.LongArray(0:2;kotlin.Function1<kotlin.Long,0:0>;kotlin.Function1<kotlin.Long,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/LongArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Long, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.LongArray(0:2;kotlin.Function1<kotlin.Long,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/ShortArray).kotlin.collections/associateByTo(#C, kotlin/Function1<kotlin/Short, #A>, kotlin/Function1<kotlin/Short, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.ShortArray(0:2;kotlin.Function1<kotlin.Short,0:0>;kotlin.Function1<kotlin.Short,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, in #B>> (kotlin/ShortArray).kotlin.collections/associateTo(#C, kotlin/Function1<kotlin/Short, kotlin/Pair<#A, #B>>): #C // kotlin.collections/associateTo|associateTo@kotlin.ShortArray(0:2;kotlin.Function1<kotlin.Short,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/BooleanArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Boolean, #A>, kotlin/Function1<kotlin/Boolean, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.BooleanArray(0:2;kotlin.Function1<kotlin.Boolean,0:0>;kotlin.Function1<kotlin.Boolean,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/ByteArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Byte, #A>, kotlin/Function1<kotlin/Byte, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.ByteArray(0:2;kotlin.Function1<kotlin.Byte,0:0>;kotlin.Function1<kotlin.Byte,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/CharArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.CharArray(0:2;kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/CharSequence).kotlin.text/groupByTo(#C, kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): #C // kotlin.text/groupByTo|groupByTo@kotlin.CharSequence(0:2;kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/DoubleArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Double, #A>, kotlin/Function1<kotlin/Double, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.DoubleArray(0:2;kotlin.Function1<kotlin.Double,0:0>;kotlin.Function1<kotlin.Double,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/FloatArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Float, #A>, kotlin/Function1<kotlin/Float, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.FloatArray(0:2;kotlin.Function1<kotlin.Float,0:0>;kotlin.Function1<kotlin.Float,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/IntArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Int, #A>, kotlin/Function1<kotlin/Int, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.IntArray(0:2;kotlin.Function1<kotlin.Int,0:0>;kotlin.Function1<kotlin.Int,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/LongArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Long, #A>, kotlin/Function1<kotlin/Long, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.LongArray(0:2;kotlin.Function1<kotlin.Long,0:0>;kotlin.Function1<kotlin.Long,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/ShortArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/Short, #A>, kotlin/Function1<kotlin/Short, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.ShortArray(0:2;kotlin.Function1<kotlin.Short,0:0>;kotlin.Function1<kotlin.Short,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/UByteArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/UByte, #A>, kotlin/Function1<kotlin/UByte, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.UByteArray(0:2;kotlin.Function1<kotlin.UByte,0:0>;kotlin.Function1<kotlin.UByte,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/UIntArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/UInt, #A>, kotlin/Function1<kotlin/UInt, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.UIntArray(0:2;kotlin.Function1<kotlin.UInt,0:0>;kotlin.Function1<kotlin.UInt,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/ULongArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/ULong, #A>, kotlin/Function1<kotlin/ULong, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.ULongArray(0:2;kotlin.Function1<kotlin.ULong,0:0>;kotlin.Function1<kotlin.ULong,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #A, kotlin.collections/MutableList<#B>>> (kotlin/UShortArray).kotlin.collections/groupByTo(#C, kotlin/Function1<kotlin/UShort, #A>, kotlin/Function1<kotlin/UShort, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.UShortArray(0:2;kotlin.Function1<kotlin.UShort,0:0>;kotlin.Function1<kotlin.UShort,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:0,kotlin.collections.MutableList<0:1>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #B, in #A>> (kotlin.collections/Iterable<#A>).kotlin.collections/associateByTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:1,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #B, in #A>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associateByTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.sequences/associateByTo|associateByTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:1,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #B, in #A>> (kotlin/Array<out #A>).kotlin.collections/associateByTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/associateByTo|associateByTo@kotlin.Array<out|0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:1,in|0:0>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #B, kotlin.collections/MutableList<#A>>> (kotlin.collections/Iterable<#A>).kotlin.collections/groupByTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.collections.Iterable<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:1,kotlin.collections.MutableList<0:0>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #B, kotlin.collections/MutableList<#A>>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/groupByTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.sequences/groupByTo|groupByTo@kotlin.sequences.Sequence<0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:1,kotlin.collections.MutableList<0:0>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin.collections/MutableMap<in #B, kotlin.collections/MutableList<#A>>> (kotlin/Array<out #A>).kotlin.collections/groupByTo(#C, kotlin/Function1<#A, #B>): #C // kotlin.collections/groupByTo|groupByTo@kotlin.Array<out|0:0>(0:2;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.collections.MutableMap<in|0:1,kotlin.collections.MutableList<0:0>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any, #D: kotlin.collections/MutableCollection<in #C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/mapNotNullTo(#D, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C?>): #D // kotlin.collections/mapNotNullTo|mapNotNullTo@kotlin.collections.Map<out|0:0,0:1>(0:3;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2?>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any>;3§<kotlin.collections.MutableCollection<in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any> (kotlin.collections/Map<out #A, #B>).kotlin.collections/firstNotNullOf(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C?>): #C // kotlin.collections/firstNotNullOf|firstNotNullOf@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2?>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any> (kotlin.collections/Map<out #A, #B>).kotlin.collections/firstNotNullOfOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C?>): #C? // kotlin.collections/firstNotNullOfOrNull|firstNotNullOfOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2?>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any> (kotlin.collections/Map<out #A, #B>).kotlin.collections/mapNotNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C?>): kotlin.collections/List<#C> // kotlin.collections/mapNotNull|mapNotNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2?>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableCollection<in #C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/flatMapTo(#D, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin.collections/Iterable<#C>>): #D // kotlin.collections/flatMapTo|flatMapTo@kotlin.collections.Map<out|0:0,0:1>(0:3;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.collections.Iterable<0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableCollection<in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableCollection<in #C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/flatMapTo(#D, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin.sequences/Sequence<#C>>): #D // kotlin.collections/flatMapTo|flatMapTo@kotlin.collections.Map<out|0:0,0:1>(0:3;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.sequences.Sequence<0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableCollection<in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableCollection<in #C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/mapTo(#D, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #D // kotlin.collections/mapTo|mapTo@kotlin.collections.Map<out|0:0,0:1>(0:3;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableCollection<in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #A, in #C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/mapValuesTo(#D, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #D // kotlin.collections/mapValuesTo|mapValuesTo@kotlin.collections.Map<out|0:0,0:1>(0:3;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:0,in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, #C>> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/aggregateTo(#D, kotlin/Function4<#B, #C?, #A, kotlin/Boolean, #C>): #D // kotlin.collections/aggregateTo|aggregateTo@kotlin.collections.Grouping<0:0,0:1>(0:3;kotlin.Function4<0:1,0:2?,0:0,kotlin.Boolean,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, #C>> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/foldTo(#D, #C, kotlin/Function2<#C, #A, #C>): #D // kotlin.collections/foldTo|foldTo@kotlin.collections.Grouping<0:0,0:1>(0:3;0:2;kotlin.Function2<0:2,0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, #C>> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/foldTo(#D, kotlin/Function2<#B, #A, #C>, kotlin/Function3<#B, #C, #A, #C>): #D // kotlin.collections/foldTo|foldTo@kotlin.collections.Grouping<0:0,0:1>(0:3;kotlin.Function2<0:1,0:0,0:2>;kotlin.Function3<0:1,0:2,0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, in #C>> (kotlin.collections/Iterable<#A>).kotlin.collections/associateByTo(#D, kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): #D // kotlin.collections/associateByTo|associateByTo@kotlin.collections.Iterable<0:0>(0:3;kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, in #C>> (kotlin.collections/Iterable<#A>).kotlin.collections/associateTo(#D, kotlin/Function1<#A, kotlin/Pair<#B, #C>>): #D // kotlin.collections/associateTo|associateTo@kotlin.collections.Iterable<0:0>(0:3;kotlin.Function1<0:0,kotlin.Pair<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, in #C>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associateByTo(#D, kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): #D // kotlin.sequences/associateByTo|associateByTo@kotlin.sequences.Sequence<0:0>(0:3;kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, in #C>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associateTo(#D, kotlin/Function1<#A, kotlin/Pair<#B, #C>>): #D // kotlin.sequences/associateTo|associateTo@kotlin.sequences.Sequence<0:0>(0:3;kotlin.Function1<0:0,kotlin.Pair<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, in #C>> (kotlin/Array<out #A>).kotlin.collections/associateByTo(#D, kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): #D // kotlin.collections/associateByTo|associateByTo@kotlin.Array<out|0:0>(0:3;kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, in #C>> (kotlin/Array<out #A>).kotlin.collections/associateTo(#D, kotlin/Function1<#A, kotlin/Pair<#B, #C>>): #D // kotlin.collections/associateTo|associateTo@kotlin.Array<out|0:0>(0:3;kotlin.Function1<0:0,kotlin.Pair<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,in|0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, kotlin.collections/MutableList<#C>>> (kotlin.collections/Iterable<#A>).kotlin.collections/groupByTo(#D, kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): #D // kotlin.collections/groupByTo|groupByTo@kotlin.collections.Iterable<0:0>(0:3;kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,kotlin.collections.MutableList<0:2>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, kotlin.collections/MutableList<#C>>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/groupByTo(#D, kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): #D // kotlin.sequences/groupByTo|groupByTo@kotlin.sequences.Sequence<0:0>(0:3;kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,kotlin.collections.MutableList<0:2>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #B, kotlin.collections/MutableList<#C>>> (kotlin/Array<out #A>).kotlin.collections/groupByTo(#D, kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): #D // kotlin.collections/groupByTo|groupByTo@kotlin.Array<out|0:0>(0:3;kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:1,kotlin.collections.MutableList<0:2>>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin.collections/MutableMap<in #C, in #B>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/mapKeysTo(#D, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #D // kotlin.collections/mapKeysTo|mapKeysTo@kotlin.collections.Map<out|0:0,0:1>(0:3;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.collections.MutableMap<in|0:2,in|0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/aggregate(kotlin/Function4<#B, #C?, #A, kotlin/Boolean, #C>): kotlin.collections/Map<#B, #C> // kotlin.collections/aggregate|aggregate@kotlin.collections.Grouping<0:0,0:1>(kotlin.Function4<0:1,0:2?,0:0,kotlin.Boolean,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/fold(#C, kotlin/Function2<#C, #A, #C>): kotlin.collections/Map<#B, #C> // kotlin.collections/fold|fold@kotlin.collections.Grouping<0:0,0:1>(0:2;kotlin.Function2<0:2,0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Grouping<#A, #B>).kotlin.collections/fold(kotlin/Function2<#B, #A, #C>, kotlin/Function3<#B, #C, #A, #C>): kotlin.collections/Map<#B, #C> // kotlin.collections/fold|fold@kotlin.collections.Grouping<0:0,0:1>(kotlin.Function2<0:1,0:0,0:2>;kotlin.Function3<0:1,0:2,0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/associate(kotlin/Function1<#A, kotlin/Pair<#B, #C>>): kotlin.collections/Map<#B, #C> // kotlin.collections/associate|associate@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Pair<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/associateBy(kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): kotlin.collections/Map<#B, #C> // kotlin.collections/associateBy|associateBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/groupBy(kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): kotlin.collections/Map<#B, kotlin.collections/List<#C>> // kotlin.collections/groupBy|groupBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/zip(kotlin.collections/Iterable<#B>, kotlin/Function2<#A, #B, #C>): kotlin.collections/List<#C> // kotlin.collections/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function2<0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/zip(kotlin/Array<out #B>, kotlin/Function2<#A, #B, #C>): kotlin.collections/List<#C> // kotlin.collections/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.Array<out|0:1>;kotlin.Function2<0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/flatMap(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin.collections/Iterable<#C>>): kotlin.collections/List<#C> // kotlin.collections/flatMap|flatMap@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.collections.Iterable<0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/flatMap(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin.sequences/Sequence<#C>>): kotlin.collections/List<#C> // kotlin.collections/flatMap|flatMap@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.sequences.Sequence<0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/map(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): kotlin.collections/List<#C> // kotlin.collections/map|map@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/mapKeys(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): kotlin.collections/Map<#C, #B> // kotlin.collections/mapKeys|mapKeys@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/mapValues(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): kotlin.collections/Map<#A, #C> // kotlin.collections/mapValues|mapValues@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOfWith(kotlin/Comparator<in #C>, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C // kotlin.collections/maxOfWith|maxOfWith@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|0:2>;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #C>, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|0:2>;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOfWith(kotlin/Comparator<in #C>, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C // kotlin.collections/minOfWith|minOfWith@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|0:2>;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #C>, kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|0:2>;kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associate(kotlin/Function1<#A, kotlin/Pair<#B, #C>>): kotlin.collections/Map<#B, #C> // kotlin.sequences/associate|associate@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Pair<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associateBy(kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): kotlin.collections/Map<#B, #C> // kotlin.sequences/associateBy|associateBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/groupBy(kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): kotlin.collections/Map<#B, kotlin.collections/List<#C>> // kotlin.sequences/groupBy|groupBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/associate(kotlin/Function1<#A, kotlin/Pair<#B, #C>>): kotlin.collections/Map<#B, #C> // kotlin.collections/associate|associate@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Pair<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/associateBy(kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): kotlin.collections/Map<#B, #C> // kotlin.collections/associateBy|associateBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/groupBy(kotlin/Function1<#A, #B>, kotlin/Function1<#A, #C>): kotlin.collections/Map<#B, kotlin.collections/List<#C>> // kotlin.collections/groupBy|groupBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function1<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/zip(kotlin.collections/Iterable<#B>, kotlin/Function2<#A, #B, #C>): kotlin.collections/List<#C> // kotlin.collections/zip|zip@kotlin.Array<out|0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function2<0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/zip(kotlin/Array<out #B>, kotlin/Function2<#A, #B, #C>): kotlin.collections/List<#C> // kotlin.collections/zip|zip@kotlin.Array<out|0:0>(kotlin.Array<out|0:1>;kotlin.Function2<0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxBy(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): kotlin.collections/Map.Entry<#A, #B> // kotlin.collections/maxBy|maxBy@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): kotlin.collections/Map.Entry<#A, #B>? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOf(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C // kotlin.collections/maxOf|maxOf@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minBy(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): kotlin.collections/Map.Entry<#A, #B> // kotlin.collections/minBy|minBy@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minByOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): kotlin.collections/Map.Entry<#A, #B>? // kotlin.collections/minByOrNull|minByOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOf(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C // kotlin.collections/minOf|minOf@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Comparable<#C>> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C>): #C? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Comparable<0:2>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (#A).kotlin/let(kotlin/Function1<#A, #B>): #B // kotlin/let|let@0:0(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (#A).kotlin/run(kotlin/Function1<#A, #B>): #B // kotlin/run|run@0:0(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (#A).kotlin/runCatching(kotlin/Function1<#A, #B>): kotlin/Result<#B> // kotlin/runCatching|runCatching@0:0(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/associateBy(kotlin/Function1<#A, #B>): kotlin.collections/Map<#B, #A> // kotlin.collections/associateBy|associateBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/associateWith(kotlin/Function1<#A, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateWith|associateWith@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/distinctBy(kotlin/Function1<#A, #B>): kotlin.collections/List<#A> // kotlin.collections/distinctBy|distinctBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMap(kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMap|flatMap@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMap(kotlin/Function1<#A, kotlin.sequences/Sequence<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMap|flatMap@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, #A, kotlin.collections/Iterable<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.collections.Iterable<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, #A, kotlin.sequences/Sequence<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.collections.Iterable<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/fold(#B, kotlin/Function2<#B, #A, #B>): #B // kotlin.collections/fold|fold@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/foldIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): #B // kotlin.collections/foldIndexed|foldIndexed@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/groupBy(kotlin/Function1<#A, #B>): kotlin.collections/Map<#B, kotlin.collections/List<#A>> // kotlin.collections/groupBy|groupBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/groupingBy(crossinline kotlin/Function1<#A, #B>): kotlin.collections/Grouping<#A, #B> // kotlin.collections/groupingBy|groupingBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/map(kotlin/Function1<#A, #B>): kotlin.collections/List<#B> // kotlin.collections/map|map@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/mapIndexed|mapIndexed@kotlin.collections.Iterable<0:0>(kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOfWith(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B // kotlin.collections/maxOfWith|maxOfWith@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minOfWith(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B // kotlin.collections/minOfWith|minOfWith@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.collections.Iterable<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/runningFold(#B, kotlin/Function2<#B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/runningFold|runningFold@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/runningFoldIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/scan(#B, kotlin/Function2<#B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/scan|scan@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/scanIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/scanIndexed|scanIndexed@kotlin.collections.Iterable<0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/zipWithNext(kotlin/Function2<#A, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zipWithNext|zipWithNext@kotlin.collections.Iterable<0:0>(kotlin.Function2<0:0,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/foldRight(#B, kotlin/Function2<#A, #B, #B>): #B // kotlin.collections/foldRight|foldRight@kotlin.collections.List<0:0>(0:1;kotlin.Function2<0:0,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/foldRightIndexed(#B, kotlin/Function3<kotlin/Int, #A, #B, #B>): #B // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.collections.List<0:0>(0:1;kotlin.Function3<kotlin.Int,0:0,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map.Entry<#A, #B>).kotlin.collections/component1(): #A // kotlin.collections/component1|component1@kotlin.collections.Map.Entry<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map.Entry<#A, #B>).kotlin.collections/component2(): #B // kotlin.collections/component2|component2@kotlin.collections.Map.Entry<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map.Entry<#A, #B>).kotlin.collections/toPair(): kotlin/Pair<#A, #B> // kotlin.collections/toPair|toPair@kotlin.collections.Map.Entry<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlin.collections/containsValue(#B): kotlin/Boolean // kotlin.collections/containsValue|containsValue@kotlin.collections.Map<0:0,0:1>(0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlin.collections/getOrElse(#A, kotlin/Function0<#B>): #B // kotlin.collections/getOrElse|getOrElse@kotlin.collections.Map<0:0,0:1>(0:0;kotlin.Function0<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>?).kotlin.collections/orEmpty(): kotlin.collections/Map<#A, #B> // kotlin.collections/orEmpty|orEmpty@kotlin.collections.Map<0:0,0:1>?(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/all(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/any(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/asIterable(): kotlin.collections/Iterable<kotlin.collections/Map.Entry<#A, #B>> // kotlin.collections/asIterable|asIterable@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/contains(#A): kotlin/Boolean // kotlin.collections/contains|contains@kotlin.collections.Map<out|0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/count(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/filter(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): kotlin.collections/Map<#A, #B> // kotlin.collections/filter|filter@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/filterKeys(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/Map<#A, #B> // kotlin.collections/filterKeys|filterKeys@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/filterNot(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): kotlin.collections/Map<#A, #B> // kotlin.collections/filterNot|filterNot@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/filterValues(kotlin/Function1<#B, kotlin/Boolean>): kotlin.collections/Map<#A, #B> // kotlin.collections/filterValues|filterValues@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<0:1,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/forEach(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/get(#A): #B? // kotlin.collections/get|get@kotlin.collections.Map<out|0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/iterator(): kotlin.collections/Iterator<kotlin.collections/Map.Entry<#A, #B>> // kotlin.collections/iterator|iterator@kotlin.collections.Map<out|0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOf(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Double>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOf(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Float>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Double>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Float>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxWith(kotlin/Comparator<in kotlin.collections/Map.Entry<#A, #B>>): kotlin.collections/Map.Entry<#A, #B> // kotlin.collections/maxWith|maxWith@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|kotlin.collections.Map.Entry<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/maxWithOrNull(kotlin/Comparator<in kotlin.collections/Map.Entry<#A, #B>>): kotlin.collections/Map.Entry<#A, #B>? // kotlin.collections/maxWithOrNull|maxWithOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|kotlin.collections.Map.Entry<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOf(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Double>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOf(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Float>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Double>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Float>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minWith(kotlin/Comparator<in kotlin.collections/Map.Entry<#A, #B>>): kotlin.collections/Map.Entry<#A, #B> // kotlin.collections/minWith|minWith@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|kotlin.collections.Map.Entry<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/minWithOrNull(kotlin/Comparator<in kotlin.collections/Map.Entry<#A, #B>>): kotlin.collections/Map.Entry<#A, #B>? // kotlin.collections/minWithOrNull|minWithOrNull@kotlin.collections.Map<out|0:0,0:1>(kotlin.Comparator<in|kotlin.collections.Map.Entry<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>).kotlin.collections/none(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.collections.Map<out|0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<out #A, #B>?).kotlin.collections/isNullOrEmpty(): kotlin/Boolean // kotlin.collections/isNullOrEmpty|isNullOrEmpty@kotlin.collections.Map<out|0:0,0:1>?(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/getOrPut(#A, kotlin/Function0<#B>): #B // kotlin.collections/getOrPut|getOrPut@kotlin.collections.MutableMap<0:0,0:1>(0:0;kotlin.Function0<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/iterator(): kotlin.collections/MutableIterator<kotlin.collections/MutableMap.MutableEntry<#A, #B>> // kotlin.collections/iterator|iterator@kotlin.collections.MutableMap<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/minusAssign(#A) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableMap<0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/minusAssign(kotlin.collections/Iterable<#A>) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableMap<0:0,0:1>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/minusAssign(kotlin.sequences/Sequence<#A>) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableMap<0:0,0:1>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/minusAssign(kotlin/Array<out #A>) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableMap<0:0,0:1>(kotlin.Array<out|0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<#A, #B>).kotlin.collections/set(#A, #B) // kotlin.collections/set|set@kotlin.collections.MutableMap<0:0,0:1>(0:0;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/plusAssign(kotlin.collections/Iterable<kotlin/Pair<#A, #B>>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/plusAssign(kotlin.collections/Map<#A, #B>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.collections.Map<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/plusAssign(kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/plusAssign(kotlin/Array<out kotlin/Pair<#A, #B>>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.Array<out|kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<in #A, in #B>).kotlin.collections/plusAssign(kotlin/Pair<#A, #B>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableMap<in|0:0,in|0:1>(kotlin.Pair<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/MutableMap<out #A, #B>).kotlin.collections/remove(#A): #B? // kotlin.collections/remove|remove@kotlin.collections.MutableMap<out|0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<#A, #B>).kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturn(#A, kotlin.coroutines/Continuation<#B>): kotlin/Any? // kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturn|startCoroutineUninterceptedOrReturn@kotlin.coroutines.SuspendFunction1<0:0,0:1>(0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.reflect/KMutableProperty1<#A, #B>).kotlin/setValue(#A, kotlin.reflect/KProperty<*>, #B) // kotlin/setValue|setValue@kotlin.reflect.KMutableProperty1<0:0,0:1>(0:0;kotlin.reflect.KProperty<*>;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.reflect/KProperty1<#A, #B>).kotlin/getValue(#A, kotlin.reflect/KProperty<*>): #B // kotlin/getValue|getValue@kotlin.reflect.KProperty1<0:0,0:1>(0:0;kotlin.reflect.KProperty<*>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associateBy(kotlin/Function1<#A, #B>): kotlin.collections/Map<#B, #A> // kotlin.sequences/associateBy|associateBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/associateWith(kotlin/Function1<#A, #B>): kotlin.collections/Map<#A, #B> // kotlin.sequences/associateWith|associateWith@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/fold(#B, kotlin/Function2<#B, #A, #B>): #B // kotlin.sequences/fold|fold@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/foldIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): #B // kotlin.sequences/foldIndexed|foldIndexed@kotlin.sequences.Sequence<0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/groupBy(kotlin/Function1<#A, #B>): kotlin.collections/Map<#B, kotlin.collections/List<#A>> // kotlin.sequences/groupBy|groupBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/groupingBy(crossinline kotlin/Function1<#A, #B>): kotlin.collections/Grouping<#A, #B> // kotlin.sequences/groupingBy|groupingBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOfWith(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B // kotlin.sequences/maxOfWith|maxOfWith@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOfWithOrNull(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B? // kotlin.sequences/maxOfWithOrNull|maxOfWithOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOfWith(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B // kotlin.sequences/minOfWith|minOfWith@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOfWithOrNull(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B? // kotlin.sequences/minOfWithOrNull|minOfWithOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/associateBy(kotlin/Function1<#A, #B>): kotlin.collections/Map<#B, #A> // kotlin.collections/associateBy|associateBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/associateWith(kotlin/Function1<#A, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateWith|associateWith@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/distinctBy(kotlin/Function1<#A, #B>): kotlin.collections/List<#A> // kotlin.collections/distinctBy|distinctBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/flatMap(kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMap|flatMap@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/flatMap(kotlin/Function1<#A, kotlin.sequences/Sequence<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMap|flatMap@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, #A, kotlin.collections/Iterable<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.Array<out|0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, #A, kotlin.sequences/Sequence<#B>>): kotlin.collections/List<#B> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.Array<out|0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/fold(#B, kotlin/Function2<#B, #A, #B>): #B // kotlin.collections/fold|fold@kotlin.Array<out|0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/foldIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): #B // kotlin.collections/foldIndexed|foldIndexed@kotlin.Array<out|0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/foldRight(#B, kotlin/Function2<#A, #B, #B>): #B // kotlin.collections/foldRight|foldRight@kotlin.Array<out|0:0>(0:1;kotlin.Function2<0:0,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/foldRightIndexed(#B, kotlin/Function3<kotlin/Int, #A, #B, #B>): #B // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.Array<out|0:0>(0:1;kotlin.Function3<kotlin.Int,0:0,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/groupBy(kotlin/Function1<#A, #B>): kotlin.collections/Map<#B, kotlin.collections/List<#A>> // kotlin.collections/groupBy|groupBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/groupingBy(crossinline kotlin/Function1<#A, #B>): kotlin.collections/Grouping<#A, #B> // kotlin.collections/groupingBy|groupingBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/map(kotlin/Function1<#A, #B>): kotlin.collections/List<#B> // kotlin.collections/map|map@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/mapIndexed|mapIndexed@kotlin.Array<out|0:0>(kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxOfWith(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B // kotlin.collections/maxOfWith|maxOfWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minOfWith(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B // kotlin.collections/minOfWith|minOfWith@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): #B? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.Array<out|0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/runningFold(#B, kotlin/Function2<#B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/runningFold|runningFold@kotlin.Array<out|0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/runningFoldIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.Array<out|0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/scan(#B, kotlin/Function2<#B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/scan|scan@kotlin.Array<out|0:0>(0:1;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/scanIndexed(#B, kotlin/Function3<kotlin/Int, #B, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/scanIndexed|scanIndexed@kotlin.Array<out|0:0>(0:1;kotlin.Function3<kotlin.Int,0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/associate(kotlin/Function1<kotlin/Boolean, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Boolean, #A>, kotlin/Function1<kotlin/Boolean, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>;kotlin.Function1<kotlin.Boolean,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Boolean, #A>, kotlin/Function1<kotlin/Boolean, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>;kotlin.Function1<kotlin.Boolean,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Boolean, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.BooleanArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Boolean,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Boolean, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.BooleanArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Boolean,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/associate(kotlin/Function1<kotlin/Byte, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Byte, #A>, kotlin/Function1<kotlin/Byte, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>;kotlin.Function1<kotlin.Byte,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Byte, #A>, kotlin/Function1<kotlin/Byte, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>;kotlin.Function1<kotlin.Byte,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Byte, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.ByteArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Byte,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Byte, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.ByteArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Byte,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharArray).kotlin.collections/associate(kotlin/Function1<kotlin/Char, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Char, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.CharArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Char,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Char, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.CharArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Char,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharSequence).kotlin.text/associate(kotlin/Function1<kotlin/Char, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.text/associate|associate@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharSequence).kotlin.text/associateBy(kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): kotlin.collections/Map<#A, #B> // kotlin.text/associateBy|associateBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/CharSequence).kotlin.text/groupBy(kotlin/Function1<kotlin/Char, #A>, kotlin/Function1<kotlin/Char, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.text/groupBy|groupBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>;kotlin.Function1<kotlin.Char,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/thenBy(kotlin/Comparator<in #B>, crossinline kotlin/Function1<#A, #B>): kotlin/Comparator<#A> // kotlin.comparisons/thenBy|thenBy@kotlin.Comparator<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/thenByDescending(kotlin/Comparator<in #B>, crossinline kotlin/Function1<#A, #B>): kotlin/Comparator<#A> // kotlin.comparisons/thenByDescending|thenByDescending@kotlin.Comparator<0:0>(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/associate(kotlin/Function1<kotlin/Double, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Double, #A>, kotlin/Function1<kotlin/Double, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>;kotlin.Function1<kotlin.Double,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Double, #A>, kotlin/Function1<kotlin/Double, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>;kotlin.Function1<kotlin.Double,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Double, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.DoubleArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Double,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Double, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.DoubleArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Double,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/associate(kotlin/Function1<kotlin/Float, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Float, #A>, kotlin/Function1<kotlin/Float, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>;kotlin.Function1<kotlin.Float,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Float, #A>, kotlin/Function1<kotlin/Float, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>;kotlin.Function1<kotlin.Float,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Float, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.FloatArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Float,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Float, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.FloatArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Float,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/IntArray).kotlin.collections/associate(kotlin/Function1<kotlin/Int, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/IntArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Int, #A>, kotlin/Function1<kotlin/Int, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>;kotlin.Function1<kotlin.Int,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/IntArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Int, #A>, kotlin/Function1<kotlin/Int, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>;kotlin.Function1<kotlin.Int,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/IntArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Int, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.IntArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/IntArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Int, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.IntArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/LongArray).kotlin.collections/associate(kotlin/Function1<kotlin/Long, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/LongArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Long, #A>, kotlin/Function1<kotlin/Long, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>;kotlin.Function1<kotlin.Long,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/LongArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Long, #A>, kotlin/Function1<kotlin/Long, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>;kotlin.Function1<kotlin.Long,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/LongArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Long, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.LongArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Long,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/LongArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Long, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.LongArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Long,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Result<#B>).kotlin/fold(kotlin/Function1<#B, #A>, kotlin/Function1<kotlin/Throwable, #A>): #A // kotlin/fold|fold@kotlin.Result<0:1>(kotlin.Function1<0:1,0:0>;kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Result<#B>).kotlin/map(kotlin/Function1<#B, #A>): kotlin/Result<#A> // kotlin/map|map@kotlin.Result<0:1>(kotlin.Function1<0:1,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Result<#B>).kotlin/mapCatching(kotlin/Function1<#B, #A>): kotlin/Result<#A> // kotlin/mapCatching|mapCatching@kotlin.Result<0:1>(kotlin.Function1<0:1,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/associate(kotlin/Function1<kotlin/Short, kotlin/Pair<#A, #B>>): kotlin.collections/Map<#A, #B> // kotlin.collections/associate|associate@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Short, #A>, kotlin/Function1<kotlin/Short, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/associateBy|associateBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>;kotlin.Function1<kotlin.Short,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Short, #A>, kotlin/Function1<kotlin/Short, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>;kotlin.Function1<kotlin.Short,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/Short, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.ShortArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.Short,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/Short, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.ShortArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.Short,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/UByte, #A>, kotlin/Function1<kotlin/UByte, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>;kotlin.Function1<kotlin.UByte,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/UByte, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.UByteArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.UByte,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/UByte, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.UByteArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.UByte,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/UInt, #A>, kotlin/Function1<kotlin/UInt, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>;kotlin.Function1<kotlin.UInt,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/UInt, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.UIntArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.UInt,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/UInt, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.UIntArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.UInt,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/ULong, #A>, kotlin/Function1<kotlin/ULong, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>;kotlin.Function1<kotlin.ULong,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/ULong, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.ULongArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.ULong,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/ULong, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.ULongArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.ULong,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/UShort, #A>, kotlin/Function1<kotlin/UShort, #B>): kotlin.collections/Map<#A, kotlin.collections/List<#B>> // kotlin.collections/groupBy|groupBy@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>;kotlin.Function1<kotlin.UShort,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/zip(kotlin.collections/Iterable<#A>, kotlin/Function2<kotlin/UShort, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.UShortArray(kotlin.collections.Iterable<0:0>;kotlin.Function2<kotlin.UShort,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/zip(kotlin/Array<out #A>, kotlin/Function2<kotlin/UShort, #A, #B>): kotlin.collections/List<#B> // kotlin.collections/zip|zip@kotlin.UShortArray(kotlin.Array<out|0:0>;kotlin.Function2<kotlin.UShort,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/buildMap(kotlin/Function1<kotlin.collections/MutableMap<#A, #B>, kotlin/Unit>): kotlin.collections/Map<#A, #B> // kotlin.collections/buildMap|buildMap(kotlin.Function1<kotlin.collections.MutableMap<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/buildMap(kotlin/Int, kotlin/Function1<kotlin.collections/MutableMap<#A, #B>, kotlin/Unit>): kotlin.collections/Map<#A, #B> // kotlin.collections/buildMap|buildMap(kotlin.Int;kotlin.Function1<kotlin.collections.MutableMap<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/buildMapInternal(kotlin/Function1<kotlin.collections/MutableMap<#A, #B>, kotlin/Unit>): kotlin.collections/Map<#A, #B> // kotlin.collections/buildMapInternal|buildMapInternal(kotlin.Function1<kotlin.collections.MutableMap<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/buildMapInternal(kotlin/Int, kotlin/Function1<kotlin.collections/MutableMap<#A, #B>, kotlin/Unit>): kotlin.collections/Map<#A, #B> // kotlin.collections/buildMapInternal|buildMapInternal(kotlin.Int;kotlin.Function1<kotlin.collections.MutableMap<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/hashMapOf(): kotlin.collections/HashMap<#A, #B> // kotlin.collections/hashMapOf|hashMapOf(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/mapOf(): kotlin.collections/Map<#A, #B> // kotlin.collections/mapOf|mapOf(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/mutableMapOf(): kotlin.collections/MutableMap<#A, #B> // kotlin.collections/mutableMapOf|mutableMapOf(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.comparisons/compareBy(kotlin/Comparator<in #B>, crossinline kotlin/Function1<#A, #B>): kotlin/Comparator<#A> // kotlin.comparisons/compareBy|compareBy(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.comparisons/compareByDescending(kotlin/Comparator<in #B>, crossinline kotlin/Function1<#A, #B>): kotlin/Comparator<#A> // kotlin.comparisons/compareByDescending|compareByDescending(kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.comparisons/compareValuesBy(#A, #A, kotlin/Comparator<in #B>, kotlin/Function1<#A, #B>): kotlin/Int // kotlin.comparisons/compareValuesBy|compareValuesBy(0:0;0:0;kotlin.Comparator<in|0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin/with(#A, kotlin/Function1<#A, #B>): #B // kotlin/with|with(0:0;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/maxBy(kotlin/Function1<#A, #B>): #A // kotlin.collections/maxBy|maxBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/maxByOrNull(kotlin/Function1<#A, #B>): #A? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOf(kotlin/Function1<#A, #B>): #B // kotlin.collections/maxOf|maxOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOfOrNull(kotlin/Function1<#A, #B>): #B? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/minBy(kotlin/Function1<#A, #B>): #A // kotlin.collections/minBy|minBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/minByOrNull(kotlin/Function1<#A, #B>): #A? // kotlin.collections/minByOrNull|minByOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/minOf(kotlin/Function1<#A, #B>): #B // kotlin.collections/minOf|minOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/minOfOrNull(kotlin/Function1<#A, #B>): #B? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/sortedBy(crossinline kotlin/Function1<#A, #B?>): kotlin.collections/List<#A> // kotlin.collections/sortedBy|sortedBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/Iterable<#A>).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<#A, #B?>): kotlin.collections/List<#A> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/List<#A>).kotlin.collections/binarySearchBy(#B?, kotlin/Int = ..., kotlin/Int = ..., crossinline kotlin/Function1<#A, #B?>): kotlin/Int // kotlin.collections/binarySearchBy|binarySearchBy@kotlin.collections.List<0:0>(0:1?;kotlin.Int;kotlin.Int;kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/MutableList<#A>).kotlin.collections/sortBy(crossinline kotlin/Function1<#A, #B?>) // kotlin.collections/sortBy|sortBy@kotlin.collections.MutableList<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.collections/MutableList<#A>).kotlin.collections/sortByDescending(crossinline kotlin/Function1<#A, #B?>) // kotlin.collections/sortByDescending|sortByDescending@kotlin.collections.MutableList<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxBy(kotlin/Function1<#A, #B>): #A // kotlin.sequences/maxBy|maxBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxByOrNull(kotlin/Function1<#A, #B>): #A? // kotlin.sequences/maxByOrNull|maxByOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOf(kotlin/Function1<#A, #B>): #B // kotlin.sequences/maxOf|maxOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOfOrNull(kotlin/Function1<#A, #B>): #B? // kotlin.sequences/maxOfOrNull|maxOfOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minBy(kotlin/Function1<#A, #B>): #A // kotlin.sequences/minBy|minBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minByOrNull(kotlin/Function1<#A, #B>): #A? // kotlin.sequences/minByOrNull|minByOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOf(kotlin/Function1<#A, #B>): #B // kotlin.sequences/minOf|minOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOfOrNull(kotlin/Function1<#A, #B>): #B? // kotlin.sequences/minOfOrNull|minOfOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sortedBy(crossinline kotlin/Function1<#A, #B?>): kotlin.sequences/Sequence<#A> // kotlin.sequences/sortedBy|sortedBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sortedByDescending(crossinline kotlin/Function1<#A, #B?>): kotlin.sequences/Sequence<#A> // kotlin.sequences/sortedByDescending|sortedByDescending@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/maxBy(kotlin/Function1<#A, #B>): #A // kotlin.collections/maxBy|maxBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/maxByOrNull(kotlin/Function1<#A, #B>): #A? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/maxOf(kotlin/Function1<#A, #B>): #B // kotlin.collections/maxOf|maxOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/maxOfOrNull(kotlin/Function1<#A, #B>): #B? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/minBy(kotlin/Function1<#A, #B>): #A // kotlin.collections/minBy|minBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/minByOrNull(kotlin/Function1<#A, #B>): #A? // kotlin.collections/minByOrNull|minByOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/minOf(kotlin/Function1<#A, #B>): #B // kotlin.collections/minOf|minOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/minOfOrNull(kotlin/Function1<#A, #B>): #B? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/sortBy(crossinline kotlin/Function1<#A, #B?>) // kotlin.collections/sortBy|sortBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/sortByDescending(crossinline kotlin/Function1<#A, #B?>) // kotlin.collections/sortByDescending|sortByDescending@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/sortedBy(crossinline kotlin/Function1<#A, #B?>): kotlin.collections/List<#A> // kotlin.collections/sortedBy|sortedBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (kotlin/Array<out #A>).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<#A, #B?>): kotlin.collections/List<#A> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.Array<out|0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?> (#A).kotlin/also(kotlin/Function1<#A, kotlin/Unit>): #A // kotlin/also|also@0:0(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (#A).kotlin/apply(kotlin/Function1<#A, kotlin/Unit>): #A // kotlin/apply|apply@0:0(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (#A).kotlin/takeIf(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin/takeIf|takeIf@0:0(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (#A).kotlin/takeUnless(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin/takeUnless|takeUnless@0:0(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/containsAll|containsAll@kotlin.collections.Collection<0:0>(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.collections.Collection<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.collections.Collection<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/plusElement(#A): kotlin.collections/List<#A> // kotlin.collections/plusElement|plusElement@kotlin.collections.Collection<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/random(): #A // kotlin.collections/random|random@kotlin.collections.Collection<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/randomOrNull(): #A? // kotlin.collections/randomOrNull|randomOrNull@kotlin.collections.Collection<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>?).kotlin.collections/isNullOrEmpty(): kotlin/Boolean // kotlin.collections/isNullOrEmpty|isNullOrEmpty@kotlin.collections.Collection<0:0>?(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>?).kotlin.collections/orEmpty(): kotlin.collections/Collection<#A> // kotlin.collections/orEmpty|orEmpty@kotlin.collections.Collection<0:0>?(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/all(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/any(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/asIterable(): kotlin.collections/Iterable<#A> // kotlin.collections/asIterable|asIterable@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/count(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/dropWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/dropWhile|dropWhile@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/filter(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/filter|filter@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/filterIndexed|filterIndexed@kotlin.collections.Iterable<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/filterNot(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/filterNot|filterNot@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/find(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/find|find@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/findLast(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/findLast|findLast@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/first(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.collections/first|first@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/firstOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/firstOrNull|firstOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/forEach(kotlin/Function1<#A, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.collections.Iterable<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/indexOfFirst(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/indexOfLast(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/last(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.collections/last|last@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/lastOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/lastOrNull|lastOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOf(kotlin/Function1<#A, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOfOrNull(kotlin/Function1<#A, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/maxOfOrNull(kotlin/Function1<#A, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minOf(kotlin/Function1<#A, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minOfOrNull(kotlin/Function1<#A, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minOfOrNull(kotlin/Function1<#A, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/minusElement(#A): kotlin.collections/List<#A> // kotlin.collections/minusElement|minusElement@kotlin.collections.Iterable<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/none(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/partition(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#A>> // kotlin.collections/partition|partition@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/plusElement(#A): kotlin.collections/List<#A> // kotlin.collections/plusElement|plusElement@kotlin.collections.Iterable<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/single(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.collections/single|single@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/singleOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/singleOrNull|singleOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sumBy(kotlin/Function1<#A, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sumByDouble(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Long>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.UInt>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.ULong>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlin.collections/takeWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/takeWhile|takeWhile@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterator<#A>).kotlin.collections/forEach(kotlin/Function1<#A, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.collections.Iterator<0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterator<#A>).kotlin.collections/iterator(): kotlin.collections/Iterator<#A> // kotlin.collections/iterator|iterator@kotlin.collections.Iterator<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/component1(): #A // kotlin.collections/component1|component1@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/component2(): #A // kotlin.collections/component2|component2@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/component3(): #A // kotlin.collections/component3|component3@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/component4(): #A // kotlin.collections/component4|component4@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/component5(): #A // kotlin.collections/component5|component5@kotlin.collections.List<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/dropLastWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.collections.List<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/elementAt(kotlin/Int): #A // kotlin.collections/elementAt|elementAt@kotlin.collections.List<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.collections.List<0:0>(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/elementAtOrNull(kotlin/Int): #A? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.collections.List<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/findLast(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/findLast|findLast@kotlin.collections.List<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/getOrElse|getOrElse@kotlin.collections.List<0:0>(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/indexOfFirst(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.collections.List<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/indexOfLast(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.collections.List<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/last(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.collections/last|last@kotlin.collections.List<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/lastOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/lastOrNull|lastOrNull@kotlin.collections.List<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>).kotlin.collections/takeLastWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.collections.List<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/List<#A>?).kotlin.collections/orEmpty(): kotlin.collections/List<#A> // kotlin.collections/orEmpty|orEmpty@kotlin.collections.List<0:0>?(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Map<out #A, *>).kotlin.collections/containsKey(#A): kotlin/Boolean // kotlin.collections/containsKey|containsKey@kotlin.collections.Map<out|0:0,*>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/minusAssign(#A) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableCollection<in|0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/minusAssign(kotlin.collections/Iterable<#A>) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableCollection<in|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/minusAssign(kotlin.sequences/Sequence<#A>) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableCollection<in|0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/minusAssign(kotlin/Array<#A>) // kotlin.collections/minusAssign|minusAssign@kotlin.collections.MutableCollection<in|0:0>(kotlin.Array<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/plusAssign(#A) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableCollection<in|0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/plusAssign(kotlin.collections/Iterable<#A>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableCollection<in|0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/plusAssign(kotlin.sequences/Sequence<#A>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableCollection<in|0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<in #A>).kotlin.collections/plusAssign(kotlin/Array<#A>) // kotlin.collections/plusAssign|plusAssign@kotlin.collections.MutableCollection<in|0:0>(kotlin.Array<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<out #A>).kotlin.collections/remove(#A): kotlin/Boolean // kotlin.collections/remove|remove@kotlin.collections.MutableCollection<out|0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<out #A>).kotlin.collections/removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/removeAll|removeAll@kotlin.collections.MutableCollection<out|0:0>(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableCollection<out #A>).kotlin.collections/retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/retainAll|retainAll@kotlin.collections.MutableCollection<out|0:0>(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/remove(kotlin/Int): #A // kotlin.collections/remove|remove@kotlin.collections.MutableList<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/MutableMap<in kotlin/String, in #A>).kotlin.collections/setValue(kotlin/Any?, kotlin.reflect/KProperty<*>, #A) // kotlin.collections/setValue|setValue@kotlin.collections.MutableMap<in|kotlin.String,in|0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>;0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/minusElement(#A): kotlin.collections/Set<#A> // kotlin.collections/minusElement|minusElement@kotlin.collections.Set<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).kotlin.collections/plusElement(#A): kotlin.collections/Set<#A> // kotlin.collections/plusElement|plusElement@kotlin.collections.Set<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>?).kotlin.collections/orEmpty(): kotlin.collections/Set<#A> // kotlin.collections/orEmpty|orEmpty@kotlin.collections.Set<0:0>?(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.coroutines/Continuation<#A>).kotlin.coroutines/resume(#A) // kotlin.coroutines/resume|resume@kotlin.coroutines.Continuation<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.coroutines/Continuation<#A>).kotlin.coroutines/resumeWithException(kotlin/Throwable) // kotlin.coroutines/resumeWithException|resumeWithException@kotlin.coroutines.Continuation<0:0>(kotlin.Throwable){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction0<#A>).kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturn(kotlin.coroutines/Continuation<#A>): kotlin/Any? // kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturn|startCoroutineUninterceptedOrReturn@kotlin.coroutines.SuspendFunction0<0:0>(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.reflect/KMutableProperty0<#A>).kotlin/setValue(kotlin/Any?, kotlin.reflect/KProperty<*>, #A) // kotlin/setValue|setValue@kotlin.reflect.KMutableProperty0<0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>;0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.reflect/KProperty0<#A>).kotlin/getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A // kotlin/getValue|getValue@kotlin.reflect.KProperty0<0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/all(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.sequences/all|all@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/any(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.sequences/any|any@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/asSequence(): kotlin.sequences/Sequence<#A> // kotlin.sequences/asSequence|asSequence@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/count(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.sequences/count|count@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/find(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.sequences/find|find@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/findLast(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.sequences/findLast|findLast@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/first(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.sequences/first|first@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/firstOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.sequences/firstOrNull|firstOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/forEach(kotlin/Function1<#A, kotlin/Unit>) // kotlin.sequences/forEach|forEach@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/forEachIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Unit>) // kotlin.sequences/forEachIndexed|forEachIndexed@kotlin.sequences.Sequence<0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/indexOfFirst(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.sequences/indexOfFirst|indexOfFirst@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/indexOfLast(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.sequences/indexOfLast|indexOfLast@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/last(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.sequences/last|last@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/lastOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.sequences/lastOrNull|lastOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.sequences/maxOf|maxOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOf(kotlin/Function1<#A, kotlin/Float>): kotlin/Float // kotlin.sequences/maxOf|maxOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOfOrNull(kotlin/Function1<#A, kotlin/Double>): kotlin/Double? // kotlin.sequences/maxOfOrNull|maxOfOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/maxOfOrNull(kotlin/Function1<#A, kotlin/Float>): kotlin/Float? // kotlin.sequences/maxOfOrNull|maxOfOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.sequences/minOf|minOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOf(kotlin/Function1<#A, kotlin/Float>): kotlin/Float // kotlin.sequences/minOf|minOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOfOrNull(kotlin/Function1<#A, kotlin/Double>): kotlin/Double? // kotlin.sequences/minOfOrNull|minOfOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minOfOrNull(kotlin/Function1<#A, kotlin/Float>): kotlin/Float? // kotlin.sequences/minOfOrNull|minOfOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/minusElement(#A): kotlin.sequences/Sequence<#A> // kotlin.sequences/minusElement|minusElement@kotlin.sequences.Sequence<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/none(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.sequences/none|none@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/partition(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#A>> // kotlin.sequences/partition|partition@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/plusElement(#A): kotlin.sequences/Sequence<#A> // kotlin.sequences/plusElement|plusElement@kotlin.sequences.Sequence<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/single(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.sequences/single|single@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/singleOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.sequences/singleOrNull|singleOrNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sumBy(kotlin/Function1<#A, kotlin/Int>): kotlin/Int // kotlin.sequences/sumBy|sumBy@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sumByDouble(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.sequences/sumByDouble|sumByDouble@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sumOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.sequences/sumOf|sumOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sumOf(kotlin/Function1<#A, kotlin/Int>): kotlin/Int // kotlin.sequences/sumOf|sumOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sumOf(kotlin/Function1<#A, kotlin/Long>): kotlin/Long // kotlin.sequences/sumOf|sumOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.Long>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sumOf(kotlin/Function1<#A, kotlin/UInt>): kotlin/UInt // kotlin.sequences/sumOf|sumOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.UInt>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlin.sequences/sumOf(kotlin/Function1<#A, kotlin/ULong>): kotlin/ULong // kotlin.sequences/sumOf|sumOf@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.ULong>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>?).kotlin.sequences/orEmpty(): kotlin.sequences/Sequence<#A> // kotlin.sequences/orEmpty|orEmpty@kotlin.sequences.Sequence<0:0>?(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.time/TimeSource).kotlin.time/measureTimedValue(kotlin/Function0<#A>): kotlin.time/TimedValue<#A> // kotlin.time/measureTimedValue|measureTimedValue@kotlin.time.TimeSource(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.time/TimeSource.Monotonic).kotlin.time/measureTimedValue(kotlin/Function0<#A>): kotlin.time/TimedValue<#A> // kotlin.time/measureTimedValue|measureTimedValue@kotlin.time.TimeSource.Monotonic(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/plusElement(#A): kotlin/Array<#A> // kotlin.collections/plusElement|plusElement@kotlin.Array<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/all(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/all|all@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/any(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/any|any@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/component1(): #A // kotlin.collections/component1|component1@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/component2(): #A // kotlin.collections/component2|component2@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/component3(): #A // kotlin.collections/component3|component3@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/component4(): #A // kotlin.collections/component4|component4@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/component5(): #A // kotlin.collections/component5|component5@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/count(): kotlin/Int // kotlin.collections/count|count@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/count(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/count|count@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/dropLastWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/dropLastWhile|dropLastWhile@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/dropWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/dropWhile|dropWhile@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/elementAtOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/elementAtOrElse|elementAtOrElse@kotlin.Array<out|0:0>(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/elementAtOrNull(kotlin/Int): #A? // kotlin.collections/elementAtOrNull|elementAtOrNull@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/filter(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/filter|filter@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/filterIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/filterIndexed|filterIndexed@kotlin.Array<out|0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/filterNot(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/filterNot|filterNot@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/find(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/find|find@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/findLast(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/findLast|findLast@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/first(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.collections/first|first@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/firstOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/firstOrNull|firstOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/forEach(kotlin/Function1<#A, kotlin/Unit>) // kotlin.collections/forEach|forEach@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/forEachIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Unit>) // kotlin.collections/forEachIndexed|forEachIndexed@kotlin.Array<out|0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/getOrElse(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/getOrElse|getOrElse@kotlin.Array<out|0:0>(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/indexOfFirst(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfFirst|indexOfFirst@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/indexOfLast(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Int // kotlin.collections/indexOfLast|indexOfLast@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/isEmpty(): kotlin/Boolean // kotlin.collections/isEmpty|isEmpty@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/isNotEmpty(): kotlin/Boolean // kotlin.collections/isNotEmpty|isNotEmpty@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/last(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.collections/last|last@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/lastOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/lastOrNull|lastOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/maxOf|maxOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxOf(kotlin/Function1<#A, kotlin/Float>): kotlin/Float // kotlin.collections/maxOf|maxOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxOfOrNull(kotlin/Function1<#A, kotlin/Double>): kotlin/Double? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/maxOfOrNull(kotlin/Function1<#A, kotlin/Float>): kotlin/Float? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/minOf|minOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minOf(kotlin/Function1<#A, kotlin/Float>): kotlin/Float // kotlin.collections/minOf|minOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minOfOrNull(kotlin/Function1<#A, kotlin/Double>): kotlin/Double? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/minOfOrNull(kotlin/Function1<#A, kotlin/Float>): kotlin/Float? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Float>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/none(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // kotlin.collections/none|none@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/onEach(kotlin/Function1<#A, kotlin/Unit>): kotlin/Array<out #A> // kotlin.collections/onEach|onEach@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/onEachIndexed(kotlin/Function2<kotlin/Int, #A, kotlin/Unit>): kotlin/Array<out #A> // kotlin.collections/onEachIndexed|onEachIndexed@kotlin.Array<out|0:0>(kotlin.Function2<kotlin.Int,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/partition(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#A>> // kotlin.collections/partition|partition@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/random(): #A // kotlin.collections/random|random@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/randomOrNull(): #A? // kotlin.collections/randomOrNull|randomOrNull@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/single(kotlin/Function1<#A, kotlin/Boolean>): #A // kotlin.collections/single|single@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/singleOrNull(kotlin/Function1<#A, kotlin/Boolean>): #A? // kotlin.collections/singleOrNull|singleOrNull@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sumBy(kotlin/Function1<#A, kotlin/Int>): kotlin/Int // kotlin.collections/sumBy|sumBy@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sumByDouble(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/sumByDouble|sumByDouble@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/Double>): kotlin/Double // kotlin.collections/sumOf|sumOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/Int>): kotlin/Int // kotlin.collections/sumOf|sumOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/Long>): kotlin/Long // kotlin.collections/sumOf|sumOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Long>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/UInt>): kotlin/UInt // kotlin.collections/sumOf|sumOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.UInt>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sumOf(kotlin/Function1<#A, kotlin/ULong>): kotlin/ULong // kotlin.collections/sumOf|sumOf@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.ULong>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/takeLastWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/takeLastWhile|takeLastWhile@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/takeWhile(kotlin/Function1<#A, kotlin/Boolean>): kotlin.collections/List<#A> // kotlin.collections/takeWhile|takeWhile@kotlin.Array<out|0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Boolean, #A>): kotlin.collections/Map<#A, kotlin/Boolean> // kotlin.collections/associateBy|associateBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Boolean, #A>): kotlin.collections/Map<kotlin/Boolean, #A> // kotlin.collections/associateWith|associateWith@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Boolean, #A>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/distinctBy|distinctBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Boolean, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Boolean, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.BooleanArray(kotlin.Function2<kotlin.Int,kotlin.Boolean,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Boolean, #A>): #A // kotlin.collections/fold|fold@kotlin.BooleanArray(0:0;kotlin.Function2<0:0,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Boolean, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.BooleanArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Boolean, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.BooleanArray(0:0;kotlin.Function2<kotlin.Boolean,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Boolean, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.BooleanArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Boolean,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Boolean, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Boolean>> // kotlin.collections/groupBy|groupBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/map(kotlin/Function1<kotlin/Boolean, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Boolean, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.BooleanArray(kotlin.Function2<kotlin.Int,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Boolean, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.BooleanArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Boolean, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.BooleanArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Boolean, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.BooleanArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Boolean, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.BooleanArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Boolean, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.BooleanArray(0:0;kotlin.Function2<0:0,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Boolean, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.BooleanArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Boolean, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.BooleanArray(0:0;kotlin.Function2<0:0,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Boolean, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.BooleanArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/BooleanArray).kotlin.collections/zip(kotlin/BooleanArray, kotlin/Function2<kotlin/Boolean, kotlin/Boolean, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.BooleanArray(kotlin.BooleanArray;kotlin.Function2<kotlin.Boolean,kotlin.Boolean,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Byte, #A>): kotlin.collections/Map<#A, kotlin/Byte> // kotlin.collections/associateBy|associateBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Byte, #A>): kotlin.collections/Map<kotlin/Byte, #A> // kotlin.collections/associateWith|associateWith@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Byte, #A>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/distinctBy|distinctBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Byte, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Byte, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.ByteArray(kotlin.Function2<kotlin.Int,kotlin.Byte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Byte, #A>): #A // kotlin.collections/fold|fold@kotlin.ByteArray(0:0;kotlin.Function2<0:0,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Byte, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.ByteArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Byte, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.ByteArray(0:0;kotlin.Function2<kotlin.Byte,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Byte, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.ByteArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Byte,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Byte, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Byte>> // kotlin.collections/groupBy|groupBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/map(kotlin/Function1<kotlin/Byte, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Byte, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.ByteArray(kotlin.Function2<kotlin.Int,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Byte, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.ByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Byte, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.ByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Byte, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.ByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Byte, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.ByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Byte, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.ByteArray(0:0;kotlin.Function2<0:0,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Byte, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.ByteArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Byte, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.ByteArray(0:0;kotlin.Function2<0:0,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Byte, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.ByteArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ByteArray).kotlin.collections/zip(kotlin/ByteArray, kotlin/Function2<kotlin/Byte, kotlin/Byte, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.ByteArray(kotlin.ByteArray;kotlin.Function2<kotlin.Byte,kotlin.Byte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/Map<#A, kotlin/Char> // kotlin.collections/associateBy|associateBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/Map<kotlin/Char, #A> // kotlin.collections/associateWith|associateWith@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/List<kotlin/Char> // kotlin.collections/distinctBy|distinctBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Char, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.CharArray(kotlin.Function1<kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.CharArray(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Char, #A>): #A // kotlin.collections/fold|fold@kotlin.CharArray(0:0;kotlin.Function2<0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Char, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.CharArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Char, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.CharArray(0:0;kotlin.Function2<kotlin.Char,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Char, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.CharArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Char,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Char>> // kotlin.collections/groupBy|groupBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/map(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.CharArray(kotlin.Function2<kotlin.Int,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.CharArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.CharArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.CharArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.CharArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.CharArray(0:0;kotlin.Function2<0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.CharArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.CharArray(0:0;kotlin.Function2<0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.CharArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharArray).kotlin.collections/zip(kotlin/CharArray, kotlin/Function2<kotlin/Char, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.CharArray(kotlin.CharArray;kotlin.Function2<kotlin.Char,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/associateBy(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/Map<#A, kotlin/Char> // kotlin.text/associateBy|associateBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/associateWith(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/Map<kotlin/Char, #A> // kotlin.text/associateWith|associateWith@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/flatMap(kotlin/Function1<kotlin/Char, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.text/flatMap|flatMap@kotlin.CharSequence(kotlin.Function1<kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.text/flatMapIndexed|flatMapIndexed@kotlin.CharSequence(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/fold(#A, kotlin/Function2<#A, kotlin/Char, #A>): #A // kotlin.text/fold|fold@kotlin.CharSequence(0:0;kotlin.Function2<0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Char, #A>): #A // kotlin.text/foldIndexed|foldIndexed@kotlin.CharSequence(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/foldRight(#A, kotlin/Function2<kotlin/Char, #A, #A>): #A // kotlin.text/foldRight|foldRight@kotlin.CharSequence(0:0;kotlin.Function2<kotlin.Char,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Char, #A, #A>): #A // kotlin.text/foldRightIndexed|foldRightIndexed@kotlin.CharSequence(0:0;kotlin.Function3<kotlin.Int,kotlin.Char,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/groupBy(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Char>> // kotlin.text/groupBy|groupBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/groupingBy(crossinline kotlin/Function1<kotlin/Char, #A>): kotlin.collections/Grouping<kotlin/Char, #A> // kotlin.text/groupingBy|groupingBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/map(kotlin/Function1<kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/map|map@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/mapIndexed|mapIndexed@kotlin.CharSequence(kotlin.Function2<kotlin.Int,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A // kotlin.text/maxOfWith|maxOfWith@kotlin.CharSequence(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.text/maxOfWithOrNull|maxOfWithOrNull@kotlin.CharSequence(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A // kotlin.text/minOfWith|minOfWith@kotlin.CharSequence(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.text/minOfWithOrNull|minOfWithOrNull@kotlin.CharSequence(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/runningFold(#A, kotlin/Function2<#A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/runningFold|runningFold@kotlin.CharSequence(0:0;kotlin.Function2<0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/runningFoldIndexed|runningFoldIndexed@kotlin.CharSequence(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/scan(#A, kotlin/Function2<#A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/scan|scan@kotlin.CharSequence(0:0;kotlin.Function2<0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/scanIndexed|scanIndexed@kotlin.CharSequence(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/zip(kotlin/CharSequence, kotlin/Function2<kotlin/Char, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/zip|zip@kotlin.CharSequence(kotlin.CharSequence;kotlin.Function2<kotlin.Char,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/CharSequence).kotlin.text/zipWithNext(kotlin/Function2<kotlin/Char, kotlin/Char, #A>): kotlin.collections/List<#A> // kotlin.text/zipWithNext|zipWithNext@kotlin.CharSequence(kotlin.Function2<kotlin.Char,kotlin.Char,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Comparable<#A>).kotlin/compareTo(#A): kotlin/Int // kotlin/compareTo|compareTo@kotlin.Comparable<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/thenBy(crossinline kotlin/Function1<#A, kotlin/Comparable<*>?>): kotlin/Comparator<#A> // kotlin.comparisons/thenBy|thenBy@kotlin.Comparator<0:0>(kotlin.Function1<0:0,kotlin.Comparable<*>?>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/thenByDescending(crossinline kotlin/Function1<#A, kotlin/Comparable<*>?>): kotlin/Comparator<#A> // kotlin.comparisons/thenByDescending|thenByDescending@kotlin.Comparator<0:0>(kotlin.Function1<0:0,kotlin.Comparable<*>?>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Comparator<#A>).kotlin.comparisons/thenComparator(crossinline kotlin/Function2<#A, #A, kotlin/Int>): kotlin/Comparator<#A> // kotlin.comparisons/thenComparator|thenComparator@kotlin.Comparator<0:0>(kotlin.Function2<0:0,0:0,kotlin.Int>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Double, #A>): kotlin.collections/Map<#A, kotlin/Double> // kotlin.collections/associateBy|associateBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Double, #A>): kotlin.collections/Map<kotlin/Double, #A> // kotlin.collections/associateWith|associateWith@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Double, #A>): kotlin.collections/List<kotlin/Double> // kotlin.collections/distinctBy|distinctBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Double, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Double, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.DoubleArray(kotlin.Function2<kotlin.Int,kotlin.Double,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Double, #A>): #A // kotlin.collections/fold|fold@kotlin.DoubleArray(0:0;kotlin.Function2<0:0,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Double, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.DoubleArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Double, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.DoubleArray(0:0;kotlin.Function2<kotlin.Double,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Double, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.DoubleArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Double,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Double, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Double>> // kotlin.collections/groupBy|groupBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/map(kotlin/Function1<kotlin/Double, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Double, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.DoubleArray(kotlin.Function2<kotlin.Int,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Double, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.DoubleArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Double, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.DoubleArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Double, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.DoubleArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Double, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.DoubleArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Double, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.DoubleArray(0:0;kotlin.Function2<0:0,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Double, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.DoubleArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Double, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.DoubleArray(0:0;kotlin.Function2<0:0,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Double, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.DoubleArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/DoubleArray).kotlin.collections/zip(kotlin/DoubleArray, kotlin/Function2<kotlin/Double, kotlin/Double, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.DoubleArray(kotlin.DoubleArray;kotlin.Function2<kotlin.Double,kotlin.Double,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Float, #A>): kotlin.collections/Map<#A, kotlin/Float> // kotlin.collections/associateBy|associateBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Float, #A>): kotlin.collections/Map<kotlin/Float, #A> // kotlin.collections/associateWith|associateWith@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Float, #A>): kotlin.collections/List<kotlin/Float> // kotlin.collections/distinctBy|distinctBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Float, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.FloatArray(kotlin.Function1<kotlin.Float,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Float, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.FloatArray(kotlin.Function2<kotlin.Int,kotlin.Float,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Float, #A>): #A // kotlin.collections/fold|fold@kotlin.FloatArray(0:0;kotlin.Function2<0:0,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Float, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.FloatArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Float, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.FloatArray(0:0;kotlin.Function2<kotlin.Float,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Float, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.FloatArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Float,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Float, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Float>> // kotlin.collections/groupBy|groupBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/map(kotlin/Function1<kotlin/Float, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Float, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.FloatArray(kotlin.Function2<kotlin.Int,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Float, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.FloatArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Float, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.FloatArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Float, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.FloatArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Float, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.FloatArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Float, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.FloatArray(0:0;kotlin.Function2<0:0,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Float, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.FloatArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Float, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.FloatArray(0:0;kotlin.Function2<0:0,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Float, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.FloatArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/FloatArray).kotlin.collections/zip(kotlin/FloatArray, kotlin/Function2<kotlin/Float, kotlin/Float, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.FloatArray(kotlin.FloatArray;kotlin.Function2<kotlin.Float,kotlin.Float,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Int, #A>): kotlin.collections/Map<#A, kotlin/Int> // kotlin.collections/associateBy|associateBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Int, #A>): kotlin.collections/Map<kotlin/Int, #A> // kotlin.collections/associateWith|associateWith@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Int, #A>): kotlin.collections/List<kotlin/Int> // kotlin.collections/distinctBy|distinctBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Int, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.IntArray(kotlin.Function1<kotlin.Int,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Int, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Int, #A>): #A // kotlin.collections/fold|fold@kotlin.IntArray(0:0;kotlin.Function2<0:0,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Int, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.IntArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Int, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.IntArray(0:0;kotlin.Function2<kotlin.Int,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Int, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.IntArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Int,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Int, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Int>> // kotlin.collections/groupBy|groupBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/map(kotlin/Function1<kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.IntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Int, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.IntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.IntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Int, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.IntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.IntArray(0:0;kotlin.Function2<0:0,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.IntArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.IntArray(0:0;kotlin.Function2<0:0,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.IntArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/IntArray).kotlin.collections/zip(kotlin/IntArray, kotlin/Function2<kotlin/Int, kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.IntArray(kotlin.IntArray;kotlin.Function2<kotlin.Int,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Lazy<#A>).kotlin/getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A // kotlin/getValue|getValue@kotlin.Lazy<0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Long, #A>): kotlin.collections/Map<#A, kotlin/Long> // kotlin.collections/associateBy|associateBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Long, #A>): kotlin.collections/Map<kotlin/Long, #A> // kotlin.collections/associateWith|associateWith@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Long, #A>): kotlin.collections/List<kotlin/Long> // kotlin.collections/distinctBy|distinctBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Long, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.LongArray(kotlin.Function1<kotlin.Long,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Long, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.LongArray(kotlin.Function2<kotlin.Int,kotlin.Long,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Long, #A>): #A // kotlin.collections/fold|fold@kotlin.LongArray(0:0;kotlin.Function2<0:0,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Long, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.LongArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Long, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.LongArray(0:0;kotlin.Function2<kotlin.Long,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Long, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.LongArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Long,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Long, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Long>> // kotlin.collections/groupBy|groupBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/map(kotlin/Function1<kotlin/Long, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Long, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.LongArray(kotlin.Function2<kotlin.Int,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Long, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.LongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Long, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.LongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Long, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.LongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Long, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.LongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Long, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.LongArray(0:0;kotlin.Function2<0:0,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Long, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.LongArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Long, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.LongArray(0:0;kotlin.Function2<0:0,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Long, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.LongArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/LongArray).kotlin.collections/zip(kotlin/LongArray, kotlin/Function2<kotlin/Long, kotlin/Long, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.LongArray(kotlin.LongArray;kotlin.Function2<kotlin.Long,kotlin.Long,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Result<#A>).kotlin/getOrThrow(): #A // kotlin/getOrThrow|getOrThrow@kotlin.Result<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Result<#A>).kotlin/onFailure(kotlin/Function1<kotlin/Throwable, kotlin/Unit>): kotlin/Result<#A> // kotlin/onFailure|onFailure@kotlin.Result<0:0>(kotlin.Function1<kotlin.Throwable,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Result<#A>).kotlin/onSuccess(kotlin/Function1<#A, kotlin/Unit>): kotlin/Result<#A> // kotlin/onSuccess|onSuccess@kotlin.Result<0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/associateBy(kotlin/Function1<kotlin/Short, #A>): kotlin.collections/Map<#A, kotlin/Short> // kotlin.collections/associateBy|associateBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/Short, #A>): kotlin.collections/Map<kotlin/Short, #A> // kotlin.collections/associateWith|associateWith@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/distinctBy(kotlin/Function1<kotlin/Short, #A>): kotlin.collections/List<kotlin/Short> // kotlin.collections/distinctBy|distinctBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/Short, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.ShortArray(kotlin.Function1<kotlin.Short,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/Short, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.ShortArray(kotlin.Function2<kotlin.Int,kotlin.Short,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/Short, #A>): #A // kotlin.collections/fold|fold@kotlin.ShortArray(0:0;kotlin.Function2<0:0,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Short, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.ShortArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/Short, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.ShortArray(0:0;kotlin.Function2<kotlin.Short,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/Short, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.ShortArray(0:0;kotlin.Function3<kotlin.Int,kotlin.Short,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/Short, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/Short>> // kotlin.collections/groupBy|groupBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/map(kotlin/Function1<kotlin/Short, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/Short, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.ShortArray(kotlin.Function2<kotlin.Int,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Short, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.ShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Short, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.ShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Short, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.ShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/Short, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.ShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/Short, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.ShortArray(0:0;kotlin.Function2<0:0,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Short, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.ShortArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/Short, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.ShortArray(0:0;kotlin.Function2<0:0,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/Short, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.ShortArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ShortArray).kotlin.collections/zip(kotlin/ShortArray, kotlin/Function2<kotlin/Short, kotlin/Short, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.ShortArray(kotlin.ShortArray;kotlin.Function2<kotlin.Short,kotlin.Short,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/UByte, #A>): kotlin.collections/Map<kotlin/UByte, #A> // kotlin.collections/associateWith|associateWith@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/UByte, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/UByte, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.UByteArray(kotlin.Function2<kotlin.Int,kotlin.UByte,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/UByte, #A>): #A // kotlin.collections/fold|fold@kotlin.UByteArray(0:0;kotlin.Function2<0:0,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UByte, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.UByteArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/UByte, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.UByteArray(0:0;kotlin.Function2<kotlin.UByte,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/UByte, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.UByteArray(0:0;kotlin.Function3<kotlin.Int,kotlin.UByte,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/UByte, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/UByte>> // kotlin.collections/groupBy|groupBy@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/map(kotlin/Function1<kotlin/UByte, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/UByte, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.UByteArray(kotlin.Function2<kotlin.Int,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UByte, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.UByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UByte, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.UByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UByte, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.UByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UByte, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.UByteArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/UByte, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.UByteArray(0:0;kotlin.Function2<0:0,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UByte, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.UByteArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/UByte, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.UByteArray(0:0;kotlin.Function2<0:0,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UByte, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.UByteArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UByteArray).kotlin.collections/zip(kotlin/UByteArray, kotlin/Function2<kotlin/UByte, kotlin/UByte, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.UByteArray(kotlin.UByteArray;kotlin.Function2<kotlin.UByte,kotlin.UByte,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/UInt, #A>): kotlin.collections/Map<kotlin/UInt, #A> // kotlin.collections/associateWith|associateWith@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/UInt, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/UInt, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.UIntArray(kotlin.Function2<kotlin.Int,kotlin.UInt,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/UInt, #A>): #A // kotlin.collections/fold|fold@kotlin.UIntArray(0:0;kotlin.Function2<0:0,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UInt, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.UIntArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/UInt, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.UIntArray(0:0;kotlin.Function2<kotlin.UInt,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/UInt, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.UIntArray(0:0;kotlin.Function3<kotlin.Int,kotlin.UInt,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/UInt, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/UInt>> // kotlin.collections/groupBy|groupBy@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/map(kotlin/Function1<kotlin/UInt, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/UInt, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.UIntArray(kotlin.Function2<kotlin.Int,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UInt, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.UIntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UInt, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.UIntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UInt, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.UIntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UInt, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.UIntArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/UInt, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.UIntArray(0:0;kotlin.Function2<0:0,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UInt, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.UIntArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/UInt, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.UIntArray(0:0;kotlin.Function2<0:0,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UInt, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.UIntArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UIntArray).kotlin.collections/zip(kotlin/UIntArray, kotlin/Function2<kotlin/UInt, kotlin/UInt, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.UIntArray(kotlin.UIntArray;kotlin.Function2<kotlin.UInt,kotlin.UInt,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/ULong, #A>): kotlin.collections/Map<kotlin/ULong, #A> // kotlin.collections/associateWith|associateWith@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/ULong, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/ULong, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.ULongArray(kotlin.Function2<kotlin.Int,kotlin.ULong,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/ULong, #A>): #A // kotlin.collections/fold|fold@kotlin.ULongArray(0:0;kotlin.Function2<0:0,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/ULong, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.ULongArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/ULong, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.ULongArray(0:0;kotlin.Function2<kotlin.ULong,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/ULong, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.ULongArray(0:0;kotlin.Function3<kotlin.Int,kotlin.ULong,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/ULong, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/ULong>> // kotlin.collections/groupBy|groupBy@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/map(kotlin/Function1<kotlin/ULong, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/ULong, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.ULongArray(kotlin.Function2<kotlin.Int,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/ULong, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.ULongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/ULong, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.ULongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/ULong, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.ULongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/ULong, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.ULongArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/ULong, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.ULongArray(0:0;kotlin.Function2<0:0,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/ULong, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.ULongArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/ULong, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.ULongArray(0:0;kotlin.Function2<0:0,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/ULong, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.ULongArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/ULongArray).kotlin.collections/zip(kotlin/ULongArray, kotlin/Function2<kotlin/ULong, kotlin/ULong, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.ULongArray(kotlin.ULongArray;kotlin.Function2<kotlin.ULong,kotlin.ULong,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/associateWith(kotlin/Function1<kotlin/UShort, #A>): kotlin.collections/Map<kotlin/UShort, #A> // kotlin.collections/associateWith|associateWith@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/flatMap(kotlin/Function1<kotlin/UShort, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMap|flatMap@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/flatMapIndexed(kotlin/Function2<kotlin/Int, kotlin/UShort, kotlin.collections/Iterable<#A>>): kotlin.collections/List<#A> // kotlin.collections/flatMapIndexed|flatMapIndexed@kotlin.UShortArray(kotlin.Function2<kotlin.Int,kotlin.UShort,kotlin.collections.Iterable<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/fold(#A, kotlin/Function2<#A, kotlin/UShort, #A>): #A // kotlin.collections/fold|fold@kotlin.UShortArray(0:0;kotlin.Function2<0:0,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/foldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UShort, #A>): #A // kotlin.collections/foldIndexed|foldIndexed@kotlin.UShortArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/foldRight(#A, kotlin/Function2<kotlin/UShort, #A, #A>): #A // kotlin.collections/foldRight|foldRight@kotlin.UShortArray(0:0;kotlin.Function2<kotlin.UShort,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/foldRightIndexed(#A, kotlin/Function3<kotlin/Int, kotlin/UShort, #A, #A>): #A // kotlin.collections/foldRightIndexed|foldRightIndexed@kotlin.UShortArray(0:0;kotlin.Function3<kotlin.Int,kotlin.UShort,0:0,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/groupBy(kotlin/Function1<kotlin/UShort, #A>): kotlin.collections/Map<#A, kotlin.collections/List<kotlin/UShort>> // kotlin.collections/groupBy|groupBy@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/map(kotlin/Function1<kotlin/UShort, #A>): kotlin.collections/List<#A> // kotlin.collections/map|map@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/mapIndexed(kotlin/Function2<kotlin/Int, kotlin/UShort, #A>): kotlin.collections/List<#A> // kotlin.collections/mapIndexed|mapIndexed@kotlin.UShortArray(kotlin.Function2<kotlin.Int,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/maxOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UShort, #A>): #A // kotlin.collections/maxOfWith|maxOfWith@kotlin.UShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/maxOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UShort, #A>): #A? // kotlin.collections/maxOfWithOrNull|maxOfWithOrNull@kotlin.UShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/minOfWith(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UShort, #A>): #A // kotlin.collections/minOfWith|minOfWith@kotlin.UShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/minOfWithOrNull(kotlin/Comparator<in #A>, kotlin/Function1<kotlin/UShort, #A>): #A? // kotlin.collections/minOfWithOrNull|minOfWithOrNull@kotlin.UShortArray(kotlin.Comparator<in|0:0>;kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/runningFold(#A, kotlin/Function2<#A, kotlin/UShort, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFold|runningFold@kotlin.UShortArray(0:0;kotlin.Function2<0:0,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/runningFoldIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UShort, #A>): kotlin.collections/List<#A> // kotlin.collections/runningFoldIndexed|runningFoldIndexed@kotlin.UShortArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/scan(#A, kotlin/Function2<#A, kotlin/UShort, #A>): kotlin.collections/List<#A> // kotlin.collections/scan|scan@kotlin.UShortArray(0:0;kotlin.Function2<0:0,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/scanIndexed(#A, kotlin/Function3<kotlin/Int, #A, kotlin/UShort, #A>): kotlin.collections/List<#A> // kotlin.collections/scanIndexed|scanIndexed@kotlin.UShortArray(0:0;kotlin.Function3<kotlin.Int,0:0,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/UShortArray).kotlin.collections/zip(kotlin/UShortArray, kotlin/Function2<kotlin/UShort, kotlin/UShort, #A>): kotlin.collections/List<#A> // kotlin.collections/zip|zip@kotlin.UShortArray(kotlin.UShortArray;kotlin.Function2<kotlin.UShort,kotlin.UShort,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/Iterable(crossinline kotlin/Function0<kotlin.collections/Iterator<#A>>): kotlin.collections/Iterable<#A> // kotlin.collections/Iterable|Iterable(kotlin.Function0<kotlin.collections.Iterator<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/List(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): kotlin.collections/List<#A> // kotlin.collections/List|List(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/MutableList(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): kotlin.collections/MutableList<#A> // kotlin.collections/MutableList|MutableList(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/arrayListOf(): kotlin.collections/ArrayList<#A> // kotlin.collections/arrayListOf|arrayListOf(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildList(kotlin/Function1<kotlin.collections/MutableList<#A>, kotlin/Unit>): kotlin.collections/List<#A> // kotlin.collections/buildList|buildList(kotlin.Function1<kotlin.collections.MutableList<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildList(kotlin/Int, kotlin/Function1<kotlin.collections/MutableList<#A>, kotlin/Unit>): kotlin.collections/List<#A> // kotlin.collections/buildList|buildList(kotlin.Int;kotlin.Function1<kotlin.collections.MutableList<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildListInternal(kotlin/Function1<kotlin.collections/MutableList<#A>, kotlin/Unit>): kotlin.collections/List<#A> // kotlin.collections/buildListInternal|buildListInternal(kotlin.Function1<kotlin.collections.MutableList<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildListInternal(kotlin/Int, kotlin/Function1<kotlin.collections/MutableList<#A>, kotlin/Unit>): kotlin.collections/List<#A> // kotlin.collections/buildListInternal|buildListInternal(kotlin.Int;kotlin.Function1<kotlin.collections.MutableList<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildSet(kotlin/Function1<kotlin.collections/MutableSet<#A>, kotlin/Unit>): kotlin.collections/Set<#A> // kotlin.collections/buildSet|buildSet(kotlin.Function1<kotlin.collections.MutableSet<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildSet(kotlin/Int, kotlin/Function1<kotlin.collections/MutableSet<#A>, kotlin/Unit>): kotlin.collections/Set<#A> // kotlin.collections/buildSet|buildSet(kotlin.Int;kotlin.Function1<kotlin.collections.MutableSet<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildSetInternal(kotlin/Function1<kotlin.collections/MutableSet<#A>, kotlin/Unit>): kotlin.collections/Set<#A> // kotlin.collections/buildSetInternal|buildSetInternal(kotlin.Function1<kotlin.collections.MutableSet<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/buildSetInternal(kotlin/Int, kotlin/Function1<kotlin.collections/MutableSet<#A>, kotlin/Unit>): kotlin.collections/Set<#A> // kotlin.collections/buildSetInternal|buildSetInternal(kotlin.Int;kotlin.Function1<kotlin.collections.MutableSet<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/hashSetOf(): kotlin.collections/HashSet<#A> // kotlin.collections/hashSetOf|hashSetOf(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/listOf(): kotlin.collections/List<#A> // kotlin.collections/listOf|listOf(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/mutableListOf(): kotlin.collections/MutableList<#A> // kotlin.collections/mutableListOf|mutableListOf(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/mutableSetOf(): kotlin.collections/MutableSet<#A> // kotlin.collections/mutableSetOf|mutableSetOf(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.collections/setOf(): kotlin.collections/Set<#A> // kotlin.collections/setOf|setOf(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.comparisons/compareBy(crossinline kotlin/Function1<#A, kotlin/Comparable<*>?>): kotlin/Comparator<#A> // kotlin.comparisons/compareBy|compareBy(kotlin.Function1<0:0,kotlin.Comparable<*>?>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.comparisons/compareByDescending(crossinline kotlin/Function1<#A, kotlin/Comparable<*>?>): kotlin/Comparator<#A> // kotlin.comparisons/compareByDescending|compareByDescending(kotlin.Function1<0:0,kotlin.Comparable<*>?>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.comparisons/compareValuesBy(#A, #A, kotlin/Function1<#A, kotlin/Comparable<*>?>): kotlin/Int // kotlin.comparisons/compareValuesBy|compareValuesBy(0:0;0:0;kotlin.Function1<0:0,kotlin.Comparable<*>?>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.coroutines/Continuation(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function1<kotlin/Result<#A>, kotlin/Unit>): kotlin.coroutines/Continuation<#A> // kotlin.coroutines/Continuation|Continuation(kotlin.coroutines.CoroutineContext;kotlin.Function1<kotlin.Result<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.sequences/Sequence(crossinline kotlin/Function0<kotlin.collections/Iterator<#A>>): kotlin.sequences/Sequence<#A> // kotlin.sequences/Sequence|Sequence(kotlin.Function0<kotlin.collections.Iterator<0:0>>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin.time/measureTimedValue(kotlin/Function0<#A>): kotlin.time/TimedValue<#A> // kotlin.time/measureTimedValue|measureTimedValue(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin/arrayOf(kotlin/Array<out #A>...): kotlin/Array<#A> // kotlin/arrayOf|arrayOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin/arrayOfNulls(kotlin/Int): kotlin/Array<#A?> // kotlin/arrayOfNulls|arrayOfNulls(kotlin.Int){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin/run(kotlin/Function0<#A>): #A // kotlin/run|run(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin/runCatching(kotlin/Function0<#A>): kotlin/Result<#A> // kotlin/runCatching|runCatching(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> kotlin/suspend(noinline kotlin.coroutines/SuspendFunction0<#A>): kotlin.coroutines/SuspendFunction0<#A> // kotlin/suspend|suspend(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/AutoCloseable?, #B: kotlin/Any?> (#A).kotlin/use(kotlin/Function1<#A, #B>): #B // kotlin/use|use@0:0(kotlin.Function1<0:0,0:1>){0§<kotlin.AutoCloseable?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/CharSequence> (#A).kotlin.text/onEach(kotlin/Function1<kotlin/Char, kotlin/Unit>): #A // kotlin.text/onEach|onEach@0:0(kotlin.Function1<kotlin.Char,kotlin.Unit>){0§<kotlin.CharSequence>}[0]
final inline fun <#A: kotlin/CharSequence> (#A).kotlin.text/onEachIndexed(kotlin/Function2<kotlin/Int, kotlin/Char, kotlin/Unit>): #A // kotlin.text/onEachIndexed|onEachIndexed@0:0(kotlin.Function2<kotlin.Int,kotlin.Char,kotlin.Unit>){0§<kotlin.CharSequence>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Boolean, #A>): kotlin/Boolean // kotlin.collections/maxBy|maxBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Boolean, #A>): kotlin/Boolean? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Boolean, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Boolean, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Boolean, #A>): kotlin/Boolean // kotlin.collections/minBy|minBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Boolean, #A>): kotlin/Boolean? // kotlin.collections/minByOrNull|minByOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Boolean, #A>): #A // kotlin.collections/minOf|minOf@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Boolean, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Boolean, #A?>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/sortedBy|sortedBy@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/BooleanArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Boolean, #A?>): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.BooleanArray(kotlin.Function1<kotlin.Boolean,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Byte, #A>): kotlin/Byte // kotlin.collections/maxBy|maxBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Byte, #A>): kotlin/Byte? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Byte, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Byte, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Byte, #A>): kotlin/Byte // kotlin.collections/minBy|minBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Byte, #A>): kotlin/Byte? // kotlin.collections/minByOrNull|minByOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Byte, #A>): #A // kotlin.collections/minOf|minOf@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Byte, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Byte, #A?>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/sortedBy|sortedBy@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ByteArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Byte, #A?>): kotlin.collections/List<kotlin/Byte> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.ByteArray(kotlin.Function1<kotlin.Byte,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Char, #A>): kotlin/Char // kotlin.collections/maxBy|maxBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Char, #A>): kotlin/Char? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Char, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Char, #A>): kotlin/Char // kotlin.collections/minBy|minBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Char, #A>): kotlin/Char? // kotlin.collections/minByOrNull|minByOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Char, #A>): #A // kotlin.collections/minOf|minOf@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Char, #A?>): kotlin.collections/List<kotlin/Char> // kotlin.collections/sortedBy|sortedBy@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Char, #A?>): kotlin.collections/List<kotlin/Char> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.CharArray(kotlin.Function1<kotlin.Char,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/maxBy(kotlin/Function1<kotlin/Char, #A>): kotlin/Char // kotlin.text/maxBy|maxBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/maxByOrNull(kotlin/Function1<kotlin/Char, #A>): kotlin/Char? // kotlin.text/maxByOrNull|maxByOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/maxOf(kotlin/Function1<kotlin/Char, #A>): #A // kotlin.text/maxOf|maxOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/maxOfOrNull(kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.text/maxOfOrNull|maxOfOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/minBy(kotlin/Function1<kotlin/Char, #A>): kotlin/Char // kotlin.text/minBy|minBy@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/minByOrNull(kotlin/Function1<kotlin/Char, #A>): kotlin/Char? // kotlin.text/minByOrNull|minByOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/minOf(kotlin/Function1<kotlin/Char, #A>): #A // kotlin.text/minOf|minOf@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/CharSequence).kotlin.text/minOfOrNull(kotlin/Function1<kotlin/Char, #A>): #A? // kotlin.text/minOfOrNull|minOfOrNull@kotlin.CharSequence(kotlin.Function1<kotlin.Char,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Double, #A>): kotlin/Double // kotlin.collections/maxBy|maxBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Double, #A>): kotlin/Double? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Double, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Double, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Double, #A>): kotlin/Double // kotlin.collections/minBy|minBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Double, #A>): kotlin/Double? // kotlin.collections/minByOrNull|minByOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Double, #A>): #A // kotlin.collections/minOf|minOf@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Double, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Double, #A?>): kotlin.collections/List<kotlin/Double> // kotlin.collections/sortedBy|sortedBy@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/DoubleArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Double, #A?>): kotlin.collections/List<kotlin/Double> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.DoubleArray(kotlin.Function1<kotlin.Double,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Float, #A>): kotlin/Float // kotlin.collections/maxBy|maxBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Float, #A>): kotlin/Float? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Float, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Float, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Float, #A>): kotlin/Float // kotlin.collections/minBy|minBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Float, #A>): kotlin/Float? // kotlin.collections/minByOrNull|minByOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Float, #A>): #A // kotlin.collections/minOf|minOf@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Float, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Float, #A?>): kotlin.collections/List<kotlin/Float> // kotlin.collections/sortedBy|sortedBy@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/FloatArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Float, #A?>): kotlin.collections/List<kotlin/Float> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.FloatArray(kotlin.Function1<kotlin.Float,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Int, #A>): kotlin/Int // kotlin.collections/maxBy|maxBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Int, #A>): kotlin/Int? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Int, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Int, #A>): kotlin/Int // kotlin.collections/minBy|minBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Int, #A>): kotlin/Int? // kotlin.collections/minByOrNull|minByOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Int, #A>): #A // kotlin.collections/minOf|minOf@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Int, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Int, #A?>): kotlin.collections/List<kotlin/Int> // kotlin.collections/sortedBy|sortedBy@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/IntArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Int, #A?>): kotlin.collections/List<kotlin/Int> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.IntArray(kotlin.Function1<kotlin.Int,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Long, #A>): kotlin/Long // kotlin.collections/maxBy|maxBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Long, #A>): kotlin/Long? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Long, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Long, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Long, #A>): kotlin/Long // kotlin.collections/minBy|minBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Long, #A>): kotlin/Long? // kotlin.collections/minByOrNull|minByOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Long, #A>): #A // kotlin.collections/minOf|minOf@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Long, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Long, #A?>): kotlin.collections/List<kotlin/Long> // kotlin.collections/sortedBy|sortedBy@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/LongArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Long, #A?>): kotlin.collections/List<kotlin/Long> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.LongArray(kotlin.Function1<kotlin.Long,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/Short, #A>): kotlin/Short // kotlin.collections/maxBy|maxBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/Short, #A>): kotlin/Short? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/Short, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/Short, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/minBy(kotlin/Function1<kotlin/Short, #A>): kotlin/Short // kotlin.collections/minBy|minBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/Short, #A>): kotlin/Short? // kotlin.collections/minByOrNull|minByOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/minOf(kotlin/Function1<kotlin/Short, #A>): #A // kotlin.collections/minOf|minOf@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/Short, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/sortedBy(crossinline kotlin/Function1<kotlin/Short, #A?>): kotlin.collections/List<kotlin/Short> // kotlin.collections/sortedBy|sortedBy@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ShortArray).kotlin.collections/sortedByDescending(crossinline kotlin/Function1<kotlin/Short, #A?>): kotlin.collections/List<kotlin/Short> // kotlin.collections/sortedByDescending|sortedByDescending@kotlin.ShortArray(kotlin.Function1<kotlin.Short,0:0?>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/UByte, #A>): kotlin/UByte // kotlin.collections/maxBy|maxBy@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/UByte, #A>): kotlin/UByte? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UByte, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UByte, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/minBy(kotlin/Function1<kotlin/UByte, #A>): kotlin/UByte // kotlin.collections/minBy|minBy@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/UByte, #A>): kotlin/UByte? // kotlin.collections/minByOrNull|minByOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UByte, #A>): #A // kotlin.collections/minOf|minOf@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UByteArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UByte, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UByteArray(kotlin.Function1<kotlin.UByte,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/UInt, #A>): kotlin/UInt // kotlin.collections/maxBy|maxBy@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/UInt, #A>): kotlin/UInt? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UInt, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UInt, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/minBy(kotlin/Function1<kotlin/UInt, #A>): kotlin/UInt // kotlin.collections/minBy|minBy@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/UInt, #A>): kotlin/UInt? // kotlin.collections/minByOrNull|minByOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UInt, #A>): #A // kotlin.collections/minOf|minOf@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UIntArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UInt, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UIntArray(kotlin.Function1<kotlin.UInt,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/ULong, #A>): kotlin/ULong // kotlin.collections/maxBy|maxBy@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/ULong, #A>): kotlin/ULong? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/ULong, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/ULong, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/minBy(kotlin/Function1<kotlin/ULong, #A>): kotlin/ULong // kotlin.collections/minBy|minBy@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/ULong, #A>): kotlin/ULong? // kotlin.collections/minByOrNull|minByOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/minOf(kotlin/Function1<kotlin/ULong, #A>): #A // kotlin.collections/minOf|minOf@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/ULongArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/ULong, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.ULongArray(kotlin.Function1<kotlin.ULong,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/maxBy(kotlin/Function1<kotlin/UShort, #A>): kotlin/UShort // kotlin.collections/maxBy|maxBy@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/maxByOrNull(kotlin/Function1<kotlin/UShort, #A>): kotlin/UShort? // kotlin.collections/maxByOrNull|maxByOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/maxOf(kotlin/Function1<kotlin/UShort, #A>): #A // kotlin.collections/maxOf|maxOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/maxOfOrNull(kotlin/Function1<kotlin/UShort, #A>): #A? // kotlin.collections/maxOfOrNull|maxOfOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/minBy(kotlin/Function1<kotlin/UShort, #A>): kotlin/UShort // kotlin.collections/minBy|minBy@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/minByOrNull(kotlin/Function1<kotlin/UShort, #A>): kotlin/UShort? // kotlin.collections/minByOrNull|minByOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/minOf(kotlin/Function1<kotlin/UShort, #A>): #A // kotlin.collections/minOf|minOf@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (kotlin/UShortArray).kotlin.collections/minOfOrNull(kotlin/Function1<kotlin/UShort, #A>): #A? // kotlin.collections/minOfOrNull|minOfOrNull@kotlin.UShortArray(kotlin.Function1<kotlin.UShort,0:0>){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/nullsFirst(): kotlin/Comparator<#A?> // kotlin.comparisons/nullsFirst|nullsFirst(){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> kotlin.comparisons/nullsLast(): kotlin/Comparator<#A?> // kotlin.comparisons/nullsLast|nullsLast(){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: reified kotlin/Annotation> (kotlin.reflect/KClass<*>).kotlin.reflect/findAssociatedObject(): kotlin/Any? // kotlin.reflect/findAssociatedObject|findAssociatedObject@kotlin.reflect.KClass<*>(){0§<kotlin.Annotation>}[0]
final inline fun <#A: reified kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.collections/Iterable<*>).kotlin.collections/filterIsInstanceTo(#B): #B // kotlin.collections/filterIsInstanceTo|filterIsInstanceTo@kotlin.collections.Iterable<*>(0:1){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: reified kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin.sequences/Sequence<*>).kotlin.sequences/filterIsInstanceTo(#B): #B // kotlin.sequences/filterIsInstanceTo|filterIsInstanceTo@kotlin.sequences.Sequence<*>(0:1){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: reified kotlin/Any?, #B: kotlin.collections/MutableCollection<in #A>> (kotlin/Array<*>).kotlin.collections/filterIsInstanceTo(#B): #B // kotlin.collections/filterIsInstanceTo|filterIsInstanceTo@kotlin.Array<*>(0:1){0§<kotlin.Any?>;1§<kotlin.collections.MutableCollection<in|0:0>>}[0]
final inline fun <#A: reified kotlin/Any?> (kotlin.collections/Iterable<*>).kotlin.collections/filterIsInstance(): kotlin.collections/List<#A> // kotlin.collections/filterIsInstance|filterIsInstance@kotlin.collections.Iterable<*>(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (kotlin.sequences/Sequence<*>).kotlin.sequences/filterIsInstance(): kotlin.sequences/Sequence<#A> // kotlin.sequences/filterIsInstance|filterIsInstance@kotlin.sequences.Sequence<*>(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (kotlin/Array<*>).kotlin.collections/filterIsInstance(): kotlin.collections/List<#A> // kotlin.collections/filterIsInstance|filterIsInstance@kotlin.Array<*>(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> kotlin.concurrent/AtomicArray(kotlin/Int, kotlin/Function1<kotlin/Int, #A>): kotlin.concurrent/AtomicArray<#A> // kotlin.concurrent/AtomicArray|AtomicArray(kotlin.Int;kotlin.Function1<kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> kotlin.reflect/typeOf(): kotlin.reflect/KType // kotlin.reflect/typeOf|typeOf(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Enum<#A>> kotlin.enums/enumEntries(): kotlin.enums/EnumEntries<#A> // kotlin.enums/enumEntries|enumEntries(){0§<kotlin.Enum<0:0>>}[0]
final inline fun <#A: reified kotlin/Enum<#A>> kotlin/enumValueOf(kotlin/String): #A // kotlin/enumValueOf|enumValueOf(kotlin.String){0§<kotlin.Enum<0:0>>}[0]
final inline fun <#A: reified kotlin/Enum<#A>> kotlin/enumValues(): kotlin/Array<#A> // kotlin/enumValues|enumValues(){0§<kotlin.Enum<0:0>>}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Byte, kotlin/Byte): kotlin/Byte // kotlin.comparisons/maxOf|maxOf(kotlin.Byte;kotlin.Byte){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Byte // kotlin.comparisons/maxOf|maxOf(kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.comparisons/maxOf|maxOf(kotlin.Double;kotlin.Double){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Double, kotlin/Double, kotlin/Double): kotlin/Double // kotlin.comparisons/maxOf|maxOf(kotlin.Double;kotlin.Double;kotlin.Double){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.comparisons/maxOf|maxOf(kotlin.Float;kotlin.Float){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // kotlin.comparisons/maxOf|maxOf(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.comparisons/maxOf|maxOf(kotlin.Int;kotlin.Int){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlin.comparisons/maxOf|maxOf(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.comparisons/maxOf|maxOf(kotlin.Long;kotlin.Long){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Long, kotlin/Long, kotlin/Long): kotlin/Long // kotlin.comparisons/maxOf|maxOf(kotlin.Long;kotlin.Long;kotlin.Long){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Short, kotlin/Short): kotlin/Short // kotlin.comparisons/maxOf|maxOf(kotlin.Short;kotlin.Short){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/Short, kotlin/Short, kotlin/Short): kotlin/Short // kotlin.comparisons/maxOf|maxOf(kotlin.Short;kotlin.Short;kotlin.Short){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/UByte, kotlin/UByte, kotlin/UByte): kotlin/UByte // kotlin.comparisons/maxOf|maxOf(kotlin.UByte;kotlin.UByte;kotlin.UByte){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/UInt, kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.comparisons/maxOf|maxOf(kotlin.UInt;kotlin.UInt;kotlin.UInt){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/ULong, kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.comparisons/maxOf|maxOf(kotlin.ULong;kotlin.ULong;kotlin.ULong){}[0]
final inline fun kotlin.comparisons/maxOf(kotlin/UShort, kotlin/UShort, kotlin/UShort): kotlin/UShort // kotlin.comparisons/maxOf|maxOf(kotlin.UShort;kotlin.UShort;kotlin.UShort){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Byte, kotlin/Byte): kotlin/Byte // kotlin.comparisons/minOf|minOf(kotlin.Byte;kotlin.Byte){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Byte // kotlin.comparisons/minOf|minOf(kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.comparisons/minOf|minOf(kotlin.Double;kotlin.Double){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Double, kotlin/Double, kotlin/Double): kotlin/Double // kotlin.comparisons/minOf|minOf(kotlin.Double;kotlin.Double;kotlin.Double){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.comparisons/minOf|minOf(kotlin.Float;kotlin.Float){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Float, kotlin/Float, kotlin/Float): kotlin/Float // kotlin.comparisons/minOf|minOf(kotlin.Float;kotlin.Float;kotlin.Float){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.comparisons/minOf|minOf(kotlin.Int;kotlin.Int){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlin.comparisons/minOf|minOf(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.comparisons/minOf|minOf(kotlin.Long;kotlin.Long){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Long, kotlin/Long, kotlin/Long): kotlin/Long // kotlin.comparisons/minOf|minOf(kotlin.Long;kotlin.Long;kotlin.Long){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Short, kotlin/Short): kotlin/Short // kotlin.comparisons/minOf|minOf(kotlin.Short;kotlin.Short){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/Short, kotlin/Short, kotlin/Short): kotlin/Short // kotlin.comparisons/minOf|minOf(kotlin.Short;kotlin.Short;kotlin.Short){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/UByte, kotlin/UByte, kotlin/UByte): kotlin/UByte // kotlin.comparisons/minOf|minOf(kotlin.UByte;kotlin.UByte;kotlin.UByte){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/UInt, kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.comparisons/minOf|minOf(kotlin.UInt;kotlin.UInt;kotlin.UInt){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/ULong, kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.comparisons/minOf|minOf(kotlin.ULong;kotlin.ULong;kotlin.ULong){}[0]
final inline fun kotlin.comparisons/minOf(kotlin/UShort, kotlin/UShort, kotlin/UShort): kotlin/UShort // kotlin.comparisons/minOf|minOf(kotlin.UShort;kotlin.UShort;kotlin.UShort){}[0]
final inline fun kotlin.concurrent/AtomicIntArray(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Int>): kotlin.concurrent/AtomicIntArray // kotlin.concurrent/AtomicIntArray|AtomicIntArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Int>){}[0]
final inline fun kotlin.concurrent/AtomicLongArray(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Long>): kotlin.concurrent/AtomicLongArray // kotlin.concurrent/AtomicLongArray|AtomicLongArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Long>){}[0]
final inline fun kotlin.contracts/contract(kotlin/Function1<kotlin.contracts/ContractBuilder, kotlin/Unit>) // kotlin.contracts/contract|contract(kotlin.Function1<kotlin.contracts.ContractBuilder,kotlin.Unit>){}[0]
final inline fun kotlin.coroutines.cancellation/CancellationException(kotlin/String?, kotlin/Throwable?): kotlin.coroutines.cancellation/CancellationException // kotlin.coroutines.cancellation/CancellationException|CancellationException(kotlin.String?;kotlin.Throwable?){}[0]
final inline fun kotlin.coroutines.cancellation/CancellationException(kotlin/Throwable?): kotlin.coroutines.cancellation/CancellationException // kotlin.coroutines.cancellation/CancellationException|CancellationException(kotlin.Throwable?){}[0]
final inline fun kotlin.math/max(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.math/max|max(kotlin.UInt;kotlin.UInt){}[0]
final inline fun kotlin.math/max(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.math/max|max(kotlin.ULong;kotlin.ULong){}[0]
final inline fun kotlin.math/min(kotlin/UInt, kotlin/UInt): kotlin/UInt // kotlin.math/min|min(kotlin.UInt;kotlin.UInt){}[0]
final inline fun kotlin.math/min(kotlin/ULong, kotlin/ULong): kotlin/ULong // kotlin.math/min|min(kotlin.ULong;kotlin.ULong){}[0]
final inline fun kotlin.text/HexFormat(kotlin/Function1<kotlin.text/HexFormat.Builder, kotlin/Unit>): kotlin.text/HexFormat // kotlin.text/HexFormat|HexFormat(kotlin.Function1<kotlin.text.HexFormat.Builder,kotlin.Unit>){}[0]
final inline fun kotlin.text/buildString(kotlin/Function1<kotlin.text/StringBuilder, kotlin/Unit>): kotlin/String // kotlin.text/buildString|buildString(kotlin.Function1<kotlin.text.StringBuilder,kotlin.Unit>){}[0]
final inline fun kotlin.text/buildString(kotlin/Int, kotlin/Function1<kotlin.text/StringBuilder, kotlin/Unit>): kotlin/String // kotlin.text/buildString|buildString(kotlin.Int;kotlin.Function1<kotlin.text.StringBuilder,kotlin.Unit>){}[0]
final inline fun kotlin.time/measureTime(kotlin/Function0<kotlin/Unit>): kotlin.time/Duration // kotlin.time/measureTime|measureTime(kotlin.Function0<kotlin.Unit>){}[0]
final inline fun kotlin/AutoCloseable(crossinline kotlin/Function0<kotlin/Unit>): kotlin/AutoCloseable // kotlin/AutoCloseable|AutoCloseable(kotlin.Function0<kotlin.Unit>){}[0]
final inline fun kotlin/Char(kotlin/Int): kotlin/Char // kotlin/Char|Char(kotlin.Int){}[0]
final inline fun kotlin/Char(kotlin/UShort): kotlin/Char // kotlin/Char|Char(kotlin.UShort){}[0]
final inline fun kotlin/TODO(): kotlin/Nothing // kotlin/TODO|TODO(){}[0]
final inline fun kotlin/TODO(kotlin/String): kotlin/Nothing // kotlin/TODO|TODO(kotlin.String){}[0]
final inline fun kotlin/UByteArray(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UByte>): kotlin/UByteArray // kotlin/UByteArray|UByteArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UByte>){}[0]
final inline fun kotlin/UIntArray(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UInt>): kotlin/UIntArray // kotlin/UIntArray|UIntArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UInt>){}[0]
final inline fun kotlin/ULongArray(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/ULong>): kotlin/ULongArray // kotlin/ULongArray|ULongArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.ULong>){}[0]
final inline fun kotlin/UShortArray(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/UShort>): kotlin/UShortArray // kotlin/UShortArray|UShortArray(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.UShort>){}[0]
final inline fun kotlin/booleanArrayOf(kotlin/BooleanArray...): kotlin/BooleanArray // kotlin/booleanArrayOf|booleanArrayOf(kotlin.BooleanArray...){}[0]
final inline fun kotlin/byteArrayOf(kotlin/ByteArray...): kotlin/ByteArray // kotlin/byteArrayOf|byteArrayOf(kotlin.ByteArray...){}[0]
final inline fun kotlin/charArrayOf(kotlin/CharArray...): kotlin/CharArray // kotlin/charArrayOf|charArrayOf(kotlin.CharArray...){}[0]
final inline fun kotlin/check(kotlin/Boolean) // kotlin/check|check(kotlin.Boolean){}[0]
final inline fun kotlin/check(kotlin/Boolean, kotlin/Function0<kotlin/Any>) // kotlin/check|check(kotlin.Boolean;kotlin.Function0<kotlin.Any>){}[0]
final inline fun kotlin/doubleArrayOf(kotlin/DoubleArray...): kotlin/DoubleArray // kotlin/doubleArrayOf|doubleArrayOf(kotlin.DoubleArray...){}[0]
final inline fun kotlin/error(kotlin/Any): kotlin/Nothing // kotlin/error|error(kotlin.Any){}[0]
final inline fun kotlin/floatArrayOf(kotlin/FloatArray...): kotlin/FloatArray // kotlin/floatArrayOf|floatArrayOf(kotlin.FloatArray...){}[0]
final inline fun kotlin/intArrayOf(kotlin/IntArray...): kotlin/IntArray // kotlin/intArrayOf|intArrayOf(kotlin.IntArray...){}[0]
final inline fun kotlin/longArrayOf(kotlin/LongArray...): kotlin/LongArray // kotlin/longArrayOf|longArrayOf(kotlin.LongArray...){}[0]
final inline fun kotlin/repeat(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Unit>) // kotlin/repeat|repeat(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Unit>){}[0]
final inline fun kotlin/require(kotlin/Boolean) // kotlin/require|require(kotlin.Boolean){}[0]
final inline fun kotlin/require(kotlin/Boolean, kotlin/Function0<kotlin/Any>) // kotlin/require|require(kotlin.Boolean;kotlin.Function0<kotlin.Any>){}[0]
final inline fun kotlin/shortArrayOf(kotlin/ShortArray...): kotlin/ShortArray // kotlin/shortArrayOf|shortArrayOf(kotlin.ShortArray...){}[0]
final inline fun kotlin/ubyteArrayOf(kotlin/UByteArray...): kotlin/UByteArray // kotlin/ubyteArrayOf|ubyteArrayOf(kotlin.UByteArray...){}[0]
final inline fun kotlin/uintArrayOf(kotlin/UIntArray...): kotlin/UIntArray // kotlin/uintArrayOf|uintArrayOf(kotlin.UIntArray...){}[0]
final inline fun kotlin/ulongArrayOf(kotlin/ULongArray...): kotlin/ULongArray // kotlin/ulongArrayOf|ulongArrayOf(kotlin.ULongArray...){}[0]
final inline fun kotlin/ushortArrayOf(kotlin/UShortArray...): kotlin/UShortArray // kotlin/ushortArrayOf|ushortArrayOf(kotlin.UShortArray...){}[0]
final suspend inline fun <#A: kotlin/Any?> kotlin.coroutines.intrinsics/suspendCoroutineUninterceptedOrReturn(crossinline kotlin/Function1<kotlin.coroutines/Continuation<#A>, kotlin/Any?>): #A // kotlin.coroutines.intrinsics/suspendCoroutineUninterceptedOrReturn|suspendCoroutineUninterceptedOrReturn(kotlin.Function1<kotlin.coroutines.Continuation<0:0>,kotlin.Any?>){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?> kotlin.coroutines/suspendCoroutine(crossinline kotlin/Function1<kotlin.coroutines/Continuation<#A>, kotlin/Unit>): #A // kotlin.coroutines/suspendCoroutine|suspendCoroutine(kotlin.Function1<kotlin.coroutines.Continuation<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
open annotation class kotlin.js/JsFileName : kotlin/Annotation { // kotlin.js/JsFileName|null[1]
    constructor <init>(kotlin/String) // kotlin.js/JsFileName.<init>|<init>(kotlin.String){}[1]

    final val name // kotlin.js/JsFileName.name|{}name[1]
        final fun <get-name>(): kotlin/String // kotlin.js/JsFileName.name.<get-name>|<get-name>(){}[1]
}

// Targets: [native, wasmJs, wasmWasi]
open annotation class kotlin.js/JsStatic : kotlin/Annotation { // kotlin.js/JsStatic|null[1]
    constructor <init>() // kotlin.js/JsStatic.<init>|<init>(){}[1]
}

// Targets: [native, wasmJs, wasmWasi]
open annotation class kotlin.jvm/Synchronized : kotlin/Annotation { // kotlin.jvm/Synchronized|null[1]
    constructor <init>() // kotlin.jvm/Synchronized.<init>|<init>(){}[1]
}

// Targets: [native, wasmJs, wasmWasi]
open annotation class kotlin.jvm/Volatile : kotlin/Annotation { // kotlin.jvm/Volatile|null[1]
    constructor <init>() // kotlin.jvm/Volatile.<init>|<init>(){}[1]
}

// Targets: [native, wasmJs, wasmWasi]
open annotation class kotlin.native.concurrent/ObsoleteWorkersApi : kotlin/Annotation { // kotlin.native.concurrent/ObsoleteWorkersApi|null[0]
    constructor <init>() // kotlin.native.concurrent/ObsoleteWorkersApi.<init>|<init>(){}[0]
}

// Targets: [native, wasmJs, wasmWasi]
open annotation class kotlin.native/FreezingIsDeprecated : kotlin/Annotation { // kotlin.native/FreezingIsDeprecated|null[0]
    constructor <init>() // kotlin.native/FreezingIsDeprecated.<init>|<init>(){}[0]
}

// Targets: [native, wasmJs, wasmWasi]
final class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/HashMap : kotlin.collections/MutableMap<#A, #B> { // kotlin.collections/HashMap|null[0]
    constructor <init>() // kotlin.collections/HashMap.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Map<out #A, #B>) // kotlin.collections/HashMap.<init>|<init>(kotlin.collections.Map<out|1:0,1:1>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/HashMap.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Float) // kotlin.collections/HashMap.<init>|<init>(kotlin.Int;kotlin.Float){}[0]

    final val entries // kotlin.collections/HashMap.entries|{}entries[0]
        final fun <get-entries>(): kotlin.collections/MutableSet<kotlin.collections/MutableMap.MutableEntry<#A, #B>> // kotlin.collections/HashMap.entries.<get-entries>|<get-entries>(){}[0]
    final val keys // kotlin.collections/HashMap.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/MutableSet<#A> // kotlin.collections/HashMap.keys.<get-keys>|<get-keys>(){}[0]
    final val size // kotlin.collections/HashMap.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.collections/HashMap.size.<get-size>|<get-size>(){}[0]
    final val values // kotlin.collections/HashMap.values|{}values[0]
        final fun <get-values>(): kotlin.collections/MutableCollection<#B> // kotlin.collections/HashMap.values.<get-values>|<get-values>(){}[0]

    final fun build(): kotlin.collections/Map<#A, #B> // kotlin.collections/HashMap.build|build(){}[0]
    final fun clear() // kotlin.collections/HashMap.clear|clear(){}[0]
    final fun containsKey(#A): kotlin/Boolean // kotlin.collections/HashMap.containsKey|containsKey(1:0){}[0]
    final fun containsValue(#B): kotlin/Boolean // kotlin.collections/HashMap.containsValue|containsValue(1:1){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/HashMap.equals|equals(kotlin.Any?){}[0]
    final fun get(#A): #B? // kotlin.collections/HashMap.get|get(1:0){}[0]
    final fun hashCode(): kotlin/Int // kotlin.collections/HashMap.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.collections/HashMap.isEmpty|isEmpty(){}[0]
    final fun put(#A, #B): #B? // kotlin.collections/HashMap.put|put(1:0;1:1){}[0]
    final fun putAll(kotlin.collections/Map<out #A, #B>) // kotlin.collections/HashMap.putAll|putAll(kotlin.collections.Map<out|1:0,1:1>){}[0]
    final fun remove(#A): #B? // kotlin.collections/HashMap.remove|remove(1:0){}[0]
    final fun toString(): kotlin/String // kotlin.collections/HashMap.toString|toString(){}[0]
}

// Targets: [native, wasmJs, wasmWasi]
final class <#A: kotlin/Any?> kotlin.collections/ArrayList : kotlin.collections/AbstractMutableList<#A>, kotlin.collections/MutableList<#A>, kotlin.collections/RandomAccess { // kotlin.collections/ArrayList|null[0]
    constructor <init>() // kotlin.collections/ArrayList.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Collection<#A>) // kotlin.collections/ArrayList.<init>|<init>(kotlin.collections.Collection<1:0>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/ArrayList.<init>|<init>(kotlin.Int){}[0]

    final val size // kotlin.collections/ArrayList.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.collections/ArrayList.size.<get-size>|<get-size>(){}[0]

    final fun add(#A): kotlin/Boolean // kotlin.collections/ArrayList.add|add(1:0){}[0]
    final fun add(kotlin/Int, #A) // kotlin.collections/ArrayList.add|add(kotlin.Int;1:0){}[0]
    final fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayList.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    final fun addAll(kotlin/Int, kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayList.addAll|addAll(kotlin.Int;kotlin.collections.Collection<1:0>){}[0]
    final fun build(): kotlin.collections/List<#A> // kotlin.collections/ArrayList.build|build(){}[0]
    final fun clear() // kotlin.collections/ArrayList.clear|clear(){}[0]
    final fun ensureCapacity(kotlin/Int) // kotlin.collections/ArrayList.ensureCapacity|ensureCapacity(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.collections/ArrayList.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): #A // kotlin.collections/ArrayList.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlin.collections/ArrayList.hashCode|hashCode(){}[0]
    final fun indexOf(#A): kotlin/Int // kotlin.collections/ArrayList.indexOf|indexOf(1:0){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.collections/ArrayList.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/MutableIterator<#A> // kotlin.collections/ArrayList.iterator|iterator(){}[0]
    final fun lastIndexOf(#A): kotlin/Int // kotlin.collections/ArrayList.lastIndexOf|lastIndexOf(1:0){}[0]
    final fun listIterator(): kotlin.collections/MutableListIterator<#A> // kotlin.collections/ArrayList.listIterator|listIterator(){}[0]
    final fun listIterator(kotlin/Int): kotlin.collections/MutableListIterator<#A> // kotlin.collections/ArrayList.listIterator|listIterator(kotlin.Int){}[0]
    final fun remove(#A): kotlin/Boolean // kotlin.collections/ArrayList.remove|remove(1:0){}[0]
    final fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayList.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    final fun removeAt(kotlin/Int): #A // kotlin.collections/ArrayList.removeAt|removeAt(kotlin.Int){}[0]
    final fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayList.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
    final fun set(kotlin/Int, #A): #A // kotlin.collections/ArrayList.set|set(kotlin.Int;1:0){}[0]
    final fun subList(kotlin/Int, kotlin/Int): kotlin.collections/MutableList<#A> // kotlin.collections/ArrayList.subList|subList(kotlin.Int;kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlin.collections/ArrayList.toString|toString(){}[0]
    final fun trimToSize() // kotlin.collections/ArrayList.trimToSize|trimToSize(){}[0]
}

// Targets: [native, wasmJs, wasmWasi]
final class <#A: kotlin/Any?> kotlin.collections/HashSet : kotlin.collections/AbstractMutableSet<#A>, kotlin.collections/MutableSet<#A>, kotlin.native.internal/KonanSet<#A> { // kotlin.collections/HashSet|null[0]
    constructor <init>() // kotlin.collections/HashSet.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Collection<#A>) // kotlin.collections/HashSet.<init>|<init>(kotlin.collections.Collection<1:0>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/HashSet.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Float) // kotlin.collections/HashSet.<init>|<init>(kotlin.Int;kotlin.Float){}[0]

    final val size // kotlin.collections/HashSet.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.collections/HashSet.size.<get-size>|<get-size>(){}[0]

    final fun add(#A): kotlin/Boolean // kotlin.collections/HashSet.add|add(1:0){}[0]
    final fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/HashSet.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    final fun build(): kotlin.collections/Set<#A> // kotlin.collections/HashSet.build|build(){}[0]
    final fun clear() // kotlin.collections/HashSet.clear|clear(){}[0]
    final fun contains(#A): kotlin/Boolean // kotlin.collections/HashSet.contains|contains(1:0){}[0]
    final fun getElement(#A): #A? // kotlin.collections/HashSet.getElement|getElement(1:0){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlin.collections/HashSet.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/MutableIterator<#A> // kotlin.collections/HashSet.iterator|iterator(){}[0]
    final fun remove(#A): kotlin/Boolean // kotlin.collections/HashSet.remove|remove(1:0){}[0]
    final fun removeAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/HashSet.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    final fun retainAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/HashSet.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
}

// Targets: [native, wasmJs, wasmWasi]
open class kotlin/OutOfMemoryError : kotlin/Error { // kotlin/OutOfMemoryError|null[0]
    constructor <init>() // kotlin/OutOfMemoryError.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/OutOfMemoryError.<init>|<init>(kotlin.String?){}[0]
}

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin.text/StringBuilder).kotlin.text/clear(): kotlin.text/StringBuilder // kotlin.text/clear|clear@kotlin.text.StringBuilder(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/BooleanArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/asList|asList@kotlin.BooleanArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/BooleanArray).kotlin.collections/contentEquals(kotlin/BooleanArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.BooleanArray(kotlin.BooleanArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/BooleanArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.BooleanArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/BooleanArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.BooleanArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/BooleanArray).kotlin.collections/copyInto(kotlin/BooleanArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/BooleanArray // kotlin.collections/copyInto|copyInto@kotlin.BooleanArray(kotlin.BooleanArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/BooleanArray).kotlin.collections/plus(kotlin/Boolean): kotlin/BooleanArray // kotlin.collections/plus|plus@kotlin.BooleanArray(kotlin.Boolean){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/BooleanArray).kotlin.collections/plus(kotlin/BooleanArray): kotlin/BooleanArray // kotlin.collections/plus|plus@kotlin.BooleanArray(kotlin.BooleanArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Byte> // kotlin.collections/asList|asList@kotlin.ByteArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/contentEquals(kotlin/ByteArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.ByteArray(kotlin.ByteArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.ByteArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.ByteArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/copyInto(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // kotlin.collections/copyInto|copyInto@kotlin.ByteArray(kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/copyOf(): kotlin/ByteArray // kotlin.collections/copyOf|copyOf@kotlin.ByteArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/plus(kotlin/Byte): kotlin/ByteArray // kotlin.collections/plus|plus@kotlin.ByteArray(kotlin.Byte){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ByteArray).kotlin.collections/plus(kotlin/ByteArray): kotlin/ByteArray // kotlin.collections/plus|plus@kotlin.ByteArray(kotlin.ByteArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Char).kotlin.text/lowercase(): kotlin/String // kotlin.text/lowercase|lowercase@kotlin.Char(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Char).kotlin.text/lowercaseChar(): kotlin/Char // kotlin.text/lowercaseChar|lowercaseChar@kotlin.Char(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Char).kotlin.text/toLowerCase(): kotlin/Char // kotlin.text/toLowerCase|toLowerCase@kotlin.Char(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Char).kotlin.text/toUpperCase(): kotlin/Char // kotlin.text/toUpperCase|toUpperCase@kotlin.Char(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Char).kotlin.text/uppercase(): kotlin/String // kotlin.text/uppercase|uppercase@kotlin.Char(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/CharArray).kotlin.collections/contentEquals(kotlin/CharArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.CharArray(kotlin.CharArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/CharArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.CharArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/CharArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.CharArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/CharArray).kotlin.collections/copyInto(kotlin/CharArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/CharArray // kotlin.collections/copyInto|copyInto@kotlin.CharArray(kotlin.CharArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/CharArray).kotlin.collections/plus(kotlin/Char): kotlin/CharArray // kotlin.collections/plus|plus@kotlin.CharArray(kotlin.Char){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/CharArray).kotlin.collections/plus(kotlin/CharArray): kotlin/CharArray // kotlin.collections/plus|plus@kotlin.CharArray(kotlin.CharArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Double).kotlin.math/pow(kotlin/Double): kotlin/Double // kotlin.math/pow|pow@kotlin.Double(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Double).kotlin.math/pow(kotlin/Int): kotlin/Double // kotlin.math/pow|pow@kotlin.Double(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Double).kotlin.math/withSign(kotlin/Int): kotlin/Double // kotlin.math/withSign|withSign@kotlin.Double(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Double> // kotlin.collections/asList|asList@kotlin.DoubleArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/contentEquals(kotlin/DoubleArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.DoubleArray(kotlin.DoubleArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.DoubleArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.DoubleArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/copyInto(kotlin/DoubleArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/DoubleArray // kotlin.collections/copyInto|copyInto@kotlin.DoubleArray(kotlin.DoubleArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/copyOf(): kotlin/DoubleArray // kotlin.collections/copyOf|copyOf@kotlin.DoubleArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/plus(kotlin/Double): kotlin/DoubleArray // kotlin.collections/plus|plus@kotlin.DoubleArray(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/DoubleArray).kotlin.collections/plus(kotlin/DoubleArray): kotlin/DoubleArray // kotlin.collections/plus|plus@kotlin.DoubleArray(kotlin.DoubleArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin.math/pow(kotlin/Float): kotlin/Float // kotlin.math/pow|pow@kotlin.Float(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin.math/pow(kotlin/Int): kotlin/Float // kotlin.math/pow|pow@kotlin.Float(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin.math/roundToInt(): kotlin/Int // kotlin.math/roundToInt|roundToInt@kotlin.Float(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin.math/roundToLong(): kotlin/Long // kotlin.math/roundToLong|roundToLong@kotlin.Float(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin.math/withSign(kotlin/Float): kotlin/Float // kotlin.math/withSign|withSign@kotlin.Float(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin.math/withSign(kotlin/Int): kotlin/Float // kotlin.math/withSign|withSign@kotlin.Float(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Float> // kotlin.collections/asList|asList@kotlin.FloatArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/contentEquals(kotlin/FloatArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.FloatArray(kotlin.FloatArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.FloatArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.FloatArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/copyInto(kotlin/FloatArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/FloatArray // kotlin.collections/copyInto|copyInto@kotlin.FloatArray(kotlin.FloatArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/copyOf(): kotlin/FloatArray // kotlin.collections/copyOf|copyOf@kotlin.FloatArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/plus(kotlin/Float): kotlin/FloatArray // kotlin.collections/plus|plus@kotlin.FloatArray(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/FloatArray).kotlin.collections/plus(kotlin/FloatArray): kotlin/FloatArray // kotlin.collections/plus|plus@kotlin.FloatArray(kotlin.FloatArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/Int).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.Int(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Int> // kotlin.collections/asList|asList@kotlin.IntArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/contentEquals(kotlin/IntArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.IntArray(kotlin.IntArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.IntArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.IntArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/copyInto(kotlin/IntArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/IntArray // kotlin.collections/copyInto|copyInto@kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/copyOf(): kotlin/IntArray // kotlin.collections/copyOf|copyOf@kotlin.IntArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/plus(kotlin/Int): kotlin/IntArray // kotlin.collections/plus|plus@kotlin.IntArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/IntArray).kotlin.collections/plus(kotlin/IntArray): kotlin/IntArray // kotlin.collections/plus|plus@kotlin.IntArray(kotlin.IntArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/LongArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Long> // kotlin.collections/asList|asList@kotlin.LongArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/LongArray).kotlin.collections/contentEquals(kotlin/LongArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.LongArray(kotlin.LongArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/LongArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.LongArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/LongArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.LongArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/LongArray).kotlin.collections/copyInto(kotlin/LongArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/LongArray // kotlin.collections/copyInto|copyInto@kotlin.LongArray(kotlin.LongArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/LongArray).kotlin.collections/plus(kotlin/Long): kotlin/LongArray // kotlin.collections/plus|plus@kotlin.LongArray(kotlin.Long){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/LongArray).kotlin.collections/plus(kotlin/LongArray): kotlin/LongArray // kotlin.collections/plus|plus@kotlin.LongArray(kotlin.LongArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Short> // kotlin.collections/asList|asList@kotlin.ShortArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/contentEquals(kotlin/ShortArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.ShortArray(kotlin.ShortArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.ShortArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.ShortArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/copyInto(kotlin/ShortArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/ShortArray // kotlin.collections/copyInto|copyInto@kotlin.ShortArray(kotlin.ShortArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/copyOf(): kotlin/ShortArray // kotlin.collections/copyOf|copyOf@kotlin.ShortArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/plus(kotlin/Short): kotlin/ShortArray // kotlin.collections/plus|plus@kotlin.ShortArray(kotlin.Short){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ShortArray).kotlin.collections/plus(kotlin/ShortArray): kotlin/ShortArray // kotlin.collections/plus|plus@kotlin.ShortArray(kotlin.ShortArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/lowercase(): kotlin/String // kotlin.text/lowercase|lowercase@kotlin.String(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toFloat(): kotlin/Float // kotlin.text/toFloat|toFloat@kotlin.String(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toFloatOrNull(): kotlin/Float? // kotlin.text/toFloatOrNull|toFloatOrNull@kotlin.String(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toLowerCase(): kotlin/String // kotlin.text/toLowerCase|toLowerCase@kotlin.String(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toUpperCase(): kotlin/String // kotlin.text/toUpperCase|toUpperCase@kotlin.String(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/uppercase(): kotlin/String // kotlin.text/uppercase|uppercase@kotlin.String(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UByteArray).kotlin.collections/contentEquals(kotlin/UByteArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.UByteArray(kotlin.UByteArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UByteArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.UByteArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UByteArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.UByteArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UIntArray).kotlin.collections/contentEquals(kotlin/UIntArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.UIntArray(kotlin.UIntArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UIntArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.UIntArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UIntArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.UIntArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ULongArray).kotlin.collections/contentEquals(kotlin/ULongArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.ULongArray(kotlin.ULongArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ULongArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.ULongArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/ULongArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.ULongArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UShortArray).kotlin.collections/contentEquals(kotlin/UShortArray): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.UShortArray(kotlin.UShortArray){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UShortArray).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.UShortArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun (kotlin/UShortArray).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.UShortArray(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/linkedMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlin.collections/HashMap<#A, #B> // kotlin.collections/linkedMapOf|linkedMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/copyOf(): kotlin/Array<#A> // kotlin.collections/copyOf|copyOf@kotlin.Array<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/copyOf(kotlin/Int): kotlin/Array<#A?> // kotlin.collections/copyOf|copyOf@kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/Array<#A> // kotlin.collections/copyOfRange|copyOfRange@kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/plus(#A): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/plus(kotlin.collections/Collection<#A>): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<0:0>(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/plus(kotlin/Array<out #A>): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/contentEquals(kotlin/Array<out #A>): kotlin/Boolean // kotlin.collections/contentEquals|contentEquals@kotlin.Array<out|0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/contentHashCode(): kotlin/Int // kotlin.collections/contentHashCode|contentHashCode@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/contentToString(): kotlin/String // kotlin.collections/contentToString|contentToString@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/copyInto(kotlin/Array<#A>, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/Array<#A> // kotlin.collections/copyInto|copyInto@kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> kotlin.collections/linkedSetOf(kotlin/Array<out #A>...): kotlin.collections/HashSet<#A> // kotlin.collections/linkedSetOf|linkedSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/abs(kotlin/Double): kotlin/Double // kotlin.math/abs|abs(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/abs(kotlin/Float): kotlin/Float // kotlin.math/abs|abs(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/acos(kotlin/Double): kotlin/Double // kotlin.math/acos|acos(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/acos(kotlin/Float): kotlin/Float // kotlin.math/acos|acos(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/acosh(kotlin/Double): kotlin/Double // kotlin.math/acosh|acosh(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/acosh(kotlin/Float): kotlin/Float // kotlin.math/acosh|acosh(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/asin(kotlin/Double): kotlin/Double // kotlin.math/asin|asin(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/asin(kotlin/Float): kotlin/Float // kotlin.math/asin|asin(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/asinh(kotlin/Double): kotlin/Double // kotlin.math/asinh|asinh(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/asinh(kotlin/Float): kotlin/Float // kotlin.math/asinh|asinh(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/atan(kotlin/Double): kotlin/Double // kotlin.math/atan|atan(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/atan(kotlin/Float): kotlin/Float // kotlin.math/atan|atan(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/atan2(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/atan2|atan2(kotlin.Double;kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/atan2(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/atan2|atan2(kotlin.Float;kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/atanh(kotlin/Double): kotlin/Double // kotlin.math/atanh|atanh(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/atanh(kotlin/Float): kotlin/Float // kotlin.math/atanh|atanh(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/cbrt(kotlin/Double): kotlin/Double // kotlin.math/cbrt|cbrt(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/cbrt(kotlin/Float): kotlin/Float // kotlin.math/cbrt|cbrt(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/ceil(kotlin/Double): kotlin/Double // kotlin.math/ceil|ceil(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/ceil(kotlin/Float): kotlin/Float // kotlin.math/ceil|ceil(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/cos(kotlin/Double): kotlin/Double // kotlin.math/cos|cos(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/cos(kotlin/Float): kotlin/Float // kotlin.math/cos|cos(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/cosh(kotlin/Double): kotlin/Double // kotlin.math/cosh|cosh(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/cosh(kotlin/Float): kotlin/Float // kotlin.math/cosh|cosh(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/exp(kotlin/Double): kotlin/Double // kotlin.math/exp|exp(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/exp(kotlin/Float): kotlin/Float // kotlin.math/exp|exp(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/expm1(kotlin/Double): kotlin/Double // kotlin.math/expm1|expm1(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/expm1(kotlin/Float): kotlin/Float // kotlin.math/expm1|expm1(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/floor(kotlin/Double): kotlin/Double // kotlin.math/floor|floor(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/floor(kotlin/Float): kotlin/Float // kotlin.math/floor|floor(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/hypot(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/hypot|hypot(kotlin.Double;kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/hypot(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/hypot|hypot(kotlin.Float;kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/ln(kotlin/Double): kotlin/Double // kotlin.math/ln|ln(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/ln(kotlin/Float): kotlin/Float // kotlin.math/ln|ln(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/ln1p(kotlin/Double): kotlin/Double // kotlin.math/ln1p|ln1p(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/ln1p(kotlin/Float): kotlin/Float // kotlin.math/ln1p|ln1p(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/log(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/log|log(kotlin.Float;kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/log10(kotlin/Double): kotlin/Double // kotlin.math/log10|log10(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/log10(kotlin/Float): kotlin/Float // kotlin.math/log10|log10(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/log2(kotlin/Double): kotlin/Double // kotlin.math/log2|log2(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/log2(kotlin/Float): kotlin/Float // kotlin.math/log2|log2(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/max(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/max|max(kotlin.Double;kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/max(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/max|max(kotlin.Float;kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/max(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.math/max|max(kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/max(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.math/max|max(kotlin.Long;kotlin.Long){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/min(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/min|min(kotlin.Double;kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/min(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/min|min(kotlin.Float;kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/min(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.math/min|min(kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/min(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.math/min|min(kotlin.Long;kotlin.Long){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/round(kotlin/Float): kotlin/Float // kotlin.math/round|round(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sign(kotlin/Double): kotlin/Double // kotlin.math/sign|sign(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sign(kotlin/Float): kotlin/Float // kotlin.math/sign|sign(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sin(kotlin/Double): kotlin/Double // kotlin.math/sin|sin(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sin(kotlin/Float): kotlin/Float // kotlin.math/sin|sin(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sinh(kotlin/Double): kotlin/Double // kotlin.math/sinh|sinh(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sinh(kotlin/Float): kotlin/Float // kotlin.math/sinh|sinh(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sqrt(kotlin/Double): kotlin/Double // kotlin.math/sqrt|sqrt(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/sqrt(kotlin/Float): kotlin/Float // kotlin.math/sqrt|sqrt(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/tan(kotlin/Double): kotlin/Double // kotlin.math/tan|tan(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/tan(kotlin/Float): kotlin/Float // kotlin.math/tan|tan(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/tanh(kotlin/Double): kotlin/Double // kotlin.math/tanh|tanh(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/tanh(kotlin/Float): kotlin/Float // kotlin.math/tanh|tanh(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/truncate(kotlin/Double): kotlin/Double // kotlin.math/truncate|truncate(kotlin.Double){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin.math/truncate(kotlin/Float): kotlin/Float // kotlin.math/truncate|truncate(kotlin.Float){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin/isAssertionArgumentEvaluationEnabled(): kotlin/Boolean // kotlin/isAssertionArgumentEvaluationEnabled|isAssertionArgumentEvaluationEnabled(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final fun kotlin/isAssertionThrowingErrorEnabled(): kotlin/Boolean // kotlin/isAssertionThrowingErrorEnabled|isAssertionThrowingErrorEnabled(){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin.text/StringBuilder).kotlin.text/deleteCharAt(kotlin/Int): kotlin.text/StringBuilder // kotlin.text/deleteCharAt|deleteCharAt@kotlin.text.StringBuilder(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin.text/StringBuilder).kotlin.text/insert(kotlin/Int, kotlin/CharSequence?, kotlin/Int, kotlin/Int): kotlin.text/StringBuilder // kotlin.text/insert|insert@kotlin.text.StringBuilder(kotlin.Int;kotlin.CharSequence?;kotlin.Int;kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin.text/StringBuilder).kotlin.text/setCharAt(kotlin/Int, kotlin/Char) // kotlin.text/setCharAt|setCharAt@kotlin.text.StringBuilder(kotlin.Int;kotlin.Char){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/BooleanArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Boolean // kotlin.collections/elementAt|elementAt@kotlin.BooleanArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/ByteArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Byte // kotlin.collections/elementAt|elementAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/CharArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Char // kotlin.collections/elementAt|elementAt@kotlin.CharArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/CharSequence).kotlin.text/elementAt(kotlin/Int): kotlin/Char // kotlin.text/elementAt|elementAt@kotlin.CharSequence(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/DoubleArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Double // kotlin.collections/elementAt|elementAt@kotlin.DoubleArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/FloatArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Float // kotlin.collections/elementAt|elementAt@kotlin.FloatArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/IntArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Int // kotlin.collections/elementAt|elementAt@kotlin.IntArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/LongArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Long // kotlin.collections/elementAt|elementAt@kotlin.LongArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/ShortArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Short // kotlin.collections/elementAt|elementAt@kotlin.ShortArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/UByteArray).kotlin.collections/elementAt(kotlin/Int): kotlin/UByte // kotlin.collections/elementAt|elementAt@kotlin.UByteArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/UIntArray).kotlin.collections/elementAt(kotlin/Int): kotlin/UInt // kotlin.collections/elementAt|elementAt@kotlin.UIntArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/ULongArray).kotlin.collections/elementAt(kotlin/Int): kotlin/ULong // kotlin.collections/elementAt|elementAt@kotlin.ULongArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun (kotlin/UShortArray).kotlin.collections/elementAt(kotlin/Int): kotlin/UShort // kotlin.collections/elementAt|elementAt@kotlin.UShortArray(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/linkedMapOf(): kotlin.collections/HashMap<#A, #B> // kotlin.collections/linkedMapOf|linkedMapOf(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/elementAt(kotlin/Int): #A // kotlin.collections/elementAt|elementAt@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/subarrayContentToString(kotlin/Int, kotlin/Int, kotlin.collections/Collection<#A>): kotlin/String // kotlin.collections/subarrayContentToString|subarrayContentToString@kotlin.Array<out|0:0>(kotlin.Int;kotlin.Int;kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?> kotlin.collections/arrayOfUninitializedElements(kotlin/Int): kotlin/Array<#A> // kotlin.collections/arrayOfUninitializedElements|arrayOfUninitializedElements(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?> kotlin.collections/linkedSetOf(): kotlin.collections/HashSet<#A> // kotlin.collections/linkedSetOf|linkedSetOf(){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun <#A: reified kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/orEmpty(): kotlin/Array<out #A> // kotlin.collections/orEmpty|orEmpty@kotlin.Array<out|0:0>?(){0§<kotlin.Any?>}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun kotlin.collections/checkCountOverflow(kotlin/Int): kotlin/Int // kotlin.collections/checkCountOverflow|checkCountOverflow(kotlin.Int){}[0]

// Targets: [native, wasmJs, wasmWasi]
final inline fun kotlin.collections/checkIndexOverflow(kotlin/Int): kotlin/Int // kotlin.collections/checkIndexOverflow|checkIndexOverflow(kotlin.Int){}[0]

// Targets: [js, native]
final fun (kotlin/Long).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.Long(){}[0]

// Targets: [js, native]
final fun (kotlin/Long).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.Long(){}[0]

// Targets: [js, native]
final fun kotlin/uintCompare(kotlin/Int, kotlin/Int): kotlin/Int // kotlin/uintCompare|uintCompare(kotlin.Int;kotlin.Int){}[0]

// Targets: [js, native]
final fun kotlin/ulongCompare(kotlin/Long, kotlin/Long): kotlin/Int // kotlin/ulongCompare|ulongCompare(kotlin.Long;kotlin.Long){}[0]

// Targets: [js, native]
final inline fun (kotlin/Byte).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Byte(kotlin.Int){}[0]

// Targets: [js, native]
final inline fun (kotlin/Double.Companion).kotlin/fromBits(kotlin/Long): kotlin/Double // kotlin/fromBits|fromBits@kotlin.Double.Companion(kotlin.Long){}[0]

// Targets: [js, native]
final inline fun (kotlin/Float.Companion).kotlin/fromBits(kotlin/Int): kotlin/Float // kotlin/fromBits|fromBits@kotlin.Float.Companion(kotlin.Int){}[0]

// Targets: [js, native]
final inline fun (kotlin/Short).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Short(kotlin.Int){}[0]

// Targets: [js, native]
final inline fun (kotlin/String).kotlin.text/substring(kotlin/Int): kotlin/String // kotlin.text/substring|substring@kotlin.String(kotlin.Int){}[0]

// Targets: [js, native]
final inline fun (kotlin/String).kotlin.text/substring(kotlin/Int, kotlin/Int): kotlin/String // kotlin.text/substring|substring@kotlin.String(kotlin.Int;kotlin.Int){}[0]

// Targets: [js, native]
final inline fun kotlin/floatToUInt(kotlin/Float): kotlin/UInt // kotlin/floatToUInt|floatToUInt(kotlin.Float){}[0]

// Targets: [js, native]
final inline fun kotlin/floatToULong(kotlin/Float): kotlin/ULong // kotlin/floatToULong|floatToULong(kotlin.Float){}[0]

// Targets: [js, native]
final inline fun kotlin/uintToFloat(kotlin/Int): kotlin/Float // kotlin/uintToFloat|uintToFloat(kotlin.Int){}[0]

// Targets: [js, native]
final inline fun kotlin/uintToLong(kotlin/Int): kotlin/Long // kotlin/uintToLong|uintToLong(kotlin.Int){}[0]

// Targets: [js, native]
final inline fun kotlin/uintToULong(kotlin/Int): kotlin/ULong // kotlin/uintToULong|uintToULong(kotlin.Int){}[0]

// Targets: [js, native]
final inline fun kotlin/ulongToFloat(kotlin/Long): kotlin/Float // kotlin/ulongToFloat|ulongToFloat(kotlin.Long){}[0]

// Targets: [native, wasmWasi]
open annotation class kotlin.js/JsExport : kotlin/Annotation { // kotlin.js/JsExport|null[1]
    constructor <init>() // kotlin.js/JsExport.<init>|<init>(){}[1]

    open annotation class Ignore : kotlin/Annotation { // kotlin.js/JsExport.Ignore|null[1]
        constructor <init>() // kotlin.js/JsExport.Ignore.<init>|<init>(){}[1]
    }
}

// Targets: [native, wasmWasi]
open annotation class kotlin.js/JsName : kotlin/Annotation { // kotlin.js/JsName|null[1]
    constructor <init>(kotlin/String) // kotlin.js/JsName.<init>|<init>(kotlin.String){}[1]

    final val name // kotlin.js/JsName.name|{}name[1]
        final fun <get-name>(): kotlin/String // kotlin.js/JsName.name.<get-name>|<get-name>(){}[1]
}

// Targets: [native]
open annotation class kotlin.concurrent/Volatile : kotlin/Annotation { // kotlin.concurrent/Volatile|null[0]
    constructor <init>() // kotlin.concurrent/Volatile.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.concurrent/SharedImmutable : kotlin/Annotation { // kotlin.native.concurrent/SharedImmutable|null[0]
    constructor <init>() // kotlin.native.concurrent/SharedImmutable.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.concurrent/ThreadLocal : kotlin/Annotation { // kotlin.native.concurrent/ThreadLocal|null[0]
    constructor <init>() // kotlin.native.concurrent/ThreadLocal.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal.objc/BindClassToObjCName : kotlin/Annotation { // kotlin.native.internal.objc/BindClassToObjCName|null[0]
    constructor <init>(kotlin.reflect/KClass<*>, kotlin/String) // kotlin.native.internal.objc/BindClassToObjCName.<init>|<init>(kotlin.reflect.KClass<*>;kotlin.String){}[0]

    final val kotlinClass // kotlin.native.internal.objc/BindClassToObjCName.kotlinClass|{}kotlinClass[0]
        final fun <get-kotlinClass>(): kotlin.reflect/KClass<*> // kotlin.native.internal.objc/BindClassToObjCName.kotlinClass.<get-kotlinClass>|<get-kotlinClass>(){}[0]
    final val objCName // kotlin.native.internal.objc/BindClassToObjCName.objCName|{}objCName[0]
        final fun <get-objCName>(): kotlin/String // kotlin.native.internal.objc/BindClassToObjCName.objCName.<get-objCName>|<get-objCName>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/CanBePrecreated : kotlin/Annotation { // kotlin.native.internal/CanBePrecreated|null[0]
    constructor <init>() // kotlin.native.internal/CanBePrecreated.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/ExportForCompiler : kotlin/Annotation { // kotlin.native.internal/ExportForCompiler|null[0]
    constructor <init>() // kotlin.native.internal/ExportForCompiler.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/ExportForCppRuntime : kotlin/Annotation { // kotlin.native.internal/ExportForCppRuntime|null[0]
    constructor <init>(kotlin/String = ...) // kotlin.native.internal/ExportForCppRuntime.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin.native.internal/ExportForCppRuntime.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/ExportForCppRuntime.name.<get-name>|<get-name>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/ExportTypeInfo : kotlin/Annotation { // kotlin.native.internal/ExportTypeInfo|null[0]
    constructor <init>(kotlin/String) // kotlin.native.internal/ExportTypeInfo.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin.native.internal/ExportTypeInfo.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/ExportTypeInfo.name.<get-name>|<get-name>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/ExportedBridge : kotlin/Annotation { // kotlin.native.internal/ExportedBridge|null[0]
    constructor <init>(kotlin/String) // kotlin.native.internal/ExportedBridge.<init>|<init>(kotlin.String){}[0]

    final val bridgeName // kotlin.native.internal/ExportedBridge.bridgeName|{}bridgeName[0]
        final fun <get-bridgeName>(): kotlin/String // kotlin.native.internal/ExportedBridge.bridgeName.<get-bridgeName>|<get-bridgeName>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/FilterExceptions : kotlin/Annotation { // kotlin.native.internal/FilterExceptions|null[0]
    constructor <init>(kotlin/String = ...) // kotlin.native.internal/FilterExceptions.<init>|<init>(kotlin.String){}[0]

    final val mode // kotlin.native.internal/FilterExceptions.mode|{}mode[0]
        final fun <get-mode>(): kotlin/String // kotlin.native.internal/FilterExceptions.mode.<get-mode>|<get-mode>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/GCUnsafeCall : kotlin/Annotation { // kotlin.native.internal/GCUnsafeCall|null[0]
    constructor <init>(kotlin/String) // kotlin.native.internal/GCUnsafeCall.<init>|<init>(kotlin.String){}[0]

    final val callee // kotlin.native.internal/GCUnsafeCall.callee|{}callee[0]
        final fun <get-callee>(): kotlin/String // kotlin.native.internal/GCUnsafeCall.callee.<get-callee>|<get-callee>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/Independent : kotlin/Annotation { // kotlin.native.internal/Independent|null[0]
    constructor <init>() // kotlin.native.internal/Independent.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/LeakDetectorCandidate : kotlin/Annotation { // kotlin.native.internal/LeakDetectorCandidate|null[0]
    constructor <init>() // kotlin.native.internal/LeakDetectorCandidate.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.internal/ReflectionPackageName : kotlin/Annotation { // kotlin.native.internal/ReflectionPackageName|null[0]
    constructor <init>(kotlin/String) // kotlin.native.internal/ReflectionPackageName.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin.native.internal/ReflectionPackageName.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/ReflectionPackageName.name.<get-name>|<get-name>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native.runtime/NativeRuntimeApi : kotlin/Annotation { // kotlin.native.runtime/NativeRuntimeApi|null[0]
    constructor <init>() // kotlin.native.runtime/NativeRuntimeApi.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/CName : kotlin/Annotation { // kotlin.native/CName|null[0]
    constructor <init>(kotlin/String = ..., kotlin/String = ...) // kotlin.native/CName.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val externName // kotlin.native/CName.externName|{}externName[0]
        final fun <get-externName>(): kotlin/String // kotlin.native/CName.externName.<get-externName>|<get-externName>(){}[0]
    final val shortName // kotlin.native/CName.shortName|{}shortName[0]
        final fun <get-shortName>(): kotlin/String // kotlin.native/CName.shortName.<get-shortName>|<get-shortName>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/EagerInitialization : kotlin/Annotation { // kotlin.native/EagerInitialization|null[0]
    constructor <init>() // kotlin.native/EagerInitialization.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/HiddenFromObjC : kotlin/Annotation { // kotlin.native/HiddenFromObjC|null[0]
    constructor <init>() // kotlin.native/HiddenFromObjC.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/HidesFromObjC : kotlin/Annotation { // kotlin.native/HidesFromObjC|null[0]
    constructor <init>() // kotlin.native/HidesFromObjC.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/NoInline : kotlin/Annotation { // kotlin.native/NoInline|null[0]
    constructor <init>() // kotlin.native/NoInline.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/ObjCName : kotlin/Annotation { // kotlin.native/ObjCName|null[0]
    constructor <init>(kotlin/String = ..., kotlin/String = ..., kotlin/Boolean = ...) // kotlin.native/ObjCName.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean){}[0]

    final val exact // kotlin.native/ObjCName.exact|{}exact[0]
        final fun <get-exact>(): kotlin/Boolean // kotlin.native/ObjCName.exact.<get-exact>|<get-exact>(){}[0]
    final val name // kotlin.native/ObjCName.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native/ObjCName.name.<get-name>|<get-name>(){}[0]
    final val swiftName // kotlin.native/ObjCName.swiftName|{}swiftName[0]
        final fun <get-swiftName>(): kotlin/String // kotlin.native/ObjCName.swiftName.<get-swiftName>|<get-swiftName>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/ObsoleteNativeApi : kotlin/Annotation { // kotlin.native/ObsoleteNativeApi|null[0]
    constructor <init>() // kotlin.native/ObsoleteNativeApi.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/RefinesInSwift : kotlin/Annotation { // kotlin.native/RefinesInSwift|null[0]
    constructor <init>() // kotlin.native/RefinesInSwift.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/ShouldRefineInSwift : kotlin/Annotation { // kotlin.native/ShouldRefineInSwift|null[0]
    constructor <init>() // kotlin.native/ShouldRefineInSwift.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.native/SymbolName : kotlin/Annotation { // kotlin.native/SymbolName|null[0]
    constructor <init>(kotlin/String) // kotlin.native/SymbolName.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin.native/SymbolName.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native/SymbolName.name.<get-name>|<get-name>(){}[0]
}

// Targets: [native]
open annotation class kotlin.test/AfterClass : kotlin/Annotation { // kotlin.test/AfterClass|null[0]
    constructor <init>() // kotlin.test/AfterClass.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.test/AfterTest : kotlin/Annotation { // kotlin.test/AfterTest|null[0]
    constructor <init>() // kotlin.test/AfterTest.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.test/BeforeClass : kotlin/Annotation { // kotlin.test/BeforeClass|null[0]
    constructor <init>() // kotlin.test/BeforeClass.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.test/BeforeTest : kotlin/Annotation { // kotlin.test/BeforeTest|null[0]
    constructor <init>() // kotlin.test/BeforeTest.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.test/Ignore : kotlin/Annotation { // kotlin.test/Ignore|null[0]
    constructor <init>() // kotlin.test/Ignore.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin.test/Test : kotlin/Annotation { // kotlin.test/Test|null[0]
    constructor <init>() // kotlin.test/Test.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlin/Throws : kotlin/Annotation { // kotlin/Throws|null[0]
    constructor <init>(kotlin/Array<out kotlin.reflect/KClass<out kotlin/Throwable>>...) // kotlin/Throws.<init>|<init>(kotlin.Array<out|kotlin.reflect.KClass<out|kotlin.Throwable>>...){}[0]

    final val exceptionClasses // kotlin/Throws.exceptionClasses|{}exceptionClasses[0]
        final fun <get-exceptionClasses>(): kotlin/Array<out kotlin.reflect/KClass<out kotlin/Throwable>> // kotlin/Throws.exceptionClasses.<get-exceptionClasses>|<get-exceptionClasses>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop.internal/CCall : kotlin/Annotation { // kotlinx.cinterop.internal/CCall|null[0]
    constructor <init>(kotlin/String) // kotlinx.cinterop.internal/CCall.<init>|<init>(kotlin.String){}[0]

    final val id // kotlinx.cinterop.internal/CCall.id|{}id[0]
        final fun <get-id>(): kotlin/String // kotlinx.cinterop.internal/CCall.id.<get-id>|<get-id>(){}[0]

    open annotation class CString : kotlin/Annotation { // kotlinx.cinterop.internal/CCall.CString|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CCall.CString.<init>|<init>(){}[0]
    }

    open annotation class Consumed : kotlin/Annotation { // kotlinx.cinterop.internal/CCall.Consumed|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CCall.Consumed.<init>|<init>(){}[0]
    }

    open annotation class ConsumesReceiver : kotlin/Annotation { // kotlinx.cinterop.internal/CCall.ConsumesReceiver|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CCall.ConsumesReceiver.<init>|<init>(){}[0]
    }

    open annotation class CppClassConstructor : kotlin/Annotation { // kotlinx.cinterop.internal/CCall.CppClassConstructor|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CCall.CppClassConstructor.<init>|<init>(){}[0]
    }

    open annotation class ReturnsRetained : kotlin/Annotation { // kotlinx.cinterop.internal/CCall.ReturnsRetained|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CCall.ReturnsRetained.<init>|<init>(){}[0]
    }

    open annotation class WCString : kotlin/Annotation { // kotlinx.cinterop.internal/CCall.WCString|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CCall.WCString.<init>|<init>(){}[0]
    }
}

// Targets: [native]
open annotation class kotlinx.cinterop.internal/CEnumEntryAlias : kotlin/Annotation { // kotlinx.cinterop.internal/CEnumEntryAlias|null[0]
    constructor <init>(kotlin/String) // kotlinx.cinterop.internal/CEnumEntryAlias.<init>|<init>(kotlin.String){}[0]

    final val entryName // kotlinx.cinterop.internal/CEnumEntryAlias.entryName|{}entryName[0]
        final fun <get-entryName>(): kotlin/String // kotlinx.cinterop.internal/CEnumEntryAlias.entryName.<get-entryName>|<get-entryName>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop.internal/CEnumVarTypeSize : kotlin/Annotation { // kotlinx.cinterop.internal/CEnumVarTypeSize|null[0]
    constructor <init>(kotlin/Int) // kotlinx.cinterop.internal/CEnumVarTypeSize.<init>|<init>(kotlin.Int){}[0]

    final val size // kotlinx.cinterop.internal/CEnumVarTypeSize.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlinx.cinterop.internal/CEnumVarTypeSize.size.<get-size>|<get-size>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop.internal/CStruct : kotlin/Annotation { // kotlinx.cinterop.internal/CStruct|null[0]
    constructor <init>(kotlin/String) // kotlinx.cinterop.internal/CStruct.<init>|<init>(kotlin.String){}[0]

    final val spelling // kotlinx.cinterop.internal/CStruct.spelling|{}spelling[0]
        final fun <get-spelling>(): kotlin/String // kotlinx.cinterop.internal/CStruct.spelling.<get-spelling>|<get-spelling>(){}[0]

    open annotation class ArrayMemberAt : kotlin/Annotation { // kotlinx.cinterop.internal/CStruct.ArrayMemberAt|null[0]
        constructor <init>(kotlin/Long) // kotlinx.cinterop.internal/CStruct.ArrayMemberAt.<init>|<init>(kotlin.Long){}[0]

        final val offset // kotlinx.cinterop.internal/CStruct.ArrayMemberAt.offset|{}offset[0]
            final fun <get-offset>(): kotlin/Long // kotlinx.cinterop.internal/CStruct.ArrayMemberAt.offset.<get-offset>|<get-offset>(){}[0]
    }

    open annotation class BitField : kotlin/Annotation { // kotlinx.cinterop.internal/CStruct.BitField|null[0]
        constructor <init>(kotlin/Long, kotlin/Int) // kotlinx.cinterop.internal/CStruct.BitField.<init>|<init>(kotlin.Long;kotlin.Int){}[0]

        final val offset // kotlinx.cinterop.internal/CStruct.BitField.offset|{}offset[0]
            final fun <get-offset>(): kotlin/Long // kotlinx.cinterop.internal/CStruct.BitField.offset.<get-offset>|<get-offset>(){}[0]
        final val size // kotlinx.cinterop.internal/CStruct.BitField.size|{}size[0]
            final fun <get-size>(): kotlin/Int // kotlinx.cinterop.internal/CStruct.BitField.size.<get-size>|<get-size>(){}[0]
    }

    open annotation class CPlusPlusClass : kotlin/Annotation { // kotlinx.cinterop.internal/CStruct.CPlusPlusClass|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CStruct.CPlusPlusClass.<init>|<init>(){}[0]
    }

    open annotation class ManagedType : kotlin/Annotation { // kotlinx.cinterop.internal/CStruct.ManagedType|null[0]
        constructor <init>() // kotlinx.cinterop.internal/CStruct.ManagedType.<init>|<init>(){}[0]
    }

    open annotation class MemberAt : kotlin/Annotation { // kotlinx.cinterop.internal/CStruct.MemberAt|null[0]
        constructor <init>(kotlin/Long) // kotlinx.cinterop.internal/CStruct.MemberAt.<init>|<init>(kotlin.Long){}[0]

        final val offset // kotlinx.cinterop.internal/CStruct.MemberAt.offset|{}offset[0]
            final fun <get-offset>(): kotlin/Long // kotlinx.cinterop.internal/CStruct.MemberAt.offset.<get-offset>|<get-offset>(){}[0]
    }

    open annotation class VarType : kotlin/Annotation { // kotlinx.cinterop.internal/CStruct.VarType|null[0]
        constructor <init>(kotlin/Long, kotlin/Int) // kotlinx.cinterop.internal/CStruct.VarType.<init>|<init>(kotlin.Long;kotlin.Int){}[0]

        final val align // kotlinx.cinterop.internal/CStruct.VarType.align|{}align[0]
            final fun <get-align>(): kotlin/Int // kotlinx.cinterop.internal/CStruct.VarType.align.<get-align>|<get-align>(){}[0]
        final val size // kotlinx.cinterop.internal/CStruct.VarType.size|{}size[0]
            final fun <get-size>(): kotlin/Long // kotlinx.cinterop.internal/CStruct.VarType.size.<get-size>|<get-size>(){}[0]
    }
}

// Targets: [native]
open annotation class kotlinx.cinterop/BetaInteropApi : kotlin/Annotation { // kotlinx.cinterop/BetaInteropApi|null[0]
    constructor <init>() // kotlinx.cinterop/BetaInteropApi.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ExperimentalForeignApi : kotlin/Annotation { // kotlinx.cinterop/ExperimentalForeignApi|null[0]
    constructor <init>() // kotlinx.cinterop/ExperimentalForeignApi.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ExportObjCClass : kotlin/Annotation { // kotlinx.cinterop/ExportObjCClass|null[0]
    constructor <init>(kotlin/String = ...) // kotlinx.cinterop/ExportObjCClass.<init>|<init>(kotlin.String){}[0]

    final val name // kotlinx.cinterop/ExportObjCClass.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlinx.cinterop/ExportObjCClass.name.<get-name>|<get-name>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ExternalObjCClass : kotlin/Annotation { // kotlinx.cinterop/ExternalObjCClass|null[0]
    constructor <init>(kotlin/String = ..., kotlin/String = ...) // kotlinx.cinterop/ExternalObjCClass.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val binaryName // kotlinx.cinterop/ExternalObjCClass.binaryName|{}binaryName[0]
        final fun <get-binaryName>(): kotlin/String // kotlinx.cinterop/ExternalObjCClass.binaryName.<get-binaryName>|<get-binaryName>(){}[0]
    final val protocolGetter // kotlinx.cinterop/ExternalObjCClass.protocolGetter|{}protocolGetter[0]
        final fun <get-protocolGetter>(): kotlin/String // kotlinx.cinterop/ExternalObjCClass.protocolGetter.<get-protocolGetter>|<get-protocolGetter>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/InteropStubs : kotlin/Annotation { // kotlinx.cinterop/InteropStubs|null[0]
    constructor <init>() // kotlinx.cinterop/InteropStubs.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCAction : kotlin/Annotation { // kotlinx.cinterop/ObjCAction|null[0]
    constructor <init>() // kotlinx.cinterop/ObjCAction.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCConstructor : kotlin/Annotation { // kotlinx.cinterop/ObjCConstructor|null[0]
    constructor <init>(kotlin/String, kotlin/Boolean) // kotlinx.cinterop/ObjCConstructor.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]

    final val designated // kotlinx.cinterop/ObjCConstructor.designated|{}designated[0]
        final fun <get-designated>(): kotlin/Boolean // kotlinx.cinterop/ObjCConstructor.designated.<get-designated>|<get-designated>(){}[0]
    final val initSelector // kotlinx.cinterop/ObjCConstructor.initSelector|{}initSelector[0]
        final fun <get-initSelector>(): kotlin/String // kotlinx.cinterop/ObjCConstructor.initSelector.<get-initSelector>|<get-initSelector>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCDirect : kotlin/Annotation { // kotlinx.cinterop/ObjCDirect|null[0]
    constructor <init>(kotlin/String) // kotlinx.cinterop/ObjCDirect.<init>|<init>(kotlin.String){}[0]

    final val symbol // kotlinx.cinterop/ObjCDirect.symbol|{}symbol[0]
        final fun <get-symbol>(): kotlin/String // kotlinx.cinterop/ObjCDirect.symbol.<get-symbol>|<get-symbol>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCFactory : kotlin/Annotation { // kotlinx.cinterop/ObjCFactory|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Boolean = ...) // kotlinx.cinterop/ObjCFactory.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean){}[0]

    final val encoding // kotlinx.cinterop/ObjCFactory.encoding|{}encoding[0]
        final fun <get-encoding>(): kotlin/String // kotlinx.cinterop/ObjCFactory.encoding.<get-encoding>|<get-encoding>(){}[0]
    final val isStret // kotlinx.cinterop/ObjCFactory.isStret|{}isStret[0]
        final fun <get-isStret>(): kotlin/Boolean // kotlinx.cinterop/ObjCFactory.isStret.<get-isStret>|<get-isStret>(){}[0]
    final val selector // kotlinx.cinterop/ObjCFactory.selector|{}selector[0]
        final fun <get-selector>(): kotlin/String // kotlinx.cinterop/ObjCFactory.selector.<get-selector>|<get-selector>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCMethod : kotlin/Annotation { // kotlinx.cinterop/ObjCMethod|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Boolean = ...) // kotlinx.cinterop/ObjCMethod.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean){}[0]

    final val encoding // kotlinx.cinterop/ObjCMethod.encoding|{}encoding[0]
        final fun <get-encoding>(): kotlin/String // kotlinx.cinterop/ObjCMethod.encoding.<get-encoding>|<get-encoding>(){}[0]
    final val isStret // kotlinx.cinterop/ObjCMethod.isStret|{}isStret[0]
        final fun <get-isStret>(): kotlin/Boolean // kotlinx.cinterop/ObjCMethod.isStret.<get-isStret>|<get-isStret>(){}[0]
    final val selector // kotlinx.cinterop/ObjCMethod.selector|{}selector[0]
        final fun <get-selector>(): kotlin/String // kotlinx.cinterop/ObjCMethod.selector.<get-selector>|<get-selector>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCMethodImp : kotlin/Annotation { // kotlinx.cinterop/ObjCMethodImp|null[0]
    constructor <init>(kotlin/String, kotlin/String) // kotlinx.cinterop/ObjCMethodImp.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val encoding // kotlinx.cinterop/ObjCMethodImp.encoding|{}encoding[0]
        final fun <get-encoding>(): kotlin/String // kotlinx.cinterop/ObjCMethodImp.encoding.<get-encoding>|<get-encoding>(){}[0]
    final val selector // kotlinx.cinterop/ObjCMethodImp.selector|{}selector[0]
        final fun <get-selector>(): kotlin/String // kotlinx.cinterop/ObjCMethodImp.selector.<get-selector>|<get-selector>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCOutlet : kotlin/Annotation { // kotlinx.cinterop/ObjCOutlet|null[0]
    constructor <init>() // kotlinx.cinterop/ObjCOutlet.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/ObjCSignatureOverride : kotlin/Annotation { // kotlinx.cinterop/ObjCSignatureOverride|null[0]
    constructor <init>() // kotlinx.cinterop/ObjCSignatureOverride.<init>|<init>(){}[0]
}

// Targets: [native]
open annotation class kotlinx.cinterop/UnsafeNumber : kotlin/Annotation { // kotlinx.cinterop/UnsafeNumber|null[0]
    constructor <init>(kotlin/Array<kotlin/String>) // kotlinx.cinterop/UnsafeNumber.<init>|<init>(kotlin.Array<kotlin.String>){}[0]

    final val actualPlatformTypes // kotlinx.cinterop/UnsafeNumber.actualPlatformTypes|{}actualPlatformTypes[0]
        final fun <get-actualPlatformTypes>(): kotlin/Array<kotlin/String> // kotlinx.cinterop/UnsafeNumber.actualPlatformTypes.<get-actualPlatformTypes>|<get-actualPlatformTypes>(){}[0]
}

// Targets: [native]
final enum class kotlin.native.concurrent/FutureState : kotlin/Enum<kotlin.native.concurrent/FutureState> { // kotlin.native.concurrent/FutureState|null[0]
    enum entry CANCELLED // kotlin.native.concurrent/FutureState.CANCELLED|null[0]
    enum entry COMPUTED // kotlin.native.concurrent/FutureState.COMPUTED|null[0]
    enum entry INVALID // kotlin.native.concurrent/FutureState.INVALID|null[0]
    enum entry SCHEDULED // kotlin.native.concurrent/FutureState.SCHEDULED|null[0]
    enum entry THROWN // kotlin.native.concurrent/FutureState.THROWN|null[0]

    final val entries // kotlin.native.concurrent/FutureState.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.native.concurrent/FutureState> // kotlin.native.concurrent/FutureState.entries.<get-entries>|<get-entries>#static(){}[0]
    final val value // kotlin.native.concurrent/FutureState.value|{}value[0]
        final fun <get-value>(): kotlin/Int // kotlin.native.concurrent/FutureState.value.<get-value>|<get-value>(){}[0]

    final fun valueOf(kotlin/String): kotlin.native.concurrent/FutureState // kotlin.native.concurrent/FutureState.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.native.concurrent/FutureState> // kotlin.native.concurrent/FutureState.values|values#static(){}[0]
}

// Targets: [native]
final enum class kotlin.native.concurrent/TransferMode : kotlin/Enum<kotlin.native.concurrent/TransferMode> { // kotlin.native.concurrent/TransferMode|null[0]
    enum entry SAFE // kotlin.native.concurrent/TransferMode.SAFE|null[0]
    enum entry UNSAFE // kotlin.native.concurrent/TransferMode.UNSAFE|null[0]

    final val entries // kotlin.native.concurrent/TransferMode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.native.concurrent/TransferMode> // kotlin.native.concurrent/TransferMode.entries.<get-entries>|<get-entries>#static(){}[0]
    final val value // kotlin.native.concurrent/TransferMode.value|{}value[0]
        final fun <get-value>(): kotlin/Int // kotlin.native.concurrent/TransferMode.value.<get-value>|<get-value>(){}[0]

    final fun valueOf(kotlin/String): kotlin.native.concurrent/TransferMode // kotlin.native.concurrent/TransferMode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.native.concurrent/TransferMode> // kotlin.native.concurrent/TransferMode.values|values#static(){}[0]
}

// Targets: [native]
final enum class kotlin.native.internal.test/TestFunctionKind : kotlin/Enum<kotlin.native.internal.test/TestFunctionKind> { // kotlin.native.internal.test/TestFunctionKind|null[0]
    enum entry AFTER_CLASS // kotlin.native.internal.test/TestFunctionKind.AFTER_CLASS|null[0]
    enum entry AFTER_TEST // kotlin.native.internal.test/TestFunctionKind.AFTER_TEST|null[0]
    enum entry BEFORE_CLASS // kotlin.native.internal.test/TestFunctionKind.BEFORE_CLASS|null[0]
    enum entry BEFORE_TEST // kotlin.native.internal.test/TestFunctionKind.BEFORE_TEST|null[0]

    final val entries // kotlin.native.internal.test/TestFunctionKind.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.native.internal.test/TestFunctionKind> // kotlin.native.internal.test/TestFunctionKind.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.native.internal.test/TestFunctionKind // kotlin.native.internal.test/TestFunctionKind.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.native.internal.test/TestFunctionKind> // kotlin.native.internal.test/TestFunctionKind.values|values#static(){}[0]
}

// Targets: [native]
final enum class kotlin.native/CpuArchitecture : kotlin/Enum<kotlin.native/CpuArchitecture> { // kotlin.native/CpuArchitecture|null[0]
    enum entry ARM32 // kotlin.native/CpuArchitecture.ARM32|null[0]
    enum entry ARM64 // kotlin.native/CpuArchitecture.ARM64|null[0]
    enum entry MIPS32 // kotlin.native/CpuArchitecture.MIPS32|null[0]
    enum entry MIPSEL32 // kotlin.native/CpuArchitecture.MIPSEL32|null[0]
    enum entry UNKNOWN // kotlin.native/CpuArchitecture.UNKNOWN|null[0]
    enum entry WASM32 // kotlin.native/CpuArchitecture.WASM32|null[0]
    enum entry X64 // kotlin.native/CpuArchitecture.X64|null[0]
    enum entry X86 // kotlin.native/CpuArchitecture.X86|null[0]

    final val bitness // kotlin.native/CpuArchitecture.bitness|{}bitness[0]
        final fun <get-bitness>(): kotlin/Int // kotlin.native/CpuArchitecture.bitness.<get-bitness>|<get-bitness>(){}[0]
    final val entries // kotlin.native/CpuArchitecture.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.native/CpuArchitecture> // kotlin.native/CpuArchitecture.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.native/CpuArchitecture // kotlin.native/CpuArchitecture.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.native/CpuArchitecture> // kotlin.native/CpuArchitecture.values|values#static(){}[0]
}

// Targets: [native]
final enum class kotlin.native/MemoryModel : kotlin/Enum<kotlin.native/MemoryModel> { // kotlin.native/MemoryModel|null[0]
    enum entry EXPERIMENTAL // kotlin.native/MemoryModel.EXPERIMENTAL|null[0]
    enum entry RELAXED // kotlin.native/MemoryModel.RELAXED|null[0]
    enum entry STRICT // kotlin.native/MemoryModel.STRICT|null[0]

    final val entries // kotlin.native/MemoryModel.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.native/MemoryModel> // kotlin.native/MemoryModel.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.native/MemoryModel // kotlin.native/MemoryModel.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.native/MemoryModel> // kotlin.native/MemoryModel.values|values#static(){}[0]
}

// Targets: [native]
final enum class kotlin.native/OsFamily : kotlin/Enum<kotlin.native/OsFamily> { // kotlin.native/OsFamily|null[0]
    enum entry ANDROID // kotlin.native/OsFamily.ANDROID|null[0]
    enum entry IOS // kotlin.native/OsFamily.IOS|null[0]
    enum entry LINUX // kotlin.native/OsFamily.LINUX|null[0]
    enum entry MACOSX // kotlin.native/OsFamily.MACOSX|null[0]
    enum entry TVOS // kotlin.native/OsFamily.TVOS|null[0]
    enum entry UNKNOWN // kotlin.native/OsFamily.UNKNOWN|null[0]
    enum entry WASM // kotlin.native/OsFamily.WASM|null[0]
    enum entry WATCHOS // kotlin.native/OsFamily.WATCHOS|null[0]
    enum entry WINDOWS // kotlin.native/OsFamily.WINDOWS|null[0]

    final val entries // kotlin.native/OsFamily.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlin.native/OsFamily> // kotlin.native/OsFamily.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotlin.native/OsFamily // kotlin.native/OsFamily.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlin.native/OsFamily> // kotlin.native/OsFamily.values|values#static(){}[0]
}

// Targets: [native]
abstract interface <#A: kotlin/Any> kotlin.reflect/KClass : kotlin.reflect/KAnnotatedElement, kotlin.reflect/KClassifier, kotlin.reflect/KDeclarationContainer { // kotlin.reflect/KClass|null[0]
    abstract val qualifiedName // kotlin.reflect/KClass.qualifiedName|{}qualifiedName[0]
        abstract fun <get-qualifiedName>(): kotlin/String? // kotlin.reflect/KClass.qualifiedName.<get-qualifiedName>|<get-qualifiedName>(){}[0]
    abstract val simpleName // kotlin.reflect/KClass.simpleName|{}simpleName[0]
        abstract fun <get-simpleName>(): kotlin/String? // kotlin.reflect/KClass.simpleName.<get-simpleName>|<get-simpleName>(){}[0]

    abstract fun equals(kotlin/Any?): kotlin/Boolean // kotlin.reflect/KClass.equals|equals(kotlin.Any?){}[0]
    abstract fun hashCode(): kotlin/Int // kotlin.reflect/KClass.hashCode|hashCode(){}[0]
    abstract fun isInstance(kotlin/Any?): kotlin/Boolean // kotlin.reflect/KClass.isInstance|isInstance(kotlin.Any?){}[0]
}

// Targets: [native]
abstract interface <#A: kotlinx.cinterop/ObjCObject> kotlinx.cinterop/ObjCClassOf : kotlinx.cinterop/ObjCClass // kotlinx.cinterop/ObjCClassOf|null[0]

// Targets: [native]
abstract interface <#A: out kotlin/Any?> kotlin.coroutines/SuspendFunction // kotlin.coroutines/SuspendFunction|null[0]

// Targets: [native]
abstract interface <#A: out kotlin/Any?> kotlin.reflect/KCallable : kotlin.reflect/KAnnotatedElement { // kotlin.reflect/KCallable|null[0]
    abstract val name // kotlin.reflect/KCallable.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // kotlin.reflect/KCallable.name.<get-name>|<get-name>(){}[0]
    abstract val returnType // kotlin.reflect/KCallable.returnType|{}returnType[0]
        abstract fun <get-returnType>(): kotlin.reflect/KType // kotlin.reflect/KCallable.returnType.<get-returnType>|<get-returnType>(){}[0]
}

// Targets: [native]
abstract interface kotlin.native.internal.test/TestCase { // kotlin.native.internal.test/TestCase|null[0]
    abstract val ignored // kotlin.native.internal.test/TestCase.ignored|{}ignored[0]
        abstract fun <get-ignored>(): kotlin/Boolean // kotlin.native.internal.test/TestCase.ignored.<get-ignored>|<get-ignored>(){}[0]
    abstract val name // kotlin.native.internal.test/TestCase.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // kotlin.native.internal.test/TestCase.name.<get-name>|<get-name>(){}[0]
    abstract val suite // kotlin.native.internal.test/TestCase.suite|{}suite[0]
        abstract fun <get-suite>(): kotlin.native.internal.test/TestSuite // kotlin.native.internal.test/TestCase.suite.<get-suite>|<get-suite>(){}[0]

    abstract fun doAfter() // kotlin.native.internal.test/TestCase.doAfter|doAfter(){}[0]
    abstract fun doBefore() // kotlin.native.internal.test/TestCase.doBefore|doBefore(){}[0]
    abstract fun doRun() // kotlin.native.internal.test/TestCase.doRun|doRun(){}[0]
    open fun run() // kotlin.native.internal.test/TestCase.run|run(){}[0]
}

// Targets: [native]
abstract interface kotlin.native.internal.test/TestSuite { // kotlin.native.internal.test/TestSuite|null[0]
    abstract val ignored // kotlin.native.internal.test/TestSuite.ignored|{}ignored[0]
        abstract fun <get-ignored>(): kotlin/Boolean // kotlin.native.internal.test/TestSuite.ignored.<get-ignored>|<get-ignored>(){}[0]
    abstract val name // kotlin.native.internal.test/TestSuite.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // kotlin.native.internal.test/TestSuite.name.<get-name>|<get-name>(){}[0]
    abstract val size // kotlin.native.internal.test/TestSuite.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlin.native.internal.test/TestSuite.size.<get-size>|<get-size>(){}[0]
    abstract val testCases // kotlin.native.internal.test/TestSuite.testCases|{}testCases[0]
        abstract fun <get-testCases>(): kotlin.collections/Map<kotlin/String, kotlin.native.internal.test/TestCase> // kotlin.native.internal.test/TestSuite.testCases.<get-testCases>|<get-testCases>(){}[0]

    abstract fun doAfterClass() // kotlin.native.internal.test/TestSuite.doAfterClass|doAfterClass(){}[0]
    abstract fun doBeforeClass() // kotlin.native.internal.test/TestSuite.doBeforeClass|doBeforeClass(){}[0]
}

// Targets: [native]
abstract interface kotlin.native.internal/Cleaner // kotlin.native.internal/Cleaner|null[0]

// Targets: [native]
abstract interface kotlin.reflect/KAnnotatedElement // kotlin.reflect/KAnnotatedElement|null[0]

// Targets: [native]
abstract interface kotlin.reflect/KDeclarationContainer // kotlin.reflect/KDeclarationContainer|null[0]

// Targets: [native]
abstract interface kotlin.test/Asserter { // kotlin.test/Asserter|null[0]
    abstract fun fail(kotlin/String?): kotlin/Nothing // kotlin.test/Asserter.fail|fail(kotlin.String?){}[0]
    abstract fun fail(kotlin/String?, kotlin/Throwable?): kotlin/Nothing // kotlin.test/Asserter.fail|fail(kotlin.String?;kotlin.Throwable?){}[0]
    open fun assertEquals(kotlin/String?, kotlin/Any?, kotlin/Any?) // kotlin.test/Asserter.assertEquals|assertEquals(kotlin.String?;kotlin.Any?;kotlin.Any?){}[0]
    open fun assertNotEquals(kotlin/String?, kotlin/Any?, kotlin/Any?) // kotlin.test/Asserter.assertNotEquals|assertNotEquals(kotlin.String?;kotlin.Any?;kotlin.Any?){}[0]
    open fun assertNotNull(kotlin/String?, kotlin/Any?) // kotlin.test/Asserter.assertNotNull|assertNotNull(kotlin.String?;kotlin.Any?){}[0]
    open fun assertNotSame(kotlin/String?, kotlin/Any?, kotlin/Any?) // kotlin.test/Asserter.assertNotSame|assertNotSame(kotlin.String?;kotlin.Any?;kotlin.Any?){}[0]
    open fun assertNull(kotlin/String?, kotlin/Any?) // kotlin.test/Asserter.assertNull|assertNull(kotlin.String?;kotlin.Any?){}[0]
    open fun assertSame(kotlin/String?, kotlin/Any?, kotlin/Any?) // kotlin.test/Asserter.assertSame|assertSame(kotlin.String?;kotlin.Any?;kotlin.Any?){}[0]
    open fun assertTrue(kotlin/Function0<kotlin/String?>, kotlin/Boolean) // kotlin.test/Asserter.assertTrue|assertTrue(kotlin.Function0<kotlin.String?>;kotlin.Boolean){}[0]
    open fun assertTrue(kotlin/String?, kotlin/Boolean) // kotlin.test/Asserter.assertTrue|assertTrue(kotlin.String?;kotlin.Boolean){}[0]
}

// Targets: [native]
abstract interface kotlin.test/AsserterContributor { // kotlin.test/AsserterContributor|null[0]
    abstract fun contribute(): kotlin.test/Asserter? // kotlin.test/AsserterContributor.contribute|contribute(){}[0]
}

// Targets: [native]
abstract interface kotlinx.cinterop/CEnum { // kotlinx.cinterop/CEnum|null[0]
    abstract val value // kotlinx.cinterop/CEnum.value|{}value[0]
        abstract fun <get-value>(): kotlin/Any // kotlinx.cinterop/CEnum.value.<get-value>|<get-value>(){}[0]
}

// Targets: [native]
abstract interface kotlinx.cinterop/CPlusPlusClass // kotlinx.cinterop/CPlusPlusClass|null[0]

// Targets: [native]
abstract interface kotlinx.cinterop/NativeFreeablePlacement : kotlinx.cinterop/NativePlacement { // kotlinx.cinterop/NativeFreeablePlacement|null[0]
    abstract fun free(kotlin.native.internal/NativePtr) // kotlinx.cinterop/NativeFreeablePlacement.free|free(kotlin.native.internal.NativePtr){}[0]
}

// Targets: [native]
abstract interface kotlinx.cinterop/NativePlacement { // kotlinx.cinterop/NativePlacement|null[0]
    abstract fun alloc(kotlin/Long, kotlin/Int): kotlinx.cinterop/NativePointed // kotlinx.cinterop/NativePlacement.alloc|alloc(kotlin.Long;kotlin.Int){}[0]
    open fun alloc(kotlin/Int, kotlin/Int): kotlinx.cinterop/NativePointed // kotlinx.cinterop/NativePlacement.alloc|alloc(kotlin.Int;kotlin.Int){}[0]
}

// Targets: [native]
abstract interface kotlinx.cinterop/ObjCClass : kotlinx.cinterop/ObjCObject // kotlinx.cinterop/ObjCClass|null[0]

// Targets: [native]
abstract interface kotlinx.cinterop/ObjCObject // kotlinx.cinterop/ObjCObject|null[0]

// Targets: [native]
abstract interface kotlinx.cinterop/ObjCProtocol : kotlinx.cinterop/ObjCObject // kotlinx.cinterop/ObjCProtocol|null[0]

// Targets: [native]
abstract interface kotlinx.cinterop/SkiaRefCnt // kotlinx.cinterop/SkiaRefCnt|null[0]

// Targets: [native]
sealed interface kotlin.native.ref/Cleaner // kotlin.native.ref/Cleaner|null[0]

// Targets: [native]
abstract class <#A: kotlin/Any?, #B: kotlin/Any?, #C: out kotlin/Any?> kotlin.native.internal/KProperty2ImplBase : kotlin.reflect/KProperty2<#A, #B, #C> { // kotlin.native.internal/KProperty2ImplBase|null[0]
    constructor <init>() // kotlin.native.internal/KProperty2ImplBase.<init>|<init>(){}[0]

    abstract val getter // kotlin.native.internal/KProperty2ImplBase.getter|{}getter[0]
        abstract fun <get-getter>(): kotlin.reflect/KFunction2<#A, #B, #C> // kotlin.native.internal/KProperty2ImplBase.getter.<get-getter>|<get-getter>(){}[0]
    open val returnType // kotlin.native.internal/KProperty2ImplBase.returnType|{}returnType[0]
        open fun <get-returnType>(): kotlin.reflect/KType // kotlin.native.internal/KProperty2ImplBase.returnType.<get-returnType>|<get-returnType>(){}[0]

    open fun get(#A, #B): #C // kotlin.native.internal/KProperty2ImplBase.get|get(1:0;1:1){}[0]
    open fun invoke(#A, #B): #C // kotlin.native.internal/KProperty2ImplBase.invoke|invoke(1:0;1:1){}[0]
}

// Targets: [native]
abstract class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.native.internal.test/BaseClassSuite : kotlin.native.internal.test/AbstractTestSuite<kotlin/Function1<#A, kotlin/Unit>> { // kotlin.native.internal.test/BaseClassSuite|null[0]
    constructor <init>(kotlin/String, kotlin/Boolean) // kotlin.native.internal.test/BaseClassSuite.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]

    final val after // kotlin.native.internal.test/BaseClassSuite.after|{}after[0]
        final fun <get-after>(): kotlin.collections/Collection<kotlin/Function1<#A, kotlin/Unit>> // kotlin.native.internal.test/BaseClassSuite.after.<get-after>|<get-after>(){}[0]
    final val afterClass // kotlin.native.internal.test/BaseClassSuite.afterClass|{}afterClass[0]
        final fun <get-afterClass>(): kotlin.collections/Collection<kotlin/Function1<#B, kotlin/Unit>> // kotlin.native.internal.test/BaseClassSuite.afterClass.<get-afterClass>|<get-afterClass>(){}[0]
    final val before // kotlin.native.internal.test/BaseClassSuite.before|{}before[0]
        final fun <get-before>(): kotlin.collections/Collection<kotlin/Function1<#A, kotlin/Unit>> // kotlin.native.internal.test/BaseClassSuite.before.<get-before>|<get-before>(){}[0]
    final val beforeClass // kotlin.native.internal.test/BaseClassSuite.beforeClass|{}beforeClass[0]
        final fun <get-beforeClass>(): kotlin.collections/Collection<kotlin/Function1<#B, kotlin/Unit>> // kotlin.native.internal.test/BaseClassSuite.beforeClass.<get-beforeClass>|<get-beforeClass>(){}[0]

    abstract fun createInstance(): #A // kotlin.native.internal.test/BaseClassSuite.createInstance|createInstance(){}[0]
    final fun registerFunction(kotlin.native.internal.test/TestFunctionKind, kotlin/Function1<*, kotlin/Unit>): kotlin/Boolean // kotlin.native.internal.test/BaseClassSuite.registerFunction|registerFunction(kotlin.native.internal.test.TestFunctionKind;kotlin.Function1<*,kotlin.Unit>){}[0]
    open fun createTestCase(kotlin/String, kotlin/Function1<#A, kotlin/Unit>, kotlin/Boolean): kotlin.native.internal.test/AbstractTestSuite.BasicTestCase<kotlin/Function1<#A, kotlin/Unit>> // kotlin.native.internal.test/BaseClassSuite.createTestCase|createTestCase(kotlin.String;kotlin.Function1<1:0,kotlin.Unit>;kotlin.Boolean){}[0]
    open fun doAfterClass() // kotlin.native.internal.test/BaseClassSuite.doAfterClass|doAfterClass(){}[0]
    open fun doBeforeClass() // kotlin.native.internal.test/BaseClassSuite.doBeforeClass|doBeforeClass(){}[0]
    open fun getCompanion(): #B // kotlin.native.internal.test/BaseClassSuite.getCompanion|getCompanion(){}[0]

    final class <#A1: kotlin/Any?, #B1: kotlin/Any?> TestCase : kotlin.native.internal.test/AbstractTestSuite.BasicTestCase<kotlin/Function1<#A1, kotlin/Unit>> { // kotlin.native.internal.test/BaseClassSuite.TestCase|null[0]
        constructor <init>(kotlin/String, kotlin.native.internal.test/BaseClassSuite<#A1, #B1>, kotlin/Function1<#A1, kotlin/Unit>, kotlin/Boolean) // kotlin.native.internal.test/BaseClassSuite.TestCase.<init>|<init>(kotlin.String;kotlin.native.internal.test.BaseClassSuite<1:0,1:1>;kotlin.Function1<1:0,kotlin.Unit>;kotlin.Boolean){}[0]

        final val suite // kotlin.native.internal.test/BaseClassSuite.TestCase.suite|{}suite[0]
            final fun <get-suite>(): kotlin.native.internal.test/BaseClassSuite<#A1, #B1> // kotlin.native.internal.test/BaseClassSuite.TestCase.suite.<get-suite>|<get-suite>(){}[0]

        final fun doAfter() // kotlin.native.internal.test/BaseClassSuite.TestCase.doAfter|doAfter(){}[0]
        final fun doBefore() // kotlin.native.internal.test/BaseClassSuite.TestCase.doBefore|doBefore(){}[0]
        final fun doRun() // kotlin.native.internal.test/BaseClassSuite.TestCase.doRun|doRun(){}[0]
    }

    final object Companion { // kotlin.native.internal.test/BaseClassSuite.Companion|null[0]
        final val COMPANION_KINDS // kotlin.native.internal.test/BaseClassSuite.Companion.COMPANION_KINDS|{}COMPANION_KINDS[0]
            final fun <get-COMPANION_KINDS>(): kotlin.collections/List<kotlin.native.internal.test/TestFunctionKind> // kotlin.native.internal.test/BaseClassSuite.Companion.COMPANION_KINDS.<get-COMPANION_KINDS>|<get-COMPANION_KINDS>(){}[0]
        final val INSTANCE_KINDS // kotlin.native.internal.test/BaseClassSuite.Companion.INSTANCE_KINDS|{}INSTANCE_KINDS[0]
            final fun <get-INSTANCE_KINDS>(): kotlin.collections/List<kotlin.native.internal.test/TestFunctionKind> // kotlin.native.internal.test/BaseClassSuite.Companion.INSTANCE_KINDS.<get-INSTANCE_KINDS>|<get-INSTANCE_KINDS>(){}[0]
    }
}

// Targets: [native]
abstract class <#A: kotlin/Any?, #B: out kotlin/Any?> kotlin.native.internal/KProperty1ImplBase : kotlin.reflect/KProperty1<#A, #B> { // kotlin.native.internal/KProperty1ImplBase|null[0]
    constructor <init>() // kotlin.native.internal/KProperty1ImplBase.<init>|<init>(){}[0]

    abstract val getter // kotlin.native.internal/KProperty1ImplBase.getter|{}getter[0]
        abstract fun <get-getter>(): kotlin.reflect/KFunction1<#A, #B> // kotlin.native.internal/KProperty1ImplBase.getter.<get-getter>|<get-getter>(){}[0]
    open val returnType // kotlin.native.internal/KProperty1ImplBase.returnType|{}returnType[0]
        open fun <get-returnType>(): kotlin.reflect/KType // kotlin.native.internal/KProperty1ImplBase.returnType.<get-returnType>|<get-returnType>(){}[0]

    open fun get(#A): #B // kotlin.native.internal/KProperty1ImplBase.get|get(1:0){}[0]
    open fun invoke(#A): #B // kotlin.native.internal/KProperty1ImplBase.invoke|invoke(1:0){}[0]
}

// Targets: [native]
abstract class <#A: kotlin/Function<kotlin/Unit>> kotlin.native.internal.test/AbstractTestSuite : kotlin.native.internal.test/TestSuite { // kotlin.native.internal.test/AbstractTestSuite|null[0]
    constructor <init>(kotlin/String, kotlin/Boolean) // kotlin.native.internal.test/AbstractTestSuite.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]

    open val ignored // kotlin.native.internal.test/AbstractTestSuite.ignored|{}ignored[0]
        open fun <get-ignored>(): kotlin/Boolean // kotlin.native.internal.test/AbstractTestSuite.ignored.<get-ignored>|<get-ignored>(){}[0]
    open val name // kotlin.native.internal.test/AbstractTestSuite.name|{}name[0]
        open fun <get-name>(): kotlin/String // kotlin.native.internal.test/AbstractTestSuite.name.<get-name>|<get-name>(){}[0]
    open val size // kotlin.native.internal.test/AbstractTestSuite.size|{}size[0]
        open fun <get-size>(): kotlin/Int // kotlin.native.internal.test/AbstractTestSuite.size.<get-size>|<get-size>(){}[0]
    open val testCases // kotlin.native.internal.test/AbstractTestSuite.testCases|{}testCases[0]
        open fun <get-testCases>(): kotlin.collections/Map<kotlin/String, kotlin.native.internal.test/AbstractTestSuite.BasicTestCase<#A>> // kotlin.native.internal.test/AbstractTestSuite.testCases.<get-testCases>|<get-testCases>(){}[0]

    abstract fun createTestCase(kotlin/String, #A, kotlin/Boolean): kotlin.native.internal.test/AbstractTestSuite.BasicTestCase<#A> // kotlin.native.internal.test/AbstractTestSuite.createTestCase|createTestCase(kotlin.String;1:0;kotlin.Boolean){}[0]
    final fun registerTestCase(kotlin/String, #A, kotlin/Boolean): kotlin.native.internal.test/AbstractTestSuite.BasicTestCase<#A>? // kotlin.native.internal.test/AbstractTestSuite.registerTestCase|registerTestCase(kotlin.String;1:0;kotlin.Boolean){}[0]
    open fun toString(): kotlin/String // kotlin.native.internal.test/AbstractTestSuite.toString|toString(){}[0]

    abstract class <#A1: kotlin/Function<kotlin/Unit>> BasicTestCase : kotlin.native.internal.test/TestCase { // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase|null[0]
        constructor <init>(kotlin/String, kotlin.native.internal.test/AbstractTestSuite<#A1>, #A1, kotlin/Boolean) // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.<init>|<init>(kotlin.String;kotlin.native.internal.test.AbstractTestSuite<1:0>;1:0;kotlin.Boolean){}[0]

        final val testFunction // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.testFunction|{}testFunction[0]
            final fun <get-testFunction>(): #A1 // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.testFunction.<get-testFunction>|<get-testFunction>(){}[0]
        open val ignored // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.ignored|{}ignored[0]
            open fun <get-ignored>(): kotlin/Boolean // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.ignored.<get-ignored>|<get-ignored>(){}[0]
        open val name // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.name|{}name[0]
            open fun <get-name>(): kotlin/String // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.name.<get-name>|<get-name>(){}[0]
        open val suite // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.suite|{}suite[0]
            open fun <get-suite>(): kotlin.native.internal.test/AbstractTestSuite<#A1> // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.suite.<get-suite>|<get-suite>(){}[0]

        open fun toString(): kotlin/String // kotlin.native.internal.test/AbstractTestSuite.BasicTestCase.toString|toString(){}[0]
    }
}

// Targets: [native]
abstract class <#A: kotlinx.cinterop/CPointed> kotlinx.cinterop/CValuesRef { // kotlinx.cinterop/CValuesRef|null[0]
    constructor <init>() // kotlinx.cinterop/CValuesRef.<init>|<init>(){}[0]

    abstract fun getPointer(kotlinx.cinterop/AutofreeScope): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/CValuesRef.getPointer|getPointer(kotlinx.cinterop.AutofreeScope){}[0]
}

// Targets: [native]
abstract class <#A: kotlinx.cinterop/CStructVar> kotlinx.cinterop/ManagedType { // kotlinx.cinterop/ManagedType|null[0]
    constructor <init>(#A) // kotlinx.cinterop/ManagedType.<init>|<init>(1:0){}[0]

    final val cpp // kotlinx.cinterop/ManagedType.cpp|{}cpp[0]
        final fun <get-cpp>(): #A // kotlinx.cinterop/ManagedType.cpp.<get-cpp>|<get-cpp>(){}[0]
}

// Targets: [native]
abstract class <#A: kotlinx.cinterop/CVariable> kotlinx.cinterop/CValue : kotlinx.cinterop/CValues<#A> { // kotlinx.cinterop/CValue|null[0]
    constructor <init>() // kotlinx.cinterop/CValue.<init>|<init>(){}[0]
}

// Targets: [native]
abstract class <#A: kotlinx.cinterop/CVariable> kotlinx.cinterop/CValues : kotlinx.cinterop/CValuesRef<#A> { // kotlinx.cinterop/CValues|null[0]
    constructor <init>() // kotlinx.cinterop/CValues.<init>|<init>(){}[0]

    abstract val align // kotlinx.cinterop/CValues.align|{}align[0]
        abstract fun <get-align>(): kotlin/Int // kotlinx.cinterop/CValues.align.<get-align>|<get-align>(){}[0]
    abstract val size // kotlinx.cinterop/CValues.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // kotlinx.cinterop/CValues.size.<get-size>|<get-size>(){}[0]

    abstract fun place(kotlinx.cinterop/CPointer<#A>): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/CValues.place|place(kotlinx.cinterop.CPointer<1:0>){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.cinterop/CValues.equals|equals(kotlin.Any?){}[0]
    open fun getPointer(kotlinx.cinterop/AutofreeScope): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/CValues.getPointer|getPointer(kotlinx.cinterop.AutofreeScope){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.cinterop/CValues.hashCode|hashCode(){}[0]
}

// Targets: [native]
abstract class <#A: out kotlin/Any?> kotlin.native.internal/KLocalDelegatedPropertyImplBase : kotlin.reflect/KProperty0<#A> { // kotlin.native.internal/KLocalDelegatedPropertyImplBase|null[0]
    constructor <init>() // kotlin.native.internal/KLocalDelegatedPropertyImplBase.<init>|<init>(){}[0]

    open fun get(): #A // kotlin.native.internal/KLocalDelegatedPropertyImplBase.get|get(){}[0]
    open fun invoke(): #A // kotlin.native.internal/KLocalDelegatedPropertyImplBase.invoke|invoke(){}[0]
}

// Targets: [native]
abstract class <#A: out kotlin/Any?> kotlin.native.internal/KProperty0ImplBase : kotlin.reflect/KProperty0<#A> { // kotlin.native.internal/KProperty0ImplBase|null[0]
    constructor <init>() // kotlin.native.internal/KProperty0ImplBase.<init>|<init>(){}[0]

    abstract val getter // kotlin.native.internal/KProperty0ImplBase.getter|{}getter[0]
        abstract fun <get-getter>(): kotlin.reflect/KFunction0<#A> // kotlin.native.internal/KProperty0ImplBase.getter.<get-getter>|<get-getter>(){}[0]
    open val returnType // kotlin.native.internal/KProperty0ImplBase.returnType|{}returnType[0]
        open fun <get-returnType>(): kotlin.reflect/KType // kotlin.native.internal/KProperty0ImplBase.returnType.<get-returnType>|<get-returnType>(){}[0]

    open fun get(): #A // kotlin.native.internal/KProperty0ImplBase.get|get(){}[0]
    open fun invoke(): #A // kotlin.native.internal/KProperty0ImplBase.invoke|invoke(){}[0]
}

// Targets: [native]
abstract class kotlin.native.ref/WeakReferenceImpl { // kotlin.native.ref/WeakReferenceImpl|null[0]
    constructor <init>() // kotlin.native.ref/WeakReferenceImpl.<init>|<init>(){}[0]

    abstract fun get(): kotlin/Any? // kotlin.native.ref/WeakReferenceImpl.get|get(){}[0]
}

// Targets: [native]
abstract class kotlinx.cinterop/AutofreeScope : kotlinx.cinterop/DeferScope, kotlinx.cinterop/NativePlacement { // kotlinx.cinterop/AutofreeScope|null[0]
    constructor <init>() // kotlinx.cinterop/AutofreeScope.<init>|<init>(){}[0]

    abstract fun alloc(kotlin/Long, kotlin/Int): kotlinx.cinterop/NativePointed // kotlinx.cinterop/AutofreeScope.alloc|alloc(kotlin.Long;kotlin.Int){}[0]
}

// Targets: [native]
abstract class kotlinx.cinterop/CEnumVar : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/CEnumVar|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/CEnumVar.<init>|<init>(kotlin.native.internal.NativePtr){}[0]
}

// Targets: [native]
abstract class kotlinx.cinterop/COpaque : kotlinx.cinterop/CPointed { // kotlinx.cinterop/COpaque|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/COpaque.<init>|<init>(kotlin.native.internal.NativePtr){}[0]
}

// Targets: [native]
abstract class kotlinx.cinterop/CPointed : kotlinx.cinterop/NativePointed { // kotlinx.cinterop/CPointed|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/CPointed.<init>|<init>(kotlin.native.internal.NativePtr){}[0]
}

// Targets: [native]
abstract class kotlinx.cinterop/CStructVar : kotlinx.cinterop/CVariable { // kotlinx.cinterop/CStructVar|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/CStructVar.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    open class Type : kotlinx.cinterop/CVariable.Type { // kotlinx.cinterop/CStructVar.Type|null[0]
        constructor <init>(kotlin/Long, kotlin/Int) // kotlinx.cinterop/CStructVar.Type.<init>|<init>(kotlin.Long;kotlin.Int){}[0]
    }
}

// Targets: [native]
abstract class kotlinx.cinterop/CVariable : kotlinx.cinterop/CPointed { // kotlinx.cinterop/CVariable|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/CVariable.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    open class Type { // kotlinx.cinterop/CVariable.Type|null[0]
        constructor <init>(kotlin/Long, kotlin/Int) // kotlinx.cinterop/CVariable.Type.<init>|<init>(kotlin.Long;kotlin.Int){}[0]

        final val align // kotlinx.cinterop/CVariable.Type.align|{}align[0]
            final fun <get-align>(): kotlin/Int // kotlinx.cinterop/CVariable.Type.align.<get-align>|<get-align>(){}[0]
        final val size // kotlinx.cinterop/CVariable.Type.size|{}size[0]
            final fun <get-size>(): kotlin/Long // kotlinx.cinterop/CVariable.Type.size.<get-size>|<get-size>(){}[0]
    }
}

// Targets: [native]
abstract class kotlinx.cinterop/ObjCObjectBase : kotlinx.cinterop/ObjCObject { // kotlinx.cinterop/ObjCObjectBase|null[0]
    constructor <init>() // kotlinx.cinterop/ObjCObjectBase.<init>|<init>(){}[0]

    open annotation class OverrideInit : kotlin/Annotation { // kotlinx.cinterop/ObjCObjectBase.OverrideInit|null[0]
        constructor <init>() // kotlinx.cinterop/ObjCObjectBase.OverrideInit.<init>|<init>(){}[0]
    }
}

// Targets: [native]
abstract class kotlinx.cinterop/ObjCObjectBaseMeta : kotlinx.cinterop/ObjCClass, kotlinx.cinterop/ObjCObjectBase { // kotlinx.cinterop/ObjCObjectBaseMeta|null[0]
    constructor <init>() // kotlinx.cinterop/ObjCObjectBaseMeta.<init>|<init>(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any> kotlin.native.ref/WeakReference { // kotlin.native.ref/WeakReference|null[0]
    constructor <init>(#A) // kotlin.native.ref/WeakReference.<init>|<init>(1:0){}[0]

    final val value // kotlin.native.ref/WeakReference.value|{}value[0]
        final fun <get-value>(): #A? // kotlin.native.ref/WeakReference.value.<get-value>|<get-value>(){}[0]

    final var pointer // kotlin.native.ref/WeakReference.pointer|{}pointer[0]
        final fun <get-pointer>(): kotlin.native.ref/WeakReferenceImpl? // kotlin.native.ref/WeakReference.pointer.<get-pointer>|<get-pointer>(){}[0]
        final fun <set-pointer>(kotlin.native.ref/WeakReferenceImpl?) // kotlin.native.ref/WeakReference.pointer.<set-pointer>|<set-pointer>(kotlin.native.ref.WeakReferenceImpl?){}[0]

    final fun clear() // kotlin.native.ref/WeakReference.clear|clear(){}[0]
    final fun get(): #A? // kotlin.native.ref/WeakReference.get|get(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any> kotlinx.cinterop/Pinned { // kotlinx.cinterop/Pinned|null[0]
    constructor <init>(#A) // kotlinx.cinterop/Pinned.<init>|<init>(1:0){}[0]

    final fun get(): #A // kotlinx.cinterop/Pinned.get|get(){}[0]
    final fun unpin() // kotlinx.cinterop/Pinned.unpin|unpin(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> kotlin.native.internal/KMutableProperty2Impl : kotlin.native.internal/KProperty2ImplBase<#A, #B, #C>, kotlin.reflect/KMutableProperty2<#A, #B, #C> { // kotlin.native.internal/KMutableProperty2Impl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KFunction2<#A, #B, #C>, kotlin/Function3<#A, #B, #C, kotlin/Unit>) // kotlin.native.internal/KMutableProperty2Impl.<init>|<init>(kotlin.String;kotlin.reflect.KFunction2<1:0,1:1,1:2>;kotlin.Function3<1:0,1:1,1:2,kotlin.Unit>){}[0]

    final val getter // kotlin.native.internal/KMutableProperty2Impl.getter|{}getter[0]
        final fun <get-getter>(): kotlin.reflect/KFunction2<#A, #B, #C> // kotlin.native.internal/KMutableProperty2Impl.getter.<get-getter>|<get-getter>(){}[0]
    final val name // kotlin.native.internal/KMutableProperty2Impl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KMutableProperty2Impl.name.<get-name>|<get-name>(){}[0]
    final val setter // kotlin.native.internal/KMutableProperty2Impl.setter|{}setter[0]
        final fun <get-setter>(): kotlin/Function3<#A, #B, #C, kotlin/Unit> // kotlin.native.internal/KMutableProperty2Impl.setter.<get-setter>|<get-setter>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KMutableProperty2Impl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/KMutableProperty2Impl.hashCode|hashCode(){}[0]
    final fun set(#A, #B, #C) // kotlin.native.internal/KMutableProperty2Impl.set|set(1:0;1:1;1:2){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KMutableProperty2Impl.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?, #B: kotlin/Any?, #C: out kotlin/Any?> kotlin.native.internal/KProperty2Impl : kotlin.native.internal/KProperty2ImplBase<#A, #B, #C> { // kotlin.native.internal/KProperty2Impl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KFunction2<#A, #B, #C>) // kotlin.native.internal/KProperty2Impl.<init>|<init>(kotlin.String;kotlin.reflect.KFunction2<1:0,1:1,1:2>){}[0]

    final val getter // kotlin.native.internal/KProperty2Impl.getter|{}getter[0]
        final fun <get-getter>(): kotlin.reflect/KFunction2<#A, #B, #C> // kotlin.native.internal/KProperty2Impl.getter.<get-getter>|<get-getter>(){}[0]
    final val name // kotlin.native.internal/KProperty2Impl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KProperty2Impl.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KProperty2Impl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/KProperty2Impl.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KProperty2Impl.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.native.concurrent/Continuation2 : kotlin/Function2<#A, #B, kotlin/Unit> { // kotlin.native.concurrent/Continuation2|null[0]
    constructor <init>(kotlin/Function2<#A, #B, kotlin/Unit>, kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function1<kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>?, kotlin/Unit>>>, kotlin/Boolean = ...) // kotlin.native.concurrent/Continuation2.<init>|<init>(kotlin.Function2<1:0,1:1,kotlin.Unit>;kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function1<kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>?,kotlin.Unit>>>;kotlin.Boolean){}[0]

    final fun dispose() // kotlin.native.concurrent/Continuation2.dispose|dispose(){}[0]
    final fun invoke(#A, #B) // kotlin.native.concurrent/Continuation2.invoke|invoke(1:0;1:1){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.native.internal/KMutableProperty1Impl : kotlin.native.internal/KProperty1ImplBase<#A, #B>, kotlin.reflect/KMutableProperty1<#A, #B> { // kotlin.native.internal/KMutableProperty1Impl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KFunction1<#A, #B>, kotlin/Function2<#A, #B, kotlin/Unit>) // kotlin.native.internal/KMutableProperty1Impl.<init>|<init>(kotlin.String;kotlin.reflect.KFunction1<1:0,1:1>;kotlin.Function2<1:0,1:1,kotlin.Unit>){}[0]

    final val getter // kotlin.native.internal/KMutableProperty1Impl.getter|{}getter[0]
        final fun <get-getter>(): kotlin.reflect/KFunction1<#A, #B> // kotlin.native.internal/KMutableProperty1Impl.getter.<get-getter>|<get-getter>(){}[0]
    final val name // kotlin.native.internal/KMutableProperty1Impl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KMutableProperty1Impl.name.<get-name>|<get-name>(){}[0]
    final val setter // kotlin.native.internal/KMutableProperty1Impl.setter|{}setter[0]
        final fun <get-setter>(): kotlin/Function2<#A, #B, kotlin/Unit> // kotlin.native.internal/KMutableProperty1Impl.setter.<get-setter>|<get-setter>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KMutableProperty1Impl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/KMutableProperty1Impl.hashCode|hashCode(){}[0]
    final fun set(#A, #B) // kotlin.native.internal/KMutableProperty1Impl.set|set(1:0;1:1){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KMutableProperty1Impl.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?, #B: out kotlin/Any?> kotlin.native.internal/KProperty1Impl : kotlin.native.internal/KProperty1ImplBase<#A, #B> { // kotlin.native.internal/KProperty1Impl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KFunction1<#A, #B>) // kotlin.native.internal/KProperty1Impl.<init>|<init>(kotlin.String;kotlin.reflect.KFunction1<1:0,1:1>){}[0]

    final val getter // kotlin.native.internal/KProperty1Impl.getter|{}getter[0]
        final fun <get-getter>(): kotlin.reflect/KFunction1<#A, #B> // kotlin.native.internal/KProperty1Impl.getter.<get-getter>|<get-getter>(){}[0]
    final val name // kotlin.native.internal/KProperty1Impl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KProperty1Impl.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KProperty1Impl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/KProperty1Impl.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KProperty1Impl.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlin.native.concurrent/AtomicReference { // kotlin.native.concurrent/AtomicReference|null[0]
    constructor <init>(#A) // kotlin.native.concurrent/AtomicReference.<init>|<init>(1:0){}[0]

    final var value // kotlin.native.concurrent/AtomicReference.value|{}value[0]
        final fun <get-value>(): #A // kotlin.native.concurrent/AtomicReference.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(#A) // kotlin.native.concurrent/AtomicReference.value.<set-value>|<set-value>(1:0){}[0]

    final fun compareAndSet(#A, #A): kotlin/Boolean // kotlin.native.concurrent/AtomicReference.compareAndSet|compareAndSet(1:0;1:0){}[0]
    final fun compareAndSwap(#A, #A): #A // kotlin.native.concurrent/AtomicReference.compareAndSwap|compareAndSwap(1:0;1:0){}[0]
    final fun getAndSet(#A): #A // kotlin.native.concurrent/AtomicReference.getAndSet|getAndSet(1:0){}[0]
    final fun toString(): kotlin/String // kotlin.native.concurrent/AtomicReference.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlin.native.concurrent/Continuation1 : kotlin/Function1<#A, kotlin/Unit> { // kotlin.native.concurrent/Continuation1|null[0]
    constructor <init>(kotlin/Function1<#A, kotlin/Unit>, kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function1<kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>?, kotlin/Unit>>>, kotlin/Boolean = ...) // kotlin.native.concurrent/Continuation1.<init>|<init>(kotlin.Function1<1:0,kotlin.Unit>;kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function1<kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>?,kotlin.Unit>>>;kotlin.Boolean){}[0]

    final fun dispose() // kotlin.native.concurrent/Continuation1.dispose|dispose(){}[0]
    final fun invoke(#A) // kotlin.native.concurrent/Continuation1.invoke|invoke(1:0){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlin.native.concurrent/DetachedObjectGraph { // kotlin.native.concurrent/DetachedObjectGraph|null[0]
    constructor <init>(kotlin.native.concurrent/TransferMode = ..., kotlin/Function0<#A>) // kotlin.native.concurrent/DetachedObjectGraph.<init>|<init>(kotlin.native.concurrent.TransferMode;kotlin.Function0<1:0>){}[0]
    constructor <init>(kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>?) // kotlin.native.concurrent/DetachedObjectGraph.<init>|<init>(kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>?){}[0]

    final val stable // kotlin.native.concurrent/DetachedObjectGraph.stable|{}stable[0]
        final fun <get-stable>(): kotlin.concurrent/AtomicNativePtr // kotlin.native.concurrent/DetachedObjectGraph.stable.<get-stable>|<get-stable>(){}[0]

    final fun asCPointer(): kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>? // kotlin.native.concurrent/DetachedObjectGraph.asCPointer|asCPointer(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlin.native.concurrent/FreezableAtomicReference { // kotlin.native.concurrent/FreezableAtomicReference|null[0]
    constructor <init>(#A) // kotlin.native.concurrent/FreezableAtomicReference.<init>|<init>(1:0){}[0]

    final var value // kotlin.native.concurrent/FreezableAtomicReference.value|{}value[0]
        final fun <get-value>(): #A // kotlin.native.concurrent/FreezableAtomicReference.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(#A) // kotlin.native.concurrent/FreezableAtomicReference.value.<set-value>|<set-value>(1:0){}[0]

    final fun compareAndSet(#A, #A): kotlin/Boolean // kotlin.native.concurrent/FreezableAtomicReference.compareAndSet|compareAndSet(1:0;1:0){}[0]
    final fun compareAndSwap(#A, #A): #A // kotlin.native.concurrent/FreezableAtomicReference.compareAndSwap|compareAndSwap(1:0;1:0){}[0]
    final fun toString(): kotlin/String // kotlin.native.concurrent/FreezableAtomicReference.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlin.native.internal/KLocalDelegatedMutablePropertyImpl : kotlin.native.internal/KLocalDelegatedPropertyImplBase<#A>, kotlin.reflect/KMutableProperty0<#A> { // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KType) // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl.<init>|<init>(kotlin.String;kotlin.reflect.KType){}[0]

    final val name // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl.name.<get-name>|<get-name>(){}[0]
    final val returnType // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl.returnType|{}returnType[0]
        final fun <get-returnType>(): kotlin.reflect/KType // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl.returnType.<get-returnType>|<get-returnType>(){}[0]

    final fun set(#A) // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl.set|set(1:0){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KLocalDelegatedMutablePropertyImpl.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlin.native.internal/KMutableProperty0Impl : kotlin.native.internal/KProperty0ImplBase<#A>, kotlin.reflect/KMutableProperty0<#A> { // kotlin.native.internal/KMutableProperty0Impl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KFunction0<#A>, kotlin/Function1<#A, kotlin/Unit>) // kotlin.native.internal/KMutableProperty0Impl.<init>|<init>(kotlin.String;kotlin.reflect.KFunction0<1:0>;kotlin.Function1<1:0,kotlin.Unit>){}[0]

    final val getter // kotlin.native.internal/KMutableProperty0Impl.getter|{}getter[0]
        final fun <get-getter>(): kotlin.reflect/KFunction0<#A> // kotlin.native.internal/KMutableProperty0Impl.getter.<get-getter>|<get-getter>(){}[0]
    final val name // kotlin.native.internal/KMutableProperty0Impl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KMutableProperty0Impl.name.<get-name>|<get-name>(){}[0]
    final val setter // kotlin.native.internal/KMutableProperty0Impl.setter|{}setter[0]
        final fun <get-setter>(): kotlin/Function1<#A, kotlin/Unit> // kotlin.native.internal/KMutableProperty0Impl.setter.<get-setter>|<get-setter>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KMutableProperty0Impl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/KMutableProperty0Impl.hashCode|hashCode(){}[0]
    final fun set(#A) // kotlin.native.internal/KMutableProperty0Impl.set|set(1:0){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KMutableProperty0Impl.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlin.native.internal/Ref { // kotlin.native.internal/Ref|null[0]
    constructor <init>() // kotlin.native.internal/Ref.<init>|<init>(){}[0]

    final var element // kotlin.native.internal/Ref.element|{}element[0]
        final fun <get-element>(): #A // kotlin.native.internal/Ref.element.<get-element>|<get-element>(){}[0]
        final fun <set-element>(#A) // kotlin.native.internal/Ref.element.<set-element>|<set-element>(1:0){}[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlinx.cinterop/ObjCNotImplementedVar : kotlinx.cinterop/CVariable { // kotlinx.cinterop/ObjCNotImplementedVar|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/ObjCNotImplementedVar.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CVariable.Type // kotlinx.cinterop/ObjCNotImplementedVar.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Any?> kotlinx.cinterop/ObjCObjectVar : kotlinx.cinterop/CVariable { // kotlinx.cinterop/ObjCObjectVar|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/ObjCObjectVar.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CVariable.Type // kotlinx.cinterop/ObjCObjectVar.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Boolean> kotlinx.cinterop/BooleanVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/BooleanVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/BooleanVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/BooleanVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Byte> kotlinx.cinterop/ByteVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/ByteVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/ByteVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/ByteVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Double> kotlinx.cinterop/DoubleVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/DoubleVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/DoubleVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/DoubleVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Float> kotlinx.cinterop/FloatVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/FloatVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/FloatVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/FloatVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Function<*>> kotlinx.cinterop/CFunction : kotlinx.cinterop/CPointed { // kotlinx.cinterop/CFunction|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/CFunction.<init>|<init>(kotlin.native.internal.NativePtr){}[0]
}

// Targets: [native]
final class <#A: kotlin/Int> kotlinx.cinterop/IntVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/IntVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/IntVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/IntVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Long> kotlinx.cinterop/LongVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/LongVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/LongVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/LongVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/Short> kotlinx.cinterop/ShortVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/ShortVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/ShortVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/ShortVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/UByte> kotlinx.cinterop/UByteVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/UByteVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/UByteVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/UByteVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/UInt> kotlinx.cinterop/UIntVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/UIntVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/UIntVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/UIntVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/ULong> kotlinx.cinterop/ULongVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/ULongVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/ULongVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/ULongVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlin/UShort> kotlinx.cinterop/UShortVarOf : kotlinx.cinterop/CPrimitiveVar { // kotlinx.cinterop/UShortVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/UShortVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CPrimitiveVar.Type // kotlinx.cinterop/UShortVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlinx.cinterop/CPointed> kotlinx.cinterop/CPointer : kotlinx.cinterop/CValuesRef<#A> { // kotlinx.cinterop/CPointer|null[0]
    final val rawValue // kotlinx.cinterop/CPointer.rawValue|{}rawValue[0]
        final inline fun <get-rawValue>(): kotlin.native.internal/NativePtr // kotlinx.cinterop/CPointer.rawValue.<get-rawValue>|<get-rawValue>(){}[0]
    final val value // kotlinx.cinterop/CPointer.value|{}value[0]
        final fun <get-value>(): kotlin.native.internal/NonNullNativePtr // kotlinx.cinterop/CPointer.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.cinterop/CPointer.equals|equals(kotlin.Any?){}[0]
    final fun getPointer(kotlinx.cinterop/AutofreeScope): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/CPointer.getPointer|getPointer(kotlinx.cinterop.AutofreeScope){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.cinterop/CPointer.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlinx.cinterop/CPointer.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: kotlinx.cinterop/CPointer<*>> kotlinx.cinterop/CPointerVarOf : kotlinx.cinterop/CVariable { // kotlinx.cinterop/CPointerVarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/CPointerVarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CVariable.Type // kotlinx.cinterop/CPointerVarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: kotlinx.cinterop/CVariable> kotlinx.cinterop/ZeroValue : kotlinx.cinterop/CValue<#A> { // kotlinx.cinterop/ZeroValue|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // kotlinx.cinterop/ZeroValue.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val align // kotlinx.cinterop/ZeroValue.align|{}align[0]
        final fun <get-align>(): kotlin/Int // kotlinx.cinterop/ZeroValue.align.<get-align>|<get-align>(){}[0]
    final val size // kotlinx.cinterop/ZeroValue.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlinx.cinterop/ZeroValue.size.<get-size>|<get-size>(){}[0]

    final fun getPointer(kotlinx.cinterop/AutofreeScope): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/ZeroValue.getPointer|getPointer(kotlinx.cinterop.AutofreeScope){}[0]
    final fun place(kotlinx.cinterop/CPointer<#A>): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/ZeroValue.place|place(kotlinx.cinterop.CPointer<1:0>){}[0]
}

// Targets: [native]
final class <#A: kotlinx.cinterop/Vector128> kotlinx.cinterop/Vector128VarOf : kotlinx.cinterop/CVariable { // kotlinx.cinterop/Vector128VarOf|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlinx.cinterop/Vector128VarOf.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final object Companion : kotlinx.cinterop/CVariable.Type // kotlinx.cinterop/Vector128VarOf.Companion|null[0]
}

// Targets: [native]
final class <#A: out kotlin/Any> kotlin.native.concurrent/WorkerBoundReference { // kotlin.native.concurrent/WorkerBoundReference|null[0]
    constructor <init>(#A) // kotlin.native.concurrent/WorkerBoundReference.<init>|<init>(1:0){}[0]

    final val value // kotlin.native.concurrent/WorkerBoundReference.value|{}value[0]
        final fun <get-value>(): #A // kotlin.native.concurrent/WorkerBoundReference.value.<get-value>|<get-value>(){}[0]
    final val valueOrNull // kotlin.native.concurrent/WorkerBoundReference.valueOrNull|{}valueOrNull[0]
        final fun <get-valueOrNull>(): #A? // kotlin.native.concurrent/WorkerBoundReference.valueOrNull.<get-valueOrNull>|<get-valueOrNull>(){}[0]
    final val worker // kotlin.native.concurrent/WorkerBoundReference.worker|{}worker[0]
        final fun <get-worker>(): kotlin.native.concurrent/Worker // kotlin.native.concurrent/WorkerBoundReference.worker.<get-worker>|<get-worker>(){}[0]
}

// Targets: [native]
final class <#A: out kotlin/Any?> kotlin.native.internal/KLocalDelegatedPropertyImpl : kotlin.native.internal/KLocalDelegatedPropertyImplBase<#A> { // kotlin.native.internal/KLocalDelegatedPropertyImpl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KType) // kotlin.native.internal/KLocalDelegatedPropertyImpl.<init>|<init>(kotlin.String;kotlin.reflect.KType){}[0]

    final val name // kotlin.native.internal/KLocalDelegatedPropertyImpl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KLocalDelegatedPropertyImpl.name.<get-name>|<get-name>(){}[0]
    final val returnType // kotlin.native.internal/KLocalDelegatedPropertyImpl.returnType|{}returnType[0]
        final fun <get-returnType>(): kotlin.reflect/KType // kotlin.native.internal/KLocalDelegatedPropertyImpl.returnType.<get-returnType>|<get-returnType>(){}[0]

    final fun toString(): kotlin/String // kotlin.native.internal/KLocalDelegatedPropertyImpl.toString|toString(){}[0]
}

// Targets: [native]
final class <#A: out kotlin/Any?> kotlin.native.internal/KProperty0Impl : kotlin.native.internal/KProperty0ImplBase<#A> { // kotlin.native.internal/KProperty0Impl|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KFunction0<#A>) // kotlin.native.internal/KProperty0Impl.<init>|<init>(kotlin.String;kotlin.reflect.KFunction0<1:0>){}[0]

    final val getter // kotlin.native.internal/KProperty0Impl.getter|{}getter[0]
        final fun <get-getter>(): kotlin.reflect/KFunction0<#A> // kotlin.native.internal/KProperty0Impl.getter.<get-getter>|<get-getter>(){}[0]
    final val name // kotlin.native.internal/KProperty0Impl.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.internal/KProperty0Impl.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KProperty0Impl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/KProperty0Impl.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KProperty0Impl.toString|toString(){}[0]
}

// Targets: [native]
final class kotlin.concurrent/AtomicNativePtr { // kotlin.concurrent/AtomicNativePtr|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlin.concurrent/AtomicNativePtr.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final var value // kotlin.concurrent/AtomicNativePtr.value|{}value[0]
        final fun <get-value>(): kotlin.native.internal/NativePtr // kotlin.concurrent/AtomicNativePtr.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin.native.internal/NativePtr) // kotlin.concurrent/AtomicNativePtr.value.<set-value>|<set-value>(kotlin.native.internal.NativePtr){}[0]

    final fun compareAndExchange(kotlin.native.internal/NativePtr, kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlin.concurrent/AtomicNativePtr.compareAndExchange|compareAndExchange(kotlin.native.internal.NativePtr;kotlin.native.internal.NativePtr){}[0]
    final fun compareAndSet(kotlin.native.internal/NativePtr, kotlin.native.internal/NativePtr): kotlin/Boolean // kotlin.concurrent/AtomicNativePtr.compareAndSet|compareAndSet(kotlin.native.internal.NativePtr;kotlin.native.internal.NativePtr){}[0]
    final fun exchange(kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlin.concurrent/AtomicNativePtr.exchange|exchange(kotlin.native.internal.NativePtr){}[0]
    final fun getAndSet(kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlin.concurrent/AtomicNativePtr.getAndSet|getAndSet(kotlin.native.internal.NativePtr){}[0]
    final fun load(): kotlin.native.internal/NativePtr // kotlin.concurrent/AtomicNativePtr.load|load(){}[0]
    final fun store(kotlin.native.internal/NativePtr) // kotlin.concurrent/AtomicNativePtr.store|store(kotlin.native.internal.NativePtr){}[0]
    final fun toString(): kotlin/String // kotlin.concurrent/AtomicNativePtr.toString|toString(){}[0]
}

// Targets: [native]
final class kotlin.native.concurrent/AtomicInt { // kotlin.native.concurrent/AtomicInt|null[0]
    constructor <init>(kotlin/Int) // kotlin.native.concurrent/AtomicInt.<init>|<init>(kotlin.Int){}[0]

    final var value // kotlin.native.concurrent/AtomicInt.value|{}value[0]
        final fun <get-value>(): kotlin/Int // kotlin.native.concurrent/AtomicInt.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/Int) // kotlin.native.concurrent/AtomicInt.value.<set-value>|<set-value>(kotlin.Int){}[0]

    final fun addAndGet(kotlin/Int): kotlin/Int // kotlin.native.concurrent/AtomicInt.addAndGet|addAndGet(kotlin.Int){}[0]
    final fun compareAndSet(kotlin/Int, kotlin/Int): kotlin/Boolean // kotlin.native.concurrent/AtomicInt.compareAndSet|compareAndSet(kotlin.Int;kotlin.Int){}[0]
    final fun compareAndSwap(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.native.concurrent/AtomicInt.compareAndSwap|compareAndSwap(kotlin.Int;kotlin.Int){}[0]
    final fun decrement() // kotlin.native.concurrent/AtomicInt.decrement|decrement(){}[0]
    final fun decrementAndGet(): kotlin/Int // kotlin.native.concurrent/AtomicInt.decrementAndGet|decrementAndGet(){}[0]
    final fun getAndAdd(kotlin/Int): kotlin/Int // kotlin.native.concurrent/AtomicInt.getAndAdd|getAndAdd(kotlin.Int){}[0]
    final fun getAndDecrement(): kotlin/Int // kotlin.native.concurrent/AtomicInt.getAndDecrement|getAndDecrement(){}[0]
    final fun getAndIncrement(): kotlin/Int // kotlin.native.concurrent/AtomicInt.getAndIncrement|getAndIncrement(){}[0]
    final fun getAndSet(kotlin/Int): kotlin/Int // kotlin.native.concurrent/AtomicInt.getAndSet|getAndSet(kotlin.Int){}[0]
    final fun increment() // kotlin.native.concurrent/AtomicInt.increment|increment(){}[0]
    final fun incrementAndGet(): kotlin/Int // kotlin.native.concurrent/AtomicInt.incrementAndGet|incrementAndGet(){}[0]
    final fun toString(): kotlin/String // kotlin.native.concurrent/AtomicInt.toString|toString(){}[0]
}

// Targets: [native]
final class kotlin.native.concurrent/AtomicLong { // kotlin.native.concurrent/AtomicLong|null[0]
    constructor <init>(kotlin/Long = ...) // kotlin.native.concurrent/AtomicLong.<init>|<init>(kotlin.Long){}[0]

    final var value // kotlin.native.concurrent/AtomicLong.value|{}value[0]
        final fun <get-value>(): kotlin/Long // kotlin.native.concurrent/AtomicLong.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/Long) // kotlin.native.concurrent/AtomicLong.value.<set-value>|<set-value>(kotlin.Long){}[0]

    final fun addAndGet(kotlin/Int): kotlin/Long // kotlin.native.concurrent/AtomicLong.addAndGet|addAndGet(kotlin.Int){}[0]
    final fun addAndGet(kotlin/Long): kotlin/Long // kotlin.native.concurrent/AtomicLong.addAndGet|addAndGet(kotlin.Long){}[0]
    final fun compareAndSet(kotlin/Long, kotlin/Long): kotlin/Boolean // kotlin.native.concurrent/AtomicLong.compareAndSet|compareAndSet(kotlin.Long;kotlin.Long){}[0]
    final fun compareAndSwap(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.native.concurrent/AtomicLong.compareAndSwap|compareAndSwap(kotlin.Long;kotlin.Long){}[0]
    final fun decrement() // kotlin.native.concurrent/AtomicLong.decrement|decrement(){}[0]
    final fun decrementAndGet(): kotlin/Long // kotlin.native.concurrent/AtomicLong.decrementAndGet|decrementAndGet(){}[0]
    final fun getAndAdd(kotlin/Long): kotlin/Long // kotlin.native.concurrent/AtomicLong.getAndAdd|getAndAdd(kotlin.Long){}[0]
    final fun getAndDecrement(): kotlin/Long // kotlin.native.concurrent/AtomicLong.getAndDecrement|getAndDecrement(){}[0]
    final fun getAndIncrement(): kotlin/Long // kotlin.native.concurrent/AtomicLong.getAndIncrement|getAndIncrement(){}[0]
    final fun getAndSet(kotlin/Long): kotlin/Long // kotlin.native.concurrent/AtomicLong.getAndSet|getAndSet(kotlin.Long){}[0]
    final fun increment() // kotlin.native.concurrent/AtomicLong.increment|increment(){}[0]
    final fun incrementAndGet(): kotlin/Long // kotlin.native.concurrent/AtomicLong.incrementAndGet|incrementAndGet(){}[0]
    final fun toString(): kotlin/String // kotlin.native.concurrent/AtomicLong.toString|toString(){}[0]
}

// Targets: [native]
final class kotlin.native.concurrent/AtomicNativePtr { // kotlin.native.concurrent/AtomicNativePtr|null[0]
    constructor <init>(kotlin.native.internal/NativePtr) // kotlin.native.concurrent/AtomicNativePtr.<init>|<init>(kotlin.native.internal.NativePtr){}[0]

    final var value // kotlin.native.concurrent/AtomicNativePtr.value|{}value[0]
        final fun <get-value>(): kotlin.native.internal/NativePtr // kotlin.native.concurrent/AtomicNativePtr.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin.native.internal/NativePtr) // kotlin.native.concurrent/AtomicNativePtr.value.<set-value>|<set-value>(kotlin.native.internal.NativePtr){}[0]

    final fun compareAndSet(kotlin.native.internal/NativePtr, kotlin.native.internal/NativePtr): kotlin/Boolean // kotlin.native.concurrent/AtomicNativePtr.compareAndSet|compareAndSet(kotlin.native.internal.NativePtr;kotlin.native.internal.NativePtr){}[0]
    final fun compareAndSwap(kotlin.native.internal/NativePtr, kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlin.native.concurrent/AtomicNativePtr.compareAndSwap|compareAndSwap(kotlin.native.internal.NativePtr;kotlin.native.internal.NativePtr){}[0]
    final fun getAndSet(kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlin.native.concurrent/AtomicNativePtr.getAndSet|getAndSet(kotlin.native.internal.NativePtr){}[0]
    final fun toString(): kotlin/String // kotlin.native.concurrent/AtomicNativePtr.toString|toString(){}[0]
}

// Targets: [native]
final class kotlin.native.concurrent/Continuation0 : kotlin/Function0<kotlin/Unit> { // kotlin.native.concurrent/Continuation0|null[0]
    constructor <init>(kotlin/Function0<kotlin/Unit>, kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function1<kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>?, kotlin/Unit>>>, kotlin/Boolean = ...) // kotlin.native.concurrent/Continuation0.<init>|<init>(kotlin.Function0<kotlin.Unit>;kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function1<kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>?,kotlin.Unit>>>;kotlin.Boolean){}[0]

    final fun dispose() // kotlin.native.concurrent/Continuation0.dispose|dispose(){}[0]
    final fun invoke() // kotlin.native.concurrent/Continuation0.invoke|invoke(){}[0]
}

// Targets: [native]
final class kotlin.native.concurrent/FreezingException : kotlin/RuntimeException { // kotlin.native.concurrent/FreezingException|null[0]
    constructor <init>(kotlin/Any, kotlin/Any) // kotlin.native.concurrent/FreezingException.<init>|<init>(kotlin.Any;kotlin.Any){}[0]
}

// Targets: [native]
final class kotlin.native.concurrent/InvalidMutabilityException : kotlin/RuntimeException { // kotlin.native.concurrent/InvalidMutabilityException|null[0]
    constructor <init>(kotlin/String) // kotlin.native.concurrent/InvalidMutabilityException.<init>|<init>(kotlin.String){}[0]
}

// Targets: [native]
final class kotlin.native.concurrent/MutableData { // kotlin.native.concurrent/MutableData|null[0]
    constructor <init>(kotlin/Int = ...) // kotlin.native.concurrent/MutableData.<init>|<init>(kotlin.Int){}[0]

    final val size // kotlin.native.concurrent/MutableData.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.native.concurrent/MutableData.size.<get-size>|<get-size>(){}[0]

    final fun <#A1: kotlin/Any?> withBufferLocked(kotlin/Function2<kotlin/ByteArray, kotlin/Int, #A1>): #A1 // kotlin.native.concurrent/MutableData.withBufferLocked|withBufferLocked(kotlin.Function2<kotlin.ByteArray,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> withPointerLocked(kotlin/Function2<kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>, kotlin/Int, #A1>): #A1 // kotlin.native.concurrent/MutableData.withPointerLocked|withPointerLocked(kotlin.Function2<kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>,kotlin.Int,0:0>){0§<kotlin.Any?>}[0]
    final fun append(kotlin.native.concurrent/MutableData) // kotlin.native.concurrent/MutableData.append|append(kotlin.native.concurrent.MutableData){}[0]
    final fun append(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ...) // kotlin.native.concurrent/MutableData.append|append(kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    final fun append(kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>?, kotlin/Int) // kotlin.native.concurrent/MutableData.append|append(kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>?;kotlin.Int){}[0]
    final fun copyInto(kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int) // kotlin.native.concurrent/MutableData.copyInto|copyInto(kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun get(kotlin/Int): kotlin/Byte // kotlin.native.concurrent/MutableData.get|get(kotlin.Int){}[0]
    final fun reset() // kotlin.native.concurrent/MutableData.reset|reset(){}[0]
}

// Targets: [native]
final class kotlin.native.internal.gc/GCInfo { // kotlin.native.internal.gc/GCInfo|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long?, kotlin/Long?, kotlin/Long?, kotlin/Long?, kotlin.native.internal.gc/RootSetStatistics, kotlin.collections/Map<kotlin/String, kotlin.native.internal.gc/MemoryUsage>, kotlin.collections/Map<kotlin/String, kotlin.native.internal.gc/MemoryUsage>) // kotlin.native.internal.gc/GCInfo.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long?;kotlin.Long?;kotlin.Long?;kotlin.Long?;kotlin.native.internal.gc.RootSetStatistics;kotlin.collections.Map<kotlin.String,kotlin.native.internal.gc.MemoryUsage>;kotlin.collections.Map<kotlin.String,kotlin.native.internal.gc.MemoryUsage>){}[0]

    final val endTimeNs // kotlin.native.internal.gc/GCInfo.endTimeNs|{}endTimeNs[0]
        final fun <get-endTimeNs>(): kotlin/Long // kotlin.native.internal.gc/GCInfo.endTimeNs.<get-endTimeNs>|<get-endTimeNs>(){}[0]
    final val epoch // kotlin.native.internal.gc/GCInfo.epoch|{}epoch[0]
        final fun <get-epoch>(): kotlin/Long // kotlin.native.internal.gc/GCInfo.epoch.<get-epoch>|<get-epoch>(){}[0]
    final val firstPauseEndTimeNs // kotlin.native.internal.gc/GCInfo.firstPauseEndTimeNs|{}firstPauseEndTimeNs[0]
        final fun <get-firstPauseEndTimeNs>(): kotlin/Long // kotlin.native.internal.gc/GCInfo.firstPauseEndTimeNs.<get-firstPauseEndTimeNs>|<get-firstPauseEndTimeNs>(){}[0]
    final val firstPauseRequestTimeNs // kotlin.native.internal.gc/GCInfo.firstPauseRequestTimeNs|{}firstPauseRequestTimeNs[0]
        final fun <get-firstPauseRequestTimeNs>(): kotlin/Long // kotlin.native.internal.gc/GCInfo.firstPauseRequestTimeNs.<get-firstPauseRequestTimeNs>|<get-firstPauseRequestTimeNs>(){}[0]
    final val firstPauseStartTimeNs // kotlin.native.internal.gc/GCInfo.firstPauseStartTimeNs|{}firstPauseStartTimeNs[0]
        final fun <get-firstPauseStartTimeNs>(): kotlin/Long // kotlin.native.internal.gc/GCInfo.firstPauseStartTimeNs.<get-firstPauseStartTimeNs>|<get-firstPauseStartTimeNs>(){}[0]
    final val memoryUsageAfter // kotlin.native.internal.gc/GCInfo.memoryUsageAfter|{}memoryUsageAfter[0]
        final fun <get-memoryUsageAfter>(): kotlin.collections/Map<kotlin/String, kotlin.native.internal.gc/MemoryUsage> // kotlin.native.internal.gc/GCInfo.memoryUsageAfter.<get-memoryUsageAfter>|<get-memoryUsageAfter>(){}[0]
    final val memoryUsageBefore // kotlin.native.internal.gc/GCInfo.memoryUsageBefore|{}memoryUsageBefore[0]
        final fun <get-memoryUsageBefore>(): kotlin.collections/Map<kotlin/String, kotlin.native.internal.gc/MemoryUsage> // kotlin.native.internal.gc/GCInfo.memoryUsageBefore.<get-memoryUsageBefore>|<get-memoryUsageBefore>(){}[0]
    final val postGcCleanupTimeNs // kotlin.native.internal.gc/GCInfo.postGcCleanupTimeNs|{}postGcCleanupTimeNs[0]
        final fun <get-postGcCleanupTimeNs>(): kotlin/Long? // kotlin.native.internal.gc/GCInfo.postGcCleanupTimeNs.<get-postGcCleanupTimeNs>|<get-postGcCleanupTimeNs>(){}[0]
    final val rootSet // kotlin.native.internal.gc/GCInfo.rootSet|{}rootSet[0]
        final fun <get-rootSet>(): kotlin.native.internal.gc/RootSetStatistics // kotlin.native.internal.gc/GCInfo.rootSet.<get-rootSet>|<get-rootSet>(){}[0]
    final val secondPauseEndTimeNs // kotlin.native.internal.gc/GCInfo.secondPauseEndTimeNs|{}secondPauseEndTimeNs[0]
        final fun <get-secondPauseEndTimeNs>(): kotlin/Long? // kotlin.native.internal.gc/GCInfo.secondPauseEndTimeNs.<get-secondPauseEndTimeNs>|<get-secondPauseEndTimeNs>(){}[0]
    final val secondPauseRequestTimeNs // kotlin.native.internal.gc/GCInfo.secondPauseRequestTimeNs|{}secondPauseRequestTimeNs[0]
        final fun <get-secondPauseRequestTimeNs>(): kotlin/Long? // kotlin.native.internal.gc/GCInfo.secondPauseRequestTimeNs.<get-secondPauseRequestTimeNs>|<get-secondPauseRequestTimeNs>(){}[0]
    final val secondPauseStartTimeNs // kotlin.native.internal.gc/GCInfo.secondPauseStartTimeNs|{}secondPauseStartTimeNs[0]
        final fun <get-secondPauseStartTimeNs>(): kotlin/Long? // kotlin.native.internal.gc/GCInfo.secondPauseStartTimeNs.<get-secondPauseStartTimeNs>|<get-secondPauseStartTimeNs>(){}[0]
    final val startTimeNs // kotlin.native.internal.gc/GCInfo.startTimeNs|{}startTimeNs[0]
        final fun <get-startTimeNs>(): kotlin/Long // kotlin.native.internal.gc/GCInfo.startTimeNs.<get-startTimeNs>|<get-startTimeNs>(){}[0]
}

// Targets: [native]
final class kotlin.native.internal.gc/MemoryUsage { // kotlin.native.internal.gc/MemoryUsage|null[0]
    constructor <init>(kotlin/Long, kotlin/Long) // kotlin.native.internal.gc/MemoryUsage.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

    final val objectsCount // kotlin.native.internal.gc/MemoryUsage.objectsCount|{}objectsCount[0]
        final fun <get-objectsCount>(): kotlin/Long // kotlin.native.internal.gc/MemoryUsage.objectsCount.<get-objectsCount>|<get-objectsCount>(){}[0]
    final val totalObjectsSizeBytes // kotlin.native.internal.gc/MemoryUsage.totalObjectsSizeBytes|{}totalObjectsSizeBytes[0]
        final fun <get-totalObjectsSizeBytes>(): kotlin/Long // kotlin.native.internal.gc/MemoryUsage.totalObjectsSizeBytes.<get-totalObjectsSizeBytes>|<get-totalObjectsSizeBytes>(){}[0]
}

// Targets: [native]
final class kotlin.native.internal.gc/RootSetStatistics { // kotlin.native.internal.gc/RootSetStatistics|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long) // kotlin.native.internal.gc/RootSetStatistics.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val globalReferences // kotlin.native.internal.gc/RootSetStatistics.globalReferences|{}globalReferences[0]
        final fun <get-globalReferences>(): kotlin/Long // kotlin.native.internal.gc/RootSetStatistics.globalReferences.<get-globalReferences>|<get-globalReferences>(){}[0]
    final val stableReferences // kotlin.native.internal.gc/RootSetStatistics.stableReferences|{}stableReferences[0]
        final fun <get-stableReferences>(): kotlin/Long // kotlin.native.internal.gc/RootSetStatistics.stableReferences.<get-stableReferences>|<get-stableReferences>(){}[0]
    final val stackReferences // kotlin.native.internal.gc/RootSetStatistics.stackReferences|{}stackReferences[0]
        final fun <get-stackReferences>(): kotlin/Long // kotlin.native.internal.gc/RootSetStatistics.stackReferences.<get-stackReferences>|<get-stackReferences>(){}[0]
    final val threadLocalReferences // kotlin.native.internal.gc/RootSetStatistics.threadLocalReferences|{}threadLocalReferences[0]
        final fun <get-threadLocalReferences>(): kotlin/Long // kotlin.native.internal.gc/RootSetStatistics.threadLocalReferences.<get-threadLocalReferences>|<get-threadLocalReferences>(){}[0]
}

// Targets: [native]
final class kotlin.native.internal.test/TopLevelSuite : kotlin.native.internal.test/AbstractTestSuite<kotlin/Function0<kotlin/Unit>> { // kotlin.native.internal.test/TopLevelSuite|null[0]
    constructor <init>(kotlin/String) // kotlin.native.internal.test/TopLevelSuite.<init>|<init>(kotlin.String){}[0]

    final val after // kotlin.native.internal.test/TopLevelSuite.after|{}after[0]
        final fun <get-after>(): kotlin.collections/Collection<kotlin/Function0<kotlin/Unit>> // kotlin.native.internal.test/TopLevelSuite.after.<get-after>|<get-after>(){}[0]
    final val afterClass // kotlin.native.internal.test/TopLevelSuite.afterClass|{}afterClass[0]
        final fun <get-afterClass>(): kotlin.collections/Collection<kotlin/Function0<kotlin/Unit>> // kotlin.native.internal.test/TopLevelSuite.afterClass.<get-afterClass>|<get-afterClass>(){}[0]
    final val before // kotlin.native.internal.test/TopLevelSuite.before|{}before[0]
        final fun <get-before>(): kotlin.collections/Collection<kotlin/Function0<kotlin/Unit>> // kotlin.native.internal.test/TopLevelSuite.before.<get-before>|<get-before>(){}[0]
    final val beforeClass // kotlin.native.internal.test/TopLevelSuite.beforeClass|{}beforeClass[0]
        final fun <get-beforeClass>(): kotlin.collections/Collection<kotlin/Function0<kotlin/Unit>> // kotlin.native.internal.test/TopLevelSuite.beforeClass.<get-beforeClass>|<get-beforeClass>(){}[0]

    final fun createTestCase(kotlin/String, kotlin/Function0<kotlin/Unit>, kotlin/Boolean): kotlin.native.internal.test/AbstractTestSuite.BasicTestCase<kotlin/Function0<kotlin/Unit>> // kotlin.native.internal.test/TopLevelSuite.createTestCase|createTestCase(kotlin.String;kotlin.Function0<kotlin.Unit>;kotlin.Boolean){}[0]
    final fun doAfterClass() // kotlin.native.internal.test/TopLevelSuite.doAfterClass|doAfterClass(){}[0]
    final fun doBeforeClass() // kotlin.native.internal.test/TopLevelSuite.doBeforeClass|doBeforeClass(){}[0]
    final fun registerFunction(kotlin.native.internal.test/TestFunctionKind, kotlin/Function0<kotlin/Unit>): kotlin/Boolean // kotlin.native.internal.test/TopLevelSuite.registerFunction|registerFunction(kotlin.native.internal.test.TestFunctionKind;kotlin.Function0<kotlin.Unit>){}[0]

    final class TestCase : kotlin.native.internal.test/AbstractTestSuite.BasicTestCase<kotlin/Function0<kotlin/Unit>> { // kotlin.native.internal.test/TopLevelSuite.TestCase|null[0]
        constructor <init>(kotlin/String, kotlin.native.internal.test/TopLevelSuite, kotlin/Function0<kotlin/Unit>, kotlin/Boolean) // kotlin.native.internal.test/TopLevelSuite.TestCase.<init>|<init>(kotlin.String;kotlin.native.internal.test.TopLevelSuite;kotlin.Function0<kotlin.Unit>;kotlin.Boolean){}[0]

        final val suite // kotlin.native.internal.test/TopLevelSuite.TestCase.suite|{}suite[0]
            final fun <get-suite>(): kotlin.native.internal.test/TopLevelSuite // kotlin.native.internal.test/TopLevelSuite.TestCase.suite.<get-suite>|<get-suite>(){}[0]

        final fun doAfter() // kotlin.native.internal.test/TopLevelSuite.TestCase.doAfter|doAfter(){}[0]
        final fun doBefore() // kotlin.native.internal.test/TopLevelSuite.TestCase.doBefore|doBefore(){}[0]
        final fun doRun() // kotlin.native.internal.test/TopLevelSuite.TestCase.doRun|doRun(){}[0]
    }
}

// Targets: [native]
final class kotlin.native.internal/KClassUnsupportedImpl : kotlin.reflect/KClass<kotlin/Any> { // kotlin.native.internal/KClassUnsupportedImpl|null[0]
    constructor <init>(kotlin/String) // kotlin.native.internal/KClassUnsupportedImpl.<init>|<init>(kotlin.String){}[0]

    final val qualifiedName // kotlin.native.internal/KClassUnsupportedImpl.qualifiedName|{}qualifiedName[0]
        final fun <get-qualifiedName>(): kotlin/String? // kotlin.native.internal/KClassUnsupportedImpl.qualifiedName.<get-qualifiedName>|<get-qualifiedName>(){}[0]
    final val simpleName // kotlin.native.internal/KClassUnsupportedImpl.simpleName|{}simpleName[0]
        final fun <get-simpleName>(): kotlin/String? // kotlin.native.internal/KClassUnsupportedImpl.simpleName.<get-simpleName>|<get-simpleName>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KClassUnsupportedImpl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/KClassUnsupportedImpl.hashCode|hashCode(){}[0]
    final fun isInstance(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/KClassUnsupportedImpl.isInstance|isInstance(kotlin.Any?){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/KClassUnsupportedImpl.toString|toString(){}[0]
}

// Targets: [native]
final class kotlin.native.internal/NativePtr { // kotlin.native.internal/NativePtr|null[0]
    constructor <init>(kotlin.native.internal/NonNullNativePtr?) // kotlin.native.internal/NativePtr.<init>|<init>(kotlin.native.internal.NonNullNativePtr?){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/NativePtr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/NativePtr.hashCode|hashCode(){}[0]
    final fun plus(kotlin/Long): kotlin.native.internal/NativePtr // kotlin.native.internal/NativePtr.plus|plus(kotlin.Long){}[0]
    final fun toLong(): kotlin/Long // kotlin.native.internal/NativePtr.toLong|toLong(){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/NativePtr.toString|toString(){}[0]

    final object Companion { // kotlin.native.internal/NativePtr.Companion|null[0]
        final val NULL // kotlin.native.internal/NativePtr.Companion.NULL|{}NULL[0]
            final fun <get-NULL>(): kotlin.native.internal/NativePtr // kotlin.native.internal/NativePtr.Companion.NULL.<get-NULL>|<get-NULL>(){}[0]
    }
}

// Targets: [native]
final class kotlin.native.internal/NonNullNativePtr { // kotlin.native.internal/NonNullNativePtr|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.internal/NonNullNativePtr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.internal/NonNullNativePtr.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.native.internal/NonNullNativePtr.toString|toString(){}[0]
    final inline fun toNativePtr(): kotlin.native.internal/NativePtr // kotlin.native.internal/NonNullNativePtr.toNativePtr|toNativePtr(){}[0]
}

// Targets: [native]
final class kotlin.native.internal/ObjCErrorException : kotlin/Exception { // kotlin.native.internal/ObjCErrorException|null[0]
    constructor <init>(kotlin/String?, kotlin/Any) // kotlin.native.internal/ObjCErrorException.<init>|<init>(kotlin.String?;kotlin.Any){}[0]

    final fun toString(): kotlin/String // kotlin.native.internal/ObjCErrorException.toString|toString(){}[0]
}

// Targets: [native]
final class kotlin.native.internal/OpaqueFunction : kotlin/Function<kotlin/Any?> { // kotlin.native.internal/OpaqueFunction|null[0]
    constructor <init>() // kotlin.native.internal/OpaqueFunction.<init>|<init>(){}[0]
}

// Targets: [native]
final class kotlin.native.runtime/GCInfo { // kotlin.native.runtime/GCInfo|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long?, kotlin/Long?, kotlin/Long?, kotlin/Long?, kotlin.native.runtime/RootSetStatistics, kotlin/Long, kotlin.collections/Map<kotlin/String, kotlin.native.runtime/SweepStatistics>, kotlin.collections/Map<kotlin/String, kotlin.native.runtime/MemoryUsage>, kotlin.collections/Map<kotlin/String, kotlin.native.runtime/MemoryUsage>) // kotlin.native.runtime/GCInfo.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long?;kotlin.Long?;kotlin.Long?;kotlin.Long?;kotlin.native.runtime.RootSetStatistics;kotlin.Long;kotlin.collections.Map<kotlin.String,kotlin.native.runtime.SweepStatistics>;kotlin.collections.Map<kotlin.String,kotlin.native.runtime.MemoryUsage>;kotlin.collections.Map<kotlin.String,kotlin.native.runtime.MemoryUsage>){}[0]

    final val endTimeNs // kotlin.native.runtime/GCInfo.endTimeNs|{}endTimeNs[0]
        final fun <get-endTimeNs>(): kotlin/Long // kotlin.native.runtime/GCInfo.endTimeNs.<get-endTimeNs>|<get-endTimeNs>(){}[0]
    final val epoch // kotlin.native.runtime/GCInfo.epoch|{}epoch[0]
        final fun <get-epoch>(): kotlin/Long // kotlin.native.runtime/GCInfo.epoch.<get-epoch>|<get-epoch>(){}[0]
    final val firstPauseEndTimeNs // kotlin.native.runtime/GCInfo.firstPauseEndTimeNs|{}firstPauseEndTimeNs[0]
        final fun <get-firstPauseEndTimeNs>(): kotlin/Long // kotlin.native.runtime/GCInfo.firstPauseEndTimeNs.<get-firstPauseEndTimeNs>|<get-firstPauseEndTimeNs>(){}[0]
    final val firstPauseRequestTimeNs // kotlin.native.runtime/GCInfo.firstPauseRequestTimeNs|{}firstPauseRequestTimeNs[0]
        final fun <get-firstPauseRequestTimeNs>(): kotlin/Long // kotlin.native.runtime/GCInfo.firstPauseRequestTimeNs.<get-firstPauseRequestTimeNs>|<get-firstPauseRequestTimeNs>(){}[0]
    final val firstPauseStartTimeNs // kotlin.native.runtime/GCInfo.firstPauseStartTimeNs|{}firstPauseStartTimeNs[0]
        final fun <get-firstPauseStartTimeNs>(): kotlin/Long // kotlin.native.runtime/GCInfo.firstPauseStartTimeNs.<get-firstPauseStartTimeNs>|<get-firstPauseStartTimeNs>(){}[0]
    final val markedCount // kotlin.native.runtime/GCInfo.markedCount|{}markedCount[0]
        final fun <get-markedCount>(): kotlin/Long // kotlin.native.runtime/GCInfo.markedCount.<get-markedCount>|<get-markedCount>(){}[0]
    final val memoryUsageAfter // kotlin.native.runtime/GCInfo.memoryUsageAfter|{}memoryUsageAfter[0]
        final fun <get-memoryUsageAfter>(): kotlin.collections/Map<kotlin/String, kotlin.native.runtime/MemoryUsage> // kotlin.native.runtime/GCInfo.memoryUsageAfter.<get-memoryUsageAfter>|<get-memoryUsageAfter>(){}[0]
    final val memoryUsageBefore // kotlin.native.runtime/GCInfo.memoryUsageBefore|{}memoryUsageBefore[0]
        final fun <get-memoryUsageBefore>(): kotlin.collections/Map<kotlin/String, kotlin.native.runtime/MemoryUsage> // kotlin.native.runtime/GCInfo.memoryUsageBefore.<get-memoryUsageBefore>|<get-memoryUsageBefore>(){}[0]
    final val postGcCleanupTimeNs // kotlin.native.runtime/GCInfo.postGcCleanupTimeNs|{}postGcCleanupTimeNs[0]
        final fun <get-postGcCleanupTimeNs>(): kotlin/Long? // kotlin.native.runtime/GCInfo.postGcCleanupTimeNs.<get-postGcCleanupTimeNs>|<get-postGcCleanupTimeNs>(){}[0]
    final val rootSet // kotlin.native.runtime/GCInfo.rootSet|{}rootSet[0]
        final fun <get-rootSet>(): kotlin.native.runtime/RootSetStatistics // kotlin.native.runtime/GCInfo.rootSet.<get-rootSet>|<get-rootSet>(){}[0]
    final val secondPauseEndTimeNs // kotlin.native.runtime/GCInfo.secondPauseEndTimeNs|{}secondPauseEndTimeNs[0]
        final fun <get-secondPauseEndTimeNs>(): kotlin/Long? // kotlin.native.runtime/GCInfo.secondPauseEndTimeNs.<get-secondPauseEndTimeNs>|<get-secondPauseEndTimeNs>(){}[0]
    final val secondPauseRequestTimeNs // kotlin.native.runtime/GCInfo.secondPauseRequestTimeNs|{}secondPauseRequestTimeNs[0]
        final fun <get-secondPauseRequestTimeNs>(): kotlin/Long? // kotlin.native.runtime/GCInfo.secondPauseRequestTimeNs.<get-secondPauseRequestTimeNs>|<get-secondPauseRequestTimeNs>(){}[0]
    final val secondPauseStartTimeNs // kotlin.native.runtime/GCInfo.secondPauseStartTimeNs|{}secondPauseStartTimeNs[0]
        final fun <get-secondPauseStartTimeNs>(): kotlin/Long? // kotlin.native.runtime/GCInfo.secondPauseStartTimeNs.<get-secondPauseStartTimeNs>|<get-secondPauseStartTimeNs>(){}[0]
    final val startTimeNs // kotlin.native.runtime/GCInfo.startTimeNs|{}startTimeNs[0]
        final fun <get-startTimeNs>(): kotlin/Long // kotlin.native.runtime/GCInfo.startTimeNs.<get-startTimeNs>|<get-startTimeNs>(){}[0]
    final val sweepStatistics // kotlin.native.runtime/GCInfo.sweepStatistics|{}sweepStatistics[0]
        final fun <get-sweepStatistics>(): kotlin.collections/Map<kotlin/String, kotlin.native.runtime/SweepStatistics> // kotlin.native.runtime/GCInfo.sweepStatistics.<get-sweepStatistics>|<get-sweepStatistics>(){}[0]
}

// Targets: [native]
final class kotlin.native.runtime/MemoryUsage { // kotlin.native.runtime/MemoryUsage|null[0]
    constructor <init>(kotlin/Long) // kotlin.native.runtime/MemoryUsage.<init>|<init>(kotlin.Long){}[0]

    final val totalObjectsSizeBytes // kotlin.native.runtime/MemoryUsage.totalObjectsSizeBytes|{}totalObjectsSizeBytes[0]
        final fun <get-totalObjectsSizeBytes>(): kotlin/Long // kotlin.native.runtime/MemoryUsage.totalObjectsSizeBytes.<get-totalObjectsSizeBytes>|<get-totalObjectsSizeBytes>(){}[0]
}

// Targets: [native]
final class kotlin.native.runtime/RootSetStatistics { // kotlin.native.runtime/RootSetStatistics|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long) // kotlin.native.runtime/RootSetStatistics.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val globalReferences // kotlin.native.runtime/RootSetStatistics.globalReferences|{}globalReferences[0]
        final fun <get-globalReferences>(): kotlin/Long // kotlin.native.runtime/RootSetStatistics.globalReferences.<get-globalReferences>|<get-globalReferences>(){}[0]
    final val stableReferences // kotlin.native.runtime/RootSetStatistics.stableReferences|{}stableReferences[0]
        final fun <get-stableReferences>(): kotlin/Long // kotlin.native.runtime/RootSetStatistics.stableReferences.<get-stableReferences>|<get-stableReferences>(){}[0]
    final val stackReferences // kotlin.native.runtime/RootSetStatistics.stackReferences|{}stackReferences[0]
        final fun <get-stackReferences>(): kotlin/Long // kotlin.native.runtime/RootSetStatistics.stackReferences.<get-stackReferences>|<get-stackReferences>(){}[0]
    final val threadLocalReferences // kotlin.native.runtime/RootSetStatistics.threadLocalReferences|{}threadLocalReferences[0]
        final fun <get-threadLocalReferences>(): kotlin/Long // kotlin.native.runtime/RootSetStatistics.threadLocalReferences.<get-threadLocalReferences>|<get-threadLocalReferences>(){}[0]
}

// Targets: [native]
final class kotlin.native.runtime/SweepStatistics { // kotlin.native.runtime/SweepStatistics|null[0]
    constructor <init>(kotlin/Long, kotlin/Long) // kotlin.native.runtime/SweepStatistics.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

    final val keptCount // kotlin.native.runtime/SweepStatistics.keptCount|{}keptCount[0]
        final fun <get-keptCount>(): kotlin/Long // kotlin.native.runtime/SweepStatistics.keptCount.<get-keptCount>|<get-keptCount>(){}[0]
    final val sweptCount // kotlin.native.runtime/SweepStatistics.sweptCount|{}sweptCount[0]
        final fun <get-sweptCount>(): kotlin/Long // kotlin.native.runtime/SweepStatistics.sweptCount.<get-sweptCount>|<get-sweptCount>(){}[0]
}

// Targets: [native]
final class kotlin.native/BitSet { // kotlin.native/BitSet|null[0]
    constructor <init>(kotlin/Int = ...) // kotlin.native/BitSet.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Function1<kotlin/Int, kotlin/Boolean>) // kotlin.native/BitSet.<init>|<init>(kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Boolean>){}[0]

    final val isEmpty // kotlin.native/BitSet.isEmpty|{}isEmpty[0]
        final fun <get-isEmpty>(): kotlin/Boolean // kotlin.native/BitSet.isEmpty.<get-isEmpty>|<get-isEmpty>(){}[0]
    final val lastTrueIndex // kotlin.native/BitSet.lastTrueIndex|{}lastTrueIndex[0]
        final fun <get-lastTrueIndex>(): kotlin/Int // kotlin.native/BitSet.lastTrueIndex.<get-lastTrueIndex>|<get-lastTrueIndex>(){}[0]

    final var size // kotlin.native/BitSet.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.native/BitSet.size.<get-size>|<get-size>(){}[0]

    final fun and(kotlin.native/BitSet) // kotlin.native/BitSet.and|and(kotlin.native.BitSet){}[0]
    final fun andNot(kotlin.native/BitSet) // kotlin.native/BitSet.andNot|andNot(kotlin.native.BitSet){}[0]
    final fun clear() // kotlin.native/BitSet.clear|clear(){}[0]
    final fun clear(kotlin.ranges/IntRange) // kotlin.native/BitSet.clear|clear(kotlin.ranges.IntRange){}[0]
    final fun clear(kotlin/Int) // kotlin.native/BitSet.clear|clear(kotlin.Int){}[0]
    final fun clear(kotlin/Int, kotlin/Int) // kotlin.native/BitSet.clear|clear(kotlin.Int;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native/BitSet.equals|equals(kotlin.Any?){}[0]
    final fun flip(kotlin.ranges/IntRange) // kotlin.native/BitSet.flip|flip(kotlin.ranges.IntRange){}[0]
    final fun flip(kotlin/Int) // kotlin.native/BitSet.flip|flip(kotlin.Int){}[0]
    final fun flip(kotlin/Int, kotlin/Int) // kotlin.native/BitSet.flip|flip(kotlin.Int;kotlin.Int){}[0]
    final fun get(kotlin/Int): kotlin/Boolean // kotlin.native/BitSet.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native/BitSet.hashCode|hashCode(){}[0]
    final fun intersects(kotlin.native/BitSet): kotlin/Boolean // kotlin.native/BitSet.intersects|intersects(kotlin.native.BitSet){}[0]
    final fun nextClearBit(kotlin/Int = ...): kotlin/Int // kotlin.native/BitSet.nextClearBit|nextClearBit(kotlin.Int){}[0]
    final fun nextSetBit(kotlin/Int = ...): kotlin/Int // kotlin.native/BitSet.nextSetBit|nextSetBit(kotlin.Int){}[0]
    final fun or(kotlin.native/BitSet) // kotlin.native/BitSet.or|or(kotlin.native.BitSet){}[0]
    final fun previousBit(kotlin/Int, kotlin/Boolean): kotlin/Int // kotlin.native/BitSet.previousBit|previousBit(kotlin.Int;kotlin.Boolean){}[0]
    final fun previousClearBit(kotlin/Int): kotlin/Int // kotlin.native/BitSet.previousClearBit|previousClearBit(kotlin.Int){}[0]
    final fun previousSetBit(kotlin/Int): kotlin/Int // kotlin.native/BitSet.previousSetBit|previousSetBit(kotlin.Int){}[0]
    final fun set(kotlin.ranges/IntRange, kotlin/Boolean = ...) // kotlin.native/BitSet.set|set(kotlin.ranges.IntRange;kotlin.Boolean){}[0]
    final fun set(kotlin/Int, kotlin/Boolean = ...) // kotlin.native/BitSet.set|set(kotlin.Int;kotlin.Boolean){}[0]
    final fun set(kotlin/Int, kotlin/Int, kotlin/Boolean = ...) // kotlin.native/BitSet.set|set(kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]
    final fun toString(): kotlin/String // kotlin.native/BitSet.toString|toString(){}[0]
    final fun xor(kotlin.native/BitSet) // kotlin.native/BitSet.xor|xor(kotlin.native.BitSet){}[0]

    final object Companion // kotlin.native/BitSet.Companion|null[0]
}

// Targets: [native]
final class kotlin.native/ImmutableBlob { // kotlin.native/ImmutableBlob|null[0]
    final val size // kotlin.native/ImmutableBlob.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlin.native/ImmutableBlob.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlin/Byte // kotlin.native/ImmutableBlob.get|get(kotlin.Int){}[0]
    final fun iterator(): kotlin.collections/ByteIterator // kotlin.native/ImmutableBlob.iterator|iterator(){}[0]
}

// Targets: [native]
final class kotlin.native/IncorrectDereferenceException : kotlin/RuntimeException { // kotlin.native/IncorrectDereferenceException|null[0]
    constructor <init>() // kotlin.native/IncorrectDereferenceException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String) // kotlin.native/IncorrectDereferenceException.<init>|<init>(kotlin.String){}[0]
}

// Targets: [native]
final class kotlinx.cinterop/Arena : kotlinx.cinterop/ArenaBase { // kotlinx.cinterop/Arena|null[0]
    constructor <init>(kotlinx.cinterop/NativeFreeablePlacement = ...) // kotlinx.cinterop/Arena.<init>|<init>(kotlinx.cinterop.NativeFreeablePlacement){}[0]

    final fun clear() // kotlinx.cinterop/Arena.clear|clear(){}[0]
}

// Targets: [native]
final class kotlinx.cinterop/ForeignException : kotlin/Exception { // kotlinx.cinterop/ForeignException|null[0]
    final val message // kotlinx.cinterop/ForeignException.message|{}message[0]
        final fun <get-message>(): kotlin/String // kotlinx.cinterop/ForeignException.message.<get-message>|<get-message>(){}[0]
    final val nativeException // kotlinx.cinterop/ForeignException.nativeException|{}nativeException[0]
        final fun <get-nativeException>(): kotlin/Any? // kotlinx.cinterop/ForeignException.nativeException.<get-nativeException>|<get-nativeException>(){}[0]
}

// Targets: [native]
final class kotlinx.cinterop/MemScope : kotlinx.cinterop/ArenaBase { // kotlinx.cinterop/MemScope|null[0]
    constructor <init>() // kotlinx.cinterop/MemScope.<init>|<init>(){}[0]

    final val memScope // kotlinx.cinterop/MemScope.memScope|{}memScope[0]
        final fun <get-memScope>(): kotlinx.cinterop/MemScope // kotlinx.cinterop/MemScope.memScope.<get-memScope>|<get-memScope>(){}[0]
    final val ptr // kotlinx.cinterop/MemScope.ptr|@kotlinx.cinterop.CValues<0:0>{0§<kotlinx.cinterop.CVariable>}ptr[0]
        final fun <#A2: kotlinx.cinterop/CVariable> (kotlinx.cinterop/CValues<#A2>).<get-ptr>(): kotlinx.cinterop/CPointer<#A2> // kotlinx.cinterop/MemScope.ptr.<get-ptr>|<get-ptr>@kotlinx.cinterop.CValues<0:0>(){0§<kotlinx.cinterop.CVariable>}[0]
}

// Targets: [native]
final class kotlinx.cinterop/Vector128 { // kotlinx.cinterop/Vector128|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.cinterop/Vector128.equals|equals(kotlin.Any?){}[0]
    final fun getByteAt(kotlin/Int): kotlin/Byte // kotlinx.cinterop/Vector128.getByteAt|getByteAt(kotlin.Int){}[0]
    final fun getDoubleAt(kotlin/Int): kotlin/Double // kotlinx.cinterop/Vector128.getDoubleAt|getDoubleAt(kotlin.Int){}[0]
    final fun getFloatAt(kotlin/Int): kotlin/Float // kotlinx.cinterop/Vector128.getFloatAt|getFloatAt(kotlin.Int){}[0]
    final fun getIntAt(kotlin/Int): kotlin/Int // kotlinx.cinterop/Vector128.getIntAt|getIntAt(kotlin.Int){}[0]
    final fun getLongAt(kotlin/Int): kotlin/Long // kotlinx.cinterop/Vector128.getLongAt|getLongAt(kotlin.Int){}[0]
    final fun getUByteAt(kotlin/Int): kotlin/UByte // kotlinx.cinterop/Vector128.getUByteAt|getUByteAt(kotlin.Int){}[0]
    final fun getUIntAt(kotlin/Int): kotlin/UInt // kotlinx.cinterop/Vector128.getUIntAt|getUIntAt(kotlin.Int){}[0]
    final fun getULongAt(kotlin/Int): kotlin/ULong // kotlinx.cinterop/Vector128.getULongAt|getULongAt(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.cinterop/Vector128.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlinx.cinterop/Vector128.toString|toString(){}[0]
}

// Targets: [native]
final value class <#A: kotlin/Any?> kotlin.native.concurrent/Future { // kotlin.native.concurrent/Future|null[0]
    constructor <init>(kotlin/Int) // kotlin.native.concurrent/Future.<init>|<init>(kotlin.Int){}[0]

    final val id // kotlin.native.concurrent/Future.id|{}id[0]
        final fun <get-id>(): kotlin/Int // kotlin.native.concurrent/Future.id.<get-id>|<get-id>(){}[0]
    final val result // kotlin.native.concurrent/Future.result|{}result[0]
        final fun <get-result>(): #A // kotlin.native.concurrent/Future.result.<get-result>|<get-result>(){}[0]
    final val state // kotlin.native.concurrent/Future.state|{}state[0]
        final fun <get-state>(): kotlin.native.concurrent/FutureState // kotlin.native.concurrent/Future.state.<get-state>|<get-state>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.concurrent/Future.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.concurrent/Future.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlin.native.concurrent/Future.toString|toString(){}[0]
    final inline fun <#A1: kotlin/Any?> consume(kotlin/Function1<#A, #A1>): #A1 // kotlin.native.concurrent/Future.consume|consume(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
}

// Targets: [native]
final value class <#A: out kotlin/Any> kotlinx.cinterop/StableRef { // kotlinx.cinterop/StableRef|null[0]
    constructor <init>(kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>) // kotlinx.cinterop/StableRef.<init>|<init>(kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>){}[0]

    final fun asCPointer(): kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed> // kotlinx.cinterop/StableRef.asCPointer|asCPointer(){}[0]
    final fun dispose() // kotlinx.cinterop/StableRef.dispose|dispose(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.cinterop/StableRef.equals|equals(kotlin.Any?){}[0]
    final fun get(): #A // kotlinx.cinterop/StableRef.get|get(){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.cinterop/StableRef.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotlinx.cinterop/StableRef.toString|toString(){}[0]

    final object Companion { // kotlinx.cinterop/StableRef.Companion|null[0]
        final fun <#A2: kotlin/Any> create(#A2): kotlinx.cinterop/StableRef<#A2> // kotlinx.cinterop/StableRef.Companion.create|create(0:0){0§<kotlin.Any>}[0]
    }
}

// Targets: [native]
final value class kotlin.native.concurrent/Worker { // kotlin.native.concurrent/Worker|null[0]
    constructor <init>(kotlin/Int) // kotlin.native.concurrent/Worker.<init>|<init>(kotlin.Int){}[0]

    final val id // kotlin.native.concurrent/Worker.id|{}id[0]
        final fun <get-id>(): kotlin/Int // kotlin.native.concurrent/Worker.id.<get-id>|<get-id>(){}[0]
    final val name // kotlin.native.concurrent/Worker.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.native.concurrent/Worker.name.<get-name>|<get-name>(){}[0]
    final val platformThreadId // kotlin.native.concurrent/Worker.platformThreadId|{}platformThreadId[0]
        final fun <get-platformThreadId>(): kotlin/ULong // kotlin.native.concurrent/Worker.platformThreadId.<get-platformThreadId>|<get-platformThreadId>(){}[0]

    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> execute(kotlin.native.concurrent/TransferMode, kotlin/Function0<#A1>, kotlin/Function1<#A1, #B1>): kotlin.native.concurrent/Future<#B1> // kotlin.native.concurrent/Worker.execute|execute(kotlin.native.concurrent.TransferMode;kotlin.Function0<0:0>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun asCPointer(): kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>? // kotlin.native.concurrent/Worker.asCPointer|asCPointer(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.native.concurrent/Worker.equals|equals(kotlin.Any?){}[0]
    final fun executeAfter(kotlin/Long = ..., kotlin/Function0<kotlin/Unit>) // kotlin.native.concurrent/Worker.executeAfter|executeAfter(kotlin.Long;kotlin.Function0<kotlin.Unit>){}[0]
    final fun hashCode(): kotlin/Int // kotlin.native.concurrent/Worker.hashCode|hashCode(){}[0]
    final fun park(kotlin/Long, kotlin/Boolean = ...): kotlin/Boolean // kotlin.native.concurrent/Worker.park|park(kotlin.Long;kotlin.Boolean){}[0]
    final fun processQueue(): kotlin/Boolean // kotlin.native.concurrent/Worker.processQueue|processQueue(){}[0]
    final fun requestTermination(kotlin/Boolean = ...): kotlin.native.concurrent/Future<kotlin/Unit> // kotlin.native.concurrent/Worker.requestTermination|requestTermination(kotlin.Boolean){}[0]
    final fun toString(): kotlin/String // kotlin.native.concurrent/Worker.toString|toString(){}[0]

    final object Companion { // kotlin.native.concurrent/Worker.Companion|null[0]
        final val activeWorkers // kotlin.native.concurrent/Worker.Companion.activeWorkers|{}activeWorkers[0]
            final fun <get-activeWorkers>(): kotlin.collections/List<kotlin.native.concurrent/Worker> // kotlin.native.concurrent/Worker.Companion.activeWorkers.<get-activeWorkers>|<get-activeWorkers>(){}[0]
        final val current // kotlin.native.concurrent/Worker.Companion.current|{}current[0]
            final fun <get-current>(): kotlin.native.concurrent/Worker // kotlin.native.concurrent/Worker.Companion.current.<get-current>|<get-current>(){}[0]

        final fun fromCPointer(kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>?): kotlin.native.concurrent/Worker // kotlin.native.concurrent/Worker.Companion.fromCPointer|fromCPointer(kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>?){}[0]
        final fun start(kotlin/Boolean = ..., kotlin/String? = ...): kotlin.native.concurrent/Worker // kotlin.native.concurrent/Worker.Companion.start|start(kotlin.Boolean;kotlin.String?){}[0]
    }
}

// Targets: [native]
open class kotlin/ArrayIndexOutOfBoundsException : kotlin/IndexOutOfBoundsException { // kotlin/ArrayIndexOutOfBoundsException|null[0]
    constructor <init>() // kotlin/ArrayIndexOutOfBoundsException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/ArrayIndexOutOfBoundsException.<init>|<init>(kotlin.String?){}[0]
}

// Targets: [native]
open class kotlin/TypeCastException : kotlin/ClassCastException { // kotlin/TypeCastException|null[0]
    constructor <init>() // kotlin/TypeCastException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/TypeCastException.<init>|<init>(kotlin.String?){}[0]
}

// Targets: [native]
open class kotlinx.cinterop/ArenaBase : kotlinx.cinterop/AutofreeScope { // kotlinx.cinterop/ArenaBase|null[0]
    constructor <init>(kotlinx.cinterop/NativeFreeablePlacement = ...) // kotlinx.cinterop/ArenaBase.<init>|<init>(kotlinx.cinterop.NativeFreeablePlacement){}[0]

    final fun alloc(kotlin/Long, kotlin/Int): kotlinx.cinterop/NativePointed // kotlinx.cinterop/ArenaBase.alloc|alloc(kotlin.Long;kotlin.Int){}[0]
    final fun clearImpl() // kotlinx.cinterop/ArenaBase.clearImpl|clearImpl(){}[0]
}

// Targets: [native]
open class kotlinx.cinterop/DeferScope { // kotlinx.cinterop/DeferScope|null[0]
    constructor <init>() // kotlinx.cinterop/DeferScope.<init>|<init>(){}[0]

    final var topDeferred // kotlinx.cinterop/DeferScope.topDeferred|{}topDeferred[0]
        final fun <get-topDeferred>(): kotlin/Function0<kotlin/Unit>? // kotlinx.cinterop/DeferScope.topDeferred.<get-topDeferred>|<get-topDeferred>(){}[0]
        final fun <set-topDeferred>(kotlin/Function0<kotlin/Unit>?) // kotlinx.cinterop/DeferScope.topDeferred.<set-topDeferred>|<set-topDeferred>(kotlin.Function0<kotlin.Unit>?){}[0]

    final inline fun defer(crossinline kotlin/Function0<kotlin/Unit>) // kotlinx.cinterop/DeferScope.defer|defer(kotlin.Function0<kotlin.Unit>){}[0]
}

// Targets: [native]
open class kotlinx.cinterop/NativePointed { // kotlinx.cinterop/NativePointed|null[0]
    final var rawPtr // kotlinx.cinterop/NativePointed.rawPtr|{}rawPtr[0]
        final fun <get-rawPtr>(): kotlin.native.internal/NativePtr // kotlinx.cinterop/NativePointed.rawPtr.<get-rawPtr>|<get-rawPtr>(){}[0]
}

// Targets: [native]
open class kotlinx.wasm.jsinterop/JsArray : kotlinx.wasm.jsinterop/JsValue { // kotlinx.wasm.jsinterop/JsArray|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // kotlinx.wasm.jsinterop/JsArray.<init>|<init>(kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlinx.wasm.jsinterop/JsValue) // kotlinx.wasm.jsinterop/JsArray.<init>|<init>(kotlinx.wasm.jsinterop.JsValue){}[0]

    final val size // kotlinx.wasm.jsinterop/JsArray.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlinx.wasm.jsinterop/JsArray.size.<get-size>|<get-size>(){}[0]

    final fun get(kotlin/Int): kotlinx.wasm.jsinterop/JsValue // kotlinx.wasm.jsinterop/JsArray.get|get(kotlin.Int){}[0]
}

// Targets: [native]
open class kotlinx.wasm.jsinterop/JsValue { // kotlinx.wasm.jsinterop/JsValue|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // kotlinx.wasm.jsinterop/JsValue.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val arena // kotlinx.wasm.jsinterop/JsValue.arena|{}arena[0]
        final fun <get-arena>(): kotlin/Int // kotlinx.wasm.jsinterop/JsValue.arena.<get-arena>|<get-arena>(){}[0]
    final val index // kotlinx.wasm.jsinterop/JsValue.index|{}index[0]
        final fun <get-index>(): kotlin/Int // kotlinx.wasm.jsinterop/JsValue.index.<get-index>|<get-index>(){}[0]

    final fun getInt(kotlin/String): kotlin/Int // kotlinx.wasm.jsinterop/JsValue.getInt|getInt(kotlin.String){}[0]
    final fun getProperty(kotlin/String): kotlinx.wasm.jsinterop/JsValue // kotlinx.wasm.jsinterop/JsValue.getProperty|getProperty(kotlin.String){}[0]
}

// Targets: [native]
sealed class kotlinx.cinterop/CPrimitiveVar : kotlinx.cinterop/CVariable { // kotlinx.cinterop/CPrimitiveVar|null[0]
    open class Type : kotlinx.cinterop/CVariable.Type { // kotlinx.cinterop/CPrimitiveVar.Type|null[0]
        constructor <init>(kotlin/Int) // kotlinx.cinterop/CPrimitiveVar.Type.<init>|<init>(kotlin.Int){}[0]
    }
}

// Targets: [native]
final object kotlin.native.internal.test/GeneratedSuites { // kotlin.native.internal.test/GeneratedSuites|null[0]
    final val suites // kotlin.native.internal.test/GeneratedSuites.suites|{}suites[0]
        final fun <get-suites>(): kotlin.collections/MutableList<kotlin.native.internal.test/TestSuite> // kotlin.native.internal.test/GeneratedSuites.suites.<get-suites>|<get-suites>(){}[0]

    final fun add(kotlin.native.internal.test/TestSuite): kotlin/Boolean // kotlin.native.internal.test/GeneratedSuites.add|add(kotlin.native.internal.test.TestSuite){}[0]
}

// Targets: [native]
final object kotlin.native.internal/Debugging { // kotlin.native.internal/Debugging|null[0]
    final val isThreadStateRunnable // kotlin.native.internal/Debugging.isThreadStateRunnable|{}isThreadStateRunnable[0]
        final fun <get-isThreadStateRunnable>(): kotlin/Boolean // kotlin.native.internal/Debugging.isThreadStateRunnable.<get-isThreadStateRunnable>|<get-isThreadStateRunnable>(){}[0]

    final var forceCheckedShutdown // kotlin.native.internal/Debugging.forceCheckedShutdown|{}forceCheckedShutdown[0]
        final fun <get-forceCheckedShutdown>(): kotlin/Boolean // kotlin.native.internal/Debugging.forceCheckedShutdown.<get-forceCheckedShutdown>|<get-forceCheckedShutdown>(){}[0]
        final fun <set-forceCheckedShutdown>(kotlin/Boolean) // kotlin.native.internal/Debugging.forceCheckedShutdown.<set-forceCheckedShutdown>|<set-forceCheckedShutdown>(kotlin.Boolean){}[0]
}

// Targets: [native]
final object kotlin.native.internal/GC { // kotlin.native.internal/GC|null[0]
    final val lastGCInfo // kotlin.native.internal/GC.lastGCInfo|{}lastGCInfo[0]
        final fun <get-lastGCInfo>(): kotlin.native.internal.gc/GCInfo? // kotlin.native.internal/GC.lastGCInfo.<get-lastGCInfo>|<get-lastGCInfo>(){}[0]

    final var autotune // kotlin.native.internal/GC.autotune|{}autotune[0]
        final fun <get-autotune>(): kotlin/Boolean // kotlin.native.internal/GC.autotune.<get-autotune>|<get-autotune>(){}[0]
        final fun <set-autotune>(kotlin/Boolean) // kotlin.native.internal/GC.autotune.<set-autotune>|<set-autotune>(kotlin.Boolean){}[0]
    final var collectCyclesThreshold // kotlin.native.internal/GC.collectCyclesThreshold|{}collectCyclesThreshold[0]
        final fun <get-collectCyclesThreshold>(): kotlin/Long // kotlin.native.internal/GC.collectCyclesThreshold.<get-collectCyclesThreshold>|<get-collectCyclesThreshold>(){}[0]
        final fun <set-collectCyclesThreshold>(kotlin/Long) // kotlin.native.internal/GC.collectCyclesThreshold.<set-collectCyclesThreshold>|<set-collectCyclesThreshold>(kotlin.Long){}[0]
    final var cyclicCollectorEnabled // kotlin.native.internal/GC.cyclicCollectorEnabled|{}cyclicCollectorEnabled[0]
        final fun <get-cyclicCollectorEnabled>(): kotlin/Boolean // kotlin.native.internal/GC.cyclicCollectorEnabled.<get-cyclicCollectorEnabled>|<get-cyclicCollectorEnabled>(){}[0]
        final fun <set-cyclicCollectorEnabled>(kotlin/Boolean) // kotlin.native.internal/GC.cyclicCollectorEnabled.<set-cyclicCollectorEnabled>|<set-cyclicCollectorEnabled>(kotlin.Boolean){}[0]
    final var maxHeapBytes // kotlin.native.internal/GC.maxHeapBytes|{}maxHeapBytes[0]
        final fun <get-maxHeapBytes>(): kotlin/Long // kotlin.native.internal/GC.maxHeapBytes.<get-maxHeapBytes>|<get-maxHeapBytes>(){}[0]
        final fun <set-maxHeapBytes>(kotlin/Long) // kotlin.native.internal/GC.maxHeapBytes.<set-maxHeapBytes>|<set-maxHeapBytes>(kotlin.Long){}[0]
    final var minHeapBytes // kotlin.native.internal/GC.minHeapBytes|{}minHeapBytes[0]
        final fun <get-minHeapBytes>(): kotlin/Long // kotlin.native.internal/GC.minHeapBytes.<get-minHeapBytes>|<get-minHeapBytes>(){}[0]
        final fun <set-minHeapBytes>(kotlin/Long) // kotlin.native.internal/GC.minHeapBytes.<set-minHeapBytes>|<set-minHeapBytes>(kotlin.Long){}[0]
    final var regularGCInterval // kotlin.native.internal/GC.regularGCInterval|{}regularGCInterval[0]
        final fun <get-regularGCInterval>(): kotlin.time/Duration // kotlin.native.internal/GC.regularGCInterval.<get-regularGCInterval>|<get-regularGCInterval>(){}[0]
        final fun <set-regularGCInterval>(kotlin.time/Duration) // kotlin.native.internal/GC.regularGCInterval.<set-regularGCInterval>|<set-regularGCInterval>(kotlin.time.Duration){}[0]
    final var targetHeapBytes // kotlin.native.internal/GC.targetHeapBytes|{}targetHeapBytes[0]
        final fun <get-targetHeapBytes>(): kotlin/Long // kotlin.native.internal/GC.targetHeapBytes.<get-targetHeapBytes>|<get-targetHeapBytes>(){}[0]
        final fun <set-targetHeapBytes>(kotlin/Long) // kotlin.native.internal/GC.targetHeapBytes.<set-targetHeapBytes>|<set-targetHeapBytes>(kotlin.Long){}[0]
    final var targetHeapUtilization // kotlin.native.internal/GC.targetHeapUtilization|{}targetHeapUtilization[0]
        final fun <get-targetHeapUtilization>(): kotlin/Double // kotlin.native.internal/GC.targetHeapUtilization.<get-targetHeapUtilization>|<get-targetHeapUtilization>(){}[0]
        final fun <set-targetHeapUtilization>(kotlin/Double) // kotlin.native.internal/GC.targetHeapUtilization.<set-targetHeapUtilization>|<set-targetHeapUtilization>(kotlin.Double){}[0]
    final var threshold // kotlin.native.internal/GC.threshold|{}threshold[0]
        final fun <get-threshold>(): kotlin/Int // kotlin.native.internal/GC.threshold.<get-threshold>|<get-threshold>(){}[0]
        final fun <set-threshold>(kotlin/Int) // kotlin.native.internal/GC.threshold.<set-threshold>|<set-threshold>(kotlin.Int){}[0]
    final var thresholdAllocations // kotlin.native.internal/GC.thresholdAllocations|{}thresholdAllocations[0]
        final fun <get-thresholdAllocations>(): kotlin/Long // kotlin.native.internal/GC.thresholdAllocations.<get-thresholdAllocations>|<get-thresholdAllocations>(){}[0]
        final fun <set-thresholdAllocations>(kotlin/Long) // kotlin.native.internal/GC.thresholdAllocations.<set-thresholdAllocations>|<set-thresholdAllocations>(kotlin.Long){}[0]

    final fun collect() // kotlin.native.internal/GC.collect|collect(){}[0]
    final fun collectCyclic() // kotlin.native.internal/GC.collectCyclic|collectCyclic(){}[0]
    final fun detectCycles(): kotlin/Array<kotlin/Any>? // kotlin.native.internal/GC.detectCycles|detectCycles(){}[0]
    final fun resume() // kotlin.native.internal/GC.resume|resume(){}[0]
    final fun schedule() // kotlin.native.internal/GC.schedule|schedule(){}[0]
    final fun start() // kotlin.native.internal/GC.start|start(){}[0]
    final fun stop() // kotlin.native.internal/GC.stop|stop(){}[0]
    final fun suspend() // kotlin.native.internal/GC.suspend|suspend(){}[0]
}

// Targets: [native]
final object kotlin.native.internal/MemoryUsageInfo { // kotlin.native.internal/MemoryUsageInfo|null[0]
    final val peakResidentSetSizeBytes // kotlin.native.internal/MemoryUsageInfo.peakResidentSetSizeBytes|{}peakResidentSetSizeBytes[0]
        final fun <get-peakResidentSetSizeBytes>(): kotlin/Long // kotlin.native.internal/MemoryUsageInfo.peakResidentSetSizeBytes.<get-peakResidentSetSizeBytes>|<get-peakResidentSetSizeBytes>(){}[0]
}

// Targets: [native]
final object kotlin.native.runtime/Debugging { // kotlin.native.runtime/Debugging|null[0]
    final val isThreadStateRunnable // kotlin.native.runtime/Debugging.isThreadStateRunnable|{}isThreadStateRunnable[0]
        final fun <get-isThreadStateRunnable>(): kotlin/Boolean // kotlin.native.runtime/Debugging.isThreadStateRunnable.<get-isThreadStateRunnable>|<get-isThreadStateRunnable>(){}[0]

    final var forceCheckedShutdown // kotlin.native.runtime/Debugging.forceCheckedShutdown|{}forceCheckedShutdown[0]
        final fun <get-forceCheckedShutdown>(): kotlin/Boolean // kotlin.native.runtime/Debugging.forceCheckedShutdown.<get-forceCheckedShutdown>|<get-forceCheckedShutdown>(){}[0]
        final fun <set-forceCheckedShutdown>(kotlin/Boolean) // kotlin.native.runtime/Debugging.forceCheckedShutdown.<set-forceCheckedShutdown>|<set-forceCheckedShutdown>(kotlin.Boolean){}[0]

    final fun dumpMemory(kotlin/Long): kotlin/Boolean // kotlin.native.runtime/Debugging.dumpMemory|dumpMemory(kotlin.Long){}[0]
}

// Targets: [native]
final object kotlin.native.runtime/GC { // kotlin.native.runtime/GC|null[0]
    final val lastGCInfo // kotlin.native.runtime/GC.lastGCInfo|{}lastGCInfo[0]
        final fun <get-lastGCInfo>(): kotlin.native.runtime/GCInfo? // kotlin.native.runtime/GC.lastGCInfo.<get-lastGCInfo>|<get-lastGCInfo>(){}[0]

    final var autotune // kotlin.native.runtime/GC.autotune|{}autotune[0]
        final fun <get-autotune>(): kotlin/Boolean // kotlin.native.runtime/GC.autotune.<get-autotune>|<get-autotune>(){}[0]
        final fun <set-autotune>(kotlin/Boolean) // kotlin.native.runtime/GC.autotune.<set-autotune>|<set-autotune>(kotlin.Boolean){}[0]
    final var collectCyclesThreshold // kotlin.native.runtime/GC.collectCyclesThreshold|{}collectCyclesThreshold[0]
        final fun <get-collectCyclesThreshold>(): kotlin/Long // kotlin.native.runtime/GC.collectCyclesThreshold.<get-collectCyclesThreshold>|<get-collectCyclesThreshold>(){}[0]
        final fun <set-collectCyclesThreshold>(kotlin/Long) // kotlin.native.runtime/GC.collectCyclesThreshold.<set-collectCyclesThreshold>|<set-collectCyclesThreshold>(kotlin.Long){}[0]
    final var cyclicCollectorEnabled // kotlin.native.runtime/GC.cyclicCollectorEnabled|{}cyclicCollectorEnabled[0]
        final fun <get-cyclicCollectorEnabled>(): kotlin/Boolean // kotlin.native.runtime/GC.cyclicCollectorEnabled.<get-cyclicCollectorEnabled>|<get-cyclicCollectorEnabled>(){}[0]
        final fun <set-cyclicCollectorEnabled>(kotlin/Boolean) // kotlin.native.runtime/GC.cyclicCollectorEnabled.<set-cyclicCollectorEnabled>|<set-cyclicCollectorEnabled>(kotlin.Boolean){}[0]
    final var heapTriggerCoefficient // kotlin.native.runtime/GC.heapTriggerCoefficient|{}heapTriggerCoefficient[0]
        final fun <get-heapTriggerCoefficient>(): kotlin/Double // kotlin.native.runtime/GC.heapTriggerCoefficient.<get-heapTriggerCoefficient>|<get-heapTriggerCoefficient>(){}[0]
        final fun <set-heapTriggerCoefficient>(kotlin/Double) // kotlin.native.runtime/GC.heapTriggerCoefficient.<set-heapTriggerCoefficient>|<set-heapTriggerCoefficient>(kotlin.Double){}[0]
    final var maxHeapBytes // kotlin.native.runtime/GC.maxHeapBytes|{}maxHeapBytes[0]
        final fun <get-maxHeapBytes>(): kotlin/Long // kotlin.native.runtime/GC.maxHeapBytes.<get-maxHeapBytes>|<get-maxHeapBytes>(){}[0]
        final fun <set-maxHeapBytes>(kotlin/Long) // kotlin.native.runtime/GC.maxHeapBytes.<set-maxHeapBytes>|<set-maxHeapBytes>(kotlin.Long){}[0]
    final var minHeapBytes // kotlin.native.runtime/GC.minHeapBytes|{}minHeapBytes[0]
        final fun <get-minHeapBytes>(): kotlin/Long // kotlin.native.runtime/GC.minHeapBytes.<get-minHeapBytes>|<get-minHeapBytes>(){}[0]
        final fun <set-minHeapBytes>(kotlin/Long) // kotlin.native.runtime/GC.minHeapBytes.<set-minHeapBytes>|<set-minHeapBytes>(kotlin.Long){}[0]
    final var pauseOnTargetHeapOverflow // kotlin.native.runtime/GC.pauseOnTargetHeapOverflow|{}pauseOnTargetHeapOverflow[0]
        final fun <get-pauseOnTargetHeapOverflow>(): kotlin/Boolean // kotlin.native.runtime/GC.pauseOnTargetHeapOverflow.<get-pauseOnTargetHeapOverflow>|<get-pauseOnTargetHeapOverflow>(){}[0]
        final fun <set-pauseOnTargetHeapOverflow>(kotlin/Boolean) // kotlin.native.runtime/GC.pauseOnTargetHeapOverflow.<set-pauseOnTargetHeapOverflow>|<set-pauseOnTargetHeapOverflow>(kotlin.Boolean){}[0]
    final var regularGCInterval // kotlin.native.runtime/GC.regularGCInterval|{}regularGCInterval[0]
        final fun <get-regularGCInterval>(): kotlin.time/Duration // kotlin.native.runtime/GC.regularGCInterval.<get-regularGCInterval>|<get-regularGCInterval>(){}[0]
        final fun <set-regularGCInterval>(kotlin.time/Duration) // kotlin.native.runtime/GC.regularGCInterval.<set-regularGCInterval>|<set-regularGCInterval>(kotlin.time.Duration){}[0]
    final var targetHeapBytes // kotlin.native.runtime/GC.targetHeapBytes|{}targetHeapBytes[0]
        final fun <get-targetHeapBytes>(): kotlin/Long // kotlin.native.runtime/GC.targetHeapBytes.<get-targetHeapBytes>|<get-targetHeapBytes>(){}[0]
        final fun <set-targetHeapBytes>(kotlin/Long) // kotlin.native.runtime/GC.targetHeapBytes.<set-targetHeapBytes>|<set-targetHeapBytes>(kotlin.Long){}[0]
    final var targetHeapUtilization // kotlin.native.runtime/GC.targetHeapUtilization|{}targetHeapUtilization[0]
        final fun <get-targetHeapUtilization>(): kotlin/Double // kotlin.native.runtime/GC.targetHeapUtilization.<get-targetHeapUtilization>|<get-targetHeapUtilization>(){}[0]
        final fun <set-targetHeapUtilization>(kotlin/Double) // kotlin.native.runtime/GC.targetHeapUtilization.<set-targetHeapUtilization>|<set-targetHeapUtilization>(kotlin.Double){}[0]
    final var threshold // kotlin.native.runtime/GC.threshold|{}threshold[0]
        final fun <get-threshold>(): kotlin/Int // kotlin.native.runtime/GC.threshold.<get-threshold>|<get-threshold>(){}[0]
        final fun <set-threshold>(kotlin/Int) // kotlin.native.runtime/GC.threshold.<set-threshold>|<set-threshold>(kotlin.Int){}[0]
    final var thresholdAllocations // kotlin.native.runtime/GC.thresholdAllocations|{}thresholdAllocations[0]
        final fun <get-thresholdAllocations>(): kotlin/Long // kotlin.native.runtime/GC.thresholdAllocations.<get-thresholdAllocations>|<get-thresholdAllocations>(){}[0]
        final fun <set-thresholdAllocations>(kotlin/Long) // kotlin.native.runtime/GC.thresholdAllocations.<set-thresholdAllocations>|<set-thresholdAllocations>(kotlin.Long){}[0]

    final fun collect() // kotlin.native.runtime/GC.collect|collect(){}[0]
    final fun collectCyclic() // kotlin.native.runtime/GC.collectCyclic|collectCyclic(){}[0]
    final fun detectCycles(): kotlin/Array<kotlin/Any>? // kotlin.native.runtime/GC.detectCycles|detectCycles(){}[0]
    final fun findCycle(kotlin/Any): kotlin/Array<kotlin/Any>? // kotlin.native.runtime/GC.findCycle|findCycle(kotlin.Any){}[0]
    final fun resume() // kotlin.native.runtime/GC.resume|resume(){}[0]
    final fun schedule() // kotlin.native.runtime/GC.schedule|schedule(){}[0]
    final fun start() // kotlin.native.runtime/GC.start|start(){}[0]
    final fun stop() // kotlin.native.runtime/GC.stop|stop(){}[0]
    final fun suspend() // kotlin.native.runtime/GC.suspend|suspend(){}[0]

    final object MainThreadFinalizerProcessor { // kotlin.native.runtime/GC.MainThreadFinalizerProcessor|null[0]
        final val available // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.available|{}available[0]
            final fun <get-available>(): kotlin/Boolean // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.available.<get-available>|<get-available>(){}[0]

        final var batchSize // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.batchSize|{}batchSize[0]
            final fun <get-batchSize>(): kotlin/ULong // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.batchSize.<get-batchSize>|<get-batchSize>(){}[0]
            final fun <set-batchSize>(kotlin/ULong) // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.batchSize.<set-batchSize>|<set-batchSize>(kotlin.ULong){}[0]
        final var maxTimeInTask // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.maxTimeInTask|{}maxTimeInTask[0]
            final fun <get-maxTimeInTask>(): kotlin.time/Duration // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.maxTimeInTask.<get-maxTimeInTask>|<get-maxTimeInTask>(){}[0]
            final fun <set-maxTimeInTask>(kotlin.time/Duration) // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.maxTimeInTask.<set-maxTimeInTask>|<set-maxTimeInTask>(kotlin.time.Duration){}[0]
        final var minTimeBetweenTasks // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.minTimeBetweenTasks|{}minTimeBetweenTasks[0]
            final fun <get-minTimeBetweenTasks>(): kotlin.time/Duration // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.minTimeBetweenTasks.<get-minTimeBetweenTasks>|<get-minTimeBetweenTasks>(){}[0]
            final fun <set-minTimeBetweenTasks>(kotlin.time/Duration) // kotlin.native.runtime/GC.MainThreadFinalizerProcessor.minTimeBetweenTasks.<set-minTimeBetweenTasks>|<set-minTimeBetweenTasks>(kotlin.time.Duration){}[0]
    }
}

// Targets: [native]
final object kotlin.native/Platform { // kotlin.native/Platform|null[0]
    final val canAccessUnaligned // kotlin.native/Platform.canAccessUnaligned|{}canAccessUnaligned[0]
        final fun <get-canAccessUnaligned>(): kotlin/Boolean // kotlin.native/Platform.canAccessUnaligned.<get-canAccessUnaligned>|<get-canAccessUnaligned>(){}[0]
    final val cpuArchitecture // kotlin.native/Platform.cpuArchitecture|{}cpuArchitecture[0]
        final fun <get-cpuArchitecture>(): kotlin.native/CpuArchitecture // kotlin.native/Platform.cpuArchitecture.<get-cpuArchitecture>|<get-cpuArchitecture>(){}[0]
    final val isDebugBinary // kotlin.native/Platform.isDebugBinary|{}isDebugBinary[0]
        final fun <get-isDebugBinary>(): kotlin/Boolean // kotlin.native/Platform.isDebugBinary.<get-isDebugBinary>|<get-isDebugBinary>(){}[0]
    final val isFreezingEnabled // kotlin.native/Platform.isFreezingEnabled|{}isFreezingEnabled[0]
        final fun <get-isFreezingEnabled>(): kotlin/Boolean // kotlin.native/Platform.isFreezingEnabled.<get-isFreezingEnabled>|<get-isFreezingEnabled>(){}[0]
    final val isLittleEndian // kotlin.native/Platform.isLittleEndian|{}isLittleEndian[0]
        final fun <get-isLittleEndian>(): kotlin/Boolean // kotlin.native/Platform.isLittleEndian.<get-isLittleEndian>|<get-isLittleEndian>(){}[0]
    final val memoryModel // kotlin.native/Platform.memoryModel|{}memoryModel[0]
        final fun <get-memoryModel>(): kotlin.native/MemoryModel // kotlin.native/Platform.memoryModel.<get-memoryModel>|<get-memoryModel>(){}[0]
    final val osFamily // kotlin.native/Platform.osFamily|{}osFamily[0]
        final fun <get-osFamily>(): kotlin.native/OsFamily // kotlin.native/Platform.osFamily.<get-osFamily>|<get-osFamily>(){}[0]
    final val programName // kotlin.native/Platform.programName|{}programName[0]
        final fun <get-programName>(): kotlin/String? // kotlin.native/Platform.programName.<get-programName>|<get-programName>(){}[0]

    final var isCleanersLeakCheckerActive // kotlin.native/Platform.isCleanersLeakCheckerActive|{}isCleanersLeakCheckerActive[0]
        final fun <get-isCleanersLeakCheckerActive>(): kotlin/Boolean // kotlin.native/Platform.isCleanersLeakCheckerActive.<get-isCleanersLeakCheckerActive>|<get-isCleanersLeakCheckerActive>(){}[0]
        final fun <set-isCleanersLeakCheckerActive>(kotlin/Boolean) // kotlin.native/Platform.isCleanersLeakCheckerActive.<set-isCleanersLeakCheckerActive>|<set-isCleanersLeakCheckerActive>(kotlin.Boolean){}[0]
    final var isMemoryLeakCheckerActive // kotlin.native/Platform.isMemoryLeakCheckerActive|{}isMemoryLeakCheckerActive[0]
        final fun <get-isMemoryLeakCheckerActive>(): kotlin/Boolean // kotlin.native/Platform.isMemoryLeakCheckerActive.<get-isMemoryLeakCheckerActive>|<get-isMemoryLeakCheckerActive>(){}[0]
        final fun <set-isMemoryLeakCheckerActive>(kotlin/Boolean) // kotlin.native/Platform.isMemoryLeakCheckerActive.<set-isMemoryLeakCheckerActive>|<set-isMemoryLeakCheckerActive>(kotlin.Boolean){}[0]

    final fun getAvailableProcessors(): kotlin/Int // kotlin.native/Platform.getAvailableProcessors|getAvailableProcessors(){}[0]
}

// Targets: [native]
final object kotlin.test/DefaultAsserter : kotlin.test/Asserter { // kotlin.test/DefaultAsserter|null[0]
    final fun fail(kotlin/String?): kotlin/Nothing // kotlin.test/DefaultAsserter.fail|fail(kotlin.String?){}[0]
    final fun fail(kotlin/String?, kotlin/Throwable?): kotlin/Nothing // kotlin.test/DefaultAsserter.fail|fail(kotlin.String?;kotlin.Throwable?){}[0]
}

// Targets: [native]
final object kotlinx.cinterop.internal/ConstantValue { // kotlinx.cinterop.internal/ConstantValue|null[0]
    open annotation class Byte : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.Byte|null[0]
        constructor <init>(kotlin/Byte) // kotlinx.cinterop.internal/ConstantValue.Byte.<init>|<init>(kotlin.Byte){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.Byte.value|{}value[0]
            final fun <get-value>(): kotlin/Byte // kotlinx.cinterop.internal/ConstantValue.Byte.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class Double : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.Double|null[0]
        constructor <init>(kotlin/Double) // kotlinx.cinterop.internal/ConstantValue.Double.<init>|<init>(kotlin.Double){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.Double.value|{}value[0]
            final fun <get-value>(): kotlin/Double // kotlinx.cinterop.internal/ConstantValue.Double.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class Float : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.Float|null[0]
        constructor <init>(kotlin/Float) // kotlinx.cinterop.internal/ConstantValue.Float.<init>|<init>(kotlin.Float){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.Float.value|{}value[0]
            final fun <get-value>(): kotlin/Float // kotlinx.cinterop.internal/ConstantValue.Float.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class Int : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.Int|null[0]
        constructor <init>(kotlin/Int) // kotlinx.cinterop.internal/ConstantValue.Int.<init>|<init>(kotlin.Int){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.Int.value|{}value[0]
            final fun <get-value>(): kotlin/Int // kotlinx.cinterop.internal/ConstantValue.Int.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class Long : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.Long|null[0]
        constructor <init>(kotlin/Long) // kotlinx.cinterop.internal/ConstantValue.Long.<init>|<init>(kotlin.Long){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.Long.value|{}value[0]
            final fun <get-value>(): kotlin/Long // kotlinx.cinterop.internal/ConstantValue.Long.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class Short : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.Short|null[0]
        constructor <init>(kotlin/Short) // kotlinx.cinterop.internal/ConstantValue.Short.<init>|<init>(kotlin.Short){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.Short.value|{}value[0]
            final fun <get-value>(): kotlin/Short // kotlinx.cinterop.internal/ConstantValue.Short.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class String : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.String|null[0]
        constructor <init>(kotlin/String) // kotlinx.cinterop.internal/ConstantValue.String.<init>|<init>(kotlin.String){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.String.value|{}value[0]
            final fun <get-value>(): kotlin/String // kotlinx.cinterop.internal/ConstantValue.String.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class UByte : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.UByte|null[0]
        constructor <init>(kotlin/UByte) // kotlinx.cinterop.internal/ConstantValue.UByte.<init>|<init>(kotlin.UByte){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.UByte.value|{}value[0]
            final fun <get-value>(): kotlin/UByte // kotlinx.cinterop.internal/ConstantValue.UByte.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class UInt : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.UInt|null[0]
        constructor <init>(kotlin/UInt) // kotlinx.cinterop.internal/ConstantValue.UInt.<init>|<init>(kotlin.UInt){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.UInt.value|{}value[0]
            final fun <get-value>(): kotlin/UInt // kotlinx.cinterop.internal/ConstantValue.UInt.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class ULong : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.ULong|null[0]
        constructor <init>(kotlin/ULong) // kotlinx.cinterop.internal/ConstantValue.ULong.<init>|<init>(kotlin.ULong){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.ULong.value|{}value[0]
            final fun <get-value>(): kotlin/ULong // kotlinx.cinterop.internal/ConstantValue.ULong.value.<get-value>|<get-value>(){}[0]
    }

    open annotation class UShort : kotlin/Annotation { // kotlinx.cinterop.internal/ConstantValue.UShort|null[0]
        constructor <init>(kotlin/UShort) // kotlinx.cinterop.internal/ConstantValue.UShort.<init>|<init>(kotlin.UShort){}[0]

        final val value // kotlinx.cinterop.internal/ConstantValue.UShort.value|{}value[0]
            final fun <get-value>(): kotlin/UShort // kotlinx.cinterop.internal/ConstantValue.UShort.value.<get-value>|<get-value>(){}[0]
    }
}

// Targets: [native]
final object kotlinx.cinterop/nativeHeap : kotlinx.cinterop/NativeFreeablePlacement { // kotlinx.cinterop/nativeHeap|null[0]
    final fun alloc(kotlin/Long, kotlin/Int): kotlinx.cinterop/NativePointed // kotlinx.cinterop/nativeHeap.alloc|alloc(kotlin.Long;kotlin.Int){}[0]
    final fun free(kotlin.native.internal/NativePtr) // kotlinx.cinterop/nativeHeap.free|free(kotlin.native.internal.NativePtr){}[0]
}

// Targets: [native]
final object kotlinx.cinterop/nativeMemUtils { // kotlinx.cinterop/nativeMemUtils|null[0]
    final fun alloc(kotlin/Long, kotlin/Int): kotlinx.cinterop/NativePointed // kotlinx.cinterop/nativeMemUtils.alloc|alloc(kotlin.Long;kotlin.Int){}[0]
    final fun copyMemory(kotlinx.cinterop/NativePointed, kotlin/Int, kotlinx.cinterop/NativePointed) // kotlinx.cinterop/nativeMemUtils.copyMemory|copyMemory(kotlinx.cinterop.NativePointed;kotlin.Int;kotlinx.cinterop.NativePointed){}[0]
    final fun free(kotlin.native.internal/NativePtr) // kotlinx.cinterop/nativeMemUtils.free|free(kotlin.native.internal.NativePtr){}[0]
    final fun getByte(kotlinx.cinterop/NativePointed): kotlin/Byte // kotlinx.cinterop/nativeMemUtils.getByte|getByte(kotlinx.cinterop.NativePointed){}[0]
    final fun getByteArray(kotlinx.cinterop/NativePointed, kotlin/ByteArray, kotlin/Int) // kotlinx.cinterop/nativeMemUtils.getByteArray|getByteArray(kotlinx.cinterop.NativePointed;kotlin.ByteArray;kotlin.Int){}[0]
    final fun getCharArray(kotlinx.cinterop/NativePointed, kotlin/CharArray, kotlin/Int) // kotlinx.cinterop/nativeMemUtils.getCharArray|getCharArray(kotlinx.cinterop.NativePointed;kotlin.CharArray;kotlin.Int){}[0]
    final fun getDouble(kotlinx.cinterop/NativePointed): kotlin/Double // kotlinx.cinterop/nativeMemUtils.getDouble|getDouble(kotlinx.cinterop.NativePointed){}[0]
    final fun getFloat(kotlinx.cinterop/NativePointed): kotlin/Float // kotlinx.cinterop/nativeMemUtils.getFloat|getFloat(kotlinx.cinterop.NativePointed){}[0]
    final fun getInt(kotlinx.cinterop/NativePointed): kotlin/Int // kotlinx.cinterop/nativeMemUtils.getInt|getInt(kotlinx.cinterop.NativePointed){}[0]
    final fun getLong(kotlinx.cinterop/NativePointed): kotlin/Long // kotlinx.cinterop/nativeMemUtils.getLong|getLong(kotlinx.cinterop.NativePointed){}[0]
    final fun getNativePtr(kotlinx.cinterop/NativePointed): kotlin.native.internal/NativePtr // kotlinx.cinterop/nativeMemUtils.getNativePtr|getNativePtr(kotlinx.cinterop.NativePointed){}[0]
    final fun getShort(kotlinx.cinterop/NativePointed): kotlin/Short // kotlinx.cinterop/nativeMemUtils.getShort|getShort(kotlinx.cinterop.NativePointed){}[0]
    final fun getVector(kotlinx.cinterop/NativePointed): kotlinx.cinterop/Vector128 // kotlinx.cinterop/nativeMemUtils.getVector|getVector(kotlinx.cinterop.NativePointed){}[0]
    final fun putByte(kotlinx.cinterop/NativePointed, kotlin/Byte) // kotlinx.cinterop/nativeMemUtils.putByte|putByte(kotlinx.cinterop.NativePointed;kotlin.Byte){}[0]
    final fun putByteArray(kotlin/ByteArray, kotlinx.cinterop/NativePointed, kotlin/Int) // kotlinx.cinterop/nativeMemUtils.putByteArray|putByteArray(kotlin.ByteArray;kotlinx.cinterop.NativePointed;kotlin.Int){}[0]
    final fun putCharArray(kotlin/CharArray, kotlinx.cinterop/NativePointed, kotlin/Int) // kotlinx.cinterop/nativeMemUtils.putCharArray|putCharArray(kotlin.CharArray;kotlinx.cinterop.NativePointed;kotlin.Int){}[0]
    final fun putDouble(kotlinx.cinterop/NativePointed, kotlin/Double) // kotlinx.cinterop/nativeMemUtils.putDouble|putDouble(kotlinx.cinterop.NativePointed;kotlin.Double){}[0]
    final fun putFloat(kotlinx.cinterop/NativePointed, kotlin/Float) // kotlinx.cinterop/nativeMemUtils.putFloat|putFloat(kotlinx.cinterop.NativePointed;kotlin.Float){}[0]
    final fun putInt(kotlinx.cinterop/NativePointed, kotlin/Int) // kotlinx.cinterop/nativeMemUtils.putInt|putInt(kotlinx.cinterop.NativePointed;kotlin.Int){}[0]
    final fun putLong(kotlinx.cinterop/NativePointed, kotlin/Long) // kotlinx.cinterop/nativeMemUtils.putLong|putLong(kotlinx.cinterop.NativePointed;kotlin.Long){}[0]
    final fun putNativePtr(kotlinx.cinterop/NativePointed, kotlin.native.internal/NativePtr) // kotlinx.cinterop/nativeMemUtils.putNativePtr|putNativePtr(kotlinx.cinterop.NativePointed;kotlin.native.internal.NativePtr){}[0]
    final fun putShort(kotlinx.cinterop/NativePointed, kotlin/Short) // kotlinx.cinterop/nativeMemUtils.putShort|putShort(kotlinx.cinterop.NativePointed;kotlin.Short){}[0]
    final fun putVector(kotlinx.cinterop/NativePointed, kotlinx.cinterop/Vector128) // kotlinx.cinterop/nativeMemUtils.putVector|putVector(kotlinx.cinterop.NativePointed;kotlinx.cinterop.Vector128){}[0]
    final fun zeroMemory(kotlinx.cinterop/NativePointed, kotlin/Int) // kotlinx.cinterop/nativeMemUtils.zeroMemory|zeroMemory(kotlinx.cinterop.NativePointed;kotlin.Int){}[0]
}

// Targets: [native]
final object kotlinx.wasm.jsinterop/ArenaManager { // kotlinx.wasm.jsinterop/ArenaManager|null[0]
    final val globalArena // kotlinx.wasm.jsinterop/ArenaManager.globalArena|{}globalArena[0]
        final fun <get-globalArena>(): kotlin/Int // kotlinx.wasm.jsinterop/ArenaManager.globalArena.<get-globalArena>|<get-globalArena>(){}[0]

    final var currentArena // kotlinx.wasm.jsinterop/ArenaManager.currentArena|{}currentArena[0]
        final fun <get-currentArena>(): kotlin/Int // kotlinx.wasm.jsinterop/ArenaManager.currentArena.<get-currentArena>|<get-currentArena>(){}[0]
        final fun <set-currentArena>(kotlin/Int) // kotlinx.wasm.jsinterop/ArenaManager.currentArena.<set-currentArena>|<set-currentArena>(kotlin.Int){}[0]
}

// Targets: [native]
final const val kotlinx.wasm.jsinterop/upperWord // kotlinx.wasm.jsinterop/upperWord|{}upperWord[0]
    final fun <get-upperWord>(): kotlin/Long // kotlinx.wasm.jsinterop/upperWord.<get-upperWord>|<get-upperWord>(){}[0]

// Targets: [native]
final val kotlin.math/ulp // kotlin.math/ulp|@kotlin.Float{}ulp[0]
    final fun (kotlin/Float).<get-ulp>(): kotlin/Float // kotlin.math/ulp.<get-ulp>|<get-ulp>@kotlin.Float(){}[0]

// Targets: [native]
final val kotlin.native.concurrent/isFrozen // kotlin.native.concurrent/isFrozen|@kotlin.Any?{}isFrozen[0]
    final fun (kotlin/Any?).<get-isFrozen>(): kotlin/Boolean // kotlin.native.concurrent/isFrozen.<get-isFrozen>|<get-isFrozen>@kotlin.Any?(){}[0]

// Targets: [native]
final val kotlin.native.internal.reflect/objCNameOrNull // kotlin.native.internal.reflect/objCNameOrNull|@kotlin.reflect.KClass<*>{}objCNameOrNull[0]
    final fun (kotlin.reflect/KClass<*>).<get-objCNameOrNull>(): kotlin/String? // kotlin.native.internal.reflect/objCNameOrNull.<get-objCNameOrNull>|<get-objCNameOrNull>@kotlin.reflect.KClass<*>(){}[0]

// Targets: [native]
final val kotlin.test/asserter // kotlin.test/asserter|{}asserter[0]
    final fun <get-asserter>(): kotlin.test/Asserter // kotlin.test/asserter.<get-asserter>|<get-asserter>(){}[0]

// Targets: [native]
final val kotlinx.cinterop/cstr // kotlinx.cinterop/cstr|@kotlin.String{}cstr[0]
    final fun (kotlin/String).<get-cstr>(): kotlinx.cinterop/CValues<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlinx.cinterop/cstr.<get-cstr>|<get-cstr>@kotlin.String(){}[0]

// Targets: [native]
final val kotlinx.cinterop/nativeNullPtr // kotlinx.cinterop/nativeNullPtr|{}nativeNullPtr[0]
    final inline fun <get-nativeNullPtr>(): kotlin.native.internal/NativePtr // kotlinx.cinterop/nativeNullPtr.<get-nativeNullPtr>|<get-nativeNullPtr>(){}[0]

// Targets: [native]
final val kotlinx.cinterop/pointed // kotlinx.cinterop/pointed|@kotlinx.cinterop.CPointer<0:0>{0§<kotlinx.cinterop.CPointed>}pointed[0]
    final inline fun <#A1: reified kotlinx.cinterop/CPointed> (kotlinx.cinterop/CPointer<#A1>).<get-pointed>(): #A1 // kotlinx.cinterop/pointed.<get-pointed>|<get-pointed>@kotlinx.cinterop.CPointer<0:0>(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final val kotlinx.cinterop/pointerSize // kotlinx.cinterop/pointerSize|{}pointerSize[0]
    final inline fun <get-pointerSize>(): kotlin/Int // kotlinx.cinterop/pointerSize.<get-pointerSize>|<get-pointerSize>(){}[0]

// Targets: [native]
final val kotlinx.cinterop/ptr // kotlinx.cinterop/ptr|@0:0{0§<kotlinx.cinterop.CPointed>}ptr[0]
    final fun <#A1: kotlinx.cinterop/CPointed> (#A1).<get-ptr>(): kotlinx.cinterop/CPointer<#A1> // kotlinx.cinterop/ptr.<get-ptr>|<get-ptr>@0:0(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final val kotlinx.cinterop/ptr // kotlinx.cinterop/ptr|@kotlinx.cinterop.ManagedType<0:0>{0§<kotlinx.cinterop.CStructVar>}ptr[0]
    final fun <#A1: kotlinx.cinterop/CStructVar> (kotlinx.cinterop/ManagedType<#A1>).<get-ptr>(): kotlinx.cinterop/CPointer<#A1> // kotlinx.cinterop/ptr.<get-ptr>|<get-ptr>@kotlinx.cinterop.ManagedType<0:0>(){0§<kotlinx.cinterop.CStructVar>}[0]

// Targets: [native]
final val kotlinx.cinterop/rawPtr // kotlinx.cinterop/rawPtr|@kotlinx.cinterop.NativePointed?{}rawPtr[0]
    final fun (kotlinx.cinterop/NativePointed?).<get-rawPtr>(): kotlin.native.internal/NativePtr // kotlinx.cinterop/rawPtr.<get-rawPtr>|<get-rawPtr>@kotlinx.cinterop.NativePointed?(){}[0]

// Targets: [native]
final val kotlinx.cinterop/rawValue // kotlinx.cinterop/rawValue|@kotlinx.cinterop.CPointer<*>?{}rawValue[0]
    final fun (kotlinx.cinterop/CPointer<*>?).<get-rawValue>(): kotlin.native.internal/NativePtr // kotlinx.cinterop/rawValue.<get-rawValue>|<get-rawValue>@kotlinx.cinterop.CPointer<*>?(){}[0]

// Targets: [native]
final val kotlinx.cinterop/utf16 // kotlinx.cinterop/utf16|@kotlin.String{}utf16[0]
    final fun (kotlin/String).<get-utf16>(): kotlinx.cinterop/CValues<kotlinx.cinterop/UShortVarOf<kotlin/UShort>> // kotlinx.cinterop/utf16.<get-utf16>|<get-utf16>@kotlin.String(){}[0]

// Targets: [native]
final val kotlinx.cinterop/utf32 // kotlinx.cinterop/utf32|@kotlin.String{}utf32[0]
    final fun (kotlin/String).<get-utf32>(): kotlinx.cinterop/CValues<kotlinx.cinterop/IntVarOf<kotlin/Int>> // kotlinx.cinterop/utf32.<get-utf32>|<get-utf32>@kotlin.String(){}[0]

// Targets: [native]
final val kotlinx.cinterop/utf8 // kotlinx.cinterop/utf8|@kotlin.String{}utf8[0]
    final fun (kotlin/String).<get-utf8>(): kotlinx.cinterop/CValues<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlinx.cinterop/utf8.<get-utf8>|<get-utf8>@kotlin.String(){}[0]

// Targets: [native]
final val kotlinx.cinterop/wcstr // kotlinx.cinterop/wcstr|@kotlin.String{}wcstr[0]
    final fun (kotlin/String).<get-wcstr>(): kotlinx.cinterop/CValues<kotlinx.cinterop/UShortVarOf<kotlin/UShort>> // kotlinx.cinterop/wcstr.<get-wcstr>|<get-wcstr>@kotlin.String(){}[0]

// Targets: [native]
final var kotlinx.cinterop/pointed // kotlinx.cinterop/pointed|@kotlinx.cinterop.CPointerVarOf<0:1>{0§<kotlinx.cinterop.CPointed>;1§<kotlinx.cinterop.CPointer<0:0>>}pointed[0]
    final inline fun <#A1: reified kotlinx.cinterop/CPointed, #B1: reified kotlinx.cinterop/CPointer<#A1>> (kotlinx.cinterop/CPointerVarOf<#B1>).<get-pointed>(): #A1? // kotlinx.cinterop/pointed.<get-pointed>|<get-pointed>@kotlinx.cinterop.CPointerVarOf<0:1>(){0§<kotlinx.cinterop.CPointed>;1§<kotlinx.cinterop.CPointer<0:0>>}[0]
    final inline fun <#A1: reified kotlinx.cinterop/CPointed, #B1: reified kotlinx.cinterop/CPointer<#A1>> (kotlinx.cinterop/CPointerVarOf<#B1>).<set-pointed>(#A1?) // kotlinx.cinterop/pointed.<set-pointed>|<set-pointed>@kotlinx.cinterop.CPointerVarOf<0:1>(0:0?){0§<kotlinx.cinterop.CPointed>;1§<kotlinx.cinterop.CPointer<0:0>>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.BooleanVarOf<0:0>{0§<kotlin.Boolean>}value[0]
    final fun <#A1: kotlin/Boolean> (kotlinx.cinterop/BooleanVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.BooleanVarOf<0:0>(){0§<kotlin.Boolean>}[0]
    final fun <#A1: kotlin/Boolean> (kotlinx.cinterop/BooleanVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.BooleanVarOf<0:0>(0:0){0§<kotlin.Boolean>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.ByteVarOf<0:0>{0§<kotlin.Byte>}value[0]
    final fun <#A1: kotlin/Byte> (kotlinx.cinterop/ByteVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.ByteVarOf<0:0>(){0§<kotlin.Byte>}[0]
    final fun <#A1: kotlin/Byte> (kotlinx.cinterop/ByteVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.ByteVarOf<0:0>(0:0){0§<kotlin.Byte>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.CPointerVarOf<0:0>{0§<kotlinx.cinterop.CPointer<*>>}value[0]
    final inline fun <#A1: kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/CPointerVarOf<#A1>).<get-value>(): #A1? // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.CPointerVarOf<0:0>(){0§<kotlinx.cinterop.CPointer<*>>}[0]
    final inline fun <#A1: kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/CPointerVarOf<#A1>).<set-value>(#A1?) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.CPointerVarOf<0:0>(0:0?){0§<kotlinx.cinterop.CPointer<*>>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.DoubleVarOf<0:0>{0§<kotlin.Double>}value[0]
    final fun <#A1: kotlin/Double> (kotlinx.cinterop/DoubleVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.DoubleVarOf<0:0>(){0§<kotlin.Double>}[0]
    final fun <#A1: kotlin/Double> (kotlinx.cinterop/DoubleVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.DoubleVarOf<0:0>(0:0){0§<kotlin.Double>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.FloatVarOf<0:0>{0§<kotlin.Float>}value[0]
    final fun <#A1: kotlin/Float> (kotlinx.cinterop/FloatVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.FloatVarOf<0:0>(){0§<kotlin.Float>}[0]
    final fun <#A1: kotlin/Float> (kotlinx.cinterop/FloatVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.FloatVarOf<0:0>(0:0){0§<kotlin.Float>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.IntVarOf<0:0>{0§<kotlin.Int>}value[0]
    final fun <#A1: kotlin/Int> (kotlinx.cinterop/IntVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.IntVarOf<0:0>(){0§<kotlin.Int>}[0]
    final fun <#A1: kotlin/Int> (kotlinx.cinterop/IntVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.IntVarOf<0:0>(0:0){0§<kotlin.Int>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.LongVarOf<0:0>{0§<kotlin.Long>}value[0]
    final fun <#A1: kotlin/Long> (kotlinx.cinterop/LongVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.LongVarOf<0:0>(){0§<kotlin.Long>}[0]
    final fun <#A1: kotlin/Long> (kotlinx.cinterop/LongVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.LongVarOf<0:0>(0:0){0§<kotlin.Long>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.ObjCNotImplementedVar<0:0>{0§<kotlin.Any?>}value[0]
    final fun <#A1: kotlin/Any?> (kotlinx.cinterop/ObjCNotImplementedVar<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.ObjCNotImplementedVar<0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlinx.cinterop/ObjCNotImplementedVar<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.ObjCNotImplementedVar<0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.ObjCObjectVar<0:0>{0§<kotlin.Any?>}value[0]
    final fun <#A1: kotlin/Any?> (kotlinx.cinterop/ObjCObjectVar<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.ObjCObjectVar<0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlinx.cinterop/ObjCObjectVar<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.ObjCObjectVar<0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.ShortVarOf<0:0>{0§<kotlin.Short>}value[0]
    final fun <#A1: kotlin/Short> (kotlinx.cinterop/ShortVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.ShortVarOf<0:0>(){0§<kotlin.Short>}[0]
    final fun <#A1: kotlin/Short> (kotlinx.cinterop/ShortVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.ShortVarOf<0:0>(0:0){0§<kotlin.Short>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.UByteVarOf<0:0>{0§<kotlin.UByte>}value[0]
    final fun <#A1: kotlin/UByte> (kotlinx.cinterop/UByteVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.UByteVarOf<0:0>(){0§<kotlin.UByte>}[0]
    final fun <#A1: kotlin/UByte> (kotlinx.cinterop/UByteVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.UByteVarOf<0:0>(0:0){0§<kotlin.UByte>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.UIntVarOf<0:0>{0§<kotlin.UInt>}value[0]
    final fun <#A1: kotlin/UInt> (kotlinx.cinterop/UIntVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.UIntVarOf<0:0>(){0§<kotlin.UInt>}[0]
    final fun <#A1: kotlin/UInt> (kotlinx.cinterop/UIntVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.UIntVarOf<0:0>(0:0){0§<kotlin.UInt>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.ULongVarOf<0:0>{0§<kotlin.ULong>}value[0]
    final fun <#A1: kotlin/ULong> (kotlinx.cinterop/ULongVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.ULongVarOf<0:0>(){0§<kotlin.ULong>}[0]
    final fun <#A1: kotlin/ULong> (kotlinx.cinterop/ULongVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.ULongVarOf<0:0>(0:0){0§<kotlin.ULong>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.UShortVarOf<0:0>{0§<kotlin.UShort>}value[0]
    final fun <#A1: kotlin/UShort> (kotlinx.cinterop/UShortVarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.UShortVarOf<0:0>(){0§<kotlin.UShort>}[0]
    final fun <#A1: kotlin/UShort> (kotlinx.cinterop/UShortVarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.UShortVarOf<0:0>(0:0){0§<kotlin.UShort>}[0]

// Targets: [native]
final var kotlinx.cinterop/value // kotlinx.cinterop/value|@kotlinx.cinterop.Vector128VarOf<0:0>{0§<kotlinx.cinterop.Vector128>}value[0]
    final fun <#A1: kotlinx.cinterop/Vector128> (kotlinx.cinterop/Vector128VarOf<#A1>).<get-value>(): #A1 // kotlinx.cinterop/value.<get-value>|<get-value>@kotlinx.cinterop.Vector128VarOf<0:0>(){0§<kotlinx.cinterop.Vector128>}[0]
    final fun <#A1: kotlinx.cinterop/Vector128> (kotlinx.cinterop/Vector128VarOf<#A1>).<set-value>(#A1) // kotlinx.cinterop/value.<set-value>|<set-value>@kotlinx.cinterop.Vector128VarOf<0:0>(0:0){0§<kotlinx.cinterop.Vector128>}[0]

// Targets: [native]
final fun (kotlin.collections/List<kotlin/String>).kotlinx.cinterop/toCStringArray(kotlinx.cinterop/AutofreeScope): kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>>>> // kotlinx.cinterop/toCStringArray|toCStringArray@kotlin.collections.List<kotlin.String>(kotlinx.cinterop.AutofreeScope){}[0]

// Targets: [native]
final fun (kotlin.native/ImmutableBlob).kotlin.native/asCPointer(kotlin/Int = ...): kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlin.native/asCPointer|asCPointer@kotlin.native.ImmutableBlob(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin.native/ImmutableBlob).kotlin.native/asUCPointer(kotlin/Int = ...): kotlinx.cinterop/CPointer<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // kotlin.native/asUCPointer|asUCPointer@kotlin.native.ImmutableBlob(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin.native/ImmutableBlob).kotlin.native/toByteArray(kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // kotlin.native/toByteArray|toByteArray@kotlin.native.ImmutableBlob(kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin.native/ImmutableBlob).kotlin.native/toUByteArray(kotlin/Int = ..., kotlin/Int = ...): kotlin/UByteArray // kotlin.native/toUByteArray|toUByteArray@kotlin.native.ImmutableBlob(kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin.reflect/KClass<*>).kotlin.native.internal/findAssociatedObject(kotlin.reflect/KClass<*>): kotlin/Any? // kotlin.native.internal/findAssociatedObject|findAssociatedObject@kotlin.reflect.KClass<*>(kotlin.reflect.KClass<*>){}[0]

// Targets: [native]
final fun (kotlin.reflect/KMutableProperty0<kotlin/Byte>).kotlin.concurrent/getAndAddField(kotlin/Byte): kotlin/Byte // kotlin.concurrent/getAndAddField|getAndAddField@kotlin.reflect.KMutableProperty0<kotlin.Byte>(kotlin.Byte){}[0]

// Targets: [native]
final fun (kotlin.reflect/KMutableProperty0<kotlin/Int>).kotlin.concurrent/getAndAddField(kotlin/Int): kotlin/Int // kotlin.concurrent/getAndAddField|getAndAddField@kotlin.reflect.KMutableProperty0<kotlin.Int>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin.reflect/KMutableProperty0<kotlin/Long>).kotlin.concurrent/getAndAddField(kotlin/Long): kotlin/Long // kotlin.concurrent/getAndAddField|getAndAddField@kotlin.reflect.KMutableProperty0<kotlin.Long>(kotlin.Long){}[0]

// Targets: [native]
final fun (kotlin.reflect/KMutableProperty0<kotlin/Short>).kotlin.concurrent/getAndAddField(kotlin/Short): kotlin/Short // kotlin.concurrent/getAndAddField|getAndAddField@kotlin.reflect.KMutableProperty0<kotlin.Short>(kotlin.Short){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Any?): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Any?){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Boolean): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Boolean){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Byte): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Byte){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Double): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Double){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Float): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Float){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Int): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Long): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Long){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/Short): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.Short){}[0]

// Targets: [native]
final fun (kotlin.text/StringBuilder).kotlin.text/appendln(kotlin/String): kotlin.text/StringBuilder // kotlin.text/appendln|appendln@kotlin.text.StringBuilder(kotlin.String){}[0]

// Targets: [native]
final fun (kotlin/Any).kotlin.native.concurrent/ensureNeverFrozen() // kotlin.native.concurrent/ensureNeverFrozen|ensureNeverFrozen@kotlin.Any(){}[0]

// Targets: [native]
final fun (kotlin/Any).kotlin.native.internal/collectReferenceFieldValues(): kotlin.collections/List<kotlin/Any> // kotlin.native.internal/collectReferenceFieldValues|collectReferenceFieldValues@kotlin.Any(){}[0]

// Targets: [native]
final fun (kotlin/Any).kotlin.native.internal/isLocal(): kotlin/Boolean // kotlin.native.internal/isLocal|isLocal@kotlin.Any(){}[0]

// Targets: [native]
final fun (kotlin/Any).kotlin.native.internal/isPermanent(): kotlin/Boolean // kotlin.native.internal/isPermanent|isPermanent@kotlin.Any(){}[0]

// Targets: [native]
final fun (kotlin/Any?).kotlin.native/identityHashCode(): kotlin/Int // kotlin.native/identityHashCode|identityHashCode@kotlin.Any?(){}[0]

// Targets: [native]
final fun (kotlin/Any?).kotlinx.cinterop/objcPtr(): kotlin.native.internal/NativePtr // kotlinx.cinterop/objcPtr|objcPtr@kotlin.Any?(){}[0]

// Targets: [native]
final fun (kotlin/Array<kotlin/String>).kotlinx.cinterop/toCStringArray(kotlinx.cinterop/AutofreeScope): kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>>>> // kotlinx.cinterop/toCStringArray|toCStringArray@kotlin.Array<kotlin.String>(kotlinx.cinterop.AutofreeScope){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getCharAt(kotlin/Int): kotlin/Char // kotlin.native/getCharAt|getCharAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getDoubleAt(kotlin/Int): kotlin/Double // kotlin.native/getDoubleAt|getDoubleAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getFloatAt(kotlin/Int): kotlin/Float // kotlin.native/getFloatAt|getFloatAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getIntAt(kotlin/Int): kotlin/Int // kotlin.native/getIntAt|getIntAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getLongAt(kotlin/Int): kotlin/Long // kotlin.native/getLongAt|getLongAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getShortAt(kotlin/Int): kotlin/Short // kotlin.native/getShortAt|getShortAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getUByteAt(kotlin/Int): kotlin/UByte // kotlin.native/getUByteAt|getUByteAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getUIntAt(kotlin/Int): kotlin/UInt // kotlin.native/getUIntAt|getUIntAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getULongAt(kotlin/Int): kotlin/ULong // kotlin.native/getULongAt|getULongAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/getUShortAt(kotlin/Int): kotlin/UShort // kotlin.native/getUShortAt|getUShortAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setCharAt(kotlin/Int, kotlin/Char) // kotlin.native/setCharAt|setCharAt@kotlin.ByteArray(kotlin.Int;kotlin.Char){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setDoubleAt(kotlin/Int, kotlin/Double) // kotlin.native/setDoubleAt|setDoubleAt@kotlin.ByteArray(kotlin.Int;kotlin.Double){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setFloatAt(kotlin/Int, kotlin/Float) // kotlin.native/setFloatAt|setFloatAt@kotlin.ByteArray(kotlin.Int;kotlin.Float){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setIntAt(kotlin/Int, kotlin/Int) // kotlin.native/setIntAt|setIntAt@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setLongAt(kotlin/Int, kotlin/Long) // kotlin.native/setLongAt|setLongAt@kotlin.ByteArray(kotlin.Int;kotlin.Long){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setShortAt(kotlin/Int, kotlin/Short) // kotlin.native/setShortAt|setShortAt@kotlin.ByteArray(kotlin.Int;kotlin.Short){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setUByteAt(kotlin/Int, kotlin/UByte) // kotlin.native/setUByteAt|setUByteAt@kotlin.ByteArray(kotlin.Int;kotlin.UByte){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setUIntAt(kotlin/Int, kotlin/UInt) // kotlin.native/setUIntAt|setUIntAt@kotlin.ByteArray(kotlin.Int;kotlin.UInt){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setULongAt(kotlin/Int, kotlin/ULong) // kotlin.native/setULongAt|setULongAt@kotlin.ByteArray(kotlin.Int;kotlin.ULong){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlin.native/setUShortAt(kotlin/Int, kotlin/UShort) // kotlin.native/setUShortAt|setUShortAt@kotlin.ByteArray(kotlin.Int;kotlin.UShort){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlinx.cinterop/refTo|refTo@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlinx.cinterop/toCValues|toCValues@kotlin.ByteArray(){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlinx.cinterop/toKString(): kotlin/String // kotlinx.cinterop/toKString|toKString@kotlin.ByteArray(){}[0]

// Targets: [native]
final fun (kotlin/ByteArray).kotlinx.cinterop/toKString(kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ...): kotlin/String // kotlinx.cinterop/toKString|toKString@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.Boolean){}[0]

// Targets: [native]
final fun (kotlin/Char.Companion).kotlin.text/isSupplementaryCodePoint(kotlin/Int): kotlin/Boolean // kotlin.text/isSupplementaryCodePoint|isSupplementaryCodePoint@kotlin.Char.Companion(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/Char.Companion).kotlin.text/isSurrogatePair(kotlin/Char, kotlin/Char): kotlin/Boolean // kotlin.text/isSurrogatePair|isSurrogatePair@kotlin.Char.Companion(kotlin.Char;kotlin.Char){}[0]

// Targets: [native]
final fun (kotlin/Char.Companion).kotlin.text/toChars(kotlin/Int): kotlin/CharArray // kotlin.text/toChars|toChars@kotlin.Char.Companion(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/Char.Companion).kotlin.text/toCodePoint(kotlin/Char, kotlin/Char): kotlin/Int // kotlin.text/toCodePoint|toCodePoint@kotlin.Char.Companion(kotlin.Char;kotlin.Char){}[0]

// Targets: [native]
final fun (kotlin/CharArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/COpaque> // kotlinx.cinterop/refTo|refTo@kotlin.CharArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/Double).kotlin.math/IEEErem(kotlin/Double): kotlin/Double // kotlin.math/IEEErem|IEEErem@kotlin.Double(kotlin.Double){}[0]

// Targets: [native]
final fun (kotlin/DoubleArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/DoubleVarOf<kotlin/Double>> // kotlinx.cinterop/refTo|refTo@kotlin.DoubleArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/DoubleArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/DoubleVarOf<kotlin/Double>> // kotlinx.cinterop/toCValues|toCValues@kotlin.DoubleArray(){}[0]

// Targets: [native]
final fun (kotlin/Float).kotlin.math/IEEErem(kotlin/Float): kotlin/Float // kotlin.math/IEEErem|IEEErem@kotlin.Float(kotlin.Float){}[0]

// Targets: [native]
final fun (kotlin/Float).kotlin.math/nextDown(): kotlin/Float // kotlin.math/nextDown|nextDown@kotlin.Float(){}[0]

// Targets: [native]
final fun (kotlin/Float).kotlin.math/nextTowards(kotlin/Float): kotlin/Float // kotlin.math/nextTowards|nextTowards@kotlin.Float(kotlin.Float){}[0]

// Targets: [native]
final fun (kotlin/Float).kotlin.math/nextUp(): kotlin/Float // kotlin.math/nextUp|nextUp@kotlin.Float(){}[0]

// Targets: [native]
final fun (kotlin/FloatArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/FloatVarOf<kotlin/Float>> // kotlinx.cinterop/refTo|refTo@kotlin.FloatArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/FloatArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/FloatVarOf<kotlin/Float>> // kotlinx.cinterop/toCValues|toCValues@kotlin.FloatArray(){}[0]

// Targets: [native]
final fun (kotlin/IntArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/IntVarOf<kotlin/Int>> // kotlinx.cinterop/refTo|refTo@kotlin.IntArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/IntArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/IntVarOf<kotlin/Int>> // kotlinx.cinterop/toCValues|toCValues@kotlin.IntArray(){}[0]

// Targets: [native]
final fun (kotlin/LongArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/LongVarOf<kotlin/Long>> // kotlinx.cinterop/refTo|refTo@kotlin.LongArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/LongArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/LongVarOf<kotlin/Long>> // kotlinx.cinterop/toCValues|toCValues@kotlin.LongArray(){}[0]

// Targets: [native]
final fun (kotlin/ShortArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/ShortVarOf<kotlin/Short>> // kotlinx.cinterop/refTo|refTo@kotlin.ShortArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ShortArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/ShortVarOf<kotlin/Short>> // kotlinx.cinterop/toCValues|toCValues@kotlin.ShortArray(){}[0]

// Targets: [native]
final fun (kotlin/String).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/COpaque> // kotlinx.cinterop/refTo|refTo@kotlin.String(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/Throwable).kotlin.native/getStackTraceAddresses(): kotlin.collections/List<kotlin/Long> // kotlin.native/getStackTraceAddresses|getStackTraceAddresses@kotlin.Throwable(){}[0]

// Targets: [native]
final fun (kotlin/UByteArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // kotlinx.cinterop/refTo|refTo@kotlin.UByteArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/UByteArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // kotlinx.cinterop/toCValues|toCValues@kotlin.UByteArray(){}[0]

// Targets: [native]
final fun (kotlin/UIntArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/UIntVarOf<kotlin/UInt>> // kotlinx.cinterop/refTo|refTo@kotlin.UIntArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/UIntArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/UIntVarOf<kotlin/UInt>> // kotlinx.cinterop/toCValues|toCValues@kotlin.UIntArray(){}[0]

// Targets: [native]
final fun (kotlin/ULongArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/ULongVarOf<kotlin/ULong>> // kotlinx.cinterop/refTo|refTo@kotlin.ULongArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/ULongArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/ULongVarOf<kotlin/ULong>> // kotlinx.cinterop/toCValues|toCValues@kotlin.ULongArray(){}[0]

// Targets: [native]
final fun (kotlin/UShortArray).kotlinx.cinterop/refTo(kotlin/Int): kotlinx.cinterop/CValuesRef<kotlinx.cinterop/UShortVarOf<kotlin/UShort>> // kotlinx.cinterop/refTo|refTo@kotlin.UShortArray(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlin/UShortArray).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/UShortVarOf<kotlin/UShort>> // kotlinx.cinterop/toCValues|toCValues@kotlin.UShortArray(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<*>).kotlinx.cinterop/getRawValue(): kotlin.native.internal/NativePtr // kotlinx.cinterop/getRawValue|getRawValue@kotlinx.cinterop.CPointer<*>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>>).kotlinx.cinterop/toKString(): kotlin/String // kotlinx.cinterop/toKString|toKString@kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>>).kotlinx.cinterop/toKStringFromUtf8(): kotlin/String // kotlinx.cinterop/toKStringFromUtf8|toKStringFromUtf8@kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<kotlinx.cinterop/IntVarOf<kotlin/Int>>).kotlinx.cinterop/toKStringFromUtf32(): kotlin/String // kotlinx.cinterop/toKStringFromUtf32|toKStringFromUtf32@kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<kotlin.Int>>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<kotlinx.cinterop/ShortVarOf<kotlin/Short>>).kotlinx.cinterop/toKString(): kotlin/String // kotlinx.cinterop/toKString|toKString@kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<kotlinx.cinterop/ShortVarOf<kotlin/Short>>).kotlinx.cinterop/toKStringFromUtf16(): kotlin/String // kotlinx.cinterop/toKStringFromUtf16|toKStringFromUtf16@kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<kotlinx.cinterop/UShortVarOf<kotlin/UShort>>).kotlinx.cinterop/toKString(): kotlin/String // kotlinx.cinterop/toKString|toKString@kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<kotlin.UShort>>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<kotlinx.cinterop/UShortVarOf<kotlin/UShort>>).kotlinx.cinterop/toKStringFromUtf16(): kotlin/String // kotlinx.cinterop/toKStringFromUtf16|toKStringFromUtf16@kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<kotlin.UShort>>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>).kotlin.native.concurrent/callContinuation0() // kotlin.native.concurrent/callContinuation0|callContinuation0@kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>).kotlinx.cinterop/readBytes(kotlin/Int): kotlin/ByteArray // kotlinx.cinterop/readBytes|readBytes@kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/NativeFreeablePlacement).kotlinx.cinterop/free(kotlinx.cinterop/CPointer<*>) // kotlinx.cinterop/free|free@kotlinx.cinterop.NativeFreeablePlacement(kotlinx.cinterop.CPointer<*>){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/NativeFreeablePlacement).kotlinx.cinterop/free(kotlinx.cinterop/NativePointed) // kotlinx.cinterop/free|free@kotlinx.cinterop.NativeFreeablePlacement(kotlinx.cinterop.NativePointed){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(kotlinx.cinterop/CVariable.Type): kotlinx.cinterop/NativePointed // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(kotlinx.cinterop.CVariable.Type){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArrayOf(kotlin/ByteArray): kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlinx.cinterop/allocArrayOf|allocArrayOf@kotlinx.cinterop.NativePlacement(kotlin.ByteArray){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArrayOf(kotlin/FloatArray...): kotlinx.cinterop/CPointer<kotlinx.cinterop/FloatVarOf<kotlin/Float>> // kotlinx.cinterop/allocArrayOf|allocArrayOf@kotlinx.cinterop.NativePlacement(kotlin.FloatArray...){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/NativePointed).kotlinx.cinterop/getRawPointer(): kotlin.native.internal/NativePtr // kotlinx.cinterop/getRawPointer|getRawPointer@kotlinx.cinterop.NativePointed(){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/ByteArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.ByteArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/CharArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/COpaque> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.CharArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/DoubleArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/DoubleVarOf<kotlin/Double>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.DoubleArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/FloatArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/FloatVarOf<kotlin/Float>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.FloatArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/IntArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/IntVarOf<kotlin/Int>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.IntArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/LongArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/LongVarOf<kotlin/Long>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.LongArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/ShortArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/ShortVarOf<kotlin/Short>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.ShortArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/String>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/COpaque> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.String>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/UByteArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.UByteArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/UIntArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/UIntVarOf<kotlin/UInt>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.UIntArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/ULongArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/ULongVarOf<kotlin/ULong>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.ULongArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.cinterop/Pinned<kotlin/UShortArray>).kotlinx.cinterop/addressOf(kotlin/Int): kotlinx.cinterop/CPointer<kotlinx.cinterop/UShortVarOf<kotlin/UShort>> // kotlinx.cinterop/addressOf|addressOf@kotlinx.cinterop.Pinned<kotlin.UShortArray>(kotlin.Int){}[0]

// Targets: [native]
final fun (kotlinx.wasm.jsinterop/JsValue).kotlinx.wasm.jsinterop/setter(kotlin/String, kotlin/Function1<kotlin.collections/ArrayList<kotlinx.wasm.jsinterop/JsValue>, kotlin/Unit>) // kotlinx.wasm.jsinterop/setter|setter@kotlinx.wasm.jsinterop.JsValue(kotlin.String;kotlin.Function1<kotlin.collections.ArrayList<kotlinx.wasm.jsinterop.JsValue>,kotlin.Unit>){}[0]

// Targets: [native]
final fun (kotlinx.wasm.jsinterop/JsValue).kotlinx.wasm.jsinterop/setter(kotlin/String, kotlin/String) // kotlinx.wasm.jsinterop/setter|setter@kotlinx.wasm.jsinterop.JsValue(kotlin.String;kotlin.String){}[0]

// Targets: [native]
final fun <#A: kotlin/Any> kotlin.test/assertNotNull(#A?, kotlin/String? = ...): #A // kotlin.test/assertNotNull|assertNotNull(0:0?;kotlin.String?){0§<kotlin.Any>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?, #U: kotlin/Any?, #V: kotlin/Any?, #W: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function22<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U, #V, #W>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U, #V): #W // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function22<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19,0:20,0:21,0:22>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14;0:15;0:16;0:17;0:18;0:19;0:20;0:21){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>;20§<kotlin.Any?>;21§<kotlin.Any?>;22§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?, #U: kotlin/Any?, #V: kotlin/Any?, #W: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function22<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U, #V, #W>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function22<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U, #V, #W>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function22<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19,0:20,0:21,0:22>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>;20§<kotlin.Any?>;21§<kotlin.Any?>;22§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?, #U: kotlin/Any?, #V: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function21<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U, #V>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U): #V // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function21<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19,0:20,0:21>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14;0:15;0:16;0:17;0:18;0:19;0:20){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>;20§<kotlin.Any?>;21§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?, #U: kotlin/Any?, #V: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function21<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U, #V>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function21<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U, #V>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function21<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19,0:20,0:21>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>;20§<kotlin.Any?>;21§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?, #U: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function20<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T): #U // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function20<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19,0:20>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14;0:15;0:16;0:17;0:18;0:19){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>;20§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?, #U: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function20<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function20<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T, #U>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function20<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19,0:20>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>;20§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function19<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S): #T // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function19<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14;0:15;0:16;0:17;0:18){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?, #T: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function19<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function19<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S, #T>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function19<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18,0:19>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>;19§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function18<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R): #S // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function18<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14;0:15;0:16;0:17){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?, #S: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function18<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function18<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R, #S>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function18<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17,0:18>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>;18§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function17<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q): #R // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function17<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14;0:15;0:16){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?, #R: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function17<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function17<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q, #R>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function17<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16,0:17>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>;17§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function16<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P): #Q // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function16<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14;0:15){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?, #Q: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function16<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function16<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P, #Q>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function16<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15,0:16>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>;16§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function15<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O): #P // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function15<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13;0:14){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?, #P: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function15<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function15<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O, #P>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function15<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14,0:15>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>;15§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function14<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N): #O // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function14<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12;0:13){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?, #O: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function14<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function14<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N, #O>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function14<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13,0:14>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>;14§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function13<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M): #N // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function13<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11;0:12){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?, #N: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function13<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function13<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M, #N>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function13<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12,0:13>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>;13§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function12<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L): #M // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function12<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10;0:11){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?, #M: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function12<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function12<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L, #M>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function12<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11,0:12>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>;12§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function11<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K): #L // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function11<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9;0:10){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function11<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function11<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function11<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function10<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I, #J): #K // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function10<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8;0:9){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function10<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function10<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function10<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function9<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H, #I): #J // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function9<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7;0:8){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function9<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function9<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function9<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function8<#A, #B, #C, #D, #E, #F, #G, #H, #I>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G, #H): #I // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6;0:7){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function8<#A, #B, #C, #D, #E, #F, #G, #H, #I>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function8<#A, #B, #C, #D, #E, #F, #G, #H, #I>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function7<#A, #B, #C, #D, #E, #F, #G, #H>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F, #G): #H // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function7<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>>>(0:0;0:1;0:2;0:3;0:4;0:5;0:6){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function7<#A, #B, #C, #D, #E, #F, #G, #H>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function7<#A, #B, #C, #D, #E, #F, #G, #H>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function7<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function6<#A, #B, #C, #D, #E, #F, #G>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E, #F): #G // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function6<0:0,0:1,0:2,0:3,0:4,0:5,0:6>>>(0:0;0:1;0:2;0:3;0:4;0:5){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function6<#A, #B, #C, #D, #E, #F, #G>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function6<#A, #B, #C, #D, #E, #F, #G>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function6<0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function5<#A, #B, #C, #D, #E, #F>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D, #E): #F // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function5<0:0,0:1,0:2,0:3,0:4,0:5>>>(0:0;0:1;0:2;0:3;0:4){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function5<#A, #B, #C, #D, #E, #F>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function5<#A, #B, #C, #D, #E, #F>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function5<0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function4<#A, #B, #C, #D, #E>>>).kotlinx.cinterop/invoke(#A, #B, #C, #D): #E // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function4<0:0,0:1,0:2,0:3,0:4>>>(0:0;0:1;0:2;0:3){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function4<#A, #B, #C, #D, #E>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function4<#A, #B, #C, #D, #E>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function4<0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function3<#A, #B, #C, #D>>>).kotlinx.cinterop/invoke(#A, #B, #C): #D // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function3<0:0,0:1,0:2,0:3>>>(0:0;0:1;0:2){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function3<#A, #B, #C, #D>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function3<#A, #B, #C, #D>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function3<0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function2<#A, #B, #C>>>).kotlinx.cinterop/invoke(#A, #B): #C // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function2<0:0,0:1,0:2>>>(0:0;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function2<#A, #B, #C>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function2<#A, #B, #C>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function2<0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (#A).kotlin.native.internal/reinterpret(): #B // kotlin.native.internal/reinterpret|reinterpret@0:0(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function1<#A, #B>>>).kotlinx.cinterop/invoke(#A): #B // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function1<0:0,0:1>>>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>).kotlin.native.concurrent/callContinuation2() // kotlin.native.concurrent/callContinuation2|callContinuation2@kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnFallback(kotlin.coroutines/SuspendFunction1<#A, #B>, #A, kotlin.coroutines/Continuation<#B>): kotlin/Any? // kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnFallback|startCoroutineUninterceptedOrReturnFallback(kotlin.coroutines.SuspendFunction1<0:0,0:1>;0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.test/assertContains(kotlin.collections/Map<#A, #B>, #A, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.collections.Map<0:0,0:1>;0:0;kotlin.String?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function1<#A, #B>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function1<#A, #B>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (#A).kotlin.native.concurrent/freeze(): #A // kotlin.native.concurrent/freeze|freeze@0:0(){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<kotlin.native.concurrent/Future<#A>>).kotlin.native.concurrent/waitForMultipleFutures(kotlin/Int): kotlin.collections/Set<kotlin.native.concurrent/Future<#A>> // kotlin.native.concurrent/waitForMultipleFutures|waitForMultipleFutures@kotlin.collections.Collection<kotlin.native.concurrent.Future<0:0>>(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlin.collections/MutableList<#A>).kotlin.collections/replaceAll(kotlin/Function1<#A, #A>) // kotlin.collections/replaceAll|replaceAll@kotlin.collections.MutableList<0:0>(kotlin.Function1<0:0,0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlin.reflect/KMutableProperty0<#A>).kotlin.concurrent/atomicGetField(): #A // kotlin.concurrent/atomicGetField|atomicGetField@kotlin.reflect.KMutableProperty0<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlin.reflect/KMutableProperty0<#A>).kotlin.concurrent/atomicSetField(#A) // kotlin.concurrent/atomicSetField|atomicSetField@kotlin.reflect.KMutableProperty0<0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlin.reflect/KMutableProperty0<#A>).kotlin.concurrent/compareAndExchangeField(#A, #A): #A // kotlin.concurrent/compareAndExchangeField|compareAndExchangeField@kotlin.reflect.KMutableProperty0<0:0>(0:0;0:0){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlin.reflect/KMutableProperty0<#A>).kotlin.concurrent/compareAndSetField(#A, #A): kotlin/Boolean // kotlin.concurrent/compareAndSetField|compareAndSetField@kotlin.reflect.KMutableProperty0<0:0>(0:0;0:0){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlin.reflect/KMutableProperty0<#A>).kotlin.concurrent/getAndSetField(#A): #A // kotlin.concurrent/getAndSetField|getAndSetField@kotlin.reflect.KMutableProperty0<0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function0<#A>>>).kotlinx.cinterop/invoke(): #A // kotlinx.cinterop/invoke|invoke@kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<kotlin.Function0<0:0>>>(){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> (kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>).kotlin.native.concurrent/callContinuation1() // kotlin.native.concurrent/callContinuation1|callContinuation1@kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>(){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnFallback(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/Continuation<#A>): kotlin/Any? // kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnFallback|startCoroutineUninterceptedOrReturnFallback(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.coroutines.intrinsics/wrapWithContinuationImpl(kotlin.coroutines/Continuation<#A>): kotlin.coroutines/Continuation<#A> // kotlin.coroutines.intrinsics/wrapWithContinuationImpl|wrapWithContinuationImpl(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.concurrent/atomicLazy(kotlin/Function0<#A>): kotlin/Lazy<#A> // kotlin.native.concurrent/atomicLazy|atomicLazy(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.concurrent/waitForMultipleFutures(kotlin.collections/Collection<kotlin.native.concurrent/Future<#A>>, kotlin/Int): kotlin.collections/Set<kotlin.native.concurrent/Future<#A>> // kotlin.native.concurrent/waitForMultipleFutures|waitForMultipleFutures(kotlin.collections.Collection<kotlin.native.concurrent.Future<0:0>>;kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.internal/createCleaner(#A, kotlin/Function1<#A, kotlin/Unit>): kotlin.native.internal/Cleaner // kotlin.native.internal/createCleaner|createCleaner(0:0;kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.internal/createUninitializedArray(kotlin/Int): #A // kotlin.native.internal/createUninitializedArray|createUninitializedArray(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.internal/createUninitializedInstance(): #A // kotlin.native.internal/createUninitializedInstance|createUninitializedInstance(){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.internal/getContinuation(): kotlin.coroutines/Continuation<#A> // kotlin.native.internal/getContinuation|getContinuation(){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.internal/isSubtype(kotlin.native.internal/NativePtr): kotlin/Boolean // kotlin.native.internal/isSubtype|isSubtype(kotlin.native.internal.NativePtr){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.native.ref/createCleaner(#A, kotlin/Function1<#A, kotlin/Unit>): kotlin.native.ref/Cleaner // kotlin.native.ref/createCleaner|createCleaner(0:0;kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertContains(kotlin.collections/Iterable<#A>, #A, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.collections.Iterable<0:0>;0:0;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertContains(kotlin.sequences/Sequence<#A>, #A, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.sequences.Sequence<0:0>;0:0;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertContains(kotlin/Array<#A>, #A, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.Array<0:0>;0:0;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertContentEquals(kotlin.collections/Iterable<#A>?, kotlin.collections/Iterable<#A>?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.collections.Iterable<0:0>?;kotlin.collections.Iterable<0:0>?;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertContentEquals(kotlin.collections/Set<#A>?, kotlin.collections/Set<#A>?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.collections.Set<0:0>?;kotlin.collections.Set<0:0>?;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertContentEquals(kotlin.sequences/Sequence<#A>?, kotlin.sequences/Sequence<#A>?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.sequences.Sequence<0:0>?;kotlin.sequences.Sequence<0:0>?;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertContentEquals(kotlin/Array<#A>?, kotlin/Array<#A>?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.Array<0:0>?;kotlin.Array<0:0>?;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertEquals(#A, #A, kotlin/String? = ...) // kotlin.test/assertEquals|assertEquals(0:0;0:0;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertNotEquals(#A, #A, kotlin/String? = ...) // kotlin.test/assertNotEquals|assertNotEquals(0:0;0:0;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertNotSame(#A, #A, kotlin/String? = ...) // kotlin.test/assertNotSame|assertNotSame(0:0;0:0;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin.test/assertSame(#A, #A, kotlin/String? = ...) // kotlin.test/assertSame|assertSame(0:0;0:0;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlin/emptyArray(): kotlin/Array<#A> // kotlin/emptyArray|emptyArray(){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlinx.cinterop/interpretObjCPointerOrNull(kotlin.native.internal/NativePtr): #A? // kotlinx.cinterop/interpretObjCPointerOrNull|interpretObjCPointerOrNull(kotlin.native.internal.NativePtr){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlinx.cinterop/staticCFunction(kotlin/Function0<#A>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CFunction<kotlin/Function0<#A>>> // kotlinx.cinterop/staticCFunction|staticCFunction(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Any?> kotlinx.wasm.jsinterop/wrapFunction(kotlin/Function1<kotlin.collections/ArrayList<kotlinx.wasm.jsinterop/JsValue>, #A>): kotlin/Int // kotlinx.wasm.jsinterop/wrapFunction|wrapFunction(kotlin.Function1<kotlin.collections.ArrayList<kotlinx.wasm.jsinterop.JsValue>,0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final fun <#A: kotlin/Boolean> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/BooleanVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.Boolean>}[0]

// Targets: [native]
final fun <#A: kotlin/Byte> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/ByteVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.Byte>}[0]

// Targets: [native]
final fun <#A: kotlin/Comparable<#A>> kotlin.test/assertContains(kotlin.ranges/ClosedRange<#A>, #A, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ranges.ClosedRange<0:0>;0:0;kotlin.String?){0§<kotlin.Comparable<0:0>>}[0]

// Targets: [native]
final fun <#A: kotlin/Comparable<#A>> kotlin.test/assertContains(kotlin.ranges/OpenEndRange<#A>, #A, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ranges.OpenEndRange<0:0>;0:0;kotlin.String?){0§<kotlin.Comparable<0:0>>}[0]

// Targets: [native]
final fun <#A: kotlin/Double> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/DoubleVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.Double>}[0]

// Targets: [native]
final fun <#A: kotlin/Enum<#A>> kotlin.native.internal/enumValueOfIntrinsic(kotlin/String): #A // kotlin.native.internal/enumValueOfIntrinsic|enumValueOfIntrinsic(kotlin.String){0§<kotlin.Enum<0:0>>}[0]

// Targets: [native]
final fun <#A: kotlin/Enum<#A>> kotlin.native.internal/enumValuesIntrinsic(): kotlin/Array<#A> // kotlin.native.internal/enumValuesIntrinsic|enumValuesIntrinsic(){0§<kotlin.Enum<0:0>>}[0]

// Targets: [native]
final fun <#A: kotlin/Enum<#A>> kotlin.native.internal/valueOfForEnum(kotlin/String, kotlin/Array<#A>): #A // kotlin.native.internal/valueOfForEnum|valueOfForEnum(kotlin.String;kotlin.Array<0:0>){0§<kotlin.Enum<0:0>>}[0]

// Targets: [native]
final fun <#A: kotlin/Enum<#A>> kotlin.native.internal/valuesForEnum(kotlin/Array<#A>): kotlin/Array<#A> // kotlin.native.internal/valuesForEnum|valuesForEnum(kotlin.Array<0:0>){0§<kotlin.Enum<0:0>>}[0]

// Targets: [native]
final fun <#A: kotlin/Float> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/FloatVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.Float>}[0]

// Targets: [native]
final fun <#A: kotlin/Int> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/IntVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.Int>}[0]

// Targets: [native]
final fun <#A: kotlin/Long> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/LongVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.Long>}[0]

// Targets: [native]
final fun <#A: kotlin/Short> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/ShortVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.Short>}[0]

// Targets: [native]
final fun <#A: kotlin/Throwable> kotlin.test/checkResultIsFailure(kotlin.reflect/KClass<#A>, kotlin/String?, kotlin/Result<kotlin/Unit>): #A // kotlin.test/checkResultIsFailure|checkResultIsFailure(kotlin.reflect.KClass<0:0>;kotlin.String?;kotlin.Result<kotlin.Unit>){0§<kotlin.Throwable>}[0]

// Targets: [native]
final fun <#A: kotlin/UByte> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/UByteVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.UByte>}[0]

// Targets: [native]
final fun <#A: kotlin/UInt> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/UIntVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.UInt>}[0]

// Targets: [native]
final fun <#A: kotlin/ULong> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/ULongVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.ULong>}[0]

// Targets: [native]
final fun <#A: kotlin/UShort> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(#A): kotlinx.cinterop/UShortVarOf<#A> // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(0:0){0§<kotlin.UShort>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlin.collections/List<kotlinx.cinterop/CPointer<#A>?>).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<#A>>> // kotlinx.cinterop/toCValues|toCValues@kotlin.collections.List<kotlinx.cinterop.CPointer<0:0>?>(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlin/Array<kotlinx.cinterop/CPointer<#A>?>).kotlinx.cinterop/toCValues(): kotlinx.cinterop/CValues<kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<#A>>> // kotlinx.cinterop/toCValues|toCValues@kotlin.Array<kotlinx.cinterop.CPointer<0:0>?>(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlin/Long).kotlinx.cinterop/toCPointer(): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/toCPointer|toCPointer@kotlin.Long(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/toLong(): kotlin/Long // kotlinx.cinterop/toLong|toLong@kotlinx.cinterop.CPointer<0:0>?(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlinx.cinterop/CPointer<*>).kotlinx.cinterop/reinterpret(): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/reinterpret|reinterpret@kotlinx.cinterop.CPointer<*>(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArrayOfPointersTo(kotlin.collections/List<#A?>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<#A>>> // kotlinx.cinterop/allocArrayOfPointersTo|allocArrayOfPointersTo@kotlinx.cinterop.NativePlacement(kotlin.collections.List<0:0?>){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArrayOfPointersTo(kotlin/Array<out #A?>...): kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<#A>>> // kotlinx.cinterop/allocArrayOfPointersTo|allocArrayOfPointersTo@kotlinx.cinterop.NativePlacement(kotlin.Array<out|0:0?>...){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocPointerTo(): kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<#A>> // kotlinx.cinterop/allocPointerTo|allocPointerTo@kotlinx.cinterop.NativePlacement(){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> kotlinx.cinterop/cValuesOf(kotlin/Array<out kotlinx.cinterop/CPointer<#A>?>...): kotlinx.cinterop/CValues<kotlinx.cinterop/CPointerVarOf<kotlinx.cinterop/CPointer<#A>>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.Array<out|kotlinx.cinterop.CPointer<0:0>?>...){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CPointed> kotlinx.cinterop/interpretCPointer(kotlin.native.internal/NativePtr): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/interpretCPointer|interpretCPointer(kotlin.native.internal.NativePtr){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CVariable> (kotlinx.cinterop/CPointed).kotlinx.cinterop/readValue(kotlin/Long, kotlin/Int): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/readValue|readValue@kotlinx.cinterop.CPointed(kotlin.Long;kotlin.Int){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CVariable> (kotlinx.cinterop/CPointed).kotlinx.cinterop/readValue(kotlinx.cinterop/CVariable.Type): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/readValue|readValue@kotlinx.cinterop.CPointed(kotlinx.cinterop.CVariable.Type){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CVariable> (kotlinx.cinterop/CPointed).kotlinx.cinterop/readValues(kotlin/Int, kotlin/Int): kotlinx.cinterop/CValues<#A> // kotlinx.cinterop/readValues|readValues@kotlinx.cinterop.CPointed(kotlin.Int;kotlin.Int){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CVariable> (kotlinx.cinterop/CValue<#A>).kotlinx.cinterop/write(kotlin.native.internal/NativePtr) // kotlinx.cinterop/write|write@kotlinx.cinterop.CValue<0:0>(kotlin.native.internal.NativePtr){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CVariable> (kotlinx.cinterop/CValues<#A>).kotlinx.cinterop/getBytes(): kotlin/ByteArray // kotlinx.cinterop/getBytes|getBytes@kotlinx.cinterop.CValues<0:0>(){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CVariable> (kotlinx.cinterop/CValues<#A>).kotlinx.cinterop/placeTo(kotlinx.cinterop/AutofreeScope): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/placeTo|placeTo@kotlinx.cinterop.CValues<0:0>(kotlinx.cinterop.AutofreeScope){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/CVariable> kotlinx.cinterop/typeOf(): kotlinx.cinterop/CVariable.Type // kotlinx.cinterop/typeOf|typeOf(){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/NativePointed> kotlinx.cinterop/interpretNullablePointed(kotlin.native.internal/NativePtr): #A? // kotlinx.cinterop/interpretNullablePointed|interpretNullablePointed(kotlin.native.internal.NativePtr){0§<kotlinx.cinterop.NativePointed>}[0]

// Targets: [native]
final fun <#A: kotlinx.cinterop/ObjCObjectBase> (#A).kotlinx.cinterop/initBy(#A): #A // kotlinx.cinterop/initBy|initBy@0:0(0:0){0§<kotlinx.cinterop.ObjCObjectBase>}[0]

// Targets: [native]
final fun kotlin.io/print(kotlin/String) // kotlin.io/print|print(kotlin.String){}[0]

// Targets: [native]
final fun kotlin.io/println(kotlin/String) // kotlin.io/println|println(kotlin.String){}[0]

// Targets: [native]
final fun kotlin.io/readLine(): kotlin/String? // kotlin.io/readLine|readLine(){}[0]

// Targets: [native]
final fun kotlin.native.concurrent/attachObjectGraphInternal(kotlin.native.internal/NativePtr): kotlin/Any? // kotlin.native.concurrent/attachObjectGraphInternal|attachObjectGraphInternal(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.concurrent/consumeFuture(kotlin/Int): kotlin/Any? // kotlin.native.concurrent/consumeFuture|consumeFuture(kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.concurrent/detachObjectGraphInternal(kotlin/Int, kotlin/Function0<kotlin/Any?>): kotlin.native.internal/NativePtr // kotlin.native.concurrent/detachObjectGraphInternal|detachObjectGraphInternal(kotlin.Int;kotlin.Function0<kotlin.Any?>){}[0]

// Targets: [native]
final fun kotlin.native.concurrent/waitWorkerTermination(kotlin.native.concurrent/Worker) // kotlin.native.concurrent/waitWorkerTermination|waitWorkerTermination(kotlin.native.concurrent.Worker){}[0]

// Targets: [native]
final fun kotlin.native.internal.ref/createRetainedExternalRCRef(kotlin/Any): kotlin.native.internal/NativePtr // kotlin.native.internal.ref/createRetainedExternalRCRef|createRetainedExternalRCRef(kotlin.Any){}[0]

// Targets: [native]
final fun kotlin.native.internal.ref/dereferenceExternalRCRef(kotlin.native.internal/NativePtr): kotlin/Any // kotlin.native.internal.ref/dereferenceExternalRCRef|dereferenceExternalRCRef(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.internal.ref/disposeExternalRCRef(kotlin.native.internal/NativePtr) // kotlin.native.internal.ref/disposeExternalRCRef|disposeExternalRCRef(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.internal.ref/releaseExternalRCRef(kotlin.native.internal/NativePtr) // kotlin.native.internal.ref/releaseExternalRCRef|releaseExternalRCRef(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.internal.ref/retainExternalRCRef(kotlin.native.internal/NativePtr) // kotlin.native.internal.ref/retainExternalRCRef|retainExternalRCRef(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.internal.ref/tryRetainExternalRCRef(kotlin.native.internal/NativePtr): kotlin/Boolean // kotlin.native.internal.ref/tryRetainExternalRCRef|tryRetainExternalRCRef(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.internal.test/main(kotlin/Array<kotlin/String>) // kotlin.native.internal.test/main|main(kotlin.Array<kotlin.String>){}[0]

// Targets: [native]
final fun kotlin.native.internal.test/mainNoExit(kotlin/Array<kotlin/String>) // kotlin.native.internal.test/mainNoExit|mainNoExit(kotlin.Array<kotlin.String>){}[0]

// Targets: [native]
final fun kotlin.native.internal.test/registerSuite(kotlin.native.internal.test/TestSuite) // kotlin.native.internal.test/registerSuite|registerSuite(kotlin.native.internal.test.TestSuite){}[0]

// Targets: [native]
final fun kotlin.native.internal.test/testLauncherEntryPoint(kotlin/Array<kotlin/String>): kotlin/Int // kotlin.native.internal.test/testLauncherEntryPoint|testLauncherEntryPoint(kotlin.Array<kotlin.String>){}[0]

// Targets: [native]
final fun kotlin.native.internal.test/worker(kotlin/Array<kotlin/String>) // kotlin.native.internal.test/worker|worker(kotlin.Array<kotlin.String>){}[0]

// Targets: [native]
final fun kotlin.native.internal/KonanObjectToUtf8Array(kotlin/Any?): kotlin/ByteArray // kotlin.native.internal/KonanObjectToUtf8Array|KonanObjectToUtf8Array(kotlin.Any?){}[0]

// Targets: [native]
final fun kotlin.native.internal/Kotlin_boxUnit(): kotlin/Unit? // kotlin.native.internal/Kotlin_boxUnit|Kotlin_boxUnit(){}[0]

// Targets: [native]
final fun kotlin.native.internal/Kotlin_equals(kotlin/Any, kotlin/Any): kotlin/Boolean // kotlin.native.internal/Kotlin_equals|Kotlin_equals(kotlin.Any;kotlin.Any){}[0]

// Targets: [native]
final fun kotlin.native.internal/Kotlin_hashCode(kotlin/Any): kotlin/Int // kotlin.native.internal/Kotlin_hashCode|Kotlin_hashCode(kotlin.Any){}[0]

// Targets: [native]
final fun kotlin.native.internal/Kotlin_toString(kotlin/Any): kotlin/String // kotlin.native.internal/Kotlin_toString|Kotlin_toString(kotlin.Any){}[0]

// Targets: [native]
final fun kotlin.native.internal/OnUnhandledException(kotlin/Throwable) // kotlin.native.internal/OnUnhandledException|OnUnhandledException(kotlin.Throwable){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowClassCastException(kotlin/Any, kotlin.native.internal/NativePtr): kotlin/Nothing // kotlin.native.internal/ThrowClassCastException|ThrowClassCastException(kotlin.Any;kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowInvalidReceiverTypeException(kotlin.reflect/KClass<*>): kotlin/Nothing // kotlin.native.internal/ThrowInvalidReceiverTypeException|ThrowInvalidReceiverTypeException(kotlin.reflect.KClass<*>){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowIrLinkageError(kotlin/String?): kotlin/Nothing // kotlin.native.internal/ThrowIrLinkageError|ThrowIrLinkageError(kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowKotlinNothingValueException(): kotlin/Nothing // kotlin.native.internal/ThrowKotlinNothingValueException|ThrowKotlinNothingValueException(){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowNoWhenBranchMatchedException(): kotlin/Nothing // kotlin.native.internal/ThrowNoWhenBranchMatchedException|ThrowNoWhenBranchMatchedException(){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowNullPointerException(): kotlin/Nothing // kotlin.native.internal/ThrowNullPointerException|ThrowNullPointerException(){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowTypeCastException(kotlin/Any, kotlin/String): kotlin/Nothing // kotlin.native.internal/ThrowTypeCastException|ThrowTypeCastException(kotlin.Any;kotlin.String){}[0]

// Targets: [native]
final fun kotlin.native.internal/ThrowUninitializedPropertyAccessException(kotlin/String): kotlin/Nothing // kotlin.native.internal/ThrowUninitializedPropertyAccessException|ThrowUninitializedPropertyAccessException(kotlin.String){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin.native.internal/NativePtr, kotlin.native.internal/NativePtr): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.native.internal.NativePtr;kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin/Boolean, kotlin/Boolean): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.Boolean;kotlin.Boolean){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin/Byte, kotlin/Byte): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.Byte;kotlin.Byte){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin/Double, kotlin/Double): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.Double;kotlin.Double){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin/Float, kotlin/Float): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.Float;kotlin.Float){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin/Int, kotlin/Int): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin/Long, kotlin/Long): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.Long;kotlin.Long){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlin/Short, kotlin/Short): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlin.Short;kotlin.Short){}[0]

// Targets: [native]
final fun kotlin.native.internal/areEqualByValue(kotlinx.cinterop/Vector128, kotlinx.cinterop/Vector128): kotlin/Boolean // kotlin.native.internal/areEqualByValue|areEqualByValue(kotlinx.cinterop.Vector128;kotlinx.cinterop.Vector128){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxBoolean(kotlin/Boolean): kotlin/Boolean? // kotlin.native.internal/boxBoolean|boxBoolean(kotlin.Boolean){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxByte(kotlin/Byte): kotlin/Byte? // kotlin.native.internal/boxByte|boxByte(kotlin.Byte){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxChar(kotlin/Char): kotlin/Char? // kotlin.native.internal/boxChar|boxChar(kotlin.Char){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxDouble(kotlin/Double): kotlin/Double? // kotlin.native.internal/boxDouble|boxDouble(kotlin.Double){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxFloat(kotlin/Float): kotlin/Float? // kotlin.native.internal/boxFloat|boxFloat(kotlin.Float){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxInt(kotlin/Int): kotlin/Int? // kotlin.native.internal/boxInt|boxInt(kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxLong(kotlin/Long): kotlin/Long? // kotlin.native.internal/boxLong|boxLong(kotlin.Long){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxShort(kotlin/Short): kotlin/Short? // kotlin.native.internal/boxShort|boxShort(kotlin.Short){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxUByte(kotlin/UByte): kotlin/UByte? // kotlin.native.internal/boxUByte|boxUByte(kotlin.UByte){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxUInt(kotlin/UInt): kotlin/UInt? // kotlin.native.internal/boxUInt|boxUInt(kotlin.UInt){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxULong(kotlin/ULong): kotlin/ULong? // kotlin.native.internal/boxULong|boxULong(kotlin.ULong){}[0]

// Targets: [native]
final fun kotlin.native.internal/boxUShort(kotlin/UShort): kotlin/UShort? // kotlin.native.internal/boxUShort|boxUShort(kotlin.UShort){}[0]

// Targets: [native]
final fun kotlin.native.internal/checkProgressionStep(kotlin/Int): kotlin/Int // kotlin.native.internal/checkProgressionStep|checkProgressionStep(kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.internal/checkProgressionStep(kotlin/Long): kotlin/Long // kotlin.native.internal/checkProgressionStep|checkProgressionStep(kotlin.Long){}[0]

// Targets: [native]
final fun kotlin.native.internal/createEmptyString(): kotlin/String // kotlin.native.internal/createEmptyString|createEmptyString(){}[0]

// Targets: [native]
final fun kotlin.native.internal/getCachedBooleanBox(kotlin/Boolean): kotlin/Boolean? // kotlin.native.internal/getCachedBooleanBox|getCachedBooleanBox(kotlin.Boolean){}[0]

// Targets: [native]
final fun kotlin.native.internal/getCachedByteBox(kotlin/Byte): kotlin/Byte? // kotlin.native.internal/getCachedByteBox|getCachedByteBox(kotlin.Byte){}[0]

// Targets: [native]
final fun kotlin.native.internal/getCachedCharBox(kotlin/Char): kotlin/Char? // kotlin.native.internal/getCachedCharBox|getCachedCharBox(kotlin.Char){}[0]

// Targets: [native]
final fun kotlin.native.internal/getCachedIntBox(kotlin/Int): kotlin/Int? // kotlin.native.internal/getCachedIntBox|getCachedIntBox(kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.internal/getCachedLongBox(kotlin/Long): kotlin/Long? // kotlin.native.internal/getCachedLongBox|getCachedLongBox(kotlin.Long){}[0]

// Targets: [native]
final fun kotlin.native.internal/getCachedShortBox(kotlin/Short): kotlin/Short? // kotlin.native.internal/getCachedShortBox|getCachedShortBox(kotlin.Short){}[0]

// Targets: [native]
final fun kotlin.native.internal/getCoroutineSuspended(): kotlin/Any // kotlin.native.internal/getCoroutineSuspended|getCoroutineSuspended(){}[0]

// Targets: [native]
final fun kotlin.native.internal/getNativeNullPtr(): kotlin.native.internal/NativePtr // kotlin.native.internal/getNativeNullPtr|getNativeNullPtr(){}[0]

// Targets: [native]
final fun kotlin.native.internal/getProgressionLast(kotlin/Char, kotlin/Char, kotlin/Int): kotlin/Char // kotlin.native.internal/getProgressionLast|getProgressionLast(kotlin.Char;kotlin.Char;kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.internal/getProgressionLast(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlin.native.internal/getProgressionLast|getProgressionLast(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.internal/getProgressionLast(kotlin/Long, kotlin/Long, kotlin/Long): kotlin/Long // kotlin.native.internal/getProgressionLast|getProgressionLast(kotlin.Long;kotlin.Long;kotlin.Long){}[0]

// Targets: [native]
final fun kotlin.native.internal/ieee754Equals(kotlin/Double, kotlin/Double): kotlin/Boolean // kotlin.native.internal/ieee754Equals|ieee754Equals(kotlin.Double;kotlin.Double){}[0]

// Targets: [native]
final fun kotlin.native.internal/ieee754Equals(kotlin/Float, kotlin/Float): kotlin/Boolean // kotlin.native.internal/ieee754Equals|ieee754Equals(kotlin.Float;kotlin.Float){}[0]

// Targets: [native]
final fun kotlin.native.internal/immutableBlobOfImpl(kotlin/String): kotlin.native/ImmutableBlob // kotlin.native.internal/immutableBlobOfImpl|immutableBlobOfImpl(kotlin.String){}[0]

// Targets: [native]
final fun kotlin.native.internal/inBooleanBoxCache(kotlin/Boolean): kotlin/Boolean // kotlin.native.internal/inBooleanBoxCache|inBooleanBoxCache(kotlin.Boolean){}[0]

// Targets: [native]
final fun kotlin.native.internal/inByteBoxCache(kotlin/Byte): kotlin/Boolean // kotlin.native.internal/inByteBoxCache|inByteBoxCache(kotlin.Byte){}[0]

// Targets: [native]
final fun kotlin.native.internal/inCharBoxCache(kotlin/Char): kotlin/Boolean // kotlin.native.internal/inCharBoxCache|inCharBoxCache(kotlin.Char){}[0]

// Targets: [native]
final fun kotlin.native.internal/inIntBoxCache(kotlin/Int): kotlin/Boolean // kotlin.native.internal/inIntBoxCache|inIntBoxCache(kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.native.internal/inLongBoxCache(kotlin/Long): kotlin/Boolean // kotlin.native.internal/inLongBoxCache|inLongBoxCache(kotlin.Long){}[0]

// Targets: [native]
final fun kotlin.native.internal/inShortBoxCache(kotlin/Short): kotlin/Boolean // kotlin.native.internal/inShortBoxCache|inShortBoxCache(kotlin.Short){}[0]

// Targets: [native]
final fun kotlin.native.internal/initInstance(kotlin/Any, kotlin/Any) // kotlin.native.internal/initInstance|initInstance(kotlin.Any;kotlin.Any){}[0]

// Targets: [native]
final fun kotlin.native.internal/interceptedContinuation(kotlin.coroutines/Continuation<kotlin/Any?>): kotlin.coroutines/Continuation<kotlin/Any?> // kotlin.native.internal/interceptedContinuation|interceptedContinuation(kotlin.coroutines.Continuation<kotlin.Any?>){}[0]

// Targets: [native]
final fun kotlin.native.internal/performGCOnCleanerWorker() // kotlin.native.internal/performGCOnCleanerWorker|performGCOnCleanerWorker(){}[0]

// Targets: [native]
final fun kotlin.native.internal/restoreCoroutineState() // kotlin.native.internal/restoreCoroutineState|restoreCoroutineState(){}[0]

// Targets: [native]
final fun kotlin.native.internal/resumeContinuation(kotlin.coroutines/Continuation<kotlin/Any?>, kotlin/Any?) // kotlin.native.internal/resumeContinuation|resumeContinuation(kotlin.coroutines.Continuation<kotlin.Any?>;kotlin.Any?){}[0]

// Targets: [native]
final fun kotlin.native.internal/resumeContinuationWithException(kotlin.coroutines/Continuation<kotlin/Any?>, kotlin/Throwable) // kotlin.native.internal/resumeContinuationWithException|resumeContinuationWithException(kotlin.coroutines.Continuation<kotlin.Any?>;kotlin.Throwable){}[0]

// Targets: [native]
final fun kotlin.native.internal/saveCoroutineState() // kotlin.native.internal/saveCoroutineState|saveCoroutineState(){}[0]

// Targets: [native]
final fun kotlin.native.internal/trapOnUndeclaredException(kotlin/Throwable) // kotlin.native.internal/trapOnUndeclaredException|trapOnUndeclaredException(kotlin.Throwable){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxBoolean(kotlin/Boolean?): kotlin/Boolean // kotlin.native.internal/unboxBoolean|unboxBoolean(kotlin.Boolean?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxByte(kotlin/Byte?): kotlin/Byte // kotlin.native.internal/unboxByte|unboxByte(kotlin.Byte?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxChar(kotlin/Char?): kotlin/Char // kotlin.native.internal/unboxChar|unboxChar(kotlin.Char?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxDouble(kotlin/Double?): kotlin/Double // kotlin.native.internal/unboxDouble|unboxDouble(kotlin.Double?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxFloat(kotlin/Float?): kotlin/Float // kotlin.native.internal/unboxFloat|unboxFloat(kotlin.Float?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxInt(kotlin/Int?): kotlin/Int // kotlin.native.internal/unboxInt|unboxInt(kotlin.Int?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxLong(kotlin/Long?): kotlin/Long // kotlin.native.internal/unboxLong|unboxLong(kotlin.Long?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxShort(kotlin/Short?): kotlin/Short // kotlin.native.internal/unboxShort|unboxShort(kotlin.Short?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxUByte(kotlin/UByte?): kotlin/UByte // kotlin.native.internal/unboxUByte|unboxUByte(kotlin.UByte?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxUInt(kotlin/UInt?): kotlin/UInt // kotlin.native.internal/unboxUInt|unboxUInt(kotlin.UInt?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxULong(kotlin/ULong?): kotlin/ULong // kotlin.native.internal/unboxULong|unboxULong(kotlin.ULong?){}[0]

// Targets: [native]
final fun kotlin.native.internal/unboxUShort(kotlin/UShort?): kotlin/UShort // kotlin.native.internal/unboxUShort|unboxUShort(kotlin.UShort?){}[0]

// Targets: [native]
final fun kotlin.native.internal/waitCleanerWorker() // kotlin.native.internal/waitCleanerWorker|waitCleanerWorker(){}[0]

// Targets: [native]
final fun kotlin.native/getUnhandledExceptionHook(): kotlin/Function1<kotlin/Throwable, kotlin/Unit>? // kotlin.native/getUnhandledExceptionHook|getUnhandledExceptionHook(){}[0]

// Targets: [native]
final fun kotlin.native/immutableBlobOf(kotlin/ShortArray...): kotlin.native/ImmutableBlob // kotlin.native/immutableBlobOf|immutableBlobOf(kotlin.ShortArray...){}[0]

// Targets: [native]
final fun kotlin.native/initRuntimeIfNeeded() // kotlin.native/initRuntimeIfNeeded|initRuntimeIfNeeded(){}[0]

// Targets: [native]
final fun kotlin.native/isExperimentalMM(): kotlin/Boolean // kotlin.native/isExperimentalMM|isExperimentalMM(){}[0]

// Targets: [native]
final fun kotlin.native/processUnhandledException(kotlin/Throwable) // kotlin.native/processUnhandledException|processUnhandledException(kotlin.Throwable){}[0]

// Targets: [native]
final fun kotlin.native/setUnhandledExceptionHook(kotlin/Function1<kotlin/Throwable, kotlin/Unit>?): kotlin/Function1<kotlin/Throwable, kotlin/Unit>? // kotlin.native/setUnhandledExceptionHook|setUnhandledExceptionHook(kotlin.Function1<kotlin.Throwable,kotlin.Unit>?){}[0]

// Targets: [native]
final fun kotlin.native/terminateWithUnhandledException(kotlin/Throwable): kotlin/Nothing // kotlin.native/terminateWithUnhandledException|terminateWithUnhandledException(kotlin.Throwable){}[0]

// Targets: [native]
final fun kotlin.native/vectorOf(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): kotlinx.cinterop/Vector128 // kotlin.native/vectorOf|vectorOf(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

// Targets: [native]
final fun kotlin.native/vectorOf(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.cinterop/Vector128 // kotlin.native/vectorOf|vectorOf(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.system/exitProcess(kotlin/Int): kotlin/Nothing // kotlin.system/exitProcess|exitProcess(kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.system/getTimeMicros(): kotlin/Long // kotlin.system/getTimeMicros|getTimeMicros(){}[0]

// Targets: [native]
final fun kotlin.system/getTimeMillis(): kotlin/Long // kotlin.system/getTimeMillis|getTimeMillis(){}[0]

// Targets: [native]
final fun kotlin.system/getTimeNanos(): kotlin/Long // kotlin.system/getTimeNanos|getTimeNanos(){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin.ranges/CharRange, kotlin/Char, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ranges.CharRange;kotlin.Char;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin.ranges/IntRange, kotlin/Int, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ranges.IntRange;kotlin.Int;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin.ranges/LongRange, kotlin/Long, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ranges.LongRange;kotlin.Long;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin.ranges/UIntRange, kotlin/UInt, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ranges.UIntRange;kotlin.UInt;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin.ranges/ULongRange, kotlin/ULong, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ranges.ULongRange;kotlin.ULong;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/BooleanArray, kotlin/Boolean, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.BooleanArray;kotlin.Boolean;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/ByteArray, kotlin/Byte, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ByteArray;kotlin.Byte;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/CharArray, kotlin/Char, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.CharArray;kotlin.Char;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/CharSequence, kotlin.text/Regex, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.CharSequence;kotlin.text.Regex;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/CharSequence, kotlin/Char, kotlin/Boolean = ..., kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.CharSequence;kotlin.Char;kotlin.Boolean;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/CharSequence, kotlin/CharSequence, kotlin/Boolean = ..., kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.CharSequence;kotlin.CharSequence;kotlin.Boolean;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/IntArray, kotlin/Int, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.IntArray;kotlin.Int;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/LongArray, kotlin/Long, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.LongArray;kotlin.Long;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/ShortArray, kotlin/Short, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ShortArray;kotlin.Short;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/UByteArray, kotlin/UByte, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.UByteArray;kotlin.UByte;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/UIntArray, kotlin/UInt, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.UIntArray;kotlin.UInt;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/ULongArray, kotlin/ULong, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.ULongArray;kotlin.ULong;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContains(kotlin/UShortArray, kotlin/UShort, kotlin/String? = ...) // kotlin.test/assertContains|assertContains(kotlin.UShortArray;kotlin.UShort;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/BooleanArray?, kotlin/BooleanArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.BooleanArray?;kotlin.BooleanArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/ByteArray?, kotlin/ByteArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.ByteArray?;kotlin.ByteArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/CharArray?, kotlin/CharArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.CharArray?;kotlin.CharArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/DoubleArray?, kotlin/DoubleArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.DoubleArray?;kotlin.DoubleArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/FloatArray?, kotlin/FloatArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.FloatArray?;kotlin.FloatArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/IntArray?, kotlin/IntArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.IntArray?;kotlin.IntArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/LongArray?, kotlin/LongArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.LongArray?;kotlin.LongArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/ShortArray?, kotlin/ShortArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.ShortArray?;kotlin.ShortArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/UByteArray?, kotlin/UByteArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.UByteArray?;kotlin.UByteArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/UIntArray?, kotlin/UIntArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.UIntArray?;kotlin.UIntArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/ULongArray?, kotlin/ULongArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.ULongArray?;kotlin.ULongArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertContentEquals(kotlin/UShortArray?, kotlin/UShortArray?, kotlin/String? = ...) // kotlin.test/assertContentEquals|assertContentEquals(kotlin.UShortArray?;kotlin.UShortArray?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertEquals(kotlin/Double, kotlin/Double, kotlin/Double, kotlin/String? = ...) // kotlin.test/assertEquals|assertEquals(kotlin.Double;kotlin.Double;kotlin.Double;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertEquals(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/String? = ...) // kotlin.test/assertEquals|assertEquals(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertFalse(kotlin/Boolean, kotlin/String? = ...) // kotlin.test/assertFalse|assertFalse(kotlin.Boolean;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertIsNotOfType(kotlin/Any?, kotlin.reflect/KType, kotlin/Boolean, kotlin/String?) // kotlin.test/assertIsNotOfType|assertIsNotOfType(kotlin.Any?;kotlin.reflect.KType;kotlin.Boolean;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertIsOfType(kotlin/Any?, kotlin.reflect/KType, kotlin/Boolean, kotlin/String?) // kotlin.test/assertIsOfType|assertIsOfType(kotlin.Any?;kotlin.reflect.KType;kotlin.Boolean;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertNotEquals(kotlin/Double, kotlin/Double, kotlin/Double, kotlin/String? = ...) // kotlin.test/assertNotEquals|assertNotEquals(kotlin.Double;kotlin.Double;kotlin.Double;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertNotEquals(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/String? = ...) // kotlin.test/assertNotEquals|assertNotEquals(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertNull(kotlin/Any?, kotlin/String? = ...) // kotlin.test/assertNull|assertNull(kotlin.Any?;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/assertTrue(kotlin/Boolean, kotlin/String? = ...) // kotlin.test/assertTrue|assertTrue(kotlin.Boolean;kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/checkResultIsFailure(kotlin/String?, kotlin/Result<kotlin/Unit>): kotlin/Throwable // kotlin.test/checkResultIsFailure|checkResultIsFailure(kotlin.String?;kotlin.Result<kotlin.Unit>){}[0]

// Targets: [native]
final fun kotlin.test/fail(kotlin/String? = ...): kotlin/Nothing // kotlin.test/fail|fail(kotlin.String?){}[0]

// Targets: [native]
final fun kotlin.test/fail(kotlin/String? = ..., kotlin/Throwable? = ...): kotlin/Nothing // kotlin.test/fail|fail(kotlin.String?;kotlin.Throwable?){}[0]

// Targets: [native]
final fun kotlin.test/overrideAsserter(kotlin.test/Asserter?): kotlin.test/Asserter? // kotlin.test/overrideAsserter|overrideAsserter(kotlin.test.Asserter?){}[0]

// Targets: [native]
final fun kotlin.text/intToString(kotlin/Int, kotlin/Int): kotlin/String // kotlin.text/intToString|intToString(kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlin.text/longToString(kotlin/Long, kotlin/Int): kotlin/String // kotlin.text/longToString|longToString(kotlin.Long;kotlin.Int){}[0]

// Targets: [native]
final fun kotlin/fromBits(kotlin/Int): kotlin/Float // kotlin/fromBits|fromBits(kotlin.Int){}[0]

// Targets: [native]
final fun kotlin/fromBits(kotlin/Long): kotlin/Double // kotlin/fromBits|fromBits(kotlin.Long){}[0]

// Targets: [native]
final fun kotlinx.cinterop.internal/detachObjCObject(kotlinx.cinterop/ObjCObject) // kotlinx.cinterop.internal/detachObjCObject|detachObjCObject(kotlinx.cinterop.ObjCObject){}[0]

// Targets: [native]
final fun kotlinx.cinterop/CreateKStringFromNSString(kotlin.native.internal/NativePtr): kotlin/String? // kotlinx.cinterop/CreateKStringFromNSString|CreateKStringFromNSString(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/CreateNSStringFromKString(kotlin/String?): kotlin.native.internal/NativePtr // kotlinx.cinterop/CreateNSStringFromKString|CreateNSStringFromKString(kotlin.String?){}[0]

// Targets: [native]
final fun kotlinx.cinterop/bitsToDouble(kotlin/Long): kotlin/Double // kotlinx.cinterop/bitsToDouble|bitsToDouble(kotlin.Long){}[0]

// Targets: [native]
final fun kotlinx.cinterop/bitsToFloat(kotlin/Int): kotlin/Float // kotlinx.cinterop/bitsToFloat|bitsToFloat(kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/ByteArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/ByteVarOf<kotlin/Byte>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.ByteArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/DoubleArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/DoubleVarOf<kotlin/Double>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.DoubleArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/FloatArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/FloatVarOf<kotlin/Float>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.FloatArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/IntArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/IntVarOf<kotlin/Int>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.IntArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/LongArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/LongVarOf<kotlin/Long>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.LongArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/ShortArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/ShortVarOf<kotlin/Short>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.ShortArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/UByteArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/UByteVarOf<kotlin/UByte>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.UByteArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/UIntArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/UIntVarOf<kotlin/UInt>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.UIntArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/ULongArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/ULongVarOf<kotlin/ULong>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.ULongArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/cValuesOf(kotlin/UShortArray...): kotlinx.cinterop/CValues<kotlinx.cinterop/UShortVarOf<kotlin/UShort>> // kotlinx.cinterop/cValuesOf|cValuesOf(kotlin.UShortArray...){}[0]

// Targets: [native]
final fun kotlinx.cinterop/createKotlinObjectHolder(kotlin/Any?): kotlin.native.internal/NativePtr // kotlinx.cinterop/createKotlinObjectHolder|createKotlinObjectHolder(kotlin.Any?){}[0]

// Targets: [native]
final fun kotlinx.cinterop/createObjCObjectHolder(kotlin.native.internal/NativePtr): kotlin/Any? // kotlinx.cinterop/createObjCObjectHolder|createObjCObjectHolder(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/createObjCSuperStruct(kotlin.native.internal/NativePtr, kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlinx.cinterop/createObjCSuperStruct|createObjCSuperStruct(kotlin.native.internal.NativePtr;kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/derefStablePointer(kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>): kotlin/Any // kotlinx.cinterop/derefStablePointer|derefStablePointer(kotlinx.cinterop.CPointer<out|kotlinx.cinterop.CPointed>){}[0]

// Targets: [native]
final fun kotlinx.cinterop/getMessenger(kotlin.native.internal/NativePtr): kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>? // kotlinx.cinterop/getMessenger|getMessenger(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/getMessengerStret(kotlin.native.internal/NativePtr): kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed>? // kotlinx.cinterop/getMessengerStret|getMessengerStret(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/getOriginalKotlinClass(kotlinx.cinterop/ObjCClass): kotlin.reflect/KClass<*>? // kotlinx.cinterop/getOriginalKotlinClass|getOriginalKotlinClass(kotlinx.cinterop.ObjCClass){}[0]

// Targets: [native]
final fun kotlinx.cinterop/getOriginalKotlinClass(kotlinx.cinterop/ObjCProtocol): kotlin.reflect/KClass<*>? // kotlinx.cinterop/getOriginalKotlinClass|getOriginalKotlinClass(kotlinx.cinterop.ObjCProtocol){}[0]

// Targets: [native]
final fun kotlinx.cinterop/getPointerSize(): kotlin/Int // kotlinx.cinterop/getPointerSize|getPointerSize(){}[0]

// Targets: [native]
final fun kotlinx.cinterop/interpretNullableOpaquePointed(kotlin.native.internal/NativePtr): kotlinx.cinterop/NativePointed? // kotlinx.cinterop/interpretNullableOpaquePointed|interpretNullableOpaquePointed(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/interpretOpaquePointed(kotlin.native.internal/NativePtr): kotlinx.cinterop/NativePointed // kotlinx.cinterop/interpretOpaquePointed|interpretOpaquePointed(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/objCGetSelector(kotlin/String): kotlinx.cinterop/CPointer<out kotlinx.cinterop/CPointed> // kotlinx.cinterop/objCGetSelector|objCGetSelector(kotlin.String){}[0]

// Targets: [native]
final fun kotlinx.cinterop/objc_autoreleasePoolPop(kotlin.native.internal/NativePtr) // kotlinx.cinterop/objc_autoreleasePoolPop|objc_autoreleasePoolPop(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/objc_autoreleasePoolPush(): kotlin.native.internal/NativePtr // kotlinx.cinterop/objc_autoreleasePoolPush|objc_autoreleasePoolPush(){}[0]

// Targets: [native]
final fun kotlinx.cinterop/objc_release(kotlin.native.internal/NativePtr) // kotlinx.cinterop/objc_release|objc_release(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/objc_retain(kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlinx.cinterop/objc_retain|objc_retain(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/objc_retainAutoreleaseReturnValue(kotlin.native.internal/NativePtr): kotlin.native.internal/NativePtr // kotlinx.cinterop/objc_retainAutoreleaseReturnValue|objc_retainAutoreleaseReturnValue(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/optional(): kotlin/Nothing // kotlinx.cinterop/optional|optional(){}[0]

// Targets: [native]
final fun kotlinx.cinterop/readBits(kotlin.native.internal/NativePtr, kotlin/Long, kotlin/Int, kotlin/Boolean): kotlin/Long // kotlinx.cinterop/readBits|readBits(kotlin.native.internal.NativePtr;kotlin.Long;kotlin.Int;kotlin.Boolean){}[0]

// Targets: [native]
final fun kotlinx.cinterop/unwrapKotlinObjectHolderImpl(kotlin.native.internal/NativePtr): kotlin/Any // kotlinx.cinterop/unwrapKotlinObjectHolderImpl|unwrapKotlinObjectHolderImpl(kotlin.native.internal.NativePtr){}[0]

// Targets: [native]
final fun kotlinx.cinterop/vectorOf(kotlin/Float, kotlin/Float, kotlin/Float, kotlin/Float): kotlinx.cinterop/Vector128 // kotlinx.cinterop/vectorOf|vectorOf(kotlin.Float;kotlin.Float;kotlin.Float;kotlin.Float){}[0]

// Targets: [native]
final fun kotlinx.cinterop/vectorOf(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlinx.cinterop/Vector128 // kotlinx.cinterop/vectorOf|vectorOf(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.cinterop/writeBits(kotlin.native.internal/NativePtr, kotlin/Long, kotlin/Int, kotlin/Long) // kotlinx.cinterop/writeBits|writeBits(kotlin.native.internal.NativePtr;kotlin.Long;kotlin.Int;kotlin.Long){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/Konan_js_getProperty(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlinx.wasm.jsinterop/Konan_js_getProperty|Konan_js_getProperty(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/ReturnSlot_getDouble(): kotlin/Double // kotlinx.wasm.jsinterop/ReturnSlot_getDouble|ReturnSlot_getDouble(){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/allocateArena(): kotlin/Int // kotlinx.wasm.jsinterop/allocateArena|allocateArena(){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/doubleLower(kotlin/Double): kotlin/Int // kotlinx.wasm.jsinterop/doubleLower|doubleLower(kotlin.Double){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/doubleUpper(kotlin/Double): kotlin/Int // kotlinx.wasm.jsinterop/doubleUpper|doubleUpper(kotlin.Double){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/freeArena(kotlin/Int) // kotlinx.wasm.jsinterop/freeArena|freeArena(kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/getInt(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlinx.wasm.jsinterop/getInt|getInt(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/pushIntToArena(kotlin/Int, kotlin/Int) // kotlinx.wasm.jsinterop/pushIntToArena|pushIntToArena(kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/runLambda(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Int // kotlinx.wasm.jsinterop/runLambda|runLambda(kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/setFunction(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // kotlinx.wasm.jsinterop/setFunction|setFunction(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/setString(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // kotlinx.wasm.jsinterop/setString|setString(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/setter(kotlinx.wasm.jsinterop/JsValue, kotlin/String, kotlin/Function1<kotlin.collections/ArrayList<kotlinx.wasm.jsinterop/JsValue>, kotlin/Unit>) // kotlinx.wasm.jsinterop/setter|setter(kotlinx.wasm.jsinterop.JsValue;kotlin.String;kotlin.Function1<kotlin.collections.ArrayList<kotlinx.wasm.jsinterop.JsValue>,kotlin.Unit>){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/setter(kotlinx.wasm.jsinterop/JsValue, kotlin/String, kotlin/String) // kotlinx.wasm.jsinterop/setter|setter(kotlinx.wasm.jsinterop.JsValue;kotlin.String;kotlin.String){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/stringLengthBytes(kotlin/String): kotlin/Int // kotlinx.wasm.jsinterop/stringLengthBytes|stringLengthBytes(kotlin.String){}[0]

// Targets: [native]
final fun kotlinx.wasm.jsinterop/stringPointer(kotlin/String): kotlin/Int // kotlinx.wasm.jsinterop/stringPointer|stringPointer(kotlin.String){}[0]

// Targets: [native]
final inline fun (kotlin/Any?).kotlin/toString(): kotlin/String // kotlin/toString|toString@kotlin.Any?(){}[0]

// Targets: [native]
final inline fun (kotlin/Boolean).kotlinx.cinterop/toByte(): kotlin/Byte // kotlinx.cinterop/toByte|toByte@kotlin.Boolean(){}[0]

// Targets: [native]
final inline fun (kotlin/Byte).kotlinx.cinterop/toBoolean(): kotlin/Boolean // kotlinx.cinterop/toBoolean|toBoolean@kotlin.Byte(){}[0]

// Targets: [native]
final inline fun (kotlin/Double).kotlin/toBits(): kotlin/Long // kotlin/toBits|toBits@kotlin.Double(){}[0]

// Targets: [native]
final inline fun (kotlin/Double).kotlin/toRawBits(): kotlin/Long // kotlin/toRawBits|toRawBits@kotlin.Double(){}[0]

// Targets: [native]
final inline fun (kotlin/Float).kotlin/toBits(): kotlin/Int // kotlin/toBits|toBits@kotlin.Float(){}[0]

// Targets: [native]
final inline fun (kotlin/Float).kotlin/toRawBits(): kotlin/Int // kotlin/toRawBits|toRawBits@kotlin.Float(){}[0]

// Targets: [native]
final inline fun (kotlin/Int).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Int(kotlin.Int){}[0]

// Targets: [native]
final inline fun (kotlin/Long).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Long(kotlin.Int){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toByte(): kotlin/Byte // kotlin.text/toByte|toByte@kotlin.String(){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toByte(kotlin/Int): kotlin/Byte // kotlin.text/toByte|toByte@kotlin.String(kotlin.Int){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toInt(): kotlin/Int // kotlin.text/toInt|toInt@kotlin.String(){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toInt(kotlin/Int): kotlin/Int // kotlin.text/toInt|toInt@kotlin.String(kotlin.Int){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toLong(): kotlin/Long // kotlin.text/toLong|toLong@kotlin.String(){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toLong(kotlin/Int): kotlin/Long // kotlin.text/toLong|toLong@kotlin.String(kotlin.Int){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toShort(): kotlin/Short // kotlin.text/toShort|toShort@kotlin.String(){}[0]

// Targets: [native]
final inline fun (kotlin/String).kotlin.text/toShort(kotlin/Int): kotlin/Short // kotlin.text/toShort|toShort@kotlin.String(kotlin.Int){}[0]

// Targets: [native]
final inline fun (kotlin/String?).kotlin.text/toBoolean(): kotlin/Boolean // kotlin.text/toBoolean|toBoolean@kotlin.String?(){}[0]

// Targets: [native]
final inline fun (kotlin/String?).kotlin/plus(kotlin/Any?): kotlin/String // kotlin/plus|plus@kotlin.String?(kotlin.Any?){}[0]

// Targets: [native]
final inline fun (kotlin/Throwable).kotlin/printStackTrace() // kotlin/printStackTrace|printStackTrace@kotlin.Throwable(){}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any, #B: kotlin/Any?> (#A).kotlinx.cinterop/usePinned(kotlin/Function1<kotlinx.cinterop/Pinned<#A>, #B>): #B // kotlinx.cinterop/usePinned|usePinned@0:0(kotlin.Function1<kotlinx.cinterop.Pinned<0:0>,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any, #B: kotlin/Any?> kotlin.test/assertNotNull(#A?, kotlin/String? = ..., kotlin/Function1<#A, #B>) // kotlin.test/assertNotNull|assertNotNull(0:0?;kotlin.String?;kotlin.Function1<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any> (#A).kotlinx.cinterop/pin(): kotlinx.cinterop/Pinned<#A> // kotlinx.cinterop/pin|pin@0:0(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any> kotlinx.cinterop/interpretObjCPointer(kotlin.native.internal/NativePtr): #A // kotlinx.cinterop/interpretObjCPointer|interpretObjCPointer(kotlin.native.internal.NativePtr){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any?> kotlin.native.concurrent/withWorker(kotlin/String? = ..., kotlin/Boolean = ..., kotlin/Function1<kotlin.native.concurrent/Worker, #A>): #A // kotlin.native.concurrent/withWorker|withWorker(kotlin.String?;kotlin.Boolean;kotlin.Function1<kotlin.native.concurrent.Worker,0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any?> kotlin.test/expect(#A, kotlin/Function0<#A>) // kotlin.test/expect|expect(0:0;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any?> kotlin.test/expect(#A, kotlin/String?, kotlin/Function0<#A>) // kotlin.test/expect|expect(0:0;kotlin.String?;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any?> kotlinx.cinterop/autoreleasepool(kotlin/Function0<#A>): #A // kotlinx.cinterop/autoreleasepool|autoreleasepool(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Any?> kotlinx.cinterop/memScoped(kotlin/Function1<kotlinx.cinterop/MemScope, #A>): #A // kotlinx.cinterop/memScoped|memScoped(kotlin.Function1<kotlinx.cinterop.MemScope,0:0>){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Byte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<0:0>>(kotlin.Int){0§<kotlin.Byte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Byte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<0:0>>(kotlin.Long){0§<kotlin.Byte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Byte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.Byte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Byte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ByteVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.Byte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Double> (kotlinx.cinterop/CPointer<kotlinx.cinterop/DoubleVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<0:0>>(kotlin.Int){0§<kotlin.Double>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Double> (kotlinx.cinterop/CPointer<kotlinx.cinterop/DoubleVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<0:0>>(kotlin.Long){0§<kotlin.Double>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Double> (kotlinx.cinterop/CPointer<kotlinx.cinterop/DoubleVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.Double>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Double> (kotlinx.cinterop/CPointer<kotlinx.cinterop/DoubleVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.Double>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Float> (kotlinx.cinterop/CPointer<kotlinx.cinterop/FloatVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<0:0>>(kotlin.Int){0§<kotlin.Float>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Float> (kotlinx.cinterop/CPointer<kotlinx.cinterop/FloatVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<0:0>>(kotlin.Long){0§<kotlin.Float>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Float> (kotlinx.cinterop/CPointer<kotlinx.cinterop/FloatVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.Float>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Float> (kotlinx.cinterop/CPointer<kotlinx.cinterop/FloatVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.Float>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Int> (kotlinx.cinterop/CPointer<kotlinx.cinterop/IntVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<0:0>>(kotlin.Int){0§<kotlin.Int>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Int> (kotlinx.cinterop/CPointer<kotlinx.cinterop/IntVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<0:0>>(kotlin.Long){0§<kotlin.Int>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Int> (kotlinx.cinterop/CPointer<kotlinx.cinterop/IntVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.Int>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Int> (kotlinx.cinterop/CPointer<kotlinx.cinterop/IntVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.Int>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Long> (kotlinx.cinterop/CPointer<kotlinx.cinterop/LongVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<0:0>>(kotlin.Int){0§<kotlin.Long>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Long> (kotlinx.cinterop/CPointer<kotlinx.cinterop/LongVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<0:0>>(kotlin.Long){0§<kotlin.Long>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Long> (kotlinx.cinterop/CPointer<kotlinx.cinterop/LongVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.Long>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Long> (kotlinx.cinterop/CPointer<kotlinx.cinterop/LongVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.Long>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Short> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ShortVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<0:0>>(kotlin.Int){0§<kotlin.Short>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Short> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ShortVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<0:0>>(kotlin.Long){0§<kotlin.Short>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Short> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ShortVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.Short>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Short> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ShortVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.Short>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Throwable> kotlin.test/assertFailsWith(kotlin.reflect/KClass<#A>, kotlin/Function0<kotlin/Unit>): #A // kotlin.test/assertFailsWith|assertFailsWith(kotlin.reflect.KClass<0:0>;kotlin.Function0<kotlin.Unit>){0§<kotlin.Throwable>}[0]

// Targets: [native]
final inline fun <#A: kotlin/Throwable> kotlin.test/assertFailsWith(kotlin.reflect/KClass<#A>, kotlin/String?, kotlin/Function0<kotlin/Unit>): #A // kotlin.test/assertFailsWith|assertFailsWith(kotlin.reflect.KClass<0:0>;kotlin.String?;kotlin.Function0<kotlin.Unit>){0§<kotlin.Throwable>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UByte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UByteVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<0:0>>(kotlin.Int){0§<kotlin.UByte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UByte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UByteVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<0:0>>(kotlin.Long){0§<kotlin.UByte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UByte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UByteVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.UByte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UByte> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UByteVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.UByte>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UInt> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UIntVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<0:0>>(kotlin.Int){0§<kotlin.UInt>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UInt> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UIntVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<0:0>>(kotlin.Long){0§<kotlin.UInt>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UInt> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UIntVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.UInt>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UInt> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UIntVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.UInt>}[0]

// Targets: [native]
final inline fun <#A: kotlin/ULong> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ULongVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<0:0>>(kotlin.Int){0§<kotlin.ULong>}[0]

// Targets: [native]
final inline fun <#A: kotlin/ULong> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ULongVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<0:0>>(kotlin.Long){0§<kotlin.ULong>}[0]

// Targets: [native]
final inline fun <#A: kotlin/ULong> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ULongVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.ULong>}[0]

// Targets: [native]
final inline fun <#A: kotlin/ULong> (kotlinx.cinterop/CPointer<kotlinx.cinterop/ULongVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.ULong>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UShort> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UShortVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<0:0>>(kotlin.Int){0§<kotlin.UShort>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UShort> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UShortVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<0:0>>(kotlin.Long){0§<kotlin.UShort>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UShort> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UShortVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<0:0>>(kotlin.Int;0:0){0§<kotlin.UShort>}[0]

// Targets: [native]
final inline fun <#A: kotlin/UShort> (kotlinx.cinterop/CPointer<kotlinx.cinterop/UShortVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<0:0>>(kotlin.Long;0:0){0§<kotlin.UShort>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/ByteVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.ByteVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/ByteVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.ByteVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<#A>>).kotlinx.cinterop/get(kotlin/Int): #A? // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<0:0>>(kotlin.Int){0§<kotlinx.cinterop.CPointer<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<#A>>).kotlinx.cinterop/get(kotlin/Long): #A? // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<0:0>>(kotlin.Long){0§<kotlinx.cinterop.CPointer<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<#A>>).kotlinx.cinterop/set(kotlin/Int, #A?) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<0:0>>(kotlin.Int;0:0?){0§<kotlinx.cinterop.CPointer<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<#A>>).kotlinx.cinterop/set(kotlin/Long, #A?) // kotlinx.cinterop/set|set@kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<0:0>>(kotlin.Long;0:0?){0§<kotlinx.cinterop.CPointer<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/CPointerVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.CPointerVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/CPointerVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.CPointerVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/CVariable> kotlinx.cinterop/zeroValue(kotlin/Int, kotlin/Int): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/zeroValue|zeroValue(kotlin.Int;kotlin.Int){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/DoubleVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.DoubleVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/DoubleVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.DoubleVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/FloatVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.FloatVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/FloatVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.FloatVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/IntVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.IntVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/IntVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.IntVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/LongVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.LongVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/LongVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.LongVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/ShortVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.ShortVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/ShortVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.ShortVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/UByteVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.UByteVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/UByteVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.UByteVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/UIntVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.UIntVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/UIntVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.UIntVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/ULongVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.ULongVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/ULongVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.ULongVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/UShortVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Int): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Int){0§<kotlinx.cinterop.UShortVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: kotlinx.cinterop/UShortVarOf<*>> (kotlinx.cinterop/CPointer<#A>?).kotlinx.cinterop/plus(kotlin/Long): kotlinx.cinterop/CPointer<#A>? // kotlinx.cinterop/plus|plus@kotlinx.cinterop.CPointer<0:0>?(kotlin.Long){0§<kotlinx.cinterop.UShortVarOf<*>>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/Byte).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.Byte(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/Int).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.Int(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/Long).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.Long(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/Short).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.Short(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/UByte).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.UByte(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/UInt).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.UInt(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/ULong).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.ULong(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlin/UShort).kotlinx.cinterop/convert(): #A // kotlinx.cinterop/convert|convert@kotlin.UShort(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> (kotlinx.cinterop/CPointer<*>).kotlinx.cinterop/asStableRef(): kotlinx.cinterop/StableRef<#A> // kotlinx.cinterop/asStableRef|asStableRef@kotlinx.cinterop.CPointer<*>(){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any> kotlinx.cinterop/unwrapKotlinObjectHolder(kotlin/Any?): #A // kotlinx.cinterop/unwrapKotlinObjectHolder|unwrapKotlinObjectHolder(kotlin.Any?){0§<kotlin.Any>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/toTypedArray(): kotlin/Array<#A> // kotlin.collections/toTypedArray|toTypedArray@kotlin.collections.Collection<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any?> (kotlin.native.concurrent/DetachedObjectGraph<#A>).kotlin.native.concurrent/attach(): #A // kotlin.native.concurrent/attach|attach@kotlin.native.concurrent.DetachedObjectGraph<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any?> kotlin.test/assertIs(kotlin/Any?, kotlin/String? = ...): #A // kotlin.test/assertIs|assertIs(kotlin.Any?;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Any?> kotlin.test/assertIsNot(kotlin/Any?, kotlin/String? = ...) // kotlin.test/assertIsNot|assertIsNot(kotlin.Any?;kotlin.String?){0§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Number> (kotlin/Number).kotlinx.cinterop/narrow(): #A // kotlinx.cinterop/narrow|narrow@kotlin.Number(){0§<kotlin.Number>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Number> (kotlin/Number).kotlinx.cinterop/signExtend(): #A // kotlinx.cinterop/signExtend|signExtend@kotlin.Number(){0§<kotlin.Number>}[0]

// Targets: [native]
final inline fun <#A: reified kotlin/Throwable> kotlin.test/assertFailsWith(kotlin/String? = ..., kotlin/Function0<kotlin/Unit>): #A // kotlin.test/assertFailsWith|assertFailsWith(kotlin.String?;kotlin.Function0<kotlin.Unit>){0§<kotlin.Throwable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CPointed> (kotlinx.cinterop/CStructVar).kotlinx.cinterop/memberAt(kotlin/Long): #A // kotlinx.cinterop/memberAt|memberAt@kotlinx.cinterop.CStructVar(kotlin.Long){0§<kotlinx.cinterop.CPointed>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArrayOf(kotlin.collections/List<#A?>): kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<#A>> // kotlinx.cinterop/allocArrayOf|allocArrayOf@kotlinx.cinterop.NativePlacement(kotlin.collections.List<0:0?>){0§<kotlinx.cinterop.CPointer<*>>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CPointer<*>> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArrayOf(kotlin/Array<out #A?>...): kotlinx.cinterop/CPointer<kotlinx.cinterop/CPointerVarOf<#A>> // kotlinx.cinterop/allocArrayOf|allocArrayOf@kotlinx.cinterop.NativePlacement(kotlin.Array<out|0:0?>...){0§<kotlinx.cinterop.CPointer<*>>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CStructVar, #B: kotlin/Any?> (kotlinx.cinterop/CValue<#A>).kotlinx.cinterop/useContents(kotlin/Function1<#A, #B>): #B // kotlinx.cinterop/useContents|useContents@kotlinx.cinterop.CValue<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlinx.cinterop.CStructVar>;1§<kotlin.Any?>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CStructVar> (#A).kotlinx.cinterop/readValue(): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/readValue|readValue@0:0(){0§<kotlinx.cinterop.CStructVar>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CStructVar> (kotlinx.cinterop/CValue<#A>).kotlinx.cinterop/copy(kotlin/Function1<#A, kotlin/Unit>): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/copy|copy@kotlinx.cinterop.CValue<0:0>(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlinx.cinterop.CStructVar>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CStructVar> kotlinx.cinterop/cValue(kotlin/Function1<#A, kotlin/Unit>): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/cValue|cValue(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlinx.cinterop.CStructVar>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (#A).kotlinx.cinterop/readValues(kotlin/Int): kotlinx.cinterop/CValues<#A> // kotlinx.cinterop/readValues|readValues@0:0(kotlin.Int){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/CPointer<#A>).kotlinx.cinterop/get(kotlin/Int): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<0:0>(kotlin.Int){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/CPointer<#A>).kotlinx.cinterop/get(kotlin/Long): #A // kotlinx.cinterop/get|get@kotlinx.cinterop.CPointer<0:0>(kotlin.Long){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/CStructVar).kotlinx.cinterop/arrayMemberAt(kotlin/Long): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/arrayMemberAt|arrayMemberAt@kotlinx.cinterop.CStructVar(kotlin.Long){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(): #A // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/alloc(kotlin/Function1<#A, kotlin/Unit>): #A // kotlinx.cinterop/alloc|alloc@kotlinx.cinterop.NativePlacement(kotlin.Function1<0:0,kotlin.Unit>){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArray(kotlin/Int): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/allocArray|allocArray@kotlinx.cinterop.NativePlacement(kotlin.Int){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArray(kotlin/Int, kotlin/Function2<#A, kotlin/Int, kotlin/Unit>): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/allocArray|allocArray@kotlinx.cinterop.NativePlacement(kotlin.Int;kotlin.Function2<0:0,kotlin.Int,kotlin.Unit>){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArray(kotlin/Long): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/allocArray|allocArray@kotlinx.cinterop.NativePlacement(kotlin.Long){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> (kotlinx.cinterop/NativePlacement).kotlinx.cinterop/allocArray(kotlin/Long, kotlin/Function2<#A, kotlin/Long, kotlin/Unit>): kotlinx.cinterop/CPointer<#A> // kotlinx.cinterop/allocArray|allocArray@kotlinx.cinterop.NativePlacement(kotlin.Long;kotlin.Function2<0:0,kotlin.Long,kotlin.Unit>){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> kotlinx.cinterop/alignOf(): kotlin/Int // kotlinx.cinterop/alignOf|alignOf(){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> kotlinx.cinterop/cValue(): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/cValue|cValue(){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> kotlinx.cinterop/createValues(kotlin/Int, kotlin/Function2<#A, kotlin/Int, kotlin/Unit>): kotlinx.cinterop/CValues<#A> // kotlinx.cinterop/createValues|createValues(kotlin.Int;kotlin.Function2<0:0,kotlin.Int,kotlin.Unit>){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> kotlinx.cinterop/sizeOf(): kotlin/Long // kotlinx.cinterop/sizeOf|sizeOf(){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/CVariable> kotlinx.cinterop/zeroValue(): kotlinx.cinterop/CValue<#A> // kotlinx.cinterop/zeroValue|zeroValue(){0§<kotlinx.cinterop.CVariable>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/NativePointed> (kotlinx.cinterop/NativePointed).kotlinx.cinterop/reinterpret(): #A // kotlinx.cinterop/reinterpret|reinterpret@kotlinx.cinterop.NativePointed(){0§<kotlinx.cinterop.NativePointed>}[0]

// Targets: [native]
final inline fun <#A: reified kotlinx.cinterop/NativePointed> kotlinx.cinterop/interpretPointed(kotlin.native.internal/NativePtr): #A // kotlinx.cinterop/interpretPointed|interpretPointed(kotlin.native.internal.NativePtr){0§<kotlinx.cinterop.NativePointed>}[0]

// Targets: [native]
final inline fun kotlin.system/measureNanoTime(kotlin/Function0<kotlin/Unit>): kotlin/Long // kotlin.system/measureNanoTime|measureNanoTime(kotlin.Function0<kotlin.Unit>){}[0]

// Targets: [native]
final inline fun kotlin.system/measureTimeMicros(kotlin/Function0<kotlin/Unit>): kotlin/Long // kotlin.system/measureTimeMicros|measureTimeMicros(kotlin.Function0<kotlin.Unit>){}[0]

// Targets: [native]
final inline fun kotlin.system/measureTimeMillis(kotlin/Function0<kotlin/Unit>): kotlin/Long // kotlin.system/measureTimeMillis|measureTimeMillis(kotlin.Function0<kotlin.Unit>){}[0]

// Targets: [native]
final inline fun kotlin.test/assertFails(kotlin/Function0<kotlin/Unit>): kotlin/Throwable // kotlin.test/assertFails|assertFails(kotlin.Function0<kotlin.Unit>){}[0]

// Targets: [native]
final inline fun kotlin.test/assertFails(kotlin/String?, kotlin/Function0<kotlin/Unit>): kotlin/Throwable // kotlin.test/assertFails|assertFails(kotlin.String?;kotlin.Function0<kotlin.Unit>){}[0]

// Targets: [native]
final inline fun kotlin.test/assertFalse(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>) // kotlin.test/assertFalse|assertFalse(kotlin.String?;kotlin.Function0<kotlin.Boolean>){}[0]

// Targets: [native]
final inline fun kotlin.test/assertTrue(kotlin/String? = ..., kotlin/Function0<kotlin/Boolean>) // kotlin.test/assertTrue|assertTrue(kotlin.String?;kotlin.Function0<kotlin.Boolean>){}[0]

// Targets: [native]
final inline fun kotlin.test/todo(kotlin/Function0<kotlin/Unit>) // kotlin.test/todo|todo(kotlin.Function0<kotlin.Unit>){}[0]

// Targets: [native]
final inline fun kotlin/assert(kotlin/Boolean) // kotlin/assert|assert(kotlin.Boolean){}[0]

// Targets: [native]
final inline fun kotlin/assert(kotlin/Boolean, kotlin/Function0<kotlin/Any>) // kotlin/assert|assert(kotlin.Boolean;kotlin.Function0<kotlin.Any>){}[0]

// Targets: [native]
final suspend fun <#A: kotlin/Any?> kotlin.native.internal/returnIfSuspended(kotlin/Any?): #A // kotlin.native.internal/returnIfSuspended|returnIfSuspended(kotlin.Any?){0§<kotlin.Any?>}[0]

// Targets: [native]
final suspend inline fun <#A: kotlin/Any?> kotlin.native.internal/suspendCoroutineUninterceptedOrReturn(crossinline kotlin/Function1<kotlin.coroutines/Continuation<#A>, kotlin/Any?>): #A // kotlin.native.internal/suspendCoroutineUninterceptedOrReturn|suspendCoroutineUninterceptedOrReturn(kotlin.Function1<kotlin.coroutines.Continuation<0:0>,kotlin.Any?>){0§<kotlin.Any?>}[0]

// Targets: [native]
final suspend inline fun kotlin.native.internal/getCoroutineContext(): kotlin.coroutines/CoroutineContext // kotlin.native.internal/getCoroutineContext|getCoroutineContext(){}[0]

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.concurrent/Volatile : kotlin/Annotation { // kotlin.concurrent/Volatile|null[1]
    constructor <init>() // kotlin.concurrent/Volatile.<init>|<init>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native.concurrent/SharedImmutable : kotlin/Annotation { // kotlin.native.concurrent/SharedImmutable|null[1]
    constructor <init>() // kotlin.native.concurrent/SharedImmutable.<init>|<init>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native.concurrent/ThreadLocal : kotlin/Annotation { // kotlin.native.concurrent/ThreadLocal|null[1]
    constructor <init>() // kotlin.native.concurrent/ThreadLocal.<init>|<init>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native/CName : kotlin/Annotation { // kotlin.native/CName|null[1]
    constructor <init>(kotlin/String = ..., kotlin/String = ...) // kotlin.native/CName.<init>|<init>(kotlin.String;kotlin.String){}[1]

    final val externName // kotlin.native/CName.externName|{}externName[1]
        final fun <get-externName>(): kotlin/String // kotlin.native/CName.externName.<get-externName>|<get-externName>(){}[1]
    final val shortName // kotlin.native/CName.shortName|{}shortName[1]
        final fun <get-shortName>(): kotlin/String // kotlin.native/CName.shortName.<get-shortName>|<get-shortName>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native/HiddenFromObjC : kotlin/Annotation { // kotlin.native/HiddenFromObjC|null[1]
    constructor <init>() // kotlin.native/HiddenFromObjC.<init>|<init>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native/HidesFromObjC : kotlin/Annotation { // kotlin.native/HidesFromObjC|null[1]
    constructor <init>() // kotlin.native/HidesFromObjC.<init>|<init>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native/ObjCName : kotlin/Annotation { // kotlin.native/ObjCName|null[1]
    constructor <init>(kotlin/String = ..., kotlin/String = ..., kotlin/Boolean = ...) // kotlin.native/ObjCName.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean){}[1]

    final val exact // kotlin.native/ObjCName.exact|{}exact[1]
        final fun <get-exact>(): kotlin/Boolean // kotlin.native/ObjCName.exact.<get-exact>|<get-exact>(){}[1]
    final val name // kotlin.native/ObjCName.name|{}name[1]
        final fun <get-name>(): kotlin/String // kotlin.native/ObjCName.name.<get-name>|<get-name>(){}[1]
    final val swiftName // kotlin.native/ObjCName.swiftName|{}swiftName[1]
        final fun <get-swiftName>(): kotlin/String // kotlin.native/ObjCName.swiftName.<get-swiftName>|<get-swiftName>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native/RefinesInSwift : kotlin/Annotation { // kotlin.native/RefinesInSwift|null[1]
    constructor <init>() // kotlin.native/RefinesInSwift.<init>|<init>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin.native/ShouldRefineInSwift : kotlin/Annotation { // kotlin.native/ShouldRefineInSwift|null[1]
    constructor <init>() // kotlin.native/ShouldRefineInSwift.<init>|<init>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
open annotation class kotlin/Throws : kotlin/Annotation { // kotlin/Throws|null[1]
    constructor <init>(kotlin/Array<out kotlin.reflect/KClass<out kotlin/Throwable>>...) // kotlin/Throws.<init>|<init>(kotlin.Array<out|kotlin.reflect.KClass<out|kotlin.Throwable>>...){}[1]

    final val exceptionClasses // kotlin/Throws.exceptionClasses|{}exceptionClasses[1]
        final fun <get-exceptionClasses>(): kotlin/Array<out kotlin.reflect/KClass<out kotlin/Throwable>> // kotlin/Throws.exceptionClasses.<get-exceptionClasses>|<get-exceptionClasses>(){}[1]
}

// Targets: [js, wasmJs, wasmWasi]
abstract interface <#A: kotlin/Any> kotlin.reflect/KClass : kotlin.reflect/KClassifier { // kotlin.reflect/KClass|null[0]
    abstract val qualifiedName // kotlin.reflect/KClass.qualifiedName|{}qualifiedName[0]
        abstract fun <get-qualifiedName>(): kotlin/String? // kotlin.reflect/KClass.qualifiedName.<get-qualifiedName>|<get-qualifiedName>(){}[0]
    abstract val simpleName // kotlin.reflect/KClass.simpleName|{}simpleName[0]
        abstract fun <get-simpleName>(): kotlin/String? // kotlin.reflect/KClass.simpleName.<get-simpleName>|<get-simpleName>(){}[0]

    abstract fun equals(kotlin/Any?): kotlin/Boolean // kotlin.reflect/KClass.equals|equals(kotlin.Any?){}[0]
    abstract fun hashCode(): kotlin/Int // kotlin.reflect/KClass.hashCode|hashCode(){}[0]
    abstract fun isInstance(kotlin/Any?): kotlin/Boolean // kotlin.reflect/KClass.isInstance|isInstance(kotlin.Any?){}[0]
}

// Targets: [js, wasmJs, wasmWasi]
abstract interface <#A: out kotlin/Any?> kotlin.reflect/KCallable { // kotlin.reflect/KCallable|null[0]
    abstract val name // kotlin.reflect/KCallable.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // kotlin.reflect/KCallable.name.<get-name>|<get-name>(){}[0]
}

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Any?).kotlin/toString(): kotlin/String // kotlin/toString|toString@kotlin.Any?(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Double).kotlin/toBits(): kotlin/Long // kotlin/toBits|toBits@kotlin.Double(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Double).kotlin/toRawBits(): kotlin/Long // kotlin/toRawBits|toRawBits@kotlin.Double(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin/toBits(): kotlin/Int // kotlin/toBits|toBits@kotlin.Float(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Float).kotlin/toRawBits(): kotlin/Int // kotlin/toRawBits|toRawBits@kotlin.Float(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Int).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Int(kotlin.Int){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Long).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Long(kotlin.Int){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toByte(): kotlin/Byte // kotlin.text/toByte|toByte@kotlin.String(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toByte(kotlin/Int): kotlin/Byte // kotlin.text/toByte|toByte@kotlin.String(kotlin.Int){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toInt(): kotlin/Int // kotlin.text/toInt|toInt@kotlin.String(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toInt(kotlin/Int): kotlin/Int // kotlin.text/toInt|toInt@kotlin.String(kotlin.Int){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toLong(): kotlin/Long // kotlin.text/toLong|toLong@kotlin.String(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toLong(kotlin/Int): kotlin/Long // kotlin.text/toLong|toLong@kotlin.String(kotlin.Int){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toShort(): kotlin/Short // kotlin.text/toShort|toShort@kotlin.String(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/toShort(kotlin/Int): kotlin/Short // kotlin.text/toShort|toShort@kotlin.String(kotlin.Int){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String?).kotlin.text/toBoolean(): kotlin/Boolean // kotlin.text/toBoolean|toBoolean@kotlin.String?(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/String?).kotlin/plus(kotlin/Any?): kotlin/String // kotlin/plus|plus@kotlin.String?(kotlin.Any?){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun (kotlin/Throwable).kotlin/printStackTrace() // kotlin/printStackTrace|printStackTrace@kotlin.Throwable(){}[0]

// Targets: [js, wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> kotlin.collections/copyToArray(kotlin.collections/Collection<#A>): kotlin/Array<#A> // kotlin.collections/copyToArray|copyToArray(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js, wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).kotlin.collections/toTypedArray(): kotlin/Array<#A> // kotlin.collections/toTypedArray|toTypedArray@kotlin.collections.Collection<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [js, wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?> kotlin/emptyArray(): kotlin/Array<#A> // kotlin/emptyArray|emptyArray(){0§<kotlin.Any?>}[0]

// Targets: [js, wasmJs]
open annotation class kotlin.js/JsExport : kotlin/Annotation { // kotlin.js/JsExport|null[0]
    constructor <init>() // kotlin.js/JsExport.<init>|<init>(){}[0]

    open annotation class Ignore : kotlin/Annotation { // kotlin.js/JsExport.Ignore|null[0]
        constructor <init>() // kotlin.js/JsExport.Ignore.<init>|<init>(){}[0]
    }
}

// Targets: [js, wasmJs]
open annotation class kotlin.js/JsModule : kotlin/Annotation { // kotlin.js/JsModule|null[0]
    constructor <init>(kotlin/String) // kotlin.js/JsModule.<init>|<init>(kotlin.String){}[0]

    final val import // kotlin.js/JsModule.import|{}import[0]
        final fun <get-import>(): kotlin/String // kotlin.js/JsModule.import.<get-import>|<get-import>(){}[0]
}

// Targets: [js, wasmJs]
open annotation class kotlin.js/JsName : kotlin/Annotation { // kotlin.js/JsName|null[0]
    constructor <init>(kotlin/String) // kotlin.js/JsName.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin.js/JsName.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.js/JsName.name.<get-name>|<get-name>(){}[0]
}

// Targets: [js, wasmJs]
open annotation class kotlin.js/JsQualifier : kotlin/Annotation { // kotlin.js/JsQualifier|null[0]
    constructor <init>(kotlin/String) // kotlin.js/JsQualifier.<init>|<init>(kotlin.String){}[0]

    final val value // kotlin.js/JsQualifier.value|{}value[0]
        final fun <get-value>(): kotlin/String // kotlin.js/JsQualifier.value.<get-value>|<get-value>(){}[0]
}

// Targets: [js, wasmJs]
final val kotlin.js/definedExternally // kotlin.js/definedExternally|{}definedExternally[0]
    final fun <get-definedExternally>(): kotlin/Nothing // kotlin.js/definedExternally.<get-definedExternally>|<get-definedExternally>(){}[0]

// Targets: [wasmJs, wasmWasi]
open annotation class kotlin.wasm.unsafe/UnsafeWasmMemoryApi : kotlin/Annotation { // kotlin.wasm.unsafe/UnsafeWasmMemoryApi|null[0]
    constructor <init>() // kotlin.wasm.unsafe/UnsafeWasmMemoryApi.<init>|<init>(){}[0]
}

// Targets: [wasmJs, wasmWasi]
open annotation class kotlin.wasm/WasmExport : kotlin/Annotation { // kotlin.wasm/WasmExport|null[0]
    constructor <init>(kotlin/String = ...) // kotlin.wasm/WasmExport.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin.wasm/WasmExport.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.wasm/WasmExport.name.<get-name>|<get-name>(){}[0]
}

// Targets: [wasmJs, wasmWasi]
open annotation class kotlin.wasm/WasmImport : kotlin/Annotation { // kotlin.wasm/WasmImport|null[0]
    constructor <init>(kotlin/String, kotlin/String = ...) // kotlin.wasm/WasmImport.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val module // kotlin.wasm/WasmImport.module|{}module[0]
        final fun <get-module>(): kotlin/String // kotlin.wasm/WasmImport.module.<get-module>|<get-module>(){}[0]
    final val name // kotlin.wasm/WasmImport.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.wasm/WasmImport.name.<get-name>|<get-name>(){}[0]
}

// Targets: [wasmJs, wasmWasi]
open annotation class kotlin/EagerInitialization : kotlin/Annotation { // kotlin/EagerInitialization|null[0]
    constructor <init>() // kotlin/EagerInitialization.<init>|<init>(){}[0]
}

// Targets: [wasmJs, wasmWasi]
abstract class kotlin.wasm.unsafe/MemoryAllocator { // kotlin.wasm.unsafe/MemoryAllocator|null[0]
    constructor <init>() // kotlin.wasm.unsafe/MemoryAllocator.<init>|<init>(){}[0]

    abstract fun allocate(kotlin/Int): kotlin.wasm.unsafe/Pointer // kotlin.wasm.unsafe/MemoryAllocator.allocate|allocate(kotlin.Int){}[0]
}

// Targets: [wasmJs, wasmWasi]
final class kotlin.wasm.unsafe/ScopedMemoryAllocator : kotlin.wasm.unsafe/MemoryAllocator { // kotlin.wasm.unsafe/ScopedMemoryAllocator|null[0]
    constructor <init>(kotlin/Int, kotlin.wasm.unsafe/ScopedMemoryAllocator?) // kotlin.wasm.unsafe/ScopedMemoryAllocator.<init>|<init>(kotlin.Int;kotlin.wasm.unsafe.ScopedMemoryAllocator?){}[0]

    final var parent // kotlin.wasm.unsafe/ScopedMemoryAllocator.parent|{}parent[0]
        final fun <get-parent>(): kotlin.wasm.unsafe/ScopedMemoryAllocator? // kotlin.wasm.unsafe/ScopedMemoryAllocator.parent.<get-parent>|<get-parent>(){}[0]
        final fun <set-parent>(kotlin.wasm.unsafe/ScopedMemoryAllocator?) // kotlin.wasm.unsafe/ScopedMemoryAllocator.parent.<set-parent>|<set-parent>(kotlin.wasm.unsafe.ScopedMemoryAllocator?){}[0]

    final fun allocate(kotlin/Int): kotlin.wasm.unsafe/Pointer // kotlin.wasm.unsafe/ScopedMemoryAllocator.allocate|allocate(kotlin.Int){}[0]
    final fun createChild(): kotlin.wasm.unsafe/ScopedMemoryAllocator // kotlin.wasm.unsafe/ScopedMemoryAllocator.createChild|createChild(){}[0]
    final fun destroy() // kotlin.wasm.unsafe/ScopedMemoryAllocator.destroy|destroy(){}[0]
}

// Targets: [wasmJs, wasmWasi]
final value class kotlin.wasm.unsafe/Pointer { // kotlin.wasm.unsafe/Pointer|null[0]
    constructor <init>(kotlin/UInt) // kotlin.wasm.unsafe/Pointer.<init>|<init>(kotlin.UInt){}[0]

    final val address // kotlin.wasm.unsafe/Pointer.address|{}address[0]
        final fun <get-address>(): kotlin/UInt // kotlin.wasm.unsafe/Pointer.address.<get-address>|<get-address>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotlin.wasm.unsafe/Pointer.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotlin.wasm.unsafe/Pointer.hashCode|hashCode(){}[0]
    final fun loadByte(): kotlin/Byte // kotlin.wasm.unsafe/Pointer.loadByte|loadByte(){}[0]
    final fun loadInt(): kotlin/Int // kotlin.wasm.unsafe/Pointer.loadInt|loadInt(){}[0]
    final fun loadLong(): kotlin/Long // kotlin.wasm.unsafe/Pointer.loadLong|loadLong(){}[0]
    final fun loadShort(): kotlin/Short // kotlin.wasm.unsafe/Pointer.loadShort|loadShort(){}[0]
    final fun minus(kotlin/Int): kotlin.wasm.unsafe/Pointer // kotlin.wasm.unsafe/Pointer.minus|minus(kotlin.Int){}[0]
    final fun minus(kotlin/UInt): kotlin.wasm.unsafe/Pointer // kotlin.wasm.unsafe/Pointer.minus|minus(kotlin.UInt){}[0]
    final fun plus(kotlin/Int): kotlin.wasm.unsafe/Pointer // kotlin.wasm.unsafe/Pointer.plus|plus(kotlin.Int){}[0]
    final fun plus(kotlin/UInt): kotlin.wasm.unsafe/Pointer // kotlin.wasm.unsafe/Pointer.plus|plus(kotlin.UInt){}[0]
    final fun storeByte(kotlin/Byte) // kotlin.wasm.unsafe/Pointer.storeByte|storeByte(kotlin.Byte){}[0]
    final fun storeInt(kotlin/Int) // kotlin.wasm.unsafe/Pointer.storeInt|storeInt(kotlin.Int){}[0]
    final fun storeLong(kotlin/Long) // kotlin.wasm.unsafe/Pointer.storeLong|storeLong(kotlin.Long){}[0]
    final fun storeShort(kotlin/Short) // kotlin.wasm.unsafe/Pointer.storeShort|storeShort(kotlin.Short){}[0]
    final fun toString(): kotlin/String // kotlin.wasm.unsafe/Pointer.toString|toString(){}[0]
}

// Targets: [wasmJs, wasmWasi]
final val kotlin.wasm.internal/EmptyContinuation // kotlin.wasm.internal/EmptyContinuation|{}EmptyContinuation[0]
    final fun <get-EmptyContinuation>(): kotlin.coroutines/Continuation<kotlin/Any?> // kotlin.wasm.internal/EmptyContinuation.<get-EmptyContinuation>|<get-EmptyContinuation>(){}[0]

// Targets: [wasmJs, wasmWasi]
final var kotlin.wasm.unsafe/currentAllocator // kotlin.wasm.unsafe/currentAllocator|{}currentAllocator[0]
    final fun <get-currentAllocator>(): kotlin.wasm.unsafe/ScopedMemoryAllocator? // kotlin.wasm.unsafe/currentAllocator.<get-currentAllocator>|<get-currentAllocator>(){}[0]
    final fun <set-currentAllocator>(kotlin.wasm.unsafe/ScopedMemoryAllocator?) // kotlin.wasm.unsafe/currentAllocator.<set-currentAllocator>|<set-currentAllocator>(kotlin.wasm.unsafe.ScopedMemoryAllocator?){}[0]

// Targets: [wasmJs, wasmWasi]
final fun (kotlin/Byte).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Byte(kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun (kotlin/Double.Companion).kotlin/fromBits(kotlin/Long): kotlin/Double // kotlin/fromBits|fromBits@kotlin.Double.Companion(kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun (kotlin/Float.Companion).kotlin/fromBits(kotlin/Int): kotlin/Float // kotlin/fromBits|fromBits@kotlin.Float.Companion(kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun (kotlin/Short).kotlin.text/toString(kotlin/Int): kotlin/String // kotlin.text/toString|toString@kotlin.Short(kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/substring(kotlin/Int): kotlin/String // kotlin.text/substring|substring@kotlin.String(kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun (kotlin/String).kotlin.text/substring(kotlin/Int, kotlin/Int): kotlin/String // kotlin.text/substring|substring@kotlin.String(kotlin.Int;kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> kotlin.wasm.internal/startCoroutineUninterceptedOrReturnIntrinsic2(kotlin.coroutines/SuspendFunction2<#A, #B, #C>, #A, #B, kotlin.coroutines/Continuation<#C>): kotlin/Any? // kotlin.wasm.internal/startCoroutineUninterceptedOrReturnIntrinsic2|startCoroutineUninterceptedOrReturnIntrinsic2(kotlin.coroutines.SuspendFunction2<0:0,0:1,0:2>;0:0;0:1;kotlin.coroutines.Continuation<0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.wasm.internal/startCoroutineUninterceptedOrReturnIntrinsic1(kotlin.coroutines/SuspendFunction1<#A, #B>, #A, kotlin.coroutines/Continuation<#B>): kotlin/Any? // kotlin.wasm.internal/startCoroutineUninterceptedOrReturnIntrinsic1|startCoroutineUninterceptedOrReturnIntrinsic1(kotlin.coroutines.SuspendFunction1<0:0,0:1>;0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> kotlin.coroutines.intrinsics/createSimpleCoroutineFromSuspendFunction(kotlin.coroutines/Continuation<#A>): kotlin.coroutines/CoroutineImpl // kotlin.coroutines.intrinsics/createSimpleCoroutineFromSuspendFunction|createSimpleCoroutineFromSuspendFunction(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> kotlin.wasm.internal/getContinuation(): kotlin.coroutines/Continuation<#A> // kotlin.wasm.internal/getContinuation|getContinuation(){0§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> kotlin.wasm.internal/interceptContinuationIfNeeded(kotlin.coroutines/CoroutineContext, kotlin.coroutines/Continuation<#A>): kotlin.coroutines/Continuation<#A> // kotlin.wasm.internal/interceptContinuationIfNeeded|interceptContinuationIfNeeded(kotlin.coroutines.CoroutineContext;kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Any?> kotlin.wasm.internal/startCoroutineUninterceptedOrReturnIntrinsic0(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/Continuation<#A>): kotlin/Any? // kotlin.wasm.internal/startCoroutineUninterceptedOrReturnIntrinsic0|startCoroutineUninterceptedOrReturnIntrinsic0(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Enum<#A>> kotlin.wasm.internal/enumValueOfIntrinsic(kotlin/String): #A // kotlin.wasm.internal/enumValueOfIntrinsic|enumValueOfIntrinsic(kotlin.String){0§<kotlin.Enum<0:0>>}[0]

// Targets: [wasmJs, wasmWasi]
final fun <#A: kotlin/Enum<#A>> kotlin.wasm.internal/enumValuesIntrinsic(): kotlin/Array<#A> // kotlin.wasm.internal/enumValuesIntrinsic|enumValuesIntrinsic(){0§<kotlin.Enum<0:0>>}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/findAssociatedObject(kotlin.reflect/KClass<*>, kotlin/Int): kotlin/Any? // kotlin.wasm.internal/findAssociatedObject|findAssociatedObject(kotlin.reflect.KClass<*>;kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/throwUninitializedPropertyAccessException(kotlin/String): kotlin/Nothing // kotlin.wasm.internal/throwUninitializedPropertyAccessException|throwUninitializedPropertyAccessException(kotlin.String){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/unsafeGetScratchRawMemory(): kotlin/Int // kotlin.wasm.internal/unsafeGetScratchRawMemory|unsafeGetScratchRawMemory(){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_i32_compareTo(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.wasm.internal/wasm_i32_compareTo|wasm_i32_compareTo(kotlin.Int;kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_i64_compareTo(kotlin/Long, kotlin/Long): kotlin/Int // kotlin.wasm.internal/wasm_i64_compareTo|wasm_i64_compareTo(kotlin.Long;kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_i64_ctz(kotlin/Long): kotlin/Long // kotlin.wasm.internal/wasm_i64_ctz|wasm_i64_ctz(kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_i64_popcnt(kotlin/Long): kotlin/Long // kotlin.wasm.internal/wasm_i64_popcnt|wasm_i64_popcnt(kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_i64_shl(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.wasm.internal/wasm_i64_shl|wasm_i64_shl(kotlin.Long;kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_i64_shr_s(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.wasm.internal/wasm_i64_shr_s|wasm_i64_shr_s(kotlin.Long;kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_i64_shr_u(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.wasm.internal/wasm_i64_shr_u|wasm_i64_shr_u(kotlin.Long;kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_u32_compareTo(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.wasm.internal/wasm_u32_compareTo|wasm_u32_compareTo(kotlin.Int;kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.internal/wasm_u64_compareTo(kotlin/Long, kotlin/Long): kotlin/Int // kotlin.wasm.internal/wasm_u64_compareTo|wasm_u64_compareTo(kotlin.Long;kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin.wasm.unsafe/createAllocatorInTheNewScope(): kotlin.wasm.unsafe/ScopedMemoryAllocator // kotlin.wasm.unsafe/createAllocatorInTheNewScope|createAllocatorInTheNewScope(){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin/floatToUInt(kotlin/Float): kotlin/UInt // kotlin/floatToUInt|floatToUInt(kotlin.Float){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin/floatToULong(kotlin/Float): kotlin/ULong // kotlin/floatToULong|floatToULong(kotlin.Float){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin/uintToFloat(kotlin/Int): kotlin/Float // kotlin/uintToFloat|uintToFloat(kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin/uintToLong(kotlin/Int): kotlin/Long // kotlin/uintToLong|uintToLong(kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin/uintToULong(kotlin/Int): kotlin/ULong // kotlin/uintToULong|uintToULong(kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final fun kotlin/ulongToFloat(kotlin/Long): kotlin/Float // kotlin/ulongToFloat|ulongToFloat(kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final inline fun (kotlin/Long).kotlin/countOneBits(): kotlin/Int // kotlin/countOneBits|countOneBits@kotlin.Long(){}[0]

// Targets: [wasmJs, wasmWasi]
final inline fun (kotlin/Long).kotlin/countTrailingZeroBits(): kotlin/Int // kotlin/countTrailingZeroBits|countTrailingZeroBits@kotlin.Long(){}[0]

// Targets: [wasmJs, wasmWasi]
final inline fun <#A: kotlin/Any?> kotlin.wasm.unsafe/withScopedMemoryAllocator(kotlin/Function1<kotlin.wasm.unsafe/MemoryAllocator, #A>): #A // kotlin.wasm.unsafe/withScopedMemoryAllocator|withScopedMemoryAllocator(kotlin.Function1<kotlin.wasm.unsafe.MemoryAllocator,0:0>){0§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final inline fun kotlin/check(kotlin/Boolean, kotlin/Function0<kotlin/String>) // kotlin/check|check(kotlin.Boolean;kotlin.Function0<kotlin.String>){}[0]

// Targets: [wasmJs, wasmWasi]
final inline fun kotlin/error(kotlin/String): kotlin/Nothing // kotlin/error|error(kotlin.String){}[0]

// Targets: [wasmJs, wasmWasi]
final inline fun kotlin/uintCompare(kotlin/Int, kotlin/Int): kotlin/Int // kotlin/uintCompare|uintCompare(kotlin.Int;kotlin.Int){}[0]

// Targets: [wasmJs, wasmWasi]
final inline fun kotlin/ulongCompare(kotlin/Long, kotlin/Long): kotlin/Int // kotlin/ulongCompare|ulongCompare(kotlin.Long;kotlin.Long){}[0]

// Targets: [wasmJs, wasmWasi]
final suspend fun <#A: kotlin/Any?> kotlin.wasm.internal/returnIfSuspended(kotlin/Any?): #A // kotlin.wasm.internal/returnIfSuspended|returnIfSuspended(kotlin.Any?){0§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final suspend fun <#A: kotlin/Any?> kotlin.wasm.internal/suspendCoroutineUninterceptedOrReturn(kotlin/Function1<kotlin.coroutines/Continuation<#A>, kotlin/Any?>): #A // kotlin.wasm.internal/suspendCoroutineUninterceptedOrReturn|suspendCoroutineUninterceptedOrReturn(kotlin.Function1<kotlin.coroutines.Continuation<0:0>,kotlin.Any?>){0§<kotlin.Any?>}[0]

// Targets: [wasmJs, wasmWasi]
final suspend fun kotlin.wasm.internal/getCoroutineContext(): kotlin.coroutines/CoroutineContext // kotlin.wasm.internal/getCoroutineContext|getCoroutineContext(){}[0]

// Targets: [js]
open annotation class kotlin.js/EagerInitialization : kotlin/Annotation { // kotlin.js/EagerInitialization|null[0]
    constructor <init>() // kotlin.js/EagerInitialization.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/JsExternalArgument : kotlin/Annotation { // kotlin.js/JsExternalArgument|null[0]
    constructor <init>() // kotlin.js/JsExternalArgument.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/JsExternalInheritorsOnly : kotlin/Annotation { // kotlin.js/JsExternalInheritorsOnly|null[0]
    constructor <init>() // kotlin.js/JsExternalInheritorsOnly.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/JsFileName : kotlin/Annotation { // kotlin.js/JsFileName|null[0]
    constructor <init>(kotlin/String) // kotlin.js/JsFileName.<init>|<init>(kotlin.String){}[0]

    final val name // kotlin.js/JsFileName.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotlin.js/JsFileName.name.<get-name>|<get-name>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/JsNonModule : kotlin/Annotation { // kotlin.js/JsNonModule|null[0]
    constructor <init>() // kotlin.js/JsNonModule.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/JsOutlinedFunction : kotlin/Annotation { // kotlin.js/JsOutlinedFunction|null[0]
    constructor <init>(kotlin/String, kotlin/String) // kotlin.js/JsOutlinedFunction.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val jsFunctionExpression // kotlin.js/JsOutlinedFunction.jsFunctionExpression|{}jsFunctionExpression[0]
        final fun <get-jsFunctionExpression>(): kotlin/String // kotlin.js/JsOutlinedFunction.jsFunctionExpression.<get-jsFunctionExpression>|<get-jsFunctionExpression>(){}[0]
    final val sourceMap // kotlin.js/JsOutlinedFunction.sourceMap|{}sourceMap[0]
        final fun <get-sourceMap>(): kotlin/String // kotlin.js/JsOutlinedFunction.sourceMap.<get-sourceMap>|<get-sourceMap>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/JsStatic : kotlin/Annotation { // kotlin.js/JsStatic|null[0]
    constructor <init>() // kotlin.js/JsStatic.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/nativeGetter : kotlin/Annotation { // kotlin.js/nativeGetter|null[0]
    constructor <init>() // kotlin.js/nativeGetter.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/nativeInvoke : kotlin/Annotation { // kotlin.js/nativeInvoke|null[0]
    constructor <init>() // kotlin.js/nativeInvoke.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.js/nativeSetter : kotlin/Annotation { // kotlin.js/nativeSetter|null[0]
    constructor <init>() // kotlin.js/nativeSetter.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.jvm/Synchronized : kotlin/Annotation { // kotlin.jvm/Synchronized|null[0]
    constructor <init>() // kotlin.jvm/Synchronized.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.jvm/Volatile : kotlin/Annotation { // kotlin.jvm/Volatile|null[0]
    constructor <init>() // kotlin.jvm/Volatile.<init>|<init>(){}[0]
}

// Targets: [js]
open annotation class kotlin.native/FreezingIsDeprecated : kotlin/Annotation // kotlin.native/FreezingIsDeprecated|null[1]

// Targets: [js]
abstract interface <#A: kotlin/Any> kotlin.js/JsClass { // kotlin.js/JsClass|null[0]
    abstract val name // kotlin.js/JsClass.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // kotlin.js/JsClass.name.<get-name>|<get-name>(){}[0]
}

// Targets: [js]
abstract interface <#A: kotlin/Any?, #B: out kotlin/Any?> kotlin.js.collections/JsReadonlyMap // kotlin.js.collections/JsReadonlyMap|null[0]

// Targets: [js]
abstract interface <#A: out kotlin/Any?> kotlin.js.collections/JsReadonlyArray // kotlin.js.collections/JsReadonlyArray|null[0]

// Targets: [js]
abstract interface <#A: out kotlin/Any?> kotlin.js.collections/JsReadonlySet // kotlin.js.collections/JsReadonlySet|null[0]

// Targets: [js]
abstract interface kotlin.js/Console { // kotlin.js/Console|null[0]
    abstract fun dir(kotlin/Any) // kotlin.js/Console.dir|dir(kotlin.Any){}[0]
    abstract fun error(kotlin/Array<out kotlin/Any?>...) // kotlin.js/Console.error|error(kotlin.Array<out|kotlin.Any?>...){}[0]
    abstract fun info(kotlin/Array<out kotlin/Any?>...) // kotlin.js/Console.info|info(kotlin.Array<out|kotlin.Any?>...){}[0]
    abstract fun log(kotlin/Array<out kotlin/Any?>...) // kotlin.js/Console.log|log(kotlin.Array<out|kotlin.Any?>...){}[0]
    abstract fun warn(kotlin/Array<out kotlin/Any?>...) // kotlin.js/Console.warn|warn(kotlin.Array<out|kotlin.Any?>...){}[0]
}

// Targets: [js]
abstract interface kotlin.js/Json { // kotlin.js/Json|null[0]
    abstract fun get(kotlin/String): kotlin/Any? // kotlin.js/Json.get|get(kotlin.String){}[0]
    abstract fun set(kotlin/String, kotlin/Any?) // kotlin.js/Json.set|set(kotlin.String;kotlin.Any?){}[0]
}

// Targets: [js]
abstract interface kotlin.js/RegExpMatch { // kotlin.js/RegExpMatch|null[0]
    abstract val index // kotlin.js/RegExpMatch.index|{}index[0]
        abstract fun <get-index>(): kotlin/Int // kotlin.js/RegExpMatch.index.<get-index>|<get-index>(){}[0]
    abstract val input // kotlin.js/RegExpMatch.input|{}input[0]
        abstract fun <get-input>(): kotlin/String // kotlin.js/RegExpMatch.input.<get-input>|<get-input>(){}[0]
    abstract val length // kotlin.js/RegExpMatch.length|{}length[0]
        abstract fun <get-length>(): kotlin/Int // kotlin.js/RegExpMatch.length.<get-length>|<get-length>(){}[0]
}

// Targets: [js]
final class kotlin.js/Date { // kotlin.js/Date|null[0]
    constructor <init>() // kotlin.js/Date.<init>|<init>(){}[0]
    constructor <init>(kotlin/Int, kotlin/Int) // kotlin.js/Date.<init>|<init>(kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int) // kotlin.js/Date.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // kotlin.js/Date.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // kotlin.js/Date.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int) // kotlin.js/Date.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Number) // kotlin.js/Date.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Number){}[0]
    constructor <init>(kotlin/Number) // kotlin.js/Date.<init>|<init>(kotlin.Number){}[0]
    constructor <init>(kotlin/String) // kotlin.js/Date.<init>|<init>(kotlin.String){}[0]

    final fun getDate(): kotlin/Int // kotlin.js/Date.getDate|getDate(){}[0]
    final fun getDay(): kotlin/Int // kotlin.js/Date.getDay|getDay(){}[0]
    final fun getFullYear(): kotlin/Int // kotlin.js/Date.getFullYear|getFullYear(){}[0]
    final fun getHours(): kotlin/Int // kotlin.js/Date.getHours|getHours(){}[0]
    final fun getMilliseconds(): kotlin/Int // kotlin.js/Date.getMilliseconds|getMilliseconds(){}[0]
    final fun getMinutes(): kotlin/Int // kotlin.js/Date.getMinutes|getMinutes(){}[0]
    final fun getMonth(): kotlin/Int // kotlin.js/Date.getMonth|getMonth(){}[0]
    final fun getSeconds(): kotlin/Int // kotlin.js/Date.getSeconds|getSeconds(){}[0]
    final fun getTime(): kotlin/Double // kotlin.js/Date.getTime|getTime(){}[0]
    final fun getTimezoneOffset(): kotlin/Int // kotlin.js/Date.getTimezoneOffset|getTimezoneOffset(){}[0]
    final fun getUTCDate(): kotlin/Int // kotlin.js/Date.getUTCDate|getUTCDate(){}[0]
    final fun getUTCDay(): kotlin/Int // kotlin.js/Date.getUTCDay|getUTCDay(){}[0]
    final fun getUTCFullYear(): kotlin/Int // kotlin.js/Date.getUTCFullYear|getUTCFullYear(){}[0]
    final fun getUTCHours(): kotlin/Int // kotlin.js/Date.getUTCHours|getUTCHours(){}[0]
    final fun getUTCMilliseconds(): kotlin/Int // kotlin.js/Date.getUTCMilliseconds|getUTCMilliseconds(){}[0]
    final fun getUTCMinutes(): kotlin/Int // kotlin.js/Date.getUTCMinutes|getUTCMinutes(){}[0]
    final fun getUTCMonth(): kotlin/Int // kotlin.js/Date.getUTCMonth|getUTCMonth(){}[0]
    final fun getUTCSeconds(): kotlin/Int // kotlin.js/Date.getUTCSeconds|getUTCSeconds(){}[0]
    final fun toDateString(): kotlin/String // kotlin.js/Date.toDateString|toDateString(){}[0]
    final fun toISOString(): kotlin/String // kotlin.js/Date.toISOString|toISOString(){}[0]
    final fun toJSON(): kotlin.js/Json // kotlin.js/Date.toJSON|toJSON(){}[0]
    final fun toLocaleDateString(kotlin/Array<kotlin/String> = ..., kotlin.js/Date.LocaleOptions = ...): kotlin/String // kotlin.js/Date.toLocaleDateString|toLocaleDateString(kotlin.Array<kotlin.String>;kotlin.js.Date.LocaleOptions){}[0]
    final fun toLocaleDateString(kotlin/String, kotlin.js/Date.LocaleOptions = ...): kotlin/String // kotlin.js/Date.toLocaleDateString|toLocaleDateString(kotlin.String;kotlin.js.Date.LocaleOptions){}[0]
    final fun toLocaleString(kotlin/Array<kotlin/String> = ..., kotlin.js/Date.LocaleOptions = ...): kotlin/String // kotlin.js/Date.toLocaleString|toLocaleString(kotlin.Array<kotlin.String>;kotlin.js.Date.LocaleOptions){}[0]
    final fun toLocaleString(kotlin/String, kotlin.js/Date.LocaleOptions = ...): kotlin/String // kotlin.js/Date.toLocaleString|toLocaleString(kotlin.String;kotlin.js.Date.LocaleOptions){}[0]
    final fun toLocaleTimeString(kotlin/Array<kotlin/String> = ..., kotlin.js/Date.LocaleOptions = ...): kotlin/String // kotlin.js/Date.toLocaleTimeString|toLocaleTimeString(kotlin.Array<kotlin.String>;kotlin.js.Date.LocaleOptions){}[0]
    final fun toLocaleTimeString(kotlin/String, kotlin.js/Date.LocaleOptions = ...): kotlin/String // kotlin.js/Date.toLocaleTimeString|toLocaleTimeString(kotlin.String;kotlin.js.Date.LocaleOptions){}[0]
    final fun toTimeString(): kotlin/String // kotlin.js/Date.toTimeString|toTimeString(){}[0]
    final fun toUTCString(): kotlin/String // kotlin.js/Date.toUTCString|toUTCString(){}[0]

    abstract interface LocaleOptions { // kotlin.js/Date.LocaleOptions|null[0]
        abstract var day // kotlin.js/Date.LocaleOptions.day|{}day[0]
            abstract fun <get-day>(): kotlin/String? // kotlin.js/Date.LocaleOptions.day.<get-day>|<get-day>(){}[0]
            abstract fun <set-day>(kotlin/String?) // kotlin.js/Date.LocaleOptions.day.<set-day>|<set-day>(kotlin.String?){}[0]
        abstract var era // kotlin.js/Date.LocaleOptions.era|{}era[0]
            abstract fun <get-era>(): kotlin/String? // kotlin.js/Date.LocaleOptions.era.<get-era>|<get-era>(){}[0]
            abstract fun <set-era>(kotlin/String?) // kotlin.js/Date.LocaleOptions.era.<set-era>|<set-era>(kotlin.String?){}[0]
        abstract var formatMatcher // kotlin.js/Date.LocaleOptions.formatMatcher|{}formatMatcher[0]
            abstract fun <get-formatMatcher>(): kotlin/String? // kotlin.js/Date.LocaleOptions.formatMatcher.<get-formatMatcher>|<get-formatMatcher>(){}[0]
            abstract fun <set-formatMatcher>(kotlin/String?) // kotlin.js/Date.LocaleOptions.formatMatcher.<set-formatMatcher>|<set-formatMatcher>(kotlin.String?){}[0]
        abstract var hour // kotlin.js/Date.LocaleOptions.hour|{}hour[0]
            abstract fun <get-hour>(): kotlin/String? // kotlin.js/Date.LocaleOptions.hour.<get-hour>|<get-hour>(){}[0]
            abstract fun <set-hour>(kotlin/String?) // kotlin.js/Date.LocaleOptions.hour.<set-hour>|<set-hour>(kotlin.String?){}[0]
        abstract var hour12 // kotlin.js/Date.LocaleOptions.hour12|{}hour12[0]
            abstract fun <get-hour12>(): kotlin/Boolean? // kotlin.js/Date.LocaleOptions.hour12.<get-hour12>|<get-hour12>(){}[0]
            abstract fun <set-hour12>(kotlin/Boolean?) // kotlin.js/Date.LocaleOptions.hour12.<set-hour12>|<set-hour12>(kotlin.Boolean?){}[0]
        abstract var localeMatcher // kotlin.js/Date.LocaleOptions.localeMatcher|{}localeMatcher[0]
            abstract fun <get-localeMatcher>(): kotlin/String? // kotlin.js/Date.LocaleOptions.localeMatcher.<get-localeMatcher>|<get-localeMatcher>(){}[0]
            abstract fun <set-localeMatcher>(kotlin/String?) // kotlin.js/Date.LocaleOptions.localeMatcher.<set-localeMatcher>|<set-localeMatcher>(kotlin.String?){}[0]
        abstract var minute // kotlin.js/Date.LocaleOptions.minute|{}minute[0]
            abstract fun <get-minute>(): kotlin/String? // kotlin.js/Date.LocaleOptions.minute.<get-minute>|<get-minute>(){}[0]
            abstract fun <set-minute>(kotlin/String?) // kotlin.js/Date.LocaleOptions.minute.<set-minute>|<set-minute>(kotlin.String?){}[0]
        abstract var month // kotlin.js/Date.LocaleOptions.month|{}month[0]
            abstract fun <get-month>(): kotlin/String? // kotlin.js/Date.LocaleOptions.month.<get-month>|<get-month>(){}[0]
            abstract fun <set-month>(kotlin/String?) // kotlin.js/Date.LocaleOptions.month.<set-month>|<set-month>(kotlin.String?){}[0]
        abstract var second // kotlin.js/Date.LocaleOptions.second|{}second[0]
            abstract fun <get-second>(): kotlin/String? // kotlin.js/Date.LocaleOptions.second.<get-second>|<get-second>(){}[0]
            abstract fun <set-second>(kotlin/String?) // kotlin.js/Date.LocaleOptions.second.<set-second>|<set-second>(kotlin.String?){}[0]
        abstract var timeZone // kotlin.js/Date.LocaleOptions.timeZone|{}timeZone[0]
            abstract fun <get-timeZone>(): kotlin/String? // kotlin.js/Date.LocaleOptions.timeZone.<get-timeZone>|<get-timeZone>(){}[0]
            abstract fun <set-timeZone>(kotlin/String?) // kotlin.js/Date.LocaleOptions.timeZone.<set-timeZone>|<set-timeZone>(kotlin.String?){}[0]
        abstract var timeZoneName // kotlin.js/Date.LocaleOptions.timeZoneName|{}timeZoneName[0]
            abstract fun <get-timeZoneName>(): kotlin/String? // kotlin.js/Date.LocaleOptions.timeZoneName.<get-timeZoneName>|<get-timeZoneName>(){}[0]
            abstract fun <set-timeZoneName>(kotlin/String?) // kotlin.js/Date.LocaleOptions.timeZoneName.<set-timeZoneName>|<set-timeZoneName>(kotlin.String?){}[0]
        abstract var weekday // kotlin.js/Date.LocaleOptions.weekday|{}weekday[0]
            abstract fun <get-weekday>(): kotlin/String? // kotlin.js/Date.LocaleOptions.weekday.<get-weekday>|<get-weekday>(){}[0]
            abstract fun <set-weekday>(kotlin/String?) // kotlin.js/Date.LocaleOptions.weekday.<set-weekday>|<set-weekday>(kotlin.String?){}[0]
        abstract var year // kotlin.js/Date.LocaleOptions.year|{}year[0]
            abstract fun <get-year>(): kotlin/String? // kotlin.js/Date.LocaleOptions.year.<get-year>|<get-year>(){}[0]
            abstract fun <set-year>(kotlin/String?) // kotlin.js/Date.LocaleOptions.year.<set-year>|<set-year>(kotlin.String?){}[0]
    }

    final object Companion { // kotlin.js/Date.Companion|null[0]
        final fun UTC(kotlin/Int, kotlin/Int): kotlin/Double // kotlin.js/Date.Companion.UTC|UTC(kotlin.Int;kotlin.Int){}[0]
        final fun UTC(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Double // kotlin.js/Date.Companion.UTC|UTC(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun UTC(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Double // kotlin.js/Date.Companion.UTC|UTC(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun UTC(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Double // kotlin.js/Date.Companion.UTC|UTC(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun UTC(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Double // kotlin.js/Date.Companion.UTC|UTC(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun UTC(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Number): kotlin/Double // kotlin.js/Date.Companion.UTC|UTC(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Number){}[0]
        final fun now(): kotlin/Double // kotlin.js/Date.Companion.now|now(){}[0]
        final fun parse(kotlin/String): kotlin/Double // kotlin.js/Date.Companion.parse|parse(kotlin.String){}[0]
    }
}

// Targets: [js]
final class kotlin.js/RegExp { // kotlin.js/RegExp|null[0]
    constructor <init>(kotlin/String, kotlin/String? = ...) // kotlin.js/RegExp.<init>|<init>(kotlin.String;kotlin.String?){}[0]

    final val global // kotlin.js/RegExp.global|{}global[0]
        final fun <get-global>(): kotlin/Boolean // kotlin.js/RegExp.global.<get-global>|<get-global>(){}[0]
    final val ignoreCase // kotlin.js/RegExp.ignoreCase|{}ignoreCase[0]
        final fun <get-ignoreCase>(): kotlin/Boolean // kotlin.js/RegExp.ignoreCase.<get-ignoreCase>|<get-ignoreCase>(){}[0]
    final val multiline // kotlin.js/RegExp.multiline|{}multiline[0]
        final fun <get-multiline>(): kotlin/Boolean // kotlin.js/RegExp.multiline.<get-multiline>|<get-multiline>(){}[0]

    final var lastIndex // kotlin.js/RegExp.lastIndex|{}lastIndex[0]
        final fun <get-lastIndex>(): kotlin/Int // kotlin.js/RegExp.lastIndex.<get-lastIndex>|<get-lastIndex>(){}[0]
        final fun <set-lastIndex>(kotlin/Int) // kotlin.js/RegExp.lastIndex.<set-lastIndex>|<set-lastIndex>(kotlin.Int){}[0]

    final fun exec(kotlin/String): kotlin.js/RegExpMatch? // kotlin.js/RegExp.exec|exec(kotlin.String){}[0]
    final fun test(kotlin/String): kotlin/Boolean // kotlin.js/RegExp.test|test(kotlin.String){}[0]
    final fun toString(): kotlin/String // kotlin.js/RegExp.toString|toString(){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/HashMap : kotlin.collections/AbstractMutableMap<#A, #B>, kotlin.collections/MutableMap<#A, #B> { // kotlin.collections/HashMap|null[0]
    constructor <init>() // kotlin.collections/HashMap.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Map<out #A, #B>) // kotlin.collections/HashMap.<init>|<init>(kotlin.collections.Map<out|1:0,1:1>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/HashMap.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Float) // kotlin.collections/HashMap.<init>|<init>(kotlin.Int;kotlin.Float){}[0]

    open val entries // kotlin.collections/HashMap.entries|{}entries[0]
        open fun <get-entries>(): kotlin.collections/MutableSet<kotlin.collections/MutableMap.MutableEntry<#A, #B>> // kotlin.collections/HashMap.entries.<get-entries>|<get-entries>(){}[0]
    open val size // kotlin.collections/HashMap.size|{}size[0]
        open fun <get-size>(): kotlin/Int // kotlin.collections/HashMap.size.<get-size>|<get-size>(){}[0]

    open fun clear() // kotlin.collections/HashMap.clear|clear(){}[0]
    open fun containsKey(#A): kotlin/Boolean // kotlin.collections/HashMap.containsKey|containsKey(1:0){}[0]
    open fun containsValue(#B): kotlin/Boolean // kotlin.collections/HashMap.containsValue|containsValue(1:1){}[0]
    open fun get(#A): #B? // kotlin.collections/HashMap.get|get(1:0){}[0]
    open fun put(#A, #B): #B? // kotlin.collections/HashMap.put|put(1:0;1:1){}[0]
    open fun putAll(kotlin.collections/Map<out #A, #B>) // kotlin.collections/HashMap.putAll|putAll(kotlin.collections.Map<out|1:0,1:1>){}[0]
    open fun remove(#A): #B? // kotlin.collections/HashMap.remove|remove(1:0){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/LinkedHashMap : kotlin.collections/HashMap<#A, #B>, kotlin.collections/MutableMap<#A, #B> { // kotlin.collections/LinkedHashMap|null[0]
    constructor <init>() // kotlin.collections/LinkedHashMap.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Map<out #A, #B>) // kotlin.collections/LinkedHashMap.<init>|<init>(kotlin.collections.Map<out|1:0,1:1>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/LinkedHashMap.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Float) // kotlin.collections/LinkedHashMap.<init>|<init>(kotlin.Int;kotlin.Float){}[0]

    final fun build(): kotlin.collections/Map<#A, #B> // kotlin.collections/LinkedHashMap.build|build(){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.js.collections/JsMap : kotlin.js.collections/JsReadonlyMap<#A, #B> { // kotlin.js.collections/JsMap|null[0]
    constructor <init>() // kotlin.js.collections/JsMap.<init>|<init>(){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?> kotlin.collections/ArrayList : kotlin.collections/AbstractMutableList<#A>, kotlin.collections/MutableList<#A>, kotlin.collections/RandomAccess { // kotlin.collections/ArrayList|null[0]
    constructor <init>() // kotlin.collections/ArrayList.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Collection<#A>) // kotlin.collections/ArrayList.<init>|<init>(kotlin.collections.Collection<1:0>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/ArrayList.<init>|<init>(kotlin.Int){}[0]

    open val size // kotlin.collections/ArrayList.size|{}size[0]
        open fun <get-size>(): kotlin/Int // kotlin.collections/ArrayList.size.<get-size>|<get-size>(){}[0]

    final fun build(): kotlin.collections/List<#A> // kotlin.collections/ArrayList.build|build(){}[0]
    final fun ensureCapacity(kotlin/Int) // kotlin.collections/ArrayList.ensureCapacity|ensureCapacity(kotlin.Int){}[0]
    final fun trimToSize() // kotlin.collections/ArrayList.trimToSize|trimToSize(){}[0]
    open fun <#A1: kotlin/Any?> toArray(kotlin/Array<#A1>): kotlin/Array<#A1> // kotlin.collections/ArrayList.toArray|toArray(kotlin.Array<0:0>){0§<kotlin.Any?>}[0]
    open fun add(#A): kotlin/Boolean // kotlin.collections/ArrayList.add|add(1:0){}[0]
    open fun add(kotlin/Int, #A) // kotlin.collections/ArrayList.add|add(kotlin.Int;1:0){}[0]
    open fun addAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayList.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    open fun addAll(kotlin/Int, kotlin.collections/Collection<#A>): kotlin/Boolean // kotlin.collections/ArrayList.addAll|addAll(kotlin.Int;kotlin.collections.Collection<1:0>){}[0]
    open fun asJsArrayView(): kotlin.js.collections/JsArray<#A> // kotlin.collections/ArrayList.asJsArrayView|asJsArrayView(){}[0]
    open fun clear() // kotlin.collections/ArrayList.clear|clear(){}[0]
    open fun get(kotlin/Int): #A // kotlin.collections/ArrayList.get|get(kotlin.Int){}[0]
    open fun indexOf(#A): kotlin/Int // kotlin.collections/ArrayList.indexOf|indexOf(1:0){}[0]
    open fun lastIndexOf(#A): kotlin/Int // kotlin.collections/ArrayList.lastIndexOf|lastIndexOf(1:0){}[0]
    open fun remove(#A): kotlin/Boolean // kotlin.collections/ArrayList.remove|remove(1:0){}[0]
    open fun removeAt(kotlin/Int): #A // kotlin.collections/ArrayList.removeAt|removeAt(kotlin.Int){}[0]
    open fun removeRange(kotlin/Int, kotlin/Int) // kotlin.collections/ArrayList.removeRange|removeRange(kotlin.Int;kotlin.Int){}[0]
    open fun set(kotlin/Int, #A): #A // kotlin.collections/ArrayList.set|set(kotlin.Int;1:0){}[0]
    open fun toArray(): kotlin/Array<kotlin/Any?> // kotlin.collections/ArrayList.toArray|toArray(){}[0]
    open fun toString(): kotlin/String // kotlin.collections/ArrayList.toString|toString(){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?> kotlin.collections/HashSet : kotlin.collections/AbstractMutableSet<#A>, kotlin.collections/MutableSet<#A> { // kotlin.collections/HashSet|null[0]
    constructor <init>() // kotlin.collections/HashSet.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Collection<#A>) // kotlin.collections/HashSet.<init>|<init>(kotlin.collections.Collection<1:0>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/HashSet.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Float) // kotlin.collections/HashSet.<init>|<init>(kotlin.Int;kotlin.Float){}[0]

    open val size // kotlin.collections/HashSet.size|{}size[0]
        open fun <get-size>(): kotlin/Int // kotlin.collections/HashSet.size.<get-size>|<get-size>(){}[0]

    open fun add(#A): kotlin/Boolean // kotlin.collections/HashSet.add|add(1:0){}[0]
    open fun clear() // kotlin.collections/HashSet.clear|clear(){}[0]
    open fun contains(#A): kotlin/Boolean // kotlin.collections/HashSet.contains|contains(1:0){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlin.collections/HashSet.isEmpty|isEmpty(){}[0]
    open fun iterator(): kotlin.collections/MutableIterator<#A> // kotlin.collections/HashSet.iterator|iterator(){}[0]
    open fun remove(#A): kotlin/Boolean // kotlin.collections/HashSet.remove|remove(1:0){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?> kotlin.collections/LinkedHashSet : kotlin.collections/HashSet<#A>, kotlin.collections/MutableSet<#A> { // kotlin.collections/LinkedHashSet|null[0]
    constructor <init>() // kotlin.collections/LinkedHashSet.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Collection<#A>) // kotlin.collections/LinkedHashSet.<init>|<init>(kotlin.collections.Collection<1:0>){}[0]
    constructor <init>(kotlin/Int) // kotlin.collections/LinkedHashSet.<init>|<init>(kotlin.Int){}[0]
    constructor <init>(kotlin/Int, kotlin/Float) // kotlin.collections/LinkedHashSet.<init>|<init>(kotlin.Int;kotlin.Float){}[0]

    final fun build(): kotlin.collections/Set<#A> // kotlin.collections/LinkedHashSet.build|build(){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?> kotlin.js.collections/JsArray : kotlin.js.collections/JsReadonlyArray<#A> { // kotlin.js.collections/JsArray|null[0]
    constructor <init>() // kotlin.js.collections/JsArray.<init>|<init>(){}[0]
}

// Targets: [js]
open class <#A: kotlin/Any?> kotlin.js.collections/JsSet : kotlin.js.collections/JsReadonlySet<#A> { // kotlin.js.collections/JsSet|null[0]
    constructor <init>() // kotlin.js.collections/JsSet.<init>|<init>(){}[0]
}

// Targets: [js]
open class <#A: out kotlin/Any?> kotlin.js/Promise { // kotlin.js/Promise|null[0]
    constructor <init>(kotlin/Function2<kotlin/Function1<#A, kotlin/Unit>, kotlin/Function1<kotlin/Throwable, kotlin/Unit>, kotlin/Unit>) // kotlin.js/Promise.<init>|<init>(kotlin.Function2<kotlin.Function1<1:0,kotlin.Unit>,kotlin.Function1<kotlin.Throwable,kotlin.Unit>,kotlin.Unit>){}[0]

    open fun <#A1: kotlin/Any?> catch(kotlin/Function1<kotlin/Throwable, #A1>): kotlin.js/Promise<#A1> // kotlin.js/Promise.catch|catch(kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> then(kotlin/Function1<#A, #A1>?): kotlin.js/Promise<#A1> // kotlin.js/Promise.then|then(kotlin.Function1<1:0,0:0>?){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> then(kotlin/Function1<#A, #A1>?, kotlin/Function1<kotlin/Throwable, #A1>?): kotlin.js/Promise<#A1> // kotlin.js/Promise.then|then(kotlin.Function1<1:0,0:0>?;kotlin.Function1<kotlin.Throwable,0:0>?){0§<kotlin.Any?>}[0]
    open fun finally(kotlin/Function0<kotlin/Unit>): kotlin.js/Promise<#A> // kotlin.js/Promise.finally|finally(kotlin.Function0<kotlin.Unit>){}[0]

    final object Companion { // kotlin.js/Promise.Companion|null[0]
        final fun <#A2: kotlin/Any?> all(kotlin/Array<out kotlin.js/Promise<#A2>>): kotlin.js/Promise<kotlin/Array<out #A2>> // kotlin.js/Promise.Companion.all|all(kotlin.Array<out|kotlin.js.Promise<0:0>>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> race(kotlin/Array<out kotlin.js/Promise<#A2>>): kotlin.js/Promise<#A2> // kotlin.js/Promise.Companion.race|race(kotlin.Array<out|kotlin.js.Promise<0:0>>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> resolve(#A2): kotlin.js/Promise<#A2> // kotlin.js/Promise.Companion.resolve|resolve(0:0){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> resolve(kotlin.js/Promise<#A2>): kotlin.js/Promise<#A2> // kotlin.js/Promise.Companion.resolve|resolve(kotlin.js.Promise<0:0>){0§<kotlin.Any?>}[0]
        final fun reject(kotlin/Throwable): kotlin.js/Promise<kotlin/Nothing> // kotlin.js/Promise.Companion.reject|reject(kotlin.Throwable){}[0]
    }
}

// Targets: [js]
open class kotlin/NoWhenBranchMatchedException : kotlin/RuntimeException { // kotlin/NoWhenBranchMatchedException|null[0]
    constructor <init>() // kotlin/NoWhenBranchMatchedException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/NoWhenBranchMatchedException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/NoWhenBranchMatchedException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/NoWhenBranchMatchedException.<init>|<init>(kotlin.Throwable?){}[0]
}

// Targets: [js]
open class kotlin/UninitializedPropertyAccessException : kotlin/RuntimeException { // kotlin/UninitializedPropertyAccessException|null[0]
    constructor <init>() // kotlin/UninitializedPropertyAccessException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // kotlin/UninitializedPropertyAccessException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // kotlin/UninitializedPropertyAccessException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // kotlin/UninitializedPropertyAccessException.<init>|<init>(kotlin.Throwable?){}[0]
}

// Targets: [js]
final object kotlin.js/JSON { // kotlin.js/JSON|null[0]
    final fun <#A1: kotlin/Any?> parse(kotlin/String): #A1 // kotlin.js/JSON.parse|parse(kotlin.String){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> parse(kotlin/String, kotlin/Function2<kotlin/String, kotlin/Any?, kotlin/Any?>): #A1 // kotlin.js/JSON.parse|parse(kotlin.String;kotlin.Function2<kotlin.String,kotlin.Any?,kotlin.Any?>){0§<kotlin.Any?>}[0]
    final fun stringify(kotlin/Any?): kotlin/String // kotlin.js/JSON.stringify|stringify(kotlin.Any?){}[0]
    final fun stringify(kotlin/Any?, kotlin/Array<kotlin/String>): kotlin/String // kotlin.js/JSON.stringify|stringify(kotlin.Any?;kotlin.Array<kotlin.String>){}[0]
    final fun stringify(kotlin/Any?, kotlin/Array<kotlin/String>, kotlin/Int): kotlin/String // kotlin.js/JSON.stringify|stringify(kotlin.Any?;kotlin.Array<kotlin.String>;kotlin.Int){}[0]
    final fun stringify(kotlin/Any?, kotlin/Array<kotlin/String>, kotlin/String): kotlin/String // kotlin.js/JSON.stringify|stringify(kotlin.Any?;kotlin.Array<kotlin.String>;kotlin.String){}[0]
    final fun stringify(kotlin/Any?, kotlin/Function2<kotlin/String, kotlin/Any?, kotlin/Any?>): kotlin/String // kotlin.js/JSON.stringify|stringify(kotlin.Any?;kotlin.Function2<kotlin.String,kotlin.Any?,kotlin.Any?>){}[0]
    final fun stringify(kotlin/Any?, kotlin/Function2<kotlin/String, kotlin/Any?, kotlin/Any?>? = ..., kotlin/Int): kotlin/String // kotlin.js/JSON.stringify|stringify(kotlin.Any?;kotlin.Function2<kotlin.String,kotlin.Any?,kotlin.Any?>?;kotlin.Int){}[0]
    final fun stringify(kotlin/Any?, kotlin/Function2<kotlin/String, kotlin/Any?, kotlin/Any?>? = ..., kotlin/String): kotlin/String // kotlin.js/JSON.stringify|stringify(kotlin.Any?;kotlin.Function2<kotlin.String,kotlin.Any?,kotlin.Any?>?;kotlin.String){}[0]
}

// Targets: [js]
final object kotlin.js/JsMath { // kotlin.js/JsMath|null[0]
    final val LN2 // kotlin.js/JsMath.LN2|{}LN2[0]
        final fun <get-LN2>(): kotlin/Double // kotlin.js/JsMath.LN2.<get-LN2>|<get-LN2>(){}[0]

    final fun abs(kotlin/Double): kotlin/Double // kotlin.js/JsMath.abs|abs(kotlin.Double){}[0]
    final fun acos(kotlin/Double): kotlin/Double // kotlin.js/JsMath.acos|acos(kotlin.Double){}[0]
    final fun asin(kotlin/Double): kotlin/Double // kotlin.js/JsMath.asin|asin(kotlin.Double){}[0]
    final fun atan(kotlin/Double): kotlin/Double // kotlin.js/JsMath.atan|atan(kotlin.Double){}[0]
    final fun atan2(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.js/JsMath.atan2|atan2(kotlin.Double;kotlin.Double){}[0]
    final fun cbrt(kotlin/Double): kotlin/Double // kotlin.js/JsMath.cbrt|cbrt(kotlin.Double){}[0]
    final fun ceil(kotlin/Number): kotlin/Double // kotlin.js/JsMath.ceil|ceil(kotlin.Number){}[0]
    final fun cos(kotlin/Double): kotlin/Double // kotlin.js/JsMath.cos|cos(kotlin.Double){}[0]
    final fun exp(kotlin/Double): kotlin/Double // kotlin.js/JsMath.exp|exp(kotlin.Double){}[0]
    final fun floor(kotlin/Number): kotlin/Double // kotlin.js/JsMath.floor|floor(kotlin.Number){}[0]
    final fun log(kotlin/Double): kotlin/Double // kotlin.js/JsMath.log|log(kotlin.Double){}[0]
    final fun max(kotlin/DoubleArray...): kotlin/Double // kotlin.js/JsMath.max|max(kotlin.DoubleArray...){}[0]
    final fun max(kotlin/FloatArray...): kotlin/Float // kotlin.js/JsMath.max|max(kotlin.FloatArray...){}[0]
    final fun max(kotlin/IntArray...): kotlin/Int // kotlin.js/JsMath.max|max(kotlin.IntArray...){}[0]
    final fun min(kotlin/DoubleArray...): kotlin/Double // kotlin.js/JsMath.min|min(kotlin.DoubleArray...){}[0]
    final fun min(kotlin/FloatArray...): kotlin/Float // kotlin.js/JsMath.min|min(kotlin.FloatArray...){}[0]
    final fun min(kotlin/IntArray...): kotlin/Int // kotlin.js/JsMath.min|min(kotlin.IntArray...){}[0]
    final fun pow(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.js/JsMath.pow|pow(kotlin.Double;kotlin.Double){}[0]
    final fun round(kotlin/Number): kotlin/Double // kotlin.js/JsMath.round|round(kotlin.Number){}[0]
    final fun sin(kotlin/Double): kotlin/Double // kotlin.js/JsMath.sin|sin(kotlin.Double){}[0]
    final fun sqrt(kotlin/Double): kotlin/Double // kotlin.js/JsMath.sqrt|sqrt(kotlin.Double){}[0]
    final fun tan(kotlin/Double): kotlin/Double // kotlin.js/JsMath.tan|tan(kotlin.Double){}[0]
}

// Targets: [js]
final val kotlin.coroutines.js.internal/EmptyContinuation // kotlin.coroutines.js.internal/EmptyContinuation|{}EmptyContinuation[0]
    final fun <get-EmptyContinuation>(): kotlin.coroutines/Continuation<kotlin/Any?> // kotlin.coroutines.js.internal/EmptyContinuation.<get-EmptyContinuation>|<get-EmptyContinuation>(){}[0]

// Targets: [js]
final val kotlin.js/VOID // kotlin.js/VOID|{}VOID[0]
    final fun <get-VOID>(): kotlin/Nothing? // kotlin.js/VOID.<get-VOID>|<get-VOID>(){}[0]

// Targets: [js]
final val kotlin.js/console // kotlin.js/console|{}console[0]
    final fun <get-console>(): kotlin.js/Console // kotlin.js/console.<get-console>|<get-console>(){}[0]

// Targets: [js]
final val kotlin.js/js // kotlin.js/js|@kotlin.reflect.KClass<0:0>{0§<kotlin.Any>}js[0]
    final fun <#A1: kotlin/Any> (kotlin.reflect/KClass<#A1>).<get-js>(): kotlin.js/JsClass<#A1> // kotlin.js/js.<get-js>|<get-js>@kotlin.reflect.KClass<0:0>(){0§<kotlin.Any>}[0]

// Targets: [js]
final val kotlin.js/kotlin // kotlin.js/kotlin|@kotlin.js.JsClass<0:0>{0§<kotlin.Any>}kotlin[0]
    final fun <#A1: kotlin/Any> (kotlin.js/JsClass<#A1>).<get-kotlin>(): kotlin.reflect/KClass<#A1> // kotlin.js/kotlin.<get-kotlin>|<get-kotlin>@kotlin.js.JsClass<0:0>(){0§<kotlin.Any>}[0]

// Targets: [js]
final val kotlin.js/undefined // kotlin.js/undefined|{}undefined[0]
    final fun <get-undefined>(): kotlin/Nothing? // kotlin.js/undefined.<get-undefined>|<get-undefined>(){}[0]

// Targets: [js]
final fun (dynamic).kotlin.js/iterator(): kotlin.collections/Iterator<dynamic> // kotlin.js/iterator|iterator@<dynamic>(){}[0]

// Targets: [js]
final fun (kotlin.js/Json).kotlin.js/add(kotlin.js/Json): kotlin.js/Json // kotlin.js/add|add@kotlin.js.Json(kotlin.js.Json){}[0]

// Targets: [js]
final fun (kotlin.js/RegExp).kotlin.js/reset() // kotlin.js/reset|reset@kotlin.js.RegExp(){}[0]

// Targets: [js]
final fun (kotlin/BooleanArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Boolean // kotlin.collections/elementAt|elementAt@kotlin.BooleanArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/ByteArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Byte // kotlin.collections/elementAt|elementAt@kotlin.ByteArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/CharArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Char // kotlin.collections/elementAt|elementAt@kotlin.CharArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/CharSequence).kotlin.text/elementAt(kotlin/Int): kotlin/Char // kotlin.text/elementAt|elementAt@kotlin.CharSequence(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/DoubleArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Double // kotlin.collections/elementAt|elementAt@kotlin.DoubleArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/FloatArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Float // kotlin.collections/elementAt|elementAt@kotlin.FloatArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/IntArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Int // kotlin.collections/elementAt|elementAt@kotlin.IntArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/LongArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Long // kotlin.collections/elementAt|elementAt@kotlin.LongArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/ShortArray).kotlin.collections/elementAt(kotlin/Int): kotlin/Short // kotlin.collections/elementAt|elementAt@kotlin.ShortArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/String).kotlin.text/matches(kotlin/String): kotlin/Boolean // kotlin.text/matches|matches@kotlin.String(kotlin.String){}[0]

// Targets: [js]
final fun (kotlin/UByteArray).kotlin.collections/elementAt(kotlin/Int): kotlin/UByte // kotlin.collections/elementAt|elementAt@kotlin.UByteArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/UIntArray).kotlin.collections/elementAt(kotlin/Int): kotlin/UInt // kotlin.collections/elementAt|elementAt@kotlin.UIntArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/ULongArray).kotlin.collections/elementAt(kotlin/Int): kotlin/ULong // kotlin.collections/elementAt|elementAt@kotlin.ULongArray(kotlin.Int){}[0]

// Targets: [js]
final fun (kotlin/UShortArray).kotlin.collections/elementAt(kotlin/Int): kotlin/UShort // kotlin.collections/elementAt|elementAt@kotlin.UShortArray(kotlin.Int){}[0]

// Targets: [js]
final fun <#A: kotlin/Annotation> (kotlin.reflect/KClass<*>)./findAssociatedObject(kotlin.reflect/KClass<#A>): kotlin/Any? // /findAssociatedObject|findAssociatedObject@kotlin.reflect.KClass<*>(kotlin.reflect.KClass<0:0>){0§<kotlin.Annotation>}[0]

// Targets: [js]
final fun <#A: kotlin/Any> (kotlin.reflect/KClass<#A>).kotlin.reflect/createInstance(): #A // kotlin.reflect/createInstance|createInstance@kotlin.reflect.KClass<0:0>(){0§<kotlin.Any>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.coroutines/SuspendFunction2<#A, #B, #C>).kotlin.coroutines.intrinsics/invokeSuspendSuperTypeWithReceiverAndParam(#A, #B, kotlin.coroutines/Continuation<#C>): kotlin/Any? // kotlin.coroutines.intrinsics/invokeSuspendSuperTypeWithReceiverAndParam|invokeSuspendSuperTypeWithReceiverAndParam@kotlin.coroutines.SuspendFunction2<0:0,0:1,0:2>(0:0;0:1;kotlin.coroutines.Continuation<0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.coroutines/SuspendFunction2<#A, #B, #C>).kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnNonGeneratorVersion(#A, #B, kotlin.coroutines/Continuation<#C>): kotlin/Any? // kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnNonGeneratorVersion|startCoroutineUninterceptedOrReturnNonGeneratorVersion@kotlin.coroutines.SuspendFunction2<0:0,0:1,0:2>(0:0;0:1;kotlin.coroutines.Continuation<0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<#A, #B>).kotlin.coroutines.intrinsics/invokeSuspendSuperTypeWithReceiver(#A, kotlin.coroutines/Continuation<#B>): kotlin/Any? // kotlin.coroutines.intrinsics/invokeSuspendSuperTypeWithReceiver|invokeSuspendSuperTypeWithReceiver@kotlin.coroutines.SuspendFunction1<0:0,0:1>(0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<#A, #B>).kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnNonGeneratorVersion(#A, kotlin.coroutines/Continuation<#B>): kotlin/Any? // kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnNonGeneratorVersion|startCoroutineUninterceptedOrReturnNonGeneratorVersion@kotlin.coroutines.SuspendFunction1<0:0,0:1>(0:0;kotlin.coroutines.Continuation<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/createMapFrom(kotlin.js.collections/JsReadonlyMap<#A, #B>): kotlin.collections/Map<#A, #B> // kotlin.collections/createMapFrom|createMapFrom(kotlin.js.collections.JsReadonlyMap<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/createMutableMapFrom(kotlin.js.collections/JsReadonlyMap<#A, #B>): kotlin.collections/MutableMap<#A, #B> // kotlin.collections/createMutableMapFrom|createMutableMapFrom(kotlin.js.collections.JsReadonlyMap<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/linkedMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlin.collections/LinkedHashMap<#A, #B> // kotlin.collections/linkedMapOf|linkedMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction0<#A>).kotlin.coroutines.intrinsics/invokeSuspendSuperType(kotlin.coroutines/Continuation<#A>): kotlin/Any? // kotlin.coroutines.intrinsics/invokeSuspendSuperType|invokeSuspendSuperType@kotlin.coroutines.SuspendFunction0<0:0>(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction0<#A>).kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnNonGeneratorVersion(kotlin.coroutines/Continuation<#A>): kotlin/Any? // kotlin.coroutines.intrinsics/startCoroutineUninterceptedOrReturnNonGeneratorVersion|startCoroutineUninterceptedOrReturnNonGeneratorVersion@kotlin.coroutines.SuspendFunction0<0:0>(kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/copyOf(kotlin/Int): kotlin/Array<#A?> // kotlin.collections/copyOf|copyOf@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/Array<#A> // kotlin.collections/copyOfRange|copyOfRange@kotlin.Array<out|0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/elementAt(kotlin/Int): #A // kotlin.collections/elementAt|elementAt@kotlin.Array<out|0:0>(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/plus(kotlin.collections/Collection<#A>): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<out|0:0>(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/sort(kotlin/Function2<#A, #A, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.Array<out|0:0>(kotlin.Function2<0:0,0:0,kotlin.Int>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> /arrayConcat(kotlin/Array<out #A>...): #A // /arrayConcat|arrayConcat(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> /primitiveArrayConcat(kotlin/Array<out #A>...): #A // /primitiveArrayConcat|primitiveArrayConcat(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/arrayCopy(kotlin/Array<out #A>, kotlin/Array<in #A>, kotlin/Int, kotlin/Int, kotlin/Int) // kotlin.collections/arrayCopy|arrayCopy(kotlin.Array<out|0:0>;kotlin.Array<in|0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/createListFrom(kotlin.js.collections/JsReadonlyArray<#A>): kotlin.collections/List<#A> // kotlin.collections/createListFrom|createListFrom(kotlin.js.collections.JsReadonlyArray<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/createMutableListFrom(kotlin.js.collections/JsReadonlyArray<#A>): kotlin.collections/MutableList<#A> // kotlin.collections/createMutableListFrom|createMutableListFrom(kotlin.js.collections.JsReadonlyArray<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/createMutableSetFrom(kotlin.js.collections/JsReadonlySet<#A>): kotlin.collections/MutableSet<#A> // kotlin.collections/createMutableSetFrom|createMutableSetFrom(kotlin.js.collections.JsReadonlySet<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/createSetFrom(kotlin.js.collections/JsReadonlySet<#A>): kotlin.collections/Set<#A> // kotlin.collections/createSetFrom|createSetFrom(kotlin.js.collections.JsReadonlySet<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/linkedSetOf(kotlin/Array<out #A>...): kotlin.collections/LinkedHashSet<#A> // kotlin.collections/linkedSetOf|linkedSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/linkedStringMapOf(kotlin/Array<out kotlin/Pair<kotlin/String, #A>>...): kotlin.collections/LinkedHashMap<kotlin/String, #A> // kotlin.collections/linkedStringMapOf|linkedStringMapOf(kotlin.Array<out|kotlin.Pair<kotlin.String,0:0>>...){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.collections/stringMapOf(kotlin/Array<out kotlin/Pair<kotlin/String, #A>>...): kotlin.collections/HashMap<kotlin/String, #A> // kotlin.collections/stringMapOf|stringMapOf(kotlin.Array<out|kotlin.Pair<kotlin.String,0:0>>...){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.js/Array(kotlin/Int): kotlin/Array<#A> // kotlin.js/Array|Array(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.js/fillArrayVal(kotlin/Array<#A>, #A): kotlin/Array<#A> // kotlin.js/fillArrayVal|fillArrayVal(kotlin.Array<0:0>;0:0){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.js/getContinuation(): kotlin.coroutines/Continuation<#A> // kotlin.js/getContinuation|getContinuation(){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Any?> kotlin.js/interceptContinuationIfNeeded(kotlin.coroutines/CoroutineContext, kotlin.coroutines/Continuation<#A>): kotlin.coroutines/Continuation<#A> // kotlin.js/interceptContinuationIfNeeded|interceptContinuationIfNeeded(kotlin.coroutines.CoroutineContext;kotlin.coroutines.Continuation<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final fun <#A: kotlin/Enum<#A>> kotlin.js/enumValueOfIntrinsic(kotlin/String): #A // kotlin.js/enumValueOfIntrinsic|enumValueOfIntrinsic(kotlin.String){0§<kotlin.Enum<0:0>>}[0]

// Targets: [js]
final fun <#A: kotlin/Enum<#A>> kotlin.js/enumValuesIntrinsic(): kotlin/Array<#A> // kotlin.js/enumValuesIntrinsic|enumValuesIntrinsic(){0§<kotlin.Enum<0:0>>}[0]

// Targets: [js]
final fun kotlin.collections/checkBuilderCapacity(kotlin/Int) // kotlin.collections/checkBuilderCapacity|checkBuilderCapacity(kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.collections/checkCountOverflow(kotlin/Int): kotlin/Int // kotlin.collections/checkCountOverflow|checkCountOverflow(kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.collections/checkIndexOverflow(kotlin/Int): kotlin/Int // kotlin.collections/checkIndexOverflow|checkIndexOverflow(kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.collections/linkedStringSetOf(kotlin/Array<out kotlin/String>...): kotlin.collections/LinkedHashSet<kotlin/String> // kotlin.collections/linkedStringSetOf|linkedStringSetOf(kotlin.Array<out|kotlin.String>...){}[0]

// Targets: [js]
final fun kotlin.collections/stringSetOf(kotlin/Array<out kotlin/String>...): kotlin.collections/HashSet<kotlin/String> // kotlin.collections/stringSetOf|stringSetOf(kotlin.Array<out|kotlin.String>...){}[0]

// Targets: [js]
final fun kotlin.js/charSequenceGet(kotlin/CharSequence, kotlin/Int): kotlin/Char // kotlin.js/charSequenceGet|charSequenceGet(kotlin.CharSequence;kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.js/charSequenceLength(kotlin/CharSequence): kotlin/Int // kotlin.js/charSequenceLength|charSequenceLength(kotlin.CharSequence){}[0]

// Targets: [js]
final fun kotlin.js/charSequenceSubSequence(kotlin/CharSequence, kotlin/Int, kotlin/Int): kotlin/CharSequence // kotlin.js/charSequenceSubSequence|charSequenceSubSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.js/doubleFromBits(kotlin/Long): kotlin/Double // kotlin.js/doubleFromBits|doubleFromBits(kotlin.Long){}[0]

// Targets: [js]
final fun kotlin.js/eval(kotlin/String): dynamic // kotlin.js/eval|eval(kotlin.String){}[0]

// Targets: [js]
final fun kotlin.js/floatFromBits(kotlin/Int): kotlin/Float // kotlin.js/floatFromBits|floatFromBits(kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.js/js(kotlin/String): dynamic // kotlin.js/js|js(kotlin.String){}[0]

// Targets: [js]
final fun kotlin.js/jsTypeOf(kotlin/Any?): kotlin/String // kotlin.js/jsTypeOf|jsTypeOf(kotlin.Any?){}[0]

// Targets: [js]
final fun kotlin.js/json(kotlin/Array<out kotlin/Pair<kotlin/String, kotlin/Any?>>...): kotlin.js/Json // kotlin.js/json|json(kotlin.Array<out|kotlin.Pair<kotlin.String,kotlin.Any?>>...){}[0]

// Targets: [js]
final fun kotlin.js/nativeAcosh(kotlin/Double): kotlin/Double // kotlin.js/nativeAcosh|nativeAcosh(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeAsinh(kotlin/Double): kotlin/Double // kotlin.js/nativeAsinh|nativeAsinh(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeAtanh(kotlin/Double): kotlin/Double // kotlin.js/nativeAtanh|nativeAtanh(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeClz32(kotlin/Int): kotlin/Int // kotlin.js/nativeClz32|nativeClz32(kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.js/nativeCosh(kotlin/Double): kotlin/Double // kotlin.js/nativeCosh|nativeCosh(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeExpm1(kotlin/Double): kotlin/Double // kotlin.js/nativeExpm1|nativeExpm1(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeHypot(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.js/nativeHypot|nativeHypot(kotlin.Double;kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeLog10(kotlin/Double): kotlin/Double // kotlin.js/nativeLog10|nativeLog10(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeLog1p(kotlin/Double): kotlin/Double // kotlin.js/nativeLog1p|nativeLog1p(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeLog2(kotlin/Double): kotlin/Double // kotlin.js/nativeLog2|nativeLog2(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeSign(kotlin/Number): kotlin/Double // kotlin.js/nativeSign|nativeSign(kotlin.Number){}[0]

// Targets: [js]
final fun kotlin.js/nativeSinh(kotlin/Double): kotlin/Double // kotlin.js/nativeSinh|nativeSinh(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeTanh(kotlin/Double): kotlin/Double // kotlin.js/nativeTanh|nativeTanh(kotlin.Double){}[0]

// Targets: [js]
final fun kotlin.js/nativeTrunc(kotlin/Number): kotlin/Double // kotlin.js/nativeTrunc|nativeTrunc(kotlin.Number){}[0]

// Targets: [js]
final fun kotlin.js/parseFloat(kotlin/String, kotlin/Int = ...): kotlin/Double // kotlin.js/parseFloat|parseFloat(kotlin.String;kotlin.Int){}[0]

// Targets: [js]
final fun kotlin.js/parseInt(kotlin/String): kotlin/Int // kotlin.js/parseInt|parseInt(kotlin.String){}[0]

// Targets: [js]
final fun kotlin.js/parseInt(kotlin/String, kotlin/Int = ...): kotlin/Int // kotlin.js/parseInt|parseInt(kotlin.String;kotlin.Int){}[0]

// Targets: [js]
final fun kotlin/throwKotlinNothingValueException(): kotlin/Nothing // kotlin/throwKotlinNothingValueException|throwKotlinNothingValueException(){}[0]

// Targets: [js]
final fun kotlin/throwUninitializedPropertyAccessException(kotlin/String): kotlin/Nothing // kotlin/throwUninitializedPropertyAccessException|throwUninitializedPropertyAccessException(kotlin.String){}[0]

// Targets: [js]
final inline fun (kotlin.js/RegExpMatch).kotlin.js/asArray(): kotlin/Array<out kotlin/String?> // kotlin.js/asArray|asArray@kotlin.js.RegExpMatch(){}[0]

// Targets: [js]
final inline fun (kotlin.js/RegExpMatch).kotlin.js/get(kotlin/Int): kotlin/String? // kotlin.js/get|get@kotlin.js.RegExpMatch(kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin.text/StringBuilder).kotlin.text/clear(): kotlin.text/StringBuilder // kotlin.text/clear|clear@kotlin.text.StringBuilder(){}[0]

// Targets: [js]
final inline fun (kotlin/Any).kotlin.js/nativeFill(kotlin/Any?, kotlin/Int, kotlin/Int) // kotlin.js/nativeFill|nativeFill@kotlin.Any(kotlin.Any?;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/Any).kotlin.js/nativeSort(noinline kotlin/Function2<dynamic, dynamic, kotlin/Int> = ...) // kotlin.js/nativeSort|nativeSort@kotlin.Any(kotlin.Function2<<dynamic>,<dynamic>,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/Any?).kotlin.js/asDynamic(): dynamic // kotlin.js/asDynamic|asDynamic@kotlin.Any?(){}[0]

// Targets: [js]
final inline fun (kotlin/BooleanArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Boolean> // kotlin.collections/asList|asList@kotlin.BooleanArray(){}[0]

// Targets: [js]
final inline fun (kotlin/BooleanArray).kotlin.collections/copyInto(kotlin/BooleanArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/BooleanArray // kotlin.collections/copyInto|copyInto@kotlin.BooleanArray(kotlin.BooleanArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/BooleanArray).kotlin.collections/plus(kotlin/Boolean): kotlin/BooleanArray // kotlin.collections/plus|plus@kotlin.BooleanArray(kotlin.Boolean){}[0]

// Targets: [js]
final inline fun (kotlin/BooleanArray).kotlin.collections/plus(kotlin/BooleanArray): kotlin/BooleanArray // kotlin.collections/plus|plus@kotlin.BooleanArray(kotlin.BooleanArray){}[0]

// Targets: [js]
final inline fun (kotlin/ByteArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Byte> // kotlin.collections/asList|asList@kotlin.ByteArray(){}[0]

// Targets: [js]
final inline fun (kotlin/ByteArray).kotlin.collections/copyInto(kotlin/ByteArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/ByteArray // kotlin.collections/copyInto|copyInto@kotlin.ByteArray(kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/ByteArray).kotlin.collections/copyOf(): kotlin/ByteArray // kotlin.collections/copyOf|copyOf@kotlin.ByteArray(){}[0]

// Targets: [js]
final inline fun (kotlin/ByteArray).kotlin.collections/plus(kotlin/Byte): kotlin/ByteArray // kotlin.collections/plus|plus@kotlin.ByteArray(kotlin.Byte){}[0]

// Targets: [js]
final inline fun (kotlin/ByteArray).kotlin.collections/plus(kotlin/ByteArray): kotlin/ByteArray // kotlin.collections/plus|plus@kotlin.ByteArray(kotlin.ByteArray){}[0]

// Targets: [js]
final inline fun (kotlin/ByteArray).kotlin.collections/sort(noinline kotlin/Function2<kotlin/Byte, kotlin/Byte, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.ByteArray(kotlin.Function2<kotlin.Byte,kotlin.Byte,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/Char).kotlin.text/lowercase(): kotlin/String // kotlin.text/lowercase|lowercase@kotlin.Char(){}[0]

// Targets: [js]
final inline fun (kotlin/Char).kotlin.text/lowercaseChar(): kotlin/Char // kotlin.text/lowercaseChar|lowercaseChar@kotlin.Char(){}[0]

// Targets: [js]
final inline fun (kotlin/Char).kotlin.text/toLowerCase(): kotlin/Char // kotlin.text/toLowerCase|toLowerCase@kotlin.Char(){}[0]

// Targets: [js]
final inline fun (kotlin/Char).kotlin.text/toUpperCase(): kotlin/Char // kotlin.text/toUpperCase|toUpperCase@kotlin.Char(){}[0]

// Targets: [js]
final inline fun (kotlin/Char).kotlin.text/uppercase(): kotlin/String // kotlin.text/uppercase|uppercase@kotlin.Char(){}[0]

// Targets: [js]
final inline fun (kotlin/CharArray).kotlin.collections/copyInto(kotlin/CharArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/CharArray // kotlin.collections/copyInto|copyInto@kotlin.CharArray(kotlin.CharArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/CharArray).kotlin.collections/plus(kotlin/Char): kotlin/CharArray // kotlin.collections/plus|plus@kotlin.CharArray(kotlin.Char){}[0]

// Targets: [js]
final inline fun (kotlin/CharArray).kotlin.collections/plus(kotlin/CharArray): kotlin/CharArray // kotlin.collections/plus|plus@kotlin.CharArray(kotlin.CharArray){}[0]

// Targets: [js]
final inline fun (kotlin/CharArray).kotlin.collections/sort(noinline kotlin/Function2<kotlin/Char, kotlin/Char, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.CharArray(kotlin.Function2<kotlin.Char,kotlin.Char,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/Double).kotlin.math/pow(kotlin/Double): kotlin/Double // kotlin.math/pow|pow@kotlin.Double(kotlin.Double){}[0]

// Targets: [js]
final inline fun (kotlin/Double).kotlin.math/pow(kotlin/Int): kotlin/Double // kotlin.math/pow|pow@kotlin.Double(kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/Double).kotlin.math/withSign(kotlin/Int): kotlin/Double // kotlin.math/withSign|withSign@kotlin.Double(kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/DoubleArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Double> // kotlin.collections/asList|asList@kotlin.DoubleArray(){}[0]

// Targets: [js]
final inline fun (kotlin/DoubleArray).kotlin.collections/copyInto(kotlin/DoubleArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/DoubleArray // kotlin.collections/copyInto|copyInto@kotlin.DoubleArray(kotlin.DoubleArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/DoubleArray).kotlin.collections/copyOf(): kotlin/DoubleArray // kotlin.collections/copyOf|copyOf@kotlin.DoubleArray(){}[0]

// Targets: [js]
final inline fun (kotlin/DoubleArray).kotlin.collections/plus(kotlin/Double): kotlin/DoubleArray // kotlin.collections/plus|plus@kotlin.DoubleArray(kotlin.Double){}[0]

// Targets: [js]
final inline fun (kotlin/DoubleArray).kotlin.collections/plus(kotlin/DoubleArray): kotlin/DoubleArray // kotlin.collections/plus|plus@kotlin.DoubleArray(kotlin.DoubleArray){}[0]

// Targets: [js]
final inline fun (kotlin/DoubleArray).kotlin.collections/sort(noinline kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.DoubleArray(kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/Float).kotlin.math/pow(kotlin/Float): kotlin/Float // kotlin.math/pow|pow@kotlin.Float(kotlin.Float){}[0]

// Targets: [js]
final inline fun (kotlin/Float).kotlin.math/pow(kotlin/Int): kotlin/Float // kotlin.math/pow|pow@kotlin.Float(kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/Float).kotlin.math/roundToInt(): kotlin/Int // kotlin.math/roundToInt|roundToInt@kotlin.Float(){}[0]

// Targets: [js]
final inline fun (kotlin/Float).kotlin.math/roundToLong(): kotlin/Long // kotlin.math/roundToLong|roundToLong@kotlin.Float(){}[0]

// Targets: [js]
final inline fun (kotlin/Float).kotlin.math/withSign(kotlin/Float): kotlin/Float // kotlin.math/withSign|withSign@kotlin.Float(kotlin.Float){}[0]

// Targets: [js]
final inline fun (kotlin/Float).kotlin.math/withSign(kotlin/Int): kotlin/Float // kotlin.math/withSign|withSign@kotlin.Float(kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/FloatArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Float> // kotlin.collections/asList|asList@kotlin.FloatArray(){}[0]

// Targets: [js]
final inline fun (kotlin/FloatArray).kotlin.collections/copyInto(kotlin/FloatArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/FloatArray // kotlin.collections/copyInto|copyInto@kotlin.FloatArray(kotlin.FloatArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/FloatArray).kotlin.collections/copyOf(): kotlin/FloatArray // kotlin.collections/copyOf|copyOf@kotlin.FloatArray(){}[0]

// Targets: [js]
final inline fun (kotlin/FloatArray).kotlin.collections/plus(kotlin/Float): kotlin/FloatArray // kotlin.collections/plus|plus@kotlin.FloatArray(kotlin.Float){}[0]

// Targets: [js]
final inline fun (kotlin/FloatArray).kotlin.collections/plus(kotlin/FloatArray): kotlin/FloatArray // kotlin.collections/plus|plus@kotlin.FloatArray(kotlin.FloatArray){}[0]

// Targets: [js]
final inline fun (kotlin/FloatArray).kotlin.collections/sort(noinline kotlin/Function2<kotlin/Float, kotlin/Float, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.FloatArray(kotlin.Function2<kotlin.Float,kotlin.Float,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/Int).kotlin/countLeadingZeroBits(): kotlin/Int // kotlin/countLeadingZeroBits|countLeadingZeroBits@kotlin.Int(){}[0]

// Targets: [js]
final inline fun (kotlin/IntArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Int> // kotlin.collections/asList|asList@kotlin.IntArray(){}[0]

// Targets: [js]
final inline fun (kotlin/IntArray).kotlin.collections/copyInto(kotlin/IntArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/IntArray // kotlin.collections/copyInto|copyInto@kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/IntArray).kotlin.collections/copyOf(): kotlin/IntArray // kotlin.collections/copyOf|copyOf@kotlin.IntArray(){}[0]

// Targets: [js]
final inline fun (kotlin/IntArray).kotlin.collections/plus(kotlin/Int): kotlin/IntArray // kotlin.collections/plus|plus@kotlin.IntArray(kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/IntArray).kotlin.collections/plus(kotlin/IntArray): kotlin/IntArray // kotlin.collections/plus|plus@kotlin.IntArray(kotlin.IntArray){}[0]

// Targets: [js]
final inline fun (kotlin/IntArray).kotlin.collections/sort(noinline kotlin/Function2<kotlin/Int, kotlin/Int, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.IntArray(kotlin.Function2<kotlin.Int,kotlin.Int,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/LongArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Long> // kotlin.collections/asList|asList@kotlin.LongArray(){}[0]

// Targets: [js]
final inline fun (kotlin/LongArray).kotlin.collections/copyInto(kotlin/LongArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/LongArray // kotlin.collections/copyInto|copyInto@kotlin.LongArray(kotlin.LongArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/LongArray).kotlin.collections/plus(kotlin/Long): kotlin/LongArray // kotlin.collections/plus|plus@kotlin.LongArray(kotlin.Long){}[0]

// Targets: [js]
final inline fun (kotlin/LongArray).kotlin.collections/plus(kotlin/LongArray): kotlin/LongArray // kotlin.collections/plus|plus@kotlin.LongArray(kotlin.LongArray){}[0]

// Targets: [js]
final inline fun (kotlin/LongArray).kotlin.collections/sort(noinline kotlin/Function2<kotlin/Long, kotlin/Long, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.LongArray(kotlin.Function2<kotlin.Long,kotlin.Long,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/ShortArray).kotlin.collections/asList(): kotlin.collections/List<kotlin/Short> // kotlin.collections/asList|asList@kotlin.ShortArray(){}[0]

// Targets: [js]
final inline fun (kotlin/ShortArray).kotlin.collections/copyInto(kotlin/ShortArray, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/ShortArray // kotlin.collections/copyInto|copyInto@kotlin.ShortArray(kotlin.ShortArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun (kotlin/ShortArray).kotlin.collections/copyOf(): kotlin/ShortArray // kotlin.collections/copyOf|copyOf@kotlin.ShortArray(){}[0]

// Targets: [js]
final inline fun (kotlin/ShortArray).kotlin.collections/plus(kotlin/Short): kotlin/ShortArray // kotlin.collections/plus|plus@kotlin.ShortArray(kotlin.Short){}[0]

// Targets: [js]
final inline fun (kotlin/ShortArray).kotlin.collections/plus(kotlin/ShortArray): kotlin/ShortArray // kotlin.collections/plus|plus@kotlin.ShortArray(kotlin.ShortArray){}[0]

// Targets: [js]
final inline fun (kotlin/ShortArray).kotlin.collections/sort(noinline kotlin/Function2<kotlin/Short, kotlin/Short, kotlin/Int>) // kotlin.collections/sort|sort@kotlin.ShortArray(kotlin.Function2<kotlin.Short,kotlin.Short,kotlin.Int>){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/concat(kotlin/String): kotlin/String // kotlin.text/concat|concat@kotlin.String(kotlin.String){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/lowercase(): kotlin/String // kotlin.text/lowercase|lowercase@kotlin.String(){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/match(kotlin/String): kotlin/Array<kotlin/String>? // kotlin.text/match|match@kotlin.String(kotlin.String){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/toFloat(): kotlin/Float // kotlin.text/toFloat|toFloat@kotlin.String(){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/toFloatOrNull(): kotlin/Float? // kotlin.text/toFloatOrNull|toFloatOrNull@kotlin.String(){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/toLowerCase(): kotlin/String // kotlin.text/toLowerCase|toLowerCase@kotlin.String(){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/toUpperCase(): kotlin/String // kotlin.text/toUpperCase|toUpperCase@kotlin.String(){}[0]

// Targets: [js]
final inline fun (kotlin/String).kotlin.text/uppercase(): kotlin/String // kotlin.text/uppercase|uppercase@kotlin.String(){}[0]

// Targets: [js]
final inline fun /withType(kotlin/String, dynamic): dynamic // /withType|withType(kotlin.String;<dynamic>){}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.js.collections/JsReadonlyMap<#A, #B>).kotlin.js.collections/toMap(): kotlin.collections/Map<#A, #B> // kotlin.js.collections/toMap|toMap@kotlin.js.collections.JsReadonlyMap<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.js.collections/JsReadonlyMap<#A, #B>).kotlin.js.collections/toMutableMap(): kotlin.collections/MutableMap<#A, #B> // kotlin.js.collections/toMutableMap|toMutableMap@kotlin.js.collections.JsReadonlyMap<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.js/Promise<kotlin.js/Promise<#A>>).kotlin.js/then(noinline kotlin/Function1<#A, #B>?): kotlin.js/Promise<#B> // kotlin.js/then|then@kotlin.js.Promise<kotlin.js.Promise<0:0>>(kotlin.Function1<0:0,0:1>?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.js/Promise<kotlin.js/Promise<#A>>).kotlin.js/then(noinline kotlin/Function1<#A, #B>?, noinline kotlin/Function1<kotlin/Throwable, #B>?): kotlin.js/Promise<#B> // kotlin.js/then|then@kotlin.js.Promise<kotlin.js.Promise<0:0>>(kotlin.Function1<0:0,0:1>?;kotlin.Function1<kotlin.Throwable,0:1>?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlin.collections/linkedMapOf(): kotlin.collections/LinkedHashMap<#A, #B> // kotlin.collections/linkedMapOf|linkedMapOf(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (dynamic).kotlin.js/unsafeCast(): #A // kotlin.js/unsafeCast|unsafeCast@<dynamic>(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin.js.collections/JsReadonlyArray<#A>).kotlin.js.collections/toList(): kotlin.collections/List<#A> // kotlin.js.collections/toList|toList@kotlin.js.collections.JsReadonlyArray<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin.js.collections/JsReadonlyArray<#A>).kotlin.js.collections/toMutableList(): kotlin.collections/MutableList<#A> // kotlin.js.collections/toMutableList|toMutableList@kotlin.js.collections.JsReadonlyArray<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin.js.collections/JsReadonlySet<#A>).kotlin.js.collections/toMutableSet(): kotlin.collections/MutableSet<#A> // kotlin.js.collections/toMutableSet|toMutableSet@kotlin.js.collections.JsReadonlySet<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin.js.collections/JsReadonlySet<#A>).kotlin.js.collections/toSet(): kotlin.collections/Set<#A> // kotlin.js.collections/toSet|toSet@kotlin.js.collections.JsReadonlySet<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Any?).kotlin.js/unsafeCast(): #A // kotlin.js/unsafeCast|unsafeCast@kotlin.Any?(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/copyOf(): kotlin/Array<#A> // kotlin.collections/copyOf|copyOf@kotlin.Array<0:0>(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/copyOf(kotlin/Int): kotlin/Array<#A?> // kotlin.collections/copyOf|copyOf@kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/copyOfRange(kotlin/Int, kotlin/Int): kotlin/Array<#A> // kotlin.collections/copyOfRange|copyOfRange@kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/plus(#A): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/plus(kotlin.collections/Collection<#A>): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<0:0>(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<#A>).kotlin.collections/plus(kotlin/Array<out #A>): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/copyInto(kotlin/Array<#A>, kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ...): kotlin/Array<#A> // kotlin.collections/copyInto|copyInto@kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/copyOf(): kotlin/Array<#A> // kotlin.collections/copyOf|copyOf@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/plus(#A): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<out|0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/plus(kotlin/Array<out #A>): kotlin/Array<#A> // kotlin.collections/plus|plus@kotlin.Array<out|0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlin.collections/plusElement(#A): kotlin/Array<#A> // kotlin.collections/plusElement|plusElement@kotlin.Array<out|0:0>(0:0){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> (kotlin/Array<out #A>?).kotlin.collections/orEmpty(): kotlin/Array<out #A> // kotlin.collections/orEmpty|orEmpty@kotlin.Array<out|0:0>?(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> kotlin.collections/linkedSetOf(): kotlin.collections/LinkedHashSet<#A> // kotlin.collections/linkedSetOf|linkedSetOf(){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun <#A: kotlin/Any?> kotlin/synchronized(kotlin/Any, kotlin/Function0<#A>): #A // kotlin/synchronized|synchronized(kotlin.Any;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]

// Targets: [js]
final inline fun kotlin.js/dateLocaleOptions(kotlin/Function1<kotlin.js/Date.LocaleOptions, kotlin/Unit>): kotlin.js/Date.LocaleOptions // kotlin.js/dateLocaleOptions|dateLocaleOptions(kotlin.Function1<kotlin.js.Date.LocaleOptions,kotlin.Unit>){}[0]

// Targets: [js]
final inline fun kotlin.math/abs(kotlin/Double): kotlin/Double // kotlin.math/abs|abs(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/abs(kotlin/Float): kotlin/Float // kotlin.math/abs|abs(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/acos(kotlin/Double): kotlin/Double // kotlin.math/acos|acos(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/acos(kotlin/Float): kotlin/Float // kotlin.math/acos|acos(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/acosh(kotlin/Double): kotlin/Double // kotlin.math/acosh|acosh(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/acosh(kotlin/Float): kotlin/Float // kotlin.math/acosh|acosh(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/asin(kotlin/Double): kotlin/Double // kotlin.math/asin|asin(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/asin(kotlin/Float): kotlin/Float // kotlin.math/asin|asin(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/asinh(kotlin/Double): kotlin/Double // kotlin.math/asinh|asinh(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/asinh(kotlin/Float): kotlin/Float // kotlin.math/asinh|asinh(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/atan(kotlin/Double): kotlin/Double // kotlin.math/atan|atan(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/atan(kotlin/Float): kotlin/Float // kotlin.math/atan|atan(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/atan2(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/atan2|atan2(kotlin.Double;kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/atan2(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/atan2|atan2(kotlin.Float;kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/atanh(kotlin/Double): kotlin/Double // kotlin.math/atanh|atanh(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/atanh(kotlin/Float): kotlin/Float // kotlin.math/atanh|atanh(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/cbrt(kotlin/Double): kotlin/Double // kotlin.math/cbrt|cbrt(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/cbrt(kotlin/Float): kotlin/Float // kotlin.math/cbrt|cbrt(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/ceil(kotlin/Double): kotlin/Double // kotlin.math/ceil|ceil(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/ceil(kotlin/Float): kotlin/Float // kotlin.math/ceil|ceil(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/cos(kotlin/Double): kotlin/Double // kotlin.math/cos|cos(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/cos(kotlin/Float): kotlin/Float // kotlin.math/cos|cos(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/cosh(kotlin/Double): kotlin/Double // kotlin.math/cosh|cosh(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/cosh(kotlin/Float): kotlin/Float // kotlin.math/cosh|cosh(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/exp(kotlin/Double): kotlin/Double // kotlin.math/exp|exp(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/exp(kotlin/Float): kotlin/Float // kotlin.math/exp|exp(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/expm1(kotlin/Double): kotlin/Double // kotlin.math/expm1|expm1(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/expm1(kotlin/Float): kotlin/Float // kotlin.math/expm1|expm1(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/floor(kotlin/Double): kotlin/Double // kotlin.math/floor|floor(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/floor(kotlin/Float): kotlin/Float // kotlin.math/floor|floor(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/hypot(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/hypot|hypot(kotlin.Double;kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/hypot(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/hypot|hypot(kotlin.Float;kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/ln(kotlin/Double): kotlin/Double // kotlin.math/ln|ln(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/ln(kotlin/Float): kotlin/Float // kotlin.math/ln|ln(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/ln1p(kotlin/Double): kotlin/Double // kotlin.math/ln1p|ln1p(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/ln1p(kotlin/Float): kotlin/Float // kotlin.math/ln1p|ln1p(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/log(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/log|log(kotlin.Float;kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/log10(kotlin/Double): kotlin/Double // kotlin.math/log10|log10(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/log10(kotlin/Float): kotlin/Float // kotlin.math/log10|log10(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/log2(kotlin/Double): kotlin/Double // kotlin.math/log2|log2(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/log2(kotlin/Float): kotlin/Float // kotlin.math/log2|log2(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/max(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/max|max(kotlin.Double;kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/max(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/max|max(kotlin.Float;kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/max(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.math/max|max(kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun kotlin.math/max(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.math/max|max(kotlin.Long;kotlin.Long){}[0]

// Targets: [js]
final inline fun kotlin.math/min(kotlin/Double, kotlin/Double): kotlin/Double // kotlin.math/min|min(kotlin.Double;kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/min(kotlin/Float, kotlin/Float): kotlin/Float // kotlin.math/min|min(kotlin.Float;kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/min(kotlin/Int, kotlin/Int): kotlin/Int // kotlin.math/min|min(kotlin.Int;kotlin.Int){}[0]

// Targets: [js]
final inline fun kotlin.math/min(kotlin/Long, kotlin/Long): kotlin/Long // kotlin.math/min|min(kotlin.Long;kotlin.Long){}[0]

// Targets: [js]
final inline fun kotlin.math/round(kotlin/Float): kotlin/Float // kotlin.math/round|round(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/sign(kotlin/Double): kotlin/Double // kotlin.math/sign|sign(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/sign(kotlin/Float): kotlin/Float // kotlin.math/sign|sign(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/sin(kotlin/Double): kotlin/Double // kotlin.math/sin|sin(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/sin(kotlin/Float): kotlin/Float // kotlin.math/sin|sin(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/sinh(kotlin/Double): kotlin/Double // kotlin.math/sinh|sinh(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/sinh(kotlin/Float): kotlin/Float // kotlin.math/sinh|sinh(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/sqrt(kotlin/Double): kotlin/Double // kotlin.math/sqrt|sqrt(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/sqrt(kotlin/Float): kotlin/Float // kotlin.math/sqrt|sqrt(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/tan(kotlin/Double): kotlin/Double // kotlin.math/tan|tan(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/tan(kotlin/Float): kotlin/Float // kotlin.math/tan|tan(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/tanh(kotlin/Double): kotlin/Double // kotlin.math/tanh|tanh(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/tanh(kotlin/Float): kotlin/Float // kotlin.math/tanh|tanh(kotlin.Float){}[0]

// Targets: [js]
final inline fun kotlin.math/truncate(kotlin/Double): kotlin/Double // kotlin.math/truncate|truncate(kotlin.Double){}[0]

// Targets: [js]
final inline fun kotlin.math/truncate(kotlin/Float): kotlin/Float // kotlin.math/truncate|truncate(kotlin.Float){}[0]

// Targets: [js]
final suspend fun <#A: kotlin/Any?> kotlin.js/returnIfSuspended(kotlin/Any?): #A // kotlin.js/returnIfSuspended|returnIfSuspended(kotlin.Any?){0§<kotlin.Any?>}[0]

// Targets: [js]
final suspend inline fun <#A: kotlin/Any?> kotlin.js/suspendCoroutineUninterceptedOrReturnJS(kotlin/Function1<kotlin.coroutines/Continuation<#A>, kotlin/Any?>): #A // kotlin.js/suspendCoroutineUninterceptedOrReturnJS|suspendCoroutineUninterceptedOrReturnJS(kotlin.Function1<kotlin.coroutines.Continuation<0:0>,kotlin.Any?>){0§<kotlin.Any?>}[0]

// Targets: [js]
final suspend inline fun kotlin.js/getCoroutineContext(): kotlin.coroutines/CoroutineContext // kotlin.js/getCoroutineContext|getCoroutineContext(){}[0]

// Targets: [wasmJs]
open annotation class kotlin/JsFun : kotlin/Annotation { // kotlin/JsFun|null[0]
    constructor <init>(kotlin/String) // kotlin/JsFun.<init>|<init>(kotlin.String){}[0]

    final val code // kotlin/JsFun.code|{}code[0]
        final fun <get-code>(): kotlin/String // kotlin/JsFun.code.<get-code>|<get-code>(){}[0]
}

// Targets: [wasmJs]
abstract interface kotlin.js/Dynamic : kotlin.js/JsAny // kotlin.js/Dynamic|null[0]

// Targets: [wasmJs]
abstract interface kotlin.js/JsAny // kotlin.js/JsAny|null[0]

// Targets: [wasmJs]
sealed interface <#A: out kotlin/Any> kotlin.js/JsReference : kotlin.js/JsAny // kotlin.js/JsReference|null[0]

// Targets: [wasmJs]
final class <#A: kotlin.js/JsAny?> kotlin.js/JsArray : kotlin.js/JsAny { // kotlin.js/JsArray|null[0]
    constructor <init>() // kotlin.js/JsArray.<init>|<init>(){}[0]

    final val length // kotlin.js/JsArray.length|{}length[0]
        final fun <get-length>(): kotlin/Int // kotlin.js/JsArray.length.<get-length>|<get-length>(){}[0]
}

// Targets: [wasmJs]
final class <#A: out kotlin.js/JsAny?> kotlin.js/Promise : kotlin.js/JsAny { // kotlin.js/Promise|null[0]
    constructor <init>(kotlin/Function2<kotlin/Function1<#A, kotlin/Unit>, kotlin/Function1<kotlin.js/JsAny, kotlin/Unit>, kotlin/Unit>) // kotlin.js/Promise.<init>|<init>(kotlin.Function2<kotlin.Function1<1:0,kotlin.Unit>,kotlin.Function1<kotlin.js.JsAny,kotlin.Unit>,kotlin.Unit>){}[0]

    final fun <#A1: kotlin.js/JsAny?> catch(kotlin/Function1<kotlin.js/JsAny, #A1>): kotlin.js/Promise<#A1> // kotlin.js/Promise.catch|catch(kotlin.Function1<kotlin.js.JsAny,0:0>){0§<kotlin.js.JsAny?>}[0]
    final fun <#A1: kotlin.js/JsAny?> then(kotlin/Function1<#A, #A1>?): kotlin.js/Promise<#A1> // kotlin.js/Promise.then|then(kotlin.Function1<1:0,0:0>?){0§<kotlin.js.JsAny?>}[0]
    final fun <#A1: kotlin.js/JsAny?> then(kotlin/Function1<#A, #A1>?, kotlin/Function1<kotlin.js/JsAny, #A1>?): kotlin.js/Promise<#A1> // kotlin.js/Promise.then|then(kotlin.Function1<1:0,0:0>?;kotlin.Function1<kotlin.js.JsAny,0:0>?){0§<kotlin.js.JsAny?>}[0]
    final fun finally(kotlin/Function0<kotlin/Unit>): kotlin.js/Promise<#A> // kotlin.js/Promise.finally|finally(kotlin.Function0<kotlin.Unit>){}[0]

    final object Companion { // kotlin.js/Promise.Companion|null[0]
        final fun <#A2: kotlin.js/JsAny?> all(kotlin.js/JsArray<out kotlin.js/Promise<#A2>>): kotlin.js/Promise<kotlin.js/JsArray<out #A2>> // kotlin.js/Promise.Companion.all|all(kotlin.js.JsArray<out|kotlin.js.Promise<0:0>>){0§<kotlin.js.JsAny?>}[0]
        final fun <#A2: kotlin.js/JsAny?> race(kotlin.js/JsArray<out kotlin.js/Promise<#A2>>): kotlin.js/Promise<#A2> // kotlin.js/Promise.Companion.race|race(kotlin.js.JsArray<out|kotlin.js.Promise<0:0>>){0§<kotlin.js.JsAny?>}[0]
        final fun <#A2: kotlin.js/JsAny?> resolve(#A2): kotlin.js/Promise<#A2> // kotlin.js/Promise.Companion.resolve|resolve(0:0){0§<kotlin.js.JsAny?>}[0]
        final fun <#A2: kotlin.js/JsAny?> resolve(kotlin.js/Promise<#A2>): kotlin.js/Promise<#A2> // kotlin.js/Promise.Companion.resolve|resolve(kotlin.js.Promise<0:0>){0§<kotlin.js.JsAny?>}[0]
        final fun reject(kotlin.js/JsAny): kotlin.js/Promise<kotlin/Nothing> // kotlin.js/Promise.Companion.reject|reject(kotlin.js.JsAny){}[0]
    }
}

// Targets: [wasmJs]
final class kotlin.js/JsBigInt : kotlin.js/JsAny // kotlin.js/JsBigInt|null[0]

// Targets: [wasmJs]
final class kotlin.js/JsBoolean : kotlin.js/JsAny // kotlin.js/JsBoolean|null[0]

// Targets: [wasmJs]
final class kotlin.js/JsException : kotlin/Throwable { // kotlin.js/JsException|null[0]
    final val message // kotlin.js/JsException.message|{}message[0]
        final fun <get-message>(): kotlin/String // kotlin.js/JsException.message.<get-message>|<get-message>(){}[0]
    final val thrownValue // kotlin.js/JsException.thrownValue|{}thrownValue[0]
        final fun <get-thrownValue>(): kotlin.js/JsAny? // kotlin.js/JsException.thrownValue.<get-thrownValue>|<get-thrownValue>(){}[0]
}

// Targets: [wasmJs]
final class kotlin.js/JsNumber : kotlin.js/JsAny // kotlin.js/JsNumber|null[0]

// Targets: [wasmJs]
final class kotlin.js/JsString : kotlin.js/JsAny // kotlin.js/JsString|null[0]

// Targets: [wasmJs]
final fun (kotlin.js/JsAny).kotlin.js/toThrowableOrNull(): kotlin/Throwable? // kotlin.js/toThrowableOrNull|toThrowableOrNull@kotlin.js.JsAny(){}[0]

// Targets: [wasmJs]
final fun (kotlin.js/JsBigInt).kotlin.js/toLong(): kotlin/Long // kotlin.js/toLong|toLong@kotlin.js.JsBigInt(){}[0]

// Targets: [wasmJs]
final fun (kotlin.js/JsBoolean).kotlin.js/toBoolean(): kotlin/Boolean // kotlin.js/toBoolean|toBoolean@kotlin.js.JsBoolean(){}[0]

// Targets: [wasmJs]
final fun (kotlin.js/JsNumber).kotlin.js/toDouble(): kotlin/Double // kotlin.js/toDouble|toDouble@kotlin.js.JsNumber(){}[0]

// Targets: [wasmJs]
final fun (kotlin.js/JsNumber).kotlin.js/toInt(): kotlin/Int // kotlin.js/toInt|toInt@kotlin.js.JsNumber(){}[0]

// Targets: [wasmJs]
final fun (kotlin/Any).kotlin.js/asDynamic(): kotlin.js/JsAny // kotlin.js/asDynamic|asDynamic@kotlin.Any(){}[0]

// Targets: [wasmJs]
final fun (kotlin/Boolean).kotlin.js/toJsBoolean(): kotlin.js/JsBoolean // kotlin.js/toJsBoolean|toJsBoolean@kotlin.Boolean(){}[0]

// Targets: [wasmJs]
final fun (kotlin/Double).kotlin.js/toJsNumber(): kotlin.js/JsNumber // kotlin.js/toJsNumber|toJsNumber@kotlin.Double(){}[0]

// Targets: [wasmJs]
final fun (kotlin/Int).kotlin.js/toJsNumber(): kotlin.js/JsNumber // kotlin.js/toJsNumber|toJsNumber@kotlin.Int(){}[0]

// Targets: [wasmJs]
final fun (kotlin/Long).kotlin.js/toJsBigInt(): kotlin.js/JsBigInt // kotlin.js/toJsBigInt|toJsBigInt@kotlin.Long(){}[0]

// Targets: [wasmJs]
final fun (kotlin/String).kotlin.js/asDynamic(): kotlin.js/JsString // kotlin.js/asDynamic|asDynamic@kotlin.String(){}[0]

// Targets: [wasmJs]
final fun (kotlin/String).kotlin.js/toJsString(): kotlin.js/JsString // kotlin.js/toJsString|toJsString@kotlin.String(){}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny> (kotlin.js/JsAny).kotlin.js/unsafeCast(): #A // kotlin.js/unsafeCast|unsafeCast@kotlin.js.JsAny(){0§<kotlin.js.JsAny>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (kotlin.collections/List<#A>).kotlin.js/toJsArray(): kotlin.js/JsArray<#A> // kotlin.js/toJsArray|toJsArray@kotlin.collections.List<0:0>(){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (kotlin.js/JsArray<#A>).kotlin.js/get(kotlin/Int): #A? // kotlin.js/get|get@kotlin.js.JsArray<0:0>(kotlin.Int){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (kotlin.js/JsArray<#A>).kotlin.js/set(kotlin/Int, #A) // kotlin.js/set|set@kotlin.js.JsArray<0:0>(kotlin.Int;0:0){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (kotlin.js/JsArray<#A>).kotlin.js/toArray(): kotlin/Array<#A> // kotlin.js/toArray|toArray@kotlin.js.JsArray<0:0>(){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (kotlin.js/JsArray<#A>).kotlin.js/toList(): kotlin.collections/List<#A> // kotlin.js/toList|toList@kotlin.js.JsArray<0:0>(){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (kotlin/Array<#A>).kotlin.js/toJsArray(): kotlin.js/JsArray<#A> // kotlin.js/toJsArray|toJsArray@kotlin.Array<0:0>(){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin/Any> (#A).kotlin.js/toJsReference(): kotlin.js/JsReference<#A> // kotlin.js/toJsReference|toJsReference@0:0(){0§<kotlin.Any>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin/Any> (kotlin.js/JsReference<#A>).kotlin.js/get(): #A // kotlin.js/get|get@kotlin.js.JsReference<0:0>(){0§<kotlin.Any>}[0]

// Targets: [wasmJs]
final fun kotlin.js/js(kotlin/String): kotlin/Nothing // kotlin.js/js|js(kotlin.String){}[0]

// Targets: [wasmWasi]
final var kotlin.wasm.internal/onExportedFunctionExit // kotlin.wasm.internal/onExportedFunctionExit|{}onExportedFunctionExit[0]
    final fun <get-onExportedFunctionExit>(): kotlin/Function0<kotlin/Unit>? // kotlin.wasm.internal/onExportedFunctionExit.<get-onExportedFunctionExit>|<get-onExportedFunctionExit>(){}[0]
    final fun <set-onExportedFunctionExit>(kotlin/Function0<kotlin/Unit>?) // kotlin.wasm.internal/onExportedFunctionExit.<set-onExportedFunctionExit>|<set-onExportedFunctionExit>(kotlin.Function0<kotlin.Unit>?){}[0]
