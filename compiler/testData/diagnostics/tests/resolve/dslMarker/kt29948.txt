package

public val Foo<*>.bad: kotlin.Int
public val Foo<kotlin.Int>.good: kotlin.Int
public fun test(/*0*/ foo: Foo<*>): kotlin.Unit
public fun Foo<*>.badFun(): kotlin.Int

@MyDsl public interface Foo</*0*/ T> {
    public abstract val x: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.DslMarker public final annotation class MyDsl : kotlin.Annotation {
    public constructor MyDsl()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
