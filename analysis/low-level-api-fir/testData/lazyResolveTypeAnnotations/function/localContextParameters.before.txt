@R|Anno|(s = String(foo))  kotlin/String
  context -> FirValueParameterSymbol <local>/par from FirRegularPropertySymbol <local>/foo
  anchor -> [FirValueParameterSymbol <local>/par from FirRegularPropertySymbol <local>/foo]

@R|Anno|(s = String(baz))  kotlin/String
  context -> FirValueParameterSymbol <local>/par from FirNamedFunctionSymbol <local>/baz
  anchor -> [FirValueParameterSymbol <local>/par from FirNamedFunctionSymbol <local>/baz]

FILE: [ResolvedTo(IMPORTS)] localContextParameters.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=/Anno.s] s: R|kotlin/String|): R|Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val s: R|kotlin/String| = R|<local>/s|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun f1(): R|kotlin/Unit| {
        local final [ResolvedTo(BODY_RESOLVE)] class Foo : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] constructor(): R|<local>/Foo| {
                super<R|kotlin/Any|>()
            }

            context([ResolvedTo(BODY_RESOLVE)] par: R|@R|Anno|(s = String(foo))  kotlin/String|)
            public final [ResolvedTo(BODY_RESOLVE)] val foo: R|kotlin/String|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String| {
                    ^ String(hello)
                }

            context([ResolvedTo(BODY_RESOLVE)] par: R|@R|Anno|(s = String(baz))  kotlin/String|)
            public final [ResolvedTo(BODY_RESOLVE)] fun baz(): R|kotlin/String| {
                ^baz String(hello)
            }

        }

    }
