BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] localFunctionInsideStatement.kts
    SCRIPT: [ResolvedTo(TYPES)] <script-localFunctionInsideStatement.kts>
        [ResolvedTo(TYPES)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] [ContainingScriptKey=FirScriptSymbol <script-localFunctionInsideStatement.kts>] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                LAZY_super<R|kotlin/Any|>
            }

            public final [ResolvedTo(CONTRACTS)] var version: R|kotlin/String| = LAZY_EXPRESSION
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Builder] set([ResolvedTo(CONTRACTS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(CONTRACTS)] fun execute(): R|kotlin/Unit| { LAZY_BLOCK }

        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun build([ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: R|Builder| = R|/build|(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun [ResolvedTo(BODY_RESOLVE)] R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|<local>/A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(BODY_RESOLVE)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
            public [ResolvedTo(BODY_RESOLVE)] get(): R|Builder|


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] localFunctionInsideStatement.kts
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-localFunctionInsideStatement.kts>
        [ResolvedTo(BODY_RESOLVE)] <script receiver parameter>: R|kotlin/script/templates/standard/ScriptTemplateWithArgs|
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] [ContainingScriptKey=FirScriptSymbol <script-localFunctionInsideStatement.kts>] class Builder : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] var version: R|kotlin/String| = String()
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Builder] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(BODY_RESOLVE)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] fun build([ResolvedTo(BODY_RESOLVE)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        public final [ResolvedTo(BODY_RESOLVE)] val $$result: R|Builder| = R|/build|(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun [ResolvedTo(BODY_RESOLVE)] R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|<local>/A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(BODY_RESOLVE)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
            public [ResolvedTo(BODY_RESOLVE)] get(): R|Builder|

