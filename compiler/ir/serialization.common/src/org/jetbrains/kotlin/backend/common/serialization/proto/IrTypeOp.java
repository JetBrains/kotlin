// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp}
 */
public final class IrTypeOp extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp)
    IrTypeOpOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      IrTypeOp.class.getName());
  }
  // Use IrTypeOp.newBuilder() to construct.
  private IrTypeOp(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IrTypeOp() {
    operator_ = 1;
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrTypeOp_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrTypeOp_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp.Builder.class);
  }

  private int bitField0_;
  public static final int OPERATOR_FIELD_NUMBER = 1;
  private int operator_ = 1;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator operator = 1 [features = { ... }</code>
   * @return Whether the operator field is set.
   */
  @java.lang.Override public boolean hasOperator() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator operator = 1 [features = { ... }</code>
   * @return The operator.
   */
  @java.lang.Override public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator getOperator() {
    org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator result = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator.forNumber(operator_);
    return result == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator.CAST : result;
  }

  public static final int OPERAND_FIELD_NUMBER = 2;
  private int operand_ = 0;
  /**
   * <code>int32 operand = 2 [features = { ... }</code>
   * @return Whether the operand field is set.
   */
  @java.lang.Override
  public boolean hasOperand() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int32 operand = 2 [features = { ... }</code>
   * @return The operand.
   */
  @java.lang.Override
  public int getOperand() {
    return operand_;
  }

  public static final int ARGUMENT_FIELD_NUMBER = 3;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument_;
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
   * @return Whether the argument field is set.
   */
  @java.lang.Override
  public boolean hasArgument() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
   * @return The argument.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getArgument() {
    return argument_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : argument_;
  }
  /**
   * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
   */
  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getArgumentOrBuilder() {
    return argument_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : argument_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasOperator()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasOperand()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasArgument()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getArgument().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, operator_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt32(2, operand_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getArgument());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeEnumSize(1, operator_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(2, operand_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(3, getArgument());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp other = (org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp) obj;

    if (hasOperator() != other.hasOperator()) return false;
    if (hasOperator()) {
      if (operator_ != other.operator_) return false;
    }
    if (hasOperand() != other.hasOperand()) return false;
    if (hasOperand()) {
      if (getOperand()
          != other.getOperand()) return false;
    }
    if (hasArgument() != other.hasArgument()) return false;
    if (hasArgument()) {
      if (!getArgument()
          .equals(other.getArgument())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasOperator()) {
      hash = (37 * hash) + OPERATOR_FIELD_NUMBER;
      hash = (53 * hash) + operator_;
    }
    if (hasOperand()) {
      hash = (37 * hash) + OPERAND_FIELD_NUMBER;
      hash = (53 * hash) + getOperand();
    }
    if (hasArgument()) {
      hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
      hash = (53 * hash) + getArgument().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOpOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrTypeOp_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrTypeOp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp.class, org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (org.jetbrains.kotlin.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getArgumentFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      operator_ = 1;
      operand_ = 0;
      argument_ = null;
      if (argumentBuilder_ != null) {
        argumentBuilder_.dispose();
        argumentBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_IrTypeOp_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.operator_ = operator_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.operand_ = operand_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.argument_ = argumentBuilder_ == null
            ? argument_
            : argumentBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp.getDefaultInstance()) return this;
      if (other.hasOperator()) {
        setOperator(other.getOperator());
      }
      if (other.hasOperand()) {
        setOperand(other.getOperand());
      }
      if (other.hasArgument()) {
        mergeArgument(other.getArgument());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasOperator()) {
        return false;
      }
      if (!hasOperand()) {
        return false;
      }
      if (!hasArgument()) {
        return false;
      }
      if (!getArgument().isInitialized()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int tmpRaw = input.readEnum();
              org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator tmpValue =
                  org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(1, tmpRaw);
              } else {
                operator_ = tmpRaw;
                bitField0_ |= 0x00000001;
              }
              break;
            } // case 8
            case 16: {
              operand_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              input.readMessage(
                  getArgumentFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int operator_ = 1;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator operator = 1 [features = { ... }</code>
     * @return Whether the operator field is set.
     */
    @java.lang.Override public boolean hasOperator() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator operator = 1 [features = { ... }</code>
     * @return The operator.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator getOperator() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator result = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator.forNumber(operator_);
      return result == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator.CAST : result;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator operator = 1 [features = { ... }</code>
     * @param value The operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperator(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      operator_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOperator operator = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearOperator() {
      bitField0_ = (bitField0_ & ~0x00000001);
      operator_ = 1;
      onChanged();
      return this;
    }

    private int operand_ ;
    /**
     * <code>int32 operand = 2 [features = { ... }</code>
     * @return Whether the operand field is set.
     */
    @java.lang.Override
    public boolean hasOperand() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 operand = 2 [features = { ... }</code>
     * @return The operand.
     */
    @java.lang.Override
    public int getOperand() {
      return operand_;
    }
    /**
     * <code>int32 operand = 2 [features = { ... }</code>
     * @param value The operand to set.
     * @return This builder for chaining.
     */
    public Builder setOperand(int value) {

      operand_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 operand = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearOperand() {
      bitField0_ = (bitField0_ & ~0x00000002);
      operand_ = 0;
      onChanged();
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument_;
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> argumentBuilder_;
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     * @return Whether the argument field is set.
     */
    public boolean hasArgument() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     * @return The argument.
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getArgument() {
      if (argumentBuilder_ == null) {
        return argument_ == null ? org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : argument_;
      } else {
        return argumentBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     */
    public Builder setArgument(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (argumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        argument_ = value;
      } else {
        argumentBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     */
    public Builder setArgument(
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
      if (argumentBuilder_ == null) {
        argument_ = builderForValue.build();
      } else {
        argumentBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     */
    public Builder mergeArgument(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
      if (argumentBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          argument_ != null &&
          argument_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
          getArgumentBuilder().mergeFrom(value);
        } else {
          argument_ = value;
        }
      } else {
        argumentBuilder_.mergeFrom(value);
      }
      if (argument_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     */
    public Builder clearArgument() {
      bitField0_ = (bitField0_ & ~0x00000004);
      argument_ = null;
      if (argumentBuilder_ != null) {
        argumentBuilder_.dispose();
        argumentBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder getArgumentBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getArgumentFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder getArgumentOrBuilder() {
      if (argumentBuilder_ != null) {
        return argumentBuilder_.getMessageOrBuilder();
      } else {
        return argument_ == null ?
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance() : argument_;
      }
    }
    /**
     * <code>.org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression argument = 3 [features = { ... }</code>
     */
    private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder> 
        getArgumentFieldBuilder() {
      if (argumentBuilder_ == null) {
        argumentBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder, org.jetbrains.kotlin.backend.common.serialization.proto.IrExpressionOrBuilder>(
                getArgument(),
                getParentForChildren(),
                isClean());
        argument_ = null;
      }
      return argumentBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<IrTypeOp>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrTypeOp>() {
    @java.lang.Override
    public IrTypeOp parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<IrTypeOp> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrTypeOp> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOp getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
