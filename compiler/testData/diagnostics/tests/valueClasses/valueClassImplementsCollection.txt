package

package kotlin {

    package kotlin.jvm {

        public final annotation class JvmInline : kotlin.Annotation {
            public constructor JvmInline()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        @kotlin.jvm.JvmInline public final value class UInt {
            public constructor UInt(/*0*/ x: kotlin.Int)
            public final val x: kotlin.Int
            public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
        }

        @kotlin.jvm.JvmInline public final value class UIntArray : kotlin.collections.Collection<kotlin.jvm.UInt> {
            public constructor UIntArray(/*0*/ storage: kotlin.IntArray)
            public open override /*1*/ val size: kotlin.Int
            private final val storage: kotlin.IntArray
            public open override /*1*/ fun contains(/*0*/ element: kotlin.jvm.UInt): kotlin.Boolean
            public open override /*1*/ fun containsAll(/*0*/ elements: kotlin.collections.Collection<kotlin.jvm.UInt>): kotlin.Boolean
            public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun isEmpty(): kotlin.Boolean
            public open override /*1*/ fun iterator(): kotlin.Nothing
            public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
        }
    }
}
