KT element: KtClass
KT element text:
public abstract class Foo public constructor(fromConstructor: kotlin.String) {
    public final var fromConstructor: kotlin.String /* compiled code */ /* hasBackingField: true */

    public final val defaultProperty: kotlin.Int /* compiled code */ /* hasBackingField: true */

    public final var defaultVariable: kotlin.String /* compiled code */ /* hasBackingField: true */

    public final var customAccessorAndBackingField: kotlin.String /* compiled code */ /* hasBackingField: true */
        public final get() { /* compiled code */ }
        public final set(value: kotlin.String) { /* compiled code */ }

    public final val customGetter: kotlin.String /* compiled code */ /* hasBackingField: false */
        public final get() { /* compiled code */ }

    public final var customSetter: kotlin.Int /* compiled code */ /* hasBackingField: true */
        public final set(value: kotlin.Int) { /* compiled code */ }

    public final val customGetterDelegation: kotlin.String by COMPILED_CODE /* compiled code */ /* hasBackingField: false */
        public final get() { /* compiled code */ }

    public final val customGetterDelegationWithBackingField: kotlin.String by COMPILED_CODE /* compiled code */ /* hasBackingField: true */
        public final get() { /* compiled code */ }

    public final val defaultGetterWithAnnotation: kotlin.String /* compiled code */ /* hasBackingField: true */
        @one.Anno public final get

    public final var defaultSetterWithAnotherVisibility: kotlin.String /* compiled code */ /* hasBackingField: true */
        private final set(value: kotlin.String) { /* compiled code */ }

    public final val kotlin.Int.extensionProperty: kotlin.Int /* compiled code */ /* hasBackingField: false */
        public final get() { /* compiled code */ }

    public final val postponed: kotlin.Int /* compiled code */ /* hasBackingField: true */
        public final get() { /* compiled code */ }

    public final lateinit var lateinitVariable: kotlin.String /* compiled code */ /* hasBackingField: true */

    public abstract val abstractProperty: kotlin.Int /* hasBackingField: false */
}
FIR element: FirRegularClassImpl
FIR source kind: KtRealSourceElementKind

FIR element rendered:
public abstract [ResolvedTo(BODY_RESOLVE)] class Foo : R|kotlin/Any| {
    public abstract [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=false] val abstractProperty: R|kotlin/Int|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/Int|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var customAccessorAndBackingField: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=false] val customGetter: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=false, IsDelegatedProperty=true] val customGetterDelegation: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true, IsDelegatedProperty=true] val customGetterDelegationWithBackingField: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var customSetter: R|kotlin/Int|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/Int|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Int|): R|kotlin/Unit|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] val defaultGetterWithAnnotation: R|kotlin/String|
        @R|one/Anno|() public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] val defaultProperty: R|kotlin/Int|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/Int|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var defaultSetterWithAnotherVisibility: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var defaultVariable: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=false] val [ResolvedTo(RAW_FIR)] R|kotlin/Int|.extensionProperty: R|kotlin/Int|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/Int|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var fromConstructor: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

    public final lateinit [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] var lateinitVariable: R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/String|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] set([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/Unit|

    public final [ResolvedTo(BODY_RESOLVE)] [HasBackingFieldKey=true] val postponed: R|kotlin/Int|
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] get(): R|kotlin/Int|

    public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo] constructor([ResolvedTo(BODY_RESOLVE)] fromConstructor: R|kotlin/String|): R|one/Foo|

}
