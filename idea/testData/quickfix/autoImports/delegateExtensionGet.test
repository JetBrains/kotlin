// FILE: first.before.kt
// "Import" "true"
// ERROR: Missing 'getValue(BigTest, KProperty<*>)' method on delegate of type 'DelegateImpl<Int>'

package testing

import some.DelegateImpl

class BigTest {
    val a by <caret>DelegateImpl<Int>()
}



// FILE: second.kt
package some

import kotlin.reflect.KProperty

class DelegateImpl<T> {
    val value: T = null!!
}

public operator fun <T> DelegateImpl<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value



// FILE: first.after.kt
// "Import" "true"
// ERROR: Missing 'getValue(BigTest, KProperty<*>)' method on delegate of type 'DelegateImpl<Int>'

package testing

import some.DelegateImpl
import some.getValue

class BigTest {
    val a by <caret>DelegateImpl<Int>()
}
