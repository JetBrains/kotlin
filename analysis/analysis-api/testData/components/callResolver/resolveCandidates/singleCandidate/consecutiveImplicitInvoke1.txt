KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<UNRESOLVED_REFERENCE_WRONG_RECEIVER: Unresolved reference. None of the following candidates is applicable because of a receiver type mismatch:
  fun Double.invoke(): Unit>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = i
        isSafeNavigation = false
        type = kotlin.Int
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.Double
        returnType = kotlin.Unit
        symbol = /invoke(<extension receiver>: kotlin.Double): kotlin.Unit
        valueParameters = []
        callableIdIfNonLocal = /invoke
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = false

KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = i
        isSafeNavigation = false
        type = kotlin.Int
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.Int
        returnType = kotlin.Long
        symbol = /invoke(<extension receiver>: kotlin.Int): kotlin.Long
        valueParameters = []
        callableIdIfNonLocal = /invoke
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = true

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<UNRESOLVED_REFERENCE_WRONG_RECEIVER: Unresolved reference. None of the following candidates is applicable because of a receiver type mismatch:
  fun Long.invoke(): Double>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = i
        isSafeNavigation = false
        type = kotlin.Int
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.Long
        returnType = kotlin.Double
        symbol = /invoke(<extension receiver>: kotlin.Long): kotlin.Double
        valueParameters = []
        callableIdIfNonLocal = /invoke
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = false
