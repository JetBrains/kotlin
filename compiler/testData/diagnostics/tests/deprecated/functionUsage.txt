package

@kotlin.Deprecated(message = "message") public fun Obsolete(/*0*/ param: kotlin.Int = ...): UsefulClass
public fun block(): kotlin.Unit
public fun expression(): UsefulClass
public fun invoker(): kotlin.Unit
public fun reflection(): kotlin.reflect.KFunction1<kotlin.Int, UsefulClass>
public fun reflection2(): kotlin.reflect.KFunction1<UsefulClass, kotlin.Unit>
@kotlin.Deprecated(message = "does nothing good") public fun kotlin.Any.doNothing(): kotlin.String

public final class Delegation {
    public constructor Delegation()
    public final val x: kotlin.Int
    public final var y: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Initializer {
    public constructor Initializer()
    public final val x: UsefulClass
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Invocable {
    public constructor Invocable()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    @kotlin.Deprecated(message = "message") public final operator fun invoke(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public object InvocableHolder {
    private constructor InvocableHolder()
    public final val invocable: Invocable
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class UsefulClass {
    public constructor UsefulClass(/*0*/ param: kotlin.Int = ...)
    public final val param: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ instance: kotlin.Any, /*1*/ property: kotlin.reflect.KProperty<*>): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    @kotlin.Deprecated(message = "message") public final fun member(): kotlin.Unit
    public final operator fun setValue(/*0*/ instance: kotlin.Any, /*1*/ property: kotlin.reflect.KProperty<*>, /*2*/ value: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
