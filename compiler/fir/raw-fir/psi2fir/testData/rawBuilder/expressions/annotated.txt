FILE: annotated.kt
    @Target(AnnotationTarget#.EXPRESSION#, AnnotationTarget#.LOCAL_VARIABLE#) @Retention(AnnotationRetention#.SOURCE#) public? final? annotation class Ann : R|kotlin/Annotation| {
        public? [ContainingClassKey=Ann] constructor(): R|Ann| {
            super<R|kotlin/Any|>()
        }

    }
    public? final? fun foo(arg: Int): Int {
        when () {
            ==(@Ann() arg#, IntegerLiteral(0)) ->  {
                @Ann() ^foo IntegerLiteral(1)
            }
        }

        @Ann() when () {
            ==(arg#, IntegerLiteral(1)) ->  {
                ^foo @Ann() IntegerLiteral(1)
            }
        }

        ^foo IntegerLiteral(42)
    }
    public? final? data class Two : R|kotlin/Any| {
        public? [ContainingClassKey=Two] constructor(x: Int, y: Int): R|Two| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? get(): Int

        public? final? [IsFromPrimaryConstructor=true] val y: Int = R|<local>/y|
            public? get(): Int

        public final operator fun component1(): Int

        public final operator fun component2(): Int

        public final fun copy(x: Int = this@R|/Two|.R|/Two.x|, y: Int = this@R|/Two|.R|/Two.y|): R|Two|

    }
    public? final? fun bar(two: Two): R|kotlin/Unit| {
        lval <destruct>: <implicit> = two#
        @Ann() lval x: <implicit> = R|<local>/<destruct>|.component1#()
        @Ann() lval y: <implicit> = R|<local>/<destruct>|.component2#()
    }
