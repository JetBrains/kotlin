Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope

FILE: [ResolvedTo(RAW_FIR)] enumClass.kt
    public final? [ResolvedTo(RAW_FIR)] enum class MyEnumClass : R|kotlin/Enum<foo/MyEnumClass>| {
        private [ResolvedTo(RAW_FIR)] constructor(): R|foo/MyEnumClass| {
            LAZY_super<R|kotlin/Enum<foo/MyEnumClass>|>
        }

        public final static [ResolvedTo(RAW_FIR)] enum entry ENTRY1: R|foo/MyEnumClass|
        public final static [ResolvedTo(RAW_FIR)] enum entry ENTRY2: R|foo/MyEnumClass|
        public final static [ResolvedTo(RAW_FIR)] enum entry ENTRY3: R|foo/MyEnumClass|
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val bar: Int = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] constructor(): R|foo/MyEnumClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public final? [ResolvedTo(RAW_FIR)] class Nested : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] constructor(): R|foo/MyEnumClass.NestedClass.Nested| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }

        public final? [ResolvedTo(RAW_FIR)] object NestedObject : R|kotlin/Any| {
            private [ResolvedTo(RAW_FIR)] constructor(): R|foo/MyEnumClass.NestedObject| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? inner [ResolvedTo(RAW_FIR)] class InnerClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] foo/MyEnumClass.constructor(): R|foo/MyEnumClass.InnerClass| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val value: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        }

        public final static [ResolvedTo(RAW_FIR)] fun values(): R|kotlin/Array<foo/MyEnumClass>| {
        }

        public final static [ResolvedTo(RAW_FIR)] fun valueOf([ResolvedTo(RAW_FIR)] value: R|kotlin/String|): R|foo/MyEnumClass| {
        }

        public final static [ResolvedTo(RAW_FIR)] val entries: R|kotlin/enums/EnumEntries<foo/MyEnumClass>|
            public [ResolvedTo(RAW_FIR)] get(): R|kotlin/enums/EnumEntries<foo/MyEnumClass>|

    }
