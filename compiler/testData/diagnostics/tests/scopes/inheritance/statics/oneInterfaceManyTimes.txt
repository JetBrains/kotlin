package

public fun test(): kotlin.Unit

public open class C : I {
    public constructor C()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public const final override /*1*/ /*fake_override*/ val a: kotlin.Int = 1
    public/*package*/ final var b: kotlin.Int
    public/*package*/ open fun bar(): kotlin.Unit
}

public open class D : K, I {
    public constructor D()
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public const final override /*2*/ /*fake_override*/ val a: kotlin.Int = 1
    public/*package*/ final override /*1*/ /*fake_override*/ var b: kotlin.Int
    public/*package*/ final var c: kotlin.Int
    public/*package*/ open override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
    public/*package*/ open fun baz(): kotlin.Unit
}

public open class E : D, I {
    public constructor E()
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public/*package*/ final var a: kotlin.Int
    public/*package*/ final override /*1*/ /*fake_override*/ var b: kotlin.Int
    public/*package*/ final override /*1*/ /*fake_override*/ var c: kotlin.Int
    public/*package*/ open override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
    public/*package*/ open override /*1*/ /*fake_override*/ fun baz(): kotlin.Unit
}

public interface I {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public const final val a: kotlin.Int = 1
}

public open class K : C, I {
    public constructor K()
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}
