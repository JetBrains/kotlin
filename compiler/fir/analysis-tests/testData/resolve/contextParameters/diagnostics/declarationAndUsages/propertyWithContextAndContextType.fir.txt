FILE: propertyWithContextAndContextType.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(a: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/a|
        }

    }
    public final class B : R|kotlin/Any| {
        public constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        public final fun foo(a: R|kotlin/String|): R|kotlin/String| {
            ^foo R|<local>/a|
        }

    }
    context(ctx: R|T|)
    public final fun <T> implicit(): R|T| {
        ^implicit R|<local>/ctx|
    }
    context(c: R|A|)
    public final val a: R|@ContextFunctionTypeParams (B, kotlin/String) -> kotlin/String|
        public get(): R|@ContextFunctionTypeParams (B, kotlin/String) -> kotlin/String| {
            ^ fun <anonymous>(it: R|kotlin/String|): R|kotlin/String| <inline=Unknown>  {
                R|<local>/c|.R|/A.foo|(String())
                ^ R|/implicit|<R|B|>().R|/B.foo|(String())
            }

        }
    context(c: R|B|)
    public final val b: R|@ContextFunctionTypeParams (B, kotlin/String) -> kotlin/String|
        public get(): R|@ContextFunctionTypeParams (B, kotlin/String) -> kotlin/String| {
            ^ fun <anonymous>(it: R|kotlin/String|): R|kotlin/String| <inline=Unknown>  {
                R|<local>/c|.R|/B.foo|(String())
                ^ R|/implicit|<R|B|>().R|/B.foo|(String())
            }

        }
    public final fun test(): R|kotlin/Unit| {
        R|kotlin/with|<R|A|, R|kotlin/String|>(R|/A.A|(), <L> = with@fun R|A|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|/a|.R|SubstitutionOverride<kotlin/Function2.invoke: R|kotlin/String|>|(R|/B.B|(), String())
        }
        )
        R|kotlin/with|<R|B|, R|kotlin/String|>(R|/B.B|(), <L> = with@fun R|B|.<anonymous>(): R|kotlin/String| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|/b|.R|SubstitutionOverride<kotlin/Function2.invoke: R|kotlin/String|>|(R|/B.B|(), String())
        }
        )
    }
