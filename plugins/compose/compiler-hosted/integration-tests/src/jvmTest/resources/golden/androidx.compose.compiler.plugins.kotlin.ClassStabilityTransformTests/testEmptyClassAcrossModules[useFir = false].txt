//
// Source
// ------------------------------------------

import a.*
import androidx.compose.runtime.Composable

@Composable fun A(y: Any) {
    used(y)
    A(Wrapper(Foo()))
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun A(y: Any, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(A)<A(Wrap...>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changedInstance(y)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    used(y)
    A(Wrapper(Foo()), %composer, Wrapper.%stable)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    A(y, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
