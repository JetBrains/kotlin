/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.lang.resolve.lazy;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.lang.resolve.lazy.AbstractLazyResolveNamespaceComparingTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({LazyResolveNamespaceComparingTestGenerated.LoadKotlin.class, LazyResolveNamespaceComparingTestGenerated.CompiledJavaCompareWithKotlin.class, LazyResolveNamespaceComparingTestGenerated.NamespaceComparator.class})
public class LazyResolveNamespaceComparingTestGenerated extends AbstractLazyResolveNamespaceComparingTest {
    @TestMetadata("compiler/testData/loadKotlin")
    @InnerTestClasses({LoadKotlin.Class.class, LoadKotlin.ClassFun.class, LoadKotlin.ClassObject.class, LoadKotlin.Constructor.class, LoadKotlin.DataClass.class, LoadKotlin.Fun.class, LoadKotlin.Prop.class, LoadKotlin.Type.class, LoadKotlin.Visibility.class})
    public static class LoadKotlin extends AbstractLazyResolveNamespaceComparingTest {
        public void testAllFilesPresentInLoadKotlin() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("compiler/testData/loadKotlin/class")
        public static class Class extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInClass() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/class"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("Class.kt")
            public void testClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/Class.kt");
            }
            
            @TestMetadata("ClassInParam.kt")
            public void testClassInParam() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassInParam.kt");
            }
            
            @TestMetadata("ClassInnerClass.kt")
            public void testClassInnerClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassInnerClass.kt");
            }
            
            @TestMetadata("ClassOutParam.kt")
            public void testClassOutParam() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassOutParam.kt");
            }
            
            @TestMetadata("ClassParam.kt")
            public void testClassParam() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassParam.kt");
            }
            
            @TestMetadata("ClassParamReferencesParam.kt")
            public void testClassParamReferencesParam() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassParamReferencesParam.kt");
            }
            
            @TestMetadata("ClassParamReferencesParam2.kt")
            public void testClassParamReferencesParam2() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassParamReferencesParam2.kt");
            }
            
            @TestMetadata("ClassParamReferencesSelf.kt")
            public void testClassParamReferencesSelf() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassParamReferencesSelf.kt");
            }
            
            @TestMetadata("ClassParamUpperClassBound.kt")
            public void testClassParamUpperClassBound() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassParamUpperClassBound.kt");
            }
            
            @TestMetadata("ClassParamUpperClassInterfaceBound.kt")
            public void testClassParamUpperClassInterfaceBound() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassParamUpperClassInterfaceBound.kt");
            }
            
            @TestMetadata("ClassParamUpperInterfaceBound.kt")
            public void testClassParamUpperInterfaceBound() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassParamUpperInterfaceBound.kt");
            }
            
            @TestMetadata("ClassTwoParams.kt")
            public void testClassTwoParams() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassTwoParams.kt");
            }
            
            @TestMetadata("ClassTwoParams2.kt")
            public void testClassTwoParams2() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/ClassTwoParams2.kt");
            }
            
            @TestMetadata("EnumWithGenericConstructorParameter.kt")
            public void testEnumWithGenericConstructorParameter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/EnumWithGenericConstructorParameter.kt");
            }
            
            @TestMetadata("EnumWithPrimitiveConstructorParameter.kt")
            public void testEnumWithPrimitiveConstructorParameter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/EnumWithPrimitiveConstructorParameter.kt");
            }
            
            @TestMetadata("InheritClassSimple.kt")
            public void testInheritClassSimple() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/InheritClassSimple.kt");
            }
            
            @TestMetadata("InheritClassWithParam.kt")
            public void testInheritClassWithParam() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/InheritClassWithParam.kt");
            }
            
            @TestMetadata("InheritTraitWithParam.kt")
            public void testInheritTraitWithParam() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/InheritTraitWithParam.kt");
            }
            
            @TestMetadata("InnerClassExtendInnerClass.kt")
            public void testInnerClassExtendInnerClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/InnerClassExtendInnerClass.kt");
            }
            
            @TestMetadata("InnerGenericClass.kt")
            public void testInnerGenericClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/InnerGenericClass.kt");
            }
            
            @TestMetadata("NamedObject.kt")
            public void testNamedObject() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/NamedObject.kt");
            }
            
            @TestMetadata("NamedObjectInClassObject.kt")
            public void testNamedObjectInClassObject() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/NamedObjectInClassObject.kt");
            }
            
            @TestMetadata("NamedObjectInNamedObject.kt")
            public void testNamedObjectInNamedObject() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/NamedObjectInNamedObject.kt");
            }
            
            @TestMetadata("NamedObjectWithAnotherTopLevelProperty.kt")
            public void testNamedObjectWithAnotherTopLevelProperty() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/NamedObjectWithAnotherTopLevelProperty.kt");
            }
            
            @TestMetadata("NestedClass.kt")
            public void testNestedClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/NestedClass.kt");
            }
            
            @TestMetadata("NestedClassExtendNestedClass.kt")
            public void testNestedClassExtendNestedClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/NestedClassExtendNestedClass.kt");
            }
            
            @TestMetadata("NestedGenericClass.kt")
            public void testNestedGenericClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/NestedGenericClass.kt");
            }
            
            @TestMetadata("SingleAbstractMethod.kt")
            public void testSingleAbstractMethod() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/SingleAbstractMethod.kt");
            }
            
            @TestMetadata("Trait.kt")
            public void testTrait() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/class/Trait.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadKotlin/classFun")
        public static class ClassFun extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInClassFun() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/classFun"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ClassInParamUsedInFun.kt")
            public void testClassInParamUsedInFun() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classFun/ClassInParamUsedInFun.kt");
            }
            
            @TestMetadata("ClassParamUsedInFun.kt")
            public void testClassParamUsedInFun() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classFun/ClassParamUsedInFun.kt");
            }
            
            @TestMetadata("FunDelegationToTraitImpl.kt")
            public void testFunDelegationToTraitImpl() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classFun/FunDelegationToTraitImpl.kt");
            }
            
            @TestMetadata("FunInParamSuper.kt")
            public void testFunInParamSuper() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classFun/FunInParamSuper.kt");
            }
            
            @TestMetadata("TraitFinalFun.kt")
            public void testTraitFinalFun() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classFun/TraitFinalFun.kt");
            }
            
            @TestMetadata("TraitOpenFun.kt")
            public void testTraitOpenFun() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classFun/TraitOpenFun.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadKotlin/classObject")
        public static class ClassObject extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInClassObject() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/classObject"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ClassObjectDeclaresVal.kt")
            public void testClassObjectDeclaresVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classObject/ClassObjectDeclaresVal.kt");
            }
            
            @TestMetadata("ClassObjectDeclaresVar.kt")
            public void testClassObjectDeclaresVar() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classObject/ClassObjectDeclaresVar.kt");
            }
            
            @TestMetadata("ClassObjectExtendsTrait.kt")
            public void testClassObjectExtendsTrait() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classObject/ClassObjectExtendsTrait.kt");
            }
            
            @TestMetadata("ClassObjectExtendsTraitWithTP.kt")
            public void testClassObjectExtendsTraitWithTP() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classObject/ClassObjectExtendsTraitWithTP.kt");
            }
            
            @TestMetadata("SimpleClassObject.kt")
            public void testSimpleClassObject() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/classObject/SimpleClassObject.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadKotlin/constructor")
        @InnerTestClasses({Constructor.Vararg.class})
        public static class Constructor extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInConstructor() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/constructor"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("Constructor0.kt")
            public void testConstructor0() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/Constructor0.kt");
            }
            
            @TestMetadata("Constructor1.kt")
            public void testConstructor1() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/Constructor1.kt");
            }
            
            @TestMetadata("Constructor1WithParamDefaultValue.kt")
            public void testConstructor1WithParamDefaultValue() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/Constructor1WithParamDefaultValue.kt");
            }
            
            @TestMetadata("Constructor2WithOneParamDefaultValue.kt")
            public void testConstructor2WithOneParamDefaultValue() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/Constructor2WithOneParamDefaultValue.kt");
            }
            
            @TestMetadata("ConstructorCollectionParameter.kt")
            public void testConstructorCollectionParameter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/ConstructorCollectionParameter.kt");
            }
            
            @TestMetadata("ConstructorWithTwoDefArgs.kt")
            public void testConstructorWithTwoDefArgs() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/ConstructorWithTwoDefArgs.kt");
            }
            
            @TestMetadata("ConstructorWithTwoTypeParameters.kt")
            public void testConstructorWithTwoTypeParameters() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/ConstructorWithTwoTypeParameters.kt");
            }
            
            @TestMetadata("ConstructorWithTwoTypeParametersAndOneIntValueParameter.kt")
            public void testConstructorWithTwoTypeParametersAndOneIntValueParameter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/ConstructorWithTwoTypeParametersAndOneIntValueParameter.kt");
            }
            
            @TestMetadata("ConstructorWithTwoTypeParametersAndOnePValueParameter.kt")
            public void testConstructorWithTwoTypeParametersAndOnePValueParameter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/ConstructorWithTwoTypeParametersAndOnePValueParameter.kt");
            }
            
            @TestMetadata("ConstructorWithTypeParameter.kt")
            public void testConstructorWithTypeParameter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/ConstructorWithTypeParameter.kt");
            }
            
            @TestMetadata("ConstructorWithTypeParametersEAndOnePValueParameter.kt")
            public void testConstructorWithTypeParametersEAndOnePValueParameter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/ConstructorWithTypeParametersEAndOnePValueParameter.kt");
            }
            
            @TestMetadata("InnerClassConstructorWithDefArgs.kt")
            public void testInnerClassConstructorWithDefArgs() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/InnerClassConstructorWithDefArgs.kt");
            }
            
            @TestMetadata("PrivateConstructor1WithParamDefaultValue.kt")
            public void testPrivateConstructor1WithParamDefaultValue() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/PrivateConstructor1WithParamDefaultValue.kt");
            }
            
            @TestMetadata("compiler/testData/loadKotlin/constructor/vararg")
            public static class Vararg extends AbstractLazyResolveNamespaceComparingTest {
                public void testAllFilesPresentInVararg() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/constructor/vararg"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("ConstructorNonLastVararg.kt")
                public void testConstructorNonLastVararg() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/vararg/ConstructorNonLastVararg.kt");
                }
                
                @TestMetadata("ConstructorVararg.kt")
                public void testConstructorVararg() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/constructor/vararg/ConstructorVararg.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Constructor");
                suite.addTestSuite(Constructor.class);
                suite.addTestSuite(Vararg.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/loadKotlin/dataClass")
        public static class DataClass extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInDataClass() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/dataClass"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("MixedComponents.kt")
            public void testMixedComponents() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/dataClass/MixedComponents.kt");
            }
            
            @TestMetadata("NoComponents.kt")
            public void testNoComponents() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/dataClass/NoComponents.kt");
            }
            
            @TestMetadata("OneVal.kt")
            public void testOneVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/dataClass/OneVal.kt");
            }
            
            @TestMetadata("OpenDataClass.kt")
            public void testOpenDataClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/dataClass/OpenDataClass.kt");
            }
            
            @TestMetadata("OpenPropertyFinalComponent.kt")
            public void testOpenPropertyFinalComponent() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/dataClass/OpenPropertyFinalComponent.kt");
            }
            
            @TestMetadata("TwoVals.kt")
            public void testTwoVals() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/dataClass/TwoVals.kt");
            }
            
            @TestMetadata("TwoVars.kt")
            public void testTwoVars() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/dataClass/TwoVars.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadKotlin/fun")
        @InnerTestClasses({Fun.GenericWithTypeVariables.class, Fun.GenericWithoutTypeVariables.class, Fun.NonGeneric.class, Fun.Vararg.class})
        public static class Fun extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInFun() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/fun"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("PropagateSubclassOfComparable.kt")
            public void testPropagateSubclassOfComparable() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/PropagateSubclassOfComparable.kt");
            }
            
            @TestMetadata("compiler/testData/loadKotlin/fun/genericWithTypeVariables")
            public static class GenericWithTypeVariables extends AbstractLazyResolveNamespaceComparingTest {
                public void testAllFilesPresentInGenericWithTypeVariables() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/fun/genericWithTypeVariables"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("FunGenericParam.kt")
                public void testFunGenericParam() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunGenericParam.kt");
                }
                
                @TestMetadata("FunParamParam.kt")
                public void testFunParamParam() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamParam.kt");
                }
                
                @TestMetadata("FunParamParamErased.kt")
                public void testFunParamParamErased() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamParamErased.kt");
                }
                
                @TestMetadata("FunParamReferencesParam.kt")
                public void testFunParamReferencesParam() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamReferencesParam.kt");
                }
                
                @TestMetadata("FunParamTwoUpperBounds.kt")
                public void testFunParamTwoUpperBounds() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamTwoUpperBounds.kt");
                }
                
                @TestMetadata("FunParamUpperClassBound.kt")
                public void testFunParamUpperClassBound() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamUpperClassBound.kt");
                }
                
                @TestMetadata("FunParamUpperClassInterfaceBound.kt")
                public void testFunParamUpperClassInterfaceBound() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamUpperClassInterfaceBound.kt");
                }
                
                @TestMetadata("FunParamUpperInterfaceBound.kt")
                public void testFunParamUpperInterfaceBound() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamUpperInterfaceBound.kt");
                }
                
                @TestMetadata("FunParamVaragParam.kt")
                public void testFunParamVaragParam() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunParamVaragParam.kt");
                }
                
                @TestMetadata("FunTwoTypeParams.kt")
                public void testFunTwoTypeParams() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithTypeVariables/FunTwoTypeParams.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/loadKotlin/fun/genericWithoutTypeVariables")
            public static class GenericWithoutTypeVariables extends AbstractLazyResolveNamespaceComparingTest {
                public void testAllFilesPresentInGenericWithoutTypeVariables() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/fun/genericWithoutTypeVariables"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("FunClassParamNotNull.kt")
                public void testFunClassParamNotNull() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithoutTypeVariables/FunClassParamNotNull.kt");
                }
                
                @TestMetadata("FunClassParamNullable.kt")
                public void testFunClassParamNullable() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithoutTypeVariables/FunClassParamNullable.kt");
                }
                
                @TestMetadata("FunParamNullable.kt")
                public void testFunParamNullable() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithoutTypeVariables/FunParamNullable.kt");
                }
                
                @TestMetadata("ReturnTypeClassParamNotNull.kt")
                public void testReturnTypeClassParamNotNull() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithoutTypeVariables/ReturnTypeClassParamNotNull.kt");
                }
                
                @TestMetadata("ReturnTypeClassParamNullable.kt")
                public void testReturnTypeClassParamNullable() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/genericWithoutTypeVariables/ReturnTypeClassParamNullable.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/loadKotlin/fun/nonGeneric")
            public static class NonGeneric extends AbstractLazyResolveNamespaceComparingTest {
                public void testAllFilesPresentInNonGeneric() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/fun/nonGeneric"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("ClassFun.kt")
                public void testClassFun() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ClassFun.kt");
                }
                
                @TestMetadata("ClassFunGetFoo.kt")
                public void testClassFunGetFoo() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ClassFunGetFoo.kt");
                }
                
                @TestMetadata("ClassFunGetFooSetFoo.kt")
                public void testClassFunGetFooSetFoo() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ClassFunGetFooSetFoo.kt");
                }
                
                @TestMetadata("ClassFunSetFoo.kt")
                public void testClassFunSetFoo() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ClassFunSetFoo.kt");
                }
                
                @TestMetadata("ExtFun.kt")
                public void testExtFun() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ExtFun.kt");
                }
                
                @TestMetadata("ExtFunInClass.kt")
                public void testExtFunInClass() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ExtFunInClass.kt");
                }
                
                @TestMetadata("FunDefaultArg.kt")
                public void testFunDefaultArg() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/FunDefaultArg.kt");
                }
                
                @TestMetadata("FunParamNotNull.kt")
                public void testFunParamNotNull() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/FunParamNotNull.kt");
                }
                
                @TestMetadata("FunVarargInt.kt")
                public void testFunVarargInt() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/FunVarargInt.kt");
                }
                
                @TestMetadata("FunVarargInteger.kt")
                public void testFunVarargInteger() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/FunVarargInteger.kt");
                }
                
                @TestMetadata("ModifierAbstract.kt")
                public void testModifierAbstract() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ModifierAbstract.kt");
                }
                
                @TestMetadata("ModifierOpen.kt")
                public void testModifierOpen() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ModifierOpen.kt");
                }
                
                @TestMetadata("NsFun.kt")
                public void testNsFun() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/NsFun.kt");
                }
                
                @TestMetadata("NsFunGetFoo.kt")
                public void testNsFunGetFoo() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/NsFunGetFoo.kt");
                }
                
                @TestMetadata("ReturnTypeNotNull.kt")
                public void testReturnTypeNotNull() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ReturnTypeNotNull.kt");
                }
                
                @TestMetadata("ReturnTypeNullable.kt")
                public void testReturnTypeNullable() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/nonGeneric/ReturnTypeNullable.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/loadKotlin/fun/vararg")
            public static class Vararg extends AbstractLazyResolveNamespaceComparingTest {
                public void testAllFilesPresentInVararg() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/fun/vararg"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("nonLastVararg.kt")
                public void testNonLastVararg() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/fun/vararg/nonLastVararg.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Fun");
                suite.addTestSuite(Fun.class);
                suite.addTestSuite(GenericWithTypeVariables.class);
                suite.addTestSuite(GenericWithoutTypeVariables.class);
                suite.addTestSuite(NonGeneric.class);
                suite.addTestSuite(Vararg.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/loadKotlin/prop")
        @InnerTestClasses({Prop.DefaultAccessors.class})
        public static class Prop extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInProp() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/prop"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ClassVal.kt")
            public void testClassVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ClassVal.kt");
            }
            
            @TestMetadata("ClassValAbstract.kt")
            public void testClassValAbstract() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ClassValAbstract.kt");
            }
            
            @TestMetadata("ClassVar.kt")
            public void testClassVar() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ClassVar.kt");
            }
            
            @TestMetadata("CollectionSize.kt")
            public void testCollectionSize() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/CollectionSize.kt");
            }
            
            @TestMetadata("ExtValClass.kt")
            public void testExtValClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValClass.kt");
            }
            
            @TestMetadata("ExtValInClass.kt")
            public void testExtValInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValInClass.kt");
            }
            
            @TestMetadata("ExtValInt.kt")
            public void testExtValInt() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValInt.kt");
            }
            
            @TestMetadata("ExtValIntCharSequence.kt")
            public void testExtValIntCharSequence() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValIntCharSequence.kt");
            }
            
            @TestMetadata("ExtValIntCharSequenceQ.kt")
            public void testExtValIntCharSequenceQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValIntCharSequenceQ.kt");
            }
            
            @TestMetadata("ExtValIntListQOfIntInClass.kt")
            public void testExtValIntListQOfIntInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValIntListQOfIntInClass.kt");
            }
            
            @TestMetadata("ExtValIntTInClass.kt")
            public void testExtValIntTInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValIntTInClass.kt");
            }
            
            @TestMetadata("ExtValIntTQInClass.kt")
            public void testExtValIntTQInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValIntTQInClass.kt");
            }
            
            @TestMetadata("ExtValTIntInClass.kt")
            public void testExtValTIntInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtValTIntInClass.kt");
            }
            
            @TestMetadata("ExtVarClass.kt")
            public void testExtVarClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarClass.kt");
            }
            
            @TestMetadata("ExtVarInClass.kt")
            public void testExtVarInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarInClass.kt");
            }
            
            @TestMetadata("ExtVarInt.kt")
            public void testExtVarInt() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarInt.kt");
            }
            
            @TestMetadata("ExtVarIntTInClass.kt")
            public void testExtVarIntTInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarIntTInClass.kt");
            }
            
            @TestMetadata("ExtVarIntTQInClass.kt")
            public void testExtVarIntTQInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarIntTQInClass.kt");
            }
            
            @TestMetadata("ExtVarMapPQInt.kt")
            public void testExtVarMapPQInt() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarMapPQInt.kt");
            }
            
            @TestMetadata("ExtVarTIntInClass.kt")
            public void testExtVarTIntInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarTIntInClass.kt");
            }
            
            @TestMetadata("ExtVarTQIntInClass.kt")
            public void testExtVarTQIntInClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarTQIntInClass.kt");
            }
            
            @TestMetadata("ExtVarl.kt")
            public void testExtVarl() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/ExtVarl.kt");
            }
            
            @TestMetadata("NsVal.kt")
            public void testNsVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/NsVal.kt");
            }
            
            @TestMetadata("NsVar.kt")
            public void testNsVar() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/NsVar.kt");
            }
            
            @TestMetadata("OverrideClassVal.kt")
            public void testOverrideClassVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/OverrideClassVal.kt");
            }
            
            @TestMetadata("OverrideTraitVal.kt")
            public void testOverrideTraitVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/OverrideTraitVal.kt");
            }
            
            @TestMetadata("PropFromSuperclass.kt")
            public void testPropFromSuperclass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/PropFromSuperclass.kt");
            }
            
            @TestMetadata("TraitFinalVar.kt")
            public void testTraitFinalVar() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/TraitFinalVar.kt");
            }
            
            @TestMetadata("TraitOpenVal.kt")
            public void testTraitOpenVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/TraitOpenVal.kt");
            }
            
            @TestMetadata("VarDelegationToTraitImpl.kt")
            public void testVarDelegationToTraitImpl() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/VarDelegationToTraitImpl.kt");
            }
            
            @TestMetadata("compiler/testData/loadKotlin/prop/defaultAccessors")
            public static class DefaultAccessors extends AbstractLazyResolveNamespaceComparingTest {
                public void testAllFilesPresentInDefaultAccessors() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/prop/defaultAccessors"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("ClassVal.kt")
                public void testClassVal() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassVal.kt");
                }
                
                @TestMetadata("ClassValParams.kt")
                public void testClassValParams() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassValParams.kt");
                }
                
                @TestMetadata("ClassValWithGet.kt")
                public void testClassValWithGet() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassValWithGet.kt");
                }
                
                @TestMetadata("ClassVar.kt")
                public void testClassVar() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassVar.kt");
                }
                
                @TestMetadata("ClassVarModality.kt")
                public void testClassVarModality() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassVarModality.kt");
                }
                
                @TestMetadata("ClassVarParams.kt")
                public void testClassVarParams() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassVarParams.kt");
                }
                
                @TestMetadata("ClassVarWithGet.kt")
                public void testClassVarWithGet() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassVarWithGet.kt");
                }
                
                @TestMetadata("ClassVarWithSet.kt")
                public void testClassVarWithSet() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ClassVarWithSet.kt");
                }
                
                @TestMetadata("ExtValLong.kt")
                public void testExtValLong() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ExtValLong.kt");
                }
                
                @TestMetadata("ExtVarLong.kt")
                public void testExtVarLong() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ExtVarLong.kt");
                }
                
                @TestMetadata("ExtVarLongWithSet.kt")
                public void testExtVarLongWithSet() throws Exception {
                    doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/prop/defaultAccessors/ExtVarLongWithSet.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Prop");
                suite.addTestSuite(Prop.class);
                suite.addTestSuite(DefaultAccessors.class);
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/loadKotlin/type")
        public static class Type extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInType() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/type"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("Any.kt")
            public void testAny() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/Any.kt");
            }
            
            @TestMetadata("AnyQ.kt")
            public void testAnyQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/AnyQ.kt");
            }
            
            @TestMetadata("ArrayOfInNumber.kt")
            public void testArrayOfInNumber() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ArrayOfInNumber.kt");
            }
            
            @TestMetadata("ArrayOfInt.kt")
            public void testArrayOfInt() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ArrayOfInt.kt");
            }
            
            @TestMetadata("ArrayOfInteger.kt")
            public void testArrayOfInteger() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ArrayOfInteger.kt");
            }
            
            @TestMetadata("ArrayOfOutNumber.kt")
            public void testArrayOfOutNumber() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ArrayOfOutNumber.kt");
            }
            
            @TestMetadata("ArrayOfOutT.kt")
            public void testArrayOfOutT() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ArrayOfOutT.kt");
            }
            
            @TestMetadata("ArrayOfString.kt")
            public void testArrayOfString() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ArrayOfString.kt");
            }
            
            @TestMetadata("Function1IntString.kt")
            public void testFunction1IntString() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/Function1IntString.kt");
            }
            
            @TestMetadata("Int.kt")
            public void testInt() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/Int.kt");
            }
            
            @TestMetadata("IntArray.kt")
            public void testIntArray() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/IntArray.kt");
            }
            
            @TestMetadata("IntQ.kt")
            public void testIntQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/IntQ.kt");
            }
            
            @TestMetadata("jlInteger.kt")
            public void testJlInteger() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/jlInteger.kt");
            }
            
            @TestMetadata("jlIntegerQ.kt")
            public void testJlIntegerQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/jlIntegerQ.kt");
            }
            
            @TestMetadata("jlNumber.kt")
            public void testJlNumber() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/jlNumber.kt");
            }
            
            @TestMetadata("jlObject.kt")
            public void testJlObject() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/jlObject.kt");
            }
            
            @TestMetadata("jlObjectQ.kt")
            public void testJlObjectQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/jlObjectQ.kt");
            }
            
            @TestMetadata("jlString.kt")
            public void testJlString() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/jlString.kt");
            }
            
            @TestMetadata("jlStringQ.kt")
            public void testJlStringQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/jlStringQ.kt");
            }
            
            @TestMetadata("ListOfAny.kt")
            public void testListOfAny() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ListOfAny.kt");
            }
            
            @TestMetadata("ListOfAnyQ.kt")
            public void testListOfAnyQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ListOfAnyQ.kt");
            }
            
            @TestMetadata("ListOfStar.kt")
            public void testListOfStar() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ListOfStar.kt");
            }
            
            @TestMetadata("ListOfString.kt")
            public void testListOfString() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ListOfString.kt");
            }
            
            @TestMetadata("ListOfjlString.kt")
            public void testListOfjlString() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/ListOfjlString.kt");
            }
            
            @TestMetadata("Nothing.kt")
            public void testNothing() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/Nothing.kt");
            }
            
            @TestMetadata("NothingQ.kt")
            public void testNothingQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/NothingQ.kt");
            }
            
            @TestMetadata("String.kt")
            public void testString() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/String.kt");
            }
            
            @TestMetadata("StringQ.kt")
            public void testStringQ() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/StringQ.kt");
            }
            
            @TestMetadata("Unit.kt")
            public void testUnit() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/type/Unit.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadKotlin/visibility")
        public static class Visibility extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInVisibility() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadKotlin/visibility"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("InternalAbstractTraitMembersOverridden.kt")
            public void testInternalAbstractTraitMembersOverridden() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/InternalAbstractTraitMembersOverridden.kt");
            }
            
            @TestMetadata("InternalClass.kt")
            public void testInternalClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/InternalClass.kt");
            }
            
            @TestMetadata("InternalConstructor.kt")
            public void testInternalConstructor() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/InternalConstructor.kt");
            }
            
            @TestMetadata("InternalTopLevelMembers.kt")
            public void testInternalTopLevelMembers() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/InternalTopLevelMembers.kt");
            }
            
            @TestMetadata("InternalTraitMembers.kt")
            public void testInternalTraitMembers() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/InternalTraitMembers.kt");
            }
            
            @TestMetadata("InternalTraitMembersInherited.kt")
            public void testInternalTraitMembersInherited() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/InternalTraitMembersInherited.kt");
            }
            
            @TestMetadata("PrivateClass.kt")
            public void testPrivateClass() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/PrivateClass.kt");
            }
            
            @TestMetadata("PrivateTopLevelFun.kt")
            public void testPrivateTopLevelFun() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/PrivateTopLevelFun.kt");
            }
            
            @TestMetadata("PrivateTopLevelVal.kt")
            public void testPrivateTopLevelVal() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/PrivateTopLevelVal.kt");
            }
            
            @TestMetadata("TopLevelVarWithPrivateSetter.kt")
            public void testTopLevelVarWithPrivateSetter() throws Exception {
                doTestCheckingPrimaryConstructorsAndAccessors("compiler/testData/loadKotlin/visibility/TopLevelVarWithPrivateSetter.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("LoadKotlin");
            suite.addTestSuite(LoadKotlin.class);
            suite.addTestSuite(Class.class);
            suite.addTestSuite(ClassFun.class);
            suite.addTestSuite(ClassObject.class);
            suite.addTest(Constructor.innerSuite());
            suite.addTestSuite(DataClass.class);
            suite.addTest(Fun.innerSuite());
            suite.addTest(Prop.innerSuite());
            suite.addTestSuite(Type.class);
            suite.addTestSuite(Visibility.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin")
    @InnerTestClasses({CompiledJavaCompareWithKotlin.Annotation.class, CompiledJavaCompareWithKotlin.Constructor.class, CompiledJavaCompareWithKotlin.JavaBean.class, CompiledJavaCompareWithKotlin.KotlinSignature.class, CompiledJavaCompareWithKotlin.Library.class, CompiledJavaCompareWithKotlin.Modality.class, CompiledJavaCompareWithKotlin.Mutability.class, CompiledJavaCompareWithKotlin.NotNull.class, CompiledJavaCompareWithKotlin.Vararg.class})
    public static class CompiledJavaCompareWithKotlin extends AbstractLazyResolveNamespaceComparingTest {
        public void testAllFilesPresentInCompiledJavaCompareWithKotlin() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("ArrayTypeVariance.kt")
        public void testArrayTypeVariance() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ArrayTypeVariance.kt");
        }
        
        @TestMetadata("ClassDoesNotOverrideMethod.kt")
        public void testClassDoesNotOverrideMethod() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassDoesNotOverrideMethod.kt");
        }
        
        @TestMetadata("ClassWithTypeP.kt")
        public void testClassWithTypeP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypeP.kt");
        }
        
        @TestMetadata("ClassWithTypePExtendsIterableP.kt")
        public void testClassWithTypePExtendsIterableP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePExtendsIterableP.kt");
        }
        
        @TestMetadata("ClassWithTypePP.kt")
        public void testClassWithTypePP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePP.kt");
        }
        
        @TestMetadata("ClassWithTypePRefNext.kt")
        public void testClassWithTypePRefNext() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePRefNext.kt");
        }
        
        @TestMetadata("ClassWithTypePRefSelf.kt")
        public void testClassWithTypePRefSelf() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePRefSelf.kt");
        }
        
        @TestMetadata("ClassWithTypePRefSelfAndClass.kt")
        public void testClassWithTypePRefSelfAndClass() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/ClassWithTypePRefSelfAndClass.kt");
        }
        
        @TestMetadata("FieldAsVar.kt")
        public void testFieldAsVar() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/FieldAsVar.kt");
        }
        
        @TestMetadata("FieldOfArrayType.kt")
        public void testFieldOfArrayType() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/FieldOfArrayType.kt");
        }
        
        @TestMetadata("FinalFieldAsVal.kt")
        public void testFinalFieldAsVal() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/FinalFieldAsVal.kt");
        }
        
        @TestMetadata("InnerClass.kt")
        public void testInnerClass() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/InnerClass.kt");
        }
        
        @TestMetadata("InnerClassReferencesOuterTP.kt")
        public void testInnerClassReferencesOuterTP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/InnerClassReferencesOuterTP.kt");
        }
        
        @TestMetadata("InnerClassesInGeneric.kt")
        public void testInnerClassesInGeneric() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/InnerClassesInGeneric.kt");
        }
        
        @TestMetadata("MethodReferencesOuterClassTP.kt")
        public void testMethodReferencesOuterClassTP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodReferencesOuterClassTP.kt");
        }
        
        @TestMetadata("MethodTypePOneUpperBound.kt")
        public void testMethodTypePOneUpperBound() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodTypePOneUpperBound.kt");
        }
        
        @TestMetadata("MethodTypePTwoUpperBounds.kt")
        public void testMethodTypePTwoUpperBounds() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodTypePTwoUpperBounds.kt");
        }
        
        @TestMetadata("MethodWithTypeP.kt")
        public void testMethodWithTypeP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodWithTypeP.kt");
        }
        
        @TestMetadata("MethodWithTypePP.kt")
        public void testMethodWithTypePP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodWithTypePP.kt");
        }
        
        @TestMetadata("MethodWithTypePRefClassP.kt")
        public void testMethodWithTypePRefClassP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethodWithTypePRefClassP.kt");
        }
        
        @TestMetadata("MethosWithPRefTP.kt")
        public void testMethosWithPRefTP() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MethosWithPRefTP.kt");
        }
        
        @TestMetadata("MyException.kt")
        public void testMyException() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/MyException.kt");
        }
        
        @TestMetadata("NestedClass.kt")
        public void testNestedClass() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/NestedClass.kt");
        }
        
        @TestMetadata("RemoveRedundantProjectionKind.kt")
        public void testRemoveRedundantProjectionKind() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/RemoveRedundantProjectionKind.kt");
        }
        
        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/Simple.kt");
        }
        
        @TestMetadata("TwoFields.kt")
        public void testTwoFields() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/TwoFields.kt");
        }
        
        @TestMetadata("UnboundWildcard.kt")
        public void testUnboundWildcard() throws Exception {
            doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/UnboundWildcard.kt");
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation")
        public static class Annotation extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInAnnotation() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("AnnotatedAnnotation.kt")
            public void testAnnotatedAnnotation() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation/AnnotatedAnnotation.kt");
            }
            
            @TestMetadata("AnnotatedMethod.kt")
            public void testAnnotatedMethod() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation/AnnotatedMethod.kt");
            }
            
            @TestMetadata("SimpleAnnotation.kt")
            public void testSimpleAnnotation() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/annotation/SimpleAnnotation.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor")
        public static class Constructor extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInConstructor() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ConstructorGenericDeep.kt")
            public void testConstructorGenericDeep() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor/ConstructorGenericDeep.kt");
            }
            
            @TestMetadata("ConstructorGenericSimple.kt")
            public void testConstructorGenericSimple() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor/ConstructorGenericSimple.kt");
            }
            
            @TestMetadata("ConstructorGenericUpperBound.kt")
            public void testConstructorGenericUpperBound() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/constructor/ConstructorGenericUpperBound.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean")
        public static class JavaBean extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInJavaBean() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("DifferentGetterAndSetter.kt")
            public void testDifferentGetterAndSetter() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/DifferentGetterAndSetter.kt");
            }
            
            @TestMetadata("JavaBeanAbstractGetter.kt")
            public void testJavaBeanAbstractGetter() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanAbstractGetter.kt");
            }
            
            @TestMetadata("JavaBeanVal.kt")
            public void testJavaBeanVal() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanVal.kt");
            }
            
            @TestMetadata("JavaBeanVar.kt")
            public void testJavaBeanVar() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanVar.kt");
            }
            
            @TestMetadata("JavaBeanVarOfGenericType.kt")
            public void testJavaBeanVarOfGenericType() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/JavaBeanVarOfGenericType.kt");
            }
            
            @TestMetadata("TwoSetters.kt")
            public void testTwoSetters() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/javaBean/TwoSetters.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature")
        @InnerTestClasses({KotlinSignature.Error.class, KotlinSignature.Propagation.class})
        public static class KotlinSignature extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInKotlinSignature() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ArrayType.kt")
            public void testArrayType() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ArrayType.kt");
            }
            
            @TestMetadata("ConstructorWithNewTypeParams.kt")
            public void testConstructorWithNewTypeParams() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithNewTypeParams.kt");
            }
            
            @TestMetadata("ConstructorWithParentTypeParams.kt")
            public void testConstructorWithParentTypeParams() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithParentTypeParams.kt");
            }
            
            @TestMetadata("ConstructorWithSeveralParams.kt")
            public void testConstructorWithSeveralParams() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithSeveralParams.kt");
            }
            
            @TestMetadata("ConstructorWithoutParams.kt")
            public void testConstructorWithoutParams() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/ConstructorWithoutParams.kt");
            }
            
            @TestMetadata("CustomProjectionKind.kt")
            public void testCustomProjectionKind() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/CustomProjectionKind.kt");
            }
            
            @TestMetadata("MethodWithFunctionTypes.kt")
            public void testMethodWithFunctionTypes() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithFunctionTypes.kt");
            }
            
            @TestMetadata("MethodWithGenerics.kt")
            public void testMethodWithGenerics() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithGenerics.kt");
            }
            
            @TestMetadata("MethodWithMappedClasses.kt")
            public void testMethodWithMappedClasses() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithMappedClasses.kt");
            }
            
            @TestMetadata("MethodWithTypeParameters.kt")
            public void testMethodWithTypeParameters() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithTypeParameters.kt");
            }
            
            @TestMetadata("MethodWithVararg.kt")
            public void testMethodWithVararg() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/MethodWithVararg.kt");
            }
            
            @TestMetadata("PropertyArrayTypes.kt")
            public void testPropertyArrayTypes() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/PropertyArrayTypes.kt");
            }
            
            @TestMetadata("PropertyComplexTypes.kt")
            public void testPropertyComplexTypes() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/PropertyComplexTypes.kt");
            }
            
            @TestMetadata("PropertySimpleType.kt")
            public void testPropertySimpleType() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/PropertySimpleType.kt");
            }
            
            @TestMetadata("StarProjection.kt")
            public void testStarProjection() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/StarProjection.kt");
            }
            
            @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error")
            public static class Error extends AbstractLazyResolveNamespaceComparingTest {
                @TestMetadata("AddingNullability.kt")
                public void testAddingNullability() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/AddingNullability.kt");
                }
                
                public void testAllFilesPresentInError() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("ConflictingProjectionKind.kt")
                public void testConflictingProjectionKind() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ConflictingProjectionKind.kt");
                }
                
                @TestMetadata("ExplicitFieldGettersAndSetters.kt")
                public void testExplicitFieldGettersAndSetters() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ExplicitFieldGettersAndSetters.kt");
                }
                
                @TestMetadata("ExtraUpperBound.kt")
                public void testExtraUpperBound() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ExtraUpperBound.kt");
                }
                
                @TestMetadata("MissingUpperBound.kt")
                public void testMissingUpperBound() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/MissingUpperBound.kt");
                }
                
                @TestMetadata("NoFieldTypeRef.kt")
                public void testNoFieldTypeRef() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/NoFieldTypeRef.kt");
                }
                
                @TestMetadata("NotVarargReplacedWithVararg.kt")
                public void testNotVarargReplacedWithVararg() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/NotVarargReplacedWithVararg.kt");
                }
                
                @TestMetadata("RedundantProjectionKind.kt")
                public void testRedundantProjectionKind() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/RedundantProjectionKind.kt");
                }
                
                @TestMetadata("ReturnTypeMissing.kt")
                public void testReturnTypeMissing() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/ReturnTypeMissing.kt");
                }
                
                @TestMetadata("SyntaxError.kt")
                public void testSyntaxError() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/SyntaxError.kt");
                }
                
                @TestMetadata("SyntaxErrorInFieldAnnotation.kt")
                public void testSyntaxErrorInFieldAnnotation() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/SyntaxErrorInFieldAnnotation.kt");
                }
                
                @TestMetadata("VarargReplacedWithNotVararg.kt")
                public void testVarargReplacedWithNotVararg() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/VarargReplacedWithNotVararg.kt");
                }
                
                @TestMetadata("WrongFieldInitializer.kt")
                public void testWrongFieldInitializer() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongFieldInitializer.kt");
                }
                
                @TestMetadata("WrongFieldMutability.kt")
                public void testWrongFieldMutability() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongFieldMutability.kt");
                }
                
                @TestMetadata("WrongFieldName.kt")
                public void testWrongFieldName() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongFieldName.kt");
                }
                
                @TestMetadata("WrongMethodName.kt")
                public void testWrongMethodName() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongMethodName.kt");
                }
                
                @TestMetadata("WrongProjectionKind.kt")
                public void testWrongProjectionKind() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongProjectionKind.kt");
                }
                
                @TestMetadata("WrongReturnTypeStructure.kt")
                public void testWrongReturnTypeStructure() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongReturnTypeStructure.kt");
                }
                
                @TestMetadata("WrongTypeName1.kt")
                public void testWrongTypeName1() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeName1.kt");
                }
                
                @TestMetadata("WrongTypeName2.kt")
                public void testWrongTypeName2() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeName2.kt");
                }
                
                @TestMetadata("WrongTypeName3.kt")
                public void testWrongTypeName3() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeName3.kt");
                }
                
                @TestMetadata("WrongTypeParameterBoundStructure1.kt")
                public void testWrongTypeParameterBoundStructure1() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeParameterBoundStructure1.kt");
                }
                
                @TestMetadata("WrongTypeParameterBoundStructure2.kt")
                public void testWrongTypeParameterBoundStructure2() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeParameterBoundStructure2.kt");
                }
                
                @TestMetadata("WrongTypeParametersCount.kt")
                public void testWrongTypeParametersCount() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongTypeParametersCount.kt");
                }
                
                @TestMetadata("WrongValueParameterStructure1.kt")
                public void testWrongValueParameterStructure1() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongValueParameterStructure1.kt");
                }
                
                @TestMetadata("WrongValueParameterStructure2.kt")
                public void testWrongValueParameterStructure2() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongValueParameterStructure2.kt");
                }
                
                @TestMetadata("WrongValueParametersCount.kt")
                public void testWrongValueParametersCount() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/error/WrongValueParametersCount.kt");
                }
                
            }
            
            @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation")
            @InnerTestClasses({Propagation.Parameter.class, Propagation.Return.class, Propagation.TypeParameter.class})
            public static class Propagation extends AbstractLazyResolveNamespaceComparingTest {
                public void testAllFilesPresentInPropagation() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("PropagateTypeArgumentNullable.kt")
                public void testPropagateTypeArgumentNullable() throws Exception {
                    doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/PropagateTypeArgumentNullable.kt");
                }
                
                @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter")
                public static class Parameter extends AbstractLazyResolveNamespaceComparingTest {
                    public void testAllFilesPresentInParameter() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter"), Pattern.compile("^(.+)\\.kt$"), true);
                    }
                    
                    @TestMetadata("ChangeProjectionKind1.kt")
                    public void testChangeProjectionKind1() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/ChangeProjectionKind1.kt");
                    }
                    
                    @TestMetadata("ChangeProjectionKind2.kt")
                    public void testChangeProjectionKind2() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/ChangeProjectionKind2.kt");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter.kt")
                    public void testDeeplySubstitutedClassParameter() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/DeeplySubstitutedClassParameter.kt");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter2.kt")
                    public void testDeeplySubstitutedClassParameter2() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/DeeplySubstitutedClassParameter2.kt");
                    }
                    
                    @TestMetadata("InheritMutability.kt")
                    public void testInheritMutability() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritMutability.kt");
                    }
                    
                    @TestMetadata("InheritNotVararg.kt")
                    public void testInheritNotVararg() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVararg.kt");
                    }
                    
                    @TestMetadata("InheritNotVarargInteger.kt")
                    public void testInheritNotVarargInteger() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVarargInteger.kt");
                    }
                    
                    @TestMetadata("InheritNotVarargNotNull.kt")
                    public void testInheritNotVarargNotNull() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVarargNotNull.kt");
                    }
                    
                    @TestMetadata("InheritNotVarargPrimitive.kt")
                    public void testInheritNotVarargPrimitive() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNotVarargPrimitive.kt");
                    }
                    
                    @TestMetadata("InheritNullability.kt")
                    public void testInheritNullability() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritNullability.kt");
                    }
                    
                    @TestMetadata("InheritProjectionKind.kt")
                    public void testInheritProjectionKind() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritProjectionKind.kt");
                    }
                    
                    @TestMetadata("InheritReadOnliness.kt")
                    public void testInheritReadOnliness() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritReadOnliness.kt");
                    }
                    
                    @TestMetadata("InheritVararg.kt")
                    public void testInheritVararg() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVararg.kt");
                    }
                    
                    @TestMetadata("InheritVarargInteger.kt")
                    public void testInheritVarargInteger() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVarargInteger.kt");
                    }
                    
                    @TestMetadata("InheritVarargNotNull.kt")
                    public void testInheritVarargNotNull() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVarargNotNull.kt");
                    }
                    
                    @TestMetadata("InheritVarargPrimitive.kt")
                    public void testInheritVarargPrimitive() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/InheritVarargPrimitive.kt");
                    }
                    
                    @TestMetadata("Kt3302.kt")
                    public void testKt3302() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/Kt3302.kt");
                    }
                    
                    @TestMetadata("MutableToReadOnly.kt")
                    public void testMutableToReadOnly() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/MutableToReadOnly.kt");
                    }
                    
                    @TestMetadata("NotNullToNullable.kt")
                    public void testNotNullToNullable() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/NotNullToNullable.kt");
                    }
                    
                    @TestMetadata("NullableToNotNull.kt")
                    public void testNullableToNotNull() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/NullableToNotNull.kt");
                    }
                    
                    @TestMetadata("NullableToNotNullKotlinSignature.kt")
                    public void testNullableToNotNullKotlinSignature() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/NullableToNotNullKotlinSignature.kt");
                    }
                    
                    @TestMetadata("OverrideWithErasedParameter.kt")
                    public void testOverrideWithErasedParameter() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/OverrideWithErasedParameter.kt");
                    }
                    
                    @TestMetadata("ReadOnlyToMutable.kt")
                    public void testReadOnlyToMutable() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/ReadOnlyToMutable.kt");
                    }
                    
                    @TestMetadata("SubclassFromGenericAndNot.kt")
                    public void testSubclassFromGenericAndNot() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/SubclassFromGenericAndNot.kt");
                    }
                    
                    @TestMetadata("SubstitutedClassParameter.kt")
                    public void testSubstitutedClassParameter() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/SubstitutedClassParameter.kt");
                    }
                    
                    @TestMetadata("SubstitutedClassParameters.kt")
                    public void testSubstitutedClassParameters() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/parameter/SubstitutedClassParameters.kt");
                    }
                    
                }
                
                @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return")
                public static class Return extends AbstractLazyResolveNamespaceComparingTest {
                    @TestMetadata("AddNotNullJavaSubtype.kt")
                    public void testAddNotNullJavaSubtype() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNotNullJavaSubtype.kt");
                    }
                    
                    @TestMetadata("AddNotNullSameJavaType.kt")
                    public void testAddNotNullSameJavaType() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNotNullSameJavaType.kt");
                    }
                    
                    @TestMetadata("AddNullabilityJavaSubtype.kt")
                    public void testAddNullabilityJavaSubtype() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilityJavaSubtype.kt");
                    }
                    
                    @TestMetadata("AddNullabilitySameGenericType1.kt")
                    public void testAddNullabilitySameGenericType1() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilitySameGenericType1.kt");
                    }
                    
                    @TestMetadata("AddNullabilitySameGenericType2.kt")
                    public void testAddNullabilitySameGenericType2() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilitySameGenericType2.kt");
                    }
                    
                    @TestMetadata("AddNullabilitySameJavaType.kt")
                    public void testAddNullabilitySameJavaType() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/AddNullabilitySameJavaType.kt");
                    }
                    
                    public void testAllFilesPresentInReturn() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return"), Pattern.compile("^(.+)\\.kt$"), true);
                    }
                    
                    @TestMetadata("CantMakeImmutableInSubclass.kt")
                    public void testCantMakeImmutableInSubclass() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/CantMakeImmutableInSubclass.kt");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter.kt")
                    public void testDeeplySubstitutedClassParameter() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/DeeplySubstitutedClassParameter.kt");
                    }
                    
                    @TestMetadata("DeeplySubstitutedClassParameter2.kt")
                    public void testDeeplySubstitutedClassParameter2() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/DeeplySubstitutedClassParameter2.kt");
                    }
                    
                    @TestMetadata("HalfSubstitutedTypeParameters.kt")
                    public void testHalfSubstitutedTypeParameters() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/HalfSubstitutedTypeParameters.kt");
                    }
                    
                    @TestMetadata("InheritNullabilityGenericSubclassSimple.kt")
                    public void testInheritNullabilityGenericSubclassSimple() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilityGenericSubclassSimple.kt");
                    }
                    
                    @TestMetadata("InheritNullabilityJavaSubtype.kt")
                    public void testInheritNullabilityJavaSubtype() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilityJavaSubtype.kt");
                    }
                    
                    @TestMetadata("InheritNullabilitySameGenericType.kt")
                    public void testInheritNullabilitySameGenericType() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilitySameGenericType.kt");
                    }
                    
                    @TestMetadata("InheritNullabilitySameJavaType.kt")
                    public void testInheritNullabilitySameJavaType() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritNullabilitySameJavaType.kt");
                    }
                    
                    @TestMetadata("InheritProjectionKind.kt")
                    public void testInheritProjectionKind() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritProjectionKind.kt");
                    }
                    
                    @TestMetadata("InheritReadOnlinessOfArgument.kt")
                    public void testInheritReadOnlinessOfArgument() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritReadOnlinessOfArgument.kt");
                    }
                    
                    @TestMetadata("InheritReadOnlinessSameClass.kt")
                    public void testInheritReadOnlinessSameClass() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritReadOnlinessSameClass.kt");
                    }
                    
                    @TestMetadata("InheritReadOnlinessSubclass.kt")
                    public void testInheritReadOnlinessSubclass() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/InheritReadOnlinessSubclass.kt");
                    }
                    
                    @TestMetadata("SameProjectionKind.kt")
                    public void testSameProjectionKind() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SameProjectionKind.kt");
                    }
                    
                    @TestMetadata("SubclassFromGenericAndNot.kt")
                    public void testSubclassFromGenericAndNot() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubclassFromGenericAndNot.kt");
                    }
                    
                    @TestMetadata("SubclassOfCollection.kt")
                    public void testSubclassOfCollection() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubclassOfCollection.kt");
                    }
                    
                    @TestMetadata("SubclassOfMapEntry.kt")
                    public void testSubclassOfMapEntry() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubclassOfMapEntry.kt");
                    }
                    
                    @TestMetadata("SubstitutedClassParameter.kt")
                    public void testSubstitutedClassParameter() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubstitutedClassParameter.kt");
                    }
                    
                    @TestMetadata("SubstitutedClassParameters.kt")
                    public void testSubstitutedClassParameters() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/SubstitutedClassParameters.kt");
                    }
                    
                    @TestMetadata("TwoSuperclassesConflictingProjectionKinds.kt")
                    public void testTwoSuperclassesConflictingProjectionKinds() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesConflictingProjectionKinds.kt");
                    }
                    
                    @TestMetadata("TwoSuperclassesInvariantAndCovariantInferMutability.kt")
                    public void testTwoSuperclassesInvariantAndCovariantInferMutability() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesInvariantAndCovariantInferMutability.kt");
                    }
                    
                    @TestMetadata("TwoSuperclassesInvariantAndCovariantInferNullability.kt")
                    public void testTwoSuperclassesInvariantAndCovariantInferNullability() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesInvariantAndCovariantInferNullability.kt");
                    }
                    
                    @TestMetadata("TwoSuperclassesMutableAndNot.kt")
                    public void testTwoSuperclassesMutableAndNot() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesMutableAndNot.kt");
                    }
                    
                    @TestMetadata("TwoSuperclassesReturnJavaSubtype.kt")
                    public void testTwoSuperclassesReturnJavaSubtype() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesReturnJavaSubtype.kt");
                    }
                    
                    @TestMetadata("TwoSuperclassesReturnSameJavaType.kt")
                    public void testTwoSuperclassesReturnSameJavaType() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesReturnSameJavaType.kt");
                    }
                    
                    @TestMetadata("TwoSuperclassesSupplementNotNull.kt")
                    public void testTwoSuperclassesSupplementNotNull() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TwoSuperclassesSupplementNotNull.kt");
                    }
                    
                    @TestMetadata("TypeParamOfClass.kt")
                    public void testTypeParamOfClass() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TypeParamOfClass.kt");
                    }
                    
                    @TestMetadata("TypeParamOfClassSubstituted.kt")
                    public void testTypeParamOfClassSubstituted() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TypeParamOfClassSubstituted.kt");
                    }
                    
                    @TestMetadata("TypeParamOfFun.kt")
                    public void testTypeParamOfFun() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/return/TypeParamOfFun.kt");
                    }
                    
                }
                
                @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter")
                public static class TypeParameter extends AbstractLazyResolveNamespaceComparingTest {
                    public void testAllFilesPresentInTypeParameter() throws Exception {
                        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter"), Pattern.compile("^(.+)\\.kt$"), true);
                    }
                    
                    @TestMetadata("InheritMutability.kt")
                    public void testInheritMutability() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/InheritMutability.kt");
                    }
                    
                    @TestMetadata("InheritNullability.kt")
                    public void testInheritNullability() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/InheritNullability.kt");
                    }
                    
                    @TestMetadata("InheritReadOnliness.kt")
                    public void testInheritReadOnliness() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/InheritReadOnliness.kt");
                    }
                    
                    @TestMetadata("TwoBounds.kt")
                    public void testTwoBounds() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/TwoBounds.kt");
                    }
                    
                    @TestMetadata("TwoSuperclasses.kt")
                    public void testTwoSuperclasses() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/TwoSuperclasses.kt");
                    }
                    
                    @TestMetadata("TwoTypeParameters.kt")
                    public void testTwoTypeParameters() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/TwoTypeParameters.kt");
                    }
                    
                    @TestMetadata("UseParameterAsUpperBound.kt")
                    public void testUseParameterAsUpperBound() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/UseParameterAsUpperBound.kt");
                    }
                    
                    @TestMetadata("UseParameterInUpperBound.kt")
                    public void testUseParameterInUpperBound() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/UseParameterInUpperBound.kt");
                    }
                    
                    @TestMetadata("UseParameterInUpperBoundWithKotlinSignature.kt")
                    public void testUseParameterInUpperBoundWithKotlinSignature() throws Exception {
                        doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/kotlinSignature/propagation/typeParameter/UseParameterInUpperBoundWithKotlinSignature.kt");
                    }
                    
                }
                
                public static Test innerSuite() {
                    TestSuite suite = new TestSuite("Propagation");
                    suite.addTestSuite(Propagation.class);
                    suite.addTestSuite(Parameter.class);
                    suite.addTestSuite(Return.class);
                    suite.addTestSuite(TypeParameter.class);
                    return suite;
                }
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("KotlinSignature");
                suite.addTestSuite(KotlinSignature.class);
                suite.addTestSuite(Error.class);
                suite.addTest(Propagation.innerSuite());
                return suite;
            }
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library")
        public static class Library extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInLibrary() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("LoadIterable.kt")
            public void testLoadIterable() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library/LoadIterable.kt");
            }
            
            @TestMetadata("LoadIterator.kt")
            public void testLoadIterator() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/library/LoadIterator.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/modality")
        public static class Modality extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInModality() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/modality"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("ModalityOfFakeOverrides.kt")
            public void testModalityOfFakeOverrides() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/modality/ModalityOfFakeOverrides.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability")
        public static class Mutability extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInMutability() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("LoadIterable.kt")
            public void testLoadIterable() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterable.kt");
            }
            
            @TestMetadata("LoadIterableWithConflict.kt")
            public void testLoadIterableWithConflict() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterableWithConflict.kt");
            }
            
            @TestMetadata("LoadIterableWithNullability.kt")
            public void testLoadIterableWithNullability() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterableWithNullability.kt");
            }
            
            @TestMetadata("LoadIterableWithPropagation.kt")
            public void testLoadIterableWithPropagation() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/mutability/LoadIterableWithPropagation.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull")
        public static class NotNull extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInNotNull() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("NotNullField.kt")
            public void testNotNullField() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull/NotNullField.kt");
            }
            
            @TestMetadata("NotNullMethod.kt")
            public void testNotNullMethod() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull/NotNullMethod.kt");
            }
            
            @TestMetadata("NotNullParameter.kt")
            public void testNotNullParameter() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/notNull/NotNullParameter.kt");
            }
            
        }
        
        @TestMetadata("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg")
        public static class Vararg extends AbstractLazyResolveNamespaceComparingTest {
            public void testAllFilesPresentInVararg() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("VarargInt.kt")
            public void testVarargInt() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg/VarargInt.kt");
            }
            
            @TestMetadata("VarargString.kt")
            public void testVarargString() throws Exception {
                doTestNotCheckingPrimaryConstructors("compiler/testData/loadJava/compiledJavaCompareWithKotlin/vararg/VarargString.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("CompiledJavaCompareWithKotlin");
            suite.addTestSuite(CompiledJavaCompareWithKotlin.class);
            suite.addTestSuite(Annotation.class);
            suite.addTestSuite(Constructor.class);
            suite.addTestSuite(JavaBean.class);
            suite.addTest(KotlinSignature.innerSuite());
            suite.addTestSuite(Library.class);
            suite.addTestSuite(Modality.class);
            suite.addTestSuite(Mutability.class);
            suite.addTestSuite(NotNull.class);
            suite.addTestSuite(Vararg.class);
            return suite;
        }
    }
    
    @TestMetadata("compiler/testData/lazyResolve/namespaceComparator")
    public static class NamespaceComparator extends AbstractLazyResolveNamespaceComparingTest {
        public void testAllFilesPresentInNamespaceComparator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/lazyResolve/namespaceComparator"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("ClassObject.kt")
        public void testClassObject() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/ClassObject.kt");
        }
        
        @TestMetadata("classObjectAnnotation.kt")
        public void testClassObjectAnnotation() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/classObjectAnnotation.kt");
        }
        
        @TestMetadata("classObjectHeader.kt")
        public void testClassObjectHeader() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/classObjectHeader.kt");
        }
        
        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/enum.kt");
        }
        
        @TestMetadata("fileDependencyRecursion.kt")
        public void testFileDependencyRecursion() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/fileDependencyRecursion.kt");
        }
        
        @TestMetadata("genericFunction.kt")
        public void testGenericFunction() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/genericFunction.kt");
        }
        
        @TestMetadata("importFunctionWithAllUnderImport.kt")
        public void testImportFunctionWithAllUnderImport() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/importFunctionWithAllUnderImport.kt");
        }
        
        @TestMetadata("importFunctionWithAllUnderImportAfterNamedImport.kt")
        public void testImportFunctionWithAllUnderImportAfterNamedImport() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/importFunctionWithAllUnderImportAfterNamedImport.kt");
        }
        
        @TestMetadata("InnerClassNameClash.kt")
        public void testInnerClassNameClash() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/InnerClassNameClash.kt");
        }
        
        @TestMetadata("objectInClass.kt")
        public void testObjectInClass() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/objectInClass.kt");
        }
        
        @TestMetadata("objectMembers.kt")
        public void testObjectMembers() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/objectMembers.kt");
        }
        
        @TestMetadata("OverrideWithErrors.kt")
        public void testOverrideWithErrors() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/OverrideWithErrors.kt");
        }
        
        @TestMetadata("packageLevelObject.kt")
        public void testPackageLevelObject() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/packageLevelObject.kt");
        }
        
        @TestMetadata("propertyClassFileDependencyRecursion.kt")
        public void testPropertyClassFileDependencyRecursion() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/propertyClassFileDependencyRecursion.kt");
        }
        
        @TestMetadata("simpleClass.kt")
        public void testSimpleClass() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/simpleClass.kt");
        }
        
        @TestMetadata("varargIterator.kt")
        public void testVarargIterator() throws Exception {
            doTestCheckingPrimaryConstructors("compiler/testData/lazyResolve/namespaceComparator/varargIterator.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("LazyResolveNamespaceComparingTestGenerated");
        suite.addTest(LoadKotlin.innerSuite());
        suite.addTest(CompiledJavaCompareWithKotlin.innerSuite());
        suite.addTestSuite(NamespaceComparator.class);
        return suite;
    }
}
