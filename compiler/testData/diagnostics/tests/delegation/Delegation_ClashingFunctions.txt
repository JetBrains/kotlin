package

internal interface One {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun foo(): kotlin.Any?
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Test123 : One, Two, Three {
    public constructor Test123(/*0*/ v1: One, /*1*/ v2: Two, /*2*/ v3: Three)
    internal final val v1: One
    internal final val v2: Two
    internal final val v3: Three
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*3*/ /*delegation*/ fun foo(): kotlin.Any?
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Test132 : One, Three, Two {
    public constructor Test132(/*0*/ v1: One, /*1*/ v2: Two, /*2*/ v3: Three)
    internal final val v1: One
    internal final val v2: Two
    internal final val v3: Three
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*3*/ /*delegation*/ fun foo(): kotlin.Any?
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Test213 : Two, One, Three {
    public constructor Test213(/*0*/ v1: One, /*1*/ v2: Two, /*2*/ v3: Three)
    internal final val v1: One
    internal final val v2: Two
    internal final val v3: Three
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*3*/ /*delegation*/ fun foo(): kotlin.String?
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Test231 : Two, Three, One {
    public constructor Test231(/*0*/ v1: One, /*1*/ v2: Two, /*2*/ v3: Three)
    internal final val v1: One
    internal final val v2: Two
    internal final val v3: Three
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*3*/ /*delegation*/ fun foo(): kotlin.String?
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Test312 : Three, One, Two {
    public constructor Test312(/*0*/ v1: One, /*1*/ v2: Two, /*2*/ v3: Three)
    internal final val v1: One
    internal final val v2: Two
    internal final val v3: Three
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*3*/ /*delegation*/ fun foo(): kotlin.String
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Test321 : Three, Two, One {
    public constructor Test321(/*0*/ v1: One, /*1*/ v2: Two, /*2*/ v3: Three)
    internal final val v1: One
    internal final val v2: Two
    internal final val v3: Three
    public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*3*/ /*delegation*/ fun foo(): kotlin.String
    public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
}

internal interface Three {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun foo(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal interface Two {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun foo(): kotlin.String?
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
