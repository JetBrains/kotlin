package

public fun bar(): kotlin.Unit
public fun </*0*/ T> foo(/*0*/ f: () -> T): T

public object Scope {
    private constructor Scope()
    public final fun bar(/*0*/ s: kotlin.String = ...): kotlin.Double
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun </*0*/ T> foo(/*0*/ f: () -> T): T
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public object NestedScope {
        private constructor NestedScope()
        public final fun bar(/*0*/ a: kotlin.Int = ...): kotlin.String
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final fun test(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
