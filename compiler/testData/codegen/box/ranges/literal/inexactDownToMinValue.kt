// KJS_WITH_FULL_RUNTIME
// TODO: muted automatically, investigate should it be ran for JVM_IR or not
// IGNORE_BACKEND: JVM_IR

// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// WITH_RUNTIME


const val MinI = Int.MIN_VALUE
const val MinB = Byte.MIN_VALUE
const val MinS = Short.MIN_VALUE
const val MinL = Long.MIN_VALUE
const val MinC = Char.MIN_VALUE
const val MinUI = UInt.MIN_VALUE
const val MinUB = UByte.MIN_VALUE
const val MinUS = UShort.MIN_VALUE
const val MinUL = ULong.MIN_VALUE

fun box(): String {
    val list1 = ArrayList<Int>()
    for (i in (MinI + 5) downTo MinI step 3) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(MinI + 5, MinI + 2)) {
        return "Wrong elements for (MinI + 5) downTo MinI step 3: $list1"
    }

    val list2 = ArrayList<Int>()
    for (i in (MinB + 5).toByte() downTo MinB step 3) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>((MinB + 5).toInt(), (MinB + 2).toInt())) {
        return "Wrong elements for (MinB + 5).toByte() downTo MinB step 3: $list2"
    }

    val list3 = ArrayList<Int>()
    for (i in (MinS + 5).toShort() downTo MinS step 3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>((MinS + 5).toInt(), (MinS + 2).toInt())) {
        return "Wrong elements for (MinS + 5).toShort() downTo MinS step 3: $list3"
    }

    val list4 = ArrayList<Long>()
    for (i in (MinL + 5).toLong() downTo MinL step 3) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>((MinL + 5).toLong(), (MinL + 2).toLong())) {
        return "Wrong elements for (MinL + 5).toLong() downTo MinL step 3: $list4"
    }

    val list5 = ArrayList<Char>()
    for (i in (MinC + 5) downTo MinC step 3) {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>((MinC + 5), (MinC + 2))) {
        return "Wrong elements for (MinC + 5) downTo MinC step 3: $list5"
    }

    val list6 = ArrayList<UInt>()
    for (i in (MinUI + 5u) downTo MinUI step 3) {
        list6.add(i)
        if (list6.size > 23) break
    }
    if (list6 != listOf<UInt>(MinUI + 5u, MinUI + 2u)) {
        return "Wrong elements for (MinUI + 5u) downTo MinUI step 3: $list6"
    }

    val list7 = ArrayList<UInt>()
    for (i in (MinUB + 5u).toUByte() downTo MinUB step 3) {
        list7.add(i)
        if (list7.size > 23) break
    }
    if (list7 != listOf<UInt>((MinUB + 5u).toUInt(), (MinUB + 2u).toUInt())) {
        return "Wrong elements for (MinUB + 5u).toUByte() downTo MinUB step 3: $list7"
    }

    val list8 = ArrayList<UInt>()
    for (i in (MinUS + 5u).toUShort() downTo MinUS step 3) {
        list8.add(i)
        if (list8.size > 23) break
    }
    if (list8 != listOf<UInt>((MinUS + 5u).toUInt(), (MinUS + 2u).toUInt())) {
        return "Wrong elements for (MinUS + 5u).toUShort() downTo MinUS step 3: $list8"
    }

    val list9 = ArrayList<ULong>()
    for (i in MinUL + 5u downTo MinUL step 3) {
        list9.add(i)
        if (list9.size > 23) break
    }
    if (list9 != listOf<ULong>((MinUL + 5u), (MinUL + 2u))) {
        return "Wrong elements for MinUL + 5u downTo MinUL step 3: $list9"
    }

    return "OK"
}
