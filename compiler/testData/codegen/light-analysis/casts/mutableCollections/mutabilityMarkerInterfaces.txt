public abstract class C {
    public method <init>(): void
    public synthetic method add(p0: java.lang.Object): boolean
    public method add(p0: java.lang.String): boolean
    public method addAll(p0: java.util.Collection): boolean
    public method clear(): void
    public final method contains(p0: java.lang.Object): boolean
    public abstract method contains(p0: java.lang.String): boolean
    public abstract method getSize(): int
    public method iterator(): java.util.Iterator
    public method remove(p0: java.lang.Object): boolean
    public method removeAll(p0: java.util.Collection): boolean
    public method retainAll(p0: java.util.Collection): boolean
    public final method size(): int
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}


public abstract class It {
    public method <init>(): void
    public method iterator(): java.util.Iterator
}


public abstract class Itr {
    public method <init>(): void
    public method remove(): void
}


public abstract class L {
    public method <init>(): void
    public synthetic method add(p0: int, p1: java.lang.Object): void
    public method add(p0: int, p1: java.lang.String): void
    public synthetic method add(p0: java.lang.Object): boolean
    public method add(p0: java.lang.String): boolean
    public method addAll(p0: int, p1: java.util.Collection): boolean
    public method addAll(p0: java.util.Collection): boolean
    public method clear(): void
    public final method contains(p0: java.lang.Object): boolean
    public abstract method contains(p0: java.lang.String): boolean
    public abstract method getSize(): int
    public final method indexOf(p0: java.lang.Object): int
    public abstract method indexOf(p0: java.lang.String): int
    public final method lastIndexOf(p0: java.lang.Object): int
    public abstract method lastIndexOf(p0: java.lang.String): int
    public method listIterator(): java.util.ListIterator
    public method listIterator(p0: int): java.util.ListIterator
    public synthetic method remove(p0: int): java.lang.Object
    public method remove(p0: int): java.lang.String
    public method remove(p0: java.lang.Object): boolean
    public method removeAll(p0: java.util.Collection): boolean
    public method retainAll(p0: java.util.Collection): boolean
    public synthetic method set(p0: int, p1: java.lang.Object): java.lang.Object
    public method set(p0: int, p1: java.lang.String): java.lang.String
    public final method size(): int
    public method subList(p0: int, p1: int): java.util.List
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}


public abstract class L2 {
    public method <init>(): void
}


public abstract class LItr {
    public method <init>(): void
    public synthetic method add(p0: java.lang.Object): void
    public method add(p0: java.lang.String): void
    public method hasNext(): boolean
    public synthetic method next(): java.lang.Object
    public method next(): java.lang.String
    public method remove(): void
    public synthetic method set(p0: java.lang.Object): void
    public method set(p0: java.lang.String): void
}


public abstract class M {
    public method <init>(): void
    public method clear(): void
    public final method containsKey(p0: java.lang.Object): boolean
    public abstract method containsKey(p0: java.lang.String): boolean
    public final method containsValue(p0: java.lang.Object): boolean
    public abstract method containsValue(p0: java.lang.String): boolean
    public final method entrySet(): java.util.Set
    public final method get(p0: java.lang.Object): java.lang.Object
    public abstract method get(p0: java.lang.String): java.lang.String
    public abstract method getEntries(): java.util.Set
    public abstract method getKeys(): java.util.Set
    public abstract method getSize(): int
    public abstract method getValues(): java.util.Collection
    public final method keySet(): java.util.Set
    public synthetic method put(p0: java.lang.Object, p1: java.lang.Object): java.lang.Object
    public method put(p0: java.lang.String, p1: java.lang.String): java.lang.String
    public method putAll(p0: java.util.Map): void
    public method remove(p0: java.lang.Object): java.lang.Object
    public final method size(): int
    public final method values(): java.util.Collection
}


public abstract class MC {
    public method <init>(): void
    public final method contains(p0: java.lang.Object): boolean
    public abstract method contains(p0: java.lang.String): boolean
    public abstract method getSize(): int
    public final method remove(p0: java.lang.Object): boolean
    public abstract method remove(p0: java.lang.String): boolean
    public final method size(): int
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}


public abstract class ME {
    public method <init>(): void
    public synthetic method setValue(p0: java.lang.Object): java.lang.Object
    public method setValue(p0: java.lang.String): java.lang.String
}


public abstract class MIt {
    public method <init>(): void
}


public abstract class MItr {
    public method <init>(): void
}


public abstract class ML {
    public method <init>(): void
    public final method contains(p0: java.lang.Object): boolean
    public abstract method contains(p0: java.lang.String): boolean
    public abstract method getSize(): int
    public final method indexOf(p0: java.lang.Object): int
    public abstract method indexOf(p0: java.lang.String): int
    public final method lastIndexOf(p0: java.lang.Object): int
    public abstract method lastIndexOf(p0: java.lang.String): int
    public synthetic method remove(p0: int): java.lang.Object
    public final method remove(p0: int): java.lang.String
    public final method remove(p0: java.lang.Object): boolean
    public abstract method remove(p0: java.lang.String): boolean
    public abstract method removeAt(p0: int): java.lang.String
    public final method size(): int
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}


public abstract class ML2 {
    public method <init>(): void
    public synthetic method remove(p0: int): java.lang.Object
}


public abstract class MLItr {
    public method <init>(): void
}


public abstract class MM {
    public method <init>(): void
    public final method containsKey(p0: java.lang.Object): boolean
    public abstract method containsKey(p0: java.lang.String): boolean
    public final method containsValue(p0: java.lang.Object): boolean
    public abstract method containsValue(p0: java.lang.String): boolean
    public final method entrySet(): java.util.Set
    public final method get(p0: java.lang.Object): java.lang.Object
    public abstract method get(p0: java.lang.String): java.lang.String
    public abstract method getEntries(): java.util.Set
    public abstract method getKeys(): java.util.Set
    public abstract method getSize(): int
    public abstract method getValues(): java.util.Collection
    public final method keySet(): java.util.Set
    public final method remove(p0: java.lang.Object): java.lang.Object
    public abstract method remove(p0: java.lang.String): java.lang.String
    public final method size(): int
    public final method values(): java.util.Collection
}


public abstract class MME {
    public method <init>(): void
}


public abstract class MS {
    public method <init>(): void
    public final method contains(p0: java.lang.Object): boolean
    public abstract method contains(p0: java.lang.String): boolean
    public abstract method getSize(): int
    public final method remove(p0: java.lang.Object): boolean
    public abstract method remove(p0: java.lang.String): boolean
    public final method size(): int
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}


public final class MutabilityMarkerInterfacesKt {
    public final static @org.jetbrains.annotations.NotNull method box(): java.lang.String
    public final static method expectInterfaces(@org.jetbrains.annotations.NotNull p0: java.lang.Class, @org.jetbrains.annotations.NotNull p1: java.util.Set): void
}


public abstract class S {
    public method <init>(): void
    public synthetic method add(p0: java.lang.Object): boolean
    public method add(p0: java.lang.String): boolean
    public method addAll(p0: java.util.Collection): boolean
    public method clear(): void
    public final method contains(p0: java.lang.Object): boolean
    public abstract method contains(p0: java.lang.String): boolean
    public abstract method getSize(): int
    public method iterator(): java.util.Iterator
    public method remove(p0: java.lang.Object): boolean
    public method removeAll(p0: java.util.Collection): boolean
    public method retainAll(p0: java.util.Collection): boolean
    public final method size(): int
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}


public abstract class Weird {
    public method <init>(): void
    public final method contains(p0: java.lang.Object): boolean
    public abstract method contains(p0: java.lang.String): boolean
    public abstract method getSize(): int
    public final method indexOf(p0: java.lang.Object): int
    public abstract method indexOf(p0: java.lang.String): int
    public final method lastIndexOf(p0: java.lang.Object): int
    public abstract method lastIndexOf(p0: java.lang.String): int
    public method remove(): void
    public synthetic method remove(p0: int): java.lang.Object
    public final method remove(p0: int): java.lang.String
    public final method remove(p0: java.lang.Object): boolean
    public abstract method remove(p0: java.lang.String): boolean
    public abstract method removeAt(p0: int): java.lang.String
    public final method size(): int
    public method toArray(): java.lang.Object[]
    public method toArray(p0: java.lang.Object[]): java.lang.Object[]
}
