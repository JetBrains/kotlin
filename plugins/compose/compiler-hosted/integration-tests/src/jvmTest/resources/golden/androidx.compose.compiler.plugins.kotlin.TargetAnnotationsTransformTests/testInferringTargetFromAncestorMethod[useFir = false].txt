//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.ComposableTarget
import androidx.compose.runtime.ComposableOpenTarget

@Composable @ComposableOpenTarget(0) fun OpenTarget() { }

abstract class Base {
  @Composable @ComposableTarget("N") abstract fun Compose()
}

class Valid : Base () {
  @Composable override fun Compose() {
    OpenTarget()
  }
}

//
// Transformed IR
// ------------------------------------------

@Composable
@ComposableOpenTarget(index = 0)
fun OpenTarget(%composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(OpenTarget):Test.kt")
  if (%changed != 0 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    OpenTarget(%composer, updateChangedFlags(%changed or 0b0001))
  }
}
@StabilityInferred(parameters = 1)
abstract class Base {
  @Composable
  @ComposableTarget(applier = "N")
  abstract fun Compose(%composer: Composer?, %changed: Int)
  static val %stable: Int = 0
}
@StabilityInferred(parameters = 1)
class Valid : Base {
  @Composable
  override fun Compose(%composer: Composer?, %changed: Int) {
    %composer = %composer.startRestartGroup(<>)
    sourceInformation(%composer, "C(Compose)<OpenTa...>:Test.kt")
    if (%changed and 0b0001 != 0 || !%composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      OpenTarget(%composer, 0)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
    val tmp0_rcvr = <this>
    %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
      tmp0_rcvr.Compose(%composer, updateChangedFlags(%changed or 0b0001))
    }
  }
  static val %stable: Int = 0
}
