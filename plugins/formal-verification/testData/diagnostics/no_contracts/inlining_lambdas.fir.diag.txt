/inlining_lambdas.kt:(155,167): info: Generated Viper text for explicit_arg:
method global$fun_explicit_arg$fun_take$$return$T_Int()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  anonymous$0 := dom$RuntimeType$intToRef(0)
  ret$2 := special$plusInts(anonymous$0, anonymous$0)
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_lambdas.kt:(217,229): info: Generated Viper text for implicit_arg:
method global$fun_implicit_arg$fun_take$$return$T_Int()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  anonymous$0 := dom$RuntimeType$intToRef(0)
  ret$2 := special$timesInts(anonymous$0, dom$RuntimeType$intToRef(2))
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_lambdas.kt:(275,284): info: Generated Viper text for lambda_if:
method global$fun_lambda_if$fun_take$$return$T_Int() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  anonymous$0 := dom$RuntimeType$intToRef(0)
  if (dom$RuntimeType$intFromRef(anonymous$0) == 0) {
    ret$2 := special$plusInts(anonymous$0, dom$RuntimeType$intToRef(1))
  } else {
    ret$2 := special$plusInts(anonymous$0, dom$RuntimeType$intToRef(2))}
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_lambdas.kt:(415,436): info: Generated Viper text for return_value_not_used:
method global$fun_return_value_not_used$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := dom$RuntimeType$intToRef(0)
  ret$2 := anonymous$0
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  label label$ret$0
}

/inlining_lambdas.kt:(472,481): info: Generated Viper text for shadowing:
method global$fun_shadowing$fun_take$$return$T_Int() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var local0$x: Ref
  var local0$y: Ref
  var ret$1: Ref
  var ret$2: Ref
  var anonymous$0: Ref
  var local2$y: Ref
  local0$x := dom$RuntimeType$intToRef(1)
  local0$y := dom$RuntimeType$intToRef(1)
  anonymous$0 := dom$RuntimeType$intToRef(0)
  local2$y := dom$RuntimeType$intToRef(0)
  ret$2 := special$plusInts(anonymous$0, local2$y)
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_lambdas.kt:(718,724): info: Generated Viper text for nested:
method global$fun_nested$fun_take$$return$T_Int() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var local0$x: Ref
  var ret$1: Ref
  var local1$x: Ref
  var ret$2: Ref
  var ret$3: Ref
  var anonymous$0: Ref
  local0$x := dom$RuntimeType$intToRef(2)
  local1$x := dom$RuntimeType$intToRef(2)
  anonymous$0 := dom$RuntimeType$intToRef(0)
  ret$3 := special$plusInts(anonymous$0, dom$RuntimeType$intToRef(1))
  goto label$ret$3
  label label$ret$3
  ret$2 := ret$3
  goto label$ret$2
  label label$ret$2
  ret$1 := ret$2
  goto label$ret$1
  label label$ret$1
  ret$0 := ret$1
  goto label$ret$0
  label label$ret$0
}

/inlining_lambdas.kt:(862,880): info: Generated Viper text for lambda_passthrough:
method global$fun_lambda_passthrough$fun_take$$return$T_Unit()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var ret$1: Ref
  var ret$2: Ref
  var ret$3: Ref
  var anonymous$0: Ref
  ret$0 := dom$RuntimeType$unitValue()
  anonymous$0 := dom$RuntimeType$intToRef(0)
  ret$3 := special$plusInts(anonymous$0, dom$RuntimeType$intToRef(1))
  goto label$ret$3
  label label$ret$3
  ret$2 := ret$3
  goto label$ret$2
  label label$ret$2
  label label$ret$1
  label label$ret$0
}
