Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final? companion object Companion : R|kotlin/Any|
                Type: pack.SuperClass.Companion
    Element 7
        Scope: FirNestedClassifierScopeWithSubstitution
            Classifiers:
                FirRegularClassSymbol public final? companion object Companion : R|kotlin/Any|
        Static scope owner symbol: FirRegularClassSymbol public open class SuperClass : R|kotlin/Any|
    Element 8
        Implicit receiver:
            FirRegularClassSymbol public final? companion object Companion : R|kotlin/Any|
                Type: pack.TopLevelClass.Companion
    Element 9
        Scope: FirNestedClassifierScopeImpl
            Classifiers:
                FirRegularClassSymbol public final? companion object Companion : R|kotlin/Any|
    Element 10
        Implicit receiver:
            FirRegularClassSymbol public final class TopLevelClass : R|pack/SuperClass|
                Type: pack.TopLevelClass
    Element 11
        Scope: FirMemberTypeParameterScope
            Classifiers:
                FirTypeParameterSymbol T
    Element 12
        Scope: FirLocalScope
            Properties:
                FirValueParameterSymbol i: R|kotlin/Int|
    Element 13
        Implicit receiver:
            FirReceiverParameterSymbol <explicit receiver parameter>: R|T|
                Type: T

FILE: [ResolvedTo(IMPORTS)] valueParameterAnnotationArgument.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] constructor([ResolvedTo(RAW_FIR)] value: Int): R|pack/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] val value: Int = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] get(): Int

    }
    public open [ResolvedTo(RAW_FIR)] class SuperClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] constructor(): R|pack/SuperClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(RAW_FIR)] constructor(): R|pack/SuperClass.Companion| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? const [ResolvedTo(RAW_FIR)] val CONST: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        }

    }
    public final? [ResolvedTo(RAW_FIR)] class TopLevelClass : SuperClass {
        public? [ResolvedTo(RAW_FIR)] constructor([ResolvedTo(RAW_FIR)] i: Int): R|pack/TopLevelClass| {
            LAZY_super<SuperClass>
        }

        public? final? [ResolvedTo(RAW_FIR)] val i: Int = R|<local>/i|
            public? [ResolvedTo(RAW_FIR)] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] val CONST: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final [ResolvedTo(BODY_RESOLVE)] fun <[ResolvedTo(BODY_RESOLVE)] T> [ResolvedTo(BODY_RESOLVE)] R|T|.foo([ResolvedTo(BODY_RESOLVE)] @R|pack/Anno|[Types](value = this@R|pack/TopLevelClass|.R|pack/TopLevelClass.CONST|) i: R|kotlin/Int|): R|kotlin/Int| {
            ^foo Int(0)
        }

        public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(RAW_FIR)] constructor(): R|pack/TopLevelClass.Companion| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val STR: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        }

    }