RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] script2.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-script2.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-script2.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] <script-script2.kts>
        [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(COMPANION_GENERATION)] <script-script2.kts>
        [ResolvedTo(COMPANION_GENERATION)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(SUPER_TYPES)] <script-script2.kts>
        [ResolvedTo(SUPER_TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-script2.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(STATUS)] <script-script2.kts>
        [ResolvedTo(STATUS)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(EXPECT_ACTUAL_MATCHING)] <script-script2.kts>
        [ResolvedTo(EXPECT_ACTUAL_MATCHING)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(CONTRACTS)] <script-script2.kts>
        [ResolvedTo(CONTRACTS)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] <script-script2.kts>
        [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(CONSTANT_EVALUATION)] <script-script2.kts>
        [ResolvedTo(CONSTANT_EVALUATION)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(ANNOTATION_ARGUMENTS)] <script-script2.kts>
        [ResolvedTo(ANNOTATION_ARGUMENTS)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] fun consume([ResolvedTo(RAW_FIR)] x: Int): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val x: Int? = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): Int?

        public? final? [ResolvedTo(RAW_FIR)] val y: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] val z: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        [ResolvedTo(RAW_FIR)] init { LAZY_BLOCK }

        public? final? [ResolvedTo(RAW_FIR)] val zz: <implicit> = LAZY_EXPRESSION
            public? [ResolvedTo(RAW_FIR)] get(): <implicit>

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-script2.kts>
        [ResolvedTo(ANNOTATION_ARGUMENTS)] lval args: R|kotlin/Array<kotlin/String>|

        public? final? [ResolvedTo(RAW_FIR)] fun f([ResolvedTo(RAW_FIR)] p: Int?): Int { LAZY_BLOCK }

        public final [ResolvedTo(CONTRACTS)] fun consume([ResolvedTo(CONTRACTS)] x: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(BODY_RESOLVE)] val x: R|kotlin/Int?| = Int(1)
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int?|

        public final [ResolvedTo(BODY_RESOLVE)] val y: R|kotlin/Int| = R|/x|!!
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] val z: R|kotlin/Int| = R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1))
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

        [ResolvedTo(BODY_RESOLVE)] init {
            R|/consume|(R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1)))
        }

        [ResolvedTo(BODY_RESOLVE)] init {
            R|/x|!!
        }

        [ResolvedTo(BODY_RESOLVE)] init {
            R|/consume|(R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1)))
        }

        public final [ResolvedTo(BODY_RESOLVE)] val zz: R|kotlin/Int| = R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1))
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        public final? [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                LAZY_super<R|kotlin/Any|>
            }

            public? final? [ResolvedTo(RAW_FIR)] val cz: <implicit> = LAZY_EXPRESSION
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] get(): <implicit>

            public? final? [ResolvedTo(RAW_FIR)] fun bar(): <implicit> { LAZY_BLOCK }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] script2.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-script2.kts>
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(BODY_RESOLVE)] fun f([ResolvedTo(BODY_RESOLVE)] p: R|kotlin/Int?|): R|kotlin/Int| {
            [ResolvedTo(BODY_RESOLVE)] lval fy: R|kotlin/Int| = R|<local>/p|!!
            [ResolvedTo(BODY_RESOLVE)] lval fz: R|kotlin/Int| = R|<local>/p|.R|kotlin/Int.plus|(Int(1))
            ^f R|<local>/fz|
        }

        public final [ResolvedTo(BODY_RESOLVE)] fun consume([ResolvedTo(BODY_RESOLVE)] x: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(BODY_RESOLVE)] val x: R|kotlin/Int?| = Int(1)
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int?|

        public final [ResolvedTo(BODY_RESOLVE)] val y: R|kotlin/Int| = R|/x|!!
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] val z: R|kotlin/Int| = R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1))
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Int| {
            ^foo R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1))
        }

        [ResolvedTo(BODY_RESOLVE)] init {
            R|/consume|(R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1)))
        }

        [ResolvedTo(BODY_RESOLVE)] init {
            R|/x|!!
        }

        [ResolvedTo(BODY_RESOLVE)] init {
            R|/consume|(R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1)))
        }

        public final [ResolvedTo(BODY_RESOLVE)] val zz: R|kotlin/Int| = R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1))
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/Int|

        public final [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(BODY_RESOLVE)] val cz: R|kotlin/Int| = R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1))
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] get(): R|kotlin/Int|

            public final [ResolvedTo(BODY_RESOLVE)] fun bar(): R|kotlin/Int| {
                ^bar R|/x|.R|kotlin/Int.plus<Inapplicable(UNSAFE_CALL): kotlin/Int.plus>#|(Int(1))
            }

        }
