KtFile: 'ClassNameBeforeTwoUnsresolvedClassesWithDot.kt'
  NO_CANDIDATES

KtPackageDirective(0,0): ''
  NO_CANDIDATES

KtImportList(0,0): ''
  NO_CANDIDATES

KtClass(1,10): 'class Foo'
  NO_CANDIDATES

KtClass(12,50): 'class C {'
  NO_CANDIDATES

KtClassBody(20,50): '{'
  NO_CANDIDATES

KtProperty(26,48): 'val prop: Foo.Bar.Baz.'
  NO_CANDIDATES

KtTypeReference(36,48): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(36,48): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(36,47): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(36,43): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(36,39): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(40,43): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(44,47): 'Baz'
  NO_CANDIDATES

KtNamedFunction(52,101): 'fun testFun() {'
  NO_CANDIDATES

KtParameterList(63,65): '()'
  NO_CANDIDATES

KtBlockExpression(66,101): '{'
  NO_CANDIDATES

KtProperty(72,99): 'val localProp: Foo.Bar.Baz.'
  NO_CANDIDATES

KtTypeReference(87,99): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(87,99): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(87,98): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(87,94): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(87,90): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(87,90): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(91,94): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(95,98): 'Baz'
  NO_CANDIDATES

KtNamedFunction(103,139): 'fun <T> take(action: (T) -> Unit) {}'
  NO_CANDIDATES

KtTypeParameterList(107,110): '<T>'
  NO_CANDIDATES

KtTypeParameter(108,109): 'T'
  NO_CANDIDATES

KtParameterList(115,136): '(action: (T) -> Unit)'
  NO_CANDIDATES

KtParameter(116,135): 'action: (T) -> Unit'
  NO_CANDIDATES

KtTypeReference(124,135): '(T) -> Unit'
  NO_CANDIDATES

KtFunctionType(124,135): '(T) -> Unit'
  NO_CANDIDATES

KtParameterList(124,127): '(T)'
  NO_CANDIDATES

KtParameter(125,126): 'T'
  NO_CANDIDATES

KtTypeReference(125,126): 'T'
  NO_CANDIDATES

KtUserType(125,126): 'T'
  NO_CANDIDATES

KtNameReferenceExpression(125,126): 'T'
  NO_CANDIDATES

KtTypeReference(131,135): 'Unit'
  NO_CANDIDATES

KtUserType(131,135): 'Unit'
  NO_CANDIDATES

KtNameReferenceExpression(131,135): 'Unit'
  NO_CANDIDATES

KtBlockExpression(137,139): '{}'
  NO_CANDIDATES

KtProperty(141,193): 'val prop = take {'
  NO_CANDIDATES

KtCallExpression(152,193): 'take {'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz. ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<??? (Incomplete user type), Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtNameReferenceExpression(152,156): 'take'
  KaInapplicableCallCandidateInfo:
    candidate = KaSimpleFunctionCall:
      argumentMapping = {
        {
            lambdaParam: Foo.Bar.Baz. ->
        } -> (KaVariableSignature:
          name = action
          receiverType = null
          returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
          symbol = action: kotlin.Function1<T, kotlin.Unit>
          contextParameters = []
          callableId = null)
      }
      isImplicitInvoke = false
      partiallyAppliedSymbol = KaPartiallyAppliedSymbol:
        contextArguments = []
        dispatchReceiver = null
        extensionReceiver = null
        signature = KaFunctionSignature:
          receiverType = null
          returnType = kotlin.Unit
          symbol = /take(action: kotlin.Function1<T, kotlin.Unit>): kotlin.Unit
          valueParameters = [
            KaVariableSignature:
              name = action
              receiverType = null
              returnType = kotlin.Function1<ERROR CLASS: Cannot infer argument for type parameter T, kotlin.Unit>
              symbol = action: kotlin.Function1<T, kotlin.Unit>
              contextParameters = []
              callableId = null
          ]
          contextParameters = []
          callableId = /take
      typeArgumentsMapping = {
        T -> (ERROR CLASS: Cannot infer argument for type parameter T)
      }
    diagnostic = ERROR<ARGUMENT_TYPE_MISMATCH: Argument type mismatch: actual type is 'Function1<??? (Incomplete user type), Unit>', but 'Function1<uninferred T (of fun <T> take), Unit>' was expected.>
    isInBestCandidates = true

KtLambdaArgument(157,193): '{'
  NO_CANDIDATES

KtLambdaExpression(157,193): '{'
  NO_CANDIDATES

KtFunctionLiteral(157,193): '{'
  NO_CANDIDATES

KtParameterList(163,188): 'lambdaParam: Foo.Bar.Baz.'
  NO_CANDIDATES

KtParameter(163,188): 'lambdaParam: Foo.Bar.Baz.'
  NO_CANDIDATES

KtTypeReference(176,188): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(176,188): 'Foo.Bar.Baz.'
  NO_CANDIDATES

KtUserType(176,187): 'Foo.Bar.Baz'
  NO_CANDIDATES

KtUserType(176,183): 'Foo.Bar'
  NO_CANDIDATES

KtUserType(176,179): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(176,179): 'Foo'
  NO_CANDIDATES

KtNameReferenceExpression(180,183): 'Bar'
  NO_CANDIDATES

KtNameReferenceExpression(184,187): 'Baz'
  NO_CANDIDATES

KtBlockExpression(192,192): ''
  NO_CANDIDATES