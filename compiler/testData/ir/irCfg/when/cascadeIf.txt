// FILE: /cascadeIf.kt
// FUN: compare
BB 0
CONTENT
      1 FUN name:compare visibility:public modality:FINAL <> (x:kotlin.Int, y:kotlin.Int) returnType:kotlin.Int flags:
      2 WHEN type=kotlin.Int origin=IF
      3 GET_VAR 'value-parameter x: Int' type=kotlin.Int origin=null
      4 GET_VAR 'value-parameter y: Int' type=kotlin.Int origin=null
OUTGOING -> BB 1, 3
    CALL 'greater(Int, Int): Boolean' type=kotlin.Boolean origin=GT
BB 1
INCOMING <- BB 0
    CALL 'greater(Int, Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
      1 GET_VAR 'value-parameter x: Int' type=kotlin.Int origin=null
      2 GET_VAR 'value-parameter y: Int' type=kotlin.Int origin=null
OUTGOING -> BB 2, 4
    CALL 'less(Int, Int): Boolean' type=kotlin.Boolean origin=LT
BB 2
INCOMING <- BB 1
    CALL 'less(Int, Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
OUTGOING -> BB 5
    CONST Boolean type=kotlin.Boolean value=true
BB 3
INCOMING <- BB 0
    CALL 'greater(Int, Int): Boolean' type=kotlin.Boolean origin=GT
CONTENT
      1 CONST Int type=kotlin.Int value=1
OUTGOING -> BB 6
    When exit: WHEN type=kotlin.Int origin=IF
BB 4
INCOMING <- BB 1
    CALL 'less(Int, Int): Boolean' type=kotlin.Boolean origin=LT
CONTENT
      1 CONST Int type=kotlin.Int value=-1
OUTGOING -> BB 6
    When exit: WHEN type=kotlin.Int origin=IF
BB 5
INCOMING <- BB 2
    CONST Boolean type=kotlin.Boolean value=true
CONTENT
      1 CONST Int type=kotlin.Int value=0
OUTGOING -> BB 6
    When exit: WHEN type=kotlin.Int origin=IF
BB 6
INCOMING <- BB 3, 4, 5
    When exit: WHEN type=kotlin.Int origin=IF
CONTENT
      1 RETURN type=kotlin.Nothing from='compare(Int, Int): Int'
OUTGOING -> NONE
    Function exit: FUN name:compare visibility:public modality:FINAL <> (x:kotlin.Int, y:kotlin.Int) returnType:kotlin.Int flags:

// END FUN: compare

// END FILE: /cascadeIf.kt

