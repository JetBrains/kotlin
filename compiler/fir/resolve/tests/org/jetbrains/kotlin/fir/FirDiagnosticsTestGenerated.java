/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.fir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/fir/resolve/testData/resolve")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class FirDiagnosticsTestGenerated extends AbstractFirDiagnosticsTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInResolve() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve"), Pattern.compile("^([^.]+)\\.kt$"), true, "stdlib", "cfg", "smartcasts");
    }

    @TestMetadata("cast.kt")
    public void testCast() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/cast.kt");
    }

    @TestMetadata("companion.kt")
    public void testCompanion() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/companion.kt");
    }

    @TestMetadata("companionUsesNested.kt")
    public void testCompanionUsesNested() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/companionUsesNested.kt");
    }

    @TestMetadata("copy.kt")
    public void testCopy() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/copy.kt");
    }

    @TestMetadata("delegatedSuperType.kt")
    public void testDelegatedSuperType() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/delegatedSuperType.kt");
    }

    @TestMetadata("derivedClass.kt")
    public void testDerivedClass() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/derivedClass.kt");
    }

    @TestMetadata("enum.kt")
    public void testEnum() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/enum.kt");
    }

    @TestMetadata("exhaustiveness_boolean.kt")
    public void testExhaustiveness_boolean() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/exhaustiveness_boolean.kt");
    }

    @TestMetadata("exhaustiveness_enum.kt")
    public void testExhaustiveness_enum() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/exhaustiveness_enum.kt");
    }

    @TestMetadata("exhaustiveness_sealedClass.kt")
    public void testExhaustiveness_sealedClass() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/exhaustiveness_sealedClass.kt");
    }

    @TestMetadata("extension.kt")
    public void testExtension() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/extension.kt");
    }

    @TestMetadata("F.kt")
    public void testF() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/F.kt");
    }

    @TestMetadata("fakeRecursiveSupertype.kt")
    public void testFakeRecursiveSupertype() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/fakeRecursiveSupertype.kt");
    }

    @TestMetadata("fakeRecursiveTypealias.kt")
    public void testFakeRecursiveTypealias() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/fakeRecursiveTypealias.kt");
    }

    @TestMetadata("fib.kt")
    public void testFib() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/fib.kt");
    }

    @TestMetadata("ft.kt")
    public void testFt() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/ft.kt");
    }

    @TestMetadata("functionTypes.kt")
    public void testFunctionTypes() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/functionTypes.kt");
    }

    @TestMetadata("genericFunctions.kt")
    public void testGenericFunctions() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/genericFunctions.kt");
    }

    @TestMetadata("intersectionTypes.kt")
    public void testIntersectionTypes() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/intersectionTypes.kt");
    }

    @TestMetadata("localObject.kt")
    public void testLocalObject() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/localObject.kt");
    }

    @TestMetadata("nestedClass.kt")
    public void testNestedClass() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/nestedClass.kt");
    }

    @TestMetadata("nestedClassNameClash.kt")
    public void testNestedClassNameClash() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/nestedClassNameClash.kt");
    }

    @TestMetadata("NestedOfAliasedType.kt")
    public void testNestedOfAliasedType() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/NestedOfAliasedType.kt");
    }

    @TestMetadata("nestedReturnType.kt")
    public void testNestedReturnType() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/nestedReturnType.kt");
    }

    @TestMetadata("NestedSuperType.kt")
    public void testNestedSuperType() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/NestedSuperType.kt");
    }

    @TestMetadata("problems2.kt")
    public void testProblems2() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/problems2.kt");
    }

    @TestMetadata("recursiveCallOnWhenWithSealedClass.kt")
    public void testRecursiveCallOnWhenWithSealedClass() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/recursiveCallOnWhenWithSealedClass.kt");
    }

    @TestMetadata("simpleClass.kt")
    public void testSimpleClass() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/simpleClass.kt");
    }

    @TestMetadata("simpleTypeAlias.kt")
    public void testSimpleTypeAlias() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/simpleTypeAlias.kt");
    }

    @TestMetadata("treeSet.kt")
    public void testTreeSet() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/treeSet.kt");
    }

    @TestMetadata("tryInference.kt")
    public void testTryInference() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/tryInference.kt");
    }

    @TestMetadata("TwoDeclarationsInSameFile.kt")
    public void testTwoDeclarationsInSameFile() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/TwoDeclarationsInSameFile.kt");
    }

    @TestMetadata("typeAliasWithGeneric.kt")
    public void testTypeAliasWithGeneric() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/typeAliasWithGeneric.kt");
    }

    @TestMetadata("typeAliasWithTypeArguments.kt")
    public void testTypeAliasWithTypeArguments() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/typeAliasWithTypeArguments.kt");
    }

    @TestMetadata("typeFromGetter.kt")
    public void testTypeFromGetter() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/typeFromGetter.kt");
    }

    @TestMetadata("typeParameterInPropertyReceiver.kt")
    public void testTypeParameterInPropertyReceiver() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/typeParameterInPropertyReceiver.kt");
    }

    @TestMetadata("typeParameterVsNested.kt")
    public void testTypeParameterVsNested() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/typeParameterVsNested.kt");
    }

    @TestMetadata("whenAsReceiver.kt")
    public void testWhenAsReceiver() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/whenAsReceiver.kt");
    }

    @TestMetadata("whenInference.kt")
    public void testWhenInference() throws Exception {
        runTest("compiler/fir/resolve/testData/resolve/whenInference.kt");
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/arguments")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Arguments extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInArguments() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/arguments"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("ambiguityOnJavaOverride.kt")
        public void testAmbiguityOnJavaOverride() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/ambiguityOnJavaOverride.kt");
        }

        @TestMetadata("default.kt")
        public void testDefault() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/default.kt");
        }

        @TestMetadata("defaultFromOverrides.kt")
        public void testDefaultFromOverrides() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/defaultFromOverrides.kt");
        }

        @TestMetadata("fieldPlusAssign.kt")
        public void testFieldPlusAssign() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/fieldPlusAssign.kt");
        }

        @TestMetadata("incorrectFunctionalType.kt")
        public void testIncorrectFunctionalType() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/incorrectFunctionalType.kt");
        }

        @TestMetadata("invoke.kt")
        public void testInvoke() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/invoke.kt");
        }

        @TestMetadata("javaArrayVariance.kt")
        public void testJavaArrayVariance() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/javaArrayVariance.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/lambda.kt");
        }

        @TestMetadata("lambdaInLambda.kt")
        public void testLambdaInLambda() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/lambdaInLambda.kt");
        }

        @TestMetadata("lambdaInLambda2.kt")
        public void testLambdaInLambda2() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/lambdaInLambda2.kt");
        }

        @TestMetadata("lambdaInUnresolvedCall.kt")
        public void testLambdaInUnresolvedCall() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/lambdaInUnresolvedCall.kt");
        }

        @TestMetadata("overloadByReceiver.kt")
        public void testOverloadByReceiver() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/overloadByReceiver.kt");
        }

        @TestMetadata("overloadWithDefault.kt")
        public void testOverloadWithDefault() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/overloadWithDefault.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/simple.kt");
        }

        @TestMetadata("stringTemplates.kt")
        public void testStringTemplates() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/stringTemplates.kt");
        }

        @TestMetadata("tryInLambda.kt")
        public void testTryInLambda() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/tryInLambda.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/arguments/vararg.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/builtins")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Builtins extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInBuiltins() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/builtins"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("lists.kt")
        public void testLists() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/builtins/lists.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Diagnostics extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInDiagnostics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/diagnostics"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("infixFunctions.kt")
        public void testInfixFunctions() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/diagnostics/infixFunctions.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/expresssions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Expresssions extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("access.kt")
        public void testAccess() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/access.kt");
        }

        public void testAllFilesPresentInExpresssions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/expresssions"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("annotations.kt")
        public void testAnnotations() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/annotations.kt");
        }

        @TestMetadata("checkArguments.kt")
        public void testCheckArguments() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/checkArguments.kt");
        }

        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/companion.kt");
        }

        @TestMetadata("companionExtension.kt")
        public void testCompanionExtension() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/companionExtension.kt");
        }

        @TestMetadata("constructor.kt")
        public void testConstructor() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/constructor.kt");
        }

        @TestMetadata("dispatchReceiver.kt")
        public void testDispatchReceiver() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/dispatchReceiver.kt");
        }

        @TestMetadata("enumValues.kt")
        public void testEnumValues() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/enumValues.kt");
        }

        @TestMetadata("extensionPropertyInLambda.kt")
        public void testExtensionPropertyInLambda() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/extensionPropertyInLambda.kt");
        }

        @TestMetadata("genericDecorator.kt")
        public void testGenericDecorator() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/genericDecorator.kt");
        }

        @TestMetadata("genericDescriptor.kt")
        public void testGenericDescriptor() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/genericDescriptor.kt");
        }

        @TestMetadata("genericDiagnostic.kt")
        public void testGenericDiagnostic() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/genericDiagnostic.kt");
        }

        @TestMetadata("genericPropertyAccess.kt")
        public void testGenericPropertyAccess() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/genericPropertyAccess.kt");
        }

        @TestMetadata("genericUsedInFunction.kt")
        public void testGenericUsedInFunction() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/genericUsedInFunction.kt");
        }

        @TestMetadata("importedReceiver.kt")
        public void testImportedReceiver() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/importedReceiver.kt");
        }

        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/lambda.kt");
        }

        @TestMetadata("lambdaWithReceiver.kt")
        public void testLambdaWithReceiver() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/lambdaWithReceiver.kt");
        }

        @TestMetadata("localConstructor.kt")
        public void testLocalConstructor() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/localConstructor.kt");
        }

        @TestMetadata("localExtension.kt")
        public void testLocalExtension() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/localExtension.kt");
        }

        @TestMetadata("localImplicitBodies.kt")
        public void testLocalImplicitBodies() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/localImplicitBodies.kt");
        }

        @TestMetadata("localInnerClass.kt")
        public void testLocalInnerClass() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/localInnerClass.kt");
        }

        @TestMetadata("localScopes.kt")
        public void testLocalScopes() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/localScopes.kt");
        }

        @TestMetadata("localTypes.kt")
        public void testLocalTypes() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/localTypes.kt");
        }

        @TestMetadata("localWithBooleanNot.kt")
        public void testLocalWithBooleanNot() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/localWithBooleanNot.kt");
        }

        @TestMetadata("memberExtension.kt")
        public void testMemberExtension() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/memberExtension.kt");
        }

        @TestMetadata("nestedVisibility.kt")
        public void testNestedVisibility() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/nestedVisibility.kt");
        }

        @TestMetadata("objectVsProperty.kt")
        public void testObjectVsProperty() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/objectVsProperty.kt");
        }

        @TestMetadata("objects.kt")
        public void testObjects() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/objects.kt");
        }

        @TestMetadata("outerObject.kt")
        public void testOuterObject() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/outerObject.kt");
        }

        @TestMetadata("privateObjectLiteral.kt")
        public void testPrivateObjectLiteral() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/privateObjectLiteral.kt");
        }

        @TestMetadata("privateVisibility.kt")
        public void testPrivateVisibility() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/privateVisibility.kt");
        }

        @TestMetadata("protectedVisibility.kt")
        public void testProtectedVisibility() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/protectedVisibility.kt");
        }

        @TestMetadata("qualifiedExpressions.kt")
        public void testQualifiedExpressions() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/qualifiedExpressions.kt");
        }

        @TestMetadata("receiverConsistency.kt")
        public void testReceiverConsistency() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/receiverConsistency.kt");
        }

        @TestMetadata("sameReceiver.kt")
        public void testSameReceiver() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/sameReceiver.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/simple.kt");
        }

        @TestMetadata("this.kt")
        public void testThis() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/this.kt");
        }

        @TestMetadata("typeAliasConstructor.kt")
        public void testTypeAliasConstructor() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/typeAliasConstructor.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/vararg.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/expresssions/when.kt");
        }

        @TestMetadata("compiler/fir/resolve/testData/resolve/expresssions/inference")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inference extends AbstractFirDiagnosticsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            public void testAllFilesPresentInInference() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/expresssions/inference"), Pattern.compile("^([^.]+)\\.kt$"), true);
            }

            @TestMetadata("id.kt")
            public void testId() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/inference/id.kt");
            }

            @TestMetadata("typeParameters.kt")
            public void testTypeParameters() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/inference/typeParameters.kt");
            }

            @TestMetadata("typeParameters2.kt")
            public void testTypeParameters2() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/inference/typeParameters2.kt");
            }
        }

        @TestMetadata("compiler/fir/resolve/testData/resolve/expresssions/invoke")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Invoke extends AbstractFirDiagnosticsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            public void testAllFilesPresentInInvoke() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/expresssions/invoke"), Pattern.compile("^([^.]+)\\.kt$"), true);
            }

            @TestMetadata("explicitReceiver.kt")
            public void testExplicitReceiver() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/explicitReceiver.kt");
            }

            @TestMetadata("explicitReceiver2.kt")
            public void testExplicitReceiver2() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/explicitReceiver2.kt");
            }

            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/extension.kt");
            }

            @TestMetadata("farInvokeExtension.kt")
            public void testFarInvokeExtension() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/farInvokeExtension.kt");
            }

            @TestMetadata("implicitTypeOrder.kt")
            public void testImplicitTypeOrder() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/implicitTypeOrder.kt");
            }

            @TestMetadata("propertyFromParameter.kt")
            public void testPropertyFromParameter() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/propertyFromParameter.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/simple.kt");
            }

            @TestMetadata("threeReceivers.kt")
            public void testThreeReceivers() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/invoke/threeReceivers.kt");
            }
        }

        @TestMetadata("compiler/fir/resolve/testData/resolve/expresssions/operators")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Operators extends AbstractFirDiagnosticsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            public void testAllFilesPresentInOperators() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/expresssions/operators"), Pattern.compile("^([^.]+)\\.kt$"), true);
            }

            @TestMetadata("plus.kt")
            public void testPlus() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/operators/plus.kt");
            }

            @TestMetadata("plusAndPlusAssign.kt")
            public void testPlusAndPlusAssign() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/operators/plusAndPlusAssign.kt");
            }

            @TestMetadata("plusAssign.kt")
            public void testPlusAssign() throws Exception {
                runTest("compiler/fir/resolve/testData/resolve/expresssions/operators/plusAssign.kt");
            }
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/fromBuilder")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FromBuilder extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInFromBuilder() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/fromBuilder"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("complexTypes.kt")
        public void testComplexTypes() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/fromBuilder/complexTypes.kt");
        }

        @TestMetadata("enums.kt")
        public void testEnums() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/fromBuilder/enums.kt");
        }

        @TestMetadata("noPrimaryConstructor.kt")
        public void testNoPrimaryConstructor() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/fromBuilder/noPrimaryConstructor.kt");
        }

        @TestMetadata("simpleClass.kt")
        public void testSimpleClass() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/fromBuilder/simpleClass.kt");
        }

        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/fromBuilder/typeParameters.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/multifile")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Multifile extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInMultifile() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/multifile"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("Annotations.kt")
        public void testAnnotations() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/Annotations.kt");
        }

        @TestMetadata("ByteArray.kt")
        public void testByteArray() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/ByteArray.kt");
        }

        @TestMetadata("importFromObject.kt")
        public void testImportFromObject() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/importFromObject.kt");
        }

        @TestMetadata("NestedSuperType.kt")
        public void testNestedSuperType() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/NestedSuperType.kt");
        }

        @TestMetadata("sealedStarImport.kt")
        public void testSealedStarImport() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/sealedStarImport.kt");
        }

        @TestMetadata("simpleAliasedImport.kt")
        public void testSimpleAliasedImport() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/simpleAliasedImport.kt");
        }

        @TestMetadata("simpleImport.kt")
        public void testSimpleImport() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/simpleImport.kt");
        }

        @TestMetadata("simpleImportNested.kt")
        public void testSimpleImportNested() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/simpleImportNested.kt");
        }

        @TestMetadata("simpleImportOuter.kt")
        public void testSimpleImportOuter() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/simpleImportOuter.kt");
        }

        @TestMetadata("simpleStarImport.kt")
        public void testSimpleStarImport() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/simpleStarImport.kt");
        }

        @TestMetadata("TypeAliasExpansion.kt")
        public void testTypeAliasExpansion() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/multifile/TypeAliasExpansion.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/nested")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Nested extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInNested() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/nested"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/nested/inner.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/nested/simple.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/overrides")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Overrides extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInOverrides() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/overrides"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("generics.kt")
        public void testGenerics() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/overrides/generics.kt");
        }

        @TestMetadata("protobufExt.kt")
        public void testProtobufExt() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/overrides/protobufExt.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/overrides/simple.kt");
        }

        @TestMetadata("simpleFakeOverride.kt")
        public void testSimpleFakeOverride() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/overrides/simpleFakeOverride.kt");
        }

        @TestMetadata("supertypeGenerics.kt")
        public void testSupertypeGenerics() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/overrides/supertypeGenerics.kt");
        }

        @TestMetadata("supertypeGenericsComplex.kt")
        public void testSupertypeGenericsComplex() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/overrides/supertypeGenericsComplex.kt");
        }

        @TestMetadata("three.kt")
        public void testThree() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/overrides/three.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/problems")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Problems extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInProblems() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/problems"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("asImports.kt")
        public void testAsImports() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/asImports.kt");
        }

        @TestMetadata("invokeOfLambdaWithReceiver.kt")
        public void testInvokeOfLambdaWithReceiver() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/invokeOfLambdaWithReceiver.kt");
        }

        @TestMetadata("javaAccessorConversion.kt")
        public void testJavaAccessorConversion() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/javaAccessorConversion.kt");
        }

        @TestMetadata("javaFieldVsAccessor.kt")
        public void testJavaFieldVsAccessor() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/javaFieldVsAccessor.kt");
        }

        @TestMetadata("localFunctionsHiding.kt")
        public void testLocalFunctionsHiding() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/localFunctionsHiding.kt");
        }

        @TestMetadata("nestedClassContructor.kt")
        public void testNestedClassContructor() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/nestedClassContructor.kt");
        }

        @TestMetadata("propertyFromJavaPlusAssign.kt")
        public void testPropertyFromJavaPlusAssign() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/propertyFromJavaPlusAssign.kt");
        }

        @TestMetadata("receiverWithCapturedType.kt")
        public void testReceiverWithCapturedType() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/receiverWithCapturedType.kt");
        }

        @TestMetadata("syntheticsVsNormalProperties.kt")
        public void testSyntheticsVsNormalProperties() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/problems/syntheticsVsNormalProperties.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/references")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class References extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInReferences() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/references"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/references/simple.kt");
        }

        @TestMetadata("superMember.kt")
        public void testSuperMember() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/references/superMember.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/samConstructors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SamConstructors extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInSamConstructors() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/samConstructors"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("genericSam.kt")
        public void testGenericSam() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConstructors/genericSam.kt");
        }

        @TestMetadata("genericSamInferenceFromExpectType.kt")
        public void testGenericSamInferenceFromExpectType() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConstructors/genericSamInferenceFromExpectType.kt");
        }

        @TestMetadata("kotlinSam.kt")
        public void testKotlinSam() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConstructors/kotlinSam.kt");
        }

        @TestMetadata("realConstructorFunction.kt")
        public void testRealConstructorFunction() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConstructors/realConstructorFunction.kt");
        }

        @TestMetadata("runnable.kt")
        public void testRunnable() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConstructors/runnable.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConstructors/simple.kt");
        }
    }

    @TestMetadata("compiler/fir/resolve/testData/resolve/samConversions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SamConversions extends AbstractFirDiagnosticsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        public void testAllFilesPresentInSamConversions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/fir/resolve/testData/resolve/samConversions"), Pattern.compile("^([^.]+)\\.kt$"), true);
        }

        @TestMetadata("genericSam.kt")
        public void testGenericSam() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConversions/genericSam.kt");
        }

        @TestMetadata("kotlinSam.kt")
        public void testKotlinSam() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConversions/kotlinSam.kt");
        }

        @TestMetadata("notSamBecauseOfSupertype.kt")
        public void testNotSamBecauseOfSupertype() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConversions/notSamBecauseOfSupertype.kt");
        }

        @TestMetadata("runnable.kt")
        public void testRunnable() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConversions/runnable.kt");
        }

        @TestMetadata("samSupertype.kt")
        public void testSamSupertype() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConversions/samSupertype.kt");
        }

        @TestMetadata("samSupertypeWithOverride.kt")
        public void testSamSupertypeWithOverride() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConversions/samSupertypeWithOverride.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/fir/resolve/testData/resolve/samConversions/simple.kt");
        }
    }
}
