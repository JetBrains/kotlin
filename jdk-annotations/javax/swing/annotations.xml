<?xml version="1.0" encoding="UTF-8"?>
<root>
    <item name="javax.swing.AbstractButton java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton java.awt.event.ItemListener[] getItemListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton java.beans.PropertyChangeListener createActionPropertyChangeListener(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton void actionPropertyChanged(javax.swing.Action, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleRelationSet getAccessibleRelationSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton.AccessibleAbstractButton javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractButton.ButtonChangeListener void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractCellEditor javax.swing.event.CellEditorListener[] getCellEditorListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractListModel T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractListModel T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractListModel javax.swing.event.ListDataListener[] getListDataListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractSpinnerModel T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractSpinnerModel T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.AbstractSpinnerModel javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ActionMap javax.swing.Action get(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ActionMap void remove(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createBevelBorder(int, java.awt.Color, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createBevelBorder(int, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createEmptyBorder()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createEmptyBorder(int, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createEtchedBorder()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createEtchedBorder(int, java.awt.Color, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createEtchedBorder(java.awt.Color, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createLineBorder(java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createLineBorder(java.awt.Color, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createLineBorder(java.awt.Color, int, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createSoftBevelBorder(int, java.awt.Color, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createSoftBevelBorder(int, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createStrokeBorder(java.awt.BasicStroke)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.Border createStrokeBorder(java.awt.BasicStroke, java.awt.Paint)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.CompoundBorder createCompoundBorder()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.CompoundBorder createCompoundBorder(javax.swing.border.Border, javax.swing.border.Border)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.MatteBorder createMatteBorder(int, int, int, int, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.MatteBorder createMatteBorder(int, int, int, int, javax.swing.Icon)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String, int, int, java.awt.Font)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BorderFactory javax.swing.border.TitledBorder createTitledBorder(javax.swing.border.Border, java.lang.String, int, int, java.awt.Font, java.awt.Color)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box java.awt.Component createGlue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box java.awt.Component createHorizontalGlue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box java.awt.Component createHorizontalStrut(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box java.awt.Component createRigidArea(java.awt.Dimension)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box java.awt.Component createVerticalGlue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box java.awt.Component createVerticalStrut(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box javax.swing.Box createHorizontalBox()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box javax.swing.Box createVerticalBox()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box void paintComponent(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box.AccessibleBox javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box.Filler void paintComponent(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Box.Filler.AccessibleBoxFiller javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.BoxLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ButtonGroup java.util.Enumeration&lt;javax.swing.AbstractButton&gt; getElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.CellRendererPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.CellRendererPane void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.CellRendererPane void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, java.awt.Rectangle) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.CellRendererPane void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.CellRendererPane.AccessibleCellRendererPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ComponentInputMap ComponentInputMap(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DebugGraphics DebugGraphics(java.awt.Graphics, javax.swing.JComponent) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DebugGraphics java.awt.Graphics create()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DebugGraphics java.awt.Graphics create(int, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultBoundedRangeModel T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultBoundedRangeModel T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultBoundedRangeModel java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultBoundedRangeModel javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultButtonModel T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultButtonModel T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultButtonModel java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultButtonModel java.awt.event.ItemListener[] getItemListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultButtonModel javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor DefaultCellEditor(javax.swing.JCheckBox) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor DefaultCellEditor(javax.swing.JComboBox) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor DefaultCellEditor(javax.swing.JTextField) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor java.awt.Component getTreeCellEditorComponent(javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor.EditorDelegate java.lang.Object getCellEditorValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor.EditorDelegate void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor.EditorDelegate void itemStateChanged(java.awt.event.ItemEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultCellEditor.EditorDelegate void setValue(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultComboBoxModel DefaultComboBoxModel(E[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager boolean wasIcon(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager java.awt.Rectangle getBoundsForIconOf(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager java.awt.Rectangle getPreviousBounds(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void activateFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void closeFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void deactivateFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void deiconifyFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void iconifyFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void maximizeFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void minimizeFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void openFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void removeIconFor(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void resizeFrame(javax.swing.JComponent, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void setBoundsForFrame(javax.swing.JComponent, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultDesktopManager void setPreviousBounds(javax.swing.JInternalFrame, java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultFocusManager boolean compareTabOrder(java.awt.Component, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultFocusManager boolean compareTabOrder(java.awt.Component, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultFocusManager java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultFocusManager java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultFocusManager java.awt.Component getFirstComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultFocusManager java.awt.Component getLastComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListCellRenderer java.awt.Component getListCellRendererComponent(javax.swing.JList&lt;?&gt;, java.lang.Object, int, boolean, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListCellRenderer java.awt.Component getListCellRendererComponent(javax.swing.JList&lt;?&gt;, java.lang.Object, int, boolean, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListCellRenderer void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListCellRenderer void repaint(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListModel java.lang.Object[] toArray()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListModel java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListModel java.util.Enumeration&lt;E&gt; elements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListSelectionModel T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListSelectionModel T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListSelectionModel java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListSelectionModel java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultListSelectionModel javax.swing.event.ListSelectionListener[] getListSelectionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultRowSorter void setModelWrapper(javax.swing.DefaultRowSorter.ModelWrapper&lt;M,I&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultRowSorter.ModelWrapper java.lang.String getStringValueAt(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultSingleSelectionModel T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultSingleSelectionModel T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DefaultSingleSelectionModel javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void activateFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void closeFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void deactivateFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void deiconifyFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void iconifyFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void maximizeFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void minimizeFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void openFrame(javax.swing.JInternalFrame) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void resizeFrame(javax.swing.JComponent, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DesktopManager void setBoundsForFrame(javax.swing.JComponent, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.DropMode javax.swing.DropMode valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.FocusManager javax.swing.FocusManager getCurrentManager()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GrayFilter java.awt.Image createDisabledImage(java.awt.Image) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout GroupLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createBaselineGroup(boolean, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createParallelGroup()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createParallelGroup(javax.swing.GroupLayout.Alignment)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createParallelGroup(javax.swing.GroupLayout.Alignment) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createParallelGroup(javax.swing.GroupLayout.Alignment, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout javax.swing.GroupLayout.ParallelGroup createParallelGroup(javax.swing.GroupLayout.Alignment, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout javax.swing.GroupLayout.SequentialGroup createSequentialGroup()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void linkSize(int, java.awt.Component...) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void linkSize(java.awt.Component...) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void replace(java.awt.Component, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void replace(java.awt.Component, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void setHonorsVisibility(java.awt.Component, java.lang.Boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void setHorizontalGroup(javax.swing.GroupLayout.Group) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout void setVerticalGroup(javax.swing.GroupLayout.Group) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.Alignment javax.swing.GroupLayout.Alignment valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addComponent(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addComponent(java.awt.Component, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addGap(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addGap(int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addGroup(javax.swing.GroupLayout.Group)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.Group javax.swing.GroupLayout.Group addGroup(javax.swing.GroupLayout.Group) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.Group addComponent(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.Group addComponent(java.awt.Component, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.Group addGap(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.Group addGap(int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.Group addGroup(javax.swing.GroupLayout.Group)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.Group addGroup(javax.swing.GroupLayout.Group) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addComponent(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addComponent(java.awt.Component, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addGap(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addGap(int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addGroup(javax.swing.GroupLayout.Alignment, javax.swing.GroupLayout.Group) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.ParallelGroup javax.swing.GroupLayout.ParallelGroup addGroup(javax.swing.GroupLayout.Group)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.Group addComponent(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.Group addComponent(java.awt.Component, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.Group addGap(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.Group addGap(int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.Group addGroup(javax.swing.GroupLayout.Group)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.Group addGroup(javax.swing.GroupLayout.Group) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(boolean, java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(boolean, java.awt.Component, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addComponent(java.awt.Component, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addGap(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addGap(int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addGroup(boolean, javax.swing.GroupLayout.Group)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addGroup(javax.swing.GroupLayout.Group)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.GroupLayout.SequentialGroup javax.swing.GroupLayout.SequentialGroup addPreferredGap(javax.swing.JComponent, javax.swing.JComponent, javax.swing.LayoutStyle.ComponentPlacement, int, int) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Icon void paintIcon(java.awt.Component, java.awt.Graphics, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Icon void paintIcon(java.awt.Component, java.awt.Graphics, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon ImageIcon(byte[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon ImageIcon(byte[], java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon ImageIcon(java.awt.Image) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon ImageIcon(java.net.URL) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon void loadImage(java.awt.Image) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon void setImage(java.awt.Image) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ImageIcon.AccessibleImageIcon javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet javax.swing.JRootPane createRootPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet void setContentPane(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet void setGlassPane(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet void setLayeredPane(javax.swing.JLayeredPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JApplet void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JButton java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JButton java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JButton.AccessibleJButton javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JCheckBox java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JCheckBox java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JCheckBox.AccessibleJCheckBox javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JCheckBoxMenuItem java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JCheckBoxMenuItem java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JColorChooser java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JColorChooser java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JColorChooser javax.swing.JDialog createDialog(java.awt.Component, java.lang.String, boolean, javax.swing.JColorChooser, java.awt.event.ActionListener, java.awt.event.ActionListener)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JColorChooser.AccessibleJColorChooser javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox java.awt.event.ItemListener[] getItemListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox java.beans.PropertyChangeListener createActionPropertyChangeListener(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox java.lang.Object[] getSelectedObjects()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox javax.swing.JComboBox.KeySelectionManager createDefaultKeySelectionManager()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox javax.swing.event.PopupMenuListener[] getPopupMenuListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox void configureEditor(javax.swing.ComboBoxEditor, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox void contentsChanged(javax.swing.event.ListDataEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox void intervalAdded(javax.swing.event.ListDataEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox void intervalRemoved(javax.swing.event.ListDataEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox void processKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox.AccessibleJComboBox AccessibleJComboBox(javax.swing.JComboBox) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox.AccessibleJComboBox javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComboBox.KeySelectionManager int selectionForKey(char, javax.swing.ComboBoxModel) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent boolean isLightweightComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Component.BaselineResizeBehavior getBaselineResizeBehavior()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Dimension getSize(java.awt.Dimension)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Graphics getComponentGraphics(java.awt.Graphics)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Graphics getComponentGraphics(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Insets getInsets()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Insets getInsets(java.awt.Insets)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Insets getInsets(java.awt.Insets) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Point getLocation(java.awt.Point)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Rectangle getBounds(java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.awt.Rectangle getVisibleRect()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent java.util.Locale getDefaultLocale()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent javax.accessibility.AccessibleContext getAccessibleContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent javax.swing.JToolTip createToolTip()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent javax.swing.KeyStroke[] getRegisteredKeyStrokes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent javax.swing.event.AncestorListener[] getAncestorListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void computeVisibleRect(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void paintComponent(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void paintImmediately(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void processKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void processMouseEvent(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void repaint(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void scrollRectToVisible(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleContainerHandler void componentAdded(java.awt.event.ContainerEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleContainerHandler void componentRemoved(java.awt.event.ContainerEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleFocusHandler void focusGained(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JComponent.AccessibleJComponent.AccessibleFocusHandler void focusLost(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDesktopPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDesktopPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDesktopPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDesktopPane void setComponentZOrder(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDesktopPane.AccessibleJDesktopPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog javax.swing.JRootPane createRootPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog void processWindowEvent(java.awt.event.WindowEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog void setContentPane(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog void setGlassPane(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog void setLayeredPane(javax.swing.JLayeredPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JDialog void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane JEditorPane(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane JEditorPane(java.lang.String, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane JEditorPane(java.net.URL) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane java.io.InputStream getStream(java.net.URL) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane javax.swing.event.HyperlinkListener[] getHyperlinkListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane javax.swing.text.EditorKit createDefaultEditorKit()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void registerEditorKitForContentType(java.lang.String, java.lang.String) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void registerEditorKitForContentType(java.lang.String, java.lang.String, java.lang.ClassLoader) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void registerEditorKitForContentType(java.lang.String, java.lang.String, java.lang.ClassLoader) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void setContentType(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void setEditorKit(javax.swing.text.EditorKit) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void setEditorKitForContentType(java.lang.String, javax.swing.text.EditorKit) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void setPage(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane void setPage(java.net.URL) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane.AccessibleJEditorPane javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML AccessibleJEditorPaneHTML(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane.AccessibleJEditorPaneHTML javax.accessibility.AccessibleText getAccessibleText()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport JEditorPaneAccessibleHypertextSupport(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink java.lang.Object getAccessibleActionObject(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFileChooser java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFileChooser java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFileChooser java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFileChooser javax.swing.JDialog createDialog(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFileChooser javax.swing.filechooser.FileFilter[] getChoosableFileFilters()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFileChooser.AccessibleJFileChooser javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField javax.swing.Action[] getActions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField void processFocusEvent(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField void processInputMethodEvent(java.awt.event.InputMethodEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField void setDocument(javax.swing.text.Document) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField.AbstractFormatter java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField.AbstractFormatter java.lang.Object stringToValue(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField.AbstractFormatter java.lang.String valueToString(java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFormattedTextField.AbstractFormatter java.lang.String valueToString(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame javax.swing.JRootPane createRootPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame void processWindowEvent(java.awt.event.WindowEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame void setContentPane(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame void setGlassPane(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame void setLayeredPane(javax.swing.JLayeredPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JFrame void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame javax.swing.JDesktopPane getDesktopPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame javax.swing.JRootPane createRootPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame javax.swing.event.InternalFrameListener[] getInternalFrameListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame void paintComponent(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame void setContentPane(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame void setGlassPane(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame void setLayer(java.lang.Integer) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame void setLayeredPane(javax.swing.JLayeredPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame.AccessibleJInternalFrame javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame.AccessibleJInternalFrame javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame.JDesktopIcon java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLabel java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLabel java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleRelationSet getAccessibleRelationSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLabel.AccessibleJLabel javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer javax.swing.JPanel createGlassPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer void paintComponent(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer void propertyChange(java.beans.PropertyChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayer void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane int getLayer(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane java.awt.Component[] getComponentsInLayer(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane java.lang.Integer getObjectForLayer(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void moveToBack(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void moveToFront(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void putLayer(javax.swing.JComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void setLayer(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void setLayer(java.awt.Component, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane void setPosition(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JLayeredPane.AccessibleJLayeredPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList JList(javax.swing.ListModel&lt;E&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList int getNextMatch(java.lang.String, int, javax.swing.text.Position.Bias) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList int[] getSelectedIndices()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList java.lang.Object[] getSelectedValues()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList java.util.List&lt;E&gt; getSelectedValuesList()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList javax.swing.ListSelectionModel createSelectionModel()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList javax.swing.event.ListSelectionListener[] getListSelectionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList void setDropMode(javax.swing.DropMode) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList void setModel(javax.swing.ListModel&lt;E&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList void setSelectedIndices(int[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList void setSelectionModel(javax.swing.ListSelectionModel) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList AccessibleJList(javax.swing.JList) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList void contentsChanged(javax.swing.event.ListDataEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList void intervalAdded(javax.swing.event.ListDataEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList void intervalRemoved(javax.swing.event.ListDataEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList void propertyChange(java.beans.PropertyChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList void valueChanged(javax.swing.event.ListSelectionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleComponent getAccessibleComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleContext getAccessibleContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.AccessibleJList.AccessibleJListChild void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JList.DropLocation java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu java.awt.Component add(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu java.awt.Component add(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu java.awt.Component getComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu java.awt.Point getPopupMenuOrigin()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu java.beans.PropertyChangeListener createActionChangeListener(javax.swing.JMenuItem) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu javax.swing.JMenu.WinListener createWinListener(javax.swing.JPopupMenu)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu javax.swing.JMenuItem add(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu javax.swing.JMenuItem add(javax.swing.JMenuItem) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu javax.swing.JMenuItem createActionComponent(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu javax.swing.JMenuItem insert(javax.swing.Action, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu javax.swing.MenuElement[] getSubElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu javax.swing.event.MenuListener[] getMenuListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu void applyComponentOrientation(java.awt.ComponentOrientation) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu void processKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu.AccessibleJMenu javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu.AccessibleJMenu javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenu.WinListener void windowClosing(java.awt.event.WindowEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar java.awt.Component getComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar javax.swing.JMenu add(javax.swing.JMenu) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar javax.swing.MenuElement[] getSubElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar.AccessibleJMenuBar javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuBar.AccessibleJMenuBar javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem java.awt.Component getComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem javax.swing.MenuElement[] getSubElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem javax.swing.event.MenuDragMouseListener[] getMenuDragMouseListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem javax.swing.event.MenuKeyListener[] getMenuKeyListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem void actionPropertyChanged(javax.swing.Action, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem void processMenuDragMouseEvent(javax.swing.event.MenuDragMouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem void processMenuKeyEvent(javax.swing.event.MenuKeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem.AccessibleJMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JMenuItem.AccessibleJMenuItem void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showConfirmDialog(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showConfirmDialog(java.awt.Component, java.lang.Object, java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showConfirmDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showConfirmDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int, javax.swing.Icon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showInternalConfirmDialog(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showInternalConfirmDialog(java.awt.Component, java.lang.Object, java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showInternalConfirmDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showInternalConfirmDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int, javax.swing.Icon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showInternalOptionDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int, javax.swing.Icon, java.lang.Object[], java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane int showOptionDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int, javax.swing.Icon, java.lang.Object[], java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.awt.Frame getRootFrame()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.Object showInputDialog(java.awt.Component, java.lang.Object, java.lang.String, int, javax.swing.Icon, java.lang.Object[], java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.Object showInternalInputDialog(java.awt.Component, java.lang.Object, java.lang.String, int, javax.swing.Icon, java.lang.Object[], java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.String showInputDialog(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.String showInputDialog(java.awt.Component, java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.String showInputDialog(java.awt.Component, java.lang.Object, java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.String showInternalInputDialog(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane java.lang.String showInternalInputDialog(java.awt.Component, java.lang.Object, java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane javax.swing.JDialog createDialog(java.awt.Component, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane javax.swing.JDialog createDialog(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane javax.swing.JInternalFrame createInternalFrame(java.awt.Component, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane javax.swing.JInternalFrame createInternalFrame(java.awt.Component, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane void showInternalMessageDialog(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane void showInternalMessageDialog(java.awt.Component, java.lang.Object, java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane void showInternalMessageDialog(java.awt.Component, java.lang.Object, java.lang.String, int, javax.swing.Icon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane void showMessageDialog(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane void showMessageDialog(java.awt.Component, java.lang.Object, java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane void showMessageDialog(java.awt.Component, java.lang.Object, java.lang.String, int, javax.swing.Icon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JOptionPane.AccessibleJOptionPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPanel java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPanel java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPanel.AccessibleJPanel javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPasswordField java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPasswordField java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPasswordField.AccessibleJPasswordField javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPasswordField.AccessibleJPasswordField javax.accessibility.AccessibleText getAccessibleText()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu boolean isPopupTrigger(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu java.awt.Component getComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu java.beans.PropertyChangeListener createActionChangeListener(javax.swing.JMenuItem) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu javax.accessibility.AccessibleContext getAccessibleContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu javax.swing.JMenuItem add(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu javax.swing.JMenuItem add(javax.swing.JMenuItem) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu javax.swing.JMenuItem createActionComponent(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu javax.swing.MenuElement[] getSubElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu javax.swing.event.MenuKeyListener[] getMenuKeyListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu javax.swing.event.PopupMenuListener[] getPopupMenuListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu void processFocusEvent(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu void processKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu.AccessibleJPopupMenu AccessibleJPopupMenu(javax.swing.JPopupMenu) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu.AccessibleJPopupMenu javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu.AccessibleJPopupMenu void propertyChange(java.beans.PropertyChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JPopupMenu.Separator java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JProgressBar java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JProgressBar java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JProgressBar javax.swing.event.ChangeListener createChangeListener()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JProgressBar javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JProgressBar.AccessibleJProgressBar javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JProgressBar.AccessibleJProgressBar javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JProgressBar.AccessibleJProgressBar javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRadioButton java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRadioButton java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRadioButton.AccessibleJRadioButton javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRadioButtonMenuItem java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRadioButtonMenuItem java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane java.awt.Component createGlassPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane java.awt.Container createContentPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane java.awt.LayoutManager createRootLayout()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane javax.swing.JLayeredPane createLayeredPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane void setContentPane(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane void setGlassPane(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane void setLayeredPane(javax.swing.JLayeredPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.AccessibleJRootPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JRootPane.RootLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar java.awt.Dimension getMaximumSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar java.awt.Dimension getMinimumSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar java.awt.event.AdjustmentListener[] getAdjustmentListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar.AccessibleJScrollBar java.lang.Number getMaximumAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar.AccessibleJScrollBar javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar.AccessibleJScrollBar javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollBar.AccessibleJScrollBar javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane java.awt.Rectangle getViewportBorderBounds()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane javax.swing.JScrollBar createHorizontalScrollBar()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane javax.swing.JScrollBar createVerticalScrollBar()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane javax.swing.JViewport createViewport()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane.AccessibleJScrollPane AccessibleJScrollPane(javax.swing.JScrollPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane.AccessibleJScrollPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane.AccessibleJScrollPane void propertyChange(java.beans.PropertyChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JScrollPane.AccessibleJScrollPane void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSeparator java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSeparator java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSeparator.AccessibleJSeparator javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider java.util.Hashtable createStandardLabels(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider java.util.Hashtable createStandardLabels(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider javax.swing.event.ChangeListener createChangeListener()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider.AccessibleJSlider javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider.AccessibleJSlider javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSlider.AccessibleJSlider javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner JSpinner(javax.swing.SpinnerModel) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner javax.swing.JComponent createEditor(javax.swing.SpinnerModel)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner void setEditor(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner void setModel(javax.swing.SpinnerModel) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.AccessibleJSpinner AccessibleJSpinner(javax.swing.JSpinner) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleText getAccessibleText()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.AccessibleJSpinner javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.AccessibleJSpinner void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DateEditor DateEditor(javax.swing.JSpinner) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DateEditor DateEditor(javax.swing.JSpinner, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor DefaultEditor(javax.swing.JSpinner) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor java.awt.Component.BaselineResizeBehavior getBaselineResizeBehavior()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor void dismiss(javax.swing.JSpinner) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor void propertyChange(java.beans.PropertyChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.DefaultEditor void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.ListEditor ListEditor(javax.swing.JSpinner) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSpinner.NumberEditor NumberEditor(javax.swing.JSpinner) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSplitPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSplitPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSplitPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSplitPane void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSplitPane.AccessibleJSplitPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSplitPane.AccessibleJSplitPane javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JSplitPane.AccessibleJSplitPane javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.awt.Component add(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.awt.Component add(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane javax.swing.event.ChangeListener createChangeListener()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane void add(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane void add(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane AccessibleJTabbedPane(javax.swing.JTabbedPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane.AccessibleJTabbedPane void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTabbedPane.ModelListener void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable JTable(java.lang.Object[][], java.lang.Object[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable JTable(java.lang.Object[][], java.lang.Object[]) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable int columnAtPoint(java.awt.Point)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun columnAtPoint(point : Point) : Int&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable int columnAtPoint(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable int rowAtPoint(java.awt.Point)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun rowAtPoint(point : Point) : Int&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable int rowAtPoint(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable int[] getSelectedRows()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable java.awt.Component prepareEditor(javax.swing.table.TableCellEditor, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable java.awt.Dimension getIntercellSpacing()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getIntercellSpacing() : Dimension&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable java.awt.Rectangle getCellRect(int, int, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value"
                    val="&quot;fun getCellRect(row : Int, column : Int, includeSpacing : Boolean) : Rectangle&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable java.awt.print.Printable getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable java.lang.String getToolTipText(java.awt.event.MouseEvent)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getToolTipText(event : MouseEvent) : String?&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable javax.swing.JScrollPane createScrollPaneForTable(javax.swing.JTable)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable javax.swing.ListSelectionModel createDefaultSelectionModel()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable javax.swing.table.JTableHeader createDefaultTableHeader()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable javax.swing.table.TableColumn getColumn(java.lang.Object)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getColumn(identifier : Any) : TableColumn?&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable javax.swing.table.TableColumn getColumn(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable javax.swing.table.TableColumnModel createDefaultColumnModel()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable javax.swing.table.TableModel createDefaultDataModel()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void addColumn(javax.swing.table.TableColumn)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun addColumn(aColumn : TableColumn) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void addColumn(javax.swing.table.TableColumn) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void columnAdded(javax.swing.event.TableColumnModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void columnMoved(javax.swing.event.TableColumnModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void columnRemoved(javax.swing.event.TableColumnModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void columnSelectionChanged(javax.swing.event.ListSelectionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void removeColumn(javax.swing.table.TableColumn)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun removeColumn(aColumn : TableColumn) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void removeColumn(javax.swing.table.TableColumn) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void setColumnModel(javax.swing.table.TableColumnModel)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setColumnModel(columnModel : TableColumnModel) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void setColumnModel(javax.swing.table.TableColumnModel) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void setDropMode(javax.swing.DropMode)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setDropMode(dropMode : DropMode) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void setDropMode(javax.swing.DropMode) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void setGridColor(java.awt.Color)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setGridColor(gridColor : Color) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void setGridColor(java.awt.Color) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void setIntercellSpacing(java.awt.Dimension)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setIntercellSpacing(intercellSpacing : Dimension) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void setIntercellSpacing(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void setModel(javax.swing.table.TableModel)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setModel(dataModel : TableModel) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void setModel(javax.swing.table.TableModel) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void setSelectionModel(javax.swing.ListSelectionModel)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setSelectionModel(newModel : ListSelectionModel) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void setSelectionModel(javax.swing.ListSelectionModel) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void sorterChanged(javax.swing.event.RowSorterEvent)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun sorterChanged(e : RowSorterEvent) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JTable void sorterChanged(javax.swing.event.RowSorterEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable void valueChanged(javax.swing.event.ListSelectionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable AccessibleJTable(javax.swing.JTable) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable int[] getSelectedAccessibleRows()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable javax.accessibility.AccessibleTable getAccessibleTable()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void columnAdded(javax.swing.event.TableColumnModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void columnMoved(javax.swing.event.TableColumnModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void columnRemoved(javax.swing.event.TableColumnModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void columnSelectionChanged(javax.swing.event.ListSelectionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void propertyChange(java.beans.PropertyChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void tableRowsDeleted(javax.swing.event.TableModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void tableRowsInserted(javax.swing.event.TableModelEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable void valueChanged(javax.swing.event.ListSelectionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.AccessibleComponent getAccessibleComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell javax.accessibility.AccessibleContext getAccessibleContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.AccessibleJTable.AccessibleJTableCell void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.DropLocation java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTable.PrintMode javax.swing.JTable.PrintMode valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextArea int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextArea java.awt.Dimension getPreferredScrollableViewportSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextArea java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextArea java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextArea javax.swing.text.Document createDefaultModel()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextArea.AccessibleJTextArea javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField java.awt.Dimension getPreferredSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField java.beans.PropertyChangeListener createActionPropertyChangeListener(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField javax.swing.Action[] getActions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField javax.swing.text.Document createDefaultModel()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField void scrollRectToVisible(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField void setDocument(javax.swing.text.Document) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextField.AccessibleJTextField javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextPane java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextPane javax.swing.text.EditorKit createDefaultEditorKit()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextPane void setDocument(javax.swing.text.Document) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTextPane void setEditorKit(javax.swing.text.EditorKit) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToggleButton java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToggleButton java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToggleButton.AccessibleJToggleButton AccessibleJToggleButton(javax.swing.JToggleButton) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToggleButton.AccessibleJToggleButton javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToggleButton.AccessibleJToggleButton void itemStateChanged(java.awt.event.ItemEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolBar java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolBar java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolBar javax.swing.JButton add(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolBar javax.swing.JButton createActionComponent(javax.swing.Action)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolBar void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolBar.AccessibleJToolBar javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolBar.Separator java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolTip java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolTip java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JToolTip.AccessibleJToolTip javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree java.awt.Dimension getPreferredScrollableViewportSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree java.lang.String convertValueToText(java.lang.Object, boolean, boolean, boolean, int, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.event.TreeExpansionListener[] getTreeExpansionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.event.TreeModelListener createTreeModelListener()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.event.TreeSelectionListener[] getTreeSelectionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.event.TreeWillExpandListener[] getTreeWillExpandListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.tree.TreeModel createTreeModel(java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.tree.TreeModel getDefaultTreeModel()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.tree.TreePath getNextMatch(java.lang.String, int, javax.swing.text.Position.Bias) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree javax.swing.tree.TreePath[] getPathBetweenRows(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree void setDropMode(javax.swing.DropMode) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree AccessibleJTree(javax.swing.JTree) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree void treeCollapsed(javax.swing.event.TreeExpansionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree void treeExpanded(javax.swing.event.TreeExpansionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree void valueChanged(javax.swing.event.TreeSelectionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode AccessibleJTreeNode(javax.swing.JTree.AccessibleJTree, javax.swing.JTree, javax.swing.tree.TreePath, javax.accessibility.Accessible) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode AccessibleJTreeNode(javax.swing.JTree.AccessibleJTree, javax.swing.JTree, javax.swing.tree.TreePath, javax.accessibility.Accessible) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode java.awt.Dimension getSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleComponent getAccessibleComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleContext getAccessibleContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.DropLocation java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.DynamicUtilTreeNode java.util.Enumeration children()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.EmptySelectionModel javax.swing.JTree.EmptySelectionModel sharedInstance()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JTree.TreeSelectionRedirector void valueChanged(javax.swing.event.TreeSelectionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Dimension getViewSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Dimension toViewCoordinates(java.awt.Dimension)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Insets getInsets()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Insets getInsets(java.awt.Insets)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Insets getInsets(java.awt.Insets) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Point getViewPosition()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Point toViewCoordinates(java.awt.Point)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.awt.Rectangle getViewRect()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getViewRect() : Rectangle&quot;"/>
        </annotation>
    </item>
    <item name="javax.swing.JViewport java.lang.String getUIClassID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport javax.swing.JViewport.ViewListener createViewListener()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport void scrollRectToVisible(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport void setExtentSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport.AccessibleJViewport javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JViewport.ViewListener void componentResized(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow javax.swing.JRootPane createRootPane()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow void setContentPane(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow void setGlassPane(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow void setLayeredPane(javax.swing.JLayeredPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.JWindow void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.KeyStroke javax.swing.KeyStroke getKeyStroke(char, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutFocusTraversalPolicy boolean accept(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LayoutStyle.ComponentPlacement javax.swing.LayoutStyle.ComponentPlacement valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ListCellRenderer java.awt.Component getListCellRendererComponent(javax.swing.JList&lt;? extends E&gt;, E, int, boolean, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ListCellRenderer java.awt.Component getListCellRendererComponent(javax.swing.JList&lt;? extends E&gt;, E, int, boolean, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel java.lang.String getDescription()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel java.lang.String getID()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel java.lang.String getName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel javax.swing.ComponentInputMap makeComponentInputMap(javax.swing.JComponent, java.lang.Object[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel javax.swing.InputMap makeInputMap(java.lang.Object[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel javax.swing.text.JTextComponent.KeyBinding[] makeKeyBindings(java.lang.Object[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel javax.swing.text.JTextComponent.KeyBinding[] makeKeyBindings(java.lang.Object[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel void installBorder(javax.swing.JComponent, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel void installColors(javax.swing.JComponent, java.lang.String, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel void installColorsAndFont(javax.swing.JComponent, java.lang.String, java.lang.String, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel void installProperty(javax.swing.JComponent, java.lang.String, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel void installProperty(javax.swing.JComponent, java.lang.String, java.lang.Object) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.LookAndFeel void uninstallBorder(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuElement java.awt.Component getComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuElement javax.swing.MenuElement[] getSubElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuElement void processKeyEvent(java.awt.event.KeyEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuElement void processMouseEvent(java.awt.event.MouseEvent, javax.swing.MenuElement[], javax.swing.MenuSelectionManager) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuSelectionManager java.awt.Component componentForPoint(java.awt.Component, java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuSelectionManager java.awt.Component componentForPoint(java.awt.Component, java.awt.Point) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuSelectionManager javax.swing.MenuElement[] getSelectedPath()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuSelectionManager javax.swing.MenuSelectionManager defaultManager()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuSelectionManager javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MenuSelectionManager void processMouseEvent(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.MultiUIDefaults.MultiUIDefaultsEnumerator.Type javax.swing.MultiUIDefaults.MultiUIDefaultsEnumerator.Type valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.OverlayLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Popup Popup(java.awt.Component, java.awt.Component, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.PopupFactory javax.swing.Popup getPopup(java.awt.Component, java.awt.Component, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.PopupFactory javax.swing.PopupFactory getSharedInstance()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.PopupFactory void setSharedInstance(javax.swing.PopupFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor void propertyChange(java.beans.PropertyChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ProgressMonitor.AccessibleProgressMonitor void stateChanged(javax.swing.event.ChangeEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ProgressMonitorInputStream int read(byte[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ProgressMonitorInputStream int read(byte[], int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RepaintManager java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RepaintManager javax.swing.RepaintManager currentManager(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RepaintManager javax.swing.RepaintManager currentManager(javax.swing.JComponent)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RootPaneContainer void setContentPane(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RootPaneContainer void setGlassPane(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RootPaneContainer void setLayeredPane(javax.swing.JLayeredPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter boolean include(javax.swing.RowFilter.Entry&lt;? extends M,? extends I&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; andFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; dateFilter(javax.swing.RowFilter.ComparisonType, java.util.Date, int...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; dateFilter(javax.swing.RowFilter.ComparisonType, java.util.Date, int...) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; notFilter(javax.swing.RowFilter&lt;M,I&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; numberFilter(javax.swing.RowFilter.ComparisonType, java.lang.Number, int...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; orFilter(java.lang.Iterable&lt;? extends javax.swing.RowFilter&lt;? super M,? super I&gt;&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; regexFilter(java.lang.String, int...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter javax.swing.RowFilter&lt;M,I&gt; regexFilter(java.lang.String, int...) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter.ComparisonType javax.swing.RowFilter.ComparisonType valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowFilter.Entry java.lang.String getStringValue(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.RowSorter.SortKey SortKey(int, javax.swing.SortOrder) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout java.awt.Component getCorner(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout java.awt.Rectangle getViewportBorderBounds(javax.swing.JScrollPane)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout java.awt.Rectangle getViewportBorderBounds(javax.swing.JScrollPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ScrollPaneLayout void syncWithScrollPane(javax.swing.JScrollPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Scrollable int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Scrollable int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Scrollable java.awt.Dimension getPreferredScrollableViewportSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements int[] adjustSizes(int, javax.swing.SizeRequirements[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getAlignedSizeRequirements(javax.swing.SizeRequirements[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getAlignedSizeRequirements(javax.swing.SizeRequirements[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getTiledSizeRequirements(javax.swing.SizeRequirements[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements javax.swing.SizeRequirements getTiledSizeRequirements(javax.swing.SizeRequirements[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateAlignedPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[]) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeRequirements void calculateTiledPositions(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements[], int[], int[], boolean) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeSequence SizeSequence(int[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeSequence int[] getSizes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SizeSequence void setSizes(int[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortOrder javax.swing.SortOrder valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy boolean accept(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getDefaultComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SortingFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerDateModel SpinnerDateModel(java.util.Date, java.lang.Comparable, java.lang.Comparable, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerDateModel java.lang.Object getValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerDateModel java.util.Date getDate()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerDateModel void setValue(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerListModel SpinnerListModel(java.lang.Object[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerListModel SpinnerListModel(java.util.List&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerListModel void setList(java.util.List&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerListModel void setValue(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerModel java.lang.Object getValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerModel void setValue(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerNumberModel SpinnerNumberModel(java.lang.Number, java.lang.Comparable, java.lang.Comparable, java.lang.Number) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerNumberModel SpinnerNumberModel(java.lang.Number, java.lang.Comparable, java.lang.Comparable, java.lang.Number) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerNumberModel void setStepSize(java.lang.Number) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpinnerNumberModel void setValue(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring constant(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring constant(int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring height(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring height(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring max(javax.swing.Spring, javax.swing.Spring)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring minus(javax.swing.Spring)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring scale(javax.swing.Spring, float)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring scale(javax.swing.Spring, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring sum(javax.swing.Spring, javax.swing.Spring)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring width(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Spring javax.swing.Spring width(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout javax.swing.Spring getConstraint(java.lang.String, java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout javax.swing.Spring getConstraint(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout javax.swing.SpringLayout.Constraints getConstraints(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void putConstraint(java.lang.String, java.awt.Component, int, java.lang.String, java.awt.Component) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void putConstraint(java.lang.String, java.awt.Component, javax.swing.Spring, java.lang.String, java.awt.Component) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout.Constraints Constraints(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout.Constraints javax.swing.Spring getConstraint(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SpringLayout.Constraints void setConstraint(java.lang.String, javax.swing.Spring) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities boolean isDescendingFrom(java.awt.Component, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities boolean isLeftMouseButton(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities boolean isMiddleMouseButton(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities boolean isRectangleContainingRectangle(java.awt.Rectangle, java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities boolean isRectangleContainingRectangle(java.awt.Rectangle, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities boolean isRightMouseButton(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities int getAccessibleChildrenCount(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities int getAccessibleIndexInParent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Component findFocusOwner(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Component getDeepestComponentAt(java.awt.Component, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Component getUnwrappedView(javax.swing.JViewport) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Container getUnwrappedParent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle computeIntersection(int, int, int, int, java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle computeIntersection(int, int, int, int, java.awt.Rectangle) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle computeUnion(int, int, int, int, java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle computeUnion(int, int, int, int, java.awt.Rectangle) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle convertRectangle(java.awt.Component, java.awt.Rectangle, java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle convertRectangle(java.awt.Component, java.awt.Rectangle, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle getLocalBounds(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle getLocalBounds(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Rectangle[] computeDifference(java.awt.Rectangle, java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Window getWindowAncestor(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Window windowForComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.event.MouseEvent convertMouseEvent(java.awt.Component, java.awt.event.MouseEvent, java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.event.MouseEvent convertMouseEvent(java.awt.Component, java.awt.event.MouseEvent, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 7">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 8">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 9">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 10">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 8">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int) 9">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities javax.accessibility.Accessible getAccessibleChild(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities javax.accessibility.AccessibleStateSet getAccessibleStateSet(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities javax.swing.ActionMap getUIActionMap(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities javax.swing.InputMap getUIInputMap(javax.swing.JComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void convertPointFromScreen(java.awt.Point, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void convertPointFromScreen(java.awt.Point, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void convertPointToScreen(java.awt.Point, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void convertPointToScreen(java.awt.Point, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, int, int, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void paintComponent(java.awt.Graphics, java.awt.Component, java.awt.Container, java.awt.Rectangle) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void replaceUIActionMap(javax.swing.JComponent, javax.swing.ActionMap) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void replaceUIInputMap(javax.swing.JComponent, int, javax.swing.InputMap) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities void updateComponentTreeUI(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingWorker T get(long, java.util.concurrent.TimeUnit) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingWorker java.beans.PropertyChangeSupport getPropertyChangeSupport()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingWorker.StateValue javax.swing.SwingWorker.StateValue valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Timer T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Timer T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.Timer java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager javax.swing.ToolTipManager sharedInstance()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager void mouseDragged(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager void mouseEntered(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager void mouseExited(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager void mouseMoved(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager void mousePressed(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager void registerComponent(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager void unregisterComponent(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager.insideTimerAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager.outsideTimerAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ToolTipManager.stillInsideTimerAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler boolean canImport(javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler boolean canImport(javax.swing.TransferHandler.TransferSupport) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler boolean importData(javax.swing.JComponent, java.awt.datatransfer.Transferable) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler boolean importData(javax.swing.TransferHandler.TransferSupport) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler int getSourceActions(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler java.awt.Point getDragImageOffset()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler javax.swing.Action getCopyAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler javax.swing.Action getCutAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler javax.swing.Action getPasteAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler.DropLocation DropLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler.DropLocation java.awt.Point getDropPoint()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler.DropLocation java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler.TransferSupport TransferSupport(java.awt.Component, java.awt.datatransfer.Transferable) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.TransferHandler.TransferSupport TransferSupport(java.awt.Component, java.awt.datatransfer.Transferable) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults UIDefaults(java.lang.Object[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults java.lang.Object put(java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults java.lang.Object put(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults void putDefaults(java.lang.Object[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults.ActiveValue java.lang.Object createValue(javax.swing.UIDefaults) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults.LazyInputMap java.lang.Object createValue(javax.swing.UIDefaults) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults.LazyValue java.lang.Object createValue(javax.swing.UIDefaults) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIDefaults.ProxyLazyValue java.lang.Object createValue(javax.swing.UIDefaults) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIManager java.lang.String getCrossPlatformLookAndFeelClassName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIManager java.lang.String getSystemLookAndFeelClassName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIManager javax.swing.UIManager.LookAndFeelInfo[] getInstalledLookAndFeels()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIManager void addAuxiliaryLookAndFeel(javax.swing.LookAndFeel) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIManager void setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.UIManager.LookAndFeelInfo java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ViewportLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ViewportLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ViewportLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ViewportLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ViewportLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ViewportLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.ViewportLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.SwingUtilities java.awt.Point convertPoint(java.awt.Component, java.awt.Point, java.awt.Component)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun convertPoint(source : Component?, aPoint : Point, destination : Component?) : Point&quot;" />
        </annotation>
    </item>
</root>

