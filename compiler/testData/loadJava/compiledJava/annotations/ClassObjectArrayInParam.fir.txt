public open class ClassObjectArrayInParam : R|kotlin/Any| {
    public constructor(): R|test/ClassObjectArrayInParam|

    public final annotation class Anno : R|kotlin/Annotation| {
        public constructor(vararg value: R|kotlin/Array<kotlin/reflect/KClass<*>>|): R|test/ClassObjectArrayInParam.Anno|

    }
    @R|test/ClassObjectArrayInParam.Anno|(<implicitArrayOf>(<getClass>(<getClass>(R|ft<test/ClassObjectArrayInParam, test/ClassObjectArrayInParam?>|)), <getClass>(<getClass>(R|ft<test/ClassObjectArrayInParam.Nested, test/ClassObjectArrayInParam.Nested?>|)), <getClass>(<getClass>(R|ft<kotlin/String, kotlin/String?>|)), <getClass>(<getClass>(R|ft<kotlin/collections/MutableList<kotlin/Any?>, kotlin/collections/List<*>?>|)), <getClass>(<getClass>(R|ft<kotlin/Array<ft<kotlin/Array<ft<kotlin/String, kotlin/String?>>, kotlin/Array<out ft<kotlin/String, kotlin/String?>>?>>, kotlin/Array<out ft<kotlin/Array<ft<kotlin/String, kotlin/String?>>, kotlin/Array<out ft<kotlin/String, kotlin/String?>>?>>?>|)), <getClass>(<getClass>(R|ft<kotlin/Array<ft<kotlin/IntArray, kotlin/IntArray?>>, kotlin/Array<out ft<kotlin/IntArray, kotlin/IntArray?>>?>|)), <getClass>(<getClass>(R|kotlin/Unit|)))) public open class Nested : R|kotlin/Any| {
        public constructor(): R|test/ClassObjectArrayInParam.Nested|

    }
}
