FILE: enums.kt
    public? final? enum class Order : kotlin/Enum {
        private constructor(): R|Order| {
            super<kotlin/Enum>()
        }

        public? final enum entry FIRST : kotlin/Any {
            public? constructor(): R|Order.FIRST| {
                super<kotlin/Any>()
            }

        }

        public? final enum entry SECOND : kotlin/Any {
            public? constructor(): R|Order.SECOND| {
                super<kotlin/Any>()
            }

        }

        public? final enum entry THIRD : kotlin/Any {
            public? constructor(): R|Order.THIRD| {
                super<kotlin/Any>()
            }

        }

    }
    public? final? enum class Planet : kotlin/Enum {
        public? constructor(m: Double, r: Double): R|Planet| {
            super<kotlin/Enum>()
        }

        public? final? val m: Double = R|<local>/m|
            public? get(): Double

        internal final? val r: Double = R|<local>/r|
            internal get(): Double

        public? final enum entry MERCURY : Planet {
            public? constructor(): R|Planet.MERCURY| {
                super<Planet>(Double(1.0), Double(2.0))
            }

            public? open? override fun sayHello(): kotlin/Unit {
                println#(String(Hello!!!))
            }

        }

        public? final enum entry VENERA : Planet {
            public? constructor(): R|Planet.VENERA| {
                super<Planet>(Double(3.0), Double(4.0))
            }

            public? open? override fun sayHello(): kotlin/Unit {
                println#(String(Ola!!!))
            }

        }

        public? final enum entry EARTH : Planet {
            public? constructor(): R|Planet.EARTH| {
                super<Planet>(Double(5.0), Double(6.0))
            }

            public? open? override fun sayHello(): kotlin/Unit {
                println#(String(Privet!!!))
            }

        }

        public? final? val g: Double = G#.times#(m#).div#(r#.times#(r#))
            public? get(): Double

        public? abstract fun sayHello(): kotlin/Unit

        public? final? companion object Companion : kotlin/Any {
            private constructor(): R|Planet.Companion| {
                super<kotlin/Any>()
            }

            public? final? const val G: <implicit> = Double(6.67E-11)
                public? get(): <implicit>

        }

    }
