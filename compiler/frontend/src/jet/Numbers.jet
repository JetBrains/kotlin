package jet

public abstract class Number : Hashable {
  public abstract fun toDouble() : Double
  public abstract fun toFloat() : Float
  public abstract fun toLong() : Long
  public abstract fun toInt() : Int
  public abstract fun toChar() : Char
  public abstract fun toShort() : Short
  public abstract fun toByte() : Byte
//  fun equals(other : Double) : Boolean
//  fun equals(other : Float) : Boolean
//  fun equals(other : Long) : Boolean
//  fun equals(other : Byte) : Boolean
//  fun equals(other : Int) : Boolean
//  fun equals(other : Short) : Boolean
//  fun equals(other : Char) : Boolean
}

public class Double : Number, Comparable<Double>  {
  public override fun compareTo(other : Double)  : Int
  public fun compareTo(other : Float)  : Int
  public fun compareTo(other : Long)   : Int
  public fun compareTo(other : Int)    : Int
  public fun compareTo(other : Short)  : Int
  public fun compareTo(other : Byte)   : Int
  public fun compareTo(other : Char)   : Int

  public fun plus(other : Double) : Double
  public fun plus(other : Float)  : Double
  public fun plus(other : Long)   : Double
  public fun plus(other : Int)    : Double
  public fun plus(other : Short)  : Double
  public fun plus(other : Byte)   : Double
  public fun plus(other : Char)   : Double

  public fun minus(other : Double) : Double
  public fun minus(other : Float)  : Double
  public fun minus(other : Long)   : Double
  public fun minus(other : Int)    : Double
  public fun minus(other : Short)  : Double
  public fun minus(other : Byte)   : Double
  public fun minus(other : Char)   : Double

  public fun times(other : Double) : Double
  public fun times(other : Float)  : Double
  public fun times(other : Long)   : Double
  public fun times(other : Int)    : Double
  public fun times(other : Short)  : Double
  public fun times(other : Byte)   : Double
  public fun times(other : Char)   : Double

  public fun div(other : Double) : Double
  public fun div(other : Float)  : Double
  public fun div(other : Long)   : Double
  public fun div(other : Int)    : Double
  public fun div(other : Short)  : Double
  public fun div(other : Byte)   : Double
  public fun div(other : Char)   : Double

  public fun mod(other : Double) : Double
  public fun mod(other : Float)  : Double
  public fun mod(other : Long)   : Double
  public fun mod(other : Int)    : Double
  public fun mod(other : Short)  : Double
  public fun mod(other : Byte)   : Double

  public fun rangeTo(other : Double) : DoubleRange
  public fun rangeTo(other : Float)  : DoubleRange
  public fun rangeTo(other : Long)   : DoubleRange
  public fun rangeTo(other : Int)    : DoubleRange
  public fun rangeTo(other : Short)  : DoubleRange
  public fun rangeTo(other : Byte)   : DoubleRange
  public fun rangeTo(other : Char)   : DoubleRange

  public fun upto(other : Double) : DoubleRange
  public fun upto(other : Float)  : DoubleRange
  public fun upto(other : Long)   : DoubleRange
  public fun upto(other : Int)    : DoubleRange
  public fun upto(other : Short)  : DoubleRange
  public fun upto(other : Byte)   : DoubleRange
  public fun upto(other : Char)   : DoubleRange

  public fun downto(other : Double) : DoubleRange
  public fun downto(other : Float)  : DoubleRange
  public fun downto(other : Long)   : DoubleRange
  public fun downto(other : Int)    : DoubleRange
  public fun downto(other : Short)  : DoubleRange
  public fun downto(other : Byte)   : DoubleRange
  public fun downto(other : Char)   : DoubleRange

  public fun inc() : Double
  public fun dec() : Double
  public fun plus() : Double
  public fun minus() : Double

  public override fun toDouble() : Double
  public override fun toFloat() : Float
  public override fun toLong() : Long
  public override fun toInt() : Int
  public override fun toChar() : Char
  public override fun toShort() : Short
  public override fun toByte() : Byte

  public override fun hashCode() : Int
  public override fun equals(val other : Any?) : Boolean
}

public class Float : Number, Comparable<Float>  {
  public fun compareTo(other : Double) : Int
  public override fun compareTo(other : Float) : Int
  public fun compareTo(other : Long)   : Int
  public fun compareTo(other : Int)    : Int
  public fun compareTo(other : Short)  : Int
  public fun compareTo(other : Byte)   : Int
  public fun compareTo(other : Char)   : Int

  public fun plus(other : Double) : Double
  public fun plus(other : Float)  : Float
  public fun plus(other : Long)   : Float
  public fun plus(other : Int)    : Float
  public fun plus(other : Short)  : Float
  public fun plus(other : Byte)   : Float
  public fun plus(other : Char)   : Float

  public fun minus(other : Double) : Double
  public fun minus(other : Float)  : Float
  public fun minus(other : Long)   : Float
  public fun minus(other : Int)    : Float
  public fun minus(other : Short)  : Float
  public fun minus(other : Byte)   : Float
  public fun minus(other : Char)   : Float

  public fun times(other : Double) : Double
  public fun times(other : Float)  : Float
  public fun times(other : Long)   : Float
  public fun times(other : Int)    : Float
  public fun times(other : Short)  : Float
  public fun times(other : Byte)   : Float
  public fun times(other : Char)   : Float

  public fun div(other : Double) : Double
  public fun div(other : Float)  : Float
  public fun div(other : Long)   : Float
  public fun div(other : Int)    : Float
  public fun div(other : Short)  : Float
  public fun div(other : Byte)   : Float
  public fun div(other : Char)   : Float

  public fun mod(other : Double) : Double
  public fun mod(other : Float)  : Float
  public fun mod(other : Long)   : Float
  public fun mod(other : Int)    : Float
  public fun mod(other : Short)  : Float
  public fun mod(other : Byte)   : Float
  public fun mod(other : Char)   : Float

  public fun rangeTo(other : Double) : DoubleRange
  public fun rangeTo(other : Float)  : FloatRange
  public fun rangeTo(other : Long)   : DoubleRange
  public fun rangeTo(other : Int)    : FloatRange
  public fun rangeTo(other : Short)  : FloatRange
  public fun rangeTo(other : Byte)   : FloatRange
  public fun rangeTo(other : Char)   : FloatRange

  public fun upto(other : Double) : DoubleRange
  public fun upto(other : Float)  : FloatRange
  public fun upto(other : Long)   : DoubleRange
  public fun upto(other : Int)    : FloatRange
  public fun upto(other : Short)  : FloatRange
  public fun upto(other : Byte)   : FloatRange
  public fun upto(other : Char)   : FloatRange

  public fun downto(other : Double) : DoubleRange
  public fun downto(other : Float)  : FloatRange
  public fun downto(other : Long)   : DoubleRange
  public fun downto(other : Int)    : FloatRange
  public fun downto(other : Short)  : FloatRange
  public fun downto(other : Byte)   : FloatRange
  public fun downto(other : Char)   : FloatRange

  public fun inc() : Float
  public fun dec() : Float
  public fun plus() : Float
  public fun minus() : Float

  public override fun toDouble() : Double
  public override fun toFloat() : Float
  public override fun toLong() : Long
  public override fun toInt() : Int
  public override fun toChar() : Char
  public override fun toShort() : Short
  public override fun toByte() : Byte

  public override fun hashCode() : Int
  public override fun equals(val other : Any?) : Boolean
}

public class Long : Number, Comparable<Long> {
  public fun compareTo(other : Double) : Int
  public fun compareTo(other : Float)  : Int
  public override fun compareTo(other : Long)   : Int
  public fun compareTo(other : Int)    : Int
  public fun compareTo(other : Short)  : Int
  public fun compareTo(other : Byte)   : Int
  public fun compareTo(other : Char)   : Int

  public fun plus(other : Double) : Double
  public fun plus(other : Float)  : Float
  public fun plus(other : Long)   : Long
  public fun plus(other : Int)    : Long
  public fun plus(other : Short)  : Long
  public fun plus(other : Byte)   : Long
  public fun plus(other : Char)   : Long

  public fun minus(other : Double) : Double
  public fun minus(other : Float)  : Float
  public fun minus(other : Long)   : Long
  public fun minus(other : Int)    : Long
  public fun minus(other : Short)  : Long
  public fun minus(other : Byte)   : Long
  public fun minus(other : Char)   : Long

  public fun times(other : Double) : Double
  public fun times(other : Float)  : Float
  public fun times(other : Long)   : Long
  public fun times(other : Int)    : Long
  public fun times(other : Short)  : Long
  public fun times(other : Byte)   : Long
  public fun times(other : Char)   : Long

  public fun div(other : Double) : Double
  public fun div(other : Float)  : Float
  public fun div(other : Long)   : Long
  public fun div(other : Int)    : Long
  public fun div(other : Short)  : Long
  public fun div(other : Byte)   : Long
  public fun div(other : Char)   : Long

  public fun mod(other : Double) : Double
  public fun mod(other : Float)  : Float
  public fun mod(other : Long)   : Long
  public fun mod(other : Int)    : Long
  public fun mod(other : Short)  : Long
  public fun mod(other : Byte)   : Long
  public fun mod(other : Char)   : Long

  public fun rangeTo(other : Double) : DoubleRange
  public fun rangeTo(other : Float)  : FloatRange
  public fun rangeTo(other : Long)   : LongRange
  public fun rangeTo(other : Int)    : LongRange
  public fun rangeTo(other : Short)  : LongRange
  public fun rangeTo(other : Byte)   : LongRange
  public fun rangeTo(other : Char)   : LongRange

  public fun upto(other : Double) : DoubleRange
  public fun upto(other : Float)  : FloatRange
  public fun upto(other : Long)   : LongRange
  public fun upto(other : Int)    : LongRange
  public fun upto(other : Short)  : LongRange
  public fun upto(other : Byte)   : LongRange
  public fun upto(other : Char)   : LongRange

  public fun downto(other : Double) : DoubleRange
  public fun downto(other : Float)  : FloatRange
  public fun downto(other : Long)   : LongRange
  public fun downto(other : Int)    : LongRange
  public fun downto(other : Short)  : LongRange
  public fun downto(other : Byte)   : LongRange
  public fun downto(other : Char)   : LongRange

  public fun inc() : Long
  public fun dec() : Long
  public fun plus() : Long
  public fun minus() : Long

  public fun shl(bits : Int) : Long
  public fun shr(bits : Int) : Long
  public fun ushr(bits : Int) : Long
  public fun and(other : Long) : Long
  public fun or(other : Long) : Long
  public fun xor(other : Long) : Long
  public fun inv() : Long

  public override fun toDouble() : Double
  public override fun toFloat() : Float
  public override fun toLong() : Long
  public override fun toInt() : Int
  public override fun toChar() : Char
  public override fun toShort() : Short
  public override fun toByte() : Byte

  public override fun hashCode() : Int
  public override fun equals(val other : Any?) : Boolean
}

public class Int : Number, Comparable<Int> {
  public fun compareTo(other : Double) : Int
  public fun compareTo(other : Float)  : Int
  public fun compareTo(other : Long)   : Int
  public override fun compareTo(other : Int)    : Int
  public fun compareTo(other : Short)  : Int
  public fun compareTo(other : Byte)   : Int
  public fun compareTo(other : Char)   : Int

  public fun plus(other : Double) : Double
  public fun plus(other : Float)  : Float
  public fun plus(other : Long)   : Long
  public fun plus(other : Int)    : Int
  public fun plus(other : Short)  : Int
  public fun plus(other : Byte)   : Int
  public fun plus(other : Char)   : Int

  public fun minus(other : Double) : Double
  public fun minus(other : Float)  : Float
  public fun minus(other : Long)   : Long
  public fun minus(other : Int)    : Int
  public fun minus(other : Short)  : Int
  public fun minus(other : Byte)   : Int
  public fun minus(other : Char)   : Int

  public fun times(other : Double) : Double
  public fun times(other : Float)  : Float
  public fun times(other : Long)   : Long
  public fun times(other : Int)    : Int
  public fun times(other : Short)  : Int
  public fun times(other : Byte)   : Int
  public fun times(other : Char)   : Int

  public fun div(other : Double) : Double
  public fun div(other : Float)  : Float
  public fun div(other : Long)   : Long
  public fun div(other : Int)    : Int
  public fun div(other : Short)  : Int
  public fun div(other : Byte)   : Int
  public fun div(other : Char)   : Int

  public fun mod(other : Double) : Double
  public fun mod(other : Float)  : Float
  public fun mod(other : Long)   : Long
  public fun mod(other : Int)    : Int
  public fun mod(other : Short)  : Int
  public fun mod(other : Byte)   : Int
  public fun mod(other : Char)   : Int

  public fun rangeTo(other : Double) : DoubleRange
  public fun rangeTo(other : Float)  : FloatRange
  public fun rangeTo(other : Long)   : LongRange
  public fun rangeTo(other : Int)    : IntRange
  public fun rangeTo(other : Short)  : IntRange
  public fun rangeTo(other : Byte)   : IntRange
  public fun rangeTo(other : Char)   : IntRange

  public fun upto(other : Double) : DoubleRange
  public fun upto(other : Float)  : FloatRange
  public fun upto(other : Long)   : LongRange
  public fun upto(other : Int)    : IntRange
  public fun upto(other : Short)  : IntRange
  public fun upto(other : Byte)   : IntRange
  public fun upto(other : Char)   : IntRange

  public fun downto(other : Double) : DoubleRange
  public fun downto(other : Float)  : FloatRange
  public fun downto(other : Long)   : LongRange
  public fun downto(other : Int)    : IntRange
  public fun downto(other : Short)  : IntRange
  public fun downto(other : Byte)   : IntRange
  public fun downto(other : Char)   : IntRange

  public fun inc() : Int
  public fun dec() : Int
  public fun plus() : Int
  public fun minus() : Int

  public fun shl(bits : Int) : Int
  public fun shr(bits : Int) : Int
  public fun ushr(bits : Int) : Int
  public fun and(other : Int) : Int
  public fun or(other : Int) : Int
  public fun xor(other : Int) : Int
  public fun inv() : Int

  public override fun toDouble() : Double
  public override fun toFloat() : Float
  public override fun toLong() : Long
  public override fun toInt() : Int
  public override fun toChar() : Char
  public override fun toShort() : Short
  public override fun toByte() : Byte

  public override fun hashCode() : Int
  public override fun equals(val other : Any?) : Boolean
}

public class Char : Number, Comparable<Char> {
  public fun compareTo(other : Double) : Int
  public fun compareTo(other : Float)  : Int
  public fun compareTo(other : Long)    : Int
  public fun compareTo(other : Int)    : Int
  public fun compareTo(other : Short)  : Int
  public override fun compareTo(other : Char)  : Int
  public fun compareTo(other : Byte)   : Int

  public fun plus(other : Double) : Double
  public fun plus(other : Float)  : Float
  public fun plus(other : Long)   : Long
  public fun plus(other : Int)    : Int
  public fun plus(other : Short)  : Int
  public fun plus(other : Byte)   : Int
//  public fun plus(other : Char)   : Int

  public fun minus(other : Double) : Double
  public fun minus(other : Float)  : Float
  public fun minus(other : Long)   : Long
  public fun minus(other : Int)    : Int
  public fun minus(other : Short)  : Int
  public fun minus(other : Byte)   : Int
  public fun minus(other : Char)   : Int

  public fun times(other : Double) : Double
  public fun times(other : Float)  : Float
  public fun times(other : Long)   : Long
  public fun times(other : Int)    : Int
  public fun times(other : Short)  : Int
  public fun times(other : Byte)   : Int
//  public fun times(other : Char)   : Int

  public fun div(other : Double) : Double
  public fun div(other : Float)  : Float
  public fun div(other : Long)   : Long
  public fun div(other : Int)    : Int
  public fun div(other : Short)  : Int
  public fun div(other : Byte)   : Int
//  public fun div(other : Char)   : Int

  public fun mod(other : Double) : Double
  public fun mod(other : Float)  : Float
  public fun mod(other : Long)   : Long
  public fun mod(other : Int)    : Int
  public fun mod(other : Short)  : Int
  public fun mod(other : Byte)   : Int
//  public fun mod(other : Char)   : Int

  public fun rangeTo(other : Double) : DoubleRange
  public fun rangeTo(other : Float)  : FloatRange
  public fun rangeTo(other : Long)   : LongRange
  public fun rangeTo(other : Int)    : IntRange
  public fun rangeTo(other : Short)  : ShortRange
  public fun rangeTo(other : Byte)   : CharRange
  public fun rangeTo(other : Char)   : CharRange

  public fun upto(other : Double) : DoubleRange
  public fun upto(other : Float)  : FloatRange
  public fun upto(other : Long)   : LongRange
  public fun upto(other : Int)    : IntRange
  public fun upto(other : Short)  : ShortRange
  public fun upto(other : Byte)   : CharRange
  public fun upto(other : Char)   : CharRange

  public fun downto(other : Double) : DoubleRange
  public fun downto(other : Float)  : FloatRange
  public fun downto(other : Long)   : LongRange
  public fun downto(other : Int)    : IntRange
  public fun downto(other : Short)  : ShortRange
  public fun downto(other : Byte)   : CharRange
  public fun downto(other : Char)   : CharRange

  public fun inc() : Char
  public fun dec() : Char
  public fun plus() : Int
  public fun minus() : Int

  public override fun toDouble() : Double
  public override fun toFloat() : Float
  public override fun toLong() : Long
  public override fun toInt() : Int
  public override fun toChar() : Char
  public override fun toShort() : Short
  public override fun toByte() : Byte

  public override fun hashCode() : Int
  public override fun equals(val other : Any?) : Boolean
}

public class Short : Number, Comparable<Short> {
  public fun compareTo(other : Double) : Int
  public fun compareTo(other : Float)  : Int
  public fun compareTo(other : Long)    : Int
  public fun compareTo(other : Int)    : Int
  public override fun compareTo(other : Short)    : Int
  public fun compareTo(other : Byte)   : Int
  public fun compareTo(other : Char)   : Int

  public fun plus(other : Double) : Double
  public fun plus(other : Float)  : Float
  public fun plus(other : Long)   : Long
  public fun plus(other : Int)    : Int
  public fun plus(other : Short)  : Int
  public fun plus(other : Byte)   : Int
  public fun plus(other : Char)   : Int

  public fun minus(other : Double) : Double
  public fun minus(other : Float)  : Float
  public fun minus(other : Long)   : Long
  public fun minus(other : Int)    : Int
  public fun minus(other : Short)  : Int
  public fun minus(other : Byte)   : Int
  public fun minus(other : Char)   : Int

  public fun times(other : Double) : Double
  public fun times(other : Float)  : Float
  public fun times(other : Long)   : Long
  public fun times(other : Int)    : Int
  public fun times(other : Short)  : Int
  public fun times(other : Byte)   : Int
  public fun times(other : Char)   : Int

  public fun div(other : Double) : Double
  public fun div(other : Float)  : Float
  public fun div(other : Long)   : Long
  public fun div(other : Int)    : Int
  public fun div(other : Short)  : Int
  public fun div(other : Byte)   : Int
  public fun div(other : Char)   : Int

  public fun mod(other : Double) : Double
  public fun mod(other : Float)  : Float
  public fun mod(other : Long)   : Long
  public fun mod(other : Int)    : Int
  public fun mod(other : Short)  : Int
  public fun mod(other : Byte)   : Int
  public fun mod(other : Char)   : Int

  public fun rangeTo(other : Double) : DoubleRange
  public fun rangeTo(other : Float)  : FloatRange
  public fun rangeTo(other : Long)   : LongRange
  public fun rangeTo(other : Int)    : IntRange
  public fun rangeTo(other : Short)  : ShortRange
  public fun rangeTo(other : Byte)   : ShortRange
  public fun rangeTo(other : Char)   : ShortRange

  public fun upto(other : Double) : DoubleRange
  public fun upto(other : Float)  : FloatRange
  public fun upto(other : Long)   : LongRange
  public fun upto(other : Int)    : IntRange
  public fun upto(other : Short)  : ShortRange
  public fun upto(other : Byte)   : ShortRange
  public fun upto(other : Char)   : ShortRange

  public fun downto(other : Double) : DoubleRange
  public fun downto(other : Float)  : FloatRange
  public fun downto(other : Long)   : LongRange
  public fun downto(other : Int)    : IntRange
  public fun downto(other : Short)  : ShortRange
  public fun downto(other : Byte)   : ShortRange
  public fun downto(other : Char)   : ShortRange

  public fun inc() : Short
  public fun dec() : Short
  public fun plus() : Short
  public fun minus() : Short

  public override fun toDouble() : Double
  public override fun toFloat() : Float
  public override fun toLong() : Long
  public override fun toInt() : Int
  public override fun toChar() : Char
  public override fun toShort() : Short
  public override fun toByte() : Byte

  public override fun hashCode() : Int
  public override fun equals(val other : Any?) : Boolean
}

public class Byte : Number, Comparable<Byte> {
  public fun compareTo(other : Double) : Int
  public fun compareTo(other : Float)  : Int
  public fun compareTo(other : Long)    : Int
  public fun compareTo(other : Int)    : Int
  public fun compareTo(other : Short)  : Int
  public fun compareTo(other : Char)   : Int
  public override fun compareTo(other : Byte)   : Int

  public fun plus(other : Double) : Double
  public fun plus(other : Float)  : Float
  public fun plus(other : Long)   : Long
  public fun plus(other : Int)    : Int
  public fun plus(other : Short)  : Int
  public fun plus(other : Byte)   : Int
  public fun plus(other : Char)   : Int

  public fun minus(other : Double) : Double
  public fun minus(other : Float)  : Float
  public fun minus(other : Long)   : Long
  public fun minus(other : Int)    : Int
  public fun minus(other : Short)  : Int
  public fun minus(other : Byte)   : Int
  public fun minus(other : Char)   : Int

  public fun times(other : Double) : Double
  public fun times(other : Float)  : Float
  public fun times(other : Long)   : Long
  public fun times(other : Int)    : Int
  public fun times(other : Short)  : Int
  public fun times(other : Byte)   : Int
  public fun times(other : Char)   : Int

  public fun div(other : Double) : Double
  public fun div(other : Float)  : Float
  public fun div(other : Long)   : Long
  public fun div(other : Int)    : Int
  public fun div(other : Short)  : Int
  public fun div(other : Byte)   : Int
  public fun div(other : Char)   : Int

  public fun mod(other : Double) : Double
  public fun mod(other : Float)  : Float
  public fun mod(other : Long)   : Long
  public fun mod(other : Int)    : Int
  public fun mod(other : Short)  : Int
  public fun mod(other : Byte)   : Int
  public fun mod(other : Char)   : Int

  public fun rangeTo(other : Double) : DoubleRange
  public fun rangeTo(other : Float)  : FloatRange
  public fun rangeTo(other : Long)   : LongRange
  public fun rangeTo(other : Int)    : IntRange
  public fun rangeTo(other : Short)  : ShortRange
  public fun rangeTo(other : Byte)   : ByteRange
  public fun rangeTo(other : Char)   : CharRange

  public fun upto(other : Double) : DoubleRange
  public fun upto(other : Float)  : FloatRange
  public fun upto(other : Long)   : LongRange
  public fun upto(other : Int)    : IntRange
  public fun upto(other : Short)  : ShortRange
  public fun upto(other : Byte)   : ByteRange
  public fun upto(other : Char)   : CharRange

  public fun downto(other : Double) : DoubleRange
  public fun downto(other : Float)  : FloatRange
  public fun downto(other : Long)   : LongRange
  public fun downto(other : Int)    : IntRange
  public fun downto(other : Short)  : ShortRange
  public fun downto(other : Byte)   : ByteRange
  public fun downto(other : Char)   : CharRange

  public fun inc() : Byte
  public fun dec() : Byte
  public fun plus() : Byte
  public fun minus() : Byte

  public override fun toDouble() : Double
  public override fun toFloat() : Float
  public override fun toLong() : Long
  public override fun toInt() : Int
  public override fun toChar() : Char
  public override fun toShort() : Short
  public override fun toByte() : Byte

  public override fun hashCode() : Int
  public override fun equals(val other : Any?) : Boolean
}
