// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: core/metadata.jvm/src/jvm_metadata.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.metadata.jvm;

public final class JvmProtoBuf {
  private JvmProtoBuf() {}
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      JvmProtoBuf.class.getName());
  }
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.constructorSignature);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.methodSignature);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.lambdaClassOriginName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.propertySignature);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.flags);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.typeAnnotation);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.isRaw);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.typeParameterAnnotation);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.classModuleName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.classLocalVariable);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.anonymousObjectOriginName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.jvmClassFlags);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.packageModuleName);
    registry.add(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.packageLocalVariable);
  }

  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (org.jetbrains.kotlin.protobuf.ExtensionRegistryLite) registry);
  }
  public interface StringTableTypesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> 
        getRecordList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getRecord(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    int getRecordCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder> 
        getRecordOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder getRecordOrBuilder(
        int index);

    /**
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     *
     * <code>repeated int32 local_name = 5;</code>
     * @return A list containing the localName.
     */
    java.util.List<java.lang.Integer> getLocalNameList();
    /**
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     *
     * <code>repeated int32 local_name = 5;</code>
     * @return The count of localName.
     */
    int getLocalNameCount();
    /**
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     *
     * <code>repeated int32 local_name = 5;</code>
     * @param index The index of the element to return.
     * @return The localName at the given index.
     */
    int getLocalName(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes}
   */
  public static final class StringTableTypes extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
      StringTableTypesOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        StringTableTypes.class.getName());
    }
    // Use StringTableTypes.newBuilder() to construct.
    private StringTableTypes(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private StringTableTypes() {
      record_ = java.util.Collections.emptyList();
      localName_ = emptyIntList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Builder.class);
    }

    public interface RecordOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       *
       * <code>int32 range = 1 [default = 1];</code>
       * @return Whether the range field is set.
       */
      boolean hasRange();
      /**
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       *
       * <code>int32 range = 1 [default = 1];</code>
       * @return The range.
       */
      int getRange();

      /**
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       *
       * <code>int32 predefined_index = 2;</code>
       * @return Whether the predefinedIndex field is set.
       */
      boolean hasPredefinedIndex();
      /**
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       *
       * <code>int32 predefined_index = 2;</code>
       * @return The predefinedIndex.
       */
      int getPredefinedIndex();

      /**
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       *
       * <code>string string = 6;</code>
       * @return Whether the string field is set.
       */
      boolean hasString();
      /**
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       *
       * <code>string string = 6;</code>
       * @return The string.
       */
      java.lang.String getString();
      /**
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       *
       * <code>string string = 6;</code>
       * @return The bytes for string.
       */
      org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes();

      /**
       * <pre>
       * Perform a described operation on the string
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       * @return Whether the operation field is set.
       */
      boolean hasOperation();
      /**
       * <pre>
       * Perform a described operation on the string
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       * @return The operation.
       */
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation getOperation();

      /**
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       *
       * <code>repeated int32 substring_index = 4;</code>
       * @return A list containing the substringIndex.
       */
      java.util.List<java.lang.Integer> getSubstringIndexList();
      /**
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       *
       * <code>repeated int32 substring_index = 4;</code>
       * @return The count of substringIndex.
       */
      int getSubstringIndexCount();
      /**
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       *
       * <code>repeated int32 substring_index = 4;</code>
       * @param index The index of the element to return.
       * @return The substringIndex at the given index.
       */
      int getSubstringIndex(int index);

      /**
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       *
       * <code>repeated int32 replace_char = 5;</code>
       * @return A list containing the replaceChar.
       */
      java.util.List<java.lang.Integer> getReplaceCharList();
      /**
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       *
       * <code>repeated int32 replace_char = 5;</code>
       * @return The count of replaceChar.
       */
      int getReplaceCharCount();
      /**
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       *
       * <code>repeated int32 replace_char = 5;</code>
       * @param index The index of the element to return.
       * @return The replaceChar at the given index.
       */
      int getReplaceChar(int index);
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record}
     */
    public static final class Record extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
        RecordOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Record.class.getName());
      }
      // Use Record.newBuilder() to construct.
      private Record(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Record() {
        range_ = 1;
        string_ = "";
        operation_ = 0;
        substringIndex_ = emptyIntList();
        replaceChar_ = emptyIntList();
      }

      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder.class);
      }

      /**
       * Protobuf enum {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation}
       */
      public enum Operation
          implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
        /**
         * <code>NONE = 0;</code>
         */
        NONE(0),
        /**
         * <pre>
         * replaceAll('$', '.')
         * java/util/Map$Entry -&gt; java/util/Map.Entry;
         * </pre>
         *
         * <code>INTERNAL_TO_CLASS_ID = 1;</code>
         */
        INTERNAL_TO_CLASS_ID(1),
        /**
         * <pre>
         * substring(1, length - 1) and then replaceAll('$', '.')
         * Ljava/util/Map$Entry; -&gt; java/util/Map.Entry
         * </pre>
         *
         * <code>DESC_TO_CLASS_ID = 2;</code>
         */
        DESC_TO_CLASS_ID(2),
        ;

        static {
          org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 29,
            /* patch= */ 3,
            /* suffix= */ "",
            Operation.class.getName());
        }
        /**
         * <code>NONE = 0;</code>
         */
        public static final int NONE_VALUE = 0;
        /**
         * <pre>
         * replaceAll('$', '.')
         * java/util/Map$Entry -&gt; java/util/Map.Entry;
         * </pre>
         *
         * <code>INTERNAL_TO_CLASS_ID = 1;</code>
         */
        public static final int INTERNAL_TO_CLASS_ID_VALUE = 1;
        /**
         * <pre>
         * substring(1, length - 1) and then replaceAll('$', '.')
         * Ljava/util/Map$Entry; -&gt; java/util/Map.Entry
         * </pre>
         *
         * <code>DESC_TO_CLASS_ID = 2;</code>
         */
        public static final int DESC_TO_CLASS_ID_VALUE = 2;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Operation valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static Operation forNumber(int value) {
          switch (value) {
            case 0: return NONE;
            case 1: return INTERNAL_TO_CLASS_ID;
            case 2: return DESC_TO_CLASS_ID;
            default: return null;
          }
        }

        public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Operation>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
            Operation> internalValueMap =
              new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Operation>() {
                public Operation findValueByNumber(int number) {
                  return Operation.forNumber(number);
                }
              };

        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.getDescriptor().getEnumTypes().get(0);
        }

        private static final Operation[] VALUES = values();

        public static Operation valueOf(
            org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Operation(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation)
      }

      private int bitField0_;
      public static final int RANGE_FIELD_NUMBER = 1;
      private int range_ = 1;
      /**
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       *
       * <code>int32 range = 1 [default = 1];</code>
       * @return Whether the range field is set.
       */
      @java.lang.Override
      public boolean hasRange() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
       * </pre>
       *
       * <code>int32 range = 1 [default = 1];</code>
       * @return The range.
       */
      @java.lang.Override
      public int getRange() {
        return range_;
      }

      public static final int PREDEFINED_INDEX_FIELD_NUMBER = 2;
      private int predefinedIndex_ = 0;
      /**
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       *
       * <code>int32 predefined_index = 2;</code>
       * @return Whether the predefinedIndex field is set.
       */
      @java.lang.Override
      public boolean hasPredefinedIndex() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Index of the predefined constant. If this field is present, the associated string is ignored
       * </pre>
       *
       * <code>int32 predefined_index = 2;</code>
       * @return The predefinedIndex.
       */
      @java.lang.Override
      public int getPredefinedIndex() {
        return predefinedIndex_;
      }

      public static final int STRING_FIELD_NUMBER = 6;
      @SuppressWarnings("serial")
      private volatile java.lang.Object string_ = "";
      /**
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       *
       * <code>string string = 6;</code>
       * @return Whether the string field is set.
       */
      @java.lang.Override
      public boolean hasString() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       *
       * <code>string string = 6;</code>
       * @return The string.
       */
      @java.lang.Override
      public java.lang.String getString() {
        java.lang.Object ref = string_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          org.jetbrains.kotlin.protobuf.ByteString bs = 
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            string_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
       * </pre>
       *
       * <code>string string = 6;</code>
       * @return The bytes for string.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getStringBytes() {
        java.lang.Object ref = string_;
        if (ref instanceof java.lang.String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          string_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }

      public static final int OPERATION_FIELD_NUMBER = 3;
      private int operation_ = 0;
      /**
       * <pre>
       * Perform a described operation on the string
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       * @return Whether the operation field is set.
       */
      @java.lang.Override public boolean hasOperation() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Perform a described operation on the string
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
       * @return The operation.
       */
      @java.lang.Override public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation getOperation() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation result = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.forNumber(operation_);
        return result == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.NONE : result;
      }

      public static final int SUBSTRING_INDEX_FIELD_NUMBER = 4;
      @SuppressWarnings("serial")
      private org.jetbrains.kotlin.protobuf.Internal.IntList substringIndex_ =
          emptyIntList();
      /**
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       *
       * <code>repeated int32 substring_index = 4;</code>
       * @return A list containing the substringIndex.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getSubstringIndexList() {
        return substringIndex_;
      }
      /**
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       *
       * <code>repeated int32 substring_index = 4;</code>
       * @return The count of substringIndex.
       */
      public int getSubstringIndexCount() {
        return substringIndex_.size();
      }
      /**
       * <pre>
       * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
       * and the second element as the end index.
       * If an operation is not NONE, it's applied _after_ this substring operation
       * </pre>
       *
       * <code>repeated int32 substring_index = 4;</code>
       * @param index The index of the element to return.
       * @return The substringIndex at the given index.
       */
      public int getSubstringIndex(int index) {
        return substringIndex_.getInt(index);
      }
      private int substringIndexMemoizedSerializedSize = -1;

      public static final int REPLACE_CHAR_FIELD_NUMBER = 5;
      @SuppressWarnings("serial")
      private org.jetbrains.kotlin.protobuf.Internal.IntList replaceChar_ =
          emptyIntList();
      /**
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       *
       * <code>repeated int32 replace_char = 5;</code>
       * @return A list containing the replaceChar.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getReplaceCharList() {
        return replaceChar_;
      }
      /**
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       *
       * <code>repeated int32 replace_char = 5;</code>
       * @return The count of replaceChar.
       */
      public int getReplaceCharCount() {
        return replaceChar_.size();
      }
      /**
       * <pre>
       * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
       * of the character to replace, and the second element as the code point of the replacement character
       * </pre>
       *
       * <code>repeated int32 replace_char = 5;</code>
       * @param index The index of the element to return.
       * @return The replaceChar at the given index.
       */
      public int getReplaceChar(int index) {
        return replaceChar_.getInt(index);
      }
      private int replaceCharMemoizedSerializedSize = -1;

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeInt32(1, range_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(2, predefinedIndex_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeEnum(3, operation_);
        }
        if (getSubstringIndexList().size() > 0) {
          output.writeUInt32NoTag(34);
          output.writeUInt32NoTag(substringIndexMemoizedSerializedSize);
        }
        for (int i = 0; i < substringIndex_.size(); i++) {
          output.writeInt32NoTag(substringIndex_.getInt(i));
        }
        if (getReplaceCharList().size() > 0) {
          output.writeUInt32NoTag(42);
          output.writeUInt32NoTag(replaceCharMemoizedSerializedSize);
        }
        for (int i = 0; i < replaceChar_.size(); i++) {
          output.writeInt32NoTag(replaceChar_.getInt(i));
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 6, string_);
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(1, range_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32Size(2, predefinedIndex_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeEnumSize(3, operation_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < substringIndex_.size(); i++) {
            dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(substringIndex_.getInt(i));
          }
          size += dataSize;
          if (!getSubstringIndexList().isEmpty()) {
            size += 1;
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          substringIndexMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < replaceChar_.size(); i++) {
            dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(replaceChar_.getInt(i));
          }
          size += dataSize;
          if (!getReplaceCharList().isEmpty()) {
            size += 1;
            size += org.jetbrains.kotlin.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          replaceCharMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(6, string_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record)) {
          return super.equals(obj);
        }
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record other = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record) obj;

        if (hasRange() != other.hasRange()) return false;
        if (hasRange()) {
          if (getRange()
              != other.getRange()) return false;
        }
        if (hasPredefinedIndex() != other.hasPredefinedIndex()) return false;
        if (hasPredefinedIndex()) {
          if (getPredefinedIndex()
              != other.getPredefinedIndex()) return false;
        }
        if (hasString() != other.hasString()) return false;
        if (hasString()) {
          if (!getString()
              .equals(other.getString())) return false;
        }
        if (hasOperation() != other.hasOperation()) return false;
        if (hasOperation()) {
          if (operation_ != other.operation_) return false;
        }
        if (!getSubstringIndexList()
            .equals(other.getSubstringIndexList())) return false;
        if (!getReplaceCharList()
            .equals(other.getReplaceCharList())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasRange()) {
          hash = (37 * hash) + RANGE_FIELD_NUMBER;
          hash = (53 * hash) + getRange();
        }
        if (hasPredefinedIndex()) {
          hash = (37 * hash) + PREDEFINED_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getPredefinedIndex();
        }
        if (hasString()) {
          hash = (37 * hash) + STRING_FIELD_NUMBER;
          hash = (53 * hash) + getString().hashCode();
        }
        if (hasOperation()) {
          hash = (37 * hash) + OPERATION_FIELD_NUMBER;
          hash = (53 * hash) + operation_;
        }
        if (getSubstringIndexCount() > 0) {
          hash = (37 * hash) + SUBSTRING_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getSubstringIndexList().hashCode();
        }
        if (getReplaceCharCount() > 0) {
          hash = (37 * hash) + REPLACE_CHAR_FIELD_NUMBER;
          hash = (53 * hash) + getReplaceCharList().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          java.nio.ByteBuffer data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          java.nio.ByteBuffer data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return org.jetbrains.kotlin.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record}
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_descriptor;
        }

        @java.lang.Override
        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.newBuilder()
        private Builder() {

        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          range_ = 1;
          predefinedIndex_ = 0;
          string_ = "";
          operation_ = 0;
          substringIndex_ = emptyIntList();
          replaceChar_ = emptyIntList();
          return this;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_descriptor;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getDefaultInstanceForType() {
          return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.getDefaultInstance();
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record build() {
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record buildPartial() {
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.range_ = range_;
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.predefinedIndex_ = predefinedIndex_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.string_ = string_;
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.operation_ = operation_;
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            substringIndex_.makeImmutable();
            result.substringIndex_ = substringIndex_;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            replaceChar_.makeImmutable();
            result.replaceChar_ = replaceChar_;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record) {
            return mergeFrom((org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record other) {
          if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.getDefaultInstance()) return this;
          if (other.hasRange()) {
            setRange(other.getRange());
          }
          if (other.hasPredefinedIndex()) {
            setPredefinedIndex(other.getPredefinedIndex());
          }
          if (other.hasString()) {
            string_ = other.string_;
            bitField0_ |= 0x00000004;
            onChanged();
          }
          if (other.hasOperation()) {
            setOperation(other.getOperation());
          }
          if (!other.substringIndex_.isEmpty()) {
            if (substringIndex_.isEmpty()) {
              substringIndex_ = other.substringIndex_;
              substringIndex_.makeImmutable();
              bitField0_ |= 0x00000010;
            } else {
              ensureSubstringIndexIsMutable();
              substringIndex_.addAll(other.substringIndex_);
            }
            onChanged();
          }
          if (!other.replaceChar_.isEmpty()) {
            if (replaceChar_.isEmpty()) {
              replaceChar_ = other.replaceChar_;
              replaceChar_.makeImmutable();
              bitField0_ |= 0x00000020;
            } else {
              ensureReplaceCharIsMutable();
              replaceChar_.addAll(other.replaceChar_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  range_ = input.readInt32();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 8
                case 16: {
                  predefinedIndex_ = input.readInt32();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 16
                case 24: {
                  int tmpRaw = input.readEnum();
                  org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation tmpValue =
                      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(3, tmpRaw);
                  } else {
                    operation_ = tmpRaw;
                    bitField0_ |= 0x00000008;
                  }
                  break;
                } // case 24
                case 32: {
                  int v = input.readInt32();
                  ensureSubstringIndexIsMutable();
                  substringIndex_.addInt(v);
                  break;
                } // case 32
                case 34: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureSubstringIndexIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    substringIndex_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 34
                case 40: {
                  int v = input.readInt32();
                  ensureReplaceCharIsMutable();
                  replaceChar_.addInt(v);
                  break;
                } // case 40
                case 42: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  ensureReplaceCharIsMutable();
                  while (input.getBytesUntilLimit() > 0) {
                    replaceChar_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                } // case 42
                case 50: {
                  string_ = input.readBytes();
                  bitField0_ |= 0x00000004;
                  break;
                } // case 50
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private int range_ = 1;
        /**
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         *
         * <code>int32 range = 1 [default = 1];</code>
         * @return Whether the range field is set.
         */
        @java.lang.Override
        public boolean hasRange() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         *
         * <code>int32 range = 1 [default = 1];</code>
         * @return The range.
         */
        @java.lang.Override
        public int getRange() {
          return range_;
        }
        /**
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         *
         * <code>int32 range = 1 [default = 1];</code>
         * @param value The range to set.
         * @return This builder for chaining.
         */
        public Builder setRange(int value) {

          range_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The number of times this record should be repeated; this is used to collapse identical subsequent records in the list
         * </pre>
         *
         * <code>int32 range = 1 [default = 1];</code>
         * @return This builder for chaining.
         */
        public Builder clearRange() {
          bitField0_ = (bitField0_ & ~0x00000001);
          range_ = 1;
          onChanged();
          return this;
        }

        private int predefinedIndex_ ;
        /**
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         *
         * <code>int32 predefined_index = 2;</code>
         * @return Whether the predefinedIndex field is set.
         */
        @java.lang.Override
        public boolean hasPredefinedIndex() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         *
         * <code>int32 predefined_index = 2;</code>
         * @return The predefinedIndex.
         */
        @java.lang.Override
        public int getPredefinedIndex() {
          return predefinedIndex_;
        }
        /**
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         *
         * <code>int32 predefined_index = 2;</code>
         * @param value The predefinedIndex to set.
         * @return This builder for chaining.
         */
        public Builder setPredefinedIndex(int value) {

          predefinedIndex_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Index of the predefined constant. If this field is present, the associated string is ignored
         * </pre>
         *
         * <code>int32 predefined_index = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPredefinedIndex() {
          bitField0_ = (bitField0_ & ~0x00000002);
          predefinedIndex_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object string_ = "";
        /**
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         *
         * <code>string string = 6;</code>
         * @return Whether the string field is set.
         */
        public boolean hasString() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         *
         * <code>string string = 6;</code>
         * @return The string.
         */
        public java.lang.String getString() {
          java.lang.Object ref = string_;
          if (!(ref instanceof java.lang.String)) {
            org.jetbrains.kotlin.protobuf.ByteString bs =
                (org.jetbrains.kotlin.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              string_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         *
         * <code>string string = 6;</code>
         * @return The bytes for string.
         */
        public org.jetbrains.kotlin.protobuf.ByteString
            getStringBytes() {
          java.lang.Object ref = string_;
          if (ref instanceof String) {
            org.jetbrains.kotlin.protobuf.ByteString b = 
                org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            string_ = b;
            return b;
          } else {
            return (org.jetbrains.kotlin.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         *
         * <code>string string = 6;</code>
         * @param value The string to set.
         * @return This builder for chaining.
         */
        public Builder setString(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          string_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         *
         * <code>string string = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearString() {
          string_ = getDefaultInstance().getString();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A string which should be used. If this field is present, both the associated string and the predefined string index are ignored
         * </pre>
         *
         * <code>string string = 6;</code>
         * @param value The bytes for string to set.
         * @return This builder for chaining.
         */
        public Builder setStringBytes(
            org.jetbrains.kotlin.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          string_ = value;
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }

        private int operation_ = 0;
        /**
         * <pre>
         * Perform a described operation on the string
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         * @return Whether the operation field is set.
         */
        @java.lang.Override public boolean hasOperation() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * Perform a described operation on the string
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         * @return The operation.
         */
        @java.lang.Override
        public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation getOperation() {
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation result = org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.forNumber(operation_);
          return result == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation.NONE : result;
        }
        /**
         * <pre>
         * Perform a described operation on the string
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         * @param value The operation to set.
         * @return This builder for chaining.
         */
        public Builder setOperation(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Operation value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          operation_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Perform a described operation on the string
         * </pre>
         *
         * <code>.org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record.Operation operation = 3 [default = NONE];</code>
         * @return This builder for chaining.
         */
        public Builder clearOperation() {
          bitField0_ = (bitField0_ & ~0x00000008);
          operation_ = 0;
          onChanged();
          return this;
        }

        private org.jetbrains.kotlin.protobuf.Internal.IntList substringIndex_ = emptyIntList();
        private void ensureSubstringIndexIsMutable() {
          if (!substringIndex_.isModifiable()) {
            substringIndex_ = makeMutableCopy(substringIndex_);
          }
          bitField0_ |= 0x00000010;
        }
        /**
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         *
         * <code>repeated int32 substring_index = 4;</code>
         * @return A list containing the substringIndex.
         */
        public java.util.List<java.lang.Integer>
            getSubstringIndexList() {
          substringIndex_.makeImmutable();
          return substringIndex_;
        }
        /**
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         *
         * <code>repeated int32 substring_index = 4;</code>
         * @return The count of substringIndex.
         */
        public int getSubstringIndexCount() {
          return substringIndex_.size();
        }
        /**
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         *
         * <code>repeated int32 substring_index = 4;</code>
         * @param index The index of the element to return.
         * @return The substringIndex at the given index.
         */
        public int getSubstringIndex(int index) {
          return substringIndex_.getInt(index);
        }
        /**
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         *
         * <code>repeated int32 substring_index = 4;</code>
         * @param index The index to set the value at.
         * @param value The substringIndex to set.
         * @return This builder for chaining.
         */
        public Builder setSubstringIndex(
            int index, int value) {

          ensureSubstringIndexIsMutable();
          substringIndex_.setInt(index, value);
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         *
         * <code>repeated int32 substring_index = 4;</code>
         * @param value The substringIndex to add.
         * @return This builder for chaining.
         */
        public Builder addSubstringIndex(int value) {

          ensureSubstringIndexIsMutable();
          substringIndex_.addInt(value);
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         *
         * <code>repeated int32 substring_index = 4;</code>
         * @param values The substringIndex to add.
         * @return This builder for chaining.
         */
        public Builder addAllSubstringIndex(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureSubstringIndexIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, substringIndex_);
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If this field is present, the "substring" operation must be performed with the first element of this list as the start index,
         * and the second element as the end index.
         * If an operation is not NONE, it's applied _after_ this substring operation
         * </pre>
         *
         * <code>repeated int32 substring_index = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearSubstringIndex() {
          substringIndex_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        private org.jetbrains.kotlin.protobuf.Internal.IntList replaceChar_ = emptyIntList();
        private void ensureReplaceCharIsMutable() {
          if (!replaceChar_.isModifiable()) {
            replaceChar_ = makeMutableCopy(replaceChar_);
          }
          bitField0_ |= 0x00000020;
        }
        /**
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         *
         * <code>repeated int32 replace_char = 5;</code>
         * @return A list containing the replaceChar.
         */
        public java.util.List<java.lang.Integer>
            getReplaceCharList() {
          replaceChar_.makeImmutable();
          return replaceChar_;
        }
        /**
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         *
         * <code>repeated int32 replace_char = 5;</code>
         * @return The count of replaceChar.
         */
        public int getReplaceCharCount() {
          return replaceChar_.size();
        }
        /**
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         *
         * <code>repeated int32 replace_char = 5;</code>
         * @param index The index of the element to return.
         * @return The replaceChar at the given index.
         */
        public int getReplaceChar(int index) {
          return replaceChar_.getInt(index);
        }
        /**
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         *
         * <code>repeated int32 replace_char = 5;</code>
         * @param index The index to set the value at.
         * @param value The replaceChar to set.
         * @return This builder for chaining.
         */
        public Builder setReplaceChar(
            int index, int value) {

          ensureReplaceCharIsMutable();
          replaceChar_.setInt(index, value);
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         *
         * <code>repeated int32 replace_char = 5;</code>
         * @param value The replaceChar to add.
         * @return This builder for chaining.
         */
        public Builder addReplaceChar(int value) {

          ensureReplaceCharIsMutable();
          replaceChar_.addInt(value);
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         *
         * <code>repeated int32 replace_char = 5;</code>
         * @param values The replaceChar to add.
         * @return This builder for chaining.
         */
        public Builder addAllReplaceChar(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureReplaceCharIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, replaceChar_);
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If this field is present, the "replaceAll" operation must be performed with the first element of this list as the code point
         * of the character to replace, and the second element as the code point of the replacement character
         * </pre>
         *
         * <code>repeated int32 replace_char = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearReplaceChar() {
          replaceChar_ = emptyIntList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record)
      private static final org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record();
      }

      public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final org.jetbrains.kotlin.protobuf.Parser<Record>
          PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Record>() {
        @java.lang.Override
        public Record parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static org.jetbrains.kotlin.protobuf.Parser<Record> parser() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<Record> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int RECORD_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> record_;
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> getRecordList() {
      return record_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder> 
        getRecordOrBuilderList() {
      return record_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    @java.lang.Override
    public int getRecordCount() {
      return record_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getRecord(int index) {
      return record_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder getRecordOrBuilder(
        int index) {
      return record_.get(index);
    }

    public static final int LOCAL_NAME_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList localName_ =
        emptyIntList();
    /**
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     *
     * <code>repeated int32 local_name = 5;</code>
     * @return A list containing the localName.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getLocalNameList() {
      return localName_;
    }
    /**
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     *
     * <code>repeated int32 local_name = 5;</code>
     * @return The count of localName.
     */
    public int getLocalNameCount() {
      return localName_.size();
    }
    /**
     * <pre>
     * Indices of strings which are names of local classes or anonymous objects
     * </pre>
     *
     * <code>repeated int32 local_name = 5;</code>
     * @param index The index of the element to return.
     * @return The localName at the given index.
     */
    public int getLocalName(int index) {
      return localName_.getInt(index);
    }
    private int localNameMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < record_.size(); i++) {
        output.writeMessage(1, record_.get(i));
      }
      if (getLocalNameList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(localNameMemoizedSerializedSize);
      }
      for (int i = 0; i < localName_.size(); i++) {
        output.writeInt32NoTag(localName_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < record_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, record_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < localName_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(localName_.getInt(i));
        }
        size += dataSize;
        if (!getLocalNameList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        localNameMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes other = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes) obj;

      if (!getRecordList()
          .equals(other.getRecordList())) return false;
      if (!getLocalNameList()
          .equals(other.getLocalNameList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRecordCount() > 0) {
        hash = (37 * hash) + RECORD_FIELD_NUMBER;
        hash = (53 * hash) + getRecordList().hashCode();
      }
      if (getLocalNameCount() > 0) {
        hash = (37 * hash) + LOCAL_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getLocalNameList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.StringTableTypes}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypesOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (recordBuilder_ == null) {
          record_ = java.util.Collections.emptyList();
        } else {
          record_ = null;
          recordBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        localName_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes result) {
        if (recordBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            record_ = java.util.Collections.unmodifiableList(record_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.record_ = record_;
        } else {
          result.record_ = recordBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          localName_.makeImmutable();
          result.localName_ = localName_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes) {
          return mergeFrom((org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.getDefaultInstance()) return this;
        if (recordBuilder_ == null) {
          if (!other.record_.isEmpty()) {
            if (record_.isEmpty()) {
              record_ = other.record_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRecordIsMutable();
              record_.addAll(other.record_);
            }
            onChanged();
          }
        } else {
          if (!other.record_.isEmpty()) {
            if (recordBuilder_.isEmpty()) {
              recordBuilder_.dispose();
              recordBuilder_ = null;
              record_ = other.record_;
              bitField0_ = (bitField0_ & ~0x00000001);
              recordBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRecordFieldBuilder() : null;
            } else {
              recordBuilder_.addAllMessages(other.record_);
            }
          }
        }
        if (!other.localName_.isEmpty()) {
          if (localName_.isEmpty()) {
            localName_ = other.localName_;
            localName_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureLocalNameIsMutable();
            localName_.addAll(other.localName_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record m =
                    input.readMessage(
                        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.parser(),
                        extensionRegistry);
                if (recordBuilder_ == null) {
                  ensureRecordIsMutable();
                  record_.add(m);
                } else {
                  recordBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 40: {
                int v = input.readInt32();
                ensureLocalNameIsMutable();
                localName_.addInt(v);
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureLocalNameIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  localName_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> record_ =
        java.util.Collections.emptyList();
      private void ensureRecordIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          record_ = new java.util.ArrayList<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record>(record_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder> recordBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> getRecordList() {
        if (recordBuilder_ == null) {
          return java.util.Collections.unmodifiableList(record_);
        } else {
          return recordBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public int getRecordCount() {
        if (recordBuilder_ == null) {
          return record_.size();
        } else {
          return recordBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record getRecord(int index) {
        if (recordBuilder_ == null) {
          return record_.get(index);
        } else {
          return recordBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder setRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.set(index, value);
          onChanged();
        } else {
          recordBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder setRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.set(index, builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.add(value);
          onChanged();
        } else {
          recordBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.add(index, value);
          onChanged();
        } else {
          recordBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.add(builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addRecord(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.add(index, builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder addAllRecord(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record> values) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, record_);
          onChanged();
        } else {
          recordBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder clearRecord() {
        if (recordBuilder_ == null) {
          record_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          recordBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public Builder removeRecord(int index) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.remove(index);
          onChanged();
        } else {
          recordBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder getRecordBuilder(
          int index) {
        return getRecordFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder getRecordOrBuilder(
          int index) {
        if (recordBuilder_ == null) {
          return record_.get(index);  } else {
          return recordBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder> 
           getRecordOrBuilderList() {
        if (recordBuilder_ != null) {
          return recordBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(record_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder addRecordBuilder() {
        return getRecordFieldBuilder().addBuilder(
            org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder addRecordBuilder(
          int index) {
        return getRecordFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.StringTableTypes.Record record = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder> 
           getRecordBuilderList() {
        return getRecordFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder> 
          getRecordFieldBuilder() {
        if (recordBuilder_ == null) {
          recordBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.Record.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes.RecordOrBuilder>(
                  record_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          record_ = null;
        }
        return recordBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList localName_ = emptyIntList();
      private void ensureLocalNameIsMutable() {
        if (!localName_.isModifiable()) {
          localName_ = makeMutableCopy(localName_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       *
       * <code>repeated int32 local_name = 5;</code>
       * @return A list containing the localName.
       */
      public java.util.List<java.lang.Integer>
          getLocalNameList() {
        localName_.makeImmutable();
        return localName_;
      }
      /**
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       *
       * <code>repeated int32 local_name = 5;</code>
       * @return The count of localName.
       */
      public int getLocalNameCount() {
        return localName_.size();
      }
      /**
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       *
       * <code>repeated int32 local_name = 5;</code>
       * @param index The index of the element to return.
       * @return The localName at the given index.
       */
      public int getLocalName(int index) {
        return localName_.getInt(index);
      }
      /**
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       *
       * <code>repeated int32 local_name = 5;</code>
       * @param index The index to set the value at.
       * @param value The localName to set.
       * @return This builder for chaining.
       */
      public Builder setLocalName(
          int index, int value) {

        ensureLocalNameIsMutable();
        localName_.setInt(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       *
       * <code>repeated int32 local_name = 5;</code>
       * @param value The localName to add.
       * @return This builder for chaining.
       */
      public Builder addLocalName(int value) {

        ensureLocalNameIsMutable();
        localName_.addInt(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       *
       * <code>repeated int32 local_name = 5;</code>
       * @param values The localName to add.
       * @return This builder for chaining.
       */
      public Builder addAllLocalName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLocalNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, localName_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indices of strings which are names of local classes or anonymous objects
       * </pre>
       *
       * <code>repeated int32 local_name = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocalName() {
        localName_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.StringTableTypes)
    private static final org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<StringTableTypes>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<StringTableTypes>() {
      @java.lang.Override
      public StringTableTypes parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<StringTableTypes> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<StringTableTypes> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.StringTableTypes getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JvmMethodSignatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The name.
     */
    int getName();

    /**
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the desc field is set.
     */
    boolean hasDesc();
    /**
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The desc.
     */
    int getDesc();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature}
   */
  public static final class JvmMethodSignature extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
      JvmMethodSignatureOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        JvmMethodSignature.class.getName());
    }
    // Use JvmMethodSignature.newBuilder() to construct.
    private JvmMethodSignature(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private JvmMethodSignature() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private int name_ = 0;
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int DESC_FIELD_NUMBER = 2;
    private int desc_ = 0;
    /**
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the desc field is set.
     */
    @java.lang.Override
    public boolean hasDesc() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The desc.
     */
    @java.lang.Override
    public int getDesc() {
      return desc_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, desc_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, desc_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature other = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (hasDesc() != other.hasDesc()) return false;
      if (hasDesc()) {
        if (getDesc()
            != other.getDesc()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (hasDesc()) {
        hash = (37 * hash) + DESC_FIELD_NUMBER;
        hash = (53 * hash) + getDesc();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = 0;
        desc_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.desc_ = desc_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature) {
          return mergeFrom((org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasDesc()) {
          setDesc(other.getDesc());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                desc_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int name_ ;
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        onChanged();
        return this;
      }

      private int desc_ ;
      /**
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the desc field is set.
       */
      @java.lang.Override
      public boolean hasDesc() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The desc.
       */
      @java.lang.Override
      public int getDesc() {
        return desc_;
      }
      /**
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The desc to set.
       * @return This builder for chaining.
       */
      public Builder setDesc(int value) {

        desc_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * JVM descriptor of the method, e.g. '(Ljava/util/List;)[Ljava/lang/Object;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearDesc() {
        bitField0_ = (bitField0_ & ~0x00000002);
        desc_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature)
    private static final org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<JvmMethodSignature>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<JvmMethodSignature>() {
      @java.lang.Override
      public JvmMethodSignature parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<JvmMethodSignature> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmMethodSignature> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JvmFieldSignatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The name.
     */
    int getName();

    /**
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the desc field is set.
     */
    boolean hasDesc();
    /**
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The desc.
     */
    int getDesc();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature}
   */
  public static final class JvmFieldSignature extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
      JvmFieldSignatureOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        JvmFieldSignature.class.getName());
    }
    // Use JvmFieldSignature.newBuilder() to construct.
    private JvmFieldSignature(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private JvmFieldSignature() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private int name_ = 0;
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return name_;
    }

    public static final int DESC_FIELD_NUMBER = 2;
    private int desc_ = 0;
    /**
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return Whether the desc field is set.
     */
    @java.lang.Override
    public boolean hasDesc() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
     * </pre>
     *
     * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
     * @return The desc.
     */
    @java.lang.Override
    public int getDesc() {
      return desc_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, desc_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, desc_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature other = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (getName()
            != other.getName()) return false;
      }
      if (hasDesc() != other.hasDesc()) return false;
      if (hasDesc()) {
        if (getDesc()
            != other.getDesc()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName();
      }
      if (hasDesc()) {
        hash = (37 * hash) + DESC_FIELD_NUMBER;
        hash = (53 * hash) + getDesc();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = 0;
        desc_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.desc_ = desc_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature) {
          return mergeFrom((org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasDesc()) {
          setDesc(other.getDesc());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                name_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                desc_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int name_ ;
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The name.
       */
      @java.lang.Override
      public int getName() {
        return name_;
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(int value) {

        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name = 1 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = 0;
        onChanged();
        return this;
      }

      private int desc_ ;
      /**
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return Whether the desc field is set.
       */
      @java.lang.Override
      public boolean hasDesc() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return The desc.
       */
      @java.lang.Override
      public int getDesc() {
        return desc_;
      }
      /**
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @param value The desc to set.
       * @return This builder for chaining.
       */
      public Builder setDesc(int value) {

        desc_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * JVM descriptor of the field type, e.g. 'Ljava/lang/String;'
       * </pre>
       *
       * <code>int32 desc = 2 [(.org.jetbrains.kotlin.metadata.string_id_in_table) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearDesc() {
        bitField0_ = (bitField0_ & ~0x00000002);
        desc_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature)
    private static final org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<JvmFieldSignature>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<JvmFieldSignature>() {
      @java.lang.Override
      public JvmFieldSignature parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<JvmFieldSignature> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmFieldSignature> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JvmPropertySignatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     * @return Whether the field field is set.
     */
    boolean hasField();
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     * @return The field.
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getField();
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder getFieldOrBuilder();

    /**
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     * @return Whether the syntheticMethod field is set.
     */
    boolean hasSyntheticMethod();
    /**
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     * @return The syntheticMethod.
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSyntheticMethod();
    /**
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getSyntheticMethodOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     * @return Whether the getter field is set.
     */
    boolean hasGetter();
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     * @return The getter.
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getGetter();
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getGetterOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     * @return Whether the setter field is set.
     */
    boolean hasSetter();
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     * @return The setter.
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSetter();
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getSetterOrBuilder();

    /**
     * <pre>
     * The delegate field of delegated properties may be optimized out; `getDelegate` should
     * then call this method instead
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
     * @return Whether the delegateMethod field is set.
     */
    boolean hasDelegateMethod();
    /**
     * <pre>
     * The delegate field of delegated properties may be optimized out; `getDelegate` should
     * then call this method instead
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
     * @return The delegateMethod.
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getDelegateMethod();
    /**
     * <pre>
     * The delegate field of delegated properties may be optimized out; `getDelegate` should
     * then call this method instead
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getDelegateMethodOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature}
   */
  public static final class JvmPropertySignature extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
      JvmPropertySignatureOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        JvmPropertySignature.class.getName());
    }
    // Use JvmPropertySignature.newBuilder() to construct.
    private JvmPropertySignature(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private JvmPropertySignature() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.Builder.class);
    }

    private int bitField0_;
    public static final int FIELD_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature field_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     * @return Whether the field field is set.
     */
    @java.lang.Override
    public boolean hasField() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     * @return The field.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getField() {
      return field_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance() : field_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder getFieldOrBuilder() {
      return field_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance() : field_;
    }

    public static final int SYNTHETIC_METHOD_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature syntheticMethod_;
    /**
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     * @return Whether the syntheticMethod field is set.
     */
    @java.lang.Override
    public boolean hasSyntheticMethod() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     * @return The syntheticMethod.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSyntheticMethod() {
      return syntheticMethod_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : syntheticMethod_;
    }
    /**
     * <pre>
     * Annotations on properties are written on a synthetic method with this signature
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getSyntheticMethodOrBuilder() {
      return syntheticMethod_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : syntheticMethod_;
    }

    public static final int GETTER_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getter_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     * @return Whether the getter field is set.
     */
    @java.lang.Override
    public boolean hasGetter() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     * @return The getter.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getGetter() {
      return getter_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : getter_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getGetterOrBuilder() {
      return getter_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : getter_;
    }

    public static final int SETTER_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature setter_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     * @return Whether the setter field is set.
     */
    @java.lang.Override
    public boolean hasSetter() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     * @return The setter.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSetter() {
      return setter_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : setter_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getSetterOrBuilder() {
      return setter_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : setter_;
    }

    public static final int DELEGATE_METHOD_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature delegateMethod_;
    /**
     * <pre>
     * The delegate field of delegated properties may be optimized out; `getDelegate` should
     * then call this method instead
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
     * @return Whether the delegateMethod field is set.
     */
    @java.lang.Override
    public boolean hasDelegateMethod() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The delegate field of delegated properties may be optimized out; `getDelegate` should
     * then call this method instead
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
     * @return The delegateMethod.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getDelegateMethod() {
      return delegateMethod_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : delegateMethod_;
    }
    /**
     * <pre>
     * The delegate field of delegated properties may be optimized out; `getDelegate` should
     * then call this method instead
     * </pre>
     *
     * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getDelegateMethodOrBuilder() {
      return delegateMethod_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : delegateMethod_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getField());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getSyntheticMethod());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getGetter());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getSetter());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(5, getDelegateMethod());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getField());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getSyntheticMethod());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getGetter());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getSetter());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, getDelegateMethod());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature other = (org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature) obj;

      if (hasField() != other.hasField()) return false;
      if (hasField()) {
        if (!getField()
            .equals(other.getField())) return false;
      }
      if (hasSyntheticMethod() != other.hasSyntheticMethod()) return false;
      if (hasSyntheticMethod()) {
        if (!getSyntheticMethod()
            .equals(other.getSyntheticMethod())) return false;
      }
      if (hasGetter() != other.hasGetter()) return false;
      if (hasGetter()) {
        if (!getGetter()
            .equals(other.getGetter())) return false;
      }
      if (hasSetter() != other.hasSetter()) return false;
      if (hasSetter()) {
        if (!getSetter()
            .equals(other.getSetter())) return false;
      }
      if (hasDelegateMethod() != other.hasDelegateMethod()) return false;
      if (hasDelegateMethod()) {
        if (!getDelegateMethod()
            .equals(other.getDelegateMethod())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasField()) {
        hash = (37 * hash) + FIELD_FIELD_NUMBER;
        hash = (53 * hash) + getField().hashCode();
      }
      if (hasSyntheticMethod()) {
        hash = (37 * hash) + SYNTHETIC_METHOD_FIELD_NUMBER;
        hash = (53 * hash) + getSyntheticMethod().hashCode();
      }
      if (hasGetter()) {
        hash = (37 * hash) + GETTER_FIELD_NUMBER;
        hash = (53 * hash) + getGetter().hashCode();
      }
      if (hasSetter()) {
        hash = (37 * hash) + SETTER_FIELD_NUMBER;
        hash = (53 * hash) + getSetter().hashCode();
      }
      if (hasDelegateMethod()) {
        hash = (37 * hash) + DELEGATE_METHOD_FIELD_NUMBER;
        hash = (53 * hash) + getDelegateMethod().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignatureOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.class, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getFieldFieldBuilder();
          getSyntheticMethodFieldBuilder();
          getGetterFieldBuilder();
          getSetterFieldBuilder();
          getDelegateMethodFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        field_ = null;
        if (fieldBuilder_ != null) {
          fieldBuilder_.dispose();
          fieldBuilder_ = null;
        }
        syntheticMethod_ = null;
        if (syntheticMethodBuilder_ != null) {
          syntheticMethodBuilder_.dispose();
          syntheticMethodBuilder_ = null;
        }
        getter_ = null;
        if (getterBuilder_ != null) {
          getterBuilder_.dispose();
          getterBuilder_ = null;
        }
        setter_ = null;
        if (setterBuilder_ != null) {
          setterBuilder_.dispose();
          setterBuilder_ = null;
        }
        delegateMethod_ = null;
        if (delegateMethodBuilder_ != null) {
          delegateMethodBuilder_.dispose();
          delegateMethodBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature build() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature buildPartial() {
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature result = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.field_ = fieldBuilder_ == null
              ? field_
              : fieldBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.syntheticMethod_ = syntheticMethodBuilder_ == null
              ? syntheticMethod_
              : syntheticMethodBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.getter_ = getterBuilder_ == null
              ? getter_
              : getterBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.setter_ = setterBuilder_ == null
              ? setter_
              : setterBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.delegateMethod_ = delegateMethodBuilder_ == null
              ? delegateMethod_
              : delegateMethodBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature) {
          return mergeFrom((org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature other) {
        if (other == org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.getDefaultInstance()) return this;
        if (other.hasField()) {
          mergeField(other.getField());
        }
        if (other.hasSyntheticMethod()) {
          mergeSyntheticMethod(other.getSyntheticMethod());
        }
        if (other.hasGetter()) {
          mergeGetter(other.getGetter());
        }
        if (other.hasSetter()) {
          mergeSetter(other.getSetter());
        }
        if (other.hasDelegateMethod()) {
          mergeDelegateMethod(other.getDelegateMethod());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getFieldFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getSyntheticMethodFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getGetterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getSetterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getDelegateMethodFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature field_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder> fieldBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       * @return Whether the field field is set.
       */
      public boolean hasField() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       * @return The field.
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature getField() {
        if (fieldBuilder_ == null) {
          return field_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance() : field_;
        } else {
          return fieldBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder setField(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          field_ = value;
        } else {
          fieldBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder setField(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          field_ = builderForValue.build();
        } else {
          fieldBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder mergeField(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature value) {
        if (fieldBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            field_ != null &&
            field_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance()) {
            getFieldBuilder().mergeFrom(value);
          } else {
            field_ = value;
          }
        } else {
          fieldBuilder_.mergeFrom(value);
        }
        if (field_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public Builder clearField() {
        bitField0_ = (bitField0_ & ~0x00000001);
        field_ = null;
        if (fieldBuilder_ != null) {
          fieldBuilder_.dispose();
          fieldBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder getFieldBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder getFieldOrBuilder() {
        if (fieldBuilder_ != null) {
          return fieldBuilder_.getMessageOrBuilder();
        } else {
          return field_ == null ?
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.getDefaultInstance() : field_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmFieldSignature field = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder> 
          getFieldFieldBuilder() {
        if (fieldBuilder_ == null) {
          fieldBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmFieldSignatureOrBuilder>(
                  getField(),
                  getParentForChildren(),
                  isClean());
          field_ = null;
        }
        return fieldBuilder_;
      }

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature syntheticMethod_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> syntheticMethodBuilder_;
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       * @return Whether the syntheticMethod field is set.
       */
      public boolean hasSyntheticMethod() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       * @return The syntheticMethod.
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSyntheticMethod() {
        if (syntheticMethodBuilder_ == null) {
          return syntheticMethod_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : syntheticMethod_;
        } else {
          return syntheticMethodBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       */
      public Builder setSyntheticMethod(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (syntheticMethodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          syntheticMethod_ = value;
        } else {
          syntheticMethodBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       */
      public Builder setSyntheticMethod(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder builderForValue) {
        if (syntheticMethodBuilder_ == null) {
          syntheticMethod_ = builderForValue.build();
        } else {
          syntheticMethodBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       */
      public Builder mergeSyntheticMethod(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (syntheticMethodBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            syntheticMethod_ != null &&
            syntheticMethod_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) {
            getSyntheticMethodBuilder().mergeFrom(value);
          } else {
            syntheticMethod_ = value;
          }
        } else {
          syntheticMethodBuilder_.mergeFrom(value);
        }
        if (syntheticMethod_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       */
      public Builder clearSyntheticMethod() {
        bitField0_ = (bitField0_ & ~0x00000002);
        syntheticMethod_ = null;
        if (syntheticMethodBuilder_ != null) {
          syntheticMethodBuilder_.dispose();
          syntheticMethodBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder getSyntheticMethodBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getSyntheticMethodFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getSyntheticMethodOrBuilder() {
        if (syntheticMethodBuilder_ != null) {
          return syntheticMethodBuilder_.getMessageOrBuilder();
        } else {
          return syntheticMethod_ == null ?
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : syntheticMethod_;
        }
      }
      /**
       * <pre>
       * Annotations on properties are written on a synthetic method with this signature
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature synthetic_method = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> 
          getSyntheticMethodFieldBuilder() {
        if (syntheticMethodBuilder_ == null) {
          syntheticMethodBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder>(
                  getSyntheticMethod(),
                  getParentForChildren(),
                  isClean());
          syntheticMethod_ = null;
        }
        return syntheticMethodBuilder_;
      }

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getter_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> getterBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       * @return Whether the getter field is set.
       */
      public boolean hasGetter() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       * @return The getter.
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getGetter() {
        if (getterBuilder_ == null) {
          return getter_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : getter_;
        } else {
          return getterBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder setGetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (getterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getter_ = value;
        } else {
          getterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder setGetter(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder builderForValue) {
        if (getterBuilder_ == null) {
          getter_ = builderForValue.build();
        } else {
          getterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder mergeGetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (getterBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            getter_ != null &&
            getter_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) {
            getGetterBuilder().mergeFrom(value);
          } else {
            getter_ = value;
          }
        } else {
          getterBuilder_.mergeFrom(value);
        }
        if (getter_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public Builder clearGetter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        getter_ = null;
        if (getterBuilder_ != null) {
          getterBuilder_.dispose();
          getterBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder getGetterBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getGetterFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getGetterOrBuilder() {
        if (getterBuilder_ != null) {
          return getterBuilder_.getMessageOrBuilder();
        } else {
          return getter_ == null ?
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : getter_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature getter = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> 
          getGetterFieldBuilder() {
        if (getterBuilder_ == null) {
          getterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder>(
                  getGetter(),
                  getParentForChildren(),
                  isClean());
          getter_ = null;
        }
        return getterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature setter_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> setterBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       * @return Whether the setter field is set.
       */
      public boolean hasSetter() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       * @return The setter.
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getSetter() {
        if (setterBuilder_ == null) {
          return setter_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : setter_;
        } else {
          return setterBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder setSetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (setterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setter_ = value;
        } else {
          setterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder setSetter(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder builderForValue) {
        if (setterBuilder_ == null) {
          setter_ = builderForValue.build();
        } else {
          setterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder mergeSetter(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (setterBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            setter_ != null &&
            setter_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) {
            getSetterBuilder().mergeFrom(value);
          } else {
            setter_ = value;
          }
        } else {
          setterBuilder_.mergeFrom(value);
        }
        if (setter_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public Builder clearSetter() {
        bitField0_ = (bitField0_ & ~0x00000008);
        setter_ = null;
        if (setterBuilder_ != null) {
          setterBuilder_.dispose();
          setterBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder getSetterBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSetterFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getSetterOrBuilder() {
        if (setterBuilder_ != null) {
          return setterBuilder_.getMessageOrBuilder();
        } else {
          return setter_ == null ?
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : setter_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature setter = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> 
          getSetterFieldBuilder() {
        if (setterBuilder_ == null) {
          setterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder>(
                  getSetter(),
                  getParentForChildren(),
                  isClean());
          setter_ = null;
        }
        return setterBuilder_;
      }

      private org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature delegateMethod_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> delegateMethodBuilder_;
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       * @return Whether the delegateMethod field is set.
       */
      public boolean hasDelegateMethod() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       * @return The delegateMethod.
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature getDelegateMethod() {
        if (delegateMethodBuilder_ == null) {
          return delegateMethod_ == null ? org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : delegateMethod_;
        } else {
          return delegateMethodBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       */
      public Builder setDelegateMethod(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (delegateMethodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          delegateMethod_ = value;
        } else {
          delegateMethodBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       */
      public Builder setDelegateMethod(
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder builderForValue) {
        if (delegateMethodBuilder_ == null) {
          delegateMethod_ = builderForValue.build();
        } else {
          delegateMethodBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       */
      public Builder mergeDelegateMethod(org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature value) {
        if (delegateMethodBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            delegateMethod_ != null &&
            delegateMethod_ != org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance()) {
            getDelegateMethodBuilder().mergeFrom(value);
          } else {
            delegateMethod_ = value;
          }
        } else {
          delegateMethodBuilder_.mergeFrom(value);
        }
        if (delegateMethod_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       */
      public Builder clearDelegateMethod() {
        bitField0_ = (bitField0_ & ~0x00000010);
        delegateMethod_ = null;
        if (delegateMethodBuilder_ != null) {
          delegateMethodBuilder_.dispose();
          delegateMethodBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder getDelegateMethodBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getDelegateMethodFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       */
      public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder getDelegateMethodOrBuilder() {
        if (delegateMethodBuilder_ != null) {
          return delegateMethodBuilder_.getMessageOrBuilder();
        } else {
          return delegateMethod_ == null ?
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance() : delegateMethod_;
        }
      }
      /**
       * <pre>
       * The delegate field of delegated properties may be optimized out; `getDelegate` should
       * then call this method instead
       * </pre>
       *
       * <code>.org.jetbrains.kotlin.metadata.jvm.JvmMethodSignature delegate_method = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder> 
          getDelegateMethodFieldBuilder() {
        if (delegateMethodBuilder_ == null) {
          delegateMethodBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.Builder, org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignatureOrBuilder>(
                  getDelegateMethod(),
                  getParentForChildren(),
                  isClean());
          delegateMethod_ = null;
        }
        return delegateMethodBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.JvmPropertySignature)
    private static final org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<JvmPropertySignature>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<JvmPropertySignature>() {
      @java.lang.Override
      public JvmPropertySignature parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<JvmPropertySignature> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmPropertySignature> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int CONSTRUCTOR_SIGNATURE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Constructor { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Constructor,
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature> constructorSignature = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.class,
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance());
  public static final int METHOD_SIGNATURE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Function,
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature> methodSignature = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.class,
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmMethodSignature.getDefaultInstance());
  public static final int LAMBDA_CLASS_ORIGIN_NAME_FIELD_NUMBER = 101;
  /**
   * <pre>
   * For lambdas from bodies of inline functions copied to the use site, the JVM internal name of the original
   * lambda class this class is copied from
   * </pre>
   *
   * <code>extend .org.jetbrains.kotlin.metadata.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Function,
      java.lang.Integer> lambdaClassOriginName = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int PROPERTY_SIGNATURE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Property,
      org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature> propertySignature = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.class,
        org.jetbrains.kotlin.metadata.jvm.JvmProtoBuf.JvmPropertySignature.getDefaultInstance());
  public static final int FLAGS_FIELD_NUMBER = 101;
  /**
   * <pre>
   * *
   * isMovedFromInterfaceCompanion   true if this property is declared in an interface companion, and the field is stored in the interface
   * </pre>
   *
   * <code>extend .org.jetbrains.kotlin.metadata.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Property,
      java.lang.Integer> flags = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int TYPE_ANNOTATION_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Type { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Type,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>> typeAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
  public static final int IS_RAW_FIELD_NUMBER = 101;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Type { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Type,
      java.lang.Boolean> isRaw = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int TYPE_PARAMETER_ANNOTATION_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.TypeParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.TypeParameter,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation>> typeParameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
        org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.getDefaultInstance());
  public static final int CLASS_MODULE_NAME_FIELD_NUMBER = 101;
  /**
   * <pre>
   * If absent, assumed to be "main" (JvmProtoBufUtil.DEFAULT_MODULE_NAME)
   * </pre>
   *
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Class,
      java.lang.Integer> classModuleName = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int CLASS_LOCAL_VARIABLE_FIELD_NUMBER = 102;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Class,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property>> classLocalVariable = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.class,
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance());
  public static final int ANONYMOUS_OBJECT_ORIGIN_NAME_FIELD_NUMBER = 103;
  /**
   * <pre>
   * For anonymous objects from bodies of inline functions copied to the use site, the JVM internal name of the original
   * anonymous object this class is copied from
   * </pre>
   *
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Class,
      java.lang.Integer> anonymousObjectOriginName = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int JVM_CLASS_FLAGS_FIELD_NUMBER = 104;
  /**
   * <pre>
   * first bit: isFunctionBodyInInterface: 0 if actual body generated in DefaultImpl, 1 - otherwise (in interface default method)
   * second bit: is all-compatibility mode or not, 1 - yes, 0 - no
   * </pre>
   *
   * <code>extend .org.jetbrains.kotlin.metadata.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Class,
      java.lang.Integer> jvmClassFlags = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int PACKAGE_MODULE_NAME_FIELD_NUMBER = 101;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Package { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Package,
      java.lang.Integer> packageModuleName = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int PACKAGE_LOCAL_VARIABLE_FIELD_NUMBER = 102;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Package { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Package,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Property>> packageLocalVariable = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.class,
        org.jetbrains.kotlin.metadata.ProtoBuf.Property.getDefaultInstance());
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n(core/metadata.jvm/src/jvm_metadata.pro" +
      "to\022!org.jetbrains.kotlin.metadata.jvm\032#c" +
      "ore/metadata/src/ext_options.proto\032 core" +
      "/metadata/src/metadata.proto\"\224\003\n\020StringT" +
      "ableTypes\022J\n\006record\030\001 \003(\0132:.org.jetbrain" +
      "s.kotlin.metadata.jvm.StringTableTypes.R" +
      "ecord\022\022\n\nlocal_name\030\005 \003(\005\032\237\002\n\006Record\022\020\n\005" +
      "range\030\001 \001(\005:\0011\022\030\n\020predefined_index\030\002 \001(\005" +
      "\022\016\n\006string\030\006 \001(\t\022]\n\toperation\030\003 \001(\0162D.or" +
      "g.jetbrains.kotlin.metadata.jvm.StringTa" +
      "bleTypes.Record.Operation:\004NONE\022\027\n\017subst" +
      "ring_index\030\004 \003(\005\022\024\n\014replace_char\030\005 \003(\005\"K" +
      "\n\tOperation\022\010\n\004NONE\020\000\022\030\n\024INTERNAL_TO_CLA" +
      "SS_ID\020\001\022\024\n\020DESC_TO_CLASS_ID\020\002\032\004:\002\020\002\"<\n\022J" +
      "vmMethodSignature\022\022\n\004name\030\001 \001(\005B\004\230\265\030\001\022\022\n" +
      "\004desc\030\002 \001(\005B\004\230\265\030\001\";\n\021JvmFieldSignature\022\022" +
      "\n\004name\030\001 \001(\005B\004\230\265\030\001\022\022\n\004desc\030\002 \001(\005B\004\230\265\030\001\"\212" +
      "\003\n\024JvmPropertySignature\022C\n\005field\030\001 \001(\01324" +
      ".org.jetbrains.kotlin.metadata.jvm.JvmFi" +
      "eldSignature\022O\n\020synthetic_method\030\002 \001(\01325" +
      ".org.jetbrains.kotlin.metadata.jvm.JvmMe" +
      "thodSignature\022E\n\006getter\030\003 \001(\01325.org.jetb" +
      "rains.kotlin.metadata.jvm.JvmMethodSigna" +
      "ture\022E\n\006setter\030\004 \001(\01325.org.jetbrains.kot" +
      "lin.metadata.jvm.JvmMethodSignature\022N\n\017d" +
      "elegate_method\030\005 \001(\01325.org.jetbrains.kot" +
      "lin.metadata.jvm.JvmMethodSignature:\200\001\n\025" +
      "constructor_signature\022*.org.jetbrains.ko" +
      "tlin.metadata.Constructor\030d \001(\01325.org.je" +
      "tbrains.kotlin.metadata.jvm.JvmMethodSig" +
      "nature:x\n\020method_signature\022\'.org.jetbrai" +
      "ns.kotlin.metadata.Function\030d \001(\01325.org." +
      "jetbrains.kotlin.metadata.jvm.JvmMethodS" +
      "ignature:O\n\030lambda_class_origin_name\022\'.o" +
      "rg.jetbrains.kotlin.metadata.Function\030e " +
      "\001(\005B\004\230\265\030\001:|\n\022property_signature\022\'.org.je" +
      "tbrains.kotlin.metadata.Property\030d \001(\01327" +
      ".org.jetbrains.kotlin.metadata.jvm.JvmPr" +
      "opertySignature:9\n\005flags\022\'.org.jetbrains" +
      ".kotlin.metadata.Property\030e \001(\005:\0010:g\n\017ty" +
      "pe_annotation\022#.org.jetbrains.kotlin.met" +
      "adata.Type\030d \003(\0132).org.jetbrains.kotlin." +
      "metadata.Annotation:3\n\006is_raw\022#.org.jetb" +
      "rains.kotlin.metadata.Type\030e \001(\010:z\n\031type" +
      "_parameter_annotation\022,.org.jetbrains.ko" +
      "tlin.metadata.TypeParameter\030d \003(\0132).org." +
      "jetbrains.kotlin.metadata.Annotation:E\n\021" +
      "class_module_name\022$.org.jetbrains.kotlin" +
      ".metadata.Class\030e \001(\005B\004\230\265\030\001:k\n\024class_loc" +
      "al_variable\022$.org.jetbrains.kotlin.metad" +
      "ata.Class\030f \003(\0132\'.org.jetbrains.kotlin.m" +
      "etadata.Property:P\n\034anonymous_object_ori" +
      "gin_name\022$.org.jetbrains.kotlin.metadata" +
      ".Class\030g \001(\005B\004\230\265\030\001:@\n\017jvm_class_flags\022$." +
      "org.jetbrains.kotlin.metadata.Class\030h \001(" +
      "\005:\0010:I\n\023package_module_name\022&.org.jetbra" +
      "ins.kotlin.metadata.Package\030e \001(\005B\004\230\265\030\001:" +
      "o\n\026package_local_variable\022&.org.jetbrain" +
      "s.kotlin.metadata.Package\030f \003(\0132\'.org.je" +
      "tbrains.kotlin.metadata.PropertyB\022B\013JvmP" +
      "rotoBuf\222\003\002 \003b\010editionsp\350\007"
    };
    descriptor = org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
          org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.getDescriptor(),
          org.jetbrains.kotlin.metadata.ProtoBuf.getDescriptor(),
        });
    internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_descriptor,
        new java.lang.String[] { "Record", "LocalName", });
    internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_descriptor =
      internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_jvm_StringTableTypes_Record_descriptor,
        new java.lang.String[] { "Range", "PredefinedIndex", "String", "Operation", "SubstringIndex", "ReplaceChar", });
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_jvm_JvmMethodSignature_descriptor,
        new java.lang.String[] { "Name", "Desc", });
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_jvm_JvmFieldSignature_descriptor,
        new java.lang.String[] { "Name", "Desc", });
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_metadata_jvm_JvmPropertySignature_descriptor,
        new java.lang.String[] { "Field", "SyntheticMethod", "Getter", "Setter", "DelegateMethod", });
    constructorSignature.internalInit(descriptor.getExtensions().get(0));
    methodSignature.internalInit(descriptor.getExtensions().get(1));
    lambdaClassOriginName.internalInit(descriptor.getExtensions().get(2));
    propertySignature.internalInit(descriptor.getExtensions().get(3));
    flags.internalInit(descriptor.getExtensions().get(4));
    typeAnnotation.internalInit(descriptor.getExtensions().get(5));
    isRaw.internalInit(descriptor.getExtensions().get(6));
    typeParameterAnnotation.internalInit(descriptor.getExtensions().get(7));
    classModuleName.internalInit(descriptor.getExtensions().get(8));
    classLocalVariable.internalInit(descriptor.getExtensions().get(9));
    anonymousObjectOriginName.internalInit(descriptor.getExtensions().get(10));
    jvmClassFlags.internalInit(descriptor.getExtensions().get(11));
    packageModuleName.internalInit(descriptor.getExtensions().get(12));
    packageLocalVariable.internalInit(descriptor.getExtensions().get(13));
    descriptor.resolveAllFeaturesImmutable();
    org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.getDescriptor();
    org.jetbrains.kotlin.metadata.ProtoBuf.getDescriptor();
    org.jetbrains.kotlin.protobuf.ExtensionRegistry registry =
        org.jetbrains.kotlin.protobuf.ExtensionRegistry.newInstance();
    registry.add(org.jetbrains.kotlin.metadata.ExtOptionsProtoBuf.stringIdInTable);
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}