== A ==
class A {
    val x: Int
    var y: Int
    val z: Int
    val v = -1

    constructor() {
        x = 1
        y = 2
    }
    constructor(a: Int, b: Int = 3) {
        x = a
        y = x
    }

    //anonymous
    init {
        z = 8
    }

    constructor(a: String, b: Int = 4): this() {
        y = 5
    }
    constructor(a: Double, b: Int = 6): this(a.toInt()) {
        y = 7
    }

    // anonymous
    init {
        y = 9
    }
}
---------------------
L0:
  1 <START>
L1:
    <END>      NEXT:[<SINK>]
error:
-   <ERROR>    PREV:[]
sink:
    <SINK>     PREV:[<END>]
=====================
== A ==
constructor() {
        x = 1
        y = 2
    }
---------------------
L0:
  1 <START>
    mark()
    call(, <init>) -> <v0>
    v(val x: Int)
    v(var y: Int)
    v(val z: Int)
    v(val v = -1)
    r(1) -> <v1>
    mark(-1)
    call(-1, unaryMinus|<v1>) -> <v2>
    w(v|<v2>)
  2 mark({ z = 8 })
    magic[IMPLICIT_RECEIVER](z) -> <v3>
    r(8) -> <v4>
    w(z|<v3>, <v4>)
    mark({ y = 9 })
    magic[IMPLICIT_RECEIVER](y) -> <v6>
    r(9) -> <v7>
    w(y|<v6>, <v7>)
    mark({ x = 1 y = 2 })
    magic[IMPLICIT_RECEIVER](x) -> <v9>
    r(1) -> <v10>
    w(x|<v9>, <v10>)
    magic[IMPLICIT_RECEIVER](y) -> <v11>
    r(2) -> <v12>
    w(y|<v11>, <v12>)
L1:
  1 <END>                                   NEXT:[<SINK>]
error:
-   <ERROR>                                 PREV:[]
sink:
    <SINK>                                  PREV:[<END>]
=====================
== A ==
constructor(a: Int, b: Int = 3) {
        x = a
        y = x
    }
---------------------
L0:
  1 <START>
    v(a: Int)
    magic[FAKE_INITIALIZER](a: Int) -> <v0>
    w(a|<v0>)
    v(b: Int = 3)
    jmp?(L2)                                       NEXT:[magic[FAKE_INITIALIZER](b: Int = 3) -> <v2>, r(3) -> <v1>]
    r(3) -> <v1>
L2 [after default value for parameter b]:
    magic[FAKE_INITIALIZER](b: Int = 3) -> <v2>    PREV:[jmp?(L2), r(3) -> <v1>]
    merge(b: Int = 3|<v1>, <v2>) -> <v3>
    w(b|<v3>)
    mark()
    call(, <init>) -> <v4>
    v(val x: Int)
    v(var y: Int)
    v(val z: Int)
    v(val v = -1)
    r(1) -> <v5>
    mark(-1)
    call(-1, unaryMinus|<v5>) -> <v6>
    w(v|<v6>)
  2 mark({ z = 8 })
    magic[IMPLICIT_RECEIVER](z) -> <v7>
    r(8) -> <v8>
    w(z|<v7>, <v8>)
    mark({ y = 9 })
    magic[IMPLICIT_RECEIVER](y) -> <v10>
    r(9) -> <v11>
    w(y|<v10>, <v11>)
    mark({ x = a y = x })
    magic[IMPLICIT_RECEIVER](x) -> <v13>
    r(a) -> <v14>
    w(x|<v13>, <v14>)
    magic[IMPLICIT_RECEIVER](y) -> <v15>
    magic[IMPLICIT_RECEIVER](x) -> <v16>
    r(x|<v16>) -> <v17>
    w(y|<v15>, <v17>)
L1:
  1 <END>                                          NEXT:[<SINK>]
error:
-   <ERROR>                                        PREV:[]
sink:
    <SINK>                                         PREV:[<END>]
=====================
== A ==
constructor(a: String, b: Int = 4): this() {
        y = 5
    }
---------------------
L0:
  1 <START>
    v(a: String)
    magic[FAKE_INITIALIZER](a: String) -> <v0>
    w(a|<v0>)
    v(b: Int = 4)
    jmp?(L2)                                       NEXT:[magic[FAKE_INITIALIZER](b: Int = 4) -> <v2>, r(4) -> <v1>]
    r(4) -> <v1>
L2 [after default value for parameter b]:
    magic[FAKE_INITIALIZER](b: Int = 4) -> <v2>    PREV:[jmp?(L2), r(4) -> <v1>]
    merge(b: Int = 4|<v1>, <v2>) -> <v3>
    w(b|<v3>)
    mark(this())
    call(this(), <init>) -> <v4>
  2 mark({ y = 5 })
    magic[IMPLICIT_RECEIVER](y) -> <v5>
    r(5) -> <v6>
    w(y|<v5>, <v6>)
L1:
  1 <END>                                          NEXT:[<SINK>]
error:
-   <ERROR>                                        PREV:[]
sink:
    <SINK>                                         PREV:[<END>]
=====================
== A ==
constructor(a: Double, b: Int = 6): this(a.toInt()) {
        y = 7
    }
---------------------
L0:
  1 <START>
    v(a: Double)
    magic[FAKE_INITIALIZER](a: Double) -> <v0>
    w(a|<v0>)
    v(b: Int = 6)
    jmp?(L2)                                       NEXT:[magic[FAKE_INITIALIZER](b: Int = 6) -> <v2>, r(6) -> <v1>]
    r(6) -> <v1>
L2 [after default value for parameter b]:
    magic[FAKE_INITIALIZER](b: Int = 6) -> <v2>    PREV:[jmp?(L2), r(6) -> <v1>]
    merge(b: Int = 6|<v1>, <v2>) -> <v3>
    w(b|<v3>)
    mark(a.toInt())
    r(a) -> <v4>
    mark(toInt())
    call(toInt(), toInt|<v4>) -> <v5>
    mark(this(a.toInt()))
    call(this(a.toInt()), <init>|<v5>) -> <v6>
  2 mark({ y = 7 })
    magic[IMPLICIT_RECEIVER](y) -> <v7>
    r(7) -> <v8>
    w(y|<v7>, <v8>)
L1:
  1 <END>                                          NEXT:[<SINK>]
error:
-   <ERROR>                                        PREV:[]
sink:
    <SINK>                                         PREV:[<END>]
=====================
