//
// Source
// ------------------------------------------

import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember


@Composable
fun <T> loadResourceInternal(
    key: String,
    pendingResource: T? = null,
    failedResource: T? = null
): Boolean {
    val deferred = remember(key, pendingResource, failedResource) {
        123
    }
    return deferred > 10
}

//
// Transformed IR
// ------------------------------------------

@Composable
fun <T> loadResourceInternal(key: String, pendingResource: T?, failedResource: T?, %composer: Composer?, %changed: Int, %default: Int): Boolean {
  sourceInformationMarkerStart(%composer, <>, "C(loadResourceInternal)P(1,2)<rememb...>:Test.kt")
  if (%default and 0b0010 != 0) {
    pendingResource = null
  }
  if (%default and 0b0100 != 0) {
    failedResource = null
  }
  if (isTraceInProgress()) {
    traceEventStart(<>, %changed, -1, <>)
  }
  val deferred = <block>{
    sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
    val tmp1_group = %composer.cache(%changed and 0b1110 xor 0b0110 > 4 && %composer.changed(key) || %changed and 0b0110 == 0b0100 or %changed and 0b01110000 xor 0b00110000 > 32 && %composer.changed(pendingResource) || %changed and 0b00110000 == 0b00100000 or %changed and 0b001110000000 xor 0b000110000000 > 256 && %composer.changed(failedResource) || %changed and 0b000110000000 == 0b000100000000) {
      123
    }
    sourceInformationMarkerEnd(%composer)
    tmp1_group
  }
  val tmp0 = deferred > 10
  if (isTraceInProgress()) {
    traceEventEnd()
  }
  sourceInformationMarkerEnd(%composer)
  return tmp0
}
