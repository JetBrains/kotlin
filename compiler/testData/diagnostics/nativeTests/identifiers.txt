package

package totally {

    package totally.normal {

        package totally.normal.pkg {
            public val `check{property`: kotlin.Int = 1
            public val `check}delegated}property`: kotlin.Any?
            public val normalDelegatedProperty: kotlin.Any?
            public val normalProperty: kotlin.Int = 2
            public fun `check#`(): kotlin.Unit
            public fun `check%`(): kotlin.Unit
            public fun `check&`(): kotlin.Unit
            public fun `check(function`(): kotlin.Unit
            public fun `check*`(): kotlin.Unit
            public fun `check?`(): kotlin.Unit
            public fun `check@`(): kotlin.Unit
            public fun </*0*/ `check<type<parameter`, /*1*/ normalTypeParameter> checkTypeParameter(): kotlin.Unit
            public fun checkValueParameter(/*0*/ `check/parameter`: kotlin.Int): kotlin.Unit
            public fun `check|`(): kotlin.Unit
            public fun `check~`(): kotlin.Unit
            public fun `checkÂ§`(): kotlin.Unit
            public fun normalFunction(): kotlin.Unit

            public final class `Check.Class` {
                public constructor `Check.Class`()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public object `Check;Object` {
                private constructor `Check;Object`()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public final enum class `Check>Enum>Entry` : kotlin.Enum<totally.normal.pkg.`Check>Enum>Entry`> {
                enum entry `CHECK:ENUM:ENTRY`

                private constructor `Check>Enum>Entry`()
                @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
                public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
                public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: totally.normal.pkg.`Check>Enum>Entry`): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

                // Static members
                public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<totally.normal.pkg.`Check>Enum>Entry`>
                public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): totally.normal.pkg.`Check>Enum>Entry`
                public final /*synthesized*/ fun values(): kotlin.Array<totally.normal.pkg.`Check>Enum>Entry`>
            }

            public object Delegate {
                private constructor Delegate()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final operator fun getValue(/*0*/ thisRef: kotlin.Any?, /*1*/ property: kotlin.reflect.KProperty<*>): kotlin.Any?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public final class NormalClass {
                public constructor NormalClass()
                public final fun `check$member`(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public object NormalObject {
                private constructor NormalObject()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public final data class Pair {
                public constructor Pair(/*0*/ first: kotlin.Int, /*1*/ `next,one`: kotlin.Int)
                public final val first: kotlin.Int
                public final val `next,one`: kotlin.Int
                public final operator /*synthesized*/ fun component1(): kotlin.Int
                public final operator /*synthesized*/ fun component2(): kotlin.Int
                public final /*synthesized*/ fun copy(/*0*/ first: kotlin.Int = ..., /*1*/ `next,one`: kotlin.Int = ...): totally.normal.pkg.Pair
                public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
            }
            public typealias `check\typealias` = kotlin.Any
        }
    }
}

