FILE fqName:<root> fileName:/coercionToUnitForNestedWhen.kt
  FUN name:consumeRestOfQuotedSequence visibility:public modality:FINAL returnType:kotlin.Unit
    VALUE_PARAMETER kind:ExtensionReceiver name:<this> index:0 type:java.io.Reader
    VALUE_PARAMETER kind:Regular name:sb index:1 type:java.lang.StringBuilder
    VALUE_PARAMETER kind:Regular name:quote index:2 type:kotlin.Char
    BLOCK_BODY
      VAR name:ch type:kotlin.Char? [var]
        CALL 'private final fun nextChar (<this>: java.io.Reader): kotlin.Char? declared in <root>' type=kotlin.Char? origin=null
          ARG <this>: GET_VAR '<this>: java.io.Reader declared in <root>.consumeRestOfQuotedSequence' type=java.io.Reader origin=IMPLICIT_ARGUMENT
      WHILE label=null origin=WHILE_LOOP
        condition: WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
              ARG <this>: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                ARG arg0: GET_VAR 'var ch: kotlin.Char? declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Char? origin=null
                ARG arg1: CONST Null type=kotlin.Nothing? value=null
            then: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
              ARG <this>: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                ARG arg0: GET_VAR 'var ch: kotlin.Char? declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Char? origin=null
                ARG arg1: GET_VAR 'quote: kotlin.Char declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Char origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
        body: BLOCK type=kotlin.Unit origin=null
          TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
            WHEN type=java.lang.StringBuilder? origin=IF
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  ARG arg0: GET_VAR 'var ch: kotlin.Char? declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Char? origin=null
                  ARG arg1: CONST Char type=kotlin.Char value='\\'
                then: BLOCK type=@[FlexibleNullability] java.lang.StringBuilder? origin=SAFE_CALL
                  VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Char? [val]
                    CALL 'private final fun nextChar (<this>: java.io.Reader): kotlin.Char? declared in <root>' type=kotlin.Char? origin=null
                      ARG <this>: GET_VAR '<this>: java.io.Reader declared in <root>.consumeRestOfQuotedSequence' type=java.io.Reader origin=IMPLICIT_ARGUMENT
                  WHEN type=@[FlexibleNullability] java.lang.StringBuilder? origin=null
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: GET_VAR 'val tmp_0: kotlin.Char? declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Char? origin=null
                        ARG arg1: CONST Null type=kotlin.Nothing? value=null
                      then: CONST Null type=kotlin.Nothing? value=null
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CALL 'public final fun let <T, R> (<this>: T of kotlin.let, block: kotlin.Function1<T of kotlin.let, R of kotlin.let>): R of kotlin.let declared in kotlin' type=@[FlexibleNullability] java.lang.StringBuilder? origin=null
                        TYPE_ARG T: kotlin.Char
                        TYPE_ARG R: @[FlexibleNullability] java.lang.StringBuilder?
                        ARG <this>: GET_VAR 'val tmp_0: kotlin.Char? declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Char? origin=null
                        ARG block: FUN_EXPR type=kotlin.Function1<kotlin.Char, @[FlexibleNullability] java.lang.StringBuilder?> origin=LAMBDA
                          FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:@[FlexibleNullability] java.lang.StringBuilder?
                            VALUE_PARAMETER kind:Regular name:it index:0 type:kotlin.Char
                            BLOCK_BODY
                              RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: kotlin.Char): @[FlexibleNullability] java.lang.StringBuilder? declared in <root>.consumeRestOfQuotedSequence'
                                CALL 'public open fun append (p0: kotlin.Char): @[FlexibleNullability] java.lang.StringBuilder? declared in java.lang.StringBuilder' type=@[FlexibleNullability] java.lang.StringBuilder? origin=null
                                  ARG <this>: GET_VAR 'sb: java.lang.StringBuilder declared in <root>.consumeRestOfQuotedSequence' type=java.lang.StringBuilder origin=null
                                  ARG p0: GET_VAR 'it: kotlin.Char declared in <root>.consumeRestOfQuotedSequence.<anonymous>' type=kotlin.Char origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CALL 'public open fun append (p0: kotlin.Char): @[FlexibleNullability] java.lang.StringBuilder? declared in java.lang.StringBuilder' type=@[FlexibleNullability] java.lang.StringBuilder? origin=null
                  ARG <this>: GET_VAR 'sb: java.lang.StringBuilder declared in <root>.consumeRestOfQuotedSequence' type=java.lang.StringBuilder origin=null
                  ARG p0: GET_VAR 'var ch: kotlin.Char? declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Char? origin=null
          SET_VAR 'var ch: kotlin.Char? declared in <root>.consumeRestOfQuotedSequence' type=kotlin.Unit origin=EQ
            CALL 'private final fun nextChar (<this>: java.io.Reader): kotlin.Char? declared in <root>' type=kotlin.Char? origin=null
              ARG <this>: GET_VAR '<this>: java.io.Reader declared in <root>.consumeRestOfQuotedSequence' type=java.io.Reader origin=IMPLICIT_ARGUMENT
  FUN name:nextChar visibility:private modality:FINAL returnType:kotlin.Char?
    VALUE_PARAMETER kind:ExtensionReceiver name:<this> index:0 type:java.io.Reader
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='private final fun nextChar (<this>: java.io.Reader): kotlin.Char? declared in <root>'
        BLOCK type=kotlin.Char? origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:kotlin.Int? [val]
            CALL 'public final fun takeUnless <T> (<this>: T of kotlin.takeUnless, predicate: kotlin.Function1<T of kotlin.takeUnless, kotlin.Boolean>): T of kotlin.takeUnless? declared in kotlin' type=kotlin.Int? origin=null
              TYPE_ARG T: kotlin.Int
              ARG <this>: CALL 'public open fun read (): kotlin.Int declared in java.io.Reader' type=kotlin.Int origin=null
                ARG <this>: GET_VAR '<this>: java.io.Reader declared in <root>.nextChar' type=java.io.Reader origin=IMPLICIT_ARGUMENT
              ARG predicate: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Boolean> origin=LAMBDA
                FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                  VALUE_PARAMETER kind:Regular name:it index:0 type:kotlin.Int
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: kotlin.Int): kotlin.Boolean declared in <root>.nextChar'
                      CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: GET_VAR 'it: kotlin.Int declared in <root>.nextChar.<anonymous>' type=kotlin.Int origin=null
                        ARG arg1: CONST Int type=kotlin.Int value=-1
          WHEN type=kotlin.Char? origin=null
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                ARG arg0: GET_VAR 'val tmp_1: kotlin.Int? declared in <root>.nextChar' type=kotlin.Int? origin=null
                ARG arg1: CONST Null type=kotlin.Nothing? value=null
              then: CONST Null type=kotlin.Nothing? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public open fun toChar (): kotlin.Char declared in kotlin.Int' type=kotlin.Char origin=null
                ARG <this>: GET_VAR 'val tmp_1: kotlin.Int? declared in <root>.nextChar' type=kotlin.Int? origin=null
  PROPERTY name:BACKSLASH visibility:private modality:FINAL [const,val]
    FIELD PROPERTY_BACKING_FIELD name:BACKSLASH type:kotlin.Char visibility:private [final,static]
      EXPRESSION_BODY
        CONST Char type=kotlin.Char value='\\'
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-BACKSLASH> visibility:private modality:FINAL returnType:kotlin.Char
      correspondingProperty: PROPERTY name:BACKSLASH visibility:private modality:FINAL [const,val]
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun <get-BACKSLASH> (): kotlin.Char declared in <root>'
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:BACKSLASH type:kotlin.Char visibility:private [final,static]' type=kotlin.Char origin=null
