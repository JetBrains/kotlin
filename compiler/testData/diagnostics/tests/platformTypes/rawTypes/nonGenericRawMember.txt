package

public val strList: kotlin.collections.List<kotlin.String>
public fun main(): kotlin.Unit

public/*package*/ open class A</*0*/ T : kotlin.Any!> {
    public/*package*/ constructor A</*0*/ T : kotlin.Any!>()
    public/*package*/ final var b: B!
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public/*package*/ open class B {
    public/*package*/ constructor B()
    public/*package*/ open fun bar(/*0*/ x: kotlin.collections.(Mutable)List<kotlin.Double!>!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public/*package*/ open class Test {
    public/*package*/ constructor Test()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public/*package*/ open class RawADerived : A<(raw) kotlin.Any!> {
        public/*package*/ constructor RawADerived()
        public/*package*/ final override /*1*/ /*fake_override*/ var b: B!
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    // Static members
    public/*package*/ final var rawAField: A<(raw) kotlin.Any!>!
}
