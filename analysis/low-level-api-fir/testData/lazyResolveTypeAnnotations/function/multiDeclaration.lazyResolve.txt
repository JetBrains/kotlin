RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun foo(): <implicit> { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun foo(): <implicit> { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public? final? [ResolvedTo(COMPANION_GENERATION)] fun foo(): <implicit> { LAZY_BLOCK }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public? final? [ResolvedTo(SUPER_TYPES)] fun foo(): <implicit> { LAZY_BLOCK }

TYPES:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public? final? [ResolvedTo(TYPES)] fun foo(): <implicit> { LAZY_BLOCK }

STATUS:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public final [ResolvedTo(STATUS)] fun foo(): <implicit> { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun foo(): <implicit> { LAZY_BLOCK }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final? [ResolvedTo(RAW_FIR)] annotation class Anno : R|kotlin/Annotation| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Anno.position] position: String): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val position: String = R|<local>/position|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Anno] get(): String

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final? data [ResolvedTo(RAW_FIR)] class Pair : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.a] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?, [ResolvedTo(RAW_FIR)] [CorrespondingProperty=util/Pair.b] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final? [ResolvedTo(RAW_FIR)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Pair] get(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component1(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>?

        public? final operator [ResolvedTo(RAW_FIR)] fun component2(): @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>?

        public? final [ResolvedTo(RAW_FIR)] fun copy([ResolvedTo(RAW_FIR)] a: @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Collection<@Anno[Unresolved](LAZY_EXPRESSION) String>>? = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(RAW_FIR)] b: @Anno[Unresolved](LAZY_EXPRESSION) Array<@Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Int>>? = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public? final? [ResolvedTo(RAW_FIR)] fun bar(): @Anno[Unresolved](LAZY_EXPRESSION) List<@Anno[Unresolved](LAZY_EXPRESSION) Pair> { LAZY_BLOCK }
    public? final? [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> withLambda([ResolvedTo(RAW_FIR)] lambda: ( (Pair) -> T )): T { LAZY_BLOCK }
    public final [ResolvedTo(CONTRACTS)] fun foo(): <implicit> { LAZY_BLOCK }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=util/Anno.position] position: R|kotlin/String|): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final data [ResolvedTo(CONTRACTS)] class Pair : R|kotlin/Any| {
        public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] constructor([ResolvedTo(CONTRACTS)] [CorrespondingProperty=util/Pair.a] a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?|, [ResolvedTo(CONTRACTS)] [CorrespondingProperty=util/Pair.b] b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/a|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?|

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/b|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component1(): R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component2(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|

        public final [ResolvedTo(STATUS)] fun copy([ResolvedTo(STATUS)] a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(STATUS)] b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public final [ResolvedTo(CONTRACTS)] fun bar(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair>| {
        ^bar Null(null)!!
    }
    public final [ResolvedTo(CONTRACTS)] fun <[ResolvedTo(CONTRACTS)] T> withLambda([ResolvedTo(CONTRACTS)] lambda: R|(util/Pair) -> T|): R|T| {
    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [PostponedSymbolsForAnnotationResolutionKey=[FirNamedFunctionSymbol util/bar, FirConstructorSymbol util/Pair.Pair]] fun foo(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| {
        ^foo R|util/withLambda|<R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(RAW_FIR)] <unused var>: R|util/Pair|): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| <inline=NoInline>  {
            [ResolvedTo(RAW_FIR)] lval prop: R|kotlin/String| = String(str)
            @R|util/Anno|[Types](position = <strcat>(String(near for ), R|<local>/prop|))  {
                [ResolvedTo(RAW_FIR)] lval <iterator>: R|kotlin/collections/IntIterator| = Int(1).R|kotlin/Int.rangeTo|(Int(100)).R|kotlin/ranges/IntProgression.iterator|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/IntIterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval i: R|kotlin/Int| = R|<local>/<iterator>|.R|kotlin/collections/IntIterator.next|()
                     {
                    }

                }

            }

             {
                [ResolvedTo(RAW_FIR)] lval <iterator>: R|kotlin/collections/Iterator<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair>| = R|util/bar|().R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair>|>|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(second for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval <destruct>: R|@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair|>|()
                    [ResolvedTo(RAW_FIR)] lval x: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                    @R|util/Anno|[Types](position = <strcat>(String(destructuring in for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval y: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                     {
                    }

                }

            }

            R|util/withLambda|<R|kotlin/Unit|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(RAW_FIR)] <destruct>: R|util/Pair|): R|kotlin/Unit| <inline=NoInline>  {
                @R|util/Anno|[Types](position = <strcat>(String(lambda a ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                @R|util/Anno|[Types](position = <strcat>(String(lambda b ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                 {
                    ^@withLambda Unit
                }

            }
            )
            @R|util/Anno|[Types](position = <strcat>(String(destr ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval <destruct>: R|util/Pair| = R|util/Pair.Pair|(Null(null), Null(null))
            @R|util/Anno|[Types](position = <strcat>(String(a ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
            @R|util/Anno|[Types](position = <strcat>(String(b ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
            ^ R|<local>/b|
        }
        )
    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=util/Anno.position] position: R|kotlin/String|): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public? final? const [ResolvedTo(RAW_FIR)] val constant: <implicit> = LAZY_EXPRESSION
        public? [ResolvedTo(RAW_FIR)] get(): <implicit>
    public final data [ResolvedTo(CONTRACTS)] class Pair : R|kotlin/Any| {
        public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] constructor([ResolvedTo(CONTRACTS)] [CorrespondingProperty=util/Pair.a] a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?|, [ResolvedTo(CONTRACTS)] [CorrespondingProperty=util/Pair.b] b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/a|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?|

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/b|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component1(): R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component2(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|

        public final [ResolvedTo(STATUS)] fun copy([ResolvedTo(STATUS)] a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(STATUS)] b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public final [ResolvedTo(CONTRACTS)] fun bar(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair>| {
        ^bar Null(null)!!
    }
    public final [ResolvedTo(CONTRACTS)] fun <[ResolvedTo(CONTRACTS)] T> withLambda([ResolvedTo(CONTRACTS)] lambda: R|(util/Pair) -> T|): R|T| {
    }
    public final [ResolvedTo(CONSTANT_EVALUATION)] [PostponedSymbolsForAnnotationResolutionKey=[FirNamedFunctionSymbol util/bar, FirConstructorSymbol util/Pair.Pair]] fun foo(): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| {
        ^foo R|util/withLambda|<R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(RAW_FIR)] <unused var>: R|util/Pair|): R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| <inline=NoInline>  {
            [ResolvedTo(RAW_FIR)] lval prop: R|kotlin/String| = String(str)
            @R|util/Anno|[Types](position = <strcat>(String(near for ), R|<local>/prop|))  {
                [ResolvedTo(RAW_FIR)] lval <iterator>: R|kotlin/collections/IntIterator| = Int(1).R|kotlin/Int.rangeTo|(Int(100)).R|kotlin/ranges/IntProgression.iterator|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/IntIterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval i: R|kotlin/Int| = R|<local>/<iterator>|.R|kotlin/collections/IntIterator.next|()
                     {
                    }

                }

            }

             {
                [ResolvedTo(RAW_FIR)] lval <iterator>: R|kotlin/collections/Iterator<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair>| = R|util/bar|().R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair>|>|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(second for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval <destruct>: R|@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|@R|util/Anno|(<strcat>(String(b nested type ), constant#))  util/Pair|>|()
                    [ResolvedTo(RAW_FIR)] lval x: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                    @R|util/Anno|[Types](position = <strcat>(String(destructuring in for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval y: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                     {
                    }

                }

            }

            R|util/withLambda|<R|kotlin/Unit|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(RAW_FIR)] <destruct>: R|util/Pair|): R|kotlin/Unit| <inline=NoInline>  {
                @R|util/Anno|[Types](position = <strcat>(String(lambda a ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                @R|util/Anno|[Types](position = <strcat>(String(lambda b ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                 {
                    ^@withLambda Unit
                }

            }
            )
            @R|util/Anno|[Types](position = <strcat>(String(destr ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval <destruct>: R|util/Pair| = R|util/Pair.Pair|(Null(null), Null(null))
            @R|util/Anno|[Types](position = <strcat>(String(a ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval a: R|@R|util/Anno|(<strcat>(String(a type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(a nested type ), constant#))  kotlin/collections/Collection<@R|util/Anno|(<strcat>(String(a nested nested type ), constant#))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
            @R|util/Anno|[Types](position = <strcat>(String(b ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval b: R|@R|util/Anno|(<strcat>(String(b type ), constant#))  kotlin/Array<@R|util/Anno|(<strcat>(String(b nested type ), constant#))  kotlin/collections/List<@R|util/Anno|(<strcat>(String(b nested nested type ), constant#))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
            ^ R|<local>/b|
        }
        )
    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=util/Anno.position] position: R|kotlin/String|): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val constant: R|kotlin/String| = String(s)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/String|
    public final data [ResolvedTo(ANNOTATION_ARGUMENTS)] class Pair : R|kotlin/Any| {
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Pair] constructor([ResolvedTo(ANNOTATION_ARGUMENTS)] [CorrespondingProperty=util/Pair.a] a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|, [ResolvedTo(ANNOTATION_ARGUMENTS)] [CorrespondingProperty=util/Pair.b] b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/a|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/b|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component1(): R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component2(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|

        public final [ResolvedTo(STATUS)] fun copy([ResolvedTo(STATUS)] a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(STATUS)] b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun bar(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>| {
        ^bar Null(null)!!
    }
    public final [ResolvedTo(CONTRACTS)] fun <[ResolvedTo(CONTRACTS)] T> withLambda([ResolvedTo(CONTRACTS)] lambda: R|(util/Pair) -> T|): R|T| {
    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun foo(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| {
        ^foo R|util/withLambda|<R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(RAW_FIR)] <unused var>: R|util/Pair|): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| <inline=NoInline>  {
            [ResolvedTo(RAW_FIR)] lval prop: R|kotlin/String| = String(str)
            @R|util/Anno|[Types](position = <strcat>(String(near for ), R|<local>/prop|))  {
                [ResolvedTo(RAW_FIR)] lval <iterator>: R|kotlin/collections/IntIterator| = Int(1).R|kotlin/Int.rangeTo|(Int(100)).R|kotlin/ranges/IntProgression.iterator|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/IntIterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval i: R|kotlin/Int| = R|<local>/<iterator>|.R|kotlin/collections/IntIterator.next|()
                     {
                    }

                }

            }

             {
                [ResolvedTo(RAW_FIR)] lval <iterator>: R|kotlin/collections/Iterator<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>| = R|util/bar|().R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>|>|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(second for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval <destruct>: R|@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair|>|()
                    [ResolvedTo(RAW_FIR)] lval x: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                    @R|util/Anno|[Types](position = <strcat>(String(destructuring in for ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval y: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                     {
                    }

                }

            }

            R|util/withLambda|<R|kotlin/Unit|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(RAW_FIR)] <destruct>: R|util/Pair|): R|kotlin/Unit| <inline=NoInline>  {
                @R|util/Anno|[Types](position = <strcat>(String(lambda a ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                @R|util/Anno|[Types](position = <strcat>(String(lambda b ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                 {
                    ^@withLambda Unit
                }

            }
            )
            @R|util/Anno|[Types](position = <strcat>(String(destr ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval <destruct>: R|util/Pair| = R|util/Pair.Pair|(Null(null), Null(null))
            @R|util/Anno|[Types](position = <strcat>(String(a ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
            @R|util/Anno|[Types](position = <strcat>(String(b ), R|<local>/prop|)) [ResolvedTo(RAW_FIR)] lval b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
            ^ R|<local>/b|
        }
        )
    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] multiDeclaration.kt
    public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor([ResolvedTo(STATUS)] [CorrespondingProperty=util/Anno.position] position: R|kotlin/String|): R|util/Anno| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] val constant: R|kotlin/String| = String(s)
        public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] get(): R|kotlin/String|
    public final data [ResolvedTo(ANNOTATION_ARGUMENTS)] class Pair : R|kotlin/Any| {
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=Pair] constructor([ResolvedTo(ANNOTATION_ARGUMENTS)] [CorrespondingProperty=util/Pair.a] a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|, [ResolvedTo(ANNOTATION_ARGUMENTS)] [CorrespondingProperty=util/Pair.b] b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|): R|util/Pair| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/a|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|

        public final [ResolvedTo(CONTRACTS)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/b|
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component1(): R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|

        public final operator [ResolvedTo(CONTRACTS)] fun component2(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|

        public final [ResolvedTo(STATUS)] fun copy([ResolvedTo(STATUS)] a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(STATUS)] b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun bar(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>| {
        ^bar Null(null)!!
    }
    public final [ResolvedTo(CONTRACTS)] fun <[ResolvedTo(CONTRACTS)] T> withLambda([ResolvedTo(CONTRACTS)] lambda: R|(util/Pair) -> T|): R|T| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| {
        ^foo R|util/withLambda|<R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|>(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(BODY_RESOLVE)] <unused var>: R|util/Pair|): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| <inline=NoInline>  {
            [ResolvedTo(BODY_RESOLVE)] lval prop: R|kotlin/String| = String(str)
            @R|util/Anno|[Types](position = <strcat>(String(near for ), R|<local>/prop|))  {
                [ResolvedTo(BODY_RESOLVE)] lval <iterator>: R|kotlin/collections/IntIterator| = Int(1).R|kotlin/Int.rangeTo|(Int(100)).R|kotlin/ranges/IntProgression.iterator|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/IntIterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(for ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval i: R|kotlin/Int| = R|<local>/<iterator>|.R|kotlin/collections/IntIterator.next|()
                     {
                    }

                }

            }

             {
                [ResolvedTo(BODY_RESOLVE)] lval <iterator>: R|kotlin/collections/Iterator<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>| = R|util/bar|().R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>|>|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(second for ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval <destruct>: R|@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair|>|()
                    [ResolvedTo(BODY_RESOLVE)] lval x: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                    @R|util/Anno|[Types](position = <strcat>(String(destructuring in for ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval y: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                     {
                    }

                }

            }

            R|util/withLambda|<R|kotlin/Unit|>(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(BODY_RESOLVE)] <destruct>: R|util/Pair|): R|kotlin/Unit| <inline=NoInline>  {
                @R|util/Anno|[Types](position = <strcat>(String(lambda a ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                @R|util/Anno|[Types](position = <strcat>(String(lambda b ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                 {
                    ^@withLambda Unit
                }

            }
            )
            @R|util/Anno|[Types](position = <strcat>(String(destr ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval <destruct>: R|util/Pair| = R|util/Pair.Pair|(Null(null), Null(null))
            @R|util/Anno|[Types](position = <strcat>(String(a ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
            @R|util/Anno|[Types](position = <strcat>(String(b ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
            ^ R|<local>/b|
        }
        )
    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] multiDeclaration.kt
    public final [ResolvedTo(BODY_RESOLVE)] annotation class Anno : R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=util/Anno.position] position: R|kotlin/String|): R|util/Anno| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val position: R|kotlin/String| = R|<local>/position|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Anno] get(): R|kotlin/String|

    }
    public final const [ResolvedTo(BODY_RESOLVE)] [EvaluatedValue=String(s)] val constant: R|kotlin/String| = String(s)
        public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/String|
    public final data [ResolvedTo(BODY_RESOLVE)] class Pair : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Pair] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=util/Pair.a] a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|, [ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=util/Pair.b] b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|): R|util/Pair| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=util/Pair.component1, IsFromPrimaryConstructor=true] val a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/a|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|

        public final [ResolvedTo(BODY_RESOLVE)] [ComponentFunctionSymbolKey=util/Pair.component2, IsFromPrimaryConstructor=true] val b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/b|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Pair] get(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component1(): R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun component2(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|

        public final [ResolvedTo(BODY_RESOLVE)] fun copy([ResolvedTo(BODY_RESOLVE)] a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = this@R|util/Pair|.R|util/Pair.a|, [ResolvedTo(BODY_RESOLVE)] b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = this@R|util/Pair|.R|util/Pair.b|): R|util/Pair|

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun bar(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>| {
        ^bar Null(null)!!
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun <[ResolvedTo(BODY_RESOLVE)] T> withLambda([ResolvedTo(BODY_RESOLVE)] lambda: R|(util/Pair) -> T|): R|T| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun foo(): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| {
        ^foo R|util/withLambda|<R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?|>(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(BODY_RESOLVE)] <unused var>: R|util/Pair|): R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| <inline=NoInline>  {
            [ResolvedTo(BODY_RESOLVE)] lval prop: R|kotlin/String| = String(str)
            @R|util/Anno|[Types](position = <strcat>(String(near for ), R|<local>/prop|))  {
                [ResolvedTo(BODY_RESOLVE)] lval <iterator>: R|kotlin/collections/IntIterator| = Int(1).R|kotlin/Int.rangeTo|(Int(100)).R|kotlin/ranges/IntProgression.iterator|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/IntIterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(for ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval i: R|kotlin/Int| = R|<local>/<iterator>|.R|kotlin/collections/IntIterator.next|()
                     {
                    }

                }

            }

             {
                [ResolvedTo(BODY_RESOLVE)] lval <iterator>: R|kotlin/collections/Iterator<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>| = R|util/bar|().R|SubstitutionOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair>|>|()
                while(R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
                    @R|util/Anno|[Types](position = <strcat>(String(second for ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval <destruct>: R|@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair| = R|<local>/<iterator>|.R|SubstitutionOverride<kotlin/collections/Iterator.next: R|@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  util/Pair|>|()
                    [ResolvedTo(BODY_RESOLVE)] lval x: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                    @R|util/Anno|[Types](position = <strcat>(String(destructuring in for ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval y: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                     {
                    }

                }

            }

            R|util/withLambda|<R|kotlin/Unit|>(<L> = [ResolvedTo(BODY_RESOLVE)] [MatchingParameterFunctionTypeKey=kotlin/Function1<util/Pair, T>] withLambda@fun <anonymous>([ResolvedTo(BODY_RESOLVE)] <destruct>: R|util/Pair|): R|kotlin/Unit| <inline=NoInline>  {
                @R|util/Anno|[Types](position = <strcat>(String(lambda a ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
                @R|util/Anno|[Types](position = <strcat>(String(lambda b ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
                 {
                    ^@withLambda Unit
                }

            }
            )
            @R|util/Anno|[Types](position = <strcat>(String(destr ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval <destruct>: R|util/Pair| = R|util/Pair.Pair|(Null(null), Null(null))
            @R|util/Anno|[Types](position = <strcat>(String(a ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval a: R|@R|util/Anno|(position = <strcat>(String(a type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(a nested type ), R|util/constant|))  kotlin/collections/Collection<@R|util/Anno|(position = <strcat>(String(a nested nested type ), R|util/constant|))  kotlin/String>>?| = R|<local>/<destruct>|.R|util/Pair.component1|()
            @R|util/Anno|[Types](position = <strcat>(String(b ), R|<local>/prop|)) [ResolvedTo(BODY_RESOLVE)] lval b: R|@R|util/Anno|(position = <strcat>(String(b type ), R|util/constant|))  kotlin/Array<@R|util/Anno|(position = <strcat>(String(b nested type ), R|util/constant|))  kotlin/collections/List<@R|util/Anno|(position = <strcat>(String(b nested nested type ), R|util/constant|))  kotlin/Int>>?| = R|<local>/<destruct>|.R|util/Pair.component2|()
            ^ R|<local>/b|
        }
        )
    }
