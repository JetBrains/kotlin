package org.jetbrains.kotlin.build.tools.api

import kotlin.Any
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.String
import kotlin.collections.MutableMap
import kotlin.collections.mutableMapOf
import kotlin.jvm.JvmField

public class JsArguments : WasmArguments() {
  private val optionsMap: MutableMap<JsArgument<*>, Any?> = mutableMapOf()

  public operator fun <V> `get`(key: JsArgument<V>): V? = optionsMap[key] as V?

  public operator fun <V> `set`(key: JsArgument<V>, `value`: V) {
    optionsMap[key] = `value`
  }

  public class JsArgument<V>(
    public val id: String,
  )

  public companion object {
    @JvmField
    public val OUTPUT: JsArgument<String?> = JsArgument("OUTPUT")

    /**
     * Destination for generated files.
     */
    @JvmField
    public val IR_OUTPUT_DIR: JsArgument<String?> = JsArgument("IR_OUTPUT_DIR")

    /**
     * Base name of generated files.
     */
    @JvmField
    public val IR_OUTPUT_NAME: JsArgument<String?> = JsArgument("IR_OUTPUT_NAME")

    /**
     * Paths to Kotlin libraries with .meta.js and .kjsm files, separated by the system path separator.
     */
    @JvmField
    public val LIBRARIES: JsArgument<String?> = JsArgument("LIBRARIES")

    /**
     * Generate a source map.
     */
    @JvmField
    public val SOURCE_MAP: JsArgument<Boolean> = JsArgument("SOURCE_MAP")

    /**
     * Add the specified prefix to the paths in the source map.
     */
    @JvmField
    public val SOURCE_MAP_PREFIX: JsArgument<String?> = JsArgument("SOURCE_MAP_PREFIX")

    /**
     * Base directories for calculating relative paths to source files in the source map.
     */
    @JvmField
    public val SOURCE_MAP_BASE_DIRS: JsArgument<String?> = JsArgument("SOURCE_MAP_BASE_DIRS")

    /**
     * Embed source files into the source map.
     */
    @JvmField
    public val SOURCE_MAP_EMBED_SOURCES: JsArgument<String?> =
        JsArgument("SOURCE_MAP_EMBED_SOURCES")

    /**
     * Mode for mapping generated names to original names.
     */
    @JvmField
    public val SOURCE_MAP_NAMES_POLICY: JsArgument<String?> = JsArgument("SOURCE_MAP_NAMES_POLICY")

    /**
     * Generate JS files for the specified ECMA version.
     */
    @JvmField
    public val TARGET: JsArgument<String?> = JsArgument("TARGET")

    /**
     * Comma-separated list of fully qualified names not to be eliminated by DCE (if it can be reached), and for which to keep non-minified names.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_KEEP: JsArgument<String?> = JsArgument("IR_KEEP")

    /**
     * The kind of JS module generated by the compiler. ES modules are enabled by default in case of ES2015 target usage
     */
    @JvmField
    public val MODULE_KIND: JsArgument<String?> = JsArgument("MODULE_KIND")

    /**
     * Specify whether the 'main' function should be called upon execution.
     */
    @JvmField
    public val MAIN: JsArgument<String?> = JsArgument("MAIN")

    /**
     * Generate an unpacked klib into the parent directory of the output JS file.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_PRODUCE_KLIB_DIR: JsArgument<Boolean> = JsArgument("IR_PRODUCE_KLIB_DIR")

    /**
     * Generate a packed klib into the directory specified by '-ir-output-dir'.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_PRODUCE_KLIB_FILE: JsArgument<Boolean> = JsArgument("IR_PRODUCE_KLIB_FILE")

    /**
     * Generate a JS file using the IR backend.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_PRODUCE_JS: JsArgument<Boolean> = JsArgument("IR_PRODUCE_JS")

    /**
     * Perform experimental dead code elimination.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_DCE: JsArgument<Boolean> = JsArgument("IR_DCE")

    /**
     * Enable runtime diagnostics instead of removing declarations when performing DCE.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_DCE_RUNTIME_DIAGNOSTIC: JsArgument<String?> =
        JsArgument("IR_DCE_RUNTIME_DIAGNOSTIC")

    /**
     * Print reachability information about declarations to 'stdout' while performing DCE.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_DCE_PRINT_REACHABILITY_INFO: JsArgument<Boolean> =
        JsArgument("IR_DCE_PRINT_REACHABILITY_INFO")

    /**
     * Perform lazy initialization for properties.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_PROPERTY_LAZY_INITIALIZATION: JsArgument<Boolean> =
        JsArgument("IR_PROPERTY_LAZY_INITIALIZATION")

    /**
     * Minimize the names of members.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_MINIMIZED_MEMBER_NAMES: JsArgument<Boolean> =
        JsArgument("IR_MINIMIZED_MEMBER_NAMES")

    /**
     * Specify the name of the compilation module for the IR backend.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_MODULE_NAME: JsArgument<String?> = JsArgument("IR_MODULE_NAME")

    /**
     * Wrap access to external 'Boolean' properties with an explicit conversion to 'Boolean'.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_SAFE_EXTERNAL_BOOLEAN: JsArgument<Boolean> =
        JsArgument("IR_SAFE_EXTERNAL_BOOLEAN")

    /**
     * Enable runtime diagnostics when accessing external 'Boolean' properties.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_SAFE_EXTERNAL_BOOLEAN_DIAGNOSTIC: JsArgument<String?> =
        JsArgument("IR_SAFE_EXTERNAL_BOOLEAN_DIAGNOSTIC")

    /**
     * Generate one .js file per module.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_PER_MODULE: JsArgument<Boolean> = JsArgument("IR_PER_MODULE")

    /**
     * Add a custom output name to the split .js files.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_PER_MODULE_OUTPUT_NAME: JsArgument<String?> =
        JsArgument("IR_PER_MODULE_OUTPUT_NAME")

    /**
     * Generate one .js file per source file.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_PER_FILE: JsArgument<Boolean> = JsArgument("IR_PER_FILE")

    /**
     * Lambda expressions that capture values are translated into in-line anonymous JavaScript functions.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_GENERATE_INLINE_ANONYMOUS_FUNCTIONS: JsArgument<Boolean> =
        JsArgument("IR_GENERATE_INLINE_ANONYMOUS_FUNCTIONS")

    /**
     * Path to an intermediate library that should be processed in the same manner as source files.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val INCLUDE: JsArgument<String?> = JsArgument("INCLUDE")

    /**
     * Path to the cache directory.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val CACHE_DIRECTORY: JsArgument<String?> = JsArgument("CACHE_DIRECTORY")

    /**
     * Use the compiler to build the cache.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val IR_BUILD_CACHE: JsArgument<Boolean> = JsArgument("IR_BUILD_CACHE")

    /**
     * Generate a TypeScript declaration .d.ts file alongside the JS file.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val GENERATE_DTS: JsArgument<Boolean> = JsArgument("GENERATE_DTS")

    /**
     * Generate polyfills for features from the ES6+ standards.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val GENERATE_POLYFILLS: JsArgument<Boolean> = JsArgument("GENERATE_POLYFILLS")

    /**
     * Generate strict types for implicitly exported entities inside d.ts files.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val STRICT_IMPLICIT_EXPORT_TYPES: JsArgument<Boolean> =
        JsArgument("STRICT_IMPLICIT_EXPORT_TYPES")

    /**
     * Let generated JavaScript code use ES2015 classes. Enabled by default in case of ES2015 target usage
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val ES_CLASSES: JsArgument<Boolean?> = JsArgument("ES_CLASSES")

    /**
     * JS expression that will be executed in runtime and be put as an Array<String> parameter of the main function
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val PLATFORM_ARGUMENTS_IN_MAIN_FUNCTION: JsArgument<String?> =
        JsArgument("PLATFORM_ARGUMENTS_IN_MAIN_FUNCTION")

    /**
     * Enable ES2015 generator functions usage inside the compiled code. Enabled by default in case of ES2015 target usage
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val ES_GENERATORS: JsArgument<Boolean?> = JsArgument("ES_GENERATORS")

    /**
     * Use ES2015 arrow functions in the JavaScript code generated for Kotlin lambdas. Enabled by default in case of ES2015 target usage
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val ES_ARROW_FUNCTIONS: JsArgument<Boolean?> = JsArgument("ES_ARROW_FUNCTIONS")

    /**
     * This option does nothing and is left for compatibility with the legacy backend.
     * It is deprecated and will be removed in a future release.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val TYPED_ARRAYS: JsArgument<Boolean> = JsArgument("TYPED_ARRAYS")

    /**
     * Disable internal declaration export.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val FRIEND_MODULES_DISABLED: JsArgument<Boolean> = JsArgument("FRIEND_MODULES_DISABLED")

    /**
     * Paths to friend modules.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val FRIEND_MODULES: JsArgument<String?> = JsArgument("FRIEND_MODULES")

    /**
     * Enable extension function members in external interfaces.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val ENABLE_EXTENSION_FUNCTIONS_IN_EXTERNALS: JsArgument<Boolean> =
        JsArgument("ENABLE_EXTENSION_FUNCTIONS_IN_EXTERNALS")

    /**
     * Enable the IR fake override validator.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val FAKE_OVERRIDE_VALIDATOR: JsArgument<Boolean> = JsArgument("FAKE_OVERRIDE_VALIDATOR")

    /**
     * Perform additional optimizations on the generated JS code.
     */
    @JvmField
    @Deprecated(message = "This option is experimental and it may be changed in the future")
    public val OPTIMIZE_GENERATED_JS: JsArgument<Boolean> = JsArgument("OPTIMIZE_GENERATED_JS")
  }
}
