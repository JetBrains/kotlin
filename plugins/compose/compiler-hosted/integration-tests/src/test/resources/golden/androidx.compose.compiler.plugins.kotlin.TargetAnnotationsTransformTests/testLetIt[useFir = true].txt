//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

@Composable
fun Test(content: (@Composable () -> Unit?)) {
    content?.let { it() }
}

//
// Transformed IR
// ------------------------------------------

@Composable
@ComposableInferredTarget(scheme = "[0[0]]")
fun Test(content: Function2<Composer, Int, Unit?>, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)*<it()>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changedInstance(content)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val tmp0_safe_receiver = content
    val tmp1_group = when {
      tmp0_safe_receiver == null -> {
        null
      }
      else -> {
        val tmp0_group = tmp0_safe_receiver.let { it: Function2<Composer, Int, Unit?> ->
          val tmp0_return = it(%composer, 0)
          tmp0_return
        }
        tmp0_group
      }
    }
    tmp1_group
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(content, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
