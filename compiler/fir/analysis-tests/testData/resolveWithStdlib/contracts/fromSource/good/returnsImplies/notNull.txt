FILE: notNull.kt
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun test1(x: R|kotlin/String?|): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(FALSE) -> x != null
        >
     {
        [StubStatement]
        ^test1 ==(R|<local>/x|, Null(null))
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun test2(x: R|kotlin/String?|): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >
     {
        [StubStatement]
        ^test2 !=(R|<local>/x|, Null(null))
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun test3(x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >
     {
        [StubStatement]
        when () {
            !=(R|<local>/x|, Null(null)) ->  {
                ^test3 Boolean(true)
            }
        }

        ^test3 Boolean(false)
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun test4(x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >
     {
        [StubStatement]
        lval y: R|kotlin/String?| = R|<local>/x|
        when () {
            !=(R|<local>/y|, Null(null)) ->  {
                ^test4 Boolean(true)
            }
        }

        ^test4 Boolean(false)
    }
    @R|kotlin/OptIn|(vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun test5(x: R|kotlin/String?|): R|kotlin/Any?|
        [R|Contract description]
         <
            Returns(TRUE) -> x != null
        >
     {
        [StubStatement]
        ^test5 R|/test2|(R|<local>/x|)
    }
