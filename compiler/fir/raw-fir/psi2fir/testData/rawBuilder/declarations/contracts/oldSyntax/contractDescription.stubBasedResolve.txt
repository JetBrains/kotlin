FILE: [ResolvedTo(ANNOTATION_ARGUMENTS)] contractDescription.kt
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun test_1(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun test_2(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] var test_3: R|kotlin/Int| = LAZY_EXPRESSION
        public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] get(): R|kotlin/Int|
            [L|Contract description] { LAZY_BLOCK }
        public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] set([ResolvedTo(EXPECT_ACTUAL_MATCHING)] value: R|kotlin/Int|): R|kotlin/Unit|
            [L|Contract description] { LAZY_BLOCK }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun test_4(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class MyClass : R|kotlin/Any| {
        public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=MyClass] constructor([ResolvedTo(EXPECT_ACTUAL_MATCHING)] x: R|kotlin/Boolean|): R|MyClass|
            [L|Contract description] { LAZY_BLOCK }

    }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun annotated(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun parenthesized(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun labeled(): R|kotlin/Unit|
        [L|Contract description] { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun test_5(): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun test_6(): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun test_7(): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun test_8(): R|kotlin/Unit| { LAZY_BLOCK }