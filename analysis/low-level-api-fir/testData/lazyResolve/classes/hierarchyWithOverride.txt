RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] hierarchyWithOverride.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(RAW_FIR)] class Usage : Foo2 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class Usage : Foo2 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(RAW_FIR)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(RAW_FIR)] interface Foo2 : Foo1 {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(COMPANION_GENERATION)] class Usage : Foo2 {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(SUPER_TYPES)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(TYPES)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(CONTRACTS)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(CONSTANT_EVALUATION)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo1 : R|kotlin/Any| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar(): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val str: String
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo1] get(): String

    }
    public final? [ResolvedTo(SUPER_TYPES)] interface Foo2 : R|Foo1| {
        public? final? [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: Int): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] fun bar([ResolvedTo(RAW_FIR)] s: String): R|kotlin/Unit|

        public? final? [ResolvedTo(RAW_FIR)] val isBoo: Boolean
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Foo2] get(): Boolean

    }
    public abstract [ResolvedTo(ANNOTATION_ARGUMENTS)] class Usage : R|Foo2| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            LAZY_super<<implicit>>
        }

        public? open? override [ResolvedTo(RAW_FIR)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverride.kt
    public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] class Usage : R|Foo2| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| { LAZY_BLOCK }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] hierarchyWithOverride.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo1 : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun bar(): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] val str: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Foo2 : R|Foo1| {
        public abstract [ResolvedTo(BODY_RESOLVE)] fun foo([ResolvedTo(BODY_RESOLVE)] i: R|kotlin/Int|): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun bar([ResolvedTo(BODY_RESOLVE)] s: R|kotlin/String|): R|kotlin/Unit|

        public abstract [ResolvedTo(BODY_RESOLVE)] val isBoo: R|kotlin/Boolean|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] class Usage : R|Foo2| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Usage] constructor(): R|Usage| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun foo(): R|kotlin/Unit| {
        }

    }
