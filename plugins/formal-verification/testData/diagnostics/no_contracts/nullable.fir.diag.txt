/nullable.kt:(61,79): info: Generated Viper text for use_nullable_twice:
method global$fun_use_nullable_twice$fun_take$NT_Int$return$NT_Int(local$x: dom$Nullable[Int])
  returns (ret$0: dom$Nullable[Int])
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
{
  var local0$a: dom$Nullable[Int]
  var local0$b: dom$Nullable[Int]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  local0$a := local$x
  local0$b := local$x
  ret$0 := local0$a
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(145,168): info: Generated Viper text for pass_nullable_parameter:
method global$fun_pass_nullable_parameter$fun_take$NT_Int$return$NT_Int(local$x: dom$Nullable[Int])
  returns (ret$0: dom$Nullable[Int])
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
{
  var anonymous$0: dom$Nullable[Int]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  anonymous$0 := global$fun_use_nullable_twice$fun_take$NT_Int$return$NT_Int(local$x)
  ret$0 := local$x
  goto label$ret$0
  label label$ret$0
}

method global$fun_use_nullable_twice$fun_take$NT_Int$return$NT_Int(local$x: dom$Nullable[Int])
  returns (ret: dom$Nullable[Int])
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))


/nullable.kt:(232,260): info: Generated Viper text for nullable_nullable_comparison:
method global$fun_nullable_nullable_comparison$fun_take$NT_Int$NT_Int$return$T_Boolean(local$x: dom$Nullable[Int],
  local$y: dom$Nullable[Int])
  returns (ret$0: Bool)
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$y): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ret$0 := local$x == (dom$Nullable$null(): dom$Nullable[Int]) &&
    local$y == (dom$Nullable$null(): dom$Nullable[Int]) ||
    local$x != (dom$Nullable$null(): dom$Nullable[Int]) &&
    local$y != (dom$Nullable$null(): dom$Nullable[Int]) &&
    (dom$Casting$cast(local$x, dom$Type$Int()): Int) ==
    (dom$Casting$cast(local$y, dom$Type$Int()): Int)
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(315,347): info: Generated Viper text for nullable_non_nullable_comparison:
method global$fun_nullable_non_nullable_comparison$fun_take$NT_Int$NT_Int$return$T_Boolean(local$x: dom$Nullable[Int],
  local$y: dom$Nullable[Int])
  returns (ret$0: Bool)
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$y): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ret$0 := !(local$x != (dom$Nullable$null(): dom$Nullable[Int]) &&
    (dom$Casting$cast(local$x, dom$Type$Int()): Int) == 3)
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(402,417): info: Generated Viper text for null_comparison:
method global$fun_null_comparison$fun_take$NT_Int$return$T_Boolean(local$x: dom$Nullable[Int])
  returns (ret$0: Bool)
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  ret$0 := local$x == (dom$Nullable$null(): dom$Nullable[Int]) &&
    (dom$Nullable$null(): dom$Nullable[dom$Unit]) ==
    (dom$Nullable$null(): dom$Nullable[dom$Unit]) ||
    local$x != (dom$Nullable$null(): dom$Nullable[Int]) &&
    (dom$Nullable$null(): dom$Nullable[dom$Unit]) !=
    (dom$Nullable$null(): dom$Nullable[dom$Unit]) &&
    (dom$Casting$cast(local$x, dom$Type$Int()): Int) ==
    (dom$Casting$cast((dom$Nullable$null(): dom$Nullable[dom$Unit]), dom$Type$Int()): Int)
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(466,480): info: Generated Viper text for elvis_operator:
method global$fun_elvis_operator$fun_take$NT_Int$return$T_Int(local$x: dom$Nullable[Int])
  returns (ret$0: Int)
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  if (local$x != (dom$Nullable$null(): dom$Nullable[Int])) {
    ret$0 := (dom$Casting$cast(local$x, dom$Type$Int()): Int)
  } else {
    ret$0 := 3}
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(522,544): info: Generated Viper text for elvis_operator_complex:
method global$fun_elvis_operator$fun_take$NT_Int$return$T_Int(local$x: dom$Nullable[Int])
  returns (ret: Int)


method global$fun_elvis_operator_complex$fun_take$NT_Int$return$T_Int(local$x: dom$Nullable[Int])
  returns (ret$0: Int)
{
  var anonymous$0: dom$Nullable[Int]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  anonymous$0 := global$fun_pass_nullable_parameter$fun_take$NT_Int$return$NT_Int(local$x)
  if (anonymous$0 != (dom$Nullable$null(): dom$Nullable[Int])) {
    ret$0 := (dom$Casting$cast(anonymous$0, dom$Type$Int()): Int)
  } else {
    ret$0 := global$fun_elvis_operator$fun_take$NT_Int$return$T_Int((dom$Casting$cast(2,
      dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int]))}
  goto label$ret$0
  label label$ret$0
}

method global$fun_pass_nullable_parameter$fun_take$NT_Int$return$NT_Int(local$x: dom$Nullable[Int])
  returns (ret: dom$Nullable[Int])
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))


/nullable.kt:(627,648): info: Generated Viper text for elvis_operator_return:
method global$fun_elvis_operator_return$fun_take$NT_Int$return$T_Int(local$x: dom$Nullable[Int])
  returns (ret$0: Int)
{
  var local0$y: Int
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$x): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
  if (local$x != (dom$Nullable$null(): dom$Nullable[Int])) {
    local0$y := (dom$Casting$cast(local$x, dom$Type$Int()): Int)
  } else {
    var anonymous$0: dom$Unit
    ret$0 := 0
    goto label$ret$0
    local0$y := (dom$Casting$cast(anonymous$0, dom$Type$Int()): Int)
  }
  ret$0 := local0$y
  goto label$ret$0
  label label$ret$0
}

/nullable.kt:(711,720): info: Generated Viper text for safe_call:
field pkg$kotlin$class_String$member_length: Int

method global$fun_safe_call$fun_take$NT_class_pkg$kotlin$global$class_String$return$T_Unit(local$s: dom$Nullable[Ref])
  returns (ret$0: dom$Unit)
  requires local$s != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$s, dom$Type$pkg$kotlin$global$class_String()): Ref).pkg$kotlin$class_String$member_length, wildcard)
  ensures local$s != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$s, dom$Type$pkg$kotlin$global$class_String()): Ref).pkg$kotlin$class_String$member_length, wildcard)
{
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$s): dom$Type), dom$Type$special$Nullable(dom$Type$pkg$kotlin$global$class_String()))
  if (local$s != (dom$Nullable$null(): dom$Nullable[Ref])) {
    var anonymous$0: Int
    anonymous$0 := pkg$kotlin$class_Any$fun_hashCode$fun_take$T_Any$return$T_Int((dom$Casting$cast((dom$Casting$cast(local$s,
      dom$Type$pkg$kotlin$global$class_String()): Ref), dom$Type$Any()): dom$Any))
  }
  label label$ret$0
}

method pkg$kotlin$class_Any$fun_hashCode$fun_take$T_Any$return$T_Int(this: dom$Any)
  returns (ret: Int)


method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Int)


/nullable.kt:(760,778): info: Generated Viper text for safe_call_property:
field pkg$kotlin$class_String$member_length: Int

method global$fun_safe_call_property$fun_take$NT_class_pkg$kotlin$global$class_String$return$T_Unit(local$s: dom$Nullable[Ref])
  returns (ret$0: dom$Unit)
  requires local$s != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$s, dom$Type$pkg$kotlin$global$class_String()): Ref).pkg$kotlin$class_String$member_length, wildcard)
  ensures local$s != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$s, dom$Type$pkg$kotlin$global$class_String()): Ref).pkg$kotlin$class_String$member_length, wildcard)
{
  var local0$l: dom$Nullable[Int]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$s): dom$Type), dom$Type$special$Nullable(dom$Type$pkg$kotlin$global$class_String()))
  if (local$s != (dom$Nullable$null(): dom$Nullable[Ref])) {
    local0$l := (dom$Casting$cast((dom$Casting$cast(local$s, dom$Type$pkg$kotlin$global$class_String()): Ref).pkg$kotlin$class_String$member_length,
      dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
  } else {
    local0$l := (dom$Nullable$null(): dom$Nullable[Int])}
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Int)


/nullable.kt:(899,914): info: Generated Viper text for safe_call_chain:
field class_Foo$member_v: Int

method class_Foo$fun_nullable$fun_take$T_class_global$class_Foo$return$NT_class_global$class_Foo(this: Ref)
  returns (ret: dom$Nullable[Ref])
  requires acc(this.class_Foo$member_v, wildcard)
  ensures acc(this.class_Foo$member_v, wildcard)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret): dom$Type), dom$Type$special$Nullable(dom$Type$global$class_Foo()))
  ensures ret != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(ret, dom$Type$global$class_Foo()): Ref).class_Foo$member_v, wildcard)


method global$fun_safe_call_chain$fun_take$NT_class_global$class_Foo$return$NT_Int(local$foo: dom$Nullable[Ref])
  returns (ret$0: dom$Nullable[Int])
  requires local$foo != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$foo, dom$Type$global$class_Foo()): Ref).class_Foo$member_v, wildcard)
  ensures local$foo != (dom$Nullable$null(): dom$Nullable[Ref]) ==>
    acc((dom$Casting$cast(local$foo, dom$Type$global$class_Foo()): Ref).class_Foo$member_v, wildcard)
  ensures dom$Type$isSubtype((dom$TypeOf$typeOf(ret$0): dom$Type), dom$Type$special$Nullable(dom$Type$Int()))
{
  var anonymous$0: dom$Nullable[Ref]
  var anonymous$1: dom$Nullable[Ref]
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$foo): dom$Type), dom$Type$special$Nullable(dom$Type$global$class_Foo()))
  if (local$foo != (dom$Nullable$null(): dom$Nullable[Ref])) {
    anonymous$1 := class_Foo$fun_nullable$fun_take$T_class_global$class_Foo$return$NT_class_global$class_Foo((dom$Casting$cast(local$foo,
      dom$Type$global$class_Foo()): Ref))
  } else {
    anonymous$1 := (dom$Nullable$null(): dom$Nullable[Ref])}
  if (anonymous$1 != (dom$Nullable$null(): dom$Nullable[Ref])) {
    anonymous$0 := class_Foo$fun_nullable$fun_take$T_class_global$class_Foo$return$NT_class_global$class_Foo((dom$Casting$cast(anonymous$1,
      dom$Type$global$class_Foo()): Ref))
  } else {
    anonymous$0 := (dom$Nullable$null(): dom$Nullable[Ref])}
  if (anonymous$0 != (dom$Nullable$null(): dom$Nullable[Ref])) {
    ret$0 := (dom$Casting$cast((dom$Casting$cast(anonymous$0, dom$Type$global$class_Foo()): Ref).class_Foo$member_v,
      dom$Type$special$Nullable(dom$Type$Int())): dom$Nullable[Int])
  } else {
    ret$0 := (dom$Nullable$null(): dom$Nullable[Int])}
  goto label$ret$0
  label label$ret$0
}
