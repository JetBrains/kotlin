// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: core/metadata.jvm/src/jvm_module.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.metadata.jvm;

public final class JvmModuleProtoBuf {
  private JvmModuleProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.Module)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> 
        getPackagePartsList();
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts getPackageParts(int index);
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    int getPackagePartsCount();

    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> 
        getMetadataPartsList();
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts getMetadataParts(int index);
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    int getMetadataPartsCount();

    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @return A list containing the jvmPackageName.
     */
    java.util.List<java.lang.String>
        getJvmPackageNameList();
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @return The count of jvmPackageName.
     */
    int getJvmPackageNameCount();
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param index The index of the element to return.
     * @return The jvmPackageName at the given index.
     */
    java.lang.String getJvmPackageName(int index);
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param index The index of the element to return.
     * @return The jvmPackageName at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getJvmPackageNameBytes(int index);

    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
     * @return Whether the stringTable field is set.
     */
    boolean hasStringTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
     * @return The stringTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStringTable();

    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
     * @return Whether the qualifiedNameTable field is set.
     */
    boolean hasQualifiedNameTable();
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
     * @return The qualifiedNameTable.
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNameTable();

    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index);
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    int getAnnotationCount();

    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> 
        getOptionalAnnotationClassList();
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    org.jetbrains.kotlin.metadata.ProtoBuf.Class getOptionalAnnotationClass(int index);
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    int getOptionalAnnotationClassCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.Module}
   */
  public  static final class Module extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          Module, Module.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.Module)
      ModuleOrBuilder {
    private Module() {
      packageParts_ = emptyProtobufList();
      metadataParts_ = emptyProtobufList();
      jvmPackageName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
      annotation_ = emptyProtobufList();
      optionalAnnotationClass_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int PACKAGE_PARTS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> packageParts_;
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> getPackagePartsList() {
      return packageParts_;
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackagePartsOrBuilder> 
        getPackagePartsOrBuilderList() {
      return packageParts_;
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    @java.lang.Override
    public int getPackagePartsCount() {
      return packageParts_.size();
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts getPackageParts(int index) {
      return packageParts_.get(index);
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackagePartsOrBuilder getPackagePartsOrBuilder(
        int index) {
      return packageParts_.get(index);
    }
    private void ensurePackagePartsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> tmp = packageParts_;
      if (!tmp.isModifiable()) {
        packageParts_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPackageParts(
        int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
      value.getClass();  // minimal bytecode null check
      ensurePackagePartsIsMutable();
      packageParts_.set(index, value);
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addPackageParts(org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
      value.getClass();  // minimal bytecode null check
      ensurePackagePartsIsMutable();
      packageParts_.add(value);
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addPackageParts(
        int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
      value.getClass();  // minimal bytecode null check
      ensurePackagePartsIsMutable();
      packageParts_.add(index, value);
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    private void addAllPackageParts(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> values) {
      ensurePackagePartsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, packageParts_);
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    private void clearPackageParts() {
      packageParts_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Names of .class files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
     */
    private void removePackageParts(int index) {
      ensurePackagePartsIsMutable();
      packageParts_.remove(index);
    }

    public static final int METADATA_PARTS_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> metadataParts_;
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> getMetadataPartsList() {
      return metadataParts_;
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackagePartsOrBuilder> 
        getMetadataPartsOrBuilderList() {
      return metadataParts_;
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    @java.lang.Override
    public int getMetadataPartsCount() {
      return metadataParts_.size();
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts getMetadataParts(int index) {
      return metadataParts_.get(index);
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    public org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackagePartsOrBuilder getMetadataPartsOrBuilder(
        int index) {
      return metadataParts_.get(index);
    }
    private void ensureMetadataPartsIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> tmp = metadataParts_;
      if (!tmp.isModifiable()) {
        metadataParts_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setMetadataParts(
        int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
      value.getClass();  // minimal bytecode null check
      ensureMetadataPartsIsMutable();
      metadataParts_.set(index, value);
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addMetadataParts(org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
      value.getClass();  // minimal bytecode null check
      ensureMetadataPartsIsMutable();
      metadataParts_.add(value);
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addMetadataParts(
        int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
      value.getClass();  // minimal bytecode null check
      ensureMetadataPartsIsMutable();
      metadataParts_.add(index, value);
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    private void addAllMetadataParts(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> values) {
      ensureMetadataPartsIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, metadataParts_);
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    private void clearMetadataParts() {
      metadataParts_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Names of .kotlin_metadata files for each package
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
     */
    private void removeMetadataParts(int index) {
      ensureMetadataPartsIsMutable();
      metadataParts_.remove(index);
    }

    public static final int JVM_PACKAGE_NAME_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> jvmPackageName_;
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @return A list containing the jvmPackageName.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getJvmPackageNameList() {
      return jvmPackageName_;
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @return The count of jvmPackageName.
     */
    @java.lang.Override
    public int getJvmPackageNameCount() {
      return jvmPackageName_.size();
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param index The index of the element to return.
     * @return The jvmPackageName at the given index.
     */
    @java.lang.Override
    public java.lang.String getJvmPackageName(int index) {
      return jvmPackageName_.get(index);
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the jvmPackageName at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getJvmPackageNameBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          jvmPackageName_.get(index));
    }
    private void ensureJvmPackageNameIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          jvmPackageName_;  if (!tmp.isModifiable()) {
        jvmPackageName_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param index The index to set the value at.
     * @param value The jvmPackageName to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setJvmPackageName(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureJvmPackageNameIsMutable();
      jvmPackageName_.set(index, value);
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param value The jvmPackageName to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addJvmPackageName(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureJvmPackageNameIsMutable();
      jvmPackageName_.add(value);
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param values The jvmPackageName to add.
     */
    private void addAllJvmPackageName(
        java.lang.Iterable<java.lang.String> values) {
      ensureJvmPackageNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, jvmPackageName_);
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     */
    private void clearJvmPackageName() {
      jvmPackageName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
     * The names here are dot-separated, e.g. "org.foo.bar"
     * </pre>
     *
     * <code>repeated string jvm_package_name = 3;</code>
     * @param value The bytes of the jvmPackageName to add.
     */
    private void addJvmPackageNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureJvmPackageNameIsMutable();
      jvmPackageName_.add(value.toStringUtf8());
    }

    public static final int STRING_TABLE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.metadata.ProtoBuf.StringTable stringTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
     */
    @java.lang.Override
    public boolean hasStringTable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStringTable() {
      return stringTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance() : stringTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setStringTable(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
      value.getClass();  // minimal bytecode null check
      stringTable_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeStringTable(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
      value.getClass();  // minimal bytecode null check
      if (stringTable_ != null &&
          stringTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.getDefaultInstance()) {
        stringTable_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.newBuilder(stringTable_).mergeFrom(value).buildPartial();
      } else {
        stringTable_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
     */
    private void clearStringTable() {  stringTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int QUALIFIED_NAME_TABLE_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable qualifiedNameTable_;
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
     */
    @java.lang.Override
    public boolean hasQualifiedNameTable() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNameTable() {
      return qualifiedNameTable_ == null ? org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance() : qualifiedNameTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setQualifiedNameTable(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
      value.getClass();  // minimal bytecode null check
      qualifiedNameTable_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality", "ReturnValueIgnored"})
    private void mergeQualifiedNameTable(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
      value.getClass();  // minimal bytecode null check
      if (qualifiedNameTable_ != null &&
          qualifiedNameTable_ != org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.getDefaultInstance()) {
        qualifiedNameTable_ =
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.newBuilder(qualifiedNameTable_).mergeFrom(value).buildPartial();
      } else {
        qualifiedNameTable_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
     */
    private void clearQualifiedNameTable() {  qualifiedNameTable_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> annotation_;
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    @java.lang.Override
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }
    private void ensureAnnotationIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> tmp = annotation_;
      if (!tmp.isModifiable()) {
        annotation_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.set(index, value);
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(value);
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addAnnotation(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
      value.getClass();  // minimal bytecode null check
      ensureAnnotationIsMutable();
      annotation_.add(index, value);
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    private void addAllAnnotation(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
      ensureAnnotationIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, annotation_);
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    private void clearAnnotation() {
      annotation_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Annotations on the whole module
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
     */
    private void removeAnnotation(int index) {
      ensureAnnotationIsMutable();
      annotation_.remove(index);
    }

    public static final int OPTIONAL_ANNOTATION_CLASS_FIELD_NUMBER = 16;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Class> optionalAnnotationClass_;
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> getOptionalAnnotationClassList() {
      return optionalAnnotationClass_;
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder> 
        getOptionalAnnotationClassOrBuilderList() {
      return optionalAnnotationClass_;
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    @java.lang.Override
    public int getOptionalAnnotationClassCount() {
      return optionalAnnotationClass_.size();
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.metadata.ProtoBuf.Class getOptionalAnnotationClass(int index) {
      return optionalAnnotationClass_.get(index);
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    public org.jetbrains.kotlin.metadata.ProtoBuf.ClassOrBuilder getOptionalAnnotationClassOrBuilder(
        int index) {
      return optionalAnnotationClass_.get(index);
    }
    private void ensureOptionalAnnotationClassIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<org.jetbrains.kotlin.metadata.ProtoBuf.Class> tmp = optionalAnnotationClass_;
      if (!tmp.isModifiable()) {
        optionalAnnotationClass_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setOptionalAnnotationClass(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      ensureOptionalAnnotationClassIsMutable();
      optionalAnnotationClass_.set(index, value);
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addOptionalAnnotationClass(org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      ensureOptionalAnnotationClassIsMutable();
      optionalAnnotationClass_.add(value);
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addOptionalAnnotationClass(
        int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
      value.getClass();  // minimal bytecode null check
      ensureOptionalAnnotationClassIsMutable();
      optionalAnnotationClass_.add(index, value);
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    private void addAllOptionalAnnotationClass(
        java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Class> values) {
      ensureOptionalAnnotationClassIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, optionalAnnotationClass_);
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    private void clearOptionalAnnotationClass() {
      optionalAnnotationClass_ = emptyProtobufList();
    }
    /**
     * <pre>
     * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
     * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
     * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
     * it to the corresponding class with the resolution capabilities of common modules.
     * </pre>
     *
     * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
     */
    private void removeOptionalAnnotationClass(int index) {
      ensureOptionalAnnotationClassIsMutable();
      optionalAnnotationClass_.remove(index);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.Module}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.Module)
        org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.ModuleOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> getPackagePartsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPackagePartsList());
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      @java.lang.Override
      public int getPackagePartsCount() {
        return instance.getPackagePartsCount();
      }/**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts getPackageParts(int index) {
        return instance.getPackageParts(index);
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder setPackageParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
        copyOnWrite();
        instance.setPackageParts(index, value);
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder setPackageParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.Builder builderForValue) {
        copyOnWrite();
        instance.setPackageParts(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder addPackageParts(org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
        copyOnWrite();
        instance.addPackageParts(value);
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder addPackageParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
        copyOnWrite();
        instance.addPackageParts(index, value);
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder addPackageParts(
          org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.Builder builderForValue) {
        copyOnWrite();
        instance.addPackageParts(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder addPackageParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.Builder builderForValue) {
        copyOnWrite();
        instance.addPackageParts(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder addAllPackageParts(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> values) {
        copyOnWrite();
        instance.addAllPackageParts(values);
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder clearPackageParts() {
        copyOnWrite();
        instance.clearPackageParts();
        return this;
      }
      /**
       * <pre>
       * Names of .class files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts package_parts = 1;</code>
       */
      public Builder removePackageParts(int index) {
        copyOnWrite();
        instance.removePackageParts(index);
        return this;
      }

      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> getMetadataPartsList() {
        return java.util.Collections.unmodifiableList(
            instance.getMetadataPartsList());
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      @java.lang.Override
      public int getMetadataPartsCount() {
        return instance.getMetadataPartsCount();
      }/**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts getMetadataParts(int index) {
        return instance.getMetadataParts(index);
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder setMetadataParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
        copyOnWrite();
        instance.setMetadataParts(index, value);
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder setMetadataParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.Builder builderForValue) {
        copyOnWrite();
        instance.setMetadataParts(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder addMetadataParts(org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
        copyOnWrite();
        instance.addMetadataParts(value);
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder addMetadataParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts value) {
        copyOnWrite();
        instance.addMetadataParts(index, value);
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder addMetadataParts(
          org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.Builder builderForValue) {
        copyOnWrite();
        instance.addMetadataParts(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder addMetadataParts(
          int index, org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.Builder builderForValue) {
        copyOnWrite();
        instance.addMetadataParts(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder addAllMetadataParts(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> values) {
        copyOnWrite();
        instance.addAllMetadataParts(values);
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder clearMetadataParts() {
        copyOnWrite();
        instance.clearMetadataParts();
        return this;
      }
      /**
       * <pre>
       * Names of .kotlin_metadata files for each package
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.jvm.PackageParts metadata_parts = 2;</code>
       */
      public Builder removeMetadataParts(int index) {
        copyOnWrite();
        instance.removeMetadataParts(index);
        return this;
      }

      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @return A list containing the jvmPackageName.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getJvmPackageNameList() {
        return java.util.Collections.unmodifiableList(
            instance.getJvmPackageNameList());
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @return The count of jvmPackageName.
       */
      @java.lang.Override
      public int getJvmPackageNameCount() {
        return instance.getJvmPackageNameCount();
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @param index The index of the element to return.
       * @return The jvmPackageName at the given index.
       */
      @java.lang.Override
      public java.lang.String getJvmPackageName(int index) {
        return instance.getJvmPackageName(index);
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the jvmPackageName at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getJvmPackageNameBytes(int index) {
        return instance.getJvmPackageNameBytes(index);
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @param index The index to set the value at.
       * @param value The jvmPackageName to set.
       * @return This builder for chaining.
       */
      public Builder setJvmPackageName(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setJvmPackageName(index, value);
        return this;
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @param value The jvmPackageName to add.
       * @return This builder for chaining.
       */
      public Builder addJvmPackageName(
          java.lang.String value) {
        copyOnWrite();
        instance.addJvmPackageName(value);
        return this;
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @param values The jvmPackageName to add.
       * @return This builder for chaining.
       */
      public Builder addAllJvmPackageName(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllJvmPackageName(values);
        return this;
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearJvmPackageName() {
        copyOnWrite();
        instance.clearJvmPackageName();
        return this;
      }
      /**
       * <pre>
       * Values of &#64;JvmPackageName annotation used in this module; can be referenced in PackageParts#class_with_jvm_package_name_package_id.
       * The names here are dot-separated, e.g. "org.foo.bar"
       * </pre>
       *
       * <code>repeated string jvm_package_name = 3;</code>
       * @param value The bytes of the jvmPackageName to add.
       * @return This builder for chaining.
       */
      public Builder addJvmPackageNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addJvmPackageNameBytes(value);
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
       */
      @java.lang.Override
      public boolean hasStringTable() {
        return instance.hasStringTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.StringTable getStringTable() {
        return instance.getStringTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
       */
      public Builder setStringTable(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
        copyOnWrite();
        instance.setStringTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
       */
      public Builder setStringTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.StringTable.Builder builderForValue) {
        copyOnWrite();
        instance.setStringTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
       */
      public Builder mergeStringTable(org.jetbrains.kotlin.metadata.ProtoBuf.StringTable value) {
        copyOnWrite();
        instance.mergeStringTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.StringTable string_table = 4;</code>
       */
      public Builder clearStringTable() {  copyOnWrite();
        instance.clearStringTable();
        return this;
      }

      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
       */
      @java.lang.Override
      public boolean hasQualifiedNameTable() {
        return instance.hasQualifiedNameTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable getQualifiedNameTable() {
        return instance.getQualifiedNameTable();
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
       */
      public Builder setQualifiedNameTable(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
        copyOnWrite();
        instance.setQualifiedNameTable(value);
        return this;
        }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
       */
      public Builder setQualifiedNameTable(
          org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable.Builder builderForValue) {
        copyOnWrite();
        instance.setQualifiedNameTable(builderForValue.build());
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
       */
      public Builder mergeQualifiedNameTable(org.jetbrains.kotlin.metadata.ProtoBuf.QualifiedNameTable value) {
        copyOnWrite();
        instance.mergeQualifiedNameTable(value);
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.metadata.QualifiedNameTable qualified_name_table = 5;</code>
       */
      public Builder clearQualifiedNameTable() {  copyOnWrite();
        instance.clearQualifiedNameTable();
        return this;
      }

      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> getAnnotationList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotationList());
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      @java.lang.Override
      public int getAnnotationCount() {
        return instance.getAnnotationCount();
      }/**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Annotation getAnnotation(int index) {
        return instance.getAnnotation(index);
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(index, value);
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(value);
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation value) {
        copyOnWrite();
        instance.addAnnotation(index, value);
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotation(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Annotation> values) {
        copyOnWrite();
        instance.addAllAnnotation(values);
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }
      /**
       * <pre>
       * Annotations on the whole module
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Annotation annotation = 6;</code>
       */
      public Builder removeAnnotation(int index) {
        copyOnWrite();
        instance.removeAnnotation(index);
        return this;
      }

      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      @java.lang.Override
      public java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Class> getOptionalAnnotationClassList() {
        return java.util.Collections.unmodifiableList(
            instance.getOptionalAnnotationClassList());
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      @java.lang.Override
      public int getOptionalAnnotationClassCount() {
        return instance.getOptionalAnnotationClassCount();
      }/**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.metadata.ProtoBuf.Class getOptionalAnnotationClass(int index) {
        return instance.getOptionalAnnotationClass(index);
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder setOptionalAnnotationClass(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        copyOnWrite();
        instance.setOptionalAnnotationClass(index, value);
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder setOptionalAnnotationClass(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        copyOnWrite();
        instance.setOptionalAnnotationClass(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder addOptionalAnnotationClass(org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        copyOnWrite();
        instance.addOptionalAnnotationClass(value);
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder addOptionalAnnotationClass(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class value) {
        copyOnWrite();
        instance.addOptionalAnnotationClass(index, value);
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder addOptionalAnnotationClass(
          org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        copyOnWrite();
        instance.addOptionalAnnotationClass(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder addOptionalAnnotationClass(
          int index, org.jetbrains.kotlin.metadata.ProtoBuf.Class.Builder builderForValue) {
        copyOnWrite();
        instance.addOptionalAnnotationClass(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder addAllOptionalAnnotationClass(
          java.lang.Iterable<? extends org.jetbrains.kotlin.metadata.ProtoBuf.Class> values) {
        copyOnWrite();
        instance.addAllOptionalAnnotationClass(values);
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder clearOptionalAnnotationClass() {
        copyOnWrite();
        instance.clearOptionalAnnotationClass();
        return this;
      }
      /**
       * <pre>
       * &#64;OptionalExpectation-annotated annotation classes in this module. This list is only used in the compiler frontend when compiling
       * a second-tier multiplatform module against a multiplatform module which uses optional annotations, not actualized on the JVM.
       * This is not needed in the IDE because optional annotations can only be used in common modules, where the IDE plugin resolves
       * it to the corresponding class with the resolution capabilities of common modules.
       * </pre>
       *
       * <code>repeated .org.jetbrains.kotlin.metadata.Class optional_annotation_class = 16;</code>
       */
      public Builder removeOptionalAnnotationClass(int index) {
        copyOnWrite();
        instance.removeOptionalAnnotationClass(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.Module)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "packageParts_",
              org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.class,
              "metadataParts_",
              org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.class,
              "jvmPackageName_",
              "stringTable_",
              "qualifiedNameTable_",
              "annotation_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Annotation.class,
              "optionalAnnotationClass_",
              org.jetbrains.kotlin.metadata.ProtoBuf.Class.class,
            };
            java.lang.String info =
                "\u0004\u0007\u0000\u0001\u0001\u0010\u0007\u0000\u0005\u0005\u0001\u041b\u0002\u041b" +
                "\u0003\u001a\u0004\u1009\u0000\u0005\u1409\u0001\u0006\u041b\u0010\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.Module)
    private static final org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module DEFAULT_INSTANCE;
    static {
      Module defaultInstance = new Module();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Module.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.Module getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<Module> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<Module> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PackagePartsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.jvm.PackageParts)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @return Whether the packageFqName field is set.
     */
    boolean hasPackageFqName();
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @return The packageFqName.
     */
    java.lang.String getPackageFqName();
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @return The bytes for packageFqName.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes();

    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @return A list containing the shortClassName.
     */
    java.util.List<java.lang.String>
        getShortClassNameList();
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @return The count of shortClassName.
     */
    int getShortClassNameCount();
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param index The index of the element to return.
     * @return The shortClassName at the given index.
     */
    java.lang.String getShortClassName(int index);
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param index The index of the element to return.
     * @return The shortClassName at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getShortClassNameBytes(int index);

    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @return A list containing the multifileFacadeShortNameId.
     */
    java.util.List<java.lang.Integer> getMultifileFacadeShortNameIdList();
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @return The count of multifileFacadeShortNameId.
     */
    int getMultifileFacadeShortNameIdCount();
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @param index The index of the element to return.
     * @return The multifileFacadeShortNameId at the given index.
     */
    int getMultifileFacadeShortNameId(int index);

    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @return A list containing the multifileFacadeShortName.
     */
    java.util.List<java.lang.String>
        getMultifileFacadeShortNameList();
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @return The count of multifileFacadeShortName.
     */
    int getMultifileFacadeShortNameCount();
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param index The index of the element to return.
     * @return The multifileFacadeShortName at the given index.
     */
    java.lang.String getMultifileFacadeShortName(int index);
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param index The index of the element to return.
     * @return The multifileFacadeShortName at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getMultifileFacadeShortNameBytes(int index);

    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @return A list containing the classWithJvmPackageNameShortName.
     */
    java.util.List<java.lang.String>
        getClassWithJvmPackageNameShortNameList();
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @return The count of classWithJvmPackageNameShortName.
     */
    int getClassWithJvmPackageNameShortNameCount();
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param index The index of the element to return.
     * @return The classWithJvmPackageNameShortName at the given index.
     */
    java.lang.String getClassWithJvmPackageNameShortName(int index);
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param index The index of the element to return.
     * @return The classWithJvmPackageNameShortName at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getClassWithJvmPackageNameShortNameBytes(int index);

    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @return A list containing the classWithJvmPackageNameMultifileFacadeShortNameId.
     */
    java.util.List<java.lang.Integer> getClassWithJvmPackageNameMultifileFacadeShortNameIdList();
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @return The count of classWithJvmPackageNameMultifileFacadeShortNameId.
     */
    int getClassWithJvmPackageNameMultifileFacadeShortNameIdCount();
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @param index The index of the element to return.
     * @return The classWithJvmPackageNameMultifileFacadeShortNameId at the given index.
     */
    int getClassWithJvmPackageNameMultifileFacadeShortNameId(int index);

    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @return A list containing the classWithJvmPackageNamePackageId.
     */
    java.util.List<java.lang.Integer> getClassWithJvmPackageNamePackageIdList();
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @return The count of classWithJvmPackageNamePackageId.
     */
    int getClassWithJvmPackageNamePackageIdCount();
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @param index The index of the element to return.
     * @return The classWithJvmPackageNamePackageId at the given index.
     */
    int getClassWithJvmPackageNamePackageId(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.PackageParts}
   */
  public  static final class PackageParts extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
          PackageParts, PackageParts.Builder> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.jvm.PackageParts)
      PackagePartsOrBuilder {
    private PackageParts() {
      packageFqName_ = "";
      shortClassName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
      multifileFacadeShortNameId_ = emptyIntList();
      multifileFacadeShortName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
      classWithJvmPackageNameShortName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
      classWithJvmPackageNameMultifileFacadeShortNameId_ = emptyIntList();
      classWithJvmPackageNamePackageId_ = emptyIntList();
    }
    private int bitField0_;
    public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 1;
    private java.lang.String packageFqName_;
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @return Whether the packageFqName field is set.
     */
    @java.lang.Override
    public boolean hasPackageFqName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @return The packageFqName.
     */
    @java.lang.Override
    public java.lang.String getPackageFqName() {
      return packageFqName_;
    }
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @return The bytes for packageFqName.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes() {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(packageFqName_);
    }
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @param value The packageFqName to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setPackageFqName(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      bitField0_ |= 0x00000001;
      packageFqName_ = value;
    }
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     */
    private void clearPackageFqName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      packageFqName_ = getDefaultInstance().getPackageFqName();
    }
    /**
     * <pre>
     * Dot-separated Kotlin FQ name of the package.
     * </pre>
     *
     * <code>string package_fq_name = 1 [features = { ... }</code>
     * @param value The bytes for packageFqName to set.
     */
    private void setPackageFqNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      packageFqName_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int SHORT_CLASS_NAME_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> shortClassName_;
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @return A list containing the shortClassName.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getShortClassNameList() {
      return shortClassName_;
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @return The count of shortClassName.
     */
    @java.lang.Override
    public int getShortClassNameCount() {
      return shortClassName_.size();
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param index The index of the element to return.
     * @return The shortClassName at the given index.
     */
    @java.lang.Override
    public java.lang.String getShortClassName(int index) {
      return shortClassName_.get(index);
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the shortClassName at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getShortClassNameBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          shortClassName_.get(index));
    }
    private void ensureShortClassNameIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          shortClassName_;  if (!tmp.isModifiable()) {
        shortClassName_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param index The index to set the value at.
     * @param value The shortClassName to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setShortClassName(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureShortClassNameIsMutable();
      shortClassName_.set(index, value);
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param value The shortClassName to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addShortClassName(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureShortClassNameIsMutable();
      shortClassName_.add(value);
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param values The shortClassName to add.
     */
    private void addAllShortClassName(
        java.lang.Iterable<java.lang.String> values) {
      ensureShortClassNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, shortClassName_);
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     */
    private void clearShortClassName() {
      shortClassName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
     * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
     * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
     * class_with_jvm_package_name_short_name.
     * </pre>
     *
     * <code>repeated string short_class_name = 2;</code>
     * @param value The bytes of the shortClassName to add.
     */
    private void addShortClassNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureShortClassNameIsMutable();
      shortClassName_.add(value.toStringUtf8());
    }

    public static final int MULTIFILE_FACADE_SHORT_NAME_ID_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.Internal.IntList multifileFacadeShortNameId_;
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @return A list containing the multifileFacadeShortNameId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getMultifileFacadeShortNameIdList() {
      return multifileFacadeShortNameId_;
    }
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @return The count of multifileFacadeShortNameId.
     */
    @java.lang.Override
    public int getMultifileFacadeShortNameIdCount() {
      return multifileFacadeShortNameId_.size();
    }
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @param index The index of the element to return.
     * @return The multifileFacadeShortNameId at the given index.
     */
    @java.lang.Override
    public int getMultifileFacadeShortNameId(int index) {
      return multifileFacadeShortNameId_.getInt(index);
    }
    private int multifileFacadeShortNameIdMemoizedSerializedSize = -1;
    private void ensureMultifileFacadeShortNameIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = multifileFacadeShortNameId_;
      if (!tmp.isModifiable()) {
        multifileFacadeShortNameId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @param index The index to set the value at.
     * @param value The multifileFacadeShortNameId to set.
     */
    private void setMultifileFacadeShortNameId(
        int index, int value) {
      ensureMultifileFacadeShortNameIdIsMutable();
      multifileFacadeShortNameId_.setInt(index, value);
    }
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @param value The multifileFacadeShortNameId to add.
     */
    private void addMultifileFacadeShortNameId(int value) {
      ensureMultifileFacadeShortNameIdIsMutable();
      multifileFacadeShortNameId_.addInt(value);
    }
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     * @param values The multifileFacadeShortNameId to add.
     */
    private void addAllMultifileFacadeShortNameId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureMultifileFacadeShortNameIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, multifileFacadeShortNameId_);
    }
    /**
     * <pre>
     * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
     * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
     * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
     * </pre>
     *
     * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
     */
    private void clearMultifileFacadeShortNameId() {
      multifileFacadeShortNameId_ = emptyIntList();
    }

    public static final int MULTIFILE_FACADE_SHORT_NAME_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> multifileFacadeShortName_;
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @return A list containing the multifileFacadeShortName.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getMultifileFacadeShortNameList() {
      return multifileFacadeShortName_;
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @return The count of multifileFacadeShortName.
     */
    @java.lang.Override
    public int getMultifileFacadeShortNameCount() {
      return multifileFacadeShortName_.size();
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param index The index of the element to return.
     * @return The multifileFacadeShortName at the given index.
     */
    @java.lang.Override
    public java.lang.String getMultifileFacadeShortName(int index) {
      return multifileFacadeShortName_.get(index);
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the multifileFacadeShortName at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getMultifileFacadeShortNameBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          multifileFacadeShortName_.get(index));
    }
    private void ensureMultifileFacadeShortNameIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          multifileFacadeShortName_;  if (!tmp.isModifiable()) {
        multifileFacadeShortName_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param index The index to set the value at.
     * @param value The multifileFacadeShortName to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setMultifileFacadeShortName(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureMultifileFacadeShortNameIsMutable();
      multifileFacadeShortName_.set(index, value);
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param value The multifileFacadeShortName to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addMultifileFacadeShortName(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureMultifileFacadeShortNameIsMutable();
      multifileFacadeShortName_.add(value);
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param values The multifileFacadeShortName to add.
     */
    private void addAllMultifileFacadeShortName(
        java.lang.Iterable<java.lang.String> values) {
      ensureMultifileFacadeShortNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, multifileFacadeShortName_);
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     */
    private void clearMultifileFacadeShortName() {
      multifileFacadeShortName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
     *
     * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
     * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
     * otherwise behavior is unspecified.
     * </pre>
     *
     * <code>repeated string multifile_facade_short_name = 4;</code>
     * @param value The bytes of the multifileFacadeShortName to add.
     */
    private void addMultifileFacadeShortNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureMultifileFacadeShortNameIsMutable();
      multifileFacadeShortName_.add(value.toStringUtf8());
    }

    public static final int CLASS_WITH_JVM_PACKAGE_NAME_SHORT_NAME_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> classWithJvmPackageNameShortName_;
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @return A list containing the classWithJvmPackageNameShortName.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getClassWithJvmPackageNameShortNameList() {
      return classWithJvmPackageNameShortName_;
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @return The count of classWithJvmPackageNameShortName.
     */
    @java.lang.Override
    public int getClassWithJvmPackageNameShortNameCount() {
      return classWithJvmPackageNameShortName_.size();
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param index The index of the element to return.
     * @return The classWithJvmPackageNameShortName at the given index.
     */
    @java.lang.Override
    public java.lang.String getClassWithJvmPackageNameShortName(int index) {
      return classWithJvmPackageNameShortName_.get(index);
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the classWithJvmPackageNameShortName at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getClassWithJvmPackageNameShortNameBytes(int index) {
      return org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
          classWithJvmPackageNameShortName_.get(index));
    }
    private void ensureClassWithJvmPackageNameShortNameIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          classWithJvmPackageNameShortName_;  if (!tmp.isModifiable()) {
        classWithJvmPackageNameShortName_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param index The index to set the value at.
     * @param value The classWithJvmPackageNameShortName to set.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void setClassWithJvmPackageNameShortName(
        int index, java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureClassWithJvmPackageNameShortNameIsMutable();
      classWithJvmPackageNameShortName_.set(index, value);
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param value The classWithJvmPackageNameShortName to add.
     */
    @java.lang.SuppressWarnings("ReturnValueIgnored")
    private void addClassWithJvmPackageNameShortName(
        java.lang.String value) {
      value.getClass();  // minimal bytecode null check
      ensureClassWithJvmPackageNameShortNameIsMutable();
      classWithJvmPackageNameShortName_.add(value);
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param values The classWithJvmPackageNameShortName to add.
     */
    private void addAllClassWithJvmPackageNameShortName(
        java.lang.Iterable<java.lang.String> values) {
      ensureClassWithJvmPackageNameShortNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, classWithJvmPackageNameShortName_);
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     */
    private void clearClassWithJvmPackageNameShortName() {
      classWithJvmPackageNameShortName_ = org.jetbrains.kotlin.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
     * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
     * </pre>
     *
     * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
     * @param value The bytes of the classWithJvmPackageNameShortName to add.
     */
    private void addClassWithJvmPackageNameShortNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      ensureClassWithJvmPackageNameShortNameIsMutable();
      classWithJvmPackageNameShortName_.add(value.toStringUtf8());
    }

    public static final int CLASS_WITH_JVM_PACKAGE_NAME_MULTIFILE_FACADE_SHORT_NAME_ID_FIELD_NUMBER = 7;
    private org.jetbrains.kotlin.protobuf.Internal.IntList classWithJvmPackageNameMultifileFacadeShortNameId_;
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @return A list containing the classWithJvmPackageNameMultifileFacadeShortNameId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getClassWithJvmPackageNameMultifileFacadeShortNameIdList() {
      return classWithJvmPackageNameMultifileFacadeShortNameId_;
    }
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @return The count of classWithJvmPackageNameMultifileFacadeShortNameId.
     */
    @java.lang.Override
    public int getClassWithJvmPackageNameMultifileFacadeShortNameIdCount() {
      return classWithJvmPackageNameMultifileFacadeShortNameId_.size();
    }
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @param index The index of the element to return.
     * @return The classWithJvmPackageNameMultifileFacadeShortNameId at the given index.
     */
    @java.lang.Override
    public int getClassWithJvmPackageNameMultifileFacadeShortNameId(int index) {
      return classWithJvmPackageNameMultifileFacadeShortNameId_.getInt(index);
    }
    private int classWithJvmPackageNameMultifileFacadeShortNameIdMemoizedSerializedSize = -1;
    private void ensureClassWithJvmPackageNameMultifileFacadeShortNameIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = classWithJvmPackageNameMultifileFacadeShortNameId_;
      if (!tmp.isModifiable()) {
        classWithJvmPackageNameMultifileFacadeShortNameId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @param index The index to set the value at.
     * @param value The classWithJvmPackageNameMultifileFacadeShortNameId to set.
     */
    private void setClassWithJvmPackageNameMultifileFacadeShortNameId(
        int index, int value) {
      ensureClassWithJvmPackageNameMultifileFacadeShortNameIdIsMutable();
      classWithJvmPackageNameMultifileFacadeShortNameId_.setInt(index, value);
    }
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @param value The classWithJvmPackageNameMultifileFacadeShortNameId to add.
     */
    private void addClassWithJvmPackageNameMultifileFacadeShortNameId(int value) {
      ensureClassWithJvmPackageNameMultifileFacadeShortNameIdIsMutable();
      classWithJvmPackageNameMultifileFacadeShortNameId_.addInt(value);
    }
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     * @param values The classWithJvmPackageNameMultifileFacadeShortNameId to add.
     */
    private void addAllClassWithJvmPackageNameMultifileFacadeShortNameId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureClassWithJvmPackageNameMultifileFacadeShortNameIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, classWithJvmPackageNameMultifileFacadeShortNameId_);
    }
    /**
     * <pre>
     * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
     * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
     * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
     *
     * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
     * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
     */
    private void clearClassWithJvmPackageNameMultifileFacadeShortNameId() {
      classWithJvmPackageNameMultifileFacadeShortNameId_ = emptyIntList();
    }

    public static final int CLASS_WITH_JVM_PACKAGE_NAME_PACKAGE_ID_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.protobuf.Internal.IntList classWithJvmPackageNamePackageId_;
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @return A list containing the classWithJvmPackageNamePackageId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getClassWithJvmPackageNamePackageIdList() {
      return classWithJvmPackageNamePackageId_;
    }
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @return The count of classWithJvmPackageNamePackageId.
     */
    @java.lang.Override
    public int getClassWithJvmPackageNamePackageIdCount() {
      return classWithJvmPackageNamePackageId_.size();
    }
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @param index The index of the element to return.
     * @return The classWithJvmPackageNamePackageId at the given index.
     */
    @java.lang.Override
    public int getClassWithJvmPackageNamePackageId(int index) {
      return classWithJvmPackageNamePackageId_.getInt(index);
    }
    private int classWithJvmPackageNamePackageIdMemoizedSerializedSize = -1;
    private void ensureClassWithJvmPackageNamePackageIdIsMutable() {
      org.jetbrains.kotlin.protobuf.Internal.IntList tmp = classWithJvmPackageNamePackageId_;
      if (!tmp.isModifiable()) {
        classWithJvmPackageNamePackageId_ =
            org.jetbrains.kotlin.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @param index The index to set the value at.
     * @param value The classWithJvmPackageNamePackageId to set.
     */
    private void setClassWithJvmPackageNamePackageId(
        int index, int value) {
      ensureClassWithJvmPackageNamePackageIdIsMutable();
      classWithJvmPackageNamePackageId_.setInt(index, value);
    }
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @param value The classWithJvmPackageNamePackageId to add.
     */
    private void addClassWithJvmPackageNamePackageId(int value) {
      ensureClassWithJvmPackageNamePackageIdIsMutable();
      classWithJvmPackageNamePackageId_.addInt(value);
    }
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     * @param values The classWithJvmPackageNamePackageId to add.
     */
    private void addAllClassWithJvmPackageNamePackageId(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureClassWithJvmPackageNamePackageIdIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.addAll(
          values, classWithJvmPackageNamePackageId_);
    }
    /**
     * <pre>
     * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
     * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
     *
     * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
     * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
     * when a bunch of files from the same Kotlin package have the same JVM package name.
     * </pre>
     *
     * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
     */
    private void clearClassWithJvmPackageNamePackageId() {
      classWithJvmPackageNamePackageId_ = emptyIntList();
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts prototype) {
      return DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.jvm.PackageParts}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.jvm.PackageParts)
        org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackagePartsOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Dot-separated Kotlin FQ name of the package.
       * </pre>
       *
       * <code>string package_fq_name = 1 [features = { ... }</code>
       * @return Whether the packageFqName field is set.
       */
      @java.lang.Override
      public boolean hasPackageFqName() {
        return instance.hasPackageFqName();
      }
      /**
       * <pre>
       * Dot-separated Kotlin FQ name of the package.
       * </pre>
       *
       * <code>string package_fq_name = 1 [features = { ... }</code>
       * @return The packageFqName.
       */
      @java.lang.Override
      public java.lang.String getPackageFqName() {
        return instance.getPackageFqName();
      }
      /**
       * <pre>
       * Dot-separated Kotlin FQ name of the package.
       * </pre>
       *
       * <code>string package_fq_name = 1 [features = { ... }</code>
       * @return The bytes for packageFqName.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getPackageFqNameBytes() {
        return instance.getPackageFqNameBytes();
      }
      /**
       * <pre>
       * Dot-separated Kotlin FQ name of the package.
       * </pre>
       *
       * <code>string package_fq_name = 1 [features = { ... }</code>
       * @param value The packageFqName to set.
       * @return This builder for chaining.
       */
      public Builder setPackageFqName(
          java.lang.String value) {
        copyOnWrite();
        instance.setPackageFqName(value);
        return this;
      }
      /**
       * <pre>
       * Dot-separated Kotlin FQ name of the package.
       * </pre>
       *
       * <code>string package_fq_name = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPackageFqName() {
        copyOnWrite();
        instance.clearPackageFqName();
        return this;
      }
      /**
       * <pre>
       * Dot-separated Kotlin FQ name of the package.
       * </pre>
       *
       * <code>string package_fq_name = 1 [features = { ... }</code>
       * @param value The bytes for packageFqName to set.
       * @return This builder for chaining.
       */
      public Builder setPackageFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPackageFqNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @return A list containing the shortClassName.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getShortClassNameList() {
        return java.util.Collections.unmodifiableList(
            instance.getShortClassNameList());
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @return The count of shortClassName.
       */
      @java.lang.Override
      public int getShortClassNameCount() {
        return instance.getShortClassNameCount();
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @param index The index of the element to return.
       * @return The shortClassName at the given index.
       */
      @java.lang.Override
      public java.lang.String getShortClassName(int index) {
        return instance.getShortClassName(index);
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the shortClassName at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getShortClassNameBytes(int index) {
        return instance.getShortClassNameBytes(index);
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @param index The index to set the value at.
       * @param value The shortClassName to set.
       * @return This builder for chaining.
       */
      public Builder setShortClassName(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setShortClassName(index, value);
        return this;
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @param value The shortClassName to add.
       * @return This builder for chaining.
       */
      public Builder addShortClassName(
          java.lang.String value) {
        copyOnWrite();
        instance.addShortClassName(value);
        return this;
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @param values The shortClassName to add.
       * @return This builder for chaining.
       */
      public Builder addAllShortClassName(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllShortClassName(values);
        return this;
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearShortClassName() {
        copyOnWrite();
        instance.clearShortClassName();
        return this;
      }
      /**
       * <pre>
       * Short names of files, without extension, present in this package. Only single file facades and multi-file _parts_ are listed here
       * (multi-file facades are not present in this list, they are defined below). Only files whose JVM package name is equal to the
       * Kotlin package name (i.e. it has not been changed with &#64;JvmPackageName) are listed here, the rest are listed in
       * class_with_jvm_package_name_short_name.
       * </pre>
       *
       * <code>repeated string short_class_name = 2;</code>
       * @param value The bytes of the shortClassName to add.
       * @return This builder for chaining.
       */
      public Builder addShortClassNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addShortClassNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
       * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
       * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
       * </pre>
       *
       * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
       * @return A list containing the multifileFacadeShortNameId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getMultifileFacadeShortNameIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getMultifileFacadeShortNameIdList());
      }
      /**
       * <pre>
       * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
       * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
       * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
       * </pre>
       *
       * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
       * @return The count of multifileFacadeShortNameId.
       */
      @java.lang.Override
      public int getMultifileFacadeShortNameIdCount() {
        return instance.getMultifileFacadeShortNameIdCount();
      }
      /**
       * <pre>
       * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
       * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
       * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
       * </pre>
       *
       * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
       * @param index The index of the element to return.
       * @return The multifileFacadeShortNameId at the given index.
       */
      @java.lang.Override
      public int getMultifileFacadeShortNameId(int index) {
        return instance.getMultifileFacadeShortNameId(index);
      }
      /**
       * <pre>
       * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
       * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
       * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
       * </pre>
       *
       * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
       * @param value The multifileFacadeShortNameId to set.
       * @return This builder for chaining.
       */
      public Builder setMultifileFacadeShortNameId(
          int index, int value) {
        copyOnWrite();
        instance.setMultifileFacadeShortNameId(index, value);
        return this;
      }
      /**
       * <pre>
       * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
       * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
       * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
       * </pre>
       *
       * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
       * @param value The multifileFacadeShortNameId to add.
       * @return This builder for chaining.
       */
      public Builder addMultifileFacadeShortNameId(int value) {
        copyOnWrite();
        instance.addMultifileFacadeShortNameId(value);
        return this;
      }
      /**
       * <pre>
       * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
       * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
       * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
       * </pre>
       *
       * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
       * @param values The multifileFacadeShortNameId to add.
       * @return This builder for chaining.
       */
      public Builder addAllMultifileFacadeShortNameId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllMultifileFacadeShortNameId(values);
        return this;
      }
      /**
       * <pre>
       * For each name in short_class_name, index of the name of the corresponding multi-file facade class in multifile_facade_short_name + 1,
       * or 0 if the class is not a multi-file part. If there's no value in this list at some index, the value is assumed to be 0.
       * (e.g. if there are no multi-file classes in the module, this list is not going to exist at all)
       * </pre>
       *
       * <code>repeated int32 multifile_facade_short_name_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMultifileFacadeShortNameId() {
        copyOnWrite();
        instance.clearMultifileFacadeShortNameId();
        return this;
      }

      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @return A list containing the multifileFacadeShortName.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getMultifileFacadeShortNameList() {
        return java.util.Collections.unmodifiableList(
            instance.getMultifileFacadeShortNameList());
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @return The count of multifileFacadeShortName.
       */
      @java.lang.Override
      public int getMultifileFacadeShortNameCount() {
        return instance.getMultifileFacadeShortNameCount();
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @param index The index of the element to return.
       * @return The multifileFacadeShortName at the given index.
       */
      @java.lang.Override
      public java.lang.String getMultifileFacadeShortName(int index) {
        return instance.getMultifileFacadeShortName(index);
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the multifileFacadeShortName at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getMultifileFacadeShortNameBytes(int index) {
        return instance.getMultifileFacadeShortNameBytes(index);
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @param index The index to set the value at.
       * @param value The multifileFacadeShortName to set.
       * @return This builder for chaining.
       */
      public Builder setMultifileFacadeShortName(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setMultifileFacadeShortName(index, value);
        return this;
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @param value The multifileFacadeShortName to add.
       * @return This builder for chaining.
       */
      public Builder addMultifileFacadeShortName(
          java.lang.String value) {
        copyOnWrite();
        instance.addMultifileFacadeShortName(value);
        return this;
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @param values The multifileFacadeShortName to add.
       * @return This builder for chaining.
       */
      public Builder addAllMultifileFacadeShortName(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllMultifileFacadeShortName(values);
        return this;
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMultifileFacadeShortName() {
        copyOnWrite();
        instance.clearMultifileFacadeShortName();
        return this;
      }
      /**
       * <pre>
       * Short names of multi-file facades, used in multifile_facade_short_name_id to store the part -&gt; facade mapping.
       *
       * The package name of the multi-file facade is package_fq_name if this multi-file facade is not affected by &#64;JvmPackageName,
       * and the JVM package name of any multi-file part otherwise. Note that in the latter case, all parts must have the same JVM package name,
       * otherwise behavior is unspecified.
       * </pre>
       *
       * <code>repeated string multifile_facade_short_name = 4;</code>
       * @param value The bytes of the multifileFacadeShortName to add.
       * @return This builder for chaining.
       */
      public Builder addMultifileFacadeShortNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addMultifileFacadeShortNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @return A list containing the classWithJvmPackageNameShortName.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getClassWithJvmPackageNameShortNameList() {
        return java.util.Collections.unmodifiableList(
            instance.getClassWithJvmPackageNameShortNameList());
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @return The count of classWithJvmPackageNameShortName.
       */
      @java.lang.Override
      public int getClassWithJvmPackageNameShortNameCount() {
        return instance.getClassWithJvmPackageNameShortNameCount();
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @param index The index of the element to return.
       * @return The classWithJvmPackageNameShortName at the given index.
       */
      @java.lang.Override
      public java.lang.String getClassWithJvmPackageNameShortName(int index) {
        return instance.getClassWithJvmPackageNameShortName(index);
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @param index The index of the value to return.
       * @return The bytes of the classWithJvmPackageNameShortName at the given index.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.ByteString
          getClassWithJvmPackageNameShortNameBytes(int index) {
        return instance.getClassWithJvmPackageNameShortNameBytes(index);
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @param index The index to set the value at.
       * @param value The classWithJvmPackageNameShortName to set.
       * @return This builder for chaining.
       */
      public Builder setClassWithJvmPackageNameShortName(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setClassWithJvmPackageNameShortName(index, value);
        return this;
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @param value The classWithJvmPackageNameShortName to add.
       * @return This builder for chaining.
       */
      public Builder addClassWithJvmPackageNameShortName(
          java.lang.String value) {
        copyOnWrite();
        instance.addClassWithJvmPackageNameShortName(value);
        return this;
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @param values The classWithJvmPackageNameShortName to add.
       * @return This builder for chaining.
       */
      public Builder addAllClassWithJvmPackageNameShortName(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllClassWithJvmPackageNameShortName(values);
        return this;
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassWithJvmPackageNameShortName() {
        copyOnWrite();
        instance.clearClassWithJvmPackageNameShortName();
        return this;
      }
      /**
       * <pre>
       * Short names of files (single file facades and multi-file _parts_), whose JVM package differs from the Kotlin package because of
       * &#64;JvmPackageName. The JVM package name of each file is stored at the same index in class_with_jvm_package_name_package_id.
       * </pre>
       *
       * <code>repeated string class_with_jvm_package_name_short_name = 5;</code>
       * @param value The bytes of the classWithJvmPackageNameShortName to add.
       * @return This builder for chaining.
       */
      public Builder addClassWithJvmPackageNameShortNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        copyOnWrite();
        instance.addClassWithJvmPackageNameShortNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
       * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
       * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
       *
       * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
       * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
       * @return A list containing the classWithJvmPackageNameMultifileFacadeShortNameId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getClassWithJvmPackageNameMultifileFacadeShortNameIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getClassWithJvmPackageNameMultifileFacadeShortNameIdList());
      }
      /**
       * <pre>
       * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
       * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
       * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
       *
       * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
       * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
       * @return The count of classWithJvmPackageNameMultifileFacadeShortNameId.
       */
      @java.lang.Override
      public int getClassWithJvmPackageNameMultifileFacadeShortNameIdCount() {
        return instance.getClassWithJvmPackageNameMultifileFacadeShortNameIdCount();
      }
      /**
       * <pre>
       * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
       * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
       * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
       *
       * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
       * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
       * @param index The index of the element to return.
       * @return The classWithJvmPackageNameMultifileFacadeShortNameId at the given index.
       */
      @java.lang.Override
      public int getClassWithJvmPackageNameMultifileFacadeShortNameId(int index) {
        return instance.getClassWithJvmPackageNameMultifileFacadeShortNameId(index);
      }
      /**
       * <pre>
       * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
       * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
       * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
       *
       * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
       * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
       * @param value The classWithJvmPackageNameMultifileFacadeShortNameId to set.
       * @return This builder for chaining.
       */
      public Builder setClassWithJvmPackageNameMultifileFacadeShortNameId(
          int index, int value) {
        copyOnWrite();
        instance.setClassWithJvmPackageNameMultifileFacadeShortNameId(index, value);
        return this;
      }
      /**
       * <pre>
       * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
       * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
       * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
       *
       * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
       * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
       * @param value The classWithJvmPackageNameMultifileFacadeShortNameId to add.
       * @return This builder for chaining.
       */
      public Builder addClassWithJvmPackageNameMultifileFacadeShortNameId(int value) {
        copyOnWrite();
        instance.addClassWithJvmPackageNameMultifileFacadeShortNameId(value);
        return this;
      }
      /**
       * <pre>
       * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
       * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
       * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
       *
       * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
       * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
       * @param values The classWithJvmPackageNameMultifileFacadeShortNameId to add.
       * @return This builder for chaining.
       */
      public Builder addAllClassWithJvmPackageNameMultifileFacadeShortNameId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllClassWithJvmPackageNameMultifileFacadeShortNameId(values);
        return this;
      }
      /**
       * <pre>
       * This list is an addition to class_with_jvm_package_name_short_name exactly almost in the same way as
       * multifile_facade_short_name_id is an addition to short_class_name. The only difference is that this list contains _full_ internal
       * names of multi-file facades whose JVM package differs from the Kotlin package because of &#64;JvmPackageName.
       *
       * For each name in class_with_jvm_package_name_short_name, index of the name of the corresponding multi-file facade class in
       * multifile_facade_short_name + 1, or 0 if the class is not a multi-file part.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_multifile_facade_short_name_id = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassWithJvmPackageNameMultifileFacadeShortNameId() {
        copyOnWrite();
        instance.clearClassWithJvmPackageNameMultifileFacadeShortNameId();
        return this;
      }

      /**
       * <pre>
       * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
       * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
       *
       * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
       * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
       * when a bunch of files from the same Kotlin package have the same JVM package name.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
       * @return A list containing the classWithJvmPackageNamePackageId.
       */
      @java.lang.Override
      public java.util.List<java.lang.Integer>
          getClassWithJvmPackageNamePackageIdList() {
        return java.util.Collections.unmodifiableList(
            instance.getClassWithJvmPackageNamePackageIdList());
      }
      /**
       * <pre>
       * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
       * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
       *
       * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
       * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
       * when a bunch of files from the same Kotlin package have the same JVM package name.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
       * @return The count of classWithJvmPackageNamePackageId.
       */
      @java.lang.Override
      public int getClassWithJvmPackageNamePackageIdCount() {
        return instance.getClassWithJvmPackageNamePackageIdCount();
      }
      /**
       * <pre>
       * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
       * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
       *
       * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
       * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
       * when a bunch of files from the same Kotlin package have the same JVM package name.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
       * @param index The index of the element to return.
       * @return The classWithJvmPackageNamePackageId at the given index.
       */
      @java.lang.Override
      public int getClassWithJvmPackageNamePackageId(int index) {
        return instance.getClassWithJvmPackageNamePackageId(index);
      }
      /**
       * <pre>
       * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
       * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
       *
       * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
       * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
       * when a bunch of files from the same Kotlin package have the same JVM package name.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
       * @param value The classWithJvmPackageNamePackageId to set.
       * @return This builder for chaining.
       */
      public Builder setClassWithJvmPackageNamePackageId(
          int index, int value) {
        copyOnWrite();
        instance.setClassWithJvmPackageNamePackageId(index, value);
        return this;
      }
      /**
       * <pre>
       * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
       * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
       *
       * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
       * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
       * when a bunch of files from the same Kotlin package have the same JVM package name.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
       * @param value The classWithJvmPackageNamePackageId to add.
       * @return This builder for chaining.
       */
      public Builder addClassWithJvmPackageNamePackageId(int value) {
        copyOnWrite();
        instance.addClassWithJvmPackageNamePackageId(value);
        return this;
      }
      /**
       * <pre>
       * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
       * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
       *
       * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
       * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
       * when a bunch of files from the same Kotlin package have the same JVM package name.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
       * @param values The classWithJvmPackageNamePackageId to add.
       * @return This builder for chaining.
       */
      public Builder addAllClassWithJvmPackageNamePackageId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllClassWithJvmPackageNamePackageId(values);
        return this;
      }
      /**
       * <pre>
       * For each name in class_with_jvm_package_name_short_name, the index (into PackageTable#jvm_package_name) of the JVM package name.
       * This list should have at least one element, otherwise classes with JVM package names are going to be ignored completely.
       *
       * If there's no value in this list at some index other than 0, the value is assumed to be the same as the value of the last element
       * of this list. The intended use case for this optimization is to have just a list of a single element in the most frequent case
       * when a bunch of files from the same Kotlin package have the same JVM package name.
       * </pre>
       *
       * <code>repeated int32 class_with_jvm_package_name_package_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassWithJvmPackageNamePackageId() {
        copyOnWrite();
        instance.clearClassWithJvmPackageNamePackageId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.jvm.PackageParts)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "packageFqName_",
              "shortClassName_",
              "multifileFacadeShortNameId_",
              "multifileFacadeShortName_",
              "classWithJvmPackageNameShortName_",
              "classWithJvmPackageNamePackageId_",
              "classWithJvmPackageNameMultifileFacadeShortNameId_",
            };
            java.lang.String info =
                "\u0004\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0006\u0001\u0001\u1508\u0000\u0002" +
                "\u001a\u0003\'\u0004\u001a\u0005\u001a\u0006\'\u0007\'";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts> parser = PARSER;
          if (parser == null) {
            synchronized (org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.jvm.PackageParts)
    private static final org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts DEFAULT_INSTANCE;
    static {
      PackageParts defaultInstance = new PackageParts();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PackageParts.class, defaultInstance);
    }

    public static org.jetbrains.kotlin.metadata.jvm.JvmModuleProtoBuf.PackageParts getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile org.jetbrains.kotlin.protobuf.Parser<PackageParts> PARSER;

    public static org.jetbrains.kotlin.protobuf.Parser<PackageParts> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}