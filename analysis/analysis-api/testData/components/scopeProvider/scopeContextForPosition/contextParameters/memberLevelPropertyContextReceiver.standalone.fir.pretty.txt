element: val x = 1
implicit values:
  KaImplicitReceiver:
    scopeIndexInTower = 1
    type = kotlin.String
    ownerSymbol = KaKotlinPropertySymbol:
      val foo: ERROR CLASS: Cannot infer variable type without initializer . getter . delegate

  KaImplicitReceiver:
    scopeIndexInTower = 3
    type = one.B
    ownerSymbol = KaNamedClassSymbol:
      one/B

scopes:
  LocalScope, index = 0
    packages: 0
    classifiers: 0
    callables: 0
    constructors: 0

  TypeScope, index = 1
    packages: 0
    classifiers: 1
      companion object
    callables: 8
      fun plus(other: kotlin.Any?): kotlin.String
      fun get(index: kotlin.Int): kotlin.Char
      fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence
      fun compareTo(other: kotlin.String): kotlin.Int
      fun equals(other: kotlin.Any?): kotlin.Boolean
      fun toString(): kotlin.String
      val length: kotlin.Int
      fun hashCode(): kotlin.Int
    constructors: 1
      constructor()

  LocalScope, index = 2
    packages: 0
    classifiers: 0
    callables: 0
    constructors: 0

  TypeScope, index = 3
    packages: 0
    classifiers: 0
    callables: 4
      context(A@one.A, Int@kotlin.Int)
      val kotlin.String.foo: ERROR
        get()
      fun equals(other: kotlin.Any?): kotlin.Boolean
      fun hashCode(): kotlin.Int
      fun toString(): kotlin.String
    constructors: 1
      constructor()

  ExplicitSimpleImportingScope, index = 4
    packages: 0
    classifiers: 0
    callables: 0
    constructors: 0

  PackageMemberScope, index = 5
    packages: 0
    classifiers: 2
      class A
      class B
    callables: 0
    constructors: 0

  DefaultSimpleImportingScope, index = 6

  DefaultSimpleImportingScope, index = 7

  ExplicitStarImportingScope, index = 8
    packages: 0
    classifiers: 0
    callables: 0
    constructors: 0

  DefaultStarImportingScope, index = 9

