interface Monoid<T : Any?> : Semigroup<T> {
  abstract val unit: T
    abstract get

}

interface Semigroup<T : Any?> {
  abstract infix fun T.combine(other: T): T

}

object IntMonoid : Monoid<Int> {
  override val unit: Int
    field = 0
    override get

  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override infix fun Int.combine(other: Int): Int {
    return <this>.plus(other = other)
  }

}

object StringMonoid : Monoid<String> {
  override val unit: String
    field = ""
    override get

  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override infix fun String.combine(other: String): String {
    return <this>.plus(other = other)
  }

}

fun box(): String {
  with<IntMonoid, Int>(receiver = IntMonoid, block = local fun IntMonoid.<anonymous>(): Int {
    return sum<Int>(/* $context_receiver_0 = $this$with, <this> = listOf<Int>(elements = [1, 2, 3]) */)
  }
) /*~> Unit */
  return with<StringMonoid, String>(receiver = StringMonoid, block = local fun StringMonoid.<anonymous>(): String {
    return sum<String>(/* $context_receiver_0 = $this$with, <this> = listOf<String>(elements = ["O", "K"]) */)
  }
)
}

context($context_receiver_0: Monoid<T>)
fun <T : Any?> List<T>.sum(): T {
  return fold<T, T>(/* <this> = <this>, */ initial = $context_receiver_0.<get-unit>(), operation = local fun <anonymous>(acc: T, e: T): T {
    return $context_receiver_0.combine(/* <this> = acc, */ other = e)
  }
)
}

