class FinalList : SomeList<String> {
  constructor() /* primary */ {
    super/*SomeList*/<String>()
    /* <init>() */

  }

}

data class Some<T : Any?> {
  val value: T
    field = value
    get

  constructor(value: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): T {
    return <this>.#value
  }

  fun copy(value: T = <this>.#value): Some<T> {
    return Some<T>(value = value)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Some<T> -> return false
    }
    val tmp_0: Some<T> = other as Some<T>
    when {
      EQEQ(arg0 = <this>.#value, arg1 = tmp_0.#value).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return when {
      EQEQ(arg0 = <this>.#value, arg1 = null) -> 0
      else -> <this>.#value.hashCode()
    }
  }

  override fun toString(): String {
    return "Some(" + "value=" + <this>.#value + ")"
  }

}

open class SomeList<T : Any?> : ArrayList<Some<T>>, MyList<T> {
  constructor() /* primary */ {
    super/*ArrayList*/<@FlexibleNullability Some<T>?>()
    /* <init>() */

  }

}

interface MyList<T : Any?> : List<Some<T>> {
}

