RAW_FIR:
TARGET: public final [ResolvedTo(RAW_FIR)] class Int : kotlin.Number, kotlin.Comparable<kotlin.Int> {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

IMPORTS:
TARGET: public final [ResolvedTo(RAW_FIR)] class Int : kotlin.Number, kotlin.Comparable<kotlin.Int> {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

COMPILER_REQUIRED_ANNOTATIONS:
TARGET: public final [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class Int : kotlin.Number, kotlin.Comparable<kotlin.Int> {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

COMPANION_GENERATION:
TARGET: public final [ResolvedTo(COMPANION_GENERATION)] class Int : kotlin.Number, kotlin.Comparable<kotlin.Int> {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

SUPER_TYPES:
TARGET: public final [ResolvedTo(SUPER_TYPES)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

TYPES:
TARGET: public final [ResolvedTo(TYPES)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

STATUS:
TARGET: public final [ResolvedTo(STATUS)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

EXPECT_ACTUAL_MATCHING:
TARGET: public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

CONTRACTS:
TARGET: public final [ResolvedTo(CONTRACTS)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

IMPLICIT_TYPES_BODY_RESOLVE:
TARGET: public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

CONSTANT_EVALUATION:
TARGET: public final [ResolvedTo(CONSTANT_EVALUATION)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

ANNOTATION_ARGUMENTS:
TARGET: public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        LAZY_super<<implicit>>
    }

    public final? companion [ResolvedTo(RAW_FIR)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(RAW_FIR)] val MIN_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        public final const [ResolvedTo(RAW_FIR)] val MAX_VALUE: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BYTES: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

        @kotlin.SinceKotlin[Unresolved]() public final const [ResolvedTo(RAW_FIR)] val SIZE_BITS: kotlin.Int = LAZY_EXPRESSION
            public [ResolvedTo(RAW_FIR)] [ContainingClassKey=Companion] get(): kotlin.Int

    }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun compareTo([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun plus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun minus([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun times([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun div([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.Long { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Float): kotlin.Float { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rem([ResolvedTo(RAW_FIR)] other: kotlin.Double): kotlin.Double { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun inc(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun dec(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryPlus(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun unaryMinus(): kotlin.Int { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    public final operator [ResolvedTo(RAW_FIR)] fun rangeTo([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Byte): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Short): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.ranges.IntRange { LAZY_BLOCK }

    @kotlin.SinceKotlin[Unresolved]() @kotlin.WasExperimental[Unresolved]() public final operator [ResolvedTo(RAW_FIR)] fun rangeUntil([ResolvedTo(RAW_FIR)] other: kotlin.Long): kotlin.ranges.LongRange { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shl([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun shr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun ushr([ResolvedTo(RAW_FIR)] bitCount: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun and([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun or([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final infix [ResolvedTo(RAW_FIR)] fun xor([ResolvedTo(RAW_FIR)] other: kotlin.Int): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public final [ResolvedTo(RAW_FIR)] fun inv(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toByte(): kotlin.Byte { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toChar(): kotlin.Char { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toShort(): kotlin.Short { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toInt(): kotlin.Int { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toLong(): kotlin.Long { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toFloat(): kotlin.Float { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toDouble(): kotlin.Double { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open [ResolvedTo(RAW_FIR)] fun toString(): kotlin.String { LAZY_BLOCK }

    @kotlin.internal.IntrinsicConstEvaluation[Unresolved]() public open operator [ResolvedTo(RAW_FIR)] fun equals([ResolvedTo(RAW_FIR)] other: kotlin.Any?): kotlin.Boolean { LAZY_BLOCK }

}

BODY_RESOLVE:
TARGET: public final [ResolvedTo(BODY_RESOLVE)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
    private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
        super<R|kotlin/Number|>()
    }

    public final companion [ResolvedTo(STATUS)] object Companion : R|kotlin/Any| {
        private [ResolvedTo(STATUS)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
            LAZY_super<R|kotlin/Any|>
        }

        public final const [ResolvedTo(STATUS)] val MIN_VALUE: R|kotlin/Int| = LAZY_EXPRESSION
            public [ResolvedTo(STATUS)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        public final const [ResolvedTo(STATUS)] val MAX_VALUE: R|kotlin/Int| = LAZY_EXPRESSION
            public [ResolvedTo(STATUS)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(STATUS)] val SIZE_BYTES: R|kotlin/Int| = LAZY_EXPRESSION
            public [ResolvedTo(STATUS)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(STATUS)] val SIZE_BITS: R|kotlin/Int| = LAZY_EXPRESSION
            public [ResolvedTo(STATUS)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

    }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun compareTo([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun compareTo([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(STATUS)] fun compareTo([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun compareTo([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun compareTo([ResolvedTo(STATUS)] other: R|kotlin/Float|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun compareTo([ResolvedTo(STATUS)] other: R|kotlin/Double|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun plus([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun plus([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun plus([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun plus([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/Long| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun plus([ResolvedTo(STATUS)] other: R|kotlin/Float|): R|kotlin/Float| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun plus([ResolvedTo(STATUS)] other: R|kotlin/Double|): R|kotlin/Double| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun minus([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun minus([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun minus([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun minus([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/Long| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun minus([ResolvedTo(STATUS)] other: R|kotlin/Float|): R|kotlin/Float| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun minus([ResolvedTo(STATUS)] other: R|kotlin/Double|): R|kotlin/Double| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun times([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun times([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun times([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun times([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/Long| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun times([ResolvedTo(STATUS)] other: R|kotlin/Float|): R|kotlin/Float| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun times([ResolvedTo(STATUS)] other: R|kotlin/Double|): R|kotlin/Double| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun div([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun div([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun div([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun div([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/Long| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun div([ResolvedTo(STATUS)] other: R|kotlin/Float|): R|kotlin/Float| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun div([ResolvedTo(STATUS)] other: R|kotlin/Double|): R|kotlin/Double| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun rem([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun rem([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun rem([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun rem([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/Long| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun rem([ResolvedTo(STATUS)] other: R|kotlin/Float|): R|kotlin/Float| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun rem([ResolvedTo(STATUS)] other: R|kotlin/Double|): R|kotlin/Double| { LAZY_BLOCK }

    public final operator [ResolvedTo(STATUS)] fun inc(): R|kotlin/Int| { LAZY_BLOCK }

    public final operator [ResolvedTo(STATUS)] fun dec(): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun unaryPlus(): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(STATUS)] fun unaryMinus(): R|kotlin/Int| { LAZY_BLOCK }

    public final operator [ResolvedTo(STATUS)] fun rangeTo([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| { LAZY_BLOCK }

    public final operator [ResolvedTo(STATUS)] fun rangeTo([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| { LAZY_BLOCK }

    public final operator [ResolvedTo(STATUS)] fun rangeTo([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| { LAZY_BLOCK }

    public final operator [ResolvedTo(STATUS)] fun rangeTo([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(STATUS)] fun rangeUntil([ResolvedTo(STATUS)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(STATUS)] fun rangeUntil([ResolvedTo(STATUS)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(STATUS)] fun rangeUntil([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| { LAZY_BLOCK }

    @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(STATUS)] fun rangeUntil([ResolvedTo(STATUS)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(STATUS)] fun shl([ResolvedTo(STATUS)] bitCount: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(STATUS)] fun shr([ResolvedTo(STATUS)] bitCount: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(STATUS)] fun ushr([ResolvedTo(STATUS)] bitCount: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(STATUS)] fun and([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(STATUS)] fun or([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(STATUS)] fun xor([ResolvedTo(STATUS)] other: R|kotlin/Int|): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(STATUS)] fun inv(): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toByte(): R|kotlin/Byte| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toChar(): R|kotlin/Char| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toShort(): R|kotlin/Short| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toInt(): R|kotlin/Int| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toLong(): R|kotlin/Long| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toFloat(): R|kotlin/Float| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toDouble(): R|kotlin/Double| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(STATUS)] fun toString(): R|kotlin/String| { LAZY_BLOCK }

    @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(STATUS)] fun equals([ResolvedTo(STATUS)] other: R|kotlin/Any?|): R|kotlin/Boolean| { LAZY_BLOCK }

}

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] kotlin.kotlin_builtins
    public final inline [ResolvedTo(BODY_RESOLVE)] fun <reified [ResolvedTo(BODY_RESOLVE)] T> arrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/Array<out T>|): R|kotlin/Array<T>| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun <reified [ResolvedTo(BODY_RESOLVE)] T> arrayOfNulls([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/Array<T?>| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun booleanArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/BooleanArray|): R|kotlin/BooleanArray| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun byteArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/ByteArray|): R|kotlin/ByteArray| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun charArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/CharArray|): R|kotlin/CharArray| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun doubleArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/DoubleArray|): R|kotlin/DoubleArray| {
    }
    public final inline [ResolvedTo(BODY_RESOLVE)] fun <reified [ResolvedTo(BODY_RESOLVE)] T> emptyArray(): R|kotlin/Array<T>| {
    }
    @R|kotlin/SinceKotlin|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] fun <reified [ResolvedTo(BODY_RESOLVE)] T : R|kotlin/Enum<T>|> enumValueOf([ResolvedTo(BODY_RESOLVE)] name: R|kotlin/String|): R|T| {
    }
    @R|kotlin/SinceKotlin|[Types]() public final inline [ResolvedTo(BODY_RESOLVE)] fun <reified [ResolvedTo(BODY_RESOLVE)] T : R|kotlin/Enum<T>|> enumValues(): R|kotlin/Array<T>| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun floatArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/FloatArray|): R|kotlin/FloatArray| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun intArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/IntArray|): R|kotlin/IntArray| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun longArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/LongArray|): R|kotlin/LongArray| {
    }
    public final operator [ResolvedTo(BODY_RESOLVE)] fun [ResolvedTo(BODY_RESOLVE)] R|kotlin/String?|.plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/String| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun shortArrayOf([ResolvedTo(BODY_RESOLVE)] vararg elements: R|kotlin/ShortArray|): R|kotlin/ShortArray| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] fun [ResolvedTo(BODY_RESOLVE)] R|kotlin/Any?|.toString(): R|kotlin/String| {
    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Annotation : R|kotlin/Any| {
    }
    public open [ResolvedTo(BODY_RESOLVE)] class Any {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Any] constructor(): R|kotlin/Any|

        public open operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

        public open [ResolvedTo(BODY_RESOLVE)] fun hashCode(): R|kotlin/Int| {
        }

        public open [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Array<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Array] constructor<[ResolvedTo(BODY_RESOLVE)] T>([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> T|): R|kotlin/Array<T>| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Array] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|T| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|T|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/Iterator<T>| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Boolean : R|kotlin/Comparable<kotlin/Boolean>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Boolean] constructor(): R|kotlin/Boolean| {
            super<R|kotlin/Any|>()
        }

        @R|kotlin/SinceKotlin|[Types]() public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Boolean.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun not(): R|kotlin/Boolean| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun and([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Boolean|): R|kotlin/Boolean| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun or([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Boolean|): R|kotlin/Boolean| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun xor([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Boolean|): R|kotlin/Boolean| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Boolean|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun hashCode(): R|kotlin/Int| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class BooleanArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BooleanArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/BooleanArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BooleanArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Boolean|): R|kotlin/BooleanArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=BooleanArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Boolean| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Boolean|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/BooleanIterator| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Byte : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Byte>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Byte] constructor(): R|kotlin/Byte| {
            super<R|kotlin/Number|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Byte.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_VALUE: R|kotlin/Byte| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Byte|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_VALUE: R|kotlin/Byte| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Byte|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BYTES: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BITS: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun inc(): R|kotlin/Byte| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun dec(): R|kotlin/Byte| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryPlus(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryMinus(): R|kotlin/Int| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class ByteArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ByteArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/ByteArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ByteArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Byte|): R|kotlin/ByteArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ByteArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Byte| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Byte|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/ByteIterator| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Char : R|kotlin/Comparable<kotlin/Char>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Char] constructor(): R|kotlin/Char| {
            super<R|kotlin/Any|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Char.Companion| {
                super<R|kotlin/Any|>()
            }

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val MIN_VALUE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val MAX_VALUE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_HIGH_SURROGATE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_HIGH_SURROGATE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_LOW_SURROGATE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_LOW_SURROGATE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_SURROGATE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_SURROGATE: R|kotlin/Char| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Char|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BYTES: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BITS: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Char|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Char| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Char|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Char| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun inc(): R|kotlin/Char| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun dec(): R|kotlin/Char| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Char|): R|kotlin/ranges/CharRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Char|): R|kotlin/ranges/CharRange| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun hashCode(): R|kotlin/Int| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class CharArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=CharArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/CharArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=CharArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Char|): R|kotlin/CharArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=CharArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Char| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Char|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/CharIterator| {
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface CharSequence : R|kotlin/Any| {
        public abstract [ResolvedTo(BODY_RESOLVE)] val length: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=CharSequence] get(): R|kotlin/Int|

        public abstract operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Char|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun subSequence([ResolvedTo(BODY_RESOLVE)] startIndex: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] endIndex: R|kotlin/Int|): R|kotlin/CharSequence|

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Comparable<[ResolvedTo(BODY_RESOLVE)] in T> : R|kotlin/Any| {
        public abstract operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|T|): R|kotlin/Int|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class ContextFunctionTypeParams : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ContextFunctionTypeParams] constructor([ResolvedTo(BODY_RESOLVE)] count: R|kotlin/Int|): R|kotlin/ContextFunctionTypeParams| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val count: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ContextFunctionTypeParams] get(): R|kotlin/Int|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class Deprecated : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Deprecated] constructor([ResolvedTo(BODY_RESOLVE)] message: R|kotlin/String|, [ResolvedTo(BODY_RESOLVE)] replaceWith: R|kotlin/ReplaceWith| = <Unresolved name: COMPILED_CODE>#, [ResolvedTo(BODY_RESOLVE)] level: R|kotlin/DeprecationLevel| = <Unresolved name: COMPILED_CODE>#): R|kotlin/Deprecated| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val message: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Deprecated] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] val replaceWith: R|kotlin/ReplaceWith|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Deprecated] get(): R|kotlin/ReplaceWith|

        public final [ResolvedTo(BODY_RESOLVE)] val level: R|kotlin/DeprecationLevel|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Deprecated] get(): R|kotlin/DeprecationLevel|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class DeprecatedSinceKotlin : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecatedSinceKotlin] constructor([ResolvedTo(BODY_RESOLVE)] warningSince: R|kotlin/String| = <Unresolved name: COMPILED_CODE>#, [ResolvedTo(BODY_RESOLVE)] errorSince: R|kotlin/String| = <Unresolved name: COMPILED_CODE>#, [ResolvedTo(BODY_RESOLVE)] hiddenSince: R|kotlin/String| = <Unresolved name: COMPILED_CODE>#): R|kotlin/DeprecatedSinceKotlin| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val warningSince: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecatedSinceKotlin] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] val errorSince: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecatedSinceKotlin] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] val hiddenSince: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecatedSinceKotlin] get(): R|kotlin/String|

    }
    public final [ResolvedTo(BODY_RESOLVE)] enum class DeprecationLevel : R|kotlin/Enum<kotlin/DeprecationLevel>|, R|kotlin/Enum<kotlin/DeprecationLevel>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecationLevel] constructor(): R|kotlin/DeprecationLevel| {
            super<R|kotlin/Enum<kotlin/DeprecationLevel>|>()
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecationLevel] enum entry WARNING: R|kotlin/DeprecationLevel|
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecationLevel] enum entry ERROR: R|kotlin/DeprecationLevel|
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecationLevel] enum entry HIDDEN: R|kotlin/DeprecationLevel|
        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecationLevel] fun values(): R|kotlin/Array<kotlin/DeprecationLevel>| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecationLevel] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/DeprecationLevel| {
        }

        public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DeprecationLevel] val entries: R|kotlin/enums/EnumEntries<kotlin/DeprecationLevel>|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<kotlin/DeprecationLevel>|

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Double : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Double>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Double] constructor(): R|kotlin/Double| {
            super<R|kotlin/Number|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Double.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_VALUE: R|kotlin/Double| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Double|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_VALUE: R|kotlin/Double| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Double|

            public final const [ResolvedTo(BODY_RESOLVE)] val POSITIVE_INFINITY: R|kotlin/Double| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Double|

            public final const [ResolvedTo(BODY_RESOLVE)] val NEGATIVE_INFINITY: R|kotlin/Double| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Double|

            public final const [ResolvedTo(BODY_RESOLVE)] val NaN: R|kotlin/Double| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Double|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BYTES: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BITS: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun inc(): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun dec(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryPlus(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryMinus(): R|kotlin/Double| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class DoubleArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DoubleArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/DoubleArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DoubleArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Double|): R|kotlin/DoubleArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DoubleArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Double|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/DoubleIterator| {
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class DslMarker : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=DslMarker] constructor(): R|kotlin/DslMarker| {
            super<R|kotlin/Any|>()
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] class Enum<[ResolvedTo(BODY_RESOLVE)] E : R|kotlin/Enum<E>|> : R|kotlin/Comparable<E>| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Enum] constructor<[ResolvedTo(BODY_RESOLVE)] E : R|kotlin/Enum<E>|>([ResolvedTo(BODY_RESOLVE)] name: R|kotlin/String|, [ResolvedTo(BODY_RESOLVE)] ordinal: R|kotlin/Int|): R|kotlin/Enum<E>| {
            super<R|kotlin/Any|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Enum.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] val name: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Enum] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] val ordinal: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Enum] get(): R|kotlin/Int|

        public final override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|E|): R|kotlin/Int| {
        }

        protected final [ResolvedTo(BODY_RESOLVE)] fun clone(): R|kotlin/Any| {
        }

        public final override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

        public final override [ResolvedTo(BODY_RESOLVE)] fun hashCode(): R|kotlin/Int| {
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

    }
    @R|kotlin/RequiresOptIn|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class ExperimentalStdlibApi : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ExperimentalStdlibApi] constructor(): R|kotlin/ExperimentalStdlibApi| {
            super<R|kotlin/Any|>()
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/SinceKotlin|[Types]() @R|kotlin/RequiresOptIn|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class ExperimentalSubclassOptIn : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ExperimentalSubclassOptIn] constructor(): R|kotlin/ExperimentalSubclassOptIn| {
            super<R|kotlin/Any|>()
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class ExtensionFunctionType : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ExtensionFunctionType] constructor(): R|kotlin/ExtensionFunctionType| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Float : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Float>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Float] constructor(): R|kotlin/Float| {
            super<R|kotlin/Number|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Float.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_VALUE: R|kotlin/Float| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Float|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_VALUE: R|kotlin/Float| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Float|

            public final const [ResolvedTo(BODY_RESOLVE)] val POSITIVE_INFINITY: R|kotlin/Float| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Float|

            public final const [ResolvedTo(BODY_RESOLVE)] val NEGATIVE_INFINITY: R|kotlin/Float| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Float|

            public final const [ResolvedTo(BODY_RESOLVE)] val NaN: R|kotlin/Float| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Float|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BYTES: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BITS: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun inc(): R|kotlin/Float| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun dec(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryPlus(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryMinus(): R|kotlin/Float| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class FloatArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=FloatArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/FloatArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=FloatArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Float|): R|kotlin/FloatArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=FloatArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Float| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Float|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/FloatIterator| {
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Function<[ResolvedTo(BODY_RESOLVE)] out R> : R|kotlin/Any| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] class Int : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Int>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Int] constructor(): R|kotlin/Int| {
            super<R|kotlin/Number|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Int.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_VALUE: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_VALUE: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BYTES: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BITS: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun inc(): R|kotlin/Int| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun dec(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryPlus(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryMinus(): R|kotlin/Int| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun shl([ResolvedTo(BODY_RESOLVE)] bitCount: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun shr([ResolvedTo(BODY_RESOLVE)] bitCount: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun ushr([ResolvedTo(BODY_RESOLVE)] bitCount: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun and([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun or([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun xor([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun inv(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class IntArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=IntArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/IntArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=IntArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Int|): R|kotlin/IntArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=IntArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Int| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Int|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/IntIterator| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Long : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Long>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Long] constructor(): R|kotlin/Long| {
            super<R|kotlin/Number|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Long.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_VALUE: R|kotlin/Long| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Long|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_VALUE: R|kotlin/Long| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Long|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BYTES: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BITS: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Long| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Long| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun inc(): R|kotlin/Long| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun dec(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryPlus(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryMinus(): R|kotlin/Long| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/LongRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/LongRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/LongRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun shl([ResolvedTo(BODY_RESOLVE)] bitCount: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun shr([ResolvedTo(BODY_RESOLVE)] bitCount: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun ushr([ResolvedTo(BODY_RESOLVE)] bitCount: R|kotlin/Int|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun and([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun or([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final infix [ResolvedTo(BODY_RESOLVE)] fun xor([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final [ResolvedTo(BODY_RESOLVE)] fun inv(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class LongArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=LongArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/LongArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=LongArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Long|): R|kotlin/LongArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=LongArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Long| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Long|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/LongIterator| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Nothing {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Nothing] constructor(): R|kotlin/Nothing| {
            super<R|kotlin/Any|>()
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] class Number : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Number] constructor(): R|kotlin/Number| {
            super<R|kotlin/Any|>()
        }

        public abstract [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int|

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() public open [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        public abstract [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short|

        public abstract [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class OptIn : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OptIn] constructor([ResolvedTo(BODY_RESOLVE)] vararg markerClass: R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|): R|kotlin/OptIn| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val markerClass: R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=OptIn] get(): R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class ParameterName : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ParameterName] constructor([ResolvedTo(BODY_RESOLVE)] name: R|kotlin/String|): R|kotlin/ParameterName| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val name: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ParameterName] get(): R|kotlin/String|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class PublishedApi : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=PublishedApi] constructor(): R|kotlin/PublishedApi| {
            super<R|kotlin/Any|>()
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class ReplaceWith : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ReplaceWith] constructor([ResolvedTo(BODY_RESOLVE)] expression: R|kotlin/String|, [ResolvedTo(BODY_RESOLVE)] vararg imports: R|kotlin/Array<out kotlin/String>|): R|kotlin/ReplaceWith| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val expression: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ReplaceWith] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] val imports: R|kotlin/Array<out kotlin/String>|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ReplaceWith] get(): R|kotlin/Array<out kotlin/String>|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/SinceKotlin|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class RequiresOptIn : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=RequiresOptIn] constructor([ResolvedTo(BODY_RESOLVE)] message: R|kotlin/String| = <Unresolved name: COMPILED_CODE>#, [ResolvedTo(BODY_RESOLVE)] level: R|kotlin/RequiresOptIn.Level| = <Unresolved name: COMPILED_CODE>#): R|kotlin/RequiresOptIn| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val message: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=RequiresOptIn] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] val level: R|kotlin/RequiresOptIn.Level|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=RequiresOptIn] get(): R|kotlin/RequiresOptIn.Level|

        public final [ResolvedTo(BODY_RESOLVE)] enum class Level : R|kotlin/Enum<kotlin/RequiresOptIn.Level>|, R|kotlin/Enum<kotlin/RequiresOptIn.Level>| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Level] constructor(): R|kotlin/RequiresOptIn.Level| {
                super<R|kotlin/Enum<kotlin/RequiresOptIn.Level>|>()
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Level] enum entry WARNING: R|kotlin/RequiresOptIn.Level|
            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Level] enum entry ERROR: R|kotlin/RequiresOptIn.Level|
            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Level] fun values(): R|kotlin/Array<kotlin/RequiresOptIn.Level>| {
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Level] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|kotlin/RequiresOptIn.Level| {
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Level] val entries: R|kotlin/enums/EnumEntries<kotlin/RequiresOptIn.Level>|
                public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<kotlin/RequiresOptIn.Level>|

        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class Short : R|kotlin/Number|, R|kotlin/Comparable<kotlin/Short>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Short] constructor(): R|kotlin/Short| {
            super<R|kotlin/Number|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/Short.Companion| {
                super<R|kotlin/Any|>()
            }

            public final const [ResolvedTo(BODY_RESOLVE)] val MIN_VALUE: R|kotlin/Short| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Short|

            public final const [ResolvedTo(BODY_RESOLVE)] val MAX_VALUE: R|kotlin/Short| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Short|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BYTES: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

            @R|kotlin/SinceKotlin|[Types]() public final const [ResolvedTo(BODY_RESOLVE)] val SIZE_BITS: R|kotlin/Int| = <Unresolved name: COMPILED_CODE>#
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] get(): R|kotlin/Int|

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun minus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun times([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun div([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/Int| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/Long| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Float|): R|kotlin/Float| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rem([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Double|): R|kotlin/Double| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun inc(): R|kotlin/Short| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun dec(): R|kotlin/Short| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryPlus(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun unaryMinus(): R|kotlin/Int| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Byte|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Short|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Int|): R|kotlin/ranges/IntRange| {
        }

        @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun rangeUntil([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Long|): R|kotlin/ranges/LongRange| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toByte(): R|kotlin/Byte| {
        }

        @R|kotlin/Deprecated|[Types]() @R|kotlin/DeprecatedSinceKotlin|[Types]() @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toChar(): R|kotlin/Char| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toShort(): R|kotlin/Short| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toInt(): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toLong(): R|kotlin/Long| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toFloat(): R|kotlin/Float| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toDouble(): R|kotlin/Double| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] class ShortArray : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ShortArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|): R|kotlin/ShortArray| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ShortArray] constructor([ResolvedTo(BODY_RESOLVE)] size: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] init: R|(kotlin/Int) -> kotlin/Short|): R|kotlin/ShortArray| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val size: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ShortArray] get(): R|kotlin/Int|

        public final operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Short| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun set([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] value: R|kotlin/Short|): R|kotlin/Unit| {
        }

        public final operator [ResolvedTo(BODY_RESOLVE)] fun iterator(): R|kotlin/collections/ShortIterator| {
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class SinceKotlin : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SinceKotlin] constructor([ResolvedTo(BODY_RESOLVE)] version: R|kotlin/String|): R|kotlin/SinceKotlin| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val version: R|kotlin/String|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SinceKotlin] get(): R|kotlin/String|

    }
    public final [ResolvedTo(BODY_RESOLVE)] class String : R|kotlin/Comparable<kotlin/String>|, R|kotlin/CharSequence| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=String] constructor(): R|kotlin/String| {
            super<R|kotlin/Any|>()
        }

        public final companion [ResolvedTo(BODY_RESOLVE)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Companion] constructor(): R|kotlin/String.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] val length: R|kotlin/Int|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=String] get(): R|kotlin/Int|

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public final operator [ResolvedTo(BODY_RESOLVE)] fun plus([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/String| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun get([ResolvedTo(BODY_RESOLVE)] index: R|kotlin/Int|): R|kotlin/Char| {
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun subSequence([ResolvedTo(BODY_RESOLVE)] startIndex: R|kotlin/Int|, [ResolvedTo(BODY_RESOLVE)] endIndex: R|kotlin/Int|): R|kotlin/CharSequence| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun compareTo([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/String|): R|kotlin/Int| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean| {
        }

        @R|kotlin/internal/IntrinsicConstEvaluation|[Types]() public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/SinceKotlin|[Types]() @R|kotlin/WasExperimental|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class SubclassOptInRequired : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SubclassOptInRequired] constructor([ResolvedTo(BODY_RESOLVE)] vararg markerClass: R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|): R|kotlin/SubclassOptInRequired| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val markerClass: R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SubclassOptInRequired] get(): R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class Suppress : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Suppress] constructor([ResolvedTo(BODY_RESOLVE)] vararg names: R|kotlin/Array<out kotlin/String>|): R|kotlin/Suppress| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val names: R|kotlin/Array<out kotlin/String>|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Suppress] get(): R|kotlin/Array<out kotlin/String>|

    }
    public open [ResolvedTo(BODY_RESOLVE)] class Throwable : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Throwable] constructor([ResolvedTo(BODY_RESOLVE)] message: R|kotlin/String?|, [ResolvedTo(BODY_RESOLVE)] cause: R|kotlin/Throwable?|): R|kotlin/Throwable| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Throwable] constructor([ResolvedTo(BODY_RESOLVE)] message: R|kotlin/String?|): R|kotlin/Throwable| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Throwable] constructor([ResolvedTo(BODY_RESOLVE)] cause: R|kotlin/Throwable?|): R|kotlin/Throwable| {
            super<R|kotlin/Any|>()
        }

        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Throwable] constructor(): R|kotlin/Throwable| {
            super<R|kotlin/Any|>()
        }

        public open [ResolvedTo(BODY_RESOLVE)] val message: R|kotlin/String?|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Throwable] get(): R|kotlin/String?|

        public open [ResolvedTo(BODY_RESOLVE)] val cause: R|kotlin/Throwable?|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Throwable] get(): R|kotlin/Throwable?|

    }
    public final [ResolvedTo(BODY_RESOLVE)] object Unit : R|kotlin/Any| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Unit] constructor(): R|kotlin/Unit| {
            super<R|kotlin/Any|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String| {
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() @R|kotlin/annotation/MustBeDocumented|[Types]() public final [ResolvedTo(BODY_RESOLVE)] annotation class UnsafeVariance : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=UnsafeVariance] constructor(): R|kotlin/UnsafeVariance| {
            super<R|kotlin/Any|>()
        }

    }
    @R|kotlin/annotation/Target|[Types]() @R|kotlin/annotation/Retention|[Types]() internal final [ResolvedTo(BODY_RESOLVE)] annotation class WasExperimental : R|kotlin/Annotation|, R|kotlin/Annotation| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=WasExperimental] constructor([ResolvedTo(BODY_RESOLVE)] vararg markerClass: R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|): R|kotlin/WasExperimental| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] val markerClass: R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=WasExperimental] get(): R|kotlin/Array<out kotlin/reflect/KClass<out kotlin/Annotation>>|

    }
