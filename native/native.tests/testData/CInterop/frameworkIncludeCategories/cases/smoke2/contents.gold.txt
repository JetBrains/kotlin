library {
  // module name: <dependency.def>

  library fragment {
    // package name: dependency

    // class name: dependency/MyClass
    // class name: dependency/MyClass.Companion
    // class name: dependency/MyClassMeta

    @kotlinx/cinterop/ExternalObjCClass
    public open class dependency/MyClass : kotlinx/cinterop/ObjCObjectBase {

      protected /* secondary */ constructor()

      @kotlinx/cinterop/ObjCMethod(selector = "categoryProperty", encoding = "f16@0:8", isStret = false)
      public open external fun categoryProperty(): kotlin/Float

      @kotlinx/cinterop/ObjCMethod(selector = "instanceProperty", encoding = "f16@0:8", isStret = false)
      public open external fun instanceProperty(): kotlin/Float

      @kotlinx/cinterop/ObjCMethod(selector = "setCategoryProperty:", encoding = "v20@0:8f16", isStret = false)
      public open external fun setCategoryProperty(categoryProperty: kotlin/Float): kotlin/Unit

      @kotlinx/cinterop/ObjCMethod(selector = "setInstanceProperty:", encoding = "v20@0:8f16", isStret = false)
      public open external fun setInstanceProperty(instanceProperty: kotlin/Float): kotlin/Unit

      public final var categoryProperty: kotlin/Float
        @kotlinx/cinterop/ObjCMethod(selector = "categoryProperty", encoding = "f16@0:8", isStret = false)
        public final /* non-default */ external get
        @kotlinx/cinterop/ObjCMethod(selector = "setCategoryProperty:", encoding = "v20@0:8f16", isStret = false)
        public final /* non-default */ external set(value: kotlin/Float)

      public final var instanceProperty: kotlin/Float
        @kotlinx/cinterop/ObjCMethod(selector = "instanceProperty", encoding = "f16@0:8", isStret = false)
        public final /* non-default */ external get
        @kotlinx/cinterop/ObjCMethod(selector = "setInstanceProperty:", encoding = "v20@0:8f16", isStret = false)
        public final /* non-default */ external set(value: kotlin/Float)

      // companion object: Companion

      // nested class: Companion
    }

    public final companion object dependency/MyClass.Companion : dependency/MyClassMeta, kotlinx/cinterop/ObjCClassOf<dependency/MyClass> {

      private constructor()
    }

    @kotlinx/cinterop/ExternalObjCClass
    public open class dependency/MyClassMeta : kotlinx/cinterop/ObjCObjectBaseMeta {

      protected /* secondary */ constructor()
    }

    package {

      @kotlinx/cinterop/ObjCMethod(selector = "categoryProperty", encoding = "f16@0:8", isStret = false)
      @kotlin/Deprecated(message = "Use instance method instead", replaceWith = kotlin/ReplaceWith(imports = [], expression = ""), level = kotlin/DeprecationLevel.WARNING)
      public final external fun dependency/MyClass.categoryProperty(): kotlin/Float

      @kotlinx/cinterop/ObjCMethod(selector = "setCategoryProperty:", encoding = "v20@0:8f16", isStret = false)
      @kotlin/Deprecated(message = "Use instance method instead", replaceWith = kotlin/ReplaceWith(imports = [], expression = ""), level = kotlin/DeprecationLevel.WARNING)
      public final external fun dependency/MyClass.setCategoryProperty(categoryProperty: kotlin/Float): kotlin/Unit

      @kotlin/Deprecated(message = "Use instance property instead", replaceWith = kotlin/ReplaceWith(imports = [], expression = ""), level = kotlin/DeprecationLevel.WARNING)
      public final var dependency/MyClass.categoryProperty: kotlin/Float
        @kotlinx/cinterop/ObjCMethod(selector = "categoryProperty", encoding = "f16@0:8", isStret = false)
        @kotlin/Deprecated(message = "Use instance method instead", replaceWith = kotlin/ReplaceWith(imports = [], expression = ""), level = kotlin/DeprecationLevel.WARNING)
        public final /* non-default */ external get
        @kotlinx/cinterop/ObjCMethod(selector = "setCategoryProperty:", encoding = "v20@0:8f16", isStret = false)
        @kotlin/Deprecated(message = "Use instance method instead", replaceWith = kotlin/ReplaceWith(imports = [], expression = ""), level = kotlin/DeprecationLevel.WARNING)
        public final /* non-default */ external set(value: kotlin/Float)
    }
  }
}
