FILE fqName:<root> fileName:/kt24114.kt
  FUN name:one visibility:public modality:FINAL <> () returnType:Int flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='one(): Int'
        CONST Int type=kotlin.Int value=1
  FUN name:two visibility:public modality:FINAL <> () returnType:Int flags:
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='two(): Int'
        CONST Int type=kotlin.Int value=2
  FUN name:test1 visibility:public modality:FINAL <> () returnType:Int flags:
    BLOCK_BODY
      WHILE label=null origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          BLOCK type=kotlin.Nothing origin=WHEN
            VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Int flags:val
              CALL 'one(): Int' type=kotlin.Int origin=null
            WHEN type=kotlin.Nothing origin=WHEN
              BRANCH
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                  arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                  arg1: CONST Int type=kotlin.Int value=1
                then: BLOCK type=kotlin.Nothing origin=null
                  TYPE_OP type=kotlin.Nothing origin=IMPLICIT_CAST typeOperand=kotlin.Nothing
                    typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Nothing modality:FINAL visibility:public flags:
                    BLOCK type=kotlin.Unit origin=WHEN
                      VAR IR_TEMPORARY_VARIABLE name:tmp1_subject type:kotlin.Int flags:val
                        CALL 'two(): Int' type=kotlin.Int origin=null
                      WHEN type=kotlin.Unit origin=WHEN
                        BRANCH
                          if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                            arg0: GET_VAR 'tmp1_subject: Int' type=kotlin.Int origin=null
                            arg1: CONST Int type=kotlin.Int value=2
                          then: RETURN type=kotlin.Nothing from='test1(): Int'
                            CONST Int type=kotlin.Int value=2
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: RETURN type=kotlin.Nothing from='test1(): Int'
                  CONST Int type=kotlin.Int value=3
  FUN name:test2 visibility:public modality:FINAL <> () returnType:Int flags:
    BLOCK_BODY
      WHILE label=null origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          BLOCK type=kotlin.Nothing origin=WHEN
            VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Int flags:val
              CALL 'one(): Int' type=kotlin.Int origin=null
            WHEN type=kotlin.Nothing origin=WHEN
              BRANCH
                if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                  arg0: GET_VAR 'tmp0_subject: Int' type=kotlin.Int origin=null
                  arg1: CONST Int type=kotlin.Int value=1
                then: TYPE_OP type=kotlin.Nothing origin=IMPLICIT_CAST typeOperand=kotlin.Nothing
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Nothing modality:FINAL visibility:public flags:
                  BLOCK type=kotlin.Unit origin=WHEN
                    VAR IR_TEMPORARY_VARIABLE name:tmp1_subject type:kotlin.Int flags:val
                      CALL 'two(): Int' type=kotlin.Int origin=null
                    WHEN type=kotlin.Unit origin=WHEN
                      BRANCH
                        if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                          arg0: GET_VAR 'tmp1_subject: Int' type=kotlin.Int origin=null
                          arg1: CONST Int type=kotlin.Int value=2
                        then: RETURN type=kotlin.Nothing from='test2(): Int'
                          CONST Int type=kotlin.Int value=2
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: RETURN type=kotlin.Nothing from='test2(): Int'
                  CONST Int type=kotlin.Int value=3

