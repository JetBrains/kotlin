val test1: Function1<Int, C>
  field = ::C
  get

val test2: Function1<Int, Nested>
  field = ::Nested
  get

class C {
  constructor(x: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

object Host {
  class Nested {
    constructor(x: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

typealias CA = C
typealias NA = Nested
