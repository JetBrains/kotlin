class InlineExtensionWithTypeParameterTest {
  private var sref$volatile: Any?
    field = SemaphoreSegment(id = 0)
    private get(): Any? {
      return <this>.#sref$volatile
    }
    private set(value: Any?) {
      return <this>.#sref$volatile = value
    }

  abstract class Segment<S : Segment<S>> {
    val id: Int
      field = id
      get

    constructor(id: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  class SemaphoreSegment : Segment<SemaphoreSegment> {
    constructor(id: Int) /* primary */ {
      super/*Segment*/<SemaphoreSegment>(id = id)
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun <S : Segment<S>> foo$atomicfu$ATOMIC_ARRAY$Any(handler$atomicfu: AtomicArray<Any?>, index$atomicfu: Int, id: Int, startFrom: S): Int {
    handler$atomicfu.set(index = index$atomicfu, newValue = startFrom)
    return <this>.getSegmentId<S>(/* <this> = handler$atomicfu.get(index = index$atomicfu) as Any? */)
  }

  private inline fun <S : Segment<S>> foo$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, id: Int, startFrom: S): Int {
    atomicSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ newValue = startFrom)
    return <this>.getSegmentId<S>(/* <this> = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */) as Any? */)
  }

  private inline fun <S : Segment<S>> S.getSegmentId(): Int {
    var cur: S = <this>
    return cur.<get-id>()
  }

  fun testInlineExtensionWithTypeParameter() {
    val s: SemaphoreSegment = SemaphoreSegment(id = 77)
    assertEquals<Int>(expected = 77, actual = <this>.foo$atomicfu$NATIVE_PROPERTY_REF$Any<SemaphoreSegment>(handler$atomicfu = local inline fun <sref$volatile-getter>(): KMutableProperty0<Any?> {
      return InlineExtensionWithTypeParameterTest<this>::sref$volatile
    }
, id = 0, startFrom = s))
  }

}

fun box(): String {
  val testClass: InlineExtensionWithTypeParameterTest = InlineExtensionWithTypeParameterTest()
  testClass.testInlineExtensionWithTypeParameter()
  return "OK"
}
