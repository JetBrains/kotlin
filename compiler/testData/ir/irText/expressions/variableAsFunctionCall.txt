FILE /variableAsFunctionCall.kt
  FUN public fun kotlin.String.k(): () -> kotlin.String
    $receiver: VALUE_PARAMETER this@k: String
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='k() on String: () -> String'
        BLOCK type=() -> kotlin.String origin=LAMBDA
          FUN LOCAL_FUNCTION_FOR_LAMBDA local final fun <anonymous>(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from='<anonymous>(): String'
                GET_VAR 'this@k: String' type=kotlin.String origin=null
          FUNCTION_REFERENCE '<anonymous>(): String' type=() -> kotlin.String origin=LAMBDA
  FUN public fun test1(f: () -> kotlin.Unit): kotlin.Unit
    VALUE_PARAMETER value-parameter f: () -> kotlin.Unit
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test1(() -> Unit): Unit'
        CALL 'invoke(): Unit' type=kotlin.Unit origin=INVOKE
          $this: GET_VAR 'value-parameter f: () -> Unit' type=() -> kotlin.Unit origin=VARIABLE_AS_FUNCTION
  FUN public fun test2(f: kotlin.String.() -> kotlin.Unit): kotlin.Unit
    VALUE_PARAMETER value-parameter f: kotlin.String.() -> kotlin.Unit
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test2(String.() -> Unit): Unit'
        CALL 'invoke(String): Unit' type=kotlin.Unit origin=INVOKE
          $this: GET_VAR 'value-parameter f: String.() -> Unit' type=kotlin.String.() -> kotlin.Unit origin=VARIABLE_AS_FUNCTION
          p1: CONST String type=kotlin.String value='hello'
  FUN public fun test3(): kotlin.String
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test3(): String'
        CALL 'invoke(): String' type=kotlin.String origin=null
          $this: CALL 'k() on String: () -> String' type=() -> kotlin.String origin=null
            $receiver: CONST String type=kotlin.String value='hello'
  FUN public fun test4(ns: kotlin.String?): kotlin.String?
    VALUE_PARAMETER value-parameter ns: kotlin.String?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='test4(String?): String?'
        BLOCK type=kotlin.String? origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE val tmp1_safe_receiver: (() -> kotlin.String)?
            BLOCK type=(() -> kotlin.String)? origin=SAFE_CALL
              VAR IR_TEMPORARY_VARIABLE val tmp0_safe_receiver: kotlin.String?
                GET_VAR 'value-parameter ns: String?' type=kotlin.String? origin=null
              WHEN type=(() -> kotlin.String)? origin=SAFE_CALL
                BRANCH
                  if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'tmp0_safe_receiver: String?' type=kotlin.String? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value='true'
                  then: CALL 'k() on String: () -> String' type=() -> kotlin.String origin=null
                    $receiver: GET_VAR 'tmp0_safe_receiver: String?' type=kotlin.String? origin=null
          WHEN type=kotlin.String? origin=SAFE_CALL
            BRANCH
              if: CALL 'EQEQ(Any?, Any?): Boolean' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'tmp1_safe_receiver: (() -> String)?' type=(() -> kotlin.String)? origin=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Null type=kotlin.Nothing? value='null'
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value='true'
              then: CALL 'invoke(): String' type=kotlin.String origin=null
                $this: GET_VAR 'tmp1_safe_receiver: (() -> String)?' type=(() -> kotlin.String)? origin=null

