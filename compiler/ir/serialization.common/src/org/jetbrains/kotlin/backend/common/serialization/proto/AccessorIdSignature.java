// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature}
 */
public  final class AccessorIdSignature extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite<
        AccessorIdSignature, AccessorIdSignature.Builder> implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
    AccessorIdSignatureOrBuilder {
  private AccessorIdSignature() {
  }
  private int bitField0_;
  public static final int PROPERTY_SIGNATURE_FIELD_NUMBER = 1;
  private int propertySignature_;
  /**
   * <code>int32 property_signature = 1 [features = { ... }</code>
   * @return Whether the propertySignature field is set.
   */
  @java.lang.Override
  public boolean hasPropertySignature() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>int32 property_signature = 1 [features = { ... }</code>
   * @return The propertySignature.
   */
  @java.lang.Override
  public int getPropertySignature() {
    return propertySignature_;
  }
  /**
   * <code>int32 property_signature = 1 [features = { ... }</code>
   * @param value The propertySignature to set.
   */
  private void setPropertySignature(int value) {
    bitField0_ |= 0x00000001;
    propertySignature_ = value;
  }
  /**
   * <code>int32 property_signature = 1 [features = { ... }</code>
   */
  private void clearPropertySignature() {
    bitField0_ = (bitField0_ & ~0x00000001);
    propertySignature_ = 0;
  }

  public static final int NAME_FIELD_NUMBER = 2;
  private int name_;
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @return Whether the name field is set.
   */
  @java.lang.Override
  public boolean hasName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @return The name.
   */
  @java.lang.Override
  public int getName() {
    return name_;
  }
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   * @param value The name to set.
   */
  private void setName(int value) {
    bitField0_ |= 0x00000002;
    name_ = value;
  }
  /**
   * <code>int32 name = 2 [features = { ... }</code>
   */
  private void clearName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    name_ = 0;
  }

  public static final int ACCESSOR_HASH_ID_FIELD_NUMBER = 3;
  private long accessorHashId_;
  /**
   * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
   * @return Whether the accessorHashId field is set.
   */
  @java.lang.Override
  public boolean hasAccessorHashId() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
   * @return The accessorHashId.
   */
  @java.lang.Override
  public long getAccessorHashId() {
    return accessorHashId_;
  }
  /**
   * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
   * @param value The accessorHashId to set.
   */
  private void setAccessorHashId(long value) {
    bitField0_ |= 0x00000004;
    accessorHashId_ = value;
  }
  /**
   * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
   */
  private void clearAccessorHashId() {
    bitField0_ = (bitField0_ & ~0x00000004);
    accessorHashId_ = 0L;
  }

  public static final int FLAGS_FIELD_NUMBER = 4;
  private long flags_;
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @return Whether the flags field is set.
   */
  @java.lang.Override
  public boolean hasFlags() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @return The flags.
   */
  @java.lang.Override
  public long getFlags() {
    return flags_;
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   * @param value The flags to set.
   */
  private void setFlags(long value) {
    bitField0_ |= 0x00000008;
    flags_ = value;
  }
  /**
   * <code>int64 flags = 4 [default = 0];</code>
   */
  private void clearFlags() {
    bitField0_ = (bitField0_ & ~0x00000008);
    flags_ = 0L;
  }

  public static final int DEBUG_INFO_FIELD_NUMBER = 5;
  private int debugInfo_;
  /**
   * <code>int32 debug_info = 5;</code>
   * @return Whether the debugInfo field is set.
   */
  @java.lang.Override
  public boolean hasDebugInfo() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <code>int32 debug_info = 5;</code>
   * @return The debugInfo.
   */
  @java.lang.Override
  public int getDebugInfo() {
    return debugInfo_;
  }
  /**
   * <code>int32 debug_info = 5;</code>
   * @param value The debugInfo to set.
   */
  private void setDebugInfo(int value) {
    bitField0_ |= 0x00000010;
    debugInfo_ = value;
  }
  /**
   * <code>int32 debug_info = 5;</code>
   */
  private void clearDebugInfo() {
    bitField0_ = (bitField0_ & ~0x00000010);
    debugInfo_ = 0;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature, Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
      org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignatureOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>int32 property_signature = 1 [features = { ... }</code>
     * @return Whether the propertySignature field is set.
     */
    @java.lang.Override
    public boolean hasPropertySignature() {
      return instance.hasPropertySignature();
    }
    /**
     * <code>int32 property_signature = 1 [features = { ... }</code>
     * @return The propertySignature.
     */
    @java.lang.Override
    public int getPropertySignature() {
      return instance.getPropertySignature();
    }
    /**
     * <code>int32 property_signature = 1 [features = { ... }</code>
     * @param value The propertySignature to set.
     * @return This builder for chaining.
     */
    public Builder setPropertySignature(int value) {
      copyOnWrite();
      instance.setPropertySignature(value);
      return this;
    }
    /**
     * <code>int32 property_signature = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearPropertySignature() {
      copyOnWrite();
      instance.clearPropertySignature();
      return this;
    }

    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return instance.hasName();
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public int getName() {
      return instance.getName();
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(int value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <code>int32 name = 2 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }

    /**
     * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
     * @return Whether the accessorHashId field is set.
     */
    @java.lang.Override
    public boolean hasAccessorHashId() {
      return instance.hasAccessorHashId();
    }
    /**
     * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
     * @return The accessorHashId.
     */
    @java.lang.Override
    public long getAccessorHashId() {
      return instance.getAccessorHashId();
    }
    /**
     * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
     * @param value The accessorHashId to set.
     * @return This builder for chaining.
     */
    public Builder setAccessorHashId(long value) {
      copyOnWrite();
      instance.setAccessorHashId(value);
      return this;
    }
    /**
     * <code>int64 accessor_hash_id = 3 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearAccessorHashId() {
      copyOnWrite();
      instance.clearAccessorHashId();
      return this;
    }

    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return instance.hasFlags();
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return The flags.
     */
    @java.lang.Override
    public long getFlags() {
      return instance.getFlags();
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @param value The flags to set.
     * @return This builder for chaining.
     */
    public Builder setFlags(long value) {
      copyOnWrite();
      instance.setFlags(value);
      return this;
    }
    /**
     * <code>int64 flags = 4 [default = 0];</code>
     * @return This builder for chaining.
     */
    public Builder clearFlags() {
      copyOnWrite();
      instance.clearFlags();
      return this;
    }

    /**
     * <code>int32 debug_info = 5;</code>
     * @return Whether the debugInfo field is set.
     */
    @java.lang.Override
    public boolean hasDebugInfo() {
      return instance.hasDebugInfo();
    }
    /**
     * <code>int32 debug_info = 5;</code>
     * @return The debugInfo.
     */
    @java.lang.Override
    public int getDebugInfo() {
      return instance.getDebugInfo();
    }
    /**
     * <code>int32 debug_info = 5;</code>
     * @param value The debugInfo to set.
     * @return This builder for chaining.
     */
    public Builder setDebugInfo(int value) {
      copyOnWrite();
      instance.setDebugInfo(value);
      return this;
    }
    /**
     * <code>int32 debug_info = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDebugInfo() {
      copyOnWrite();
      instance.clearDebugInfo();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
  }
  private byte memoizedIsInitialized = 2;
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "propertySignature_",
            "name_",
            "accessorHashId_",
            "flags_",
            "debugInfo_",
          };
          java.lang.String info =
              "\u0004\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0000\u0003\u0001\u1504\u0000\u0002" +
              "\u1504\u0001\u0003\u1502\u0002\u0004\u1002\u0003\u0005\u1004\u0004";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        org.jetbrains.kotlin.protobuf.Parser<org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature> parser = PARSER;
        if (parser == null) {
          synchronized (org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return memoizedIsInitialized;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature DEFAULT_INSTANCE;
  static {
    AccessorIdSignature defaultInstance = new AccessorIdSignature();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.registerDefaultInstance(
      AccessorIdSignature.class, defaultInstance);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile org.jetbrains.kotlin.protobuf.Parser<AccessorIdSignature> PARSER;

  public static org.jetbrains.kotlin.protobuf.Parser<AccessorIdSignature> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
