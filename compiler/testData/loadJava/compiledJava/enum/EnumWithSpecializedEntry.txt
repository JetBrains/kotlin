package test

public final enum class EnumWithSpecializedEntry : kotlin.Enum<test.EnumWithSpecializedEntry!> {
    enum entry E1

    enum entry E2

    private constructor EnumWithSpecializedEntry()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.EnumWithSpecializedEntry!): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.EnumWithSpecializedEntry!>!

    public/*package*/ open class Nested {
        public/*package*/ constructor Nested()
    }

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.EnumWithSpecializedEntry
    public final /*synthesized*/ fun values(): kotlin.Array<test.EnumWithSpecializedEntry>
}
