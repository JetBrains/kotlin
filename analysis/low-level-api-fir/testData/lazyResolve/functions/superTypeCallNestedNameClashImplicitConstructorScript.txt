RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] class MyClass : Base<Base<Int>> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<Base<Base<Int>>>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(RAW_FIR)] class MyClass : Base<Base<Int>> {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<Base<Base<Int>>>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class MyClass : Base<Base<Int>> {
            public? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<Base<Base<Int>>>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(COMPANION_GENERATION)] class MyClass : Base<Base<Int>> {
            public? [ResolvedTo(COMPANION_GENERATION)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<Base<Base<Int>>>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(SUPER_TYPES)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public? [ResolvedTo(SUPER_TYPES)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<Base<R|second/Base<kotlin/Int>|>>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(SUPER_TYPES)] class Base<[ResolvedTo(SUPER_TYPES)] T> : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(SUPER_TYPES)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final? [ResolvedTo(TYPES)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public? [ResolvedTo(TYPES)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|second/Base<second/Base<kotlin/Int>>|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(STATUS)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|second/Base<second/Base<kotlin/Int>>|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@kotlin.script.templates.standard.ScriptTemplateWithArgs)
    SCRIPT: [ResolvedTo(RAW_FIR)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|second/Base<second/Base<kotlin/Int>>|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(CONTRACTS)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(CONTRACTS)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|second/Base<second/Base<kotlin/Int>>|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|second/Base<second/Base<kotlin/Int>>|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(CONSTANT_EVALUATION)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(CONSTANT_EVALUATION)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|second/Base<second/Base<kotlin/Int>>|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(ANNOTATION_ARGUMENTS)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                LAZY_super<R|second/Base<second/Base<kotlin/Int>>|>
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(TYPES)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(TYPES)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class Base<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Base] constructor<[ResolvedTo(STATUS)] T>(): R|second/Base<T>| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                super<R|second/Base<second/Base<kotlin/Int>>|>()
            }

            public open [ResolvedTo(RAW_FIR)] class Base<[ResolvedTo(RAW_FIR)] T> : R|kotlin/Any| {
                public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Base] constructor<[ResolvedTo(RAW_FIR)] T>(): R|second/MyClass.Base<T>| {
                    LAZY_super<R|kotlin/Any|>
                }

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] superTypeCallNestedNameClashImplicitConstructorScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] <script-superTypeCallNestedNameClashImplicitConstructorScript.kts>
        [ResolvedTo(BODY_RESOLVE)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(BODY_RESOLVE)] class Base<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Base] constructor<[ResolvedTo(BODY_RESOLVE)] T>(): R|second/Base<T>| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(BODY_RESOLVE)] class MyClass : R|second/Base<second/Base<kotlin/Int>>| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=MyClass] constructor(): R|second/MyClass| {
                super<R|second/Base<second/Base<kotlin/Int>>|>()
            }

            public open [ResolvedTo(BODY_RESOLVE)] class Base<[ResolvedTo(BODY_RESOLVE)] T> : R|kotlin/Any| {
                public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Base] constructor<[ResolvedTo(BODY_RESOLVE)] T>(): R|second/MyClass.Base<T>| {
                    super<R|kotlin/Any|>()
                }

            }

        }
