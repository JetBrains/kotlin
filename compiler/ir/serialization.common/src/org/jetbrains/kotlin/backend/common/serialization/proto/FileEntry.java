// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compiler/ir/serialization.common/src/KotlinIr.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry}
 */
public final class FileEntry extends
    org.jetbrains.kotlin.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
    FileEntryOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      FileEntry.class.getName());
  }
  // Use FileEntry.newBuilder() to construct.
  private FileEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private FileEntry() {
    name_ = "";
    lineStartOffset_ = emptyIntList();
  }

  public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_descriptor;
  }

  @java.lang.Override
  protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.class, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";
  /**
   * <code>string name = 1 [features = { ... }</code>
   * @return Whether the name field is set.
   */
  @java.lang.Override
  public boolean hasName() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>string name = 1 [features = { ... }</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      org.jetbrains.kotlin.protobuf.ByteString bs = 
          (org.jetbrains.kotlin.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        name_ = s;
      }
      return s;
    }
  }
  /**
   * <code>string name = 1 [features = { ... }</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      org.jetbrains.kotlin.protobuf.ByteString b = 
          org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (org.jetbrains.kotlin.protobuf.ByteString) ref;
    }
  }

  public static final int LINE_START_OFFSET_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private org.jetbrains.kotlin.protobuf.Internal.IntList lineStartOffset_ =
      emptyIntList();
  /**
   * <code>repeated int32 line_start_offset = 2;</code>
   * @return A list containing the lineStartOffset.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getLineStartOffsetList() {
    return lineStartOffset_;
  }
  /**
   * <code>repeated int32 line_start_offset = 2;</code>
   * @return The count of lineStartOffset.
   */
  public int getLineStartOffsetCount() {
    return lineStartOffset_.size();
  }
  /**
   * <code>repeated int32 line_start_offset = 2;</code>
   * @param index The index of the element to return.
   * @return The lineStartOffset at the given index.
   */
  public int getLineStartOffset(int index) {
    return lineStartOffset_.getInt(index);
  }
  private int lineStartOffsetMemoizedSerializedSize = -1;

  public static final int FIRST_RELEVANT_LINE_INDEX_FIELD_NUMBER = 3;
  private int firstRelevantLineIndex_ = 0;
  /**
   * <code>int32 first_relevant_line_index = 3 [default = 0];</code>
   * @return Whether the firstRelevantLineIndex field is set.
   */
  @java.lang.Override
  public boolean hasFirstRelevantLineIndex() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>int32 first_relevant_line_index = 3 [default = 0];</code>
   * @return The firstRelevantLineIndex.
   */
  @java.lang.Override
  public int getFirstRelevantLineIndex() {
    return firstRelevantLineIndex_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) != 0)) {
      org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 1, name_);
    }
    if (getLineStartOffsetList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(lineStartOffsetMemoizedSerializedSize);
    }
    for (int i = 0; i < lineStartOffset_.size(); i++) {
      output.writeInt32NoTag(lineStartOffset_.getInt(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt32(3, firstRelevantLineIndex_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(1, name_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < lineStartOffset_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(lineStartOffset_.getInt(i));
      }
      size += dataSize;
      if (!getLineStartOffsetList().isEmpty()) {
        size += 1;
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      lineStartOffsetMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(3, firstRelevantLineIndex_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)) {
      return super.equals(obj);
    }
    org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry other = (org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry) obj;

    if (hasName() != other.hasName()) return false;
    if (hasName()) {
      if (!getName()
          .equals(other.getName())) return false;
    }
    if (!getLineStartOffsetList()
        .equals(other.getLineStartOffsetList())) return false;
    if (hasFirstRelevantLineIndex() != other.hasFirstRelevantLineIndex()) return false;
    if (hasFirstRelevantLineIndex()) {
      if (getFirstRelevantLineIndex()
          != other.getFirstRelevantLineIndex()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasName()) {
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
    }
    if (getLineStartOffsetCount() > 0) {
      hash = (37 * hash) + LINE_START_OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + getLineStartOffsetList().hashCode();
    }
    if (hasFirstRelevantLineIndex()) {
      hash = (37 * hash) + FIRST_RELEVANT_LINE_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getFirstRelevantLineIndex();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      java.nio.ByteBuffer data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      java.nio.ByteBuffer data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.jetbrains.kotlin.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
      org.jetbrains.kotlin.backend.common.serialization.proto.FileEntryOrBuilder {
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.class, org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.Builder.class);
    }

    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.newBuilder()
    private Builder() {

    }

    private Builder(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      name_ = "";
      lineStartOffset_ = emptyIntList();
      firstRelevantLineIndex_ = 0;
      return this;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.KotlinIr.internal_static_org_jetbrains_kotlin_backend_common_serialization_proto_FileEntry_descriptor;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance();
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry result = new org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.name_ = name_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        lineStartOffset_.makeImmutable();
        result.lineStartOffset_ = lineStartOffset_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.firstRelevantLineIndex_ = firstRelevantLineIndex_;
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
      if (other instanceof org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry) {
        return mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.getDefaultInstance()) return this;
      if (other.hasName()) {
        name_ = other.name_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.lineStartOffset_.isEmpty()) {
        if (lineStartOffset_.isEmpty()) {
          lineStartOffset_ = other.lineStartOffset_;
          lineStartOffset_.makeImmutable();
          bitField0_ |= 0x00000002;
        } else {
          ensureLineStartOffsetIsMutable();
          lineStartOffset_.addAll(other.lineStartOffset_);
        }
        onChanged();
      }
      if (other.hasFirstRelevantLineIndex()) {
        setFirstRelevantLineIndex(other.getFirstRelevantLineIndex());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      if (!hasName()) {
        return false;
      }
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              name_ = input.readBytes();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              int v = input.readInt32();
              ensureLineStartOffsetIsMutable();
              lineStartOffset_.addInt(v);
              break;
            } // case 16
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureLineStartOffsetIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                lineStartOffset_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 18
            case 24: {
              firstRelevantLineIndex_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <code>string name = 1 [features = { ... }</code>
     * @return Whether the name field is set.
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string name = 1 [features = { ... }</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        org.jetbrains.kotlin.protobuf.ByteString bs =
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string name = 1 [features = { ... }</code>
     * @return The bytes for name.
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string name = 1 [features = { ... }</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string name = 1 [features = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string name = 1 [features = { ... }</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        org.jetbrains.kotlin.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private org.jetbrains.kotlin.protobuf.Internal.IntList lineStartOffset_ = emptyIntList();
    private void ensureLineStartOffsetIsMutable() {
      if (!lineStartOffset_.isModifiable()) {
        lineStartOffset_ = makeMutableCopy(lineStartOffset_);
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>repeated int32 line_start_offset = 2;</code>
     * @return A list containing the lineStartOffset.
     */
    public java.util.List<java.lang.Integer>
        getLineStartOffsetList() {
      lineStartOffset_.makeImmutable();
      return lineStartOffset_;
    }
    /**
     * <code>repeated int32 line_start_offset = 2;</code>
     * @return The count of lineStartOffset.
     */
    public int getLineStartOffsetCount() {
      return lineStartOffset_.size();
    }
    /**
     * <code>repeated int32 line_start_offset = 2;</code>
     * @param index The index of the element to return.
     * @return The lineStartOffset at the given index.
     */
    public int getLineStartOffset(int index) {
      return lineStartOffset_.getInt(index);
    }
    /**
     * <code>repeated int32 line_start_offset = 2;</code>
     * @param index The index to set the value at.
     * @param value The lineStartOffset to set.
     * @return This builder for chaining.
     */
    public Builder setLineStartOffset(
        int index, int value) {

      ensureLineStartOffsetIsMutable();
      lineStartOffset_.setInt(index, value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 line_start_offset = 2;</code>
     * @param value The lineStartOffset to add.
     * @return This builder for chaining.
     */
    public Builder addLineStartOffset(int value) {

      ensureLineStartOffsetIsMutable();
      lineStartOffset_.addInt(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 line_start_offset = 2;</code>
     * @param values The lineStartOffset to add.
     * @return This builder for chaining.
     */
    public Builder addAllLineStartOffset(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureLineStartOffsetIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, lineStartOffset_);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 line_start_offset = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearLineStartOffset() {
      lineStartOffset_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private int firstRelevantLineIndex_ ;
    /**
     * <code>int32 first_relevant_line_index = 3 [default = 0];</code>
     * @return Whether the firstRelevantLineIndex field is set.
     */
    @java.lang.Override
    public boolean hasFirstRelevantLineIndex() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 first_relevant_line_index = 3 [default = 0];</code>
     * @return The firstRelevantLineIndex.
     */
    @java.lang.Override
    public int getFirstRelevantLineIndex() {
      return firstRelevantLineIndex_;
    }
    /**
     * <code>int32 first_relevant_line_index = 3 [default = 0];</code>
     * @param value The firstRelevantLineIndex to set.
     * @return This builder for chaining.
     */
    public Builder setFirstRelevantLineIndex(int value) {

      firstRelevantLineIndex_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int32 first_relevant_line_index = 3 [default = 0];</code>
     * @return This builder for chaining.
     */
    public Builder clearFirstRelevantLineIndex() {
      bitField0_ = (bitField0_ & ~0x00000004);
      firstRelevantLineIndex_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
  private static final org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.jetbrains.kotlin.protobuf.Parser<FileEntry>
      PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<FileEntry>() {
    @java.lang.Override
    public FileEntry parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.jetbrains.kotlin.protobuf.Parser<FileEntry> parser() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<FileEntry> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
