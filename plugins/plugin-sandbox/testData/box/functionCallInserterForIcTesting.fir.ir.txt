FILE fqName:foo fileName:/a.kt
  PROPERTY name:result visibility:public modality:FINAL [var]
    FIELD PROPERTY_BACKING_FIELD name:result type:kotlin.String visibility:private [static]
      EXPRESSION_BODY
        CONST String type=kotlin.String value="Error"
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-result> visibility:public modality:FINAL returnType:kotlin.String
      correspondingProperty: PROPERTY name:result visibility:public modality:FINAL [var]
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun <get-result> (): kotlin.String declared in foo'
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:result type:kotlin.String visibility:private [static]' type=kotlin.String origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<set-result> visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:Regular name:<set-?> index:0 type:kotlin.String
      correspondingProperty: PROPERTY name:result visibility:public modality:FINAL [var]
      BLOCK_BODY
        SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:result type:kotlin.String visibility:private [static]' type=kotlin.Unit origin=null
          value: GET_VAR '<set-?>: kotlin.String declared in foo.<set-result>' type=kotlin.String origin=null
  FUN name:functionToCall visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      CALL 'public final fun <set-result> (<set-?>: kotlin.String): kotlin.Unit declared in foo' type=kotlin.Unit origin=EQ
        ARG <set-?>: CONST String type=kotlin.String value="OK"
      RETURN type=kotlin.Nothing from='public final fun functionToCall (): kotlin.String declared in foo'
        CONST String type=kotlin.String value="OK"
FILE fqName:foo fileName:/b.kt
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
            ARG <this>: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
              ARG arg0: CALL 'public final fun <get-result> (): kotlin.String declared in foo' type=kotlin.String origin=GET_PROPERTY
              ARG arg1: CONST String type=kotlin.String value="Error"
          then: RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in foo'
            CALL 'public final fun <get-result> (): kotlin.String declared in foo' type=kotlin.String origin=GET_PROPERTY
      VAR name:testResult type:kotlin.Int [val]
        CALL 'public final fun test (): kotlin.Int declared in foo' type=kotlin.Int origin=null
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
            ARG <this>: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
              ARG arg0: GET_VAR 'val testResult: kotlin.Int declared in foo.box' type=kotlin.Int origin=null
              ARG arg1: CONST Int type=kotlin.Int value=3
          then: RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in foo'
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="Error: "
              GET_VAR 'val testResult: kotlin.Int declared in foo.box' type=kotlin.Int origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in foo'
        CALL 'public final fun <get-result> (): kotlin.String declared in foo' type=kotlin.String origin=GET_PROPERTY
  FUN name:test visibility:public modality:FINAL returnType:kotlin.Int
    annotations:
      CallSpecifiedFunction(functionName = "foo.functionToCall")
    BLOCK_BODY
      CALL 'public final fun functionToCall (): kotlin.String declared in foo' type=kotlin.String origin=null
      VAR name:x type:kotlin.Int [val]
        CONST Int type=kotlin.Int value=1
      VAR name:y type:kotlin.Int [val]
        CONST Int type=kotlin.Int value=2
      RETURN type=kotlin.Nothing from='public final fun test (): kotlin.Int declared in foo'
        CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
          ARG <this>: GET_VAR 'val x: kotlin.Int declared in foo.test' type=kotlin.Int origin=null
          ARG other: GET_VAR 'val y: kotlin.Int declared in foo.test' type=kotlin.Int origin=null
