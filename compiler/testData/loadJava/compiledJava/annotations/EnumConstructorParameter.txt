package test

public final enum class EnumConstructorParameter : kotlin.Enum<test.EnumConstructorParameter!> {
    public enum entry INSTANCE : test.EnumConstructorParameter {
        private constructor INSTANCE()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.EnumConstructorParameter!): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
    }

    private constructor EnumConstructorParameter(/*0*/ p0: kotlin.Int)
    private constructor EnumConstructorParameter(/*0*/ test.EnumConstructorParameter.Anno(value = "string") p0: kotlin.String!)
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.EnumConstructorParameter!): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

    public final class Anno : kotlin.Annotation {
        public constructor Anno(/*0*/ value: kotlin.String)
        public final val value: kotlin.String
        public abstract fun value(): kotlin.String
    }

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.EnumConstructorParameter
    public final /*synthesized*/ fun values(): kotlin.Array<test.EnumConstructorParameter>
}
