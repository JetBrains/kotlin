RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] ambiguousLocalEnum.kt
    public? final? [ResolvedTo(RAW_FIR)] fun someFun(): String { LAZY_BLOCK }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public? final? [ResolvedTo(RAW_FIR)] fun someFun(): String { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun someFun(): String { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public? final? [ResolvedTo(COMPANION_GENERATION)] fun someFun(): String { LAZY_BLOCK }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public? final? [ResolvedTo(SUPER_TYPES)] fun someFun(): String { LAZY_BLOCK }

TYPES:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public? final? [ResolvedTo(TYPES)] fun someFun(): R|kotlin/String| { LAZY_BLOCK }

STATUS:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public final [ResolvedTo(STATUS)] fun someFun(): R|kotlin/String| { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun someFun(): R|kotlin/String| { LAZY_BLOCK }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public final [ResolvedTo(CONTRACTS)] fun someFun(): R|kotlin/String| { LAZY_BLOCK }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun someFun(): R|kotlin/String| { LAZY_BLOCK }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public final [ResolvedTo(CONSTANT_EVALUATION)] fun someFun(): R|kotlin/String| { LAZY_BLOCK }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun someFun(): R|kotlin/String| { LAZY_BLOCK }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] ambiguousLocalEnum.kt
    public final [ResolvedTo(BODY_RESOLVE)] fun someFun(): R|kotlin/String| {
        local final [ResolvedTo(BODY_RESOLVE)] enum class EnumClass : R|kotlin/Enum<<local>/EnumClass>| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] constructor(): R|<local>/EnumClass| {
                super<R|kotlin/Enum<<local>/EnumClass>|>()
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] enum entry EnumClass: R|<local>/EnumClass|
            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] fun values(): R|kotlin/Array<<local>/EnumClass>| {
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|<local>/EnumClass| {
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] val entries: R|kotlin/enums/EnumEntries<<local>/EnumClass>|
                public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<<local>/EnumClass>|

        }

        ^someFun Q|<local>/EnumClass|.R|<local>/EnumClass|.R|SubstitutionOverride<<local>/EnumClass.toString: R|kotlin/String|>|()
    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] ambiguousLocalEnum.kt
    public final [ResolvedTo(BODY_RESOLVE)] fun someFun(): R|kotlin/String| {
        local final [ResolvedTo(BODY_RESOLVE)] enum class EnumClass : R|kotlin/Enum<<local>/EnumClass>| {
            private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] constructor(): R|<local>/EnumClass| {
                super<R|kotlin/Enum<<local>/EnumClass>|>()
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] enum entry EnumClass: R|<local>/EnumClass|
            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] fun values(): R|kotlin/Array<<local>/EnumClass>| {
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] fun valueOf([ResolvedTo(BODY_RESOLVE)] value: R|kotlin/String|): R|<local>/EnumClass| {
            }

            public final static [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=EnumClass] val entries: R|kotlin/enums/EnumEntries<<local>/EnumClass>|
                public [ResolvedTo(BODY_RESOLVE)] get(): R|kotlin/enums/EnumEntries<<local>/EnumClass>|

        }

        ^someFun Q|<local>/EnumClass|.R|<local>/EnumClass|.R|SubstitutionOverride<<local>/EnumClass.toString: R|kotlin/String|>|()
    }
