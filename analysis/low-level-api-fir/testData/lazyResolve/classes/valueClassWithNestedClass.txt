RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] valueClassWithNestedClass.kt
    @JvmInline[Unresolved]() public final? value [ResolvedTo(RAW_FIR)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: NestedClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @JvmInline[Unresolved]() public final? value [ResolvedTo(RAW_FIR)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: NestedClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @JvmInline[Unresolved]() public final? value [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: NestedClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @JvmInline[Unresolved]() public final? value [ResolvedTo(COMPANION_GENERATION)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: NestedClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @JvmInline[Unresolved]() public final? value [ResolvedTo(SUPER_TYPES)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: NestedClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final? value [ResolvedTo(TYPES)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(RAW_FIR)] [CorrespondingProperty=pack/ValueClass.value] value: NestedClass): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(STATUS)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(EXPECT_ACTUAL_MATCHING)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(CONTRACTS)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(CONSTANT_EVALUATION)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(ANNOTATION_ARGUMENTS)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public? [ResolvedTo(TYPES)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(TYPES)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] [IsFromPrimaryConstructor=true] val value: NestedClass = R|<local>/value|
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=ValueClass] get(): NestedClass

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val value: R|pack/ValueClass.NestedClass| = R|<local>/value|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] get(): R|pack/ValueClass.NestedClass|

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] valueClassWithNestedClass.kt
    @R|kotlin/jvm/JvmInline|[Types]() public final value [ResolvedTo(BODY_RESOLVE)] [FirValueClassRepresentationKey=InlineClassRepresentation(underlyingPropertyName=value, underlyingType=pack/ValueClass.NestedClass)] class ValueClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=pack/ValueClass.value] value: R|pack/ValueClass.NestedClass|): R|pack/ValueClass| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvedTo(BODY_RESOLVE)] [IsFromPrimaryConstructor=true] val value: R|pack/ValueClass.NestedClass| = R|<local>/value|
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=ValueClass] get(): R|pack/ValueClass.NestedClass|

        public final [ResolvedTo(BODY_RESOLVE)] class NestedClass : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=NestedClass] constructor(): R|pack/ValueClass.NestedClass| {
                super<R|kotlin/Any|>()
            }

        }

    }
