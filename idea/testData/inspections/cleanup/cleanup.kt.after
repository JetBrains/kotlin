import kotlin.reflect.KClass

interface Foo {
}


@deprecated("boo") fun bar() {}

enum class E {
    First, Second
}

enum class F(val name: String) {
    First("First"),
    Second("Second")
}

val f = { a: Int, b: Int -> a + b }

annotation class Ann(val arg1: KClass<*>, val arg2: KClass<out Any?>)

Ann(String::class, Int::class) class MyClass

class A private constructor()

val x = fun(x: String) { }

fun foo() {
    loop@
    for (i in 1..100) {
        /* comment */
        continue@loop
    }
}

fun unnecessarySafeCall(x: String) {
    x.length()
}

fun unnecessaryExclExcl(x: String) {
    x.length()
}

fun unnecessaryCast(x: String) = x

fun unnecessaryElvis(x: String) = x
