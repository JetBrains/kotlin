RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public? final? [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public? final? [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public? final? [ResolvedTo(COMPANION_GENERATION)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public? final? [ResolvedTo(SUPER_TYPES)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

TYPES:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public? final? [ResolvedTo(TYPES)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

STATUS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public final [ResolvedTo(STATUS)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public final [ResolvedTo(EXPECT_ACTUAL_MATCHING)] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public final [ResolvedTo(CONTRACTS)] fun resolveMe(): R|kotlin/Unit| {
        local final? [ResolvedTo(RAW_FIR)] class Local : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Local] constructor(): R|<local>/Local| {
                super<R|kotlin/Any|>()
            }

        }

        local final? [ResolvedTo(RAW_FIR)] fun localFunction([ResolvedTo(RAW_FIR)] usedClass: UsedClass, [ResolvedTo(RAW_FIR)] local: Local): R|kotlin/Unit| {
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public final [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] fun resolveMe(): R|kotlin/Unit| {
        local final? [ResolvedTo(RAW_FIR)] class Local : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Local] constructor(): R|<local>/Local| {
                super<R|kotlin/Any|>()
            }

        }

        local final? [ResolvedTo(RAW_FIR)] fun localFunction([ResolvedTo(RAW_FIR)] usedClass: UsedClass, [ResolvedTo(RAW_FIR)] local: Local): R|kotlin/Unit| {
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public final [ResolvedTo(CONSTANT_EVALUATION)] fun resolveMe(): R|kotlin/Unit| {
        local final? [ResolvedTo(RAW_FIR)] class Local : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Local] constructor(): R|<local>/Local| {
                super<R|kotlin/Any|>()
            }

        }

        local final? [ResolvedTo(RAW_FIR)] fun localFunction([ResolvedTo(RAW_FIR)] usedClass: UsedClass, [ResolvedTo(RAW_FIR)] local: Local): R|kotlin/Unit| {
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] fun resolveMe(): R|kotlin/Unit| {
        local final? [ResolvedTo(RAW_FIR)] class Local : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=Local] constructor(): R|<local>/Local| {
                super<R|kotlin/Any|>()
            }

        }

        local final? [ResolvedTo(RAW_FIR)] fun localFunction([ResolvedTo(RAW_FIR)] usedClass: UsedClass, [ResolvedTo(RAW_FIR)] local: Local): R|kotlin/Unit| {
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] resolveTypeFromLocalFunction.kt
    public final? [ResolvedTo(RAW_FIR)] class UnusedClass : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final? [ResolvedTo(RAW_FIR)] interface UsedInterface : R|kotlin/Any| {
    }
    public final? [ResolvedTo(RAW_FIR)] class UsedClass : UsedInterface {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            LAZY_super<<implicit>>
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun resolveMe(): R|kotlin/Unit| {
        local final [ResolvedTo(BODY_RESOLVE)] class Local : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Local] constructor(): R|<local>/Local| {
                super<R|kotlin/Any|>()
            }

        }

        local final [ResolvedTo(BODY_RESOLVE)] fun localFunction([ResolvedTo(BODY_RESOLVE)] usedClass: R|one/two/UsedClass|, [ResolvedTo(BODY_RESOLVE)] local: R|<local>/Local|): R|kotlin/Unit| {
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] resolveTypeFromLocalFunction.kt
    public final [ResolvedTo(BODY_RESOLVE)] class UnusedClass : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=UnusedClass] constructor(): R|one/two/UnusedClass| {
            super<R|kotlin/Any|>()
        }

    }
    public abstract [ResolvedTo(BODY_RESOLVE)] interface UsedInterface : R|kotlin/Any| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] class UsedClass : R|one/two/UsedInterface| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=UsedClass] constructor(): R|one/two/UsedClass| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] fun resolveMe(): R|kotlin/Unit| {
        local final [ResolvedTo(BODY_RESOLVE)] class Local : R|kotlin/Any| {
            public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Local] constructor(): R|<local>/Local| {
                super<R|kotlin/Any|>()
            }

        }

        local final [ResolvedTo(BODY_RESOLVE)] fun localFunction([ResolvedTo(BODY_RESOLVE)] usedClass: R|one/two/UsedClass|, [ResolvedTo(BODY_RESOLVE)] local: R|<local>/Local|): R|kotlin/Unit| {
        }

    }
