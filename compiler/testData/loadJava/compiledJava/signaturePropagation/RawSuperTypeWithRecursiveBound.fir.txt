public open class RawSuperTypeWithRecursiveBound : R|kotlin/Any| {
    public constructor(): R|test/RawSuperTypeWithRecursiveBound|

    public open inner class Derived : R|kotlin/Any|, R|Raw type test/RawSuperTypeWithRecursiveBound.Super<ft<test/RawSuperTypeWithRecursiveBound.Super<*>, test/RawSuperTypeWithRecursiveBound.Super<*>?>>| {
        public open fun foo(o: R|kotlin/Any!|): R|kotlin/Unit|

        @R|java/lang/Override|() public open fun foo(o: R|ft<Raw type test/RawSuperTypeWithRecursiveBound.Super<ft<test/RawSuperTypeWithRecursiveBound.Super<*>, test/RawSuperTypeWithRecursiveBound.Super<*>?>>, test/RawSuperTypeWithRecursiveBound.Super<*>?>|): R|kotlin/Unit|

        @R|java/lang/Override|() public open fun dummy(): R|kotlin/Unit|

        public test/RawSuperTypeWithRecursiveBound.constructor(): R|test/RawSuperTypeWithRecursiveBound.Derived|

    }
    public abstract interface Super<T : R|ft<test/RawSuperTypeWithRecursiveBound.Super<ft<T & Any, T?>>, test/RawSuperTypeWithRecursiveBound.Super<ft<T & Any, T?>>?>|> : R|kotlin/Any| {
        public abstract fun foo(t: R|ft<T & Any, T?>|): R|kotlin/Unit|

        public abstract fun dummy(): R|kotlin/Unit|

    }
}
