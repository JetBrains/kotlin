package

public fun acquireIntervals(): kotlin.collections.List<Interval>
public fun buildTree(/*0*/ segments: kotlin.collections.List<Interval>): IntervalTree?
public fun </*0*/ E> emptyList(): kotlin.collections.List<E>
public fun main(): kotlin.Unit

public final class Interval {
    public constructor Interval()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final data class IntervalTree {
    public constructor IntervalTree(/*0*/ left: IntervalTree?, /*1*/ right: IntervalTree?, /*2*/ intervals: kotlin.collections.List<Interval>, /*3*/ median: kotlin.Float)
    public final val intervals: kotlin.collections.List<Interval>
    public final val left: IntervalTree?
    public final val median: kotlin.Float
    public final val right: IntervalTree?
    public final operator /*synthesized*/ fun component1(): IntervalTree?
    public final operator /*synthesized*/ fun component2(): IntervalTree?
    public final operator /*synthesized*/ fun component3(): kotlin.collections.List<Interval>
    public final operator /*synthesized*/ fun component4(): kotlin.Float
    public final /*synthesized*/ fun copy(/*0*/ left: IntervalTree? = ..., /*1*/ right: IntervalTree? = ..., /*2*/ intervals: kotlin.collections.List<Interval> = ..., /*3*/ median: kotlin.Float = ...): IntervalTree
    public open override /*1*/ /*synthesized*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*synthesized*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*synthesized*/ fun toString(): kotlin.String
}
