class LoopTest {
  private var a$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#a$volatile
    }
    private set(value: Int) {
      return <this>.#a$volatile = value
    }

  private var a1$volatile: Int
    field = 1
    private get(): Int {
      return <this>.#a1$volatile
    }
    private set(value: Int) {
      return <this>.#a1$volatile = value
    }

  private var b$volatile: Boolean
    field = true
    private get(): Boolean {
      return <this>.#b$volatile
    }
    private set(value: Boolean) {
      return <this>.#b$volatile = value
    }

  private var l$volatile: Long
    field = 5000000000L
    private get(): Long {
      return <this>.#l$volatile
    }
    private set(value: Long) {
      return <this>.#l$volatile = value
    }

  private var r$volatile: Any?
    field = A(s = "aaaa")
    private get(): Any? {
      return <this>.#r$volatile
    }
    private set(value: Any?) {
      return <this>.#r$volatile = value
    }

  private var rs$volatile: Any?
    field = "bbbb"
    private get(): Any? {
      return <this>.#rs$volatile
    }
    private set(value: Any?) {
      return <this>.#rs$volatile = value
    }

  class A {
    val s: String
      field = s
      get

    constructor(s: String) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private inline fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_0: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_1: R = action$atomicfu.invoke(p1 = tmp_0)
      when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_0, newValue = tmp_1) -> return tmp_0
      }
    }
  }

  private inline fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, action$atomicfu: Function1<Boolean, Boolean>): Boolean {
    while (true) { // BLOCK
      val tmp_2: T = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_3: R = action$atomicfu.invoke(p1 = tmp_2)
      when {
        compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_2, newValue = tmp_3) -> return tmp_2
      }
    }
  }

  private inline fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Int>): Int {
    while (true) { // BLOCK
      val tmp_4: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_5: R = action$atomicfu.invoke(p1 = tmp_4)
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_4, newValue = tmp_5) -> return tmp_4
      }
    }
  }

  private inline fun getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, action$atomicfu: Function1<Long, Long>): Long {
    while (true) { // BLOCK
      val tmp_6: T = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_7: R = action$atomicfu.invoke(p1 = tmp_6)
      when {
        compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_6, newValue = tmp_7) -> return tmp_6
      }
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Unit>) {
    while (true) { // BLOCK
      val tmp_8: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_8)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, action$atomicfu: Function1<Boolean, Unit>) {
    while (true) { // BLOCK
      val tmp_9: T = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_9)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Unit>) {
    while (true) { // BLOCK
      val tmp_10: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_10)
    }
  }

  private inline fun loop$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, action$atomicfu: Function1<Long, Unit>) {
    while (true) { // BLOCK
      val tmp_11: T = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */)
      action$atomicfu.invoke(p1 = tmp_11)
    }
  }

  private inline fun update$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>) {
    while (true) { // BLOCK
      val tmp_12: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_13: R = action$atomicfu.invoke(p1 = tmp_12)
      when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_12, newValue = tmp_13) -> return Unit
      }
    }
  }

  private inline fun update$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, action$atomicfu: Function1<Boolean, Boolean>) {
    while (true) { // BLOCK
      val tmp_14: T = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_15: R = action$atomicfu.invoke(p1 = tmp_14)
      when {
        compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_14, newValue = tmp_15) -> return Unit
      }
    }
  }

  private inline fun update$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Int>) {
    while (true) { // BLOCK
      val tmp_16: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_17: R = action$atomicfu.invoke(p1 = tmp_16)
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_16, newValue = tmp_17) -> return Unit
      }
    }
  }

  private inline fun update$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, action$atomicfu: Function1<Long, Long>) {
    while (true) { // BLOCK
      val tmp_18: T = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_19: R = action$atomicfu.invoke(p1 = tmp_18)
      when {
        compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_18, newValue = tmp_19) -> return Unit
      }
    }
  }

  private inline fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any(crossinline handler$atomicfu: Function0<KMutableProperty0<Any?>>, action$atomicfu: Function1<Any?, Any?>): Any? {
    while (true) { // BLOCK
      val tmp_20: T = atomicGetField<Any?>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_21: R = action$atomicfu.invoke(p1 = tmp_20)
      when {
        compareAndSetField<Any?>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_20, newValue = tmp_21) -> return tmp_21
      }
    }
  }

  private inline fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>, action$atomicfu: Function1<Boolean, Boolean>): Boolean {
    while (true) { // BLOCK
      val tmp_22: T = atomicGetField<Boolean>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_23: R = action$atomicfu.invoke(p1 = tmp_22)
      when {
        compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_22, newValue = tmp_23) -> return tmp_23
      }
    }
  }

  private inline fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int(crossinline handler$atomicfu: Function0<KMutableProperty0<Int>>, action$atomicfu: Function1<Int, Int>): Int {
    while (true) { // BLOCK
      val tmp_24: T = atomicGetField<Int>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_25: R = action$atomicfu.invoke(p1 = tmp_24)
      when {
        compareAndSetField<Int>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_24, newValue = tmp_25) -> return tmp_25
      }
    }
  }

  private inline fun updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long(crossinline handler$atomicfu: Function0<KMutableProperty0<Long>>, action$atomicfu: Function1<Long, Long>): Long {
    while (true) { // BLOCK
      val tmp_26: T = atomicGetField<Long>(/* <this> = handler$atomicfu.invoke() */)
      val tmp_27: R = action$atomicfu.invoke(p1 = tmp_26)
      when {
        compareAndSetField<Long>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = tmp_26, newValue = tmp_27) -> return tmp_27
      }
    }
  }

  fun atomicfuBooleanGetAndUpdateTest() {
    atomicSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ newValue = false)
    val resBool: Boolean = <this>.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = local inline fun <b$volatile-getter>(): KMutableProperty0<Boolean> {
      return LoopTest<this>::b$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Boolean): Boolean {
      return when {
        value.not() -> { // BLOCK
          compareAndSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ expectedValue = false, newValue = true)
        }
        else -> { // BLOCK
          true
        }
      }
    }
)
    assertTrue(actual = resBool)
    assertTrue(actual = atomicGetField<Boolean>(/* <this> = LoopTest<this>::b$volatile */) as Boolean)
  }

  fun atomicfuBooleanLoopTest(newValue: Boolean): Boolean {
    atomicSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ newValue = true)
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = local inline fun <b$volatile-getter>(): KMutableProperty0<Boolean> {
      return LoopTest<this>::b$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Boolean) {
      when {
        EQEQ(arg0 = cur, arg1 = false) -> { // BLOCK
          when {
            compareAndSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ expectedValue = false, newValue = newValue) -> { // BLOCK
              assertEquals<Boolean>(expected = newValue, actual = atomicGetField<Boolean>(/* <this> = LoopTest<this>::b$volatile */) as Boolean)
              return atomicGetField<Boolean>(/* <this> = LoopTest<this>::b$volatile */) as Boolean
            }
          }
        }
        else -> { // BLOCK
          atomicSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ newValue = false)
        }
      }
    }
)
  }

  fun atomicfuBooleanUpdateAndGetTest() {
    atomicSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ newValue = false)
    val resBool: Boolean = <this>.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = local inline fun <b$volatile-getter>(): KMutableProperty0<Boolean> {
      return LoopTest<this>::b$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Boolean): Boolean {
      return when {
        value.not() -> { // BLOCK
          compareAndSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ expectedValue = false, newValue = true)
        }
        else -> { // BLOCK
          true
        }
      }
    }
)
    assertTrue(actual = resBool)
    assertTrue(actual = atomicGetField<Boolean>(/* <this> = LoopTest<this>::b$volatile */) as Boolean)
  }

  fun atomicfuBooleanUpdateTest() {
    atomicSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ newValue = false)
    <this>.update$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = local inline fun <b$volatile-getter>(): KMutableProperty0<Boolean> {
      return LoopTest<this>::b$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Boolean): Boolean {
      return when {
        value.not() -> { // BLOCK
          compareAndSetField<Boolean>(/* <this> = LoopTest<this>::b$volatile, */ expectedValue = false, newValue = true)
        }
        else -> { // BLOCK
          true
        }
      }
    }
)
    assertEquals<Boolean>(expected = true, actual = atomicGetField<Boolean>(/* <this> = LoopTest<this>::b$volatile */) as Boolean)
    assertTrue(actual = atomicGetField<Boolean>(/* <this> = LoopTest<this>::b$volatile */) as Boolean)
  }

  fun atomicfuGetAndUpdateTest() {
    <this>.atomicfuIntGetAndUpdateTest()
    <this>.atomicfuBooleanGetAndUpdateTest()
    <this>.atomicfuLongGetAndUpdateTest()
    <this>.atomicfuRefGetAndUpdateTest()
  }

  fun atomicfuIntGetAndUpdateTest() {
    atomicSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ newValue = 0)
    val resInt: Int = <this>.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Int): Int {
      return when {
        less(arg0 = value, arg1 = 10) -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::a$volatile, */ delta = 1).plus(other = 1)
        }
        else -> { // BLOCK
          2147483647
        }
      }
    }
)
    assertEquals<Int>(expected = 10, actual = resInt)
    assertEquals<Int>(expected = 2147483647, actual = atomicGetField<Int>(/* <this> = LoopTest<this>::a$volatile */) as Int)
  }

  fun atomicfuIntLoopTest(newValue: Int): Int {
    atomicSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ newValue = 0)
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Int) {
      when {
        EQEQ(arg0 = cur, arg1 = 10) -> { // BLOCK
          compareAndSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ expectedValue = 10, newValue = newValue) /*~> Unit */
          assertEquals<Int>(expected = newValue, actual = atomicGetField<Int>(/* <this> = LoopTest<this>::a$volatile */) as Int)
          return atomicGetField<Int>(/* <this> = LoopTest<this>::a$volatile */) as Int
        }
        else -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::a$volatile, */ delta = 1).plus(other = 1)
        }
      } /*~> Unit */
    }
)
  }

  fun atomicfuIntUpdateAndGetTest() {
    atomicSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ newValue = 0)
    val resInt: Int = <this>.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Int): Int {
      return when {
        less(arg0 = value, arg1 = 10) -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::a$volatile, */ delta = 1).plus(other = 1)
        }
        else -> { // BLOCK
          2147483647
        }
      }
    }
)
    assertEquals<Int>(expected = 2147483647, actual = resInt)
    assertEquals<Int>(expected = 2147483647, actual = atomicGetField<Int>(/* <this> = LoopTest<this>::a$volatile */) as Int)
  }

  fun atomicfuIntUpdateTest() {
    atomicSetField<Int>(/* <this> = LoopTest<this>::a$volatile, */ newValue = 0)
    <this>.update$atomicfu$NATIVE_PROPERTY_REF$Int(handler$atomicfu = local inline fun <a$volatile-getter>(): KMutableProperty0<Int> {
      return LoopTest<this>::a$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Int): Int {
      return when {
        less(arg0 = value, arg1 = 10) -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::a$volatile, */ delta = 1).plus(other = 1)
        }
        else -> { // BLOCK
          2147483647
        }
      }
    }
)
    assertEquals<Int>(expected = 2147483647, actual = atomicGetField<Int>(/* <this> = LoopTest<this>::a$volatile */) as Int)
  }

  fun atomicfuLongGetAndUpdateTest() {
    atomicSetField<Long>(/* <this> = LoopTest<this>::l$volatile, */ newValue = 0L)
    val resLong: Long = <this>.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <l$volatile-getter>(): KMutableProperty0<Long> {
      return LoopTest<this>::l$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Long): Long {
      return when {
        less(arg0 = value, arg1 = 10.toLong()) -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::l$volatile, */ delta = 1L /*as Long */).plus(other = 1L)
        }
        else -> { // BLOCK
          9223372036854775807L
        }
      }
    }
)
    assertEquals<Long>(expected = 9223372036854775807L, actual = atomicGetField<Long>(/* <this> = LoopTest<this>::l$volatile */) as Long)
    assertEquals<Long>(expected = 10L, actual = resLong)
  }

  fun atomicfuLongLoopTest(newValue: Long): Long {
    atomicSetField<Long>(/* <this> = LoopTest<this>::l$volatile, */ newValue = 5000000000L)
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <l$volatile-getter>(): KMutableProperty0<Long> {
      return LoopTest<this>::l$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: Long) {
      when {
        EQEQ(arg0 = cur, arg1 = 5000000010L) -> { // BLOCK
          when {
            compareAndSetField<Long>(/* <this> = LoopTest<this>::l$volatile, */ expectedValue = 5000000010L, newValue = newValue) -> { // BLOCK
              assertEquals<Long>(expected = newValue, actual = atomicGetField<Long>(/* <this> = LoopTest<this>::l$volatile */) as Long)
              return atomicGetField<Long>(/* <this> = LoopTest<this>::l$volatile */) as Long
            }
          }
        }
        else -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::l$volatile, */ delta = 1L /*as Long */).plus(other = 1L)
        }
      } /*~> Unit */
    }
)
  }

  fun atomicfuLongUpdateAndGetTest() {
    atomicSetField<Long>(/* <this> = LoopTest<this>::l$volatile, */ newValue = 0L)
    val resLong: Long = <this>.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <l$volatile-getter>(): KMutableProperty0<Long> {
      return LoopTest<this>::l$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Long): Long {
      return when {
        less(arg0 = value, arg1 = 10.toLong()) -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::l$volatile, */ delta = 1L /*as Long */).plus(other = 1L)
        }
        else -> { // BLOCK
          9223372036854775807L
        }
      }
    }
)
    assertEquals<Long>(expected = 9223372036854775807L, actual = atomicGetField<Long>(/* <this> = LoopTest<this>::l$volatile */) as Long)
    assertEquals<Long>(expected = 9223372036854775807L, actual = resLong)
  }

  fun atomicfuLongUpdateTest() {
    atomicSetField<Long>(/* <this> = LoopTest<this>::l$volatile, */ newValue = 0L)
    <this>.update$atomicfu$NATIVE_PROPERTY_REF$Long(handler$atomicfu = local inline fun <l$volatile-getter>(): KMutableProperty0<Long> {
      return LoopTest<this>::l$volatile
    }
, action$atomicfu = local fun <anonymous>(value: Long): Long {
      return when {
        less(arg0 = value, arg1 = 10.toLong()) -> { // BLOCK
          getAndAddField(/* <this> = LoopTest<this>::l$volatile, */ delta = 1L /*as Long */).plus(other = 1L)
        }
        else -> { // BLOCK
          9223372036854775807L
        }
      }
    }
)
    assertEquals<Long>(expected = 9223372036854775807L, actual = atomicGetField<Long>(/* <this> = LoopTest<this>::l$volatile */) as Long)
  }

  fun atomicfuLoopTest() {
    assertEquals<Int>(expected = 777, actual = <this>.atomicfuIntLoopTest(newValue = 777))
    assertFalse(actual = <this>.atomicfuBooleanLoopTest(newValue = false))
    assertEquals<Long>(expected = 9000000000L, actual = <this>.atomicfuLongLoopTest(newValue = 9000000000L))
    assertEquals<String>(expected = "bbbb", actual = <this>.atomicfuRefLoopTest(newValue = A(s = "bbbb")).<get-s>())
  }

  fun atomicfuRefGetAndUpdateTest() {
    atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "aaaa"))
    val resRef: A = <this>.getAndUpdate$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <r$volatile-getter>(): KMutableProperty0<Any?> {
      return LoopTest<this>::r$volatile
    }
, action$atomicfu = local fun <anonymous>(value: A): A {
      return when {
        EQEQ(arg0 = value.<get-s>(), arg1 = "aaaa") -> { // BLOCK
          atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "bbbb"))
          atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?
        }
        else -> { // BLOCK
          A(s = "cccc" + value.<get-s>())
        }
      }
    }
)
    assertEquals<String>(expected = "bbbb", actual = resRef.<get-s>())
    assertEquals<String>(expected = "ccccbbbb", actual = atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?.<get-s>())
  }

  fun atomicfuRefLoopTest(newValue: A): A {
    atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "aaa"))
    <this>.loop$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <r$volatile-getter>(): KMutableProperty0<Any?> {
      return LoopTest<this>::r$volatile
    }
, action$atomicfu = local fun <anonymous>(cur: A) {
      when {
        EQEQ(arg0 = cur.<get-s>(), arg1 = "bbb") -> { // BLOCK
          compareAndSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ expectedValue = cur, newValue = newValue) /*~> Unit */
          assertEquals<String>(expected = newValue.<get-s>(), actual = atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?.<get-s>())
          return atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?
        }
        else -> { // BLOCK
          atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "bbb"))
        }
      }
    }
)
  }

  fun atomicfuRefUpdateAndGetTest() {
    atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "aaaa"))
    val resRef: A = <this>.updateAndGet$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <r$volatile-getter>(): KMutableProperty0<Any?> {
      return LoopTest<this>::r$volatile
    }
, action$atomicfu = local fun <anonymous>(value: A): A {
      return when {
        EQEQ(arg0 = value.<get-s>(), arg1 = "aaaa") -> { // BLOCK
          atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "bbbb"))
          atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?
        }
        else -> { // BLOCK
          A(s = "cccc" + value.<get-s>())
        }
      }
    }
)
    assertEquals<String>(expected = "ccccbbbb", actual = resRef.<get-s>())
    assertEquals<String>(expected = "ccccbbbb", actual = atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?.<get-s>())
  }

  fun atomicfuRefUpdateTest() {
    atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "aaaa"))
    <this>.update$atomicfu$NATIVE_PROPERTY_REF$Any(handler$atomicfu = local inline fun <r$volatile-getter>(): KMutableProperty0<Any?> {
      return LoopTest<this>::r$volatile
    }
, action$atomicfu = local fun <anonymous>(value: A): A {
      return when {
        EQEQ(arg0 = value.<get-s>(), arg1 = "aaaa") -> { // BLOCK
          atomicSetField<Any?>(/* <this> = LoopTest<this>::r$volatile, */ newValue = A(s = "bbbb"))
          atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?
        }
        else -> { // BLOCK
          A(s = "cccc" + value.<get-s>())
        }
      }
    }
)
    assertEquals<String>(expected = "ccccbbbb", actual = atomicGetField<Any?>(/* <this> = LoopTest<this>::r$volatile */) as Any?.<get-s>())
  }

  fun atomicfuUpdateAndGetTest() {
    <this>.atomicfuIntUpdateAndGetTest()
    <this>.atomicfuBooleanUpdateAndGetTest()
    <this>.atomicfuLongUpdateAndGetTest()
    <this>.atomicfuRefUpdateAndGetTest()
  }

  fun atomicfuUpdateTest() {
    <this>.atomicfuIntUpdateTest()
    <this>.atomicfuBooleanUpdateTest()
    <this>.atomicfuLongUpdateTest()
    <this>.atomicfuRefUpdateTest()
  }

}

fun box(): String {
  val testClass: LoopTest = LoopTest()
  testClass.atomicfuLoopTest()
  testClass.atomicfuUpdateTest()
  testClass.atomicfuUpdateAndGetTest()
  testClass.atomicfuGetAndUpdateTest()
  return "OK"
}
