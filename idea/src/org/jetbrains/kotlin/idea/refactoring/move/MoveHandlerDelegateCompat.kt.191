/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.refactoring.move

import com.intellij.psi.PsiElement
import com.intellij.psi.PsiReference
import com.intellij.refactoring.move.MoveHandlerDelegate
import com.intellij.refactoring.move.moveFilesOrDirectories.MoveFilesOrDirectoriesHandler

// BUNCH: 191
abstract class MoveHandlerDelegateCompat : MoveHandlerDelegate() {
    override fun canMove(elements: Array<PsiElement>, targetContainer: PsiElement?): Boolean =
        canMove(elements, targetContainer, null)

    open fun canMove(elements: Array<out PsiElement>, targetContainer: PsiElement?, reference: PsiReference?): Boolean =
        super.canMove(elements, targetContainer)
}

// BUNCH: 191
abstract class MoveFilesOrDirectoriesHandlerCompat : MoveFilesOrDirectoriesHandler() {
    override fun canMove(elements: Array<PsiElement>, targetContainer: PsiElement?): Boolean =
        canMove(elements, targetContainer, null)

    open fun canMove(elements: Array<out PsiElement>, targetContainer: PsiElement?, reference: PsiReference?): Boolean =
        super.canMove(elements, targetContainer)
}