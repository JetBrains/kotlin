package

public var global: kotlin.Int

public final class Delegate {
    public constructor Delegate()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ thisRef: kotlin.Any?, /*1*/ property: kotlin.reflect.KProperty<*>): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun setValue(/*0*/ thisRef: kotlin.Any?, /*1*/ property: kotlin.reflect.KProperty<*>, /*2*/ value: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final enum class EnumEntryWithMutableFieldImplementedByDelegate : kotlin.Enum<EnumEntryWithMutableFieldImplementedByDelegate> {
    enum entry ONE

    private constructor EnumEntryWithMutableFieldImplementedByDelegate()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: EnumEntryWithMutableFieldImplementedByDelegate): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): EnumEntryWithMutableFieldImplementedByDelegate
    public final /*synthesized*/ fun values(): kotlin.Array<EnumEntryWithMutableFieldImplementedByDelegate>
}

public final enum class EnumEntryWithSetter : kotlin.Enum<EnumEntryWithSetter> {
    enum entry ONE

    private constructor EnumEntryWithSetter()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: EnumEntryWithSetter): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): EnumEntryWithSetter
    public final /*synthesized*/ fun values(): kotlin.Array<EnumEntryWithSetter>
}

public final enum class EnumWithMutableFieldImplementedByDelegate : kotlin.Enum<EnumWithMutableFieldImplementedByDelegate> {
    enum entry ONE

    private constructor EnumWithMutableFieldImplementedByDelegate()
    public final var delegatedField: kotlin.Int
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: EnumWithMutableFieldImplementedByDelegate): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): EnumWithMutableFieldImplementedByDelegate
    public final /*synthesized*/ fun values(): kotlin.Array<EnumWithMutableFieldImplementedByDelegate>
}

public final enum class EnumWithSetter : kotlin.Enum<EnumWithSetter> {
    enum entry ONE

    private constructor EnumWithSetter()
    public final var fieldWithSetter: kotlin.Int
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: EnumWithSetter): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): EnumWithSetter
    public final /*synthesized*/ fun values(): kotlin.Array<EnumWithSetter>
}

public final enum class EnumWithSetterField : kotlin.Enum<EnumWithSetterField> {
    enum entry ONE

    private constructor EnumWithSetterField()
    public final var fieldWithSetter: kotlin.Int
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: EnumWithSetterField): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): EnumWithSetterField
    public final /*synthesized*/ fun values(): kotlin.Array<EnumWithSetterField>
}

public final enum class ImmutableEnum : kotlin.Enum<ImmutableEnum> {
    enum entry ONE

    enum entry TWO

    private constructor ImmutableEnum(/*0*/ immutable: kotlin.Int)
    public final val immutable: kotlin.Int
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: ImmutableEnum): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): ImmutableEnum
    public final /*synthesized*/ fun values(): kotlin.Array<ImmutableEnum>
}

public final enum class ImmutableEnumEntry : kotlin.Enum<ImmutableEnumEntry> {
    enum entry ONE

    private constructor ImmutableEnumEntry()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: ImmutableEnumEntry): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): ImmutableEnumEntry
    public final /*synthesized*/ fun values(): kotlin.Array<ImmutableEnumEntry>
}

public final enum class MutableEnum : kotlin.Enum<MutableEnum> {
    enum entry ONE

    enum entry TWO

    private constructor MutableEnum(/*0*/ mutable: kotlin.Int)
    public final var mutable: kotlin.Int
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: MutableEnum): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): MutableEnum
    public final /*synthesized*/ fun values(): kotlin.Array<MutableEnum>
}

public final enum class MutableEnumEntry : kotlin.Enum<MutableEnumEntry> {
    enum entry ONE

    private constructor MutableEnumEntry()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: MutableEnumEntry): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): MutableEnumEntry
    public final /*synthesized*/ fun values(): kotlin.Array<MutableEnumEntry>
}
