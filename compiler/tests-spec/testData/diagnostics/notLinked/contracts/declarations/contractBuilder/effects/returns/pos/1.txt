package

public fun case_1(/*0*/ value_1: kotlin.Boolean): kotlin.Unit
    Returns(WILDCARD) -> value_1

public fun case_10(/*0*/ value_1: kotlin.Any?): kotlin.Unit
    Returns(WILDCARD) -> value_1 == null

public fun case_11(/*0*/ value_1: kotlin.Any?): kotlin.Boolean?
    Returns(NULL) -> value_1 != null

public fun case_2(/*0*/ value_1: kotlin.Boolean): kotlin.Boolean
    Returns(FALSE) -> !value_1

public fun case_5(/*0*/ value_1: kotlin.Any?): kotlin.Unit
    Returns(WILDCARD) -> value_1 is String

public fun case_6(/*0*/ value_1: kotlin.Any?): kotlin.Unit
    Returns(WILDCARD) -> value_1 !is String?

public fun kotlin.Char.case_12(): kotlin.Unit
    Returns(WILDCARD) -> <this> == null

public fun </*0*/ T : kotlin.Number> T?.case_13(): kotlin.Unit
    Returns(WILDCARD) -> <this> == null

public fun kotlin.Boolean.case_3(): kotlin.Unit
    Returns(WILDCARD) -> !<this>

public fun kotlin.Any?.case_7(): kotlin.Unit
    Returns(WILDCARD) -> <this> is Number

public fun </*0*/ T> T?.case_8(): kotlin.Unit
    Returns(WILDCARD) -> <this> !is ClassLevel3?

public fun </*0*/ T : kotlin.Number?> T.case_9(): kotlin.Boolean?
    Returns(NULL) -> <this> is Byte?

public final class Class {
    public constructor Class()
    public final val prop_1: kotlin.Int = 1
    public final val prop_2: kotlin.Int = 2
    public final val prop_3: kotlin.Int = 3
    public final val prop_4: kotlin.Float? = 3.0.toFloat()
    public final val prop_5: kotlin.Float = 3.0.toFloat()
    public final val prop_6: kotlin.String = "..."
    public final val prop_7: kotlin.Nothing? = "..."
    public final operator fun contains(/*0*/ a: kotlin.Char): kotlin.Boolean
    public final operator fun contains(/*0*/ a: kotlin.Int): kotlin.Boolean
    public final operator fun contains(/*0*/ a: kotlin.Long): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun fun_1(): (kotlin.Int) -> (kotlin.Int) -> kotlin.Int
    public final fun fun_2(/*0*/ value_1: kotlin.Int): kotlin.Int
    public final fun fun_3(/*0*/ value_1: kotlin.Int): (kotlin.Int) -> kotlin.Int
    public final fun getCharArray(): kotlin.CharArray
    public final fun getIntArray(): kotlin.IntArray
    public final fun getLongArray(): kotlin.LongArray
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final class _NestedClass {
        public constructor _NestedClass()
        public final val prop_4: kotlin.Int = 4
        public final val prop_5: kotlin.Int = 5
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public open class ClassLevel1 {
    public constructor ClassLevel1()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun test1(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class ClassLevel2 : ClassLevel1 {
    public constructor ClassLevel2()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun test1(): kotlin.Unit
    public final fun test2(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class ClassLevel3 : ClassLevel2 {
    public constructor ClassLevel3()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun test1(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test2(): kotlin.Unit
    public final fun test3(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class ClassLevel4 : ClassLevel3 {
    public constructor ClassLevel4()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun test1(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test2(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test3(): kotlin.Unit
    public final fun test4(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class ClassLevel5 : ClassLevel4 {
    public constructor ClassLevel5()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun test1(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test2(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test3(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test4(): kotlin.Unit
    public final fun test5(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class ClassLevel6 : ClassLevel5 {
    public constructor ClassLevel6()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun test1(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test2(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test3(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test4(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun test5(): kotlin.Unit
    public final fun test6(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class ClassWithCompanionObject {
    public constructor ClassWithCompanionObject()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public final class ClassWithSixTypeParameters</*0*/ K, /*1*/ in L, /*2*/ out M, /*3*/ O, /*4*/ in P, /*5*/ out R> {
    public constructor ClassWithSixTypeParameters</*0*/ K, /*1*/ in L, /*2*/ out M, /*3*/ O, /*4*/ in P, /*5*/ out R>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class ClassWithThreeTypeParameters</*0*/ K, /*1*/ L, /*2*/ M> {
    public constructor ClassWithThreeTypeParameters</*0*/ K, /*1*/ L, /*2*/ M>(/*0*/ x: K, /*1*/ y: L, /*2*/ z: M)
    public final val x: K
    public final val y: L
    public final val z: M
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class ClassWithTwoTypeParameters</*0*/ K, /*1*/ L> {
    public constructor ClassWithTwoTypeParameters</*0*/ K, /*1*/ L>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun test1(): [ERROR : T]?
    public final fun test2(): K?
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class EmptyClass {
    public constructor EmptyClass()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class In</*0*/ in T> {
    public constructor In</*0*/ in T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun </*0*/ K : T> getWithUpperBoundT(): K
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun put(/*0*/ x: T): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Inv</*0*/ T> {
    public constructor Inv</*0*/ T>(/*0*/ x: T = ...)
    public final val x: T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun get(): T
    public final fun getNullable(): T?
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun put(/*0*/ x: T): kotlin.Unit
    public final fun test(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Out</*0*/ out T> {
    public constructor Out</*0*/ out T>(/*0*/ x: T = ...)
    public final val x: T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun get(): T
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
