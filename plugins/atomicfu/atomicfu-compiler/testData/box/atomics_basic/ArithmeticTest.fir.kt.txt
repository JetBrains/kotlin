class BooleanArithmetic {
  private var _x$volatile: Boolean
    field = false
    private get(): Boolean {
      return <this>.#_x$volatile
    }
    private set(value: Boolean) {
      return <this>.#_x$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testBoolean() {
    assertEquals<Boolean>(expected = false, actual = atomicGetField<Boolean>(/* <this> = BooleanArithmetic<this>::_x$volatile */) as Boolean)
    assertFalse(actual = <this>.<get-x>())
    atomicSetField<Boolean>(/* <this> = BooleanArithmetic<this>::_x$volatile, */ newValue = true)
    assertTrue(actual = <this>.<get-x>())
    assertTrue(actual = getAndSetField<Boolean>(/* <this> = BooleanArithmetic<this>::_x$volatile, */ newValue = true))
    assertTrue(actual = compareAndSetField<Boolean>(/* <this> = BooleanArithmetic<this>::_x$volatile, */ expectedValue = true, newValue = false))
    assertFalse(actual = <this>.<get-x>())
  }

  val x: Boolean
    get(): Boolean {
      return atomicGetField<Boolean>(/* <this> = BooleanArithmetic<this>::_x$volatile */) as Boolean
    }

}

class IntArithmetic {
  private var _x$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#_x$volatile
    }
    private set(value: Int) {
      return <this>.#_x$volatile = value
    }

  private var local$volatile: Int
    field = 0
    private get(): Int {
      return <this>.#local$volatile
    }
    private set(value: Int) {
      return <this>.#local$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun test() {
    <this>.testGetValue()
    <this>.testAtomicCallPlaces()
    <this>.testInt()
  }

  private fun testAtomicCallPlaces() {
    atomicSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ newValue = 5)
    compareAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ expectedValue = 5, newValue = 42) /*~> Unit */
    val res: Boolean = compareAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ expectedValue = 42, newValue = 45)
    assertTrue(actual = res)
    assertTrue(actual = compareAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ expectedValue = 45, newValue = 77))
    assertFalse(actual = compareAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ expectedValue = 95, newValue = 77))
    assertTrue(actual = compareAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ expectedValue = 77, newValue = 88))
  }

  private fun testGetValue() {
    atomicSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ newValue = 5)
    assertEquals<Int>(expected = 5, actual = atomicGetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile */) as Int)
    var aValue: Int = atomicGetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile */) as Int
    assertEquals<Int>(expected = 5, actual = aValue)
    assertEquals<Int>(expected = 5, actual = <this>.<get-x>())
    atomicSetField<Int>(/* <this> = IntArithmetic<this>::local$volatile, */ newValue = 555)
    aValue = atomicGetField<Int>(/* <this> = IntArithmetic<this>::local$volatile */) as Int
    assertEquals<Int>(expected = aValue, actual = atomicGetField<Int>(/* <this> = IntArithmetic<this>::local$volatile */) as Int)
  }

  private fun testInt() {
    atomicSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ newValue = 0)
    assertEquals<Int>(expected = 0, actual = <this>.<get-x>())
    val update: Int = 3
    assertEquals<Int>(expected = 0, actual = getAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ newValue = update))
    assertTrue(actual = compareAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ expectedValue = update, newValue = 8))
    atomicSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ newValue = 1)
    assertEquals<Int>(expected = 1, actual = <this>.<get-x>())
    assertEquals<Int>(expected = 1, actual = getAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ newValue = 2))
    assertEquals<Int>(expected = 2, actual = <this>.<get-x>())
    assertEquals<Int>(expected = 2, actual = getAndAddField(/* <this> = IntArithmetic<this>::_x$volatile, */ delta = 1))
    assertEquals<Int>(expected = 3, actual = <this>.<get-x>())
    assertEquals<Int>(expected = 3, actual = getAndAddField(/* <this> = IntArithmetic<this>::_x$volatile, */ delta = -1))
    assertEquals<Int>(expected = 2, actual = <this>.<get-x>())
    assertEquals<Int>(expected = 2, actual = getAndAddField(/* <this> = IntArithmetic<this>::_x$volatile, */ delta = 2))
    assertEquals<Int>(expected = 4, actual = <this>.<get-x>())
    assertEquals<Int>(expected = 7, actual = getAndAddField(/* <this> = IntArithmetic<this>::_x$volatile, */ delta = 3).plus(other = 3))
    assertEquals<Int>(expected = 7, actual = <this>.<get-x>())
    assertEquals<Int>(expected = 8, actual = getAndAddField(/* <this> = IntArithmetic<this>::_x$volatile, */ delta = 1).plus(other = 1))
    assertEquals<Int>(expected = 8, actual = <this>.<get-x>())
    assertEquals<Int>(expected = 7, actual = getAndAddField(/* <this> = IntArithmetic<this>::_x$volatile, */ delta = -1).plus(other = -1))
    assertEquals<Int>(expected = 7, actual = <this>.<get-x>())
    assertTrue(actual = compareAndSetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile, */ expectedValue = 7, newValue = 10))
  }

  val x: Int
    get(): Int {
      return atomicGetField<Int>(/* <this> = IntArithmetic<this>::_x$volatile */) as Int
    }

}

class LongArithmetic {
  private var _x$volatile: Long
    field = 4294967296L
    private get(): Long {
      return <this>.#_x$volatile
    }
    private set(value: Long) {
      return <this>.#_x$volatile = value
    }

  private var y$volatile: Long
    field = 5000000000L
    private get(): Long {
      return <this>.#y$volatile
    }
    private set(value: Long) {
      return <this>.#y$volatile = value
    }

  private var z$volatile: Long
    field = 2424920024888888848L
    private get(): Long {
      return <this>.#z$volatile
    }
    private set(value: Long) {
      return <this>.#z$volatile = value
    }

  private var max$volatile: Long
    field = 9223372036854775807L
    private get(): Long {
      return <this>.#max$volatile
    }
    private set(value: Long) {
      return <this>.#max$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testLong() {
    assertEquals<Long>(expected = 2424920024888888848L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    atomicSetField<Long>(/* <this> = LongArithmetic<this>::z$volatile, */ newValue = 8424920024888888848L)
    assertEquals<Long>(expected = 8424920024888888848L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    assertEquals<Long>(expected = 8424920024888888848L, actual = getAndSetField<Long>(/* <this> = LongArithmetic<this>::z$volatile, */ newValue = 8924920024888888848L))
    assertEquals<Long>(expected = 8924920024888888848L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    assertEquals<Long>(expected = 8924920024888888849L, actual = getAndAddField(/* <this> = LongArithmetic<this>::z$volatile, */ delta = 1L /*as Long */).plus(other = 1L))
    assertEquals<Long>(expected = 8924920024888888849L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    assertEquals<Long>(expected = 8924920024888888849L, actual = getAndAddField(/* <this> = LongArithmetic<this>::z$volatile, */ delta = -1L /*as Long */))
    assertEquals<Long>(expected = 8924920024888888848L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    assertEquals<Long>(expected = 8924920024888888848L, actual = getAndAddField(/* <this> = LongArithmetic<this>::z$volatile, */ delta = 100000000000000000L /*as Long */))
    assertEquals<Long>(expected = 9024920024888888848L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = getAndAddField(/* <this> = LongArithmetic<this>::z$volatile, */ delta = -9223372036854775807L /*as Long */).plus(other = -9223372036854775807L))
    assertEquals<Long>(expected = -198452011965886959L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    assertEquals<Long>(expected = -198452011965886958L, actual = getAndAddField(/* <this> = LongArithmetic<this>::z$volatile, */ delta = 1L /*as Long */).plus(other = 1L))
    assertEquals<Long>(expected = -198452011965886958L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
    assertEquals<Long>(expected = -198452011965886959L, actual = getAndAddField(/* <this> = LongArithmetic<this>::z$volatile, */ delta = -1L /*as Long */).plus(other = -1L))
    assertEquals<Long>(expected = -198452011965886959L, actual = atomicGetField<Long>(/* <this> = LongArithmetic<this>::z$volatile */) as Long)
  }

  val x: Long
    get(): Long {
      return atomicGetField<Long>(/* <this> = LongArithmetic<this>::_x$volatile */) as Long
    }

}

class ReferenceArithmetic {
  private var _x$volatile: Any?
    field = null
    private get(): Any? {
      return <this>.#_x$volatile
    }
    private set(value: Any?) {
      return <this>.#_x$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testReference() {
    atomicSetField<Any?>(/* <this> = ReferenceArithmetic<this>::_x$volatile, */ newValue = "aaa")
    assertEquals<String?>(expected = "aaa", actual = atomicGetField<Any?>(/* <this> = ReferenceArithmetic<this>::_x$volatile */) as Any?)
    atomicSetField<Any?>(/* <this> = ReferenceArithmetic<this>::_x$volatile, */ newValue = "bb")
    assertEquals<String?>(expected = "bb", actual = atomicGetField<Any?>(/* <this> = ReferenceArithmetic<this>::_x$volatile */) as Any?)
    assertEquals<String?>(expected = "bb", actual = getAndSetField<Any?>(/* <this> = ReferenceArithmetic<this>::_x$volatile, */ newValue = "ccc"))
    assertEquals<String?>(expected = "ccc", actual = atomicGetField<Any?>(/* <this> = ReferenceArithmetic<this>::_x$volatile */) as Any?)
  }

}

fun box(): String {
  val intClass: IntArithmetic = IntArithmetic()
  intClass.test()
  val longClass: LongArithmetic = LongArithmetic()
  longClass.testLong()
  val booleanClass: BooleanArithmetic = BooleanArithmetic()
  booleanClass.testBoolean()
  val refClass: ReferenceArithmetic = ReferenceArithmetic()
  refClass.testReference()
  return "OK"
}
