package

public fun test(): kotlin.Unit

public/*package*/ open class Foo {
    public/*package*/ constructor Foo()
    public open fun bar(/*0*/ f: ((kotlin.Int!) -> kotlin.Unit!)!): kotlin.Int
    public open fun bar(/*0*/ f: Foo.FObject<kotlin.Any!>!): kotlin.String!
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun foo(/*0*/ f: ((kotlin.Int!) -> kotlin.Unit!)!): kotlin.Int
    public open fun foo(/*0*/ f: Foo.FObject<kotlin.Int!>!): kotlin.String!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public/*package*/ interface FObject</*0*/ T : kotlin.Any!> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public abstract operator fun invoke(/*0*/ i: T!): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
