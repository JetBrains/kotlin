FILE: unsupportedContextParameters.kt
    context(<unused var>: R|kotlin/String|)
    public final class C : R|kotlin/Any| {
        public constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

    }
    public final class C2 : R|kotlin/Any| {
        public constructor(): R|C2| {
            super<R|kotlin/Any|>()
        }

    }
    context(<unused var>: R|kotlin/String|)
    public abstract interface I : R|kotlin/Any| {
    }
    context(<unused var>: R|kotlin/String|)
    public final enum class E : R|kotlin/Enum<E>| {
        private constructor(): R|E| {
            super<R|kotlin/Enum<E>|>()
        }

        public final static fun values(): R|kotlin/Array<E>| {
        }

        public final static fun valueOf(value: R|kotlin/String|): R|E| {
        }

        public final static val entries: R|kotlin/enums/EnumEntries<E>|
            public get(): R|kotlin/enums/EnumEntries<E>|

    }
    context(<unused var>: R|kotlin/String|)
    public final annotation class A : R|kotlin/Annotation| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    context(<unused var>: R|kotlin/String|)
    public final object O : R|kotlin/Any| {
        private constructor(): R|O| {
            super<R|kotlin/Any|>()
        }

    }
    public final typealias TA = R|kotlin/Any|
    public final val objectExpression: <ERROR TYPE REF: Unresolved name: context> = <Unresolved name: context>#(<Unresolved name: _>#)
        public get(): <ERROR TYPE REF: Unresolved name: context>
    public final object <no name provided> : R|kotlin/Any| {
        private constructor(): R|<no name provided>| {
            super<R|kotlin/Any|>()
        }

    }
    context(<unused var>: R|kotlin/String|)
    public final operator fun R|kotlin/Any|.getValue(thiz: R|kotlin/Any?|, metadata: R|kotlin/Any?|): R|kotlin/Any| {
        ^getValue this@R|/getValue|
    }
    context(<unused var>: R|kotlin/String|)
    public final operator fun R|kotlin/Any|.setValue(thiz: R|kotlin/Any?|, metadata: R|kotlin/Any?|, value: R|kotlin/String|): R|kotlin/Any| {
        ^setValue this@R|/setValue|
    }
    context(<unused var>: R|kotlin/String|)
    public final operator fun R|kotlin/Any|.provideDelegate(thiz: R|kotlin/Any?|, metadata: R|kotlin/Any?|): R|kotlin/Any| {
        ^provideDelegate this@R|/provideDelegate|
    }
    public final var x: R|kotlin/String| = String()
        public get(): R|kotlin/String|
        public set(value: R|kotlin/String|): R|kotlin/Unit|
    public final var y: R|kotlin/String| = String()
        public get(): R|kotlin/String|
        public set(value: R|kotlin/String|): R|kotlin/Unit|
    public final fun <no name provided>(): R|kotlin/Unit| {
    }
    context(<unused var>: R|kotlin/String|)
    public final var R|kotlin/Any|.d: R|kotlin/Any|by String()
        public get(): R|kotlin/Any| {
            ^ D|/d|.R|/getValue|(this@R|/d|, ::R|/d|)
        }
        public set(<set-?>: R|kotlin/Any|): R|kotlin/Unit| {
            ^ D|/d|.R|/setValue<Inapplicable(INAPPLICABLE): /setValue>#|(this@R|/d|, ::R|/d|, R|<local>/d|)
        }
    context(<unused var>: R|kotlin/String|)
    public final var b: R|kotlin/String| = String()
        public get(): R|kotlin/String|
        public set(value: R|kotlin/String|): R|kotlin/Unit|
    context(<unused var>@<ERROR TYPE REF: Incomplete code>)
    public final fun emptyContext(): R|kotlin/Unit| {
    }
    context(<unused var>@<ERROR TYPE REF: Incomplete code>)
    public final class EmptyContextClass : R|kotlin/Any| {
        public constructor(): R|EmptyContextClass| {
            super<R|kotlin/Any|>()
        }

    }
    context(R|kotlin/String|)
    public final fun contextReceiverSyntax(): R|kotlin/Unit| {
    }
    context(<unused var>: R|kotlin/Int|, R|kotlin/String|)
    public final fun mixedSyntax(): R|kotlin/Unit| {
    }
    context(R|kotlin/String|)
    public final class ClassWithContextReceiverSyntax : R|kotlin/Any| {
        public constructor(): R|ClassWithContextReceiverSyntax| {
            super<R|kotlin/Any|>()
        }

    }
    context(x: R|kotlin/String| = ERROR_EXPR(Context parameters cannot have default values))
    public final class ClassWithContextDefaultValue : R|kotlin/Any| {
        public constructor(): R|ClassWithContextDefaultValue| {
            super<R|kotlin/Any|>()
        }

    }
    context(x: R|kotlin/String| = ERROR_EXPR(Context parameters cannot have default values))
    public final val contextHasDefaultValue: R|kotlin/String|
        public get(): R|kotlin/String| {
            ^ String()
        }
    context(x: R|kotlin/String| = ERROR_EXPR(Context parameters cannot have default values))
    public final fun contextHasDefaultValue(): R|kotlin/Unit| {
    }
    context(vararg x: R|kotlin/Array<out kotlin/String>|, y: R|kotlin/String|, z: R|kotlin/String|, crossinline f1: R|() -> kotlin/Unit|, noinline f2: R|() -> kotlin/Unit|)
    public final inline fun contextHasModifier(): R|kotlin/Unit| {
    }
