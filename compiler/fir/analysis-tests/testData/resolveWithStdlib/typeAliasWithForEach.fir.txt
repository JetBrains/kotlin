FILE: typeAliasWithForEach.kt
    public abstract interface ArgsInfo : R|kotlin/Any| {
    }
    public final class ArgsInfoImpl : R|ArgsInfo| {
        public constructor(info: R|ArgsInfo|): R|ArgsInfoImpl| {
            super<R|kotlin/Any|>()
        }

    }
    public final typealias Arguments = R|kotlin/collections/Map<kotlin/String, ArgsInfo>|
    public final fun R|{Arguments=} kotlin/collections/Map<kotlin/String, ArgsInfo>|.deepCopy(): R|{Arguments=} kotlin/collections/Map<kotlin/String, ArgsInfo>| {
        lval result: R|java/util/HashMap<kotlin/String, ArgsInfo>| = R|java/util/HashMap.HashMap|<R|ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=kotlin/String) kotlin/String!|, R|ExplicitTypeArgumentIfMadeFlexibleSyntheticallyTypeAttribute(coneType=ArgsInfo) ArgsInfo!|>()
        this@R|/deepCopy|.R|SubstitutionOverride<kotlin/collections/Map.forEach: R|kotlin/Unit|>|(<L> = SAM(forEach@fun <anonymous>(key: R|@EnhancedNullability kotlin/String|, value: R|@EnhancedNullability ArgsInfo|): R|kotlin/Unit| <inline=NoInline>  {
            R|<local>/result|.R|kotlin/collections/set|<R|kotlin/String|, R|ArgsInfo|>(R|<local>/key|, R|/ArgsInfoImpl.ArgsInfoImpl|(R|<local>/value|))
            Unit
        }
        ))
        ^deepCopy R|<local>/result|
    }
