package

public fun test(): kotlin.Unit

public/*package*/ abstract class MyComparableSettings : kotlin.Comparable<MyComparableSettings!> {
    public/*package*/ constructor MyComparableSettings()
    public abstract override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: MyComparableSettings!): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class MySettings</*0*/ SS : MySettings<SS!, PS!, L!>!, /*1*/ PS : MyComparableSettings!, /*2*/ L : MySettingsListener<PS!>!> {
    public constructor MySettings</*0*/ SS : MySettings<SS!, PS!, L!>!, /*1*/ PS : MyComparableSettings!, /*2*/ L : MySettingsListener<PS!>!>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun getLinkedProjectsSettings(): kotlin.collections.(Mutable)Collection<PS!>!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public open fun getSettings(): MySettings<*, *, *>!
}

public/*package*/ abstract class MySettingsListener</*0*/ S : MyComparableSettings!> {
    public/*package*/ constructor MySettingsListener</*0*/ S : MyComparableSettings!>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

