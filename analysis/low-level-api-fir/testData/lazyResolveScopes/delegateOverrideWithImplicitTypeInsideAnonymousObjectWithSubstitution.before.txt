public open override [ResolvedTo(BODY_RESOLVE)] fun isSchemeFile([ResolvedTo(BODY_RESOLVE)] name: R|kotlin/CharSequence|): R|kotlin/Boolean| {
    ^isSchemeFile !=(R|<local>/name|, String(str))
}

public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor={SCHEME -> @R|Anno|(str = <strcat>(String(object ), R|/constant|))  kotlin/Int}, baseSymbol=FirNamedFunctionSymbol /IntermediateClass.isSchemeFile), SubstitutedOverrideOriginalKey=/IntermediateClass.isSchemeFile] fun isSchemeFile([ResolvedTo(STATUS)] name: R|kotlin/CharSequence|): <implicit>

public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor={SCHEME -> @R|Anno|(LAZY_EXPRESSION)  SCHEME | MUTABLE_SCHEME -> @R|Anno|(LAZY_EXPRESSION)  kotlin/Int}, baseSymbol=FirNamedFunctionSymbol /BaseClass.isSchemeFile), SubstitutedOverrideOriginalKey=/BaseClass.isSchemeFile] fun isSchemeFile([ResolvedTo(STATUS)] name: R|kotlin/CharSequence|): <implicit>

public open [ResolvedTo(STATUS)] fun isSchemeFile([ResolvedTo(STATUS)] name: R|kotlin/CharSequence| = LAZY_EXPRESSION): <implicit> { LAZY_BLOCK }

public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor=Empty, baseSymbol=FirNamedFunctionSymbol /IntermediateClass.anotherFunction), DelegatedWrapperDataKey=[wrapped=FirNamedFunctionSymbol /IntermediateClass.anotherFunction, containingClass=<anonymous>, delegateField=FirFieldSymbol <local>/<anonymous>.$$delegate_0, SubstitutedOverrideOriginalKey=/IntermediateClass.anotherFunction] fun anotherFunction([ResolvedTo(STATUS)] name: R|kotlin/CharSequence|): <implicit>

public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor={SCHEME -> @R|Anno|(str = <strcat>(String(object ), R|/constant|))  kotlin/Int}, baseSymbol=FirNamedFunctionSymbol /IntermediateClass.anotherFunction), SubstitutedOverrideOriginalKey=/IntermediateClass.anotherFunction] fun anotherFunction([ResolvedTo(STATUS)] name: R|kotlin/CharSequence|): <implicit>

public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor={SCHEME -> @R|Anno|(LAZY_EXPRESSION)  SCHEME | MUTABLE_SCHEME -> @R|Anno|(LAZY_EXPRESSION)  kotlin/Int}, baseSymbol=FirNamedFunctionSymbol /BaseClass.anotherFunction), SubstitutedOverrideOriginalKey=/BaseClass.anotherFunction] fun anotherFunction([ResolvedTo(STATUS)] name: R|kotlin/CharSequence|): <implicit>

public open [ResolvedTo(STATUS)] fun anotherFunction([ResolvedTo(STATUS)] name: R|kotlin/CharSequence| = LAZY_EXPRESSION): <implicit> { LAZY_BLOCK }

@R|Anno|[Types](LAZY_EXPRESSION) public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor=Empty, baseSymbol=FirPropertySymbol /IntermediateClass.propertyWithAnnotations), DelegatedWrapperDataKey=[wrapped=FirPropertySymbol /IntermediateClass.propertyWithAnnotations, containingClass=<anonymous>, delegateField=FirFieldSymbol <local>/<anonymous>.$$delegate_0, SubstitutedOverrideOriginalKey=/IntermediateClass.propertyWithAnnotations] var propertyWithAnnotations: <implicit>
    @PROPERTY_GETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=<anonymous>] get(): <implicit>
    @PROPERTY_SETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=<anonymous>] set([ResolvedTo(STATUS)] value: <implicit>): R|kotlin/Unit|

@R|Anno|[Types](LAZY_EXPRESSION) public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor={SCHEME -> @R|Anno|(str = <strcat>(String(object ), R|/constant|))  kotlin/Int}, baseSymbol=FirPropertySymbol /IntermediateClass.propertyWithAnnotations), SubstitutedOverrideOriginalKey=/IntermediateClass.propertyWithAnnotations] var propertyWithAnnotations: <implicit>
    @PROPERTY_GETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=<anonymous>] get(): <implicit>
    @PROPERTY_SETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=<anonymous>] set([ResolvedTo(STATUS)] value: <implicit>): R|kotlin/Unit|

@R|Anno|[Types](LAZY_EXPRESSION) public open override [ResolvedTo(STATUS)] [DeferredCallableCopyReturnTypeKey=DeferredReturnTypeOfSubstitution(substitutor={SCHEME -> @R|Anno|(LAZY_EXPRESSION)  SCHEME | MUTABLE_SCHEME -> @R|Anno|(LAZY_EXPRESSION)  kotlin/Int}, baseSymbol=FirPropertySymbol /BaseClass.propertyWithAnnotations), SubstitutedOverrideOriginalKey=/BaseClass.propertyWithAnnotations] var propertyWithAnnotations: <implicit>
    @PROPERTY_GETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=IntermediateClass] get(): <implicit>
    @PROPERTY_SETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=IntermediateClass] set([ResolvedTo(STATUS)] value: <implicit>): R|kotlin/Unit|

@R|Anno|[Types](LAZY_EXPRESSION) public open [ResolvedTo(STATUS)] var propertyWithAnnotations: <implicit> = LAZY_EXPRESSION
    @PROPERTY_GETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=BaseClass] get(): <implicit>
    @PROPERTY_SETTER:R|Anno|[Types](LAZY_EXPRESSION) public [ResolvedTo(STATUS)] [ContainingClassKey=BaseClass] set([ResolvedTo(STATUS)] @SETTER_PARAMETER:R|Anno|[Types](LAZY_EXPRESSION) value: <implicit>): R|kotlin/Unit|

public open override [ResolvedTo(STATUS)] [DelegatedWrapperDataKey=[wrapped=FirPropertySymbol /IntermediateClass.property, containingClass=<anonymous>, delegateField=FirFieldSymbol <local>/<anonymous>.$$delegate_0, SubstitutedOverrideOriginalKey=/IntermediateClass.property] var property: R|@R|Anno|(str = <strcat>(String(object ), R|/constant|))  @R|Anno|(LAZY_EXPRESSION)  kotlin/Int|



public abstract override [ResolvedTo(STATUS)] [SubstitutedOverrideOriginalKey=/IntermediateClass.property] var property: R|@R|Anno|(str = <strcat>(String(object ), R|/constant|))  @R|Anno|(LAZY_EXPRESSION)  kotlin/Int|



public abstract override [ResolvedTo(STATUS)] [SubstitutedOverrideOriginalKey=/BaseClass.property] var property: R|@R|Anno|(LAZY_EXPRESSION)  SCHEME|



public abstract [ResolvedTo(STATUS)] var property: R|SCHEME|
    public [ResolvedTo(STATUS)] [ContainingClassKey=BaseClass] get(): R|SCHEME|
    public [ResolvedTo(STATUS)] [ContainingClassKey=BaseClass] set([ResolvedTo(STATUS)] value: R|SCHEME|): R|kotlin/Unit|

public open operator [ResolvedTo(BODY_RESOLVE)] fun equals([ResolvedTo(BODY_RESOLVE)] other: R|kotlin/Any?|): R|kotlin/Boolean|

public open [ResolvedTo(BODY_RESOLVE)] fun hashCode(): R|kotlin/Int|

public open [ResolvedTo(BODY_RESOLVE)] fun toString(): R|kotlin/String|
