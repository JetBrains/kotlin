//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

public inline fun <reified T : Any> NavGraphBuilder.bottomSheet(
  noinline dragHandle: @Composable (() -> Unit)? = { BottomSheetDefaults.DragHandle() },
) {
}

//
// Transformed IR
// ------------------------------------------

fun <T: Any> NavGraphBuilder.bottomSheet(noinline dragHandle: Function2<Composer, Int, Unit>? = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
  sourceInformation(%composer, "C<DragHa...>:Test.kt")
  if (%composer.shouldExecute(%changed and 0b0011 != 0b0010, %changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %changed, -1, <>)
    }
    BottomSheetDefaults.DragHandle(%composer, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
}
) { }
internal object ComposableSingletons%TestKt {
  val lambda%1473427390: Function2<Composer, Int, Unit> = composableLambdaInstance(<>, false) { %composer: Composer?, %changed: Int ->
    sourceInformation(%composer, "C<DragHa...>:Test.kt")
    if (%composer.shouldExecute(%changed and 0b0011 != 0b0010, %changed and 0b0001)) {
      if (isTraceInProgress()) {
        traceEventStart(<>, %changed, -1, <>)
      }
      BottomSheetDefaults.DragHandle(%composer, 0b0110)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      %composer.skipToGroupEnd()
    }
  }
  val lambda-1: Function2<Composer, Int, Unit>
    get() {
      return lambda%1473427390
    }
}
