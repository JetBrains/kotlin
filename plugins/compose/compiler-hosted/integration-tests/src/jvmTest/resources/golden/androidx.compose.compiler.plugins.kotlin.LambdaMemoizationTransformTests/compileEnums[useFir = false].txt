//
// Source
// ------------------------------------------

import androidx.compose.runtime.*

enum class Test {
    A, B, C
}

@Composable
fun Test(parameter: Test) {
    val lambda = { println(parameter) }
}

//
// Transformed IR
// ------------------------------------------

class Test : Enum<Test> {
  <<IrEnumEntryImpl>>
  <<IrEnumEntryImpl>>
  <<IrEnumEntryImpl>>
  fun values(): Array<Test> { }
  fun valueOf(value: String): Test { }
  val entries: EnumEntries<Test>
    get() {
      <<IrSyntheticBodyImpl>>
    }
}
@Composable
fun Test(parameter: Test, %composer: Composer?, %changed: Int) {
  %composer = %composer.startRestartGroup(<>)
  sourceInformation(%composer, "C(Test)<{>:Test.kt")
  val %dirty = %changed
  if (%changed and 0b0110 == 0) {
    %dirty = %dirty or if (%composer.changed(parameter.ordinal)) 0b0100 else 0b0010
  }
  if (%dirty and 0b0011 != 0b0010 || !%composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(<>, %dirty, -1, <>)
    }
    val lambda = <block>{
      sourceInformationMarkerStart(%composer, <>, "CC(remember):Test.kt#9igjgp")
      val tmp0_group = %composer.cache(%dirty and 0b1110 == 0b0100) {
        {
          println(parameter)
        }
      }
      sourceInformationMarkerEnd(%composer)
      tmp0_group
    }
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    %composer.skipToGroupEnd()
  }
  %composer.endRestartGroup()?.updateScope { %composer: Composer?, %force: Int ->
    Test(parameter, %composer, updateChangedFlags(%changed or 0b0001))
  }
}
