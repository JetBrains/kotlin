RAW_FIR:
FILE: [ResolvedTo(RAW_FIR)] superTypes.kt
    public open [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class resolveMe : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class resolveMe : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(COMPILER_REQUIRED_ANNOTATIONS)] class resolveMe : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(COMPANION_GENERATION)] class resolveMe : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(SUPER_TYPES)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

TYPES:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(TYPES)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

STATUS:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(STATUS)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(EXPECT_ACTUAL_MATCHING)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(CONTRACTS)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(IMPLICIT_TYPES_BODY_RESOLVE)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

CONSTANT_EVALUATION:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(CONSTANT_EVALUATION)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

ANNOTATION_ARGUMENTS:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(SUPER_TYPES)] class A : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(ANNOTATION_ARGUMENTS)] class resolveMe : R|A| {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<A>
        }

    }

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] superTypes.kt
    public open [ResolvedTo(STATUS)] class A : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public open [ResolvedTo(RAW_FIR)] class B : A {
        public? [ResolvedTo(RAW_FIR)] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<A>
        }

    }
    public open [ResolvedTo(BODY_RESOLVE)] class resolveMe : R|A| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|A|>()
        }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] superTypes.kt
    public open [ResolvedTo(BODY_RESOLVE)] class A : R|kotlin/Any| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    public open [ResolvedTo(BODY_RESOLVE)] class B : R|A| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=B] constructor(): R|B| {
            super<R|A|>()
        }

    }
    public open [ResolvedTo(BODY_RESOLVE)] class resolveMe : R|A| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|A|>()
        }

    }
