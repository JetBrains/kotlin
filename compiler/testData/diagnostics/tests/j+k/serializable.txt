package

public fun testArrays(/*0*/ ia: kotlin.IntArray, /*1*/ ai: kotlin.Array<kotlin.Int>, /*2*/ an: kotlin.Array<N>, /*3*/ a: kotlin.Array<S>): kotlin.Unit
public fun testEnums(/*0*/ a: kotlin.Enum<*>): kotlin.Unit
public fun testLists(/*0*/ a: kotlin.collections.List<kotlin.Int>): kotlin.Unit
public fun testLiterals(): kotlin.Unit
public fun testNotSerializable(/*0*/ l: kotlin.collections.List<kotlin.Int>): kotlin.Unit
public fun testPrimitives(/*0*/ b: kotlin.Byte, /*1*/ ss: kotlin.Short, /*2*/ i: kotlin.Int, /*3*/ l: kotlin.Long, /*4*/ d: kotlin.Double, /*5*/ s: kotlin.String, /*6*/ f: kotlin.Float, /*7*/ bool: kotlin.Boolean): kotlin.Unit

public final enum class C : kotlin.Enum<C> {
    enum entry E

    enum entry E2

    private constructor C()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: C): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<C!>!
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): C
    public final /*synthesized*/ fun values(): kotlin.Array<C>
}

public final class N {
    public constructor N()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class S : java.io.Serializable {
    public constructor S()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

package aa {

    public open class A {
        public constructor A()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public open fun use(/*0*/ s: java.io.Serializable!): kotlin.Unit
        public open fun useList(/*0*/ s: (kotlin.collections.MutableList<out java.io.Serializable!>..kotlin.collections.List<java.io.Serializable!>?)): kotlin.Unit
    }
}
