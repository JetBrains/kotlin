package test;

@java.lang.annotation.Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
/**
 * public final annotation class test/Anno : kotlin/Annotation {
 *
 *   // signature: <init>(Ltest/E;)V
 *   public constructor(value: test/E)
 *
 *   // getter: value()Ltest/E;
 *   public final val value: test/E
 *     public final get
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public abstract @interface Anno {

    public abstract test.E value();
}

////////////////////

package test;

import kotlin.Metadata;

@Metadata()
public enum E {
    /*public static final*/ ENTRY /* = new E() */;
}

////////////////////

package test;

@Anno(value = test.E.ENTRY)
/**
 * public final object test/O : kotlin/Any {
 *
 *   // signature: <init>()V
 *   private constructor()
 *
 *   // module name: main
 * }
 */
@kotlin.Metadata()
public final class O {
    @org.jetbrains.annotations.NotNull()
    public static final test.O INSTANCE = null;

    private O() {
        super();
    }
}
