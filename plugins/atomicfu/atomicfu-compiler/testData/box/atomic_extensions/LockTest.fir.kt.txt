class LockTest {
  private var inProgressLock$volatile: Boolean
    field = false
    private get(): Boolean {
      return <this>.#inProgressLock$volatile
    }
    private set(value: Boolean) {
      return <this>.#inProgressLock$volatile = value
    }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testLock() {
    var result: String = ""
    when {
      tryAcquire$atomicfu$NATIVE_PROPERTY_REF$Boolean(handler$atomicfu = local inline fun <inProgressLock$volatile-getter>(): Boolean {
        return LockTest<this>::inProgressLock$volatile
      }
) -> { // BLOCK
        result = "OK"
      }
    }
    assertEquals<String>(expected = "OK", actual = result)
  }

}

private inline fun tryAcquire$atomicfu$ATOMIC_ARRAY$Boolean(handler$atomicfu: AtomicIntArray, index$atomicfu: Int): Boolean {
  return handler$atomicfu.compareAndSet(index = index$atomicfu, expectedValue = when {
    false -> 1
    else -> 0
  }, newValue = when {
    true -> 1
    else -> 0
  })
}

private inline fun tryAcquire$atomicfu$NATIVE_PROPERTY_REF$Boolean(crossinline handler$atomicfu: Function0<KMutableProperty0<Boolean>>): Boolean {
  return compareAndSetField<Boolean>(/* <this> = handler$atomicfu.invoke(), */ expectedValue = false, newValue = true)
}

fun box(): String {
  val testClass: LockTest = LockTest()
  testClass.testLock()
  return "OK"
}

@Suppress(names = ["UNUSED_PARAMETER"])
fun <AA : Any?, BB : Number> String.reflectionTest(mapParam: Map<in AA, BB>): List<BB> {
  return error(message = "no impl")
}
