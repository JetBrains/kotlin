// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: js/js.config/src/js-ast.proto
// Protobuf Java Version: 4.29.3

package org.jetbrains.kotlin.serialization.js.ast;

public final class JsAstProtoBuf {
  private JsAstProtoBuf() {}
  static {
    org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      JsAstProtoBuf.class.getName());
  }
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (org.jetbrains.kotlin.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.SideEffects}
   */
  public enum SideEffects
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>AFFECTS_STATE = 1;</code>
     */
    AFFECTS_STATE(1),
    /**
     * <code>DEPENDS_ON_STATE = 2;</code>
     */
    DEPENDS_ON_STATE(2),
    /**
     * <code>PURE = 3;</code>
     */
    PURE(3),
    ;

    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        SideEffects.class.getName());
    }
    /**
     * <code>AFFECTS_STATE = 1;</code>
     */
    public static final int AFFECTS_STATE_VALUE = 1;
    /**
     * <code>DEPENDS_ON_STATE = 2;</code>
     */
    public static final int DEPENDS_ON_STATE_VALUE = 2;
    /**
     * <code>PURE = 3;</code>
     */
    public static final int PURE_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SideEffects valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SideEffects forNumber(int value) {
      switch (value) {
        case 1: return AFFECTS_STATE;
        case 2: return DEPENDS_ON_STATE;
        case 3: return PURE;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SideEffects>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        SideEffects> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SideEffects>() {
            public SideEffects findValueByNumber(int number) {
              return SideEffects.forNumber(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final SideEffects[] VALUES = values();

    public static SideEffects valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SideEffects(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.SideEffects)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.InlineStrategy}
   */
  public enum InlineStrategy
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>AS_FUNCTION = 0;</code>
     */
    AS_FUNCTION(0),
    /**
     * <code>IN_PLACE = 1;</code>
     */
    IN_PLACE(1),
    /**
     * <code>NOT_INLINE = 2;</code>
     */
    NOT_INLINE(2),
    ;

    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        InlineStrategy.class.getName());
    }
    /**
     * <code>AS_FUNCTION = 0;</code>
     */
    public static final int AS_FUNCTION_VALUE = 0;
    /**
     * <code>IN_PLACE = 1;</code>
     */
    public static final int IN_PLACE_VALUE = 1;
    /**
     * <code>NOT_INLINE = 2;</code>
     */
    public static final int NOT_INLINE_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InlineStrategy valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static InlineStrategy forNumber(int value) {
      switch (value) {
        case 0: return AS_FUNCTION;
        case 1: return IN_PLACE;
        case 2: return NOT_INLINE;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InlineStrategy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        InlineStrategy> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<InlineStrategy>() {
            public InlineStrategy findValueByNumber(int number) {
              return InlineStrategy.forNumber(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final InlineStrategy[] VALUES = values();

    public static InlineStrategy valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private InlineStrategy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.InlineStrategy)
  }

  /**
   * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.SpecialFunction}
   */
  public enum SpecialFunction
      implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
    /**
     * <code>DEFINE_INLINE_FUNCTION = 1;</code>
     */
    DEFINE_INLINE_FUNCTION(1),
    /**
     * <code>WRAP_FUNCTION = 2;</code>
     */
    WRAP_FUNCTION(2),
    /**
     * <code>TO_BOXED_CHAR = 3;</code>
     */
    TO_BOXED_CHAR(3),
    /**
     * <code>UNBOX_CHAR = 4;</code>
     */
    UNBOX_CHAR(4),
    /**
     * <code>SUSPEND_CALL = 5;</code>
     */
    SUSPEND_CALL(5),
    /**
     * <code>COROUTINE_RESULT = 6;</code>
     */
    COROUTINE_RESULT(6),
    /**
     * <code>COROUTINE_CONTROLLER = 7;</code>
     */
    COROUTINE_CONTROLLER(7),
    /**
     * <code>COROUTINE_RECEIVER = 8;</code>
     */
    COROUTINE_RECEIVER(8),
    /**
     * <code>SET_COROUTINE_RESULT = 9;</code>
     */
    SET_COROUTINE_RESULT(9),
    /**
     * <code>GET_KCLASS = 10;</code>
     */
    GET_KCLASS(10),
    /**
     * <code>GET_REIFIED_TYPE_PARAMETER_KTYPE = 11;</code>
     */
    GET_REIFIED_TYPE_PARAMETER_KTYPE(11),
    ;

    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        SpecialFunction.class.getName());
    }
    /**
     * <code>DEFINE_INLINE_FUNCTION = 1;</code>
     */
    public static final int DEFINE_INLINE_FUNCTION_VALUE = 1;
    /**
     * <code>WRAP_FUNCTION = 2;</code>
     */
    public static final int WRAP_FUNCTION_VALUE = 2;
    /**
     * <code>TO_BOXED_CHAR = 3;</code>
     */
    public static final int TO_BOXED_CHAR_VALUE = 3;
    /**
     * <code>UNBOX_CHAR = 4;</code>
     */
    public static final int UNBOX_CHAR_VALUE = 4;
    /**
     * <code>SUSPEND_CALL = 5;</code>
     */
    public static final int SUSPEND_CALL_VALUE = 5;
    /**
     * <code>COROUTINE_RESULT = 6;</code>
     */
    public static final int COROUTINE_RESULT_VALUE = 6;
    /**
     * <code>COROUTINE_CONTROLLER = 7;</code>
     */
    public static final int COROUTINE_CONTROLLER_VALUE = 7;
    /**
     * <code>COROUTINE_RECEIVER = 8;</code>
     */
    public static final int COROUTINE_RECEIVER_VALUE = 8;
    /**
     * <code>SET_COROUTINE_RESULT = 9;</code>
     */
    public static final int SET_COROUTINE_RESULT_VALUE = 9;
    /**
     * <code>GET_KCLASS = 10;</code>
     */
    public static final int GET_KCLASS_VALUE = 10;
    /**
     * <code>GET_REIFIED_TYPE_PARAMETER_KTYPE = 11;</code>
     */
    public static final int GET_REIFIED_TYPE_PARAMETER_KTYPE_VALUE = 11;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpecialFunction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SpecialFunction forNumber(int value) {
      switch (value) {
        case 1: return DEFINE_INLINE_FUNCTION;
        case 2: return WRAP_FUNCTION;
        case 3: return TO_BOXED_CHAR;
        case 4: return UNBOX_CHAR;
        case 5: return SUSPEND_CALL;
        case 6: return COROUTINE_RESULT;
        case 7: return COROUTINE_CONTROLLER;
        case 8: return COROUTINE_RECEIVER;
        case 9: return SET_COROUTINE_RESULT;
        case 10: return GET_KCLASS;
        case 11: return GET_REIFIED_TYPE_PARAMETER_KTYPE;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SpecialFunction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
        SpecialFunction> internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<SpecialFunction>() {
            public SpecialFunction findValueByNumber(int number) {
              return SpecialFunction.forNumber(number);
            }
          };

    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.getDescriptor().getEnumTypes().get(2);
    }

    private static final SpecialFunction[] VALUES = values();

    public static SpecialFunction valueOf(
        org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SpecialFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.SpecialFunction)
  }

  public interface LocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Location)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return Whether the startLine field is set.
     */
    boolean hasStartLine();
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return The startLine.
     */
    int getStartLine();

    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return Whether the startChar field is set.
     */
    boolean hasStartChar();
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return The startChar.
     */
    int getStartChar();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Location}
   */
  public static final class Location extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Location)
      LocationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Location.class.getName());
    }
    // Use Location.newBuilder() to construct.
    private Location(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Location() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder.class);
    }

    private int bitField0_;
    public static final int STARTLINE_FIELD_NUMBER = 1;
    private int startLine_ = 0;
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return Whether the startLine field is set.
     */
    @java.lang.Override
    public boolean hasStartLine() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 startLine = 1 [features = { ... }</code>
     * @return The startLine.
     */
    @java.lang.Override
    public int getStartLine() {
      return startLine_;
    }

    public static final int STARTCHAR_FIELD_NUMBER = 2;
    private int startChar_ = 0;
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return Whether the startChar field is set.
     */
    @java.lang.Override
    public boolean hasStartChar() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 startChar = 2 [features = { ... }</code>
     * @return The startChar.
     */
    @java.lang.Override
    public int getStartChar() {
      return startChar_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStartLine()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartChar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, startLine_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, startChar_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, startLine_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, startChar_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location) obj;

      if (hasStartLine() != other.hasStartLine()) return false;
      if (hasStartLine()) {
        if (getStartLine()
            != other.getStartLine()) return false;
      }
      if (hasStartChar() != other.hasStartChar()) return false;
      if (hasStartChar()) {
        if (getStartChar()
            != other.getStartChar()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStartLine()) {
        hash = (37 * hash) + STARTLINE_FIELD_NUMBER;
        hash = (53 * hash) + getStartLine();
      }
      if (hasStartChar()) {
        hash = (37 * hash) + STARTCHAR_FIELD_NUMBER;
        hash = (53 * hash) + getStartChar();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Location}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Location)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        startLine_ = 0;
        startChar_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.startLine_ = startLine_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.startChar_ = startChar_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) return this;
        if (other.hasStartLine()) {
          setStartLine(other.getStartLine());
        }
        if (other.hasStartChar()) {
          setStartChar(other.getStartChar());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasStartLine()) {
          return false;
        }
        if (!hasStartChar()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                startLine_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                startChar_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int startLine_ ;
      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @return Whether the startLine field is set.
       */
      @java.lang.Override
      public boolean hasStartLine() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @return The startLine.
       */
      @java.lang.Override
      public int getStartLine() {
        return startLine_;
      }
      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @param value The startLine to set.
       * @return This builder for chaining.
       */
      public Builder setStartLine(int value) {

        startLine_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 startLine = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearStartLine() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startLine_ = 0;
        onChanged();
        return this;
      }

      private int startChar_ ;
      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @return Whether the startChar field is set.
       */
      @java.lang.Override
      public boolean hasStartChar() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @return The startChar.
       */
      @java.lang.Override
      public int getStartChar() {
        return startChar_;
      }
      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @param value The startChar to set.
       * @return This builder for chaining.
       */
      public Builder setStartChar(int value) {

        startChar_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 startChar = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearStartChar() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startChar_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Location)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Location)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Location>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Location>() {
      @java.lang.Override
      public Location parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Location> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Location> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface JsImportedModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return Whether the externalName field is set.
     */
    boolean hasExternalName();
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return The externalName.
     */
    int getExternalName();

    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return Whether the internalName field is set.
     */
    boolean hasInternalName();
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return The internalName.
     */
    int getInternalName();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return Whether the plainReference field is set.
     */
    boolean hasPlainReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return The plainReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getPlainReferenceOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.JsImportedModule}
   */
  public static final class JsImportedModule extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
      JsImportedModuleOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        JsImportedModule.class.getName());
    }
    // Use JsImportedModule.newBuilder() to construct.
    private JsImportedModule(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private JsImportedModule() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder.class);
    }

    private int bitField0_;
    public static final int EXTERNAL_NAME_FIELD_NUMBER = 1;
    private int externalName_ = 0;
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return Whether the externalName field is set.
     */
    @java.lang.Override
    public boolean hasExternalName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 external_name = 1 [features = { ... }</code>
     * @return The externalName.
     */
    @java.lang.Override
    public int getExternalName() {
      return externalName_;
    }

    public static final int INTERNAL_NAME_FIELD_NUMBER = 2;
    private int internalName_ = 0;
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return Whether the internalName field is set.
     */
    @java.lang.Override
    public boolean hasInternalName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 internal_name = 2 [features = { ... }</code>
     * @return The internalName.
     */
    @java.lang.Override
    public int getInternalName() {
      return internalName_;
    }

    public static final int PLAIN_REFERENCE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression plainReference_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return Whether the plainReference field is set.
     */
    @java.lang.Override
    public boolean hasPlainReference() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return The plainReference.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
      return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getPlainReferenceOrBuilder() {
      return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasExternalName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInternalName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasPlainReference()) {
        if (!getPlainReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, externalName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, internalName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getPlainReference());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, externalName_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, internalName_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getPlainReference());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule) obj;

      if (hasExternalName() != other.hasExternalName()) return false;
      if (hasExternalName()) {
        if (getExternalName()
            != other.getExternalName()) return false;
      }
      if (hasInternalName() != other.hasInternalName()) return false;
      if (hasInternalName()) {
        if (getInternalName()
            != other.getInternalName()) return false;
      }
      if (hasPlainReference() != other.hasPlainReference()) return false;
      if (hasPlainReference()) {
        if (!getPlainReference()
            .equals(other.getPlainReference())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExternalName()) {
        hash = (37 * hash) + EXTERNAL_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getExternalName();
      }
      if (hasInternalName()) {
        hash = (37 * hash) + INTERNAL_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getInternalName();
      }
      if (hasPlainReference()) {
        hash = (37 * hash) + PLAIN_REFERENCE_FIELD_NUMBER;
        hash = (53 * hash) + getPlainReference().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.JsImportedModule}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getPlainReferenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        externalName_ = 0;
        internalName_ = 0;
        plainReference_ = null;
        if (plainReferenceBuilder_ != null) {
          plainReferenceBuilder_.dispose();
          plainReferenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.externalName_ = externalName_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.internalName_ = internalName_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.plainReference_ = plainReferenceBuilder_ == null
              ? plainReference_
              : plainReferenceBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance()) return this;
        if (other.hasExternalName()) {
          setExternalName(other.getExternalName());
        }
        if (other.hasInternalName()) {
          setInternalName(other.getInternalName());
        }
        if (other.hasPlainReference()) {
          mergePlainReference(other.getPlainReference());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasExternalName()) {
          return false;
        }
        if (!hasInternalName()) {
          return false;
        }
        if (hasPlainReference()) {
          if (!getPlainReference().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                externalName_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                internalName_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getPlainReferenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int externalName_ ;
      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @return Whether the externalName field is set.
       */
      @java.lang.Override
      public boolean hasExternalName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @return The externalName.
       */
      @java.lang.Override
      public int getExternalName() {
        return externalName_;
      }
      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @param value The externalName to set.
       * @return This builder for chaining.
       */
      public Builder setExternalName(int value) {

        externalName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 external_name = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExternalName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        externalName_ = 0;
        onChanged();
        return this;
      }

      private int internalName_ ;
      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @return Whether the internalName field is set.
       */
      @java.lang.Override
      public boolean hasInternalName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @return The internalName.
       */
      @java.lang.Override
      public int getInternalName() {
        return internalName_;
      }
      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @param value The internalName to set.
       * @return This builder for chaining.
       */
      public Builder setInternalName(int value) {

        internalName_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 internal_name = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearInternalName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        internalName_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression plainReference_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> plainReferenceBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       * @return Whether the plainReference field is set.
       */
      public boolean hasPlainReference() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       * @return The plainReference.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
        if (plainReferenceBuilder_ == null) {
          return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
        } else {
          return plainReferenceBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (plainReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          plainReference_ = value;
        } else {
          plainReferenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (plainReferenceBuilder_ == null) {
          plainReference_ = builderForValue.build();
        } else {
          plainReferenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder mergePlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (plainReferenceBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            plainReference_ != null &&
            plainReference_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getPlainReferenceBuilder().mergeFrom(value);
          } else {
            plainReference_ = value;
          }
        } else {
          plainReferenceBuilder_.mergeFrom(value);
        }
        if (plainReference_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder clearPlainReference() {
        bitField0_ = (bitField0_ & ~0x00000004);
        plainReference_ = null;
        if (plainReferenceBuilder_ != null) {
          plainReferenceBuilder_.dispose();
          plainReferenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getPlainReferenceBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPlainReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getPlainReferenceOrBuilder() {
        if (plainReferenceBuilder_ != null) {
          return plainReferenceBuilder_.getMessageOrBuilder();
        } else {
          return plainReference_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getPlainReferenceFieldBuilder() {
        if (plainReferenceBuilder_ == null) {
          plainReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getPlainReference(),
                  getParentForChildren(),
                  isClean());
          plainReference_ = null;
        }
        return plainReferenceBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.JsImportedModule)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<JsImportedModule>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<JsImportedModule>() {
      @java.lang.Override
      public JsImportedModule parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<JsImportedModule> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JsImportedModule> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Expression)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder();

    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    boolean hasSynthetic();
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    boolean getSynthetic();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return Whether the sideEffects field is set.
     */
    boolean hasSideEffects();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return The sideEffects.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects getSideEffects();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     * @return Whether the localAlias field is set.
     */
    boolean hasLocalAlias();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     * @return The localAlias.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getLocalAlias();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder getLocalAliasOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getBeforeCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    int getBeforeCommentsCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getBeforeCommentsOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getAfterCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    int getAfterCommentsCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getAfterCommentsOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
        int index);

    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return Whether the simpleNameReference field is set.
     */
    boolean hasSimpleNameReference();
    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return The simpleNameReference.
     */
    int getSimpleNameReference();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     * @return Whether the thisLiteral field is set.
     */
    boolean hasThisLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     * @return The thisLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getThisLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder getThisLiteralOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     * @return Whether the nullLiteral field is set.
     */
    boolean hasNullLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     * @return The nullLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getNullLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder getNullLiteralOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     * @return Whether the trueLiteral field is set.
     */
    boolean hasTrueLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     * @return The trueLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getTrueLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder getTrueLiteralOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     * @return Whether the falseLiteral field is set.
     */
    boolean hasFalseLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     * @return The falseLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getFalseLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder getFalseLiteralOrBuilder();

    /**
     * <code>int32 string_literal = 27;</code>
     * @return Whether the stringLiteral field is set.
     */
    boolean hasStringLiteral();
    /**
     * <code>int32 string_literal = 27;</code>
     * @return The stringLiteral.
     */
    int getStringLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     * @return Whether the regExpLiteral field is set.
     */
    boolean hasRegExpLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     * @return The regExpLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getRegExpLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder getRegExpLiteralOrBuilder();

    /**
     * <code>int32 int_literal = 29;</code>
     * @return Whether the intLiteral field is set.
     */
    boolean hasIntLiteral();
    /**
     * <code>int32 int_literal = 29;</code>
     * @return The intLiteral.
     */
    int getIntLiteral();

    /**
     * <code>double double_literal = 30;</code>
     * @return Whether the doubleLiteral field is set.
     */
    boolean hasDoubleLiteral();
    /**
     * <code>double double_literal = 30;</code>
     * @return The doubleLiteral.
     */
    double getDoubleLiteral();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     * @return Whether the arrayLiteral field is set.
     */
    boolean hasArrayLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     * @return The arrayLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getArrayLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder getArrayLiteralOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     * @return Whether the objectLiteral field is set.
     */
    boolean hasObjectLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     * @return The objectLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getObjectLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder getObjectLiteralOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     * @return Whether the function field is set.
     */
    boolean hasFunction();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     * @return The function.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getFunction();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getFunctionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     * @return Whether the docComment field is set.
     */
    boolean hasDocComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     * @return The docComment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDocComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder getDocCommentOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     * @return Whether the binary field is set.
     */
    boolean hasBinary();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     * @return The binary.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getBinary();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder getBinaryOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     * @return Whether the unary field is set.
     */
    boolean hasUnary();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     * @return The unary.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getUnary();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder getUnaryOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     * @return Whether the conditional field is set.
     */
    boolean hasConditional();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     * @return The conditional.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getConditional();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder getConditionalOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     * @return Whether the arrayAccess field is set.
     */
    boolean hasArrayAccess();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     * @return The arrayAccess.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getArrayAccess();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder getArrayAccessOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     * @return Whether the nameReference field is set.
     */
    boolean hasNameReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     * @return The nameReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getNameReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder getNameReferenceOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     * @return Whether the propertyReference field is set.
     */
    boolean hasPropertyReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     * @return The propertyReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getPropertyReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder getPropertyReferenceOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     * @return Whether the invocation field is set.
     */
    boolean hasInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     * @return The invocation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder getInvocationOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     * @return Whether the instantiation field is set.
     */
    boolean hasInstantiation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     * @return The instantiation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getInstantiation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder getInstantiationOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     * @return Whether the superLiteral field is set.
     */
    boolean hasSuperLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     * @return The superLiteral.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getSuperLiteral();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder getSuperLiteralOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     * @return Whether the class field is set.
     */
    boolean hasClass_();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     * @return The class.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getClass_();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder getClass_OrBuilder();

    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.ExpressionCase getExpressionCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Expression}
   */
  public static final class Expression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Expression)
      ExpressionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Expression.class.getName());
    }
    // Use Expression.newBuilder() to construct.
    private Expression(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Expression() {
      sideEffects_ = 1;
      beforeComments_ = java.util.Collections.emptyList();
      afterComments_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder.class);
    }

    private int bitField0_;
    private int expressionCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object expression_;
    public enum ExpressionCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
            org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
      SIMPLE_NAME_REFERENCE(22),
      THIS_LITERAL(23),
      NULL_LITERAL(24),
      TRUE_LITERAL(25),
      FALSE_LITERAL(26),
      STRING_LITERAL(27),
      REG_EXP_LITERAL(28),
      INT_LITERAL(29),
      DOUBLE_LITERAL(30),
      ARRAY_LITERAL(31),
      OBJECT_LITERAL(32),
      FUNCTION(33),
      DOC_COMMENT(34),
      BINARY(35),
      UNARY(36),
      CONDITIONAL(37),
      ARRAY_ACCESS(38),
      NAME_REFERENCE(39),
      PROPERTY_REFERENCE(40),
      INVOCATION(41),
      INSTANTIATION(42),
      SUPER_LITERAL(43),
      CLASS(44),
      EXPRESSION_NOT_SET(0);
      private final int value;
      private ExpressionCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ExpressionCase valueOf(int value) {
        return forNumber(value);
      }

      public static ExpressionCase forNumber(int value) {
        switch (value) {
          case 22: return SIMPLE_NAME_REFERENCE;
          case 23: return THIS_LITERAL;
          case 24: return NULL_LITERAL;
          case 25: return TRUE_LITERAL;
          case 26: return FALSE_LITERAL;
          case 27: return STRING_LITERAL;
          case 28: return REG_EXP_LITERAL;
          case 29: return INT_LITERAL;
          case 30: return DOUBLE_LITERAL;
          case 31: return ARRAY_LITERAL;
          case 32: return OBJECT_LITERAL;
          case 33: return FUNCTION;
          case 34: return DOC_COMMENT;
          case 35: return BINARY;
          case 36: return UNARY;
          case 37: return CONDITIONAL;
          case 38: return ARRAY_ACCESS;
          case 39: return NAME_REFERENCE;
          case 40: return PROPERTY_REFERENCE;
          case 41: return INVOCATION;
          case 42: return INSTANTIATION;
          case 43: return SUPER_LITERAL;
          case 44: return CLASS;
          case 0: return EXPRESSION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ExpressionCase
    getExpressionCase() {
      return ExpressionCase.forNumber(
          expressionCase_);
    }

    public static final int FILEID_FIELD_NUMBER = 1;
    private int fileId_ = 0;
    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }

    public static final int LOCATION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return Whether the location field is set.
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return The location.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }

    public static final int SYNTHETIC_FIELD_NUMBER = 3;
    private boolean synthetic_ = false;
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    @java.lang.Override
    public boolean hasSynthetic() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    @java.lang.Override
    public boolean getSynthetic() {
      return synthetic_;
    }

    public static final int SIDE_EFFECTS_FIELD_NUMBER = 4;
    private int sideEffects_ = 1;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return Whether the sideEffects field is set.
     */
    @java.lang.Override public boolean hasSideEffects() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
     * @return The sideEffects.
     */
    @java.lang.Override public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects getSideEffects() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.forNumber(sideEffects_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.AFFECTS_STATE : result;
    }

    public static final int LOCAL_ALIAS_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule localAlias_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     * @return Whether the localAlias field is set.
     */
    @java.lang.Override
    public boolean hasLocalAlias() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     * @return The localAlias.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getLocalAlias() {
      return localAlias_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance() : localAlias_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder getLocalAliasOrBuilder() {
      return localAlias_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance() : localAlias_;
    }

    public static final int BEFORE_COMMENTS_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> beforeComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getBeforeCommentsOrBuilderList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public int getBeforeCommentsCount() {
      return beforeComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
      return beforeComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
        int index) {
      return beforeComments_.get(index);
    }

    public static final int AFTER_COMMENTS_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> afterComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getAfterCommentsOrBuilderList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public int getAfterCommentsCount() {
      return afterComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
      return afterComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
        int index) {
      return afterComments_.get(index);
    }

    public static final int SIMPLE_NAME_REFERENCE_FIELD_NUMBER = 22;
    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return Whether the simpleNameReference field is set.
     */
    @java.lang.Override
    public boolean hasSimpleNameReference() {
      return expressionCase_ == 22;
    }
    /**
     * <code>int32 simple_name_reference = 22;</code>
     * @return The simpleNameReference.
     */
    @java.lang.Override
    public int getSimpleNameReference() {
      if (expressionCase_ == 22) {
        return (java.lang.Integer) expression_;
      }
      return 0;
    }

    public static final int THIS_LITERAL_FIELD_NUMBER = 23;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     * @return Whether the thisLiteral field is set.
     */
    @java.lang.Override
    public boolean hasThisLiteral() {
      return expressionCase_ == 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     * @return The thisLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getThisLiteral() {
      if (expressionCase_ == 23) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder getThisLiteralOrBuilder() {
      if (expressionCase_ == 23) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
    }

    public static final int NULL_LITERAL_FIELD_NUMBER = 24;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     * @return Whether the nullLiteral field is set.
     */
    @java.lang.Override
    public boolean hasNullLiteral() {
      return expressionCase_ == 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     * @return The nullLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getNullLiteral() {
      if (expressionCase_ == 24) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder getNullLiteralOrBuilder() {
      if (expressionCase_ == 24) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
    }

    public static final int TRUE_LITERAL_FIELD_NUMBER = 25;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     * @return Whether the trueLiteral field is set.
     */
    @java.lang.Override
    public boolean hasTrueLiteral() {
      return expressionCase_ == 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     * @return The trueLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getTrueLiteral() {
      if (expressionCase_ == 25) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder getTrueLiteralOrBuilder() {
      if (expressionCase_ == 25) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
    }

    public static final int FALSE_LITERAL_FIELD_NUMBER = 26;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     * @return Whether the falseLiteral field is set.
     */
    @java.lang.Override
    public boolean hasFalseLiteral() {
      return expressionCase_ == 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     * @return The falseLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getFalseLiteral() {
      if (expressionCase_ == 26) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder getFalseLiteralOrBuilder() {
      if (expressionCase_ == 26) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
    }

    public static final int STRING_LITERAL_FIELD_NUMBER = 27;
    /**
     * <code>int32 string_literal = 27;</code>
     * @return Whether the stringLiteral field is set.
     */
    @java.lang.Override
    public boolean hasStringLiteral() {
      return expressionCase_ == 27;
    }
    /**
     * <code>int32 string_literal = 27;</code>
     * @return The stringLiteral.
     */
    @java.lang.Override
    public int getStringLiteral() {
      if (expressionCase_ == 27) {
        return (java.lang.Integer) expression_;
      }
      return 0;
    }

    public static final int REG_EXP_LITERAL_FIELD_NUMBER = 28;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     * @return Whether the regExpLiteral field is set.
     */
    @java.lang.Override
    public boolean hasRegExpLiteral() {
      return expressionCase_ == 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     * @return The regExpLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getRegExpLiteral() {
      if (expressionCase_ == 28) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder getRegExpLiteralOrBuilder() {
      if (expressionCase_ == 28) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
    }

    public static final int INT_LITERAL_FIELD_NUMBER = 29;
    /**
     * <code>int32 int_literal = 29;</code>
     * @return Whether the intLiteral field is set.
     */
    @java.lang.Override
    public boolean hasIntLiteral() {
      return expressionCase_ == 29;
    }
    /**
     * <code>int32 int_literal = 29;</code>
     * @return The intLiteral.
     */
    @java.lang.Override
    public int getIntLiteral() {
      if (expressionCase_ == 29) {
        return (java.lang.Integer) expression_;
      }
      return 0;
    }

    public static final int DOUBLE_LITERAL_FIELD_NUMBER = 30;
    /**
     * <code>double double_literal = 30;</code>
     * @return Whether the doubleLiteral field is set.
     */
    @java.lang.Override
    public boolean hasDoubleLiteral() {
      return expressionCase_ == 30;
    }
    /**
     * <code>double double_literal = 30;</code>
     * @return The doubleLiteral.
     */
    @java.lang.Override
    public double getDoubleLiteral() {
      if (expressionCase_ == 30) {
        return (java.lang.Double) expression_;
      }
      return 0D;
    }

    public static final int ARRAY_LITERAL_FIELD_NUMBER = 31;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     * @return Whether the arrayLiteral field is set.
     */
    @java.lang.Override
    public boolean hasArrayLiteral() {
      return expressionCase_ == 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     * @return The arrayLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getArrayLiteral() {
      if (expressionCase_ == 31) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder getArrayLiteralOrBuilder() {
      if (expressionCase_ == 31) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
    }

    public static final int OBJECT_LITERAL_FIELD_NUMBER = 32;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     * @return Whether the objectLiteral field is set.
     */
    @java.lang.Override
    public boolean hasObjectLiteral() {
      return expressionCase_ == 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     * @return The objectLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getObjectLiteral() {
      if (expressionCase_ == 32) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder getObjectLiteralOrBuilder() {
      if (expressionCase_ == 32) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
    }

    public static final int FUNCTION_FIELD_NUMBER = 33;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     * @return Whether the function field is set.
     */
    @java.lang.Override
    public boolean hasFunction() {
      return expressionCase_ == 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     * @return The function.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getFunction() {
      if (expressionCase_ == 33) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getFunctionOrBuilder() {
      if (expressionCase_ == 33) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
    }

    public static final int DOC_COMMENT_FIELD_NUMBER = 34;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     * @return Whether the docComment field is set.
     */
    @java.lang.Override
    public boolean hasDocComment() {
      return expressionCase_ == 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     * @return The docComment.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDocComment() {
      if (expressionCase_ == 34) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder getDocCommentOrBuilder() {
      if (expressionCase_ == 34) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
    }

    public static final int BINARY_FIELD_NUMBER = 35;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     * @return Whether the binary field is set.
     */
    @java.lang.Override
    public boolean hasBinary() {
      return expressionCase_ == 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     * @return The binary.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getBinary() {
      if (expressionCase_ == 35) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder getBinaryOrBuilder() {
      if (expressionCase_ == 35) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
    }

    public static final int UNARY_FIELD_NUMBER = 36;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     * @return Whether the unary field is set.
     */
    @java.lang.Override
    public boolean hasUnary() {
      return expressionCase_ == 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     * @return The unary.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getUnary() {
      if (expressionCase_ == 36) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder getUnaryOrBuilder() {
      if (expressionCase_ == 36) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
    }

    public static final int CONDITIONAL_FIELD_NUMBER = 37;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     * @return Whether the conditional field is set.
     */
    @java.lang.Override
    public boolean hasConditional() {
      return expressionCase_ == 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     * @return The conditional.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getConditional() {
      if (expressionCase_ == 37) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder getConditionalOrBuilder() {
      if (expressionCase_ == 37) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
    }

    public static final int ARRAY_ACCESS_FIELD_NUMBER = 38;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     * @return Whether the arrayAccess field is set.
     */
    @java.lang.Override
    public boolean hasArrayAccess() {
      return expressionCase_ == 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     * @return The arrayAccess.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getArrayAccess() {
      if (expressionCase_ == 38) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder getArrayAccessOrBuilder() {
      if (expressionCase_ == 38) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
    }

    public static final int NAME_REFERENCE_FIELD_NUMBER = 39;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     * @return Whether the nameReference field is set.
     */
    @java.lang.Override
    public boolean hasNameReference() {
      return expressionCase_ == 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     * @return The nameReference.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getNameReference() {
      if (expressionCase_ == 39) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder getNameReferenceOrBuilder() {
      if (expressionCase_ == 39) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
    }

    public static final int PROPERTY_REFERENCE_FIELD_NUMBER = 40;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     * @return Whether the propertyReference field is set.
     */
    @java.lang.Override
    public boolean hasPropertyReference() {
      return expressionCase_ == 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     * @return The propertyReference.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getPropertyReference() {
      if (expressionCase_ == 40) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder getPropertyReferenceOrBuilder() {
      if (expressionCase_ == 40) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
    }

    public static final int INVOCATION_FIELD_NUMBER = 41;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     * @return Whether the invocation field is set.
     */
    @java.lang.Override
    public boolean hasInvocation() {
      return expressionCase_ == 41;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     * @return The invocation.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getInvocation() {
      if (expressionCase_ == 41) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder getInvocationOrBuilder() {
      if (expressionCase_ == 41) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
    }

    public static final int INSTANTIATION_FIELD_NUMBER = 42;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     * @return Whether the instantiation field is set.
     */
    @java.lang.Override
    public boolean hasInstantiation() {
      return expressionCase_ == 42;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     * @return The instantiation.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getInstantiation() {
      if (expressionCase_ == 42) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder getInstantiationOrBuilder() {
      if (expressionCase_ == 42) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
    }

    public static final int SUPER_LITERAL_FIELD_NUMBER = 43;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     * @return Whether the superLiteral field is set.
     */
    @java.lang.Override
    public boolean hasSuperLiteral() {
      return expressionCase_ == 43;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     * @return The superLiteral.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getSuperLiteral() {
      if (expressionCase_ == 43) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder getSuperLiteralOrBuilder() {
      if (expressionCase_ == 43) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
    }

    public static final int CLASS_FIELD_NUMBER = 44;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     * @return Whether the class field is set.
     */
    @java.lang.Override
    public boolean hasClass_() {
      return expressionCase_ == 44;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     * @return The class.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getClass_() {
      if (expressionCase_ == 44) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder getClass_OrBuilder() {
      if (expressionCase_ == 44) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasLocation()) {
        if (!getLocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLocalAlias()) {
        if (!getLocalAlias().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBeforeCommentsCount(); i++) {
        if (!getBeforeComments(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAfterCommentsCount(); i++) {
        if (!getAfterComments(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRegExpLiteral()) {
        if (!getRegExpLiteral().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasArrayLiteral()) {
        if (!getArrayLiteral().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasObjectLiteral()) {
        if (!getObjectLiteral().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFunction()) {
        if (!getFunction().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDocComment()) {
        if (!getDocComment().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBinary()) {
        if (!getBinary().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUnary()) {
        if (!getUnary().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasConditional()) {
        if (!getConditional().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasArrayAccess()) {
        if (!getArrayAccess().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasNameReference()) {
        if (!getNameReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPropertyReference()) {
        if (!getPropertyReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasInvocation()) {
        if (!getInvocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasInstantiation()) {
        if (!getInstantiation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasClass_()) {
        if (!getClass_().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, fileId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getLocation());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, synthetic_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeEnum(4, sideEffects_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(5, getLocalAlias());
      }
      for (int i = 0; i < beforeComments_.size(); i++) {
        output.writeMessage(6, beforeComments_.get(i));
      }
      for (int i = 0; i < afterComments_.size(); i++) {
        output.writeMessage(7, afterComments_.get(i));
      }
      if (expressionCase_ == 22) {
        output.writeInt32(
            22, (int)((java.lang.Integer) expression_));
      }
      if (expressionCase_ == 23) {
        output.writeMessage(23, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_);
      }
      if (expressionCase_ == 24) {
        output.writeMessage(24, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_);
      }
      if (expressionCase_ == 25) {
        output.writeMessage(25, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_);
      }
      if (expressionCase_ == 26) {
        output.writeMessage(26, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_);
      }
      if (expressionCase_ == 27) {
        output.writeInt32(
            27, (int)((java.lang.Integer) expression_));
      }
      if (expressionCase_ == 28) {
        output.writeMessage(28, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_);
      }
      if (expressionCase_ == 29) {
        output.writeInt32(
            29, (int)((java.lang.Integer) expression_));
      }
      if (expressionCase_ == 30) {
        output.writeDouble(
            30, (double)((java.lang.Double) expression_));
      }
      if (expressionCase_ == 31) {
        output.writeMessage(31, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_);
      }
      if (expressionCase_ == 32) {
        output.writeMessage(32, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_);
      }
      if (expressionCase_ == 33) {
        output.writeMessage(33, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_);
      }
      if (expressionCase_ == 34) {
        output.writeMessage(34, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_);
      }
      if (expressionCase_ == 35) {
        output.writeMessage(35, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_);
      }
      if (expressionCase_ == 36) {
        output.writeMessage(36, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_);
      }
      if (expressionCase_ == 37) {
        output.writeMessage(37, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_);
      }
      if (expressionCase_ == 38) {
        output.writeMessage(38, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_);
      }
      if (expressionCase_ == 39) {
        output.writeMessage(39, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_);
      }
      if (expressionCase_ == 40) {
        output.writeMessage(40, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_);
      }
      if (expressionCase_ == 41) {
        output.writeMessage(41, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_);
      }
      if (expressionCase_ == 42) {
        output.writeMessage(42, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_);
      }
      if (expressionCase_ == 43) {
        output.writeMessage(43, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_);
      }
      if (expressionCase_ == 44) {
        output.writeMessage(44, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, fileId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getLocation());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, synthetic_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(4, sideEffects_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, getLocalAlias());
      }
      for (int i = 0; i < beforeComments_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, beforeComments_.get(i));
      }
      for (int i = 0; i < afterComments_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, afterComments_.get(i));
      }
      if (expressionCase_ == 22) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              22, (int)((java.lang.Integer) expression_));
      }
      if (expressionCase_ == 23) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(23, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_);
      }
      if (expressionCase_ == 24) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(24, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_);
      }
      if (expressionCase_ == 25) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(25, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_);
      }
      if (expressionCase_ == 26) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(26, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_);
      }
      if (expressionCase_ == 27) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              27, (int)((java.lang.Integer) expression_));
      }
      if (expressionCase_ == 28) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(28, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_);
      }
      if (expressionCase_ == 29) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              29, (int)((java.lang.Integer) expression_));
      }
      if (expressionCase_ == 30) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeDoubleSize(
              30, (double)((java.lang.Double) expression_));
      }
      if (expressionCase_ == 31) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(31, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_);
      }
      if (expressionCase_ == 32) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_);
      }
      if (expressionCase_ == 33) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(33, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_);
      }
      if (expressionCase_ == 34) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(34, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_);
      }
      if (expressionCase_ == 35) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(35, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_);
      }
      if (expressionCase_ == 36) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(36, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_);
      }
      if (expressionCase_ == 37) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(37, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_);
      }
      if (expressionCase_ == 38) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(38, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_);
      }
      if (expressionCase_ == 39) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(39, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_);
      }
      if (expressionCase_ == 40) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(40, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_);
      }
      if (expressionCase_ == 41) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(41, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_);
      }
      if (expressionCase_ == 42) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(42, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_);
      }
      if (expressionCase_ == 43) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(43, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_);
      }
      if (expressionCase_ == 44) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(44, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) obj;

      if (hasFileId() != other.hasFileId()) return false;
      if (hasFileId()) {
        if (getFileId()
            != other.getFileId()) return false;
      }
      if (hasLocation() != other.hasLocation()) return false;
      if (hasLocation()) {
        if (!getLocation()
            .equals(other.getLocation())) return false;
      }
      if (hasSynthetic() != other.hasSynthetic()) return false;
      if (hasSynthetic()) {
        if (getSynthetic()
            != other.getSynthetic()) return false;
      }
      if (hasSideEffects() != other.hasSideEffects()) return false;
      if (hasSideEffects()) {
        if (sideEffects_ != other.sideEffects_) return false;
      }
      if (hasLocalAlias() != other.hasLocalAlias()) return false;
      if (hasLocalAlias()) {
        if (!getLocalAlias()
            .equals(other.getLocalAlias())) return false;
      }
      if (!getBeforeCommentsList()
          .equals(other.getBeforeCommentsList())) return false;
      if (!getAfterCommentsList()
          .equals(other.getAfterCommentsList())) return false;
      if (!getExpressionCase().equals(other.getExpressionCase())) return false;
      switch (expressionCase_) {
        case 22:
          if (getSimpleNameReference()
              != other.getSimpleNameReference()) return false;
          break;
        case 23:
          if (!getThisLiteral()
              .equals(other.getThisLiteral())) return false;
          break;
        case 24:
          if (!getNullLiteral()
              .equals(other.getNullLiteral())) return false;
          break;
        case 25:
          if (!getTrueLiteral()
              .equals(other.getTrueLiteral())) return false;
          break;
        case 26:
          if (!getFalseLiteral()
              .equals(other.getFalseLiteral())) return false;
          break;
        case 27:
          if (getStringLiteral()
              != other.getStringLiteral()) return false;
          break;
        case 28:
          if (!getRegExpLiteral()
              .equals(other.getRegExpLiteral())) return false;
          break;
        case 29:
          if (getIntLiteral()
              != other.getIntLiteral()) return false;
          break;
        case 30:
          if (java.lang.Double.doubleToLongBits(getDoubleLiteral())
              != java.lang.Double.doubleToLongBits(
                  other.getDoubleLiteral())) return false;
          break;
        case 31:
          if (!getArrayLiteral()
              .equals(other.getArrayLiteral())) return false;
          break;
        case 32:
          if (!getObjectLiteral()
              .equals(other.getObjectLiteral())) return false;
          break;
        case 33:
          if (!getFunction()
              .equals(other.getFunction())) return false;
          break;
        case 34:
          if (!getDocComment()
              .equals(other.getDocComment())) return false;
          break;
        case 35:
          if (!getBinary()
              .equals(other.getBinary())) return false;
          break;
        case 36:
          if (!getUnary()
              .equals(other.getUnary())) return false;
          break;
        case 37:
          if (!getConditional()
              .equals(other.getConditional())) return false;
          break;
        case 38:
          if (!getArrayAccess()
              .equals(other.getArrayAccess())) return false;
          break;
        case 39:
          if (!getNameReference()
              .equals(other.getNameReference())) return false;
          break;
        case 40:
          if (!getPropertyReference()
              .equals(other.getPropertyReference())) return false;
          break;
        case 41:
          if (!getInvocation()
              .equals(other.getInvocation())) return false;
          break;
        case 42:
          if (!getInstantiation()
              .equals(other.getInstantiation())) return false;
          break;
        case 43:
          if (!getSuperLiteral()
              .equals(other.getSuperLiteral())) return false;
          break;
        case 44:
          if (!getClass_()
              .equals(other.getClass_())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFileId()) {
        hash = (37 * hash) + FILEID_FIELD_NUMBER;
        hash = (53 * hash) + getFileId();
      }
      if (hasLocation()) {
        hash = (37 * hash) + LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getLocation().hashCode();
      }
      if (hasSynthetic()) {
        hash = (37 * hash) + SYNTHETIC_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getSynthetic());
      }
      if (hasSideEffects()) {
        hash = (37 * hash) + SIDE_EFFECTS_FIELD_NUMBER;
        hash = (53 * hash) + sideEffects_;
      }
      if (hasLocalAlias()) {
        hash = (37 * hash) + LOCAL_ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getLocalAlias().hashCode();
      }
      if (getBeforeCommentsCount() > 0) {
        hash = (37 * hash) + BEFORE_COMMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getBeforeCommentsList().hashCode();
      }
      if (getAfterCommentsCount() > 0) {
        hash = (37 * hash) + AFTER_COMMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getAfterCommentsList().hashCode();
      }
      switch (expressionCase_) {
        case 22:
          hash = (37 * hash) + SIMPLE_NAME_REFERENCE_FIELD_NUMBER;
          hash = (53 * hash) + getSimpleNameReference();
          break;
        case 23:
          hash = (37 * hash) + THIS_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getThisLiteral().hashCode();
          break;
        case 24:
          hash = (37 * hash) + NULL_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getNullLiteral().hashCode();
          break;
        case 25:
          hash = (37 * hash) + TRUE_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getTrueLiteral().hashCode();
          break;
        case 26:
          hash = (37 * hash) + FALSE_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getFalseLiteral().hashCode();
          break;
        case 27:
          hash = (37 * hash) + STRING_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getStringLiteral();
          break;
        case 28:
          hash = (37 * hash) + REG_EXP_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getRegExpLiteral().hashCode();
          break;
        case 29:
          hash = (37 * hash) + INT_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getIntLiteral();
          break;
        case 30:
          hash = (37 * hash) + DOUBLE_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getDoubleLiteral()));
          break;
        case 31:
          hash = (37 * hash) + ARRAY_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getArrayLiteral().hashCode();
          break;
        case 32:
          hash = (37 * hash) + OBJECT_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getObjectLiteral().hashCode();
          break;
        case 33:
          hash = (37 * hash) + FUNCTION_FIELD_NUMBER;
          hash = (53 * hash) + getFunction().hashCode();
          break;
        case 34:
          hash = (37 * hash) + DOC_COMMENT_FIELD_NUMBER;
          hash = (53 * hash) + getDocComment().hashCode();
          break;
        case 35:
          hash = (37 * hash) + BINARY_FIELD_NUMBER;
          hash = (53 * hash) + getBinary().hashCode();
          break;
        case 36:
          hash = (37 * hash) + UNARY_FIELD_NUMBER;
          hash = (53 * hash) + getUnary().hashCode();
          break;
        case 37:
          hash = (37 * hash) + CONDITIONAL_FIELD_NUMBER;
          hash = (53 * hash) + getConditional().hashCode();
          break;
        case 38:
          hash = (37 * hash) + ARRAY_ACCESS_FIELD_NUMBER;
          hash = (53 * hash) + getArrayAccess().hashCode();
          break;
        case 39:
          hash = (37 * hash) + NAME_REFERENCE_FIELD_NUMBER;
          hash = (53 * hash) + getNameReference().hashCode();
          break;
        case 40:
          hash = (37 * hash) + PROPERTY_REFERENCE_FIELD_NUMBER;
          hash = (53 * hash) + getPropertyReference().hashCode();
          break;
        case 41:
          hash = (37 * hash) + INVOCATION_FIELD_NUMBER;
          hash = (53 * hash) + getInvocation().hashCode();
          break;
        case 42:
          hash = (37 * hash) + INSTANTIATION_FIELD_NUMBER;
          hash = (53 * hash) + getInstantiation().hashCode();
          break;
        case 43:
          hash = (37 * hash) + SUPER_LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getSuperLiteral().hashCode();
          break;
        case 44:
          hash = (37 * hash) + CLASS_FIELD_NUMBER;
          hash = (53 * hash) + getClass_().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Expression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Expression)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getLocationFieldBuilder();
          getLocalAliasFieldBuilder();
          getBeforeCommentsFieldBuilder();
          getAfterCommentsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        fileId_ = 0;
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        synthetic_ = false;
        sideEffects_ = 1;
        localAlias_ = null;
        if (localAliasBuilder_ != null) {
          localAliasBuilder_.dispose();
          localAliasBuilder_ = null;
        }
        if (beforeCommentsBuilder_ == null) {
          beforeComments_ = java.util.Collections.emptyList();
        } else {
          beforeComments_ = null;
          beforeCommentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (afterCommentsBuilder_ == null) {
          afterComments_ = java.util.Collections.emptyList();
        } else {
          afterComments_ = null;
          afterCommentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (thisLiteralBuilder_ != null) {
          thisLiteralBuilder_.clear();
        }
        if (nullLiteralBuilder_ != null) {
          nullLiteralBuilder_.clear();
        }
        if (trueLiteralBuilder_ != null) {
          trueLiteralBuilder_.clear();
        }
        if (falseLiteralBuilder_ != null) {
          falseLiteralBuilder_.clear();
        }
        if (regExpLiteralBuilder_ != null) {
          regExpLiteralBuilder_.clear();
        }
        if (arrayLiteralBuilder_ != null) {
          arrayLiteralBuilder_.clear();
        }
        if (objectLiteralBuilder_ != null) {
          objectLiteralBuilder_.clear();
        }
        if (functionBuilder_ != null) {
          functionBuilder_.clear();
        }
        if (docCommentBuilder_ != null) {
          docCommentBuilder_.clear();
        }
        if (binaryBuilder_ != null) {
          binaryBuilder_.clear();
        }
        if (unaryBuilder_ != null) {
          unaryBuilder_.clear();
        }
        if (conditionalBuilder_ != null) {
          conditionalBuilder_.clear();
        }
        if (arrayAccessBuilder_ != null) {
          arrayAccessBuilder_.clear();
        }
        if (nameReferenceBuilder_ != null) {
          nameReferenceBuilder_.clear();
        }
        if (propertyReferenceBuilder_ != null) {
          propertyReferenceBuilder_.clear();
        }
        if (invocationBuilder_ != null) {
          invocationBuilder_.clear();
        }
        if (instantiationBuilder_ != null) {
          instantiationBuilder_.clear();
        }
        if (superLiteralBuilder_ != null) {
          superLiteralBuilder_.clear();
        }
        if (class_Builder_ != null) {
          class_Builder_.clear();
        }
        expressionCase_ = 0;
        expression_ = null;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression result) {
        if (beforeCommentsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            beforeComments_ = java.util.Collections.unmodifiableList(beforeComments_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.beforeComments_ = beforeComments_;
        } else {
          result.beforeComments_ = beforeCommentsBuilder_.build();
        }
        if (afterCommentsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            afterComments_ = java.util.Collections.unmodifiableList(afterComments_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.afterComments_ = afterComments_;
        } else {
          result.afterComments_ = afterCommentsBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.fileId_ = fileId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.location_ = locationBuilder_ == null
              ? location_
              : locationBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.synthetic_ = synthetic_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.sideEffects_ = sideEffects_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.localAlias_ = localAliasBuilder_ == null
              ? localAlias_
              : localAliasBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression result) {
        result.expressionCase_ = expressionCase_;
        result.expression_ = this.expression_;
        if (expressionCase_ == 23 &&
            thisLiteralBuilder_ != null) {
          result.expression_ = thisLiteralBuilder_.build();
        }
        if (expressionCase_ == 24 &&
            nullLiteralBuilder_ != null) {
          result.expression_ = nullLiteralBuilder_.build();
        }
        if (expressionCase_ == 25 &&
            trueLiteralBuilder_ != null) {
          result.expression_ = trueLiteralBuilder_.build();
        }
        if (expressionCase_ == 26 &&
            falseLiteralBuilder_ != null) {
          result.expression_ = falseLiteralBuilder_.build();
        }
        if (expressionCase_ == 28 &&
            regExpLiteralBuilder_ != null) {
          result.expression_ = regExpLiteralBuilder_.build();
        }
        if (expressionCase_ == 31 &&
            arrayLiteralBuilder_ != null) {
          result.expression_ = arrayLiteralBuilder_.build();
        }
        if (expressionCase_ == 32 &&
            objectLiteralBuilder_ != null) {
          result.expression_ = objectLiteralBuilder_.build();
        }
        if (expressionCase_ == 33 &&
            functionBuilder_ != null) {
          result.expression_ = functionBuilder_.build();
        }
        if (expressionCase_ == 34 &&
            docCommentBuilder_ != null) {
          result.expression_ = docCommentBuilder_.build();
        }
        if (expressionCase_ == 35 &&
            binaryBuilder_ != null) {
          result.expression_ = binaryBuilder_.build();
        }
        if (expressionCase_ == 36 &&
            unaryBuilder_ != null) {
          result.expression_ = unaryBuilder_.build();
        }
        if (expressionCase_ == 37 &&
            conditionalBuilder_ != null) {
          result.expression_ = conditionalBuilder_.build();
        }
        if (expressionCase_ == 38 &&
            arrayAccessBuilder_ != null) {
          result.expression_ = arrayAccessBuilder_.build();
        }
        if (expressionCase_ == 39 &&
            nameReferenceBuilder_ != null) {
          result.expression_ = nameReferenceBuilder_.build();
        }
        if (expressionCase_ == 40 &&
            propertyReferenceBuilder_ != null) {
          result.expression_ = propertyReferenceBuilder_.build();
        }
        if (expressionCase_ == 41 &&
            invocationBuilder_ != null) {
          result.expression_ = invocationBuilder_.build();
        }
        if (expressionCase_ == 42 &&
            instantiationBuilder_ != null) {
          result.expression_ = instantiationBuilder_.build();
        }
        if (expressionCase_ == 43 &&
            superLiteralBuilder_ != null) {
          result.expression_ = superLiteralBuilder_.build();
        }
        if (expressionCase_ == 44 &&
            class_Builder_ != null) {
          result.expression_ = class_Builder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) return this;
        if (other.hasFileId()) {
          setFileId(other.getFileId());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasSynthetic()) {
          setSynthetic(other.getSynthetic());
        }
        if (other.hasSideEffects()) {
          setSideEffects(other.getSideEffects());
        }
        if (other.hasLocalAlias()) {
          mergeLocalAlias(other.getLocalAlias());
        }
        if (beforeCommentsBuilder_ == null) {
          if (!other.beforeComments_.isEmpty()) {
            if (beforeComments_.isEmpty()) {
              beforeComments_ = other.beforeComments_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureBeforeCommentsIsMutable();
              beforeComments_.addAll(other.beforeComments_);
            }
            onChanged();
          }
        } else {
          if (!other.beforeComments_.isEmpty()) {
            if (beforeCommentsBuilder_.isEmpty()) {
              beforeCommentsBuilder_.dispose();
              beforeCommentsBuilder_ = null;
              beforeComments_ = other.beforeComments_;
              bitField0_ = (bitField0_ & ~0x00000020);
              beforeCommentsBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBeforeCommentsFieldBuilder() : null;
            } else {
              beforeCommentsBuilder_.addAllMessages(other.beforeComments_);
            }
          }
        }
        if (afterCommentsBuilder_ == null) {
          if (!other.afterComments_.isEmpty()) {
            if (afterComments_.isEmpty()) {
              afterComments_ = other.afterComments_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureAfterCommentsIsMutable();
              afterComments_.addAll(other.afterComments_);
            }
            onChanged();
          }
        } else {
          if (!other.afterComments_.isEmpty()) {
            if (afterCommentsBuilder_.isEmpty()) {
              afterCommentsBuilder_.dispose();
              afterCommentsBuilder_ = null;
              afterComments_ = other.afterComments_;
              bitField0_ = (bitField0_ & ~0x00000040);
              afterCommentsBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAfterCommentsFieldBuilder() : null;
            } else {
              afterCommentsBuilder_.addAllMessages(other.afterComments_);
            }
          }
        }
        switch (other.getExpressionCase()) {
          case SIMPLE_NAME_REFERENCE: {
            setSimpleNameReference(other.getSimpleNameReference());
            break;
          }
          case THIS_LITERAL: {
            mergeThisLiteral(other.getThisLiteral());
            break;
          }
          case NULL_LITERAL: {
            mergeNullLiteral(other.getNullLiteral());
            break;
          }
          case TRUE_LITERAL: {
            mergeTrueLiteral(other.getTrueLiteral());
            break;
          }
          case FALSE_LITERAL: {
            mergeFalseLiteral(other.getFalseLiteral());
            break;
          }
          case STRING_LITERAL: {
            setStringLiteral(other.getStringLiteral());
            break;
          }
          case REG_EXP_LITERAL: {
            mergeRegExpLiteral(other.getRegExpLiteral());
            break;
          }
          case INT_LITERAL: {
            setIntLiteral(other.getIntLiteral());
            break;
          }
          case DOUBLE_LITERAL: {
            setDoubleLiteral(other.getDoubleLiteral());
            break;
          }
          case ARRAY_LITERAL: {
            mergeArrayLiteral(other.getArrayLiteral());
            break;
          }
          case OBJECT_LITERAL: {
            mergeObjectLiteral(other.getObjectLiteral());
            break;
          }
          case FUNCTION: {
            mergeFunction(other.getFunction());
            break;
          }
          case DOC_COMMENT: {
            mergeDocComment(other.getDocComment());
            break;
          }
          case BINARY: {
            mergeBinary(other.getBinary());
            break;
          }
          case UNARY: {
            mergeUnary(other.getUnary());
            break;
          }
          case CONDITIONAL: {
            mergeConditional(other.getConditional());
            break;
          }
          case ARRAY_ACCESS: {
            mergeArrayAccess(other.getArrayAccess());
            break;
          }
          case NAME_REFERENCE: {
            mergeNameReference(other.getNameReference());
            break;
          }
          case PROPERTY_REFERENCE: {
            mergePropertyReference(other.getPropertyReference());
            break;
          }
          case INVOCATION: {
            mergeInvocation(other.getInvocation());
            break;
          }
          case INSTANTIATION: {
            mergeInstantiation(other.getInstantiation());
            break;
          }
          case SUPER_LITERAL: {
            mergeSuperLiteral(other.getSuperLiteral());
            break;
          }
          case CLASS: {
            mergeClass_(other.getClass_());
            break;
          }
          case EXPRESSION_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasLocation()) {
          if (!getLocation().isInitialized()) {
            return false;
          }
        }
        if (hasLocalAlias()) {
          if (!getLocalAlias().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getBeforeCommentsCount(); i++) {
          if (!getBeforeComments(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAfterCommentsCount(); i++) {
          if (!getAfterComments(i).isInitialized()) {
            return false;
          }
        }
        if (hasRegExpLiteral()) {
          if (!getRegExpLiteral().isInitialized()) {
            return false;
          }
        }
        if (hasArrayLiteral()) {
          if (!getArrayLiteral().isInitialized()) {
            return false;
          }
        }
        if (hasObjectLiteral()) {
          if (!getObjectLiteral().isInitialized()) {
            return false;
          }
        }
        if (hasFunction()) {
          if (!getFunction().isInitialized()) {
            return false;
          }
        }
        if (hasDocComment()) {
          if (!getDocComment().isInitialized()) {
            return false;
          }
        }
        if (hasBinary()) {
          if (!getBinary().isInitialized()) {
            return false;
          }
        }
        if (hasUnary()) {
          if (!getUnary().isInitialized()) {
            return false;
          }
        }
        if (hasConditional()) {
          if (!getConditional().isInitialized()) {
            return false;
          }
        }
        if (hasArrayAccess()) {
          if (!getArrayAccess().isInitialized()) {
            return false;
          }
        }
        if (hasNameReference()) {
          if (!getNameReference().isInitialized()) {
            return false;
          }
        }
        if (hasPropertyReference()) {
          if (!getPropertyReference().isInitialized()) {
            return false;
          }
        }
        if (hasInvocation()) {
          if (!getInvocation().isInitialized()) {
            return false;
          }
        }
        if (hasInstantiation()) {
          if (!getInstantiation().isInitialized()) {
            return false;
          }
        }
        if (hasClass_()) {
          if (!getClass_().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                fileId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getLocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                synthetic_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(4, tmpRaw);
                } else {
                  sideEffects_ = tmpRaw;
                  bitField0_ |= 0x00000008;
                }
                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getLocalAliasFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.parser(),
                        extensionRegistry);
                if (beforeCommentsBuilder_ == null) {
                  ensureBeforeCommentsIsMutable();
                  beforeComments_.add(m);
                } else {
                  beforeCommentsBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 58: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.parser(),
                        extensionRegistry);
                if (afterCommentsBuilder_ == null) {
                  ensureAfterCommentsIsMutable();
                  afterComments_.add(m);
                } else {
                  afterCommentsBuilder_.addMessage(m);
                }
                break;
              } // case 58
              case 176: {
                expression_ = input.readInt32();
                expressionCase_ = 22;
                break;
              } // case 176
              case 186: {
                input.readMessage(
                    getThisLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 23;
                break;
              } // case 186
              case 194: {
                input.readMessage(
                    getNullLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 24;
                break;
              } // case 194
              case 202: {
                input.readMessage(
                    getTrueLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 25;
                break;
              } // case 202
              case 210: {
                input.readMessage(
                    getFalseLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 26;
                break;
              } // case 210
              case 216: {
                expression_ = input.readInt32();
                expressionCase_ = 27;
                break;
              } // case 216
              case 226: {
                input.readMessage(
                    getRegExpLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 28;
                break;
              } // case 226
              case 232: {
                expression_ = input.readInt32();
                expressionCase_ = 29;
                break;
              } // case 232
              case 241: {
                expression_ = input.readDouble();
                expressionCase_ = 30;
                break;
              } // case 241
              case 250: {
                input.readMessage(
                    getArrayLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 31;
                break;
              } // case 250
              case 258: {
                input.readMessage(
                    getObjectLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 32;
                break;
              } // case 258
              case 266: {
                input.readMessage(
                    getFunctionFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 33;
                break;
              } // case 266
              case 274: {
                input.readMessage(
                    getDocCommentFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 34;
                break;
              } // case 274
              case 282: {
                input.readMessage(
                    getBinaryFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 35;
                break;
              } // case 282
              case 290: {
                input.readMessage(
                    getUnaryFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 36;
                break;
              } // case 290
              case 298: {
                input.readMessage(
                    getConditionalFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 37;
                break;
              } // case 298
              case 306: {
                input.readMessage(
                    getArrayAccessFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 38;
                break;
              } // case 306
              case 314: {
                input.readMessage(
                    getNameReferenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 39;
                break;
              } // case 314
              case 322: {
                input.readMessage(
                    getPropertyReferenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 40;
                break;
              } // case 322
              case 330: {
                input.readMessage(
                    getInvocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 41;
                break;
              } // case 330
              case 338: {
                input.readMessage(
                    getInstantiationFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 42;
                break;
              } // case 338
              case 346: {
                input.readMessage(
                    getSuperLiteralFieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 43;
                break;
              } // case 346
              case 354: {
                input.readMessage(
                    getClass_FieldBuilder().getBuilder(),
                    extensionRegistry);
                expressionCase_ = 44;
                break;
              } // case 354
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int expressionCase_ = 0;
      private java.lang.Object expression_;
      public ExpressionCase
          getExpressionCase() {
        return ExpressionCase.forNumber(
            expressionCase_);
      }

      public Builder clearExpression() {
        expressionCase_ = 0;
        expression_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int fileId_ ;
      /**
       * <code>int32 fileId = 1;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return fileId_;
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {

        fileId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fileId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> locationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       * @return Whether the location field is set.
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       * @return The location.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        if (locationBuilder_ == null) {
          return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            location_ != null &&
            location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
            getLocationBuilder().mergeFrom(value);
          } else {
            location_ = value;
          }
        } else {
          locationBuilder_.mergeFrom(value);
        }
        if (location_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder clearLocation() {
        bitField0_ = (bitField0_ & ~0x00000002);
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder getLocationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      private boolean synthetic_ ;
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return Whether the synthetic field is set.
       */
      @java.lang.Override
      public boolean hasSynthetic() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return The synthetic.
       */
      @java.lang.Override
      public boolean getSynthetic() {
        return synthetic_;
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @param value The synthetic to set.
       * @return This builder for chaining.
       */
      public Builder setSynthetic(boolean value) {

        synthetic_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearSynthetic() {
        bitField0_ = (bitField0_ & ~0x00000004);
        synthetic_ = false;
        onChanged();
        return this;
      }

      private int sideEffects_ = 1;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @return Whether the sideEffects field is set.
       */
      @java.lang.Override public boolean hasSideEffects() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @return The sideEffects.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects getSideEffects() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.forNumber(sideEffects_);
        return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects.AFFECTS_STATE : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @param value The sideEffects to set.
       * @return This builder for chaining.
       */
      public Builder setSideEffects(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SideEffects value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        sideEffects_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SideEffects side_effects = 4 [default = AFFECTS_STATE];</code>
       * @return This builder for chaining.
       */
      public Builder clearSideEffects() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sideEffects_ = 1;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule localAlias_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder> localAliasBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       * @return Whether the localAlias field is set.
       */
      public boolean hasLocalAlias() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       * @return The localAlias.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule getLocalAlias() {
        if (localAliasBuilder_ == null) {
          return localAlias_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance() : localAlias_;
        } else {
          return localAliasBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder setLocalAlias(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule value) {
        if (localAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          localAlias_ = value;
        } else {
          localAliasBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder setLocalAlias(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder builderForValue) {
        if (localAliasBuilder_ == null) {
          localAlias_ = builderForValue.build();
        } else {
          localAliasBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder mergeLocalAlias(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule value) {
        if (localAliasBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            localAlias_ != null &&
            localAlias_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance()) {
            getLocalAliasBuilder().mergeFrom(value);
          } else {
            localAlias_ = value;
          }
        } else {
          localAliasBuilder_.mergeFrom(value);
        }
        if (localAlias_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public Builder clearLocalAlias() {
        bitField0_ = (bitField0_ & ~0x00000010);
        localAlias_ = null;
        if (localAliasBuilder_ != null) {
          localAliasBuilder_.dispose();
          localAliasBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder getLocalAliasBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getLocalAliasFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder getLocalAliasOrBuilder() {
        if (localAliasBuilder_ != null) {
          return localAliasBuilder_.getMessageOrBuilder();
        } else {
          return localAlias_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.getDefaultInstance() : localAlias_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.JsImportedModule local_alias = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder> 
          getLocalAliasFieldBuilder() {
        if (localAliasBuilder_ == null) {
          localAliasBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.JsImportedModuleOrBuilder>(
                  getLocalAlias(),
                  getParentForChildren(),
                  isClean());
          localAlias_ = null;
        }
        return localAliasBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> beforeComments_ =
        java.util.Collections.emptyList();
      private void ensureBeforeCommentsIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          beforeComments_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment>(beforeComments_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> beforeCommentsBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
        if (beforeCommentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(beforeComments_);
        } else {
          return beforeCommentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public int getBeforeCommentsCount() {
        if (beforeCommentsBuilder_ == null) {
          return beforeComments_.size();
        } else {
          return beforeCommentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
        if (beforeCommentsBuilder_ == null) {
          return beforeComments_.get(index);
        } else {
          return beforeCommentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (beforeCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeforeCommentsIsMutable();
          beforeComments_.set(index, value);
          onChanged();
        } else {
          beforeCommentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.set(index, builderForValue.build());
          onChanged();
        } else {
          beforeCommentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (beforeCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(value);
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (beforeCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(index, value);
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(builderForValue.build());
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(index, builderForValue.build());
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder addAllBeforeComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, beforeComments_);
          onChanged();
        } else {
          beforeCommentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder clearBeforeComments() {
        if (beforeCommentsBuilder_ == null) {
          beforeComments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          beforeCommentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public Builder removeBeforeComments(int index) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.remove(index);
          onChanged();
        } else {
          beforeCommentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder getBeforeCommentsBuilder(
          int index) {
        return getBeforeCommentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
          int index) {
        if (beforeCommentsBuilder_ == null) {
          return beforeComments_.get(index);  } else {
          return beforeCommentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
           getBeforeCommentsOrBuilderList() {
        if (beforeCommentsBuilder_ != null) {
          return beforeCommentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(beforeComments_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addBeforeCommentsBuilder() {
        return getBeforeCommentsFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addBeforeCommentsBuilder(
          int index) {
        return getBeforeCommentsFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder> 
           getBeforeCommentsBuilderList() {
        return getBeforeCommentsFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
          getBeforeCommentsFieldBuilder() {
        if (beforeCommentsBuilder_ == null) {
          beforeCommentsBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder>(
                  beforeComments_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          beforeComments_ = null;
        }
        return beforeCommentsBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> afterComments_ =
        java.util.Collections.emptyList();
      private void ensureAfterCommentsIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          afterComments_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment>(afterComments_);
          bitField0_ |= 0x00000040;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> afterCommentsBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
        if (afterCommentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(afterComments_);
        } else {
          return afterCommentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public int getAfterCommentsCount() {
        if (afterCommentsBuilder_ == null) {
          return afterComments_.size();
        } else {
          return afterCommentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
        if (afterCommentsBuilder_ == null) {
          return afterComments_.get(index);
        } else {
          return afterCommentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (afterCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAfterCommentsIsMutable();
          afterComments_.set(index, value);
          onChanged();
        } else {
          afterCommentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.set(index, builderForValue.build());
          onChanged();
        } else {
          afterCommentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (afterCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAfterCommentsIsMutable();
          afterComments_.add(value);
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (afterCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAfterCommentsIsMutable();
          afterComments_.add(index, value);
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.add(builderForValue.build());
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.add(index, builderForValue.build());
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder addAllAfterComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, afterComments_);
          onChanged();
        } else {
          afterCommentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder clearAfterComments() {
        if (afterCommentsBuilder_ == null) {
          afterComments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          afterCommentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public Builder removeAfterComments(int index) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.remove(index);
          onChanged();
        } else {
          afterCommentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder getAfterCommentsBuilder(
          int index) {
        return getAfterCommentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
          int index) {
        if (afterCommentsBuilder_ == null) {
          return afterComments_.get(index);  } else {
          return afterCommentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
           getAfterCommentsOrBuilderList() {
        if (afterCommentsBuilder_ != null) {
          return afterCommentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(afterComments_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addAfterCommentsBuilder() {
        return getAfterCommentsFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addAfterCommentsBuilder(
          int index) {
        return getAfterCommentsFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder> 
           getAfterCommentsBuilderList() {
        return getAfterCommentsFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
          getAfterCommentsFieldBuilder() {
        if (afterCommentsBuilder_ == null) {
          afterCommentsBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder>(
                  afterComments_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          afterComments_ = null;
        }
        return afterCommentsBuilder_;
      }

      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @return Whether the simpleNameReference field is set.
       */
      public boolean hasSimpleNameReference() {
        return expressionCase_ == 22;
      }
      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @return The simpleNameReference.
       */
      public int getSimpleNameReference() {
        if (expressionCase_ == 22) {
          return (java.lang.Integer) expression_;
        }
        return 0;
      }
      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @param value The simpleNameReference to set.
       * @return This builder for chaining.
       */
      public Builder setSimpleNameReference(int value) {

        expressionCase_ = 22;
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 simple_name_reference = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearSimpleNameReference() {
        if (expressionCase_ == 22) {
          expressionCase_ = 0;
          expression_ = null;
          onChanged();
        }
        return this;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder> thisLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       * @return Whether the thisLiteral field is set.
       */
      @java.lang.Override
      public boolean hasThisLiteral() {
        return expressionCase_ == 23;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       * @return The thisLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getThisLiteral() {
        if (thisLiteralBuilder_ == null) {
          if (expressionCase_ == 23) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 23) {
            return thisLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder setThisLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral value) {
        if (thisLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          thisLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 23;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder setThisLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder builderForValue) {
        if (thisLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          thisLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 23;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder mergeThisLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral value) {
        if (thisLiteralBuilder_ == null) {
          if (expressionCase_ == 23 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 23) {
            thisLiteralBuilder_.mergeFrom(value);
          } else {
            thisLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 23;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public Builder clearThisLiteral() {
        if (thisLiteralBuilder_ == null) {
          if (expressionCase_ == 23) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 23) {
            expressionCase_ = 0;
            expression_ = null;
          }
          thisLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder getThisLiteralBuilder() {
        return getThisLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder getThisLiteralOrBuilder() {
        if ((expressionCase_ == 23) && (thisLiteralBuilder_ != null)) {
          return thisLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 23) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ThisLiteral this_literal = 23;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder> 
          getThisLiteralFieldBuilder() {
        if (thisLiteralBuilder_ == null) {
          if (!(expressionCase_ == 23)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
          }
          thisLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 23;
        onChanged();
        return thisLiteralBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder> nullLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       * @return Whether the nullLiteral field is set.
       */
      @java.lang.Override
      public boolean hasNullLiteral() {
        return expressionCase_ == 24;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       * @return The nullLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getNullLiteral() {
        if (nullLiteralBuilder_ == null) {
          if (expressionCase_ == 24) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 24) {
            return nullLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder setNullLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral value) {
        if (nullLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          nullLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 24;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder setNullLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder builderForValue) {
        if (nullLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          nullLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 24;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder mergeNullLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral value) {
        if (nullLiteralBuilder_ == null) {
          if (expressionCase_ == 24 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 24) {
            nullLiteralBuilder_.mergeFrom(value);
          } else {
            nullLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 24;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public Builder clearNullLiteral() {
        if (nullLiteralBuilder_ == null) {
          if (expressionCase_ == 24) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 24) {
            expressionCase_ = 0;
            expression_ = null;
          }
          nullLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder getNullLiteralBuilder() {
        return getNullLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder getNullLiteralOrBuilder() {
        if ((expressionCase_ == 24) && (nullLiteralBuilder_ != null)) {
          return nullLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 24) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NullLiteral null_literal = 24;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder> 
          getNullLiteralFieldBuilder() {
        if (nullLiteralBuilder_ == null) {
          if (!(expressionCase_ == 24)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
          }
          nullLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 24;
        onChanged();
        return nullLiteralBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder> trueLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       * @return Whether the trueLiteral field is set.
       */
      @java.lang.Override
      public boolean hasTrueLiteral() {
        return expressionCase_ == 25;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       * @return The trueLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getTrueLiteral() {
        if (trueLiteralBuilder_ == null) {
          if (expressionCase_ == 25) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 25) {
            return trueLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder setTrueLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral value) {
        if (trueLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          trueLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 25;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder setTrueLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder builderForValue) {
        if (trueLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          trueLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 25;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder mergeTrueLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral value) {
        if (trueLiteralBuilder_ == null) {
          if (expressionCase_ == 25 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 25) {
            trueLiteralBuilder_.mergeFrom(value);
          } else {
            trueLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 25;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public Builder clearTrueLiteral() {
        if (trueLiteralBuilder_ == null) {
          if (expressionCase_ == 25) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 25) {
            expressionCase_ = 0;
            expression_ = null;
          }
          trueLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder getTrueLiteralBuilder() {
        return getTrueLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder getTrueLiteralOrBuilder() {
        if ((expressionCase_ == 25) && (trueLiteralBuilder_ != null)) {
          return trueLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 25) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.TrueLiteral true_literal = 25;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder> 
          getTrueLiteralFieldBuilder() {
        if (trueLiteralBuilder_ == null) {
          if (!(expressionCase_ == 25)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
          }
          trueLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 25;
        onChanged();
        return trueLiteralBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder> falseLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       * @return Whether the falseLiteral field is set.
       */
      @java.lang.Override
      public boolean hasFalseLiteral() {
        return expressionCase_ == 26;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       * @return The falseLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getFalseLiteral() {
        if (falseLiteralBuilder_ == null) {
          if (expressionCase_ == 26) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 26) {
            return falseLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder setFalseLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral value) {
        if (falseLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          falseLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 26;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder setFalseLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder builderForValue) {
        if (falseLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          falseLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 26;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder mergeFalseLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral value) {
        if (falseLiteralBuilder_ == null) {
          if (expressionCase_ == 26 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 26) {
            falseLiteralBuilder_.mergeFrom(value);
          } else {
            falseLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 26;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public Builder clearFalseLiteral() {
        if (falseLiteralBuilder_ == null) {
          if (expressionCase_ == 26) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 26) {
            expressionCase_ = 0;
            expression_ = null;
          }
          falseLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder getFalseLiteralBuilder() {
        return getFalseLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder getFalseLiteralOrBuilder() {
        if ((expressionCase_ == 26) && (falseLiteralBuilder_ != null)) {
          return falseLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 26) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.FalseLiteral false_literal = 26;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder> 
          getFalseLiteralFieldBuilder() {
        if (falseLiteralBuilder_ == null) {
          if (!(expressionCase_ == 26)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
          }
          falseLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 26;
        onChanged();
        return falseLiteralBuilder_;
      }

      /**
       * <code>int32 string_literal = 27;</code>
       * @return Whether the stringLiteral field is set.
       */
      public boolean hasStringLiteral() {
        return expressionCase_ == 27;
      }
      /**
       * <code>int32 string_literal = 27;</code>
       * @return The stringLiteral.
       */
      public int getStringLiteral() {
        if (expressionCase_ == 27) {
          return (java.lang.Integer) expression_;
        }
        return 0;
      }
      /**
       * <code>int32 string_literal = 27;</code>
       * @param value The stringLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setStringLiteral(int value) {

        expressionCase_ = 27;
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 string_literal = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringLiteral() {
        if (expressionCase_ == 27) {
          expressionCase_ = 0;
          expression_ = null;
          onChanged();
        }
        return this;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder> regExpLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       * @return Whether the regExpLiteral field is set.
       */
      @java.lang.Override
      public boolean hasRegExpLiteral() {
        return expressionCase_ == 28;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       * @return The regExpLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getRegExpLiteral() {
        if (regExpLiteralBuilder_ == null) {
          if (expressionCase_ == 28) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 28) {
            return regExpLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder setRegExpLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral value) {
        if (regExpLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          regExpLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 28;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder setRegExpLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder builderForValue) {
        if (regExpLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          regExpLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 28;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder mergeRegExpLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral value) {
        if (regExpLiteralBuilder_ == null) {
          if (expressionCase_ == 28 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 28) {
            regExpLiteralBuilder_.mergeFrom(value);
          } else {
            regExpLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 28;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public Builder clearRegExpLiteral() {
        if (regExpLiteralBuilder_ == null) {
          if (expressionCase_ == 28) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 28) {
            expressionCase_ = 0;
            expression_ = null;
          }
          regExpLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder getRegExpLiteralBuilder() {
        return getRegExpLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder getRegExpLiteralOrBuilder() {
        if ((expressionCase_ == 28) && (regExpLiteralBuilder_ != null)) {
          return regExpLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 28) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral reg_exp_literal = 28;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder> 
          getRegExpLiteralFieldBuilder() {
        if (regExpLiteralBuilder_ == null) {
          if (!(expressionCase_ == 28)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
          }
          regExpLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 28;
        onChanged();
        return regExpLiteralBuilder_;
      }

      /**
       * <code>int32 int_literal = 29;</code>
       * @return Whether the intLiteral field is set.
       */
      public boolean hasIntLiteral() {
        return expressionCase_ == 29;
      }
      /**
       * <code>int32 int_literal = 29;</code>
       * @return The intLiteral.
       */
      public int getIntLiteral() {
        if (expressionCase_ == 29) {
          return (java.lang.Integer) expression_;
        }
        return 0;
      }
      /**
       * <code>int32 int_literal = 29;</code>
       * @param value The intLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setIntLiteral(int value) {

        expressionCase_ = 29;
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 int_literal = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearIntLiteral() {
        if (expressionCase_ == 29) {
          expressionCase_ = 0;
          expression_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>double double_literal = 30;</code>
       * @return Whether the doubleLiteral field is set.
       */
      public boolean hasDoubleLiteral() {
        return expressionCase_ == 30;
      }
      /**
       * <code>double double_literal = 30;</code>
       * @return The doubleLiteral.
       */
      public double getDoubleLiteral() {
        if (expressionCase_ == 30) {
          return (java.lang.Double) expression_;
        }
        return 0D;
      }
      /**
       * <code>double double_literal = 30;</code>
       * @param value The doubleLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setDoubleLiteral(double value) {

        expressionCase_ = 30;
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double double_literal = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearDoubleLiteral() {
        if (expressionCase_ == 30) {
          expressionCase_ = 0;
          expression_ = null;
          onChanged();
        }
        return this;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder> arrayLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       * @return Whether the arrayLiteral field is set.
       */
      @java.lang.Override
      public boolean hasArrayLiteral() {
        return expressionCase_ == 31;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       * @return The arrayLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getArrayLiteral() {
        if (arrayLiteralBuilder_ == null) {
          if (expressionCase_ == 31) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 31) {
            return arrayLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder setArrayLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral value) {
        if (arrayLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          arrayLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 31;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder setArrayLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder builderForValue) {
        if (arrayLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          arrayLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 31;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder mergeArrayLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral value) {
        if (arrayLiteralBuilder_ == null) {
          if (expressionCase_ == 31 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 31) {
            arrayLiteralBuilder_.mergeFrom(value);
          } else {
            arrayLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 31;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public Builder clearArrayLiteral() {
        if (arrayLiteralBuilder_ == null) {
          if (expressionCase_ == 31) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 31) {
            expressionCase_ = 0;
            expression_ = null;
          }
          arrayLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder getArrayLiteralBuilder() {
        return getArrayLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder getArrayLiteralOrBuilder() {
        if ((expressionCase_ == 31) && (arrayLiteralBuilder_ != null)) {
          return arrayLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 31) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral array_literal = 31;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder> 
          getArrayLiteralFieldBuilder() {
        if (arrayLiteralBuilder_ == null) {
          if (!(expressionCase_ == 31)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
          }
          arrayLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 31;
        onChanged();
        return arrayLiteralBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder> objectLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       * @return Whether the objectLiteral field is set.
       */
      @java.lang.Override
      public boolean hasObjectLiteral() {
        return expressionCase_ == 32;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       * @return The objectLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getObjectLiteral() {
        if (objectLiteralBuilder_ == null) {
          if (expressionCase_ == 32) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 32) {
            return objectLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder setObjectLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral value) {
        if (objectLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          objectLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 32;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder setObjectLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder builderForValue) {
        if (objectLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          objectLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 32;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder mergeObjectLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral value) {
        if (objectLiteralBuilder_ == null) {
          if (expressionCase_ == 32 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 32) {
            objectLiteralBuilder_.mergeFrom(value);
          } else {
            objectLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 32;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public Builder clearObjectLiteral() {
        if (objectLiteralBuilder_ == null) {
          if (expressionCase_ == 32) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 32) {
            expressionCase_ = 0;
            expression_ = null;
          }
          objectLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder getObjectLiteralBuilder() {
        return getObjectLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder getObjectLiteralOrBuilder() {
        if ((expressionCase_ == 32) && (objectLiteralBuilder_ != null)) {
          return objectLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 32) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral object_literal = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder> 
          getObjectLiteralFieldBuilder() {
        if (objectLiteralBuilder_ == null) {
          if (!(expressionCase_ == 32)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
          }
          objectLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 32;
        onChanged();
        return objectLiteralBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> functionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       * @return Whether the function field is set.
       */
      @java.lang.Override
      public boolean hasFunction() {
        return expressionCase_ == 33;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       * @return The function.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getFunction() {
        if (functionBuilder_ == null) {
          if (expressionCase_ == 33) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
        } else {
          if (expressionCase_ == 33) {
            return functionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder setFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          functionBuilder_.setMessage(value);
        }
        expressionCase_ = 33;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder setFunction(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          functionBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 33;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder mergeFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        if (functionBuilder_ == null) {
          if (expressionCase_ == 33 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 33) {
            functionBuilder_.mergeFrom(value);
          } else {
            functionBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 33;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public Builder clearFunction() {
        if (functionBuilder_ == null) {
          if (expressionCase_ == 33) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 33) {
            expressionCase_ = 0;
            expression_ = null;
          }
          functionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder getFunctionBuilder() {
        return getFunctionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getFunctionOrBuilder() {
        if ((expressionCase_ == 33) && (functionBuilder_ != null)) {
          return functionBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 33) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function function = 33;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> 
          getFunctionFieldBuilder() {
        if (functionBuilder_ == null) {
          if (!(expressionCase_ == 33)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
          }
          functionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 33;
        onChanged();
        return functionBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder> docCommentBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       * @return Whether the docComment field is set.
       */
      @java.lang.Override
      public boolean hasDocComment() {
        return expressionCase_ == 34;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       * @return The docComment.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDocComment() {
        if (docCommentBuilder_ == null) {
          if (expressionCase_ == 34) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
        } else {
          if (expressionCase_ == 34) {
            return docCommentBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder setDocComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment value) {
        if (docCommentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          docCommentBuilder_.setMessage(value);
        }
        expressionCase_ = 34;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder setDocComment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder builderForValue) {
        if (docCommentBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          docCommentBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 34;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder mergeDocComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment value) {
        if (docCommentBuilder_ == null) {
          if (expressionCase_ == 34 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 34) {
            docCommentBuilder_.mergeFrom(value);
          } else {
            docCommentBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 34;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public Builder clearDocComment() {
        if (docCommentBuilder_ == null) {
          if (expressionCase_ == 34) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 34) {
            expressionCase_ = 0;
            expression_ = null;
          }
          docCommentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder getDocCommentBuilder() {
        return getDocCommentFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder getDocCommentOrBuilder() {
        if ((expressionCase_ == 34) && (docCommentBuilder_ != null)) {
          return docCommentBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 34) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DocComment doc_comment = 34;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder> 
          getDocCommentFieldBuilder() {
        if (docCommentBuilder_ == null) {
          if (!(expressionCase_ == 34)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
          }
          docCommentBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 34;
        onChanged();
        return docCommentBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder> binaryBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       * @return Whether the binary field is set.
       */
      @java.lang.Override
      public boolean hasBinary() {
        return expressionCase_ == 35;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       * @return The binary.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getBinary() {
        if (binaryBuilder_ == null) {
          if (expressionCase_ == 35) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
        } else {
          if (expressionCase_ == 35) {
            return binaryBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder setBinary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation value) {
        if (binaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          binaryBuilder_.setMessage(value);
        }
        expressionCase_ = 35;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder setBinary(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder builderForValue) {
        if (binaryBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          binaryBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 35;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder mergeBinary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation value) {
        if (binaryBuilder_ == null) {
          if (expressionCase_ == 35 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 35) {
            binaryBuilder_.mergeFrom(value);
          } else {
            binaryBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 35;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public Builder clearBinary() {
        if (binaryBuilder_ == null) {
          if (expressionCase_ == 35) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 35) {
            expressionCase_ = 0;
            expression_ = null;
          }
          binaryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder getBinaryBuilder() {
        return getBinaryFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder getBinaryOrBuilder() {
        if ((expressionCase_ == 35) && (binaryBuilder_ != null)) {
          return binaryBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 35) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation binary = 35;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder> 
          getBinaryFieldBuilder() {
        if (binaryBuilder_ == null) {
          if (!(expressionCase_ == 35)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
          }
          binaryBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 35;
        onChanged();
        return binaryBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder> unaryBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       * @return Whether the unary field is set.
       */
      @java.lang.Override
      public boolean hasUnary() {
        return expressionCase_ == 36;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       * @return The unary.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getUnary() {
        if (unaryBuilder_ == null) {
          if (expressionCase_ == 36) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
        } else {
          if (expressionCase_ == 36) {
            return unaryBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder setUnary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation value) {
        if (unaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          unaryBuilder_.setMessage(value);
        }
        expressionCase_ = 36;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder setUnary(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder builderForValue) {
        if (unaryBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          unaryBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 36;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder mergeUnary(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation value) {
        if (unaryBuilder_ == null) {
          if (expressionCase_ == 36 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 36) {
            unaryBuilder_.mergeFrom(value);
          } else {
            unaryBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 36;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public Builder clearUnary() {
        if (unaryBuilder_ == null) {
          if (expressionCase_ == 36) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 36) {
            expressionCase_ = 0;
            expression_ = null;
          }
          unaryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder getUnaryBuilder() {
        return getUnaryFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder getUnaryOrBuilder() {
        if ((expressionCase_ == 36) && (unaryBuilder_ != null)) {
          return unaryBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 36) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation unary = 36;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder> 
          getUnaryFieldBuilder() {
        if (unaryBuilder_ == null) {
          if (!(expressionCase_ == 36)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
          }
          unaryBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 36;
        onChanged();
        return unaryBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder> conditionalBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       * @return Whether the conditional field is set.
       */
      @java.lang.Override
      public boolean hasConditional() {
        return expressionCase_ == 37;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       * @return The conditional.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getConditional() {
        if (conditionalBuilder_ == null) {
          if (expressionCase_ == 37) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
        } else {
          if (expressionCase_ == 37) {
            return conditionalBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder setConditional(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional value) {
        if (conditionalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          conditionalBuilder_.setMessage(value);
        }
        expressionCase_ = 37;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder setConditional(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder builderForValue) {
        if (conditionalBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          conditionalBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 37;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder mergeConditional(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional value) {
        if (conditionalBuilder_ == null) {
          if (expressionCase_ == 37 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 37) {
            conditionalBuilder_.mergeFrom(value);
          } else {
            conditionalBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 37;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public Builder clearConditional() {
        if (conditionalBuilder_ == null) {
          if (expressionCase_ == 37) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 37) {
            expressionCase_ = 0;
            expression_ = null;
          }
          conditionalBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder getConditionalBuilder() {
        return getConditionalFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder getConditionalOrBuilder() {
        if ((expressionCase_ == 37) && (conditionalBuilder_ != null)) {
          return conditionalBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 37) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Conditional conditional = 37;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder> 
          getConditionalFieldBuilder() {
        if (conditionalBuilder_ == null) {
          if (!(expressionCase_ == 37)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
          }
          conditionalBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 37;
        onChanged();
        return conditionalBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder> arrayAccessBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       * @return Whether the arrayAccess field is set.
       */
      @java.lang.Override
      public boolean hasArrayAccess() {
        return expressionCase_ == 38;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       * @return The arrayAccess.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getArrayAccess() {
        if (arrayAccessBuilder_ == null) {
          if (expressionCase_ == 38) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
        } else {
          if (expressionCase_ == 38) {
            return arrayAccessBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder setArrayAccess(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess value) {
        if (arrayAccessBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          arrayAccessBuilder_.setMessage(value);
        }
        expressionCase_ = 38;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder setArrayAccess(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder builderForValue) {
        if (arrayAccessBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          arrayAccessBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 38;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder mergeArrayAccess(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess value) {
        if (arrayAccessBuilder_ == null) {
          if (expressionCase_ == 38 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 38) {
            arrayAccessBuilder_.mergeFrom(value);
          } else {
            arrayAccessBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 38;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public Builder clearArrayAccess() {
        if (arrayAccessBuilder_ == null) {
          if (expressionCase_ == 38) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 38) {
            expressionCase_ = 0;
            expression_ = null;
          }
          arrayAccessBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder getArrayAccessBuilder() {
        return getArrayAccessFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder getArrayAccessOrBuilder() {
        if ((expressionCase_ == 38) && (arrayAccessBuilder_ != null)) {
          return arrayAccessBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 38) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ArrayAccess array_access = 38;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder> 
          getArrayAccessFieldBuilder() {
        if (arrayAccessBuilder_ == null) {
          if (!(expressionCase_ == 38)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
          }
          arrayAccessBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 38;
        onChanged();
        return arrayAccessBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder> nameReferenceBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       * @return Whether the nameReference field is set.
       */
      @java.lang.Override
      public boolean hasNameReference() {
        return expressionCase_ == 39;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       * @return The nameReference.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getNameReference() {
        if (nameReferenceBuilder_ == null) {
          if (expressionCase_ == 39) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
        } else {
          if (expressionCase_ == 39) {
            return nameReferenceBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder setNameReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference value) {
        if (nameReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          nameReferenceBuilder_.setMessage(value);
        }
        expressionCase_ = 39;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder setNameReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder builderForValue) {
        if (nameReferenceBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          nameReferenceBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 39;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder mergeNameReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference value) {
        if (nameReferenceBuilder_ == null) {
          if (expressionCase_ == 39 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 39) {
            nameReferenceBuilder_.mergeFrom(value);
          } else {
            nameReferenceBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 39;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public Builder clearNameReference() {
        if (nameReferenceBuilder_ == null) {
          if (expressionCase_ == 39) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 39) {
            expressionCase_ = 0;
            expression_ = null;
          }
          nameReferenceBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder getNameReferenceBuilder() {
        return getNameReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder getNameReferenceOrBuilder() {
        if ((expressionCase_ == 39) && (nameReferenceBuilder_ != null)) {
          return nameReferenceBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 39) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameReference name_reference = 39;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder> 
          getNameReferenceFieldBuilder() {
        if (nameReferenceBuilder_ == null) {
          if (!(expressionCase_ == 39)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
          }
          nameReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 39;
        onChanged();
        return nameReferenceBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder> propertyReferenceBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       * @return Whether the propertyReference field is set.
       */
      @java.lang.Override
      public boolean hasPropertyReference() {
        return expressionCase_ == 40;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       * @return The propertyReference.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getPropertyReference() {
        if (propertyReferenceBuilder_ == null) {
          if (expressionCase_ == 40) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
        } else {
          if (expressionCase_ == 40) {
            return propertyReferenceBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder setPropertyReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference value) {
        if (propertyReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          propertyReferenceBuilder_.setMessage(value);
        }
        expressionCase_ = 40;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder setPropertyReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder builderForValue) {
        if (propertyReferenceBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          propertyReferenceBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 40;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder mergePropertyReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference value) {
        if (propertyReferenceBuilder_ == null) {
          if (expressionCase_ == 40 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 40) {
            propertyReferenceBuilder_.mergeFrom(value);
          } else {
            propertyReferenceBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 40;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public Builder clearPropertyReference() {
        if (propertyReferenceBuilder_ == null) {
          if (expressionCase_ == 40) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 40) {
            expressionCase_ = 0;
            expression_ = null;
          }
          propertyReferenceBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder getPropertyReferenceBuilder() {
        return getPropertyReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder getPropertyReferenceOrBuilder() {
        if ((expressionCase_ == 40) && (propertyReferenceBuilder_ != null)) {
          return propertyReferenceBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 40) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.PropertyReference property_reference = 40;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder> 
          getPropertyReferenceFieldBuilder() {
        if (propertyReferenceBuilder_ == null) {
          if (!(expressionCase_ == 40)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
          }
          propertyReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 40;
        onChanged();
        return propertyReferenceBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder> invocationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       * @return Whether the invocation field is set.
       */
      @java.lang.Override
      public boolean hasInvocation() {
        return expressionCase_ == 41;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       * @return The invocation.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getInvocation() {
        if (invocationBuilder_ == null) {
          if (expressionCase_ == 41) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
        } else {
          if (expressionCase_ == 41) {
            return invocationBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder setInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation value) {
        if (invocationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          invocationBuilder_.setMessage(value);
        }
        expressionCase_ = 41;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder setInvocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder builderForValue) {
        if (invocationBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          invocationBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 41;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder mergeInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation value) {
        if (invocationBuilder_ == null) {
          if (expressionCase_ == 41 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 41) {
            invocationBuilder_.mergeFrom(value);
          } else {
            invocationBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 41;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public Builder clearInvocation() {
        if (invocationBuilder_ == null) {
          if (expressionCase_ == 41) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 41) {
            expressionCase_ = 0;
            expression_ = null;
          }
          invocationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder getInvocationBuilder() {
        return getInvocationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder getInvocationOrBuilder() {
        if ((expressionCase_ == 41) && (invocationBuilder_ != null)) {
          return invocationBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 41) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Invocation invocation = 41;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder> 
          getInvocationFieldBuilder() {
        if (invocationBuilder_ == null) {
          if (!(expressionCase_ == 41)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
          }
          invocationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 41;
        onChanged();
        return invocationBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder> instantiationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       * @return Whether the instantiation field is set.
       */
      @java.lang.Override
      public boolean hasInstantiation() {
        return expressionCase_ == 42;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       * @return The instantiation.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getInstantiation() {
        if (instantiationBuilder_ == null) {
          if (expressionCase_ == 42) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
        } else {
          if (expressionCase_ == 42) {
            return instantiationBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder setInstantiation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation value) {
        if (instantiationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          instantiationBuilder_.setMessage(value);
        }
        expressionCase_ = 42;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder setInstantiation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder builderForValue) {
        if (instantiationBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          instantiationBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 42;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder mergeInstantiation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation value) {
        if (instantiationBuilder_ == null) {
          if (expressionCase_ == 42 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 42) {
            instantiationBuilder_.mergeFrom(value);
          } else {
            instantiationBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 42;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public Builder clearInstantiation() {
        if (instantiationBuilder_ == null) {
          if (expressionCase_ == 42) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 42) {
            expressionCase_ = 0;
            expression_ = null;
          }
          instantiationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder getInstantiationBuilder() {
        return getInstantiationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder getInstantiationOrBuilder() {
        if ((expressionCase_ == 42) && (instantiationBuilder_ != null)) {
          return instantiationBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 42) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Instantiation instantiation = 42;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder> 
          getInstantiationFieldBuilder() {
        if (instantiationBuilder_ == null) {
          if (!(expressionCase_ == 42)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
          }
          instantiationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 42;
        onChanged();
        return instantiationBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder> superLiteralBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       * @return Whether the superLiteral field is set.
       */
      @java.lang.Override
      public boolean hasSuperLiteral() {
        return expressionCase_ == 43;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       * @return The superLiteral.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getSuperLiteral() {
        if (superLiteralBuilder_ == null) {
          if (expressionCase_ == 43) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
        } else {
          if (expressionCase_ == 43) {
            return superLiteralBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder setSuperLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral value) {
        if (superLiteralBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          superLiteralBuilder_.setMessage(value);
        }
        expressionCase_ = 43;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder setSuperLiteral(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder builderForValue) {
        if (superLiteralBuilder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          superLiteralBuilder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 43;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder mergeSuperLiteral(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral value) {
        if (superLiteralBuilder_ == null) {
          if (expressionCase_ == 43 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 43) {
            superLiteralBuilder_.mergeFrom(value);
          } else {
            superLiteralBuilder_.setMessage(value);
          }
        }
        expressionCase_ = 43;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public Builder clearSuperLiteral() {
        if (superLiteralBuilder_ == null) {
          if (expressionCase_ == 43) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 43) {
            expressionCase_ = 0;
            expression_ = null;
          }
          superLiteralBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder getSuperLiteralBuilder() {
        return getSuperLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder getSuperLiteralOrBuilder() {
        if ((expressionCase_ == 43) && (superLiteralBuilder_ != null)) {
          return superLiteralBuilder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 43) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SuperLiteral super_literal = 43;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder> 
          getSuperLiteralFieldBuilder() {
        if (superLiteralBuilder_ == null) {
          if (!(expressionCase_ == 43)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
          }
          superLiteralBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 43;
        onChanged();
        return superLiteralBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder> class_Builder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       * @return Whether the class field is set.
       */
      @java.lang.Override
      public boolean hasClass_() {
        return expressionCase_ == 44;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       * @return The class.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getClass_() {
        if (class_Builder_ == null) {
          if (expressionCase_ == 44) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
        } else {
          if (expressionCase_ == 44) {
            return class_Builder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder setClass_(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
          onChanged();
        } else {
          class_Builder_.setMessage(value);
        }
        expressionCase_ = 44;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder setClass_(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder builderForValue) {
        if (class_Builder_ == null) {
          expression_ = builderForValue.build();
          onChanged();
        } else {
          class_Builder_.setMessage(builderForValue.build());
        }
        expressionCase_ = 44;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder mergeClass_(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class value) {
        if (class_Builder_ == null) {
          if (expressionCase_ == 44 &&
              expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance()) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_)
                .mergeFrom(value).buildPartial();
          } else {
            expression_ = value;
          }
          onChanged();
        } else {
          if (expressionCase_ == 44) {
            class_Builder_.mergeFrom(value);
          } else {
            class_Builder_.setMessage(value);
          }
        }
        expressionCase_ = 44;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public Builder clearClass_() {
        if (class_Builder_ == null) {
          if (expressionCase_ == 44) {
            expressionCase_ = 0;
            expression_ = null;
            onChanged();
          }
        } else {
          if (expressionCase_ == 44) {
            expressionCase_ = 0;
            expression_ = null;
          }
          class_Builder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder getClass_Builder() {
        return getClass_FieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder getClass_OrBuilder() {
        if ((expressionCase_ == 44) && (class_Builder_ != null)) {
          return class_Builder_.getMessageOrBuilder();
        } else {
          if (expressionCase_ == 44) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Class class = 44;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder> 
          getClass_FieldBuilder() {
        if (class_Builder_ == null) {
          if (!(expressionCase_ == 44)) {
            expression_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
          }
          class_Builder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) expression_,
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        expressionCase_ = 44;
        onChanged();
        return class_Builder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Expression)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Expression)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Expression>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Expression>() {
      @java.lang.Override
      public Expression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Expression> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Expression> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ThisLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ThisLiteral}
   */
  public static final class ThisLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
      ThisLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ThisLiteral.class.getName());
    }
    // Use ThisLiteral.newBuilder() to construct.
    private ThisLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ThisLiteral() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ThisLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ThisLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ThisLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ThisLiteral>() {
      @java.lang.Override
      public ThisLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ThisLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ThisLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThisLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SuperLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SuperLiteral}
   */
  public static final class SuperLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
      SuperLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        SuperLiteral.class.getName());
    }
    // Use SuperLiteral.newBuilder() to construct.
    private SuperLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private SuperLiteral() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SuperLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.SuperLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<SuperLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<SuperLiteral>() {
      @java.lang.Override
      public SuperLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<SuperLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<SuperLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SuperLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NullLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NullLiteral}
   */
  public static final class NullLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
      NullLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        NullLiteral.class.getName());
    }
    // Use NullLiteral.newBuilder() to construct.
    private NullLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NullLiteral() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NullLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NullLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<NullLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<NullLiteral>() {
      @java.lang.Override
      public NullLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<NullLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<NullLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NullLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TrueLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.TrueLiteral}
   */
  public static final class TrueLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
      TrueLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        TrueLiteral.class.getName());
    }
    // Use TrueLiteral.newBuilder() to construct.
    private TrueLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private TrueLiteral() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.TrueLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.TrueLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<TrueLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<TrueLiteral>() {
      @java.lang.Override
      public TrueLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<TrueLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<TrueLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TrueLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FalseLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.FalseLiteral}
   */
  public static final class FalseLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
      FalseLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        FalseLiteral.class.getName());
    }
    // Use FalseLiteral.newBuilder() to construct.
    private FalseLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private FalseLiteral() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.FalseLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.FalseLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<FalseLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<FalseLiteral>() {
      @java.lang.Override
      public FalseLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<FalseLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<FalseLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FalseLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RegExpLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return Whether the patternStringId field is set.
     */
    boolean hasPatternStringId();
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return The patternStringId.
     */
    int getPatternStringId();

    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return Whether the flagsStringId field is set.
     */
    boolean hasFlagsStringId();
    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return The flagsStringId.
     */
    int getFlagsStringId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral}
   */
  public static final class RegExpLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
      RegExpLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        RegExpLiteral.class.getName());
    }
    // Use RegExpLiteral.newBuilder() to construct.
    private RegExpLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private RegExpLiteral() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder.class);
    }

    private int bitField0_;
    public static final int PATTERN_STRING_ID_FIELD_NUMBER = 1;
    private int patternStringId_ = 0;
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return Whether the patternStringId field is set.
     */
    @java.lang.Override
    public boolean hasPatternStringId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 pattern_string_id = 1 [features = { ... }</code>
     * @return The patternStringId.
     */
    @java.lang.Override
    public int getPatternStringId() {
      return patternStringId_;
    }

    public static final int FLAGS_STRING_ID_FIELD_NUMBER = 2;
    private int flagsStringId_ = 0;
    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return Whether the flagsStringId field is set.
     */
    @java.lang.Override
    public boolean hasFlagsStringId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 flags_string_id = 2;</code>
     * @return The flagsStringId.
     */
    @java.lang.Override
    public int getFlagsStringId() {
      return flagsStringId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPatternStringId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, patternStringId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, flagsStringId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, patternStringId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, flagsStringId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) obj;

      if (hasPatternStringId() != other.hasPatternStringId()) return false;
      if (hasPatternStringId()) {
        if (getPatternStringId()
            != other.getPatternStringId()) return false;
      }
      if (hasFlagsStringId() != other.hasFlagsStringId()) return false;
      if (hasFlagsStringId()) {
        if (getFlagsStringId()
            != other.getFlagsStringId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPatternStringId()) {
        hash = (37 * hash) + PATTERN_STRING_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPatternStringId();
      }
      if (hasFlagsStringId()) {
        hash = (37 * hash) + FLAGS_STRING_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFlagsStringId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        patternStringId_ = 0;
        flagsStringId_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.patternStringId_ = patternStringId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.flagsStringId_ = flagsStringId_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral.getDefaultInstance()) return this;
        if (other.hasPatternStringId()) {
          setPatternStringId(other.getPatternStringId());
        }
        if (other.hasFlagsStringId()) {
          setFlagsStringId(other.getFlagsStringId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasPatternStringId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                patternStringId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                flagsStringId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int patternStringId_ ;
      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @return Whether the patternStringId field is set.
       */
      @java.lang.Override
      public boolean hasPatternStringId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @return The patternStringId.
       */
      @java.lang.Override
      public int getPatternStringId() {
        return patternStringId_;
      }
      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @param value The patternStringId to set.
       * @return This builder for chaining.
       */
      public Builder setPatternStringId(int value) {

        patternStringId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 pattern_string_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPatternStringId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        patternStringId_ = 0;
        onChanged();
        return this;
      }

      private int flagsStringId_ ;
      /**
       * <code>int32 flags_string_id = 2;</code>
       * @return Whether the flagsStringId field is set.
       */
      @java.lang.Override
      public boolean hasFlagsStringId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 flags_string_id = 2;</code>
       * @return The flagsStringId.
       */
      @java.lang.Override
      public int getFlagsStringId() {
        return flagsStringId_;
      }
      /**
       * <code>int32 flags_string_id = 2;</code>
       * @param value The flagsStringId to set.
       * @return This builder for chaining.
       */
      public Builder setFlagsStringId(int value) {

        flagsStringId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 flags_string_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlagsStringId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flagsStringId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.RegExpLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<RegExpLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<RegExpLiteral>() {
      @java.lang.Override
      public RegExpLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<RegExpLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<RegExpLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.RegExpLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ArrayLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getElementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    int getElementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getElementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getElementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral}
   */
  public static final class ArrayLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
      ArrayLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ArrayLiteral.class.getName());
    }
    // Use ArrayLiteral.newBuilder() to construct.
    private ArrayLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ArrayLiteral() {
      element_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder.class);
    }

    public static final int ELEMENT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> element_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getElementList() {
      return element_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getElementOrBuilderList() {
      return element_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public int getElementCount() {
      return element_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElement(int index) {
      return element_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getElementOrBuilder(
        int index) {
      return element_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getElementCount(); i++) {
        if (!getElement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < element_.size(); i++) {
        output.writeMessage(1, element_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < element_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, element_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) obj;

      if (!getElementList()
          .equals(other.getElementList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getElementCount() > 0) {
        hash = (37 * hash) + ELEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getElementList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (elementBuilder_ == null) {
          element_ = java.util.Collections.emptyList();
        } else {
          element_ = null;
          elementBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral result) {
        if (elementBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            element_ = java.util.Collections.unmodifiableList(element_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.element_ = element_;
        } else {
          result.element_ = elementBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral.getDefaultInstance()) return this;
        if (elementBuilder_ == null) {
          if (!other.element_.isEmpty()) {
            if (element_.isEmpty()) {
              element_ = other.element_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureElementIsMutable();
              element_.addAll(other.element_);
            }
            onChanged();
          }
        } else {
          if (!other.element_.isEmpty()) {
            if (elementBuilder_.isEmpty()) {
              elementBuilder_.dispose();
              elementBuilder_ = null;
              element_ = other.element_;
              bitField0_ = (bitField0_ & ~0x00000001);
              elementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getElementFieldBuilder() : null;
            } else {
              elementBuilder_.addAllMessages(other.element_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getElementCount(); i++) {
          if (!getElement(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.parser(),
                        extensionRegistry);
                if (elementBuilder_ == null) {
                  ensureElementIsMutable();
                  element_.add(m);
                } else {
                  elementBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> element_ =
        java.util.Collections.emptyList();
      private void ensureElementIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          element_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression>(element_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> elementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getElementList() {
        if (elementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(element_);
        } else {
          return elementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public int getElementCount() {
        if (elementBuilder_ == null) {
          return element_.size();
        } else {
          return elementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElement(int index) {
        if (elementBuilder_ == null) {
          return element_.get(index);
        } else {
          return elementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder setElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (elementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureElementIsMutable();
          element_.set(index, value);
          onChanged();
        } else {
          elementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder setElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.set(index, builderForValue.build());
          onChanged();
        } else {
          elementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (elementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureElementIsMutable();
          element_.add(value);
          onChanged();
        } else {
          elementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (elementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureElementIsMutable();
          element_.add(index, value);
          onChanged();
        } else {
          elementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.add(builderForValue.build());
          onChanged();
        } else {
          elementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addElement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.add(index, builderForValue.build());
          onChanged();
        } else {
          elementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder addAllElement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, element_);
          onChanged();
        } else {
          elementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder clearElement() {
        if (elementBuilder_ == null) {
          element_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          elementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public Builder removeElement(int index) {
        if (elementBuilder_ == null) {
          ensureElementIsMutable();
          element_.remove(index);
          onChanged();
        } else {
          elementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getElementBuilder(
          int index) {
        return getElementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getElementOrBuilder(
          int index) {
        if (elementBuilder_ == null) {
          return element_.get(index);  } else {
          return elementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
           getElementOrBuilderList() {
        if (elementBuilder_ != null) {
          return elementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(element_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addElementBuilder() {
        return getElementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addElementBuilder(
          int index) {
        return getElementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression element = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder> 
           getElementBuilderList() {
        return getElementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getElementFieldBuilder() {
        if (elementBuilder_ == null) {
          elementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  element_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          element_ = null;
        }
        return elementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ArrayLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ArrayLiteral>() {
      @java.lang.Override
      public ArrayLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ArrayLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ArrayLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ObjectLiteralOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> 
        getEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    int getEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder> 
        getEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder getEntryOrBuilder(
        int index);

    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return Whether the multiline field is set.
     */
    boolean hasMultiline();
    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return The multiline.
     */
    boolean getMultiline();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral}
   */
  public static final class ObjectLiteral extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
      ObjectLiteralOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ObjectLiteral.class.getName());
    }
    // Use ObjectLiteral.newBuilder() to construct.
    private ObjectLiteral(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ObjectLiteral() {
      entry_ = java.util.Collections.emptyList();
      multiline_ = true;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder.class);
    }

    private int bitField0_;
    public static final int ENTRY_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> entry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder> 
        getEntryOrBuilderList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder getEntryOrBuilder(
        int index) {
      return entry_.get(index);
    }

    public static final int MULTILINE_FIELD_NUMBER = 2;
    private boolean multiline_ = true;
    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return Whether the multiline field is set.
     */
    @java.lang.Override
    public boolean hasMultiline() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool multiline = 2 [default = true];</code>
     * @return The multiline.
     */
    @java.lang.Override
    public boolean getMultiline() {
      return multiline_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getEntryCount(); i++) {
        if (!getEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < entry_.size(); i++) {
        output.writeMessage(1, entry_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(2, multiline_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < entry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, entry_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(2, multiline_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) obj;

      if (!getEntryList()
          .equals(other.getEntryList())) return false;
      if (hasMultiline() != other.hasMultiline()) return false;
      if (hasMultiline()) {
        if (getMultiline()
            != other.getMultiline()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEntryCount() > 0) {
        hash = (37 * hash) + ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + getEntryList().hashCode();
      }
      if (hasMultiline()) {
        hash = (37 * hash) + MULTILINE_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getMultiline());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
        } else {
          entry_ = null;
          entryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        multiline_ = true;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral result) {
        if (entryBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            entry_ = java.util.Collections.unmodifiableList(entry_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.entry_ = entry_;
        } else {
          result.entry_ = entryBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.multiline_ = multiline_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral.getDefaultInstance()) return this;
        if (entryBuilder_ == null) {
          if (!other.entry_.isEmpty()) {
            if (entry_.isEmpty()) {
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEntryIsMutable();
              entry_.addAll(other.entry_);
            }
            onChanged();
          }
        } else {
          if (!other.entry_.isEmpty()) {
            if (entryBuilder_.isEmpty()) {
              entryBuilder_.dispose();
              entryBuilder_ = null;
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000001);
              entryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEntryFieldBuilder() : null;
            } else {
              entryBuilder_.addAllMessages(other.entry_);
            }
          }
        }
        if (other.hasMultiline()) {
          setMultiline(other.getMultiline());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getEntryCount(); i++) {
          if (!getEntry(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.parser(),
                        extensionRegistry);
                if (entryBuilder_ == null) {
                  ensureEntryIsMutable();
                  entry_.add(m);
                } else {
                  entryBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                multiline_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> entry_ =
        java.util.Collections.emptyList();
      private void ensureEntryIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          entry_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry>(entry_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder> entryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> getEntryList() {
        if (entryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entry_);
        } else {
          return entryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public int getEntryCount() {
        if (entryBuilder_ == null) {
          return entry_.size();
        } else {
          return entryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getEntry(int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);
        } else {
          return entryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.set(index, value);
          onChanged();
        } else {
          entryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.set(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(value);
          onChanged();
        } else {
          entryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(index, value);
          onChanged();
        } else {
          entryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder addAllEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry> values) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, entry_);
          onChanged();
        } else {
          entryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder clearEntry() {
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          entryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public Builder removeEntry(int index) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.remove(index);
          onChanged();
        } else {
          entryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder getEntryBuilder(
          int index) {
        return getEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder getEntryOrBuilder(
          int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);  } else {
          return entryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder> 
           getEntryOrBuilderList() {
        if (entryBuilder_ != null) {
          return entryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder addEntryBuilder() {
        return getEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder addEntryBuilder(
          int index) {
        return getEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry entry = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder> 
           getEntryBuilderList() {
        return getEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder> 
          getEntryFieldBuilder() {
        if (entryBuilder_ == null) {
          entryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder>(
                  entry_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          entry_ = null;
        }
        return entryBuilder_;
      }

      private boolean multiline_ = true;
      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @return Whether the multiline field is set.
       */
      @java.lang.Override
      public boolean hasMultiline() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @return The multiline.
       */
      @java.lang.Override
      public boolean getMultiline() {
        return multiline_;
      }
      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @param value The multiline to set.
       * @return This builder for chaining.
       */
      public Builder setMultiline(boolean value) {

        multiline_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bool multiline = 2 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearMultiline() {
        bitField0_ = (bitField0_ & ~0x00000002);
        multiline_ = true;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteral)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ObjectLiteral>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ObjectLiteral>() {
      @java.lang.Override
      public ObjectLiteral parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ObjectLiteral> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ObjectLiteral> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteral getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ObjectLiteralEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     * @return Whether the key field is set.
     */
    boolean hasKey();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     * @return The key.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getKey();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getKeyOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     * @return The value.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry}
   */
  public static final class ObjectLiteralEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
      ObjectLiteralEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ObjectLiteralEntry.class.getName());
    }
    // Use ObjectLiteralEntry.newBuilder() to construct.
    private ObjectLiteralEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ObjectLiteralEntry() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder.class);
    }

    private int bitField0_;
    public static final int KEY_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression key_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     * @return Whether the key field is set.
     */
    @java.lang.Override
    public boolean hasKey() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     * @return The key.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getKey() {
      return key_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : key_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getKeyOrBuilder() {
      return key_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : key_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     * @return The value.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
      return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getValueOrBuilder() {
      return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasKey()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getKey().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getValue().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getKey());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getValue());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getKey());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getValue());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry) obj;

      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue()
            .equals(other.getValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getKeyFieldBuilder();
          getValueFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        key_ = null;
        if (keyBuilder_ != null) {
          keyBuilder_.dispose();
          keyBuilder_ = null;
        }
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.key_ = keyBuilder_ == null
              ? key_
              : keyBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = valueBuilder_ == null
              ? value_
              : valueBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry.getDefaultInstance()) return this;
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasKey()) {
          return false;
        }
        if (!hasValue()) {
          return false;
        }
        if (!getKey().isInitialized()) {
          return false;
        }
        if (!getValue().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getKeyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression key_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> keyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       * @return Whether the key field is set.
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       * @return The key.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder setKey(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
        } else {
          keyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder setKey(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder mergeKey(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (keyBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            key_ != null &&
            key_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getKeyBuilder().mergeFrom(value);
          } else {
            key_ = value;
          }
        } else {
          keyBuilder_.mergeFrom(value);
        }
        if (key_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = null;
        if (keyBuilder_ != null) {
          keyBuilder_.dispose();
          keyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getKeyBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : key_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression key = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> valueBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       * @return The value.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
        if (valueBuilder_ == null) {
          return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder setValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            value_ != null &&
            value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getValueBuilder().mergeFrom(value);
          } else {
            value_ = value;
          }
        } else {
          valueBuilder_.mergeFrom(value);
        }
        if (value_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ObjectLiteralEntry)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ObjectLiteralEntry>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ObjectLiteralEntry>() {
      @java.lang.Override
      public ObjectLiteralEntry parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ObjectLiteralEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ObjectLiteralEntry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ObjectLiteralEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Function)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> 
        getParameterList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    int getParameterCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> 
        getParameterOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder getParameterOrBuilder(
        int index);

    /**
     * <code>int32 name_id = 2;</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 2;</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder();

    /**
     * <code>bool local = 4 [default = false];</code>
     * @return Whether the local field is set.
     */
    boolean hasLocal();
    /**
     * <code>bool local = 4 [default = false];</code>
     * @return The local.
     */
    boolean getLocal();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return A list containing the modifier.
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> getModifierList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return The count of modifier.
     */
    int getModifierCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @param index The index of the element to return.
     * @return The modifier at the given index.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier getModifier(int index);

    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return Whether the isEs6Arrow field is set.
     */
    boolean hasIsEs6Arrow();
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return The isEs6Arrow.
     */
    boolean getIsEs6Arrow();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Function}
   */
  public static final class Function extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Function)
      FunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Function.class.getName());
    }
    // Use Function.newBuilder() to construct.
    private Function(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Function() {
      parameter_ = java.util.Collections.emptyList();
      modifier_ = emptyIntList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder.class);
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.Function.Modifier}
     */
    public enum Modifier
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>STATIC = 1;</code>
       */
      STATIC(1),
      /**
       * <code>GET = 2;</code>
       */
      GET(2),
      /**
       * <code>SET = 3;</code>
       */
      SET(3),
      /**
       * <code>GENERATOR = 4;</code>
       */
      GENERATOR(4),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Modifier.class.getName());
      }
      /**
       * <code>STATIC = 1;</code>
       */
      public static final int STATIC_VALUE = 1;
      /**
       * <code>GET = 2;</code>
       */
      public static final int GET_VALUE = 2;
      /**
       * <code>SET = 3;</code>
       */
      public static final int SET_VALUE = 3;
      /**
       * <code>GENERATOR = 4;</code>
       */
      public static final int GENERATOR_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Modifier valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Modifier forNumber(int value) {
        switch (value) {
          case 1: return STATIC;
          case 2: return GET;
          case 3: return SET;
          case 4: return GENERATOR;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modifier>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Modifier> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Modifier>() {
              public Modifier findValueByNumber(int number) {
                return Modifier.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDescriptor().getEnumTypes().get(0);
      }

      private static final Modifier[] VALUES = values();

      public static Modifier valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Modifier(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.Function.Modifier)
    }

    private int bitField0_;
    public static final int PARAMETER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> parameter_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> getParameterList() {
      return parameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> 
        getParameterOrBuilderList() {
      return parameter_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public int getParameterCount() {
      return parameter_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter(int index) {
      return parameter_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder getParameterOrBuilder(
        int index) {
      return parameter_.get(index);
    }

    public static final int NAME_ID_FIELD_NUMBER = 2;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 2;</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 2;</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int BODY_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     * @return The body.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }

    public static final int LOCAL_FIELD_NUMBER = 4;
    private boolean local_ = false;
    /**
     * <code>bool local = 4 [default = false];</code>
     * @return Whether the local field is set.
     */
    @java.lang.Override
    public boolean hasLocal() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool local = 4 [default = false];</code>
     * @return The local.
     */
    @java.lang.Override
    public boolean getLocal() {
      return local_;
    }

    public static final int MODIFIER_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList modifier_;
    private static final org.jetbrains.kotlin.protobuf.Internal.IntListAdapter.IntConverter<
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> modifier_converter_ =
            new org.jetbrains.kotlin.protobuf.Internal.IntListAdapter.IntConverter<
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier>() {
              public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier convert(int from) {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.forNumber(from);
                return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.STATIC : result;
              }
            };
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return A list containing the modifier.
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> getModifierList() {
      return new org.jetbrains.kotlin.protobuf.Internal.IntListAdapter<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier>(modifier_, modifier_converter_);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @return The count of modifier.
     */
    @java.lang.Override
    public int getModifierCount() {
      return modifier_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
     * @param index The index of the element to return.
     * @return The modifier at the given index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier getModifier(int index) {
      return modifier_converter_.convert(modifier_.getInt(index));
    }
    private int modifierMemoizedSerializedSize;

    public static final int IS_ES6_ARROW_FIELD_NUMBER = 6;
    private boolean isEs6Arrow_ = false;
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return Whether the isEs6Arrow field is set.
     */
    @java.lang.Override
    public boolean hasIsEs6Arrow() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>bool is_es6_arrow = 6 [default = false];</code>
     * @return The isEs6Arrow.
     */
    @java.lang.Override
    public boolean getIsEs6Arrow() {
      return isEs6Arrow_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getParameterCount(); i++) {
        if (!getParameter(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < parameter_.size(); i++) {
        output.writeMessage(1, parameter_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(2, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getBody());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(4, local_);
      }
      if (getModifierList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(modifierMemoizedSerializedSize);
      }
      for (int i = 0; i < modifier_.size(); i++) {
        output.writeEnumNoTag(modifier_.getInt(i));
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(6, isEs6Arrow_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < parameter_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, parameter_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getBody());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(4, local_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < modifier_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(modifier_.getInt(i));
        }
        size += dataSize;
        if (!getModifierList().isEmpty()) {  size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }modifierMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(6, isEs6Arrow_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) obj;

      if (!getParameterList()
          .equals(other.getParameterList())) return false;
      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (hasLocal() != other.hasLocal()) return false;
      if (hasLocal()) {
        if (getLocal()
            != other.getLocal()) return false;
      }
      if (!modifier_.equals(other.modifier_)) return false;
      if (hasIsEs6Arrow() != other.hasIsEs6Arrow()) return false;
      if (hasIsEs6Arrow()) {
        if (getIsEs6Arrow()
            != other.getIsEs6Arrow()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getParameterCount() > 0) {
        hash = (37 * hash) + PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getParameterList().hashCode();
      }
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      if (hasLocal()) {
        hash = (37 * hash) + LOCAL_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getLocal());
      }
      if (getModifierCount() > 0) {
        hash = (37 * hash) + MODIFIER_FIELD_NUMBER;
        hash = (53 * hash) + modifier_.hashCode();
      }
      if (hasIsEs6Arrow()) {
        hash = (37 * hash) + IS_ES6_ARROW_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getIsEs6Arrow());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Function}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Function)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getParameterFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
        } else {
          parameter_ = null;
          parameterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        local_ = false;
        modifier_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        isEs6Arrow_ = false;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function result) {
        if (parameterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            parameter_ = java.util.Collections.unmodifiableList(parameter_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.parameter_ = parameter_;
        } else {
          result.parameter_ = parameterBuilder_.build();
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          modifier_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.modifier_ = modifier_;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.body_ = bodyBuilder_ == null
              ? body_
              : bodyBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.local_ = local_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.isEs6Arrow_ = isEs6Arrow_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance()) return this;
        if (parameterBuilder_ == null) {
          if (!other.parameter_.isEmpty()) {
            if (parameter_.isEmpty()) {
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureParameterIsMutable();
              parameter_.addAll(other.parameter_);
            }
            onChanged();
          }
        } else {
          if (!other.parameter_.isEmpty()) {
            if (parameterBuilder_.isEmpty()) {
              parameterBuilder_.dispose();
              parameterBuilder_ = null;
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000001);
              parameterBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getParameterFieldBuilder() : null;
            } else {
              parameterBuilder_.addAllMessages(other.parameter_);
            }
          }
        }
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        if (other.hasLocal()) {
          setLocal(other.getLocal());
        }
        if (!other.modifier_.isEmpty()) {
          if (modifier_.isEmpty()) {
            modifier_ = other.modifier_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureModifierIsMutable();
            modifier_.addAll(other.modifier_);
          }
          onChanged();
        }
        if (other.hasIsEs6Arrow()) {
          setIsEs6Arrow(other.getIsEs6Arrow());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasBody()) {
          return false;
        }
        for (int i = 0; i < getParameterCount(); i++) {
          if (!getParameter(i).isInitialized()) {
            return false;
          }
        }
        if (!getBody().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.parser(),
                        extensionRegistry);
                if (parameterBuilder_ == null) {
                  ensureParameterIsMutable();
                  parameter_.add(m);
                } else {
                  parameterBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getBodyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                local_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  ensureModifierIsMutable();
                  modifier_.addInt(tmpRaw);
                }
                break;
              } // case 40
              case 42: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier tmpValue =
                      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(5, tmpRaw);
                  } else {
                    ensureModifierIsMutable();
                    modifier_.addInt(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 42
              case 48: {
                isEs6Arrow_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> parameter_ =
        java.util.Collections.emptyList();
      private void ensureParameterIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          parameter_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter>(parameter_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> parameterBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> getParameterList() {
        if (parameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(parameter_);
        } else {
          return parameterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public int getParameterCount() {
        if (parameterBuilder_ == null) {
          return parameter_.size();
        } else {
          return parameterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter(int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);
        } else {
          return parameterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder setParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.set(index, value);
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder setParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(index, value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addParameter(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder addAllParameter(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter> values) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, parameter_);
          onChanged();
        } else {
          parameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder clearParameter() {
        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          parameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public Builder removeParameter(int index) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.remove(index);
          onChanged();
        } else {
          parameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder getParameterBuilder(
          int index) {
        return getParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder getParameterOrBuilder(
          int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);  } else {
          return parameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> 
           getParameterOrBuilderList() {
        if (parameterBuilder_ != null) {
          return parameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(parameter_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder addParameterBuilder() {
        return getParameterFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder addParameterBuilder(
          int index) {
        return getParameterFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder> 
           getParameterBuilderList() {
        return getParameterFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> 
          getParameterFieldBuilder() {
        if (parameterBuilder_ == null) {
          parameterBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder>(
                  parameter_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          parameter_ = null;
        }
        return parameterBuilder_;
      }

      private int nameId_ ;
      /**
       * <code>int32 name_id = 2;</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 name_id = 2;</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 2;</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> bodyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       * @return The body.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            body_ != null &&
            body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getBodyBuilder().mergeFrom(value);
          } else {
            body_ = value;
          }
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        if (body_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public Builder clearBody() {
        bitField0_ = (bitField0_ & ~0x00000004);
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 3 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private boolean local_ ;
      /**
       * <code>bool local = 4 [default = false];</code>
       * @return Whether the local field is set.
       */
      @java.lang.Override
      public boolean hasLocal() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>bool local = 4 [default = false];</code>
       * @return The local.
       */
      @java.lang.Override
      public boolean getLocal() {
        return local_;
      }
      /**
       * <code>bool local = 4 [default = false];</code>
       * @param value The local to set.
       * @return This builder for chaining.
       */
      public Builder setLocal(boolean value) {

        local_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>bool local = 4 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearLocal() {
        bitField0_ = (bitField0_ & ~0x00000008);
        local_ = false;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList modifier_ =
        emptyIntList();
      private void ensureModifierIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          modifier_ = makeMutableCopy(modifier_);
          bitField0_ |= 0x00000010;
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @return A list containing the modifier.
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> getModifierList() {
        return new org.jetbrains.kotlin.protobuf.Internal.IntListAdapter<
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier>(modifier_, modifier_converter_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @return The count of modifier.
       */
      public int getModifierCount() {
        return modifier_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param index The index of the element to return.
       * @return The modifier at the given index.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier getModifier(int index) {
        return modifier_converter_.convert(modifier_.getInt(index));
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param index The index to set the value at.
       * @param value The modifier to set.
       * @return This builder for chaining.
       */
      public Builder setModifier(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifierIsMutable();
        modifier_.setInt(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param value The modifier to add.
       * @return This builder for chaining.
       */
      public Builder addModifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifierIsMutable();
        modifier_.addInt(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @param values The modifier to add.
       * @return This builder for chaining.
       */
      public Builder addAllModifier(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier> values) {
        ensureModifierIsMutable();
        for (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Modifier value : values) {
          modifier_.addInt(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function.Modifier modifier = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearModifier() {
        modifier_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private boolean isEs6Arrow_ ;
      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @return Whether the isEs6Arrow field is set.
       */
      @java.lang.Override
      public boolean hasIsEs6Arrow() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @return The isEs6Arrow.
       */
      @java.lang.Override
      public boolean getIsEs6Arrow() {
        return isEs6Arrow_;
      }
      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @param value The isEs6Arrow to set.
       * @return This builder for chaining.
       */
      public Builder setIsEs6Arrow(boolean value) {

        isEs6Arrow_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>bool is_es6_arrow = 6 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsEs6Arrow() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isEs6Arrow_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Function)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Function)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Function>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Function>() {
      @java.lang.Override
      public Function parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Function> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Function> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Class)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name_id = 1;</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1;</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     * @return Whether the superExpression field is set.
     */
    boolean hasSuperExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     * @return The superExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getSuperExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getSuperExpressionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     * @return Whether the constructor field is set.
     */
    boolean hasConstructor();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     * @return The constructor.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getConstructor();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getConstructorOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> 
        getMemberList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getMember(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    int getMemberCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> 
        getMemberOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getMemberOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Class}
   */
  public static final class Class extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Class)
      ClassOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Class.class.getName());
    }
    // Use Class.newBuilder() to construct.
    private Class(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Class() {
      member_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 1;</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1;</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int SUPER_EXPRESSION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression superExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     * @return Whether the superExpression field is set.
     */
    @java.lang.Override
    public boolean hasSuperExpression() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     * @return The superExpression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getSuperExpression() {
      return superExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : superExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getSuperExpressionOrBuilder() {
      return superExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : superExpression_;
    }

    public static final int CONSTRUCTOR_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function constructor_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     * @return Whether the constructor field is set.
     */
    @java.lang.Override
    public boolean hasConstructor() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     * @return The constructor.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getConstructor() {
      return constructor_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance() : constructor_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getConstructorOrBuilder() {
      return constructor_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance() : constructor_;
    }

    public static final int MEMBER_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> member_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> getMemberList() {
      return member_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> 
        getMemberOrBuilderList() {
      return member_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public int getMemberCount() {
      return member_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getMember(int index) {
      return member_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getMemberOrBuilder(
        int index) {
      return member_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasSuperExpression()) {
        if (!getSuperExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasConstructor()) {
        if (!getConstructor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMemberCount(); i++) {
        if (!getMember(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getSuperExpression());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getConstructor());
      }
      for (int i = 0; i < member_.size(); i++) {
        output.writeMessage(4, member_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getSuperExpression());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getConstructor());
      }
      for (int i = 0; i < member_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, member_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (hasSuperExpression() != other.hasSuperExpression()) return false;
      if (hasSuperExpression()) {
        if (!getSuperExpression()
            .equals(other.getSuperExpression())) return false;
      }
      if (hasConstructor() != other.hasConstructor()) return false;
      if (hasConstructor()) {
        if (!getConstructor()
            .equals(other.getConstructor())) return false;
      }
      if (!getMemberList()
          .equals(other.getMemberList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (hasSuperExpression()) {
        hash = (37 * hash) + SUPER_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getSuperExpression().hashCode();
      }
      if (hasConstructor()) {
        hash = (37 * hash) + CONSTRUCTOR_FIELD_NUMBER;
        hash = (53 * hash) + getConstructor().hashCode();
      }
      if (getMemberCount() > 0) {
        hash = (37 * hash) + MEMBER_FIELD_NUMBER;
        hash = (53 * hash) + getMemberList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Class}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Class)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getSuperExpressionFieldBuilder();
          getConstructorFieldBuilder();
          getMemberFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        superExpression_ = null;
        if (superExpressionBuilder_ != null) {
          superExpressionBuilder_.dispose();
          superExpressionBuilder_ = null;
        }
        constructor_ = null;
        if (constructorBuilder_ != null) {
          constructorBuilder_.dispose();
          constructorBuilder_ = null;
        }
        if (memberBuilder_ == null) {
          member_ = java.util.Collections.emptyList();
        } else {
          member_ = null;
          memberBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class result) {
        if (memberBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            member_ = java.util.Collections.unmodifiableList(member_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.member_ = member_;
        } else {
          result.member_ = memberBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.superExpression_ = superExpressionBuilder_ == null
              ? superExpression_
              : superExpressionBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.constructor_ = constructorBuilder_ == null
              ? constructor_
              : constructorBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (other.hasSuperExpression()) {
          mergeSuperExpression(other.getSuperExpression());
        }
        if (other.hasConstructor()) {
          mergeConstructor(other.getConstructor());
        }
        if (memberBuilder_ == null) {
          if (!other.member_.isEmpty()) {
            if (member_.isEmpty()) {
              member_ = other.member_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMemberIsMutable();
              member_.addAll(other.member_);
            }
            onChanged();
          }
        } else {
          if (!other.member_.isEmpty()) {
            if (memberBuilder_.isEmpty()) {
              memberBuilder_.dispose();
              memberBuilder_ = null;
              member_ = other.member_;
              bitField0_ = (bitField0_ & ~0x00000008);
              memberBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMemberFieldBuilder() : null;
            } else {
              memberBuilder_.addAllMessages(other.member_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasSuperExpression()) {
          if (!getSuperExpression().isInitialized()) {
            return false;
          }
        }
        if (hasConstructor()) {
          if (!getConstructor().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getMemberCount(); i++) {
          if (!getMember(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getSuperExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getConstructorFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.parser(),
                        extensionRegistry);
                if (memberBuilder_ == null) {
                  ensureMemberIsMutable();
                  member_.add(m);
                } else {
                  memberBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 name_id = 1;</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1;</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1;</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression superExpression_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> superExpressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       * @return Whether the superExpression field is set.
       */
      public boolean hasSuperExpression() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       * @return The superExpression.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getSuperExpression() {
        if (superExpressionBuilder_ == null) {
          return superExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : superExpression_;
        } else {
          return superExpressionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder setSuperExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (superExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          superExpression_ = value;
        } else {
          superExpressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder setSuperExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (superExpressionBuilder_ == null) {
          superExpression_ = builderForValue.build();
        } else {
          superExpressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder mergeSuperExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (superExpressionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            superExpression_ != null &&
            superExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getSuperExpressionBuilder().mergeFrom(value);
          } else {
            superExpression_ = value;
          }
        } else {
          superExpressionBuilder_.mergeFrom(value);
        }
        if (superExpression_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public Builder clearSuperExpression() {
        bitField0_ = (bitField0_ & ~0x00000002);
        superExpression_ = null;
        if (superExpressionBuilder_ != null) {
          superExpressionBuilder_.dispose();
          superExpressionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getSuperExpressionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getSuperExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getSuperExpressionOrBuilder() {
        if (superExpressionBuilder_ != null) {
          return superExpressionBuilder_.getMessageOrBuilder();
        } else {
          return superExpression_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : superExpression_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression super_expression = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getSuperExpressionFieldBuilder() {
        if (superExpressionBuilder_ == null) {
          superExpressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getSuperExpression(),
                  getParentForChildren(),
                  isClean());
          superExpression_ = null;
        }
        return superExpressionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function constructor_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> constructorBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       * @return Whether the constructor field is set.
       */
      public boolean hasConstructor() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       * @return The constructor.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getConstructor() {
        if (constructorBuilder_ == null) {
          return constructor_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance() : constructor_;
        } else {
          return constructorBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder setConstructor(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        if (constructorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          constructor_ = value;
        } else {
          constructorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder setConstructor(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        if (constructorBuilder_ == null) {
          constructor_ = builderForValue.build();
        } else {
          constructorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder mergeConstructor(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        if (constructorBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            constructor_ != null &&
            constructor_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance()) {
            getConstructorBuilder().mergeFrom(value);
          } else {
            constructor_ = value;
          }
        } else {
          constructorBuilder_.mergeFrom(value);
        }
        if (constructor_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public Builder clearConstructor() {
        bitField0_ = (bitField0_ & ~0x00000004);
        constructor_ = null;
        if (constructorBuilder_ != null) {
          constructorBuilder_.dispose();
          constructorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder getConstructorBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getConstructorFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getConstructorOrBuilder() {
        if (constructorBuilder_ != null) {
          return constructorBuilder_.getMessageOrBuilder();
        } else {
          return constructor_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance() : constructor_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Function constructor = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> 
          getConstructorFieldBuilder() {
        if (constructorBuilder_ == null) {
          constructorBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder>(
                  getConstructor(),
                  getParentForChildren(),
                  isClean());
          constructor_ = null;
        }
        return constructorBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> member_ =
        java.util.Collections.emptyList();
      private void ensureMemberIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          member_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function>(member_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> memberBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> getMemberList() {
        if (memberBuilder_ == null) {
          return java.util.Collections.unmodifiableList(member_);
        } else {
          return memberBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public int getMemberCount() {
        if (memberBuilder_ == null) {
          return member_.size();
        } else {
          return memberBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function getMember(int index) {
        if (memberBuilder_ == null) {
          return member_.get(index);
        } else {
          return memberBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder setMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        if (memberBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemberIsMutable();
          member_.set(index, value);
          onChanged();
        } else {
          memberBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder setMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        if (memberBuilder_ == null) {
          ensureMemberIsMutable();
          member_.set(index, builderForValue.build());
          onChanged();
        } else {
          memberBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        if (memberBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemberIsMutable();
          member_.add(value);
          onChanged();
        } else {
          memberBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function value) {
        if (memberBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemberIsMutable();
          member_.add(index, value);
          onChanged();
        } else {
          memberBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        if (memberBuilder_ == null) {
          ensureMemberIsMutable();
          member_.add(builderForValue.build());
          onChanged();
        } else {
          memberBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addMember(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder builderForValue) {
        if (memberBuilder_ == null) {
          ensureMemberIsMutable();
          member_.add(index, builderForValue.build());
          onChanged();
        } else {
          memberBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder addAllMember(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function> values) {
        if (memberBuilder_ == null) {
          ensureMemberIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, member_);
          onChanged();
        } else {
          memberBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder clearMember() {
        if (memberBuilder_ == null) {
          member_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          memberBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public Builder removeMember(int index) {
        if (memberBuilder_ == null) {
          ensureMemberIsMutable();
          member_.remove(index);
          onChanged();
        } else {
          memberBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder getMemberBuilder(
          int index) {
        return getMemberFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder getMemberOrBuilder(
          int index) {
        if (memberBuilder_ == null) {
          return member_.get(index);  } else {
          return memberBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> 
           getMemberOrBuilderList() {
        if (memberBuilder_ != null) {
          return memberBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(member_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder addMemberBuilder() {
        return getMemberFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder addMemberBuilder(
          int index) {
        return getMemberFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Function member = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder> 
           getMemberBuilderList() {
        return getMemberFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder> 
          getMemberFieldBuilder() {
        if (memberBuilder_ == null) {
          memberBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Function.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FunctionOrBuilder>(
                  member_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          member_ = null;
        }
        return memberBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Class)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Class)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Class>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Class>() {
      @java.lang.Override
      public Class parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Class> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Class> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Class getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Parameter)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return Whether the hasDefaultValue field is set.
     */
    boolean hasHasDefaultValue();
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return The hasDefaultValue.
     */
    boolean getHasDefaultValue();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Parameter}
   */
  public static final class Parameter extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Parameter)
      ParameterOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Parameter.class.getName());
    }
    // Use Parameter.newBuilder() to construct.
    private Parameter(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Parameter() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int HAS_DEFAULT_VALUE_FIELD_NUMBER = 2;
    private boolean hasDefaultValue_ = false;
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return Whether the hasDefaultValue field is set.
     */
    @java.lang.Override
    public boolean hasHasDefaultValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>bool has_default_value = 2 [default = false];</code>
     * @return The hasDefaultValue.
     */
    @java.lang.Override
    public boolean getHasDefaultValue() {
      return hasDefaultValue_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, hasDefaultValue_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(2, hasDefaultValue_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (hasHasDefaultValue() != other.hasHasDefaultValue()) return false;
      if (hasHasDefaultValue()) {
        if (getHasDefaultValue()
            != other.getHasDefaultValue()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (hasHasDefaultValue()) {
        hash = (37 * hash) + HAS_DEFAULT_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getHasDefaultValue());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Parameter}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Parameter)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        hasDefaultValue_ = false;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.hasDefaultValue_ = hasDefaultValue_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (other.hasHasDefaultValue()) {
          setHasDefaultValue(other.getHasDefaultValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNameId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                hasDefaultValue_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private boolean hasDefaultValue_ ;
      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @return Whether the hasDefaultValue field is set.
       */
      @java.lang.Override
      public boolean hasHasDefaultValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @return The hasDefaultValue.
       */
      @java.lang.Override
      public boolean getHasDefaultValue() {
        return hasDefaultValue_;
      }
      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @param value The hasDefaultValue to set.
       * @return This builder for chaining.
       */
      public Builder setHasDefaultValue(boolean value) {

        hasDefaultValue_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bool has_default_value = 2 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearHasDefaultValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        hasDefaultValue_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Parameter)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Parameter)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Parameter>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Parameter>() {
      @java.lang.Override
      public Parameter parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Parameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Parameter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DocCommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.DocComment)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> 
        getTagList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getTag(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    int getTagCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder> 
        getTagOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder getTagOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocComment}
   */
  public static final class DocComment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.DocComment)
      DocCommentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        DocComment.class.getName());
    }
    // Use DocComment.newBuilder() to construct.
    private DocComment(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private DocComment() {
      tag_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder.class);
    }

    public static final int TAG_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> tag_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> getTagList() {
      return tag_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder> 
        getTagOrBuilderList() {
      return tag_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public int getTagCount() {
      return tag_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getTag(int index) {
      return tag_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder getTagOrBuilder(
        int index) {
      return tag_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTagCount(); i++) {
        if (!getTag(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < tag_.size(); i++) {
        output.writeMessage(1, tag_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < tag_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, tag_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) obj;

      if (!getTagList()
          .equals(other.getTagList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getTagCount() > 0) {
        hash = (37 * hash) + TAG_FIELD_NUMBER;
        hash = (53 * hash) + getTagList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocComment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.DocComment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (tagBuilder_ == null) {
          tag_ = java.util.Collections.emptyList();
        } else {
          tag_ = null;
          tagBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment result) {
        if (tagBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            tag_ = java.util.Collections.unmodifiableList(tag_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.tag_ = tag_;
        } else {
          result.tag_ = tagBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment.getDefaultInstance()) return this;
        if (tagBuilder_ == null) {
          if (!other.tag_.isEmpty()) {
            if (tag_.isEmpty()) {
              tag_ = other.tag_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTagIsMutable();
              tag_.addAll(other.tag_);
            }
            onChanged();
          }
        } else {
          if (!other.tag_.isEmpty()) {
            if (tagBuilder_.isEmpty()) {
              tagBuilder_.dispose();
              tagBuilder_ = null;
              tag_ = other.tag_;
              bitField0_ = (bitField0_ & ~0x00000001);
              tagBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTagFieldBuilder() : null;
            } else {
              tagBuilder_.addAllMessages(other.tag_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getTagCount(); i++) {
          if (!getTag(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.parser(),
                        extensionRegistry);
                if (tagBuilder_ == null) {
                  ensureTagIsMutable();
                  tag_.add(m);
                } else {
                  tagBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> tag_ =
        java.util.Collections.emptyList();
      private void ensureTagIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          tag_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag>(tag_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder> tagBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> getTagList() {
        if (tagBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tag_);
        } else {
          return tagBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public int getTagCount() {
        if (tagBuilder_ == null) {
          return tag_.size();
        } else {
          return tagBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getTag(int index) {
        if (tagBuilder_ == null) {
          return tag_.get(index);
        } else {
          return tagBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder setTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
        if (tagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTagIsMutable();
          tag_.set(index, value);
          onChanged();
        } else {
          tagBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder setTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder builderForValue) {
        if (tagBuilder_ == null) {
          ensureTagIsMutable();
          tag_.set(index, builderForValue.build());
          onChanged();
        } else {
          tagBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
        if (tagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTagIsMutable();
          tag_.add(value);
          onChanged();
        } else {
          tagBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag value) {
        if (tagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTagIsMutable();
          tag_.add(index, value);
          onChanged();
        } else {
          tagBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder builderForValue) {
        if (tagBuilder_ == null) {
          ensureTagIsMutable();
          tag_.add(builderForValue.build());
          onChanged();
        } else {
          tagBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addTag(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder builderForValue) {
        if (tagBuilder_ == null) {
          ensureTagIsMutable();
          tag_.add(index, builderForValue.build());
          onChanged();
        } else {
          tagBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder addAllTag(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag> values) {
        if (tagBuilder_ == null) {
          ensureTagIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, tag_);
          onChanged();
        } else {
          tagBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder clearTag() {
        if (tagBuilder_ == null) {
          tag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          tagBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public Builder removeTag(int index) {
        if (tagBuilder_ == null) {
          ensureTagIsMutable();
          tag_.remove(index);
          onChanged();
        } else {
          tagBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder getTagBuilder(
          int index) {
        return getTagFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder getTagOrBuilder(
          int index) {
        if (tagBuilder_ == null) {
          return tag_.get(index);  } else {
          return tagBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder> 
           getTagOrBuilderList() {
        if (tagBuilder_ != null) {
          return tagBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tag_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder addTagBuilder() {
        return getTagFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder addTagBuilder(
          int index) {
        return getTagFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.DocCommentTag tag = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder> 
           getTagBuilderList() {
        return getTagFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder> 
          getTagFieldBuilder() {
        if (tagBuilder_ == null) {
          tagBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder>(
                  tag_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          tag_ = null;
        }
        return tagBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.DocComment)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.DocComment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<DocComment>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<DocComment>() {
      @java.lang.Override
      public DocComment parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<DocComment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<DocComment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocComment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DocCommentTagOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>int32 value_string_id = 2;</code>
     * @return Whether the valueStringId field is set.
     */
    boolean hasValueStringId();
    /**
     * <code>int32 value_string_id = 2;</code>
     * @return The valueStringId.
     */
    int getValueStringId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder();

    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.ValueCase getValueCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocCommentTag}
   */
  public static final class DocCommentTag extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
      DocCommentTagOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        DocCommentTag.class.getName());
    }
    // Use DocCommentTag.newBuilder() to construct.
    private DocCommentTag(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private DocCommentTag() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder.class);
    }

    private int bitField0_;
    private int valueCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object value_;
    public enum ValueCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
            org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
      VALUE_STRING_ID(2),
      EXPRESSION(3),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 2: return VALUE_STRING_ID;
          case 3: return EXPRESSION;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int VALUE_STRING_ID_FIELD_NUMBER = 2;
    /**
     * <code>int32 value_string_id = 2;</code>
     * @return Whether the valueStringId field is set.
     */
    @java.lang.Override
    public boolean hasValueStringId() {
      return valueCase_ == 2;
    }
    /**
     * <code>int32 value_string_id = 2;</code>
     * @return The valueStringId.
     */
    @java.lang.Override
    public int getValueStringId() {
      if (valueCase_ == 2) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int EXPRESSION_FIELD_NUMBER = 3;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return valueCase_ == 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      if (valueCase_ == 3) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
      if (valueCase_ == 3) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      if (valueCase_ == 2) {
        output.writeInt32(
            2, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 3) {
        output.writeMessage(3, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      if (valueCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              2, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 3) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (!getValueCase().equals(other.getValueCase())) return false;
      switch (valueCase_) {
        case 2:
          if (getValueStringId()
              != other.getValueStringId()) return false;
          break;
        case 3:
          if (!getExpression()
              .equals(other.getExpression())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      switch (valueCase_) {
        case 2:
          hash = (37 * hash) + VALUE_STRING_ID_FIELD_NUMBER;
          hash = (53 * hash) + getValueStringId();
          break;
        case 3:
          hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
          hash = (53 * hash) + getExpression().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DocCommentTag}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTagOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        if (expressionBuilder_ != null) {
          expressionBuilder_.clear();
        }
        valueCase_ = 0;
        value_ = null;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag result) {
        result.valueCase_ = valueCase_;
        result.value_ = this.value_;
        if (valueCase_ == 3 &&
            expressionBuilder_ != null) {
          result.value_ = expressionBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        switch (other.getValueCase()) {
          case VALUE_STRING_ID: {
            setValueStringId(other.getValueStringId());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNameId()) {
          return false;
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                value_ = input.readInt32();
                valueCase_ = 2;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                valueCase_ = 3;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      /**
       * <code>int32 value_string_id = 2;</code>
       * @return Whether the valueStringId field is set.
       */
      public boolean hasValueStringId() {
        return valueCase_ == 2;
      }
      /**
       * <code>int32 value_string_id = 2;</code>
       * @return The valueStringId.
       */
      public int getValueStringId() {
        if (valueCase_ == 2) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>int32 value_string_id = 2;</code>
       * @param value The valueStringId to set.
       * @return This builder for chaining.
       */
      public Builder setValueStringId(int value) {

        valueCase_ = 2;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 value_string_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValueStringId() {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       * @return Whether the expression field is set.
       */
      @java.lang.Override
      public boolean hasExpression() {
        return valueCase_ == 3;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       * @return The expression.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        if (expressionBuilder_ == null) {
          if (valueCase_ == 3) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        } else {
          if (valueCase_ == 3) {
            return expressionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        valueCase_ = 3;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        valueCase_ = 3;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (valueCase_ == 3 &&
              value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            value_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_)
                .mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          if (valueCase_ == 3) {
            expressionBuilder_.mergeFrom(value);
          } else {
            expressionBuilder_.setMessage(value);
          }
        }
        valueCase_ = 3;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          if (valueCase_ == 3) {
            valueCase_ = 0;
            value_ = null;
            onChanged();
          }
        } else {
          if (valueCase_ == 3) {
            valueCase_ = 0;
            value_ = null;
          }
          expressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getExpressionBuilder() {
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
        if ((valueCase_ == 3) && (expressionBuilder_ != null)) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          if (valueCase_ == 3) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          if (!(valueCase_ == 3)) {
            value_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
          }
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_,
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        valueCase_ = 3;
        onChanged();
        return expressionBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.DocCommentTag)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<DocCommentTag>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<DocCommentTag>() {
      @java.lang.Override
      public DocCommentTag parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<DocCommentTag> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<DocCommentTag> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DocCommentTag getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Comment)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return Whether the text field is set.
     */
    boolean hasText();
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The text.
     */
    java.lang.String getText();
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The bytes for text.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getTextBytes();

    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return Whether the multiline field is set.
     */
    boolean hasMultiline();
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return The multiline.
     */
    boolean getMultiline();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Comment}
   */
  public static final class Comment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Comment)
      CommentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Comment.class.getName());
    }
    // Use Comment.newBuilder() to construct.
    private Comment(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Comment() {
      text_ = "";
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder.class);
    }

    private int bitField0_;
    public static final int TEXT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object text_ = "";
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          text_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string text = 1 [features = { ... }</code>
     * @return The bytes for text.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        text_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int MULTILINE_FIELD_NUMBER = 2;
    private boolean multiline_ = false;
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return Whether the multiline field is set.
     */
    @java.lang.Override
    public boolean hasMultiline() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>bool multiline = 2 [features = { ... }</code>
     * @return The multiline.
     */
    @java.lang.Override
    public boolean getMultiline() {
      return multiline_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasText()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMultiline()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 1, text_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, multiline_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(1, text_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(2, multiline_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment) obj;

      if (hasText() != other.hasText()) return false;
      if (hasText()) {
        if (!getText()
            .equals(other.getText())) return false;
      }
      if (hasMultiline() != other.hasMultiline()) return false;
      if (hasMultiline()) {
        if (getMultiline()
            != other.getMultiline()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasText()) {
        hash = (37 * hash) + TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getText().hashCode();
      }
      if (hasMultiline()) {
        hash = (37 * hash) + MULTILINE_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getMultiline());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Comment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Comment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        text_ = "";
        multiline_ = false;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.text_ = text_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.multiline_ = multiline_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance()) return this;
        if (other.hasText()) {
          text_ = other.text_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasMultiline()) {
          setMultiline(other.getMultiline());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasText()) {
          return false;
        }
        if (!hasMultiline()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                text_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                multiline_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object text_ = "";
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return Whether the text field is set.
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return The text.
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            text_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return The bytes for text.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @param value The text to set.
       * @return This builder for chaining.
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        text_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearText() {
        text_ = getDefaultInstance().getText();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>string text = 1 [features = { ... }</code>
       * @param value The bytes for text to set.
       * @return This builder for chaining.
       */
      public Builder setTextBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        text_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private boolean multiline_ ;
      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @return Whether the multiline field is set.
       */
      @java.lang.Override
      public boolean hasMultiline() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @return The multiline.
       */
      @java.lang.Override
      public boolean getMultiline() {
        return multiline_;
      }
      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @param value The multiline to set.
       * @return This builder for chaining.
       */
      public Builder setMultiline(boolean value) {

        multiline_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bool multiline = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMultiline() {
        bitField0_ = (bitField0_ & ~0x00000002);
        multiline_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Comment)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Comment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Comment>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Comment>() {
      @java.lang.Override
      public Comment parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Comment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Comment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BinaryOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     * @return Whether the left field is set.
     */
    boolean hasLeft();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     * @return The left.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLeft();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getLeftOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     * @return Whether the right field is set.
     */
    boolean hasRight();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     * @return The right.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getRight();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getRightOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return The type.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type getType();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.BinaryOperation}
   */
  public static final class BinaryOperation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
      BinaryOperationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        BinaryOperation.class.getName());
    }
    // Use BinaryOperation.newBuilder() to construct.
    private BinaryOperation(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private BinaryOperation() {
      type_ = 1;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder.class);
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type}
     */
    public enum Type
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>MUL = 1;</code>
       */
      MUL(1),
      /**
       * <code>DIV = 2;</code>
       */
      DIV(2),
      /**
       * <code>MOD = 3;</code>
       */
      MOD(3),
      /**
       * <code>ADD = 4;</code>
       */
      ADD(4),
      /**
       * <code>SUB = 5;</code>
       */
      SUB(5),
      /**
       * <code>SHL = 6;</code>
       */
      SHL(6),
      /**
       * <code>SHR = 7;</code>
       */
      SHR(7),
      /**
       * <code>SHRU = 8;</code>
       */
      SHRU(8),
      /**
       * <code>LT = 9;</code>
       */
      LT(9),
      /**
       * <code>LTE = 10;</code>
       */
      LTE(10),
      /**
       * <code>GT = 11;</code>
       */
      GT(11),
      /**
       * <code>GTE = 12;</code>
       */
      GTE(12),
      /**
       * <code>INSTANCEOF = 13;</code>
       */
      INSTANCEOF(13),
      /**
       * <code>IN = 14;</code>
       */
      IN(14),
      /**
       * <code>EQ = 15;</code>
       */
      EQ(15),
      /**
       * <code>NEQ = 16;</code>
       */
      NEQ(16),
      /**
       * <code>REF_EQ = 17;</code>
       */
      REF_EQ(17),
      /**
       * <code>REF_NEQ = 18;</code>
       */
      REF_NEQ(18),
      /**
       * <code>BIT_AND = 19;</code>
       */
      BIT_AND(19),
      /**
       * <code>BIT_XOR = 20;</code>
       */
      BIT_XOR(20),
      /**
       * <code>BIT_OR = 21;</code>
       */
      BIT_OR(21),
      /**
       * <code>AND = 22;</code>
       */
      AND(22),
      /**
       * <code>OR = 23;</code>
       */
      OR(23),
      /**
       * <code>ASG = 24;</code>
       */
      ASG(24),
      /**
       * <code>ASG_ADD = 25;</code>
       */
      ASG_ADD(25),
      /**
       * <code>ASG_SUB = 26;</code>
       */
      ASG_SUB(26),
      /**
       * <code>ASG_MUL = 27;</code>
       */
      ASG_MUL(27),
      /**
       * <code>ASG_DIV = 28;</code>
       */
      ASG_DIV(28),
      /**
       * <code>ASG_MOD = 29;</code>
       */
      ASG_MOD(29),
      /**
       * <code>ASG_SHL = 30;</code>
       */
      ASG_SHL(30),
      /**
       * <code>ASG_SHR = 31;</code>
       */
      ASG_SHR(31),
      /**
       * <code>ASG_SHRU = 32;</code>
       */
      ASG_SHRU(32),
      /**
       * <code>ASG_BIT_AND = 33;</code>
       */
      ASG_BIT_AND(33),
      /**
       * <code>ASG_BIT_OR = 34;</code>
       */
      ASG_BIT_OR(34),
      /**
       * <code>ASG_BIT_XOR = 35;</code>
       */
      ASG_BIT_XOR(35),
      /**
       * <code>COMMA = 36;</code>
       */
      COMMA(36),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Type.class.getName());
      }
      /**
       * <code>MUL = 1;</code>
       */
      public static final int MUL_VALUE = 1;
      /**
       * <code>DIV = 2;</code>
       */
      public static final int DIV_VALUE = 2;
      /**
       * <code>MOD = 3;</code>
       */
      public static final int MOD_VALUE = 3;
      /**
       * <code>ADD = 4;</code>
       */
      public static final int ADD_VALUE = 4;
      /**
       * <code>SUB = 5;</code>
       */
      public static final int SUB_VALUE = 5;
      /**
       * <code>SHL = 6;</code>
       */
      public static final int SHL_VALUE = 6;
      /**
       * <code>SHR = 7;</code>
       */
      public static final int SHR_VALUE = 7;
      /**
       * <code>SHRU = 8;</code>
       */
      public static final int SHRU_VALUE = 8;
      /**
       * <code>LT = 9;</code>
       */
      public static final int LT_VALUE = 9;
      /**
       * <code>LTE = 10;</code>
       */
      public static final int LTE_VALUE = 10;
      /**
       * <code>GT = 11;</code>
       */
      public static final int GT_VALUE = 11;
      /**
       * <code>GTE = 12;</code>
       */
      public static final int GTE_VALUE = 12;
      /**
       * <code>INSTANCEOF = 13;</code>
       */
      public static final int INSTANCEOF_VALUE = 13;
      /**
       * <code>IN = 14;</code>
       */
      public static final int IN_VALUE = 14;
      /**
       * <code>EQ = 15;</code>
       */
      public static final int EQ_VALUE = 15;
      /**
       * <code>NEQ = 16;</code>
       */
      public static final int NEQ_VALUE = 16;
      /**
       * <code>REF_EQ = 17;</code>
       */
      public static final int REF_EQ_VALUE = 17;
      /**
       * <code>REF_NEQ = 18;</code>
       */
      public static final int REF_NEQ_VALUE = 18;
      /**
       * <code>BIT_AND = 19;</code>
       */
      public static final int BIT_AND_VALUE = 19;
      /**
       * <code>BIT_XOR = 20;</code>
       */
      public static final int BIT_XOR_VALUE = 20;
      /**
       * <code>BIT_OR = 21;</code>
       */
      public static final int BIT_OR_VALUE = 21;
      /**
       * <code>AND = 22;</code>
       */
      public static final int AND_VALUE = 22;
      /**
       * <code>OR = 23;</code>
       */
      public static final int OR_VALUE = 23;
      /**
       * <code>ASG = 24;</code>
       */
      public static final int ASG_VALUE = 24;
      /**
       * <code>ASG_ADD = 25;</code>
       */
      public static final int ASG_ADD_VALUE = 25;
      /**
       * <code>ASG_SUB = 26;</code>
       */
      public static final int ASG_SUB_VALUE = 26;
      /**
       * <code>ASG_MUL = 27;</code>
       */
      public static final int ASG_MUL_VALUE = 27;
      /**
       * <code>ASG_DIV = 28;</code>
       */
      public static final int ASG_DIV_VALUE = 28;
      /**
       * <code>ASG_MOD = 29;</code>
       */
      public static final int ASG_MOD_VALUE = 29;
      /**
       * <code>ASG_SHL = 30;</code>
       */
      public static final int ASG_SHL_VALUE = 30;
      /**
       * <code>ASG_SHR = 31;</code>
       */
      public static final int ASG_SHR_VALUE = 31;
      /**
       * <code>ASG_SHRU = 32;</code>
       */
      public static final int ASG_SHRU_VALUE = 32;
      /**
       * <code>ASG_BIT_AND = 33;</code>
       */
      public static final int ASG_BIT_AND_VALUE = 33;
      /**
       * <code>ASG_BIT_OR = 34;</code>
       */
      public static final int ASG_BIT_OR_VALUE = 34;
      /**
       * <code>ASG_BIT_XOR = 35;</code>
       */
      public static final int ASG_BIT_XOR_VALUE = 35;
      /**
       * <code>COMMA = 36;</code>
       */
      public static final int COMMA_VALUE = 36;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 1: return MUL;
          case 2: return DIV;
          case 3: return MOD;
          case 4: return ADD;
          case 5: return SUB;
          case 6: return SHL;
          case 7: return SHR;
          case 8: return SHRU;
          case 9: return LT;
          case 10: return LTE;
          case 11: return GT;
          case 12: return GTE;
          case 13: return INSTANCEOF;
          case 14: return IN;
          case 15: return EQ;
          case 16: return NEQ;
          case 17: return REF_EQ;
          case 18: return REF_NEQ;
          case 19: return BIT_AND;
          case 20: return BIT_XOR;
          case 21: return BIT_OR;
          case 22: return AND;
          case 23: return OR;
          case 24: return ASG;
          case 25: return ASG_ADD;
          case 26: return ASG_SUB;
          case 27: return ASG_MUL;
          case 28: return ASG_DIV;
          case 29: return ASG_MOD;
          case 30: return ASG_SHL;
          case 31: return ASG_SHR;
          case 32: return ASG_SHRU;
          case 33: return ASG_BIT_AND;
          case 34: return ASG_BIT_OR;
          case 35: return ASG_BIT_XOR;
          case 36: return COMMA;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type)
    }

    private int bitField0_;
    public static final int LEFT_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression left_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     * @return Whether the left field is set.
     */
    @java.lang.Override
    public boolean hasLeft() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     * @return The left.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLeft() {
      return left_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : left_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getLeftOrBuilder() {
      return left_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : left_;
    }

    public static final int RIGHT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression right_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     * @return Whether the right field is set.
     */
    @java.lang.Override
    public boolean hasRight() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     * @return The right.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getRight() {
      return right_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : right_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getRightOrBuilder() {
      return right_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : right_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_ = 1;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
     * @return The type.
     */
    @java.lang.Override public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type getType() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.forNumber(type_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.MUL : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLeft()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getLeft().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRight().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getLeft());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getRight());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(3, type_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getLeft());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getRight());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, type_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) obj;

      if (hasLeft() != other.hasLeft()) return false;
      if (hasLeft()) {
        if (!getLeft()
            .equals(other.getLeft())) return false;
      }
      if (hasRight() != other.hasRight()) return false;
      if (hasRight()) {
        if (!getRight()
            .equals(other.getRight())) return false;
      }
      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (type_ != other.type_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLeft()) {
        hash = (37 * hash) + LEFT_FIELD_NUMBER;
        hash = (53 * hash) + getLeft().hashCode();
      }
      if (hasRight()) {
        hash = (37 * hash) + RIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getRight().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.BinaryOperation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getLeftFieldBuilder();
          getRightFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        left_ = null;
        if (leftBuilder_ != null) {
          leftBuilder_.dispose();
          leftBuilder_ = null;
        }
        right_ = null;
        if (rightBuilder_ != null) {
          rightBuilder_.dispose();
          rightBuilder_ = null;
        }
        type_ = 1;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.left_ = leftBuilder_ == null
              ? left_
              : leftBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.right_ = rightBuilder_ == null
              ? right_
              : rightBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.getDefaultInstance()) return this;
        if (other.hasLeft()) {
          mergeLeft(other.getLeft());
        }
        if (other.hasRight()) {
          mergeRight(other.getRight());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasLeft()) {
          return false;
        }
        if (!hasRight()) {
          return false;
        }
        if (!hasType()) {
          return false;
        }
        if (!getLeft().isInitialized()) {
          return false;
        }
        if (!getRight().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getLeftFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getRightFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  type_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression left_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> leftBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       * @return Whether the left field is set.
       */
      public boolean hasLeft() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       * @return The left.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLeft() {
        if (leftBuilder_ == null) {
          return left_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : left_;
        } else {
          return leftBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder setLeft(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (leftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          left_ = value;
        } else {
          leftBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder setLeft(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (leftBuilder_ == null) {
          left_ = builderForValue.build();
        } else {
          leftBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder mergeLeft(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (leftBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            left_ != null &&
            left_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getLeftBuilder().mergeFrom(value);
          } else {
            left_ = value;
          }
        } else {
          leftBuilder_.mergeFrom(value);
        }
        if (left_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public Builder clearLeft() {
        bitField0_ = (bitField0_ & ~0x00000001);
        left_ = null;
        if (leftBuilder_ != null) {
          leftBuilder_.dispose();
          leftBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getLeftBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLeftFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getLeftOrBuilder() {
        if (leftBuilder_ != null) {
          return leftBuilder_.getMessageOrBuilder();
        } else {
          return left_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : left_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression left = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getLeftFieldBuilder() {
        if (leftBuilder_ == null) {
          leftBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getLeft(),
                  getParentForChildren(),
                  isClean());
          left_ = null;
        }
        return leftBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression right_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> rightBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       * @return Whether the right field is set.
       */
      public boolean hasRight() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       * @return The right.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getRight() {
        if (rightBuilder_ == null) {
          return right_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : right_;
        } else {
          return rightBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder setRight(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (rightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          right_ = value;
        } else {
          rightBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder setRight(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (rightBuilder_ == null) {
          right_ = builderForValue.build();
        } else {
          rightBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder mergeRight(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (rightBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            right_ != null &&
            right_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getRightBuilder().mergeFrom(value);
          } else {
            right_ = value;
          }
        } else {
          rightBuilder_.mergeFrom(value);
        }
        if (right_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public Builder clearRight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        right_ = null;
        if (rightBuilder_ != null) {
          rightBuilder_.dispose();
          rightBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getRightBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getRightFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getRightOrBuilder() {
        if (rightBuilder_ != null) {
          return rightBuilder_.getMessageOrBuilder();
        } else {
          return right_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : right_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression right = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getRightFieldBuilder() {
        if (rightBuilder_ == null) {
          rightBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getRight(),
                  getParentForChildren(),
                  isClean());
          right_ = null;
        }
        return rightBuilder_;
      }

      private int type_ = 1;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override public boolean hasType() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type getType() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.forNumber(type_);
        return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type.MUL : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.BinaryOperation.Type type = 3 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.BinaryOperation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<BinaryOperation>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<BinaryOperation>() {
      @java.lang.Override
      public BinaryOperation parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<BinaryOperation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<BinaryOperation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BinaryOperation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnaryOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     * @return Whether the operand field is set.
     */
    boolean hasOperand();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     * @return The operand.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getOperand();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getOperandOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return The type.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type getType();

    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return Whether the postfix field is set.
     */
    boolean hasPostfix();
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return The postfix.
     */
    boolean getPostfix();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.UnaryOperation}
   */
  public static final class UnaryOperation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
      UnaryOperationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        UnaryOperation.class.getName());
    }
    // Use UnaryOperation.newBuilder() to construct.
    private UnaryOperation(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private UnaryOperation() {
      type_ = 1;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder.class);
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type}
     */
    public enum Type
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>BIT_NOT = 1;</code>
       */
      BIT_NOT(1),
      /**
       * <code>DEC = 2;</code>
       */
      DEC(2),
      /**
       * <code>DELETE = 3;</code>
       */
      DELETE(3),
      /**
       * <code>INC = 4;</code>
       */
      INC(4),
      /**
       * <code>NEG = 5;</code>
       */
      NEG(5),
      /**
       * <code>POS = 6;</code>
       */
      POS(6),
      /**
       * <code>NOT = 7;</code>
       */
      NOT(7),
      /**
       * <code>TYPEOF = 8;</code>
       */
      TYPEOF(8),
      /**
       * <code>VOID = 9;</code>
       */
      VOID(9),
      ;

      static {
        org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 29,
          /* patch= */ 3,
          /* suffix= */ "",
          Type.class.getName());
      }
      /**
       * <code>BIT_NOT = 1;</code>
       */
      public static final int BIT_NOT_VALUE = 1;
      /**
       * <code>DEC = 2;</code>
       */
      public static final int DEC_VALUE = 2;
      /**
       * <code>DELETE = 3;</code>
       */
      public static final int DELETE_VALUE = 3;
      /**
       * <code>INC = 4;</code>
       */
      public static final int INC_VALUE = 4;
      /**
       * <code>NEG = 5;</code>
       */
      public static final int NEG_VALUE = 5;
      /**
       * <code>POS = 6;</code>
       */
      public static final int POS_VALUE = 6;
      /**
       * <code>NOT = 7;</code>
       */
      public static final int NOT_VALUE = 7;
      /**
       * <code>TYPEOF = 8;</code>
       */
      public static final int TYPEOF_VALUE = 8;
      /**
       * <code>VOID = 9;</code>
       */
      public static final int VOID_VALUE = 9;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 1: return BIT_NOT;
          case 2: return DEC;
          case 3: return DELETE;
          case 4: return INC;
          case 5: return NEG;
          case 6: return POS;
          case 7: return NOT;
          case 8: return TYPEOF;
          case 9: return VOID;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type)
    }

    private int bitField0_;
    public static final int OPERAND_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression operand_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     * @return Whether the operand field is set.
     */
    @java.lang.Override
    public boolean hasOperand() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     * @return The operand.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getOperand() {
      return operand_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : operand_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getOperandOrBuilder() {
      return operand_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : operand_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_ = 1;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
     * @return The type.
     */
    @java.lang.Override public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type getType() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.forNumber(type_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.BIT_NOT : result;
    }

    public static final int POSTFIX_FIELD_NUMBER = 3;
    private boolean postfix_ = false;
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return Whether the postfix field is set.
     */
    @java.lang.Override
    public boolean hasPostfix() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool postfix = 3 [features = { ... }</code>
     * @return The postfix.
     */
    @java.lang.Override
    public boolean getPostfix() {
      return postfix_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasOperand()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPostfix()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getOperand().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getOperand());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, type_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, postfix_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getOperand());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, postfix_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) obj;

      if (hasOperand() != other.hasOperand()) return false;
      if (hasOperand()) {
        if (!getOperand()
            .equals(other.getOperand())) return false;
      }
      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (type_ != other.type_) return false;
      }
      if (hasPostfix() != other.hasPostfix()) return false;
      if (hasPostfix()) {
        if (getPostfix()
            != other.getPostfix()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOperand()) {
        hash = (37 * hash) + OPERAND_FIELD_NUMBER;
        hash = (53 * hash) + getOperand().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasPostfix()) {
        hash = (37 * hash) + POSTFIX_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getPostfix());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.UnaryOperation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getOperandFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        operand_ = null;
        if (operandBuilder_ != null) {
          operandBuilder_.dispose();
          operandBuilder_ = null;
        }
        type_ = 1;
        postfix_ = false;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.operand_ = operandBuilder_ == null
              ? operand_
              : operandBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.postfix_ = postfix_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.getDefaultInstance()) return this;
        if (other.hasOperand()) {
          mergeOperand(other.getOperand());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasPostfix()) {
          setPostfix(other.getPostfix());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasOperand()) {
          return false;
        }
        if (!hasType()) {
          return false;
        }
        if (!hasPostfix()) {
          return false;
        }
        if (!getOperand().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getOperandFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  type_ = tmpRaw;
                  bitField0_ |= 0x00000002;
                }
                break;
              } // case 16
              case 24: {
                postfix_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression operand_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> operandBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       * @return Whether the operand field is set.
       */
      public boolean hasOperand() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       * @return The operand.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getOperand() {
        if (operandBuilder_ == null) {
          return operand_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : operand_;
        } else {
          return operandBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder setOperand(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (operandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operand_ = value;
        } else {
          operandBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder setOperand(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (operandBuilder_ == null) {
          operand_ = builderForValue.build();
        } else {
          operandBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder mergeOperand(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (operandBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            operand_ != null &&
            operand_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getOperandBuilder().mergeFrom(value);
          } else {
            operand_ = value;
          }
        } else {
          operandBuilder_.mergeFrom(value);
        }
        if (operand_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public Builder clearOperand() {
        bitField0_ = (bitField0_ & ~0x00000001);
        operand_ = null;
        if (operandBuilder_ != null) {
          operandBuilder_.dispose();
          operandBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getOperandBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getOperandFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getOperandOrBuilder() {
        if (operandBuilder_ != null) {
          return operandBuilder_.getMessageOrBuilder();
        } else {
          return operand_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : operand_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression operand = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getOperandFieldBuilder() {
        if (operandBuilder_ == null) {
          operandBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getOperand(),
                  getParentForChildren(),
                  isClean());
          operand_ = null;
        }
        return operandBuilder_;
      }

      private int type_ = 1;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override public boolean hasType() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type getType() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.forNumber(type_);
        return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type.BIT_NOT : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.UnaryOperation.Type type = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 1;
        onChanged();
        return this;
      }

      private boolean postfix_ ;
      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @return Whether the postfix field is set.
       */
      @java.lang.Override
      public boolean hasPostfix() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @return The postfix.
       */
      @java.lang.Override
      public boolean getPostfix() {
        return postfix_;
      }
      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @param value The postfix to set.
       * @return This builder for chaining.
       */
      public Builder setPostfix(boolean value) {

        postfix_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bool postfix = 3 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearPostfix() {
        bitField0_ = (bitField0_ & ~0x00000004);
        postfix_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.UnaryOperation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<UnaryOperation>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<UnaryOperation>() {
      @java.lang.Override
      public UnaryOperation parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<UnaryOperation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<UnaryOperation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.UnaryOperation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConditionalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Conditional)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     * @return Whether the testExpression field is set.
     */
    boolean hasTestExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     * @return The testExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getTestExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getTestExpressionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     * @return Whether the thenExpression field is set.
     */
    boolean hasThenExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     * @return The thenExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getThenExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getThenExpressionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     * @return Whether the elseExpression field is set.
     */
    boolean hasElseExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     * @return The elseExpression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElseExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getElseExpressionOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Conditional}
   */
  public static final class Conditional extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Conditional)
      ConditionalOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Conditional.class.getName());
    }
    // Use Conditional.newBuilder() to construct.
    private Conditional(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Conditional() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder.class);
    }

    private int bitField0_;
    public static final int TEST_EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression testExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     * @return Whether the testExpression field is set.
     */
    @java.lang.Override
    public boolean hasTestExpression() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     * @return The testExpression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getTestExpression() {
      return testExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : testExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getTestExpressionOrBuilder() {
      return testExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : testExpression_;
    }

    public static final int THEN_EXPRESSION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression thenExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     * @return Whether the thenExpression field is set.
     */
    @java.lang.Override
    public boolean hasThenExpression() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     * @return The thenExpression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getThenExpression() {
      return thenExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : thenExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getThenExpressionOrBuilder() {
      return thenExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : thenExpression_;
    }

    public static final int ELSE_EXPRESSION_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression elseExpression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     * @return Whether the elseExpression field is set.
     */
    @java.lang.Override
    public boolean hasElseExpression() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     * @return The elseExpression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElseExpression() {
      return elseExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : elseExpression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getElseExpressionOrBuilder() {
      return elseExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : elseExpression_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTestExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasThenExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasElseExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTestExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getThenExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getElseExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTestExpression());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getThenExpression());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getElseExpression());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getTestExpression());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getThenExpression());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getElseExpression());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) obj;

      if (hasTestExpression() != other.hasTestExpression()) return false;
      if (hasTestExpression()) {
        if (!getTestExpression()
            .equals(other.getTestExpression())) return false;
      }
      if (hasThenExpression() != other.hasThenExpression()) return false;
      if (hasThenExpression()) {
        if (!getThenExpression()
            .equals(other.getThenExpression())) return false;
      }
      if (hasElseExpression() != other.hasElseExpression()) return false;
      if (hasElseExpression()) {
        if (!getElseExpression()
            .equals(other.getElseExpression())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTestExpression()) {
        hash = (37 * hash) + TEST_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getTestExpression().hashCode();
      }
      if (hasThenExpression()) {
        hash = (37 * hash) + THEN_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getThenExpression().hashCode();
      }
      if (hasElseExpression()) {
        hash = (37 * hash) + ELSE_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getElseExpression().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Conditional}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Conditional)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ConditionalOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTestExpressionFieldBuilder();
          getThenExpressionFieldBuilder();
          getElseExpressionFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        testExpression_ = null;
        if (testExpressionBuilder_ != null) {
          testExpressionBuilder_.dispose();
          testExpressionBuilder_ = null;
        }
        thenExpression_ = null;
        if (thenExpressionBuilder_ != null) {
          thenExpressionBuilder_.dispose();
          thenExpressionBuilder_ = null;
        }
        elseExpression_ = null;
        if (elseExpressionBuilder_ != null) {
          elseExpressionBuilder_.dispose();
          elseExpressionBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.testExpression_ = testExpressionBuilder_ == null
              ? testExpression_
              : testExpressionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.thenExpression_ = thenExpressionBuilder_ == null
              ? thenExpression_
              : thenExpressionBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.elseExpression_ = elseExpressionBuilder_ == null
              ? elseExpression_
              : elseExpressionBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional.getDefaultInstance()) return this;
        if (other.hasTestExpression()) {
          mergeTestExpression(other.getTestExpression());
        }
        if (other.hasThenExpression()) {
          mergeThenExpression(other.getThenExpression());
        }
        if (other.hasElseExpression()) {
          mergeElseExpression(other.getElseExpression());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTestExpression()) {
          return false;
        }
        if (!hasThenExpression()) {
          return false;
        }
        if (!hasElseExpression()) {
          return false;
        }
        if (!getTestExpression().isInitialized()) {
          return false;
        }
        if (!getThenExpression().isInitialized()) {
          return false;
        }
        if (!getElseExpression().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTestExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getThenExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getElseExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression testExpression_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> testExpressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       * @return Whether the testExpression field is set.
       */
      public boolean hasTestExpression() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       * @return The testExpression.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getTestExpression() {
        if (testExpressionBuilder_ == null) {
          return testExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : testExpression_;
        } else {
          return testExpressionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder setTestExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (testExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          testExpression_ = value;
        } else {
          testExpressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder setTestExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (testExpressionBuilder_ == null) {
          testExpression_ = builderForValue.build();
        } else {
          testExpressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder mergeTestExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (testExpressionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            testExpression_ != null &&
            testExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getTestExpressionBuilder().mergeFrom(value);
          } else {
            testExpression_ = value;
          }
        } else {
          testExpressionBuilder_.mergeFrom(value);
        }
        if (testExpression_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public Builder clearTestExpression() {
        bitField0_ = (bitField0_ & ~0x00000001);
        testExpression_ = null;
        if (testExpressionBuilder_ != null) {
          testExpressionBuilder_.dispose();
          testExpressionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getTestExpressionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTestExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getTestExpressionOrBuilder() {
        if (testExpressionBuilder_ != null) {
          return testExpressionBuilder_.getMessageOrBuilder();
        } else {
          return testExpression_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : testExpression_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression test_expression = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getTestExpressionFieldBuilder() {
        if (testExpressionBuilder_ == null) {
          testExpressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getTestExpression(),
                  getParentForChildren(),
                  isClean());
          testExpression_ = null;
        }
        return testExpressionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression thenExpression_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> thenExpressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       * @return Whether the thenExpression field is set.
       */
      public boolean hasThenExpression() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       * @return The thenExpression.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getThenExpression() {
        if (thenExpressionBuilder_ == null) {
          return thenExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : thenExpression_;
        } else {
          return thenExpressionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder setThenExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (thenExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          thenExpression_ = value;
        } else {
          thenExpressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder setThenExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (thenExpressionBuilder_ == null) {
          thenExpression_ = builderForValue.build();
        } else {
          thenExpressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder mergeThenExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (thenExpressionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            thenExpression_ != null &&
            thenExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getThenExpressionBuilder().mergeFrom(value);
          } else {
            thenExpression_ = value;
          }
        } else {
          thenExpressionBuilder_.mergeFrom(value);
        }
        if (thenExpression_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public Builder clearThenExpression() {
        bitField0_ = (bitField0_ & ~0x00000002);
        thenExpression_ = null;
        if (thenExpressionBuilder_ != null) {
          thenExpressionBuilder_.dispose();
          thenExpressionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getThenExpressionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getThenExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getThenExpressionOrBuilder() {
        if (thenExpressionBuilder_ != null) {
          return thenExpressionBuilder_.getMessageOrBuilder();
        } else {
          return thenExpression_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : thenExpression_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression then_expression = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getThenExpressionFieldBuilder() {
        if (thenExpressionBuilder_ == null) {
          thenExpressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getThenExpression(),
                  getParentForChildren(),
                  isClean());
          thenExpression_ = null;
        }
        return thenExpressionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression elseExpression_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> elseExpressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       * @return Whether the elseExpression field is set.
       */
      public boolean hasElseExpression() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       * @return The elseExpression.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getElseExpression() {
        if (elseExpressionBuilder_ == null) {
          return elseExpression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : elseExpression_;
        } else {
          return elseExpressionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder setElseExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (elseExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          elseExpression_ = value;
        } else {
          elseExpressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder setElseExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (elseExpressionBuilder_ == null) {
          elseExpression_ = builderForValue.build();
        } else {
          elseExpressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder mergeElseExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (elseExpressionBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            elseExpression_ != null &&
            elseExpression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getElseExpressionBuilder().mergeFrom(value);
          } else {
            elseExpression_ = value;
          }
        } else {
          elseExpressionBuilder_.mergeFrom(value);
        }
        if (elseExpression_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public Builder clearElseExpression() {
        bitField0_ = (bitField0_ & ~0x00000004);
        elseExpression_ = null;
        if (elseExpressionBuilder_ != null) {
          elseExpressionBuilder_.dispose();
          elseExpressionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getElseExpressionBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getElseExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getElseExpressionOrBuilder() {
        if (elseExpressionBuilder_ != null) {
          return elseExpressionBuilder_.getMessageOrBuilder();
        } else {
          return elseExpression_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : elseExpression_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression else_expression = 3 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getElseExpressionFieldBuilder() {
        if (elseExpressionBuilder_ == null) {
          elseExpressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getElseExpression(),
                  getParentForChildren(),
                  isClean());
          elseExpression_ = null;
        }
        return elseExpressionBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Conditional)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Conditional)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Conditional>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Conditional>() {
      @java.lang.Override
      public Conditional parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Conditional> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Conditional> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Conditional getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ArrayAccessOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     * @return Whether the array field is set.
     */
    boolean hasArray();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     * @return The array.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArray();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArrayOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     * @return Whether the index field is set.
     */
    boolean hasIndex();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     * @return The index.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIndex();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIndexOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayAccess}
   */
  public static final class ArrayAccess extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
      ArrayAccessOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ArrayAccess.class.getName());
    }
    // Use ArrayAccess.newBuilder() to construct.
    private ArrayAccess(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ArrayAccess() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder.class);
    }

    private int bitField0_;
    public static final int ARRAY_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression array_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     * @return Whether the array field is set.
     */
    @java.lang.Override
    public boolean hasArray() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     * @return The array.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArray() {
      return array_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : array_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArrayOrBuilder() {
      return array_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : array_;
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression index_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     * @return Whether the index field is set.
     */
    @java.lang.Override
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     * @return The index.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIndex() {
      return index_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : index_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIndexOrBuilder() {
      return index_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : index_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasArray()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getArray().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getIndex().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getArray());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getIndex());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getArray());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getIndex());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) obj;

      if (hasArray() != other.hasArray()) return false;
      if (hasArray()) {
        if (!getArray()
            .equals(other.getArray())) return false;
      }
      if (hasIndex() != other.hasIndex()) return false;
      if (hasIndex()) {
        if (!getIndex()
            .equals(other.getIndex())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasArray()) {
        hash = (37 * hash) + ARRAY_FIELD_NUMBER;
        hash = (53 * hash) + getArray().hashCode();
      }
      if (hasIndex()) {
        hash = (37 * hash) + INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getIndex().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ArrayAccess}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccessOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getArrayFieldBuilder();
          getIndexFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        array_ = null;
        if (arrayBuilder_ != null) {
          arrayBuilder_.dispose();
          arrayBuilder_ = null;
        }
        index_ = null;
        if (indexBuilder_ != null) {
          indexBuilder_.dispose();
          indexBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.array_ = arrayBuilder_ == null
              ? array_
              : arrayBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.index_ = indexBuilder_ == null
              ? index_
              : indexBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess.getDefaultInstance()) return this;
        if (other.hasArray()) {
          mergeArray(other.getArray());
        }
        if (other.hasIndex()) {
          mergeIndex(other.getIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasArray()) {
          return false;
        }
        if (!hasIndex()) {
          return false;
        }
        if (!getArray().isInitialized()) {
          return false;
        }
        if (!getIndex().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getArrayFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getIndexFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression array_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> arrayBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       * @return Whether the array field is set.
       */
      public boolean hasArray() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       * @return The array.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArray() {
        if (arrayBuilder_ == null) {
          return array_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : array_;
        } else {
          return arrayBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder setArray(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (arrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          array_ = value;
        } else {
          arrayBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder setArray(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (arrayBuilder_ == null) {
          array_ = builderForValue.build();
        } else {
          arrayBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder mergeArray(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (arrayBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            array_ != null &&
            array_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getArrayBuilder().mergeFrom(value);
          } else {
            array_ = value;
          }
        } else {
          arrayBuilder_.mergeFrom(value);
        }
        if (array_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public Builder clearArray() {
        bitField0_ = (bitField0_ & ~0x00000001);
        array_ = null;
        if (arrayBuilder_ != null) {
          arrayBuilder_.dispose();
          arrayBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getArrayBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getArrayFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArrayOrBuilder() {
        if (arrayBuilder_ != null) {
          return arrayBuilder_.getMessageOrBuilder();
        } else {
          return array_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : array_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression array = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getArrayFieldBuilder() {
        if (arrayBuilder_ == null) {
          arrayBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getArray(),
                  getParentForChildren(),
                  isClean());
          array_ = null;
        }
        return arrayBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression index_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> indexBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       * @return Whether the index field is set.
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       * @return The index.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIndex() {
        if (indexBuilder_ == null) {
          return index_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : index_;
        } else {
          return indexBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder setIndex(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (indexBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          index_ = value;
        } else {
          indexBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder setIndex(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (indexBuilder_ == null) {
          index_ = builderForValue.build();
        } else {
          indexBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder mergeIndex(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (indexBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            index_ != null &&
            index_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getIndexBuilder().mergeFrom(value);
          } else {
            index_ = value;
          }
        } else {
          indexBuilder_.mergeFrom(value);
        }
        if (index_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = null;
        if (indexBuilder_ != null) {
          indexBuilder_.dispose();
          indexBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getIndexBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getIndexFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIndexOrBuilder() {
        if (indexBuilder_ != null) {
          return indexBuilder_.getMessageOrBuilder();
        } else {
          return index_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : index_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression index = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getIndexFieldBuilder() {
        if (indexBuilder_ == null) {
          indexBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getIndex(),
                  getParentForChildren(),
                  isClean());
          index_ = null;
        }
        return indexBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ArrayAccess)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ArrayAccess>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ArrayAccess>() {
      @java.lang.Override
      public ArrayAccess parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ArrayAccess> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ArrayAccess> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ArrayAccess getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NameReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NameReference)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    boolean hasInlineStrategy();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameReference}
   */
  public static final class NameReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NameReference)
      NameReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        NameReference.class.getName());
    }
    // Use NameReference.newBuilder() to construct.
    private NameReference(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NameReference() {
      inlineStrategy_ = 2;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int QUALIFIER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return Whether the qualifier field is set.
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return The qualifier.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }

    public static final int INLINE_STRATEGY_FIELD_NUMBER = 3;
    private int inlineStrategy_ = 2;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    @java.lang.Override public boolean hasInlineStrategy() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    @java.lang.Override public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasQualifier()) {
        if (!getQualifier().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getQualifier());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(3, inlineStrategy_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getQualifier());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, inlineStrategy_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (hasQualifier() != other.hasQualifier()) return false;
      if (hasQualifier()) {
        if (!getQualifier()
            .equals(other.getQualifier())) return false;
      }
      if (hasInlineStrategy() != other.hasInlineStrategy()) return false;
      if (hasInlineStrategy()) {
        if (inlineStrategy_ != other.inlineStrategy_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (hasQualifier()) {
        hash = (37 * hash) + QUALIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getQualifier().hashCode();
      }
      if (hasInlineStrategy()) {
        hash = (37 * hash) + INLINE_STRATEGY_FIELD_NUMBER;
        hash = (53 * hash) + inlineStrategy_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NameReference)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReferenceOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getQualifierFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        inlineStrategy_ = 2;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.qualifier_ = qualifierBuilder_ == null
              ? qualifier_
              : qualifierBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.inlineStrategy_ = inlineStrategy_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (other.hasQualifier()) {
          mergeQualifier(other.getQualifier());
        }
        if (other.hasInlineStrategy()) {
          setInlineStrategy(other.getInlineStrategy());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNameId()) {
          return false;
        }
        if (hasQualifier()) {
          if (!getQualifier().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getQualifierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  inlineStrategy_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> qualifierBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       * @return Whether the qualifier field is set.
       */
      public boolean hasQualifier() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       * @return The qualifier.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        if (qualifierBuilder_ == null) {
          return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        } else {
          return qualifierBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualifier_ = value;
        } else {
          qualifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (qualifierBuilder_ == null) {
          qualifier_ = builderForValue.build();
        } else {
          qualifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            qualifier_ != null &&
            qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getQualifierBuilder().mergeFrom(value);
          } else {
            qualifier_ = value;
          }
        } else {
          qualifierBuilder_.mergeFrom(value);
        }
        if (qualifier_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder clearQualifier() {
        bitField0_ = (bitField0_ & ~0x00000002);
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getQualifierBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getQualifierFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
        if (qualifierBuilder_ != null) {
          return qualifierBuilder_.getMessageOrBuilder();
        } else {
          return qualifier_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getQualifierFieldBuilder() {
        if (qualifierBuilder_ == null) {
          qualifierBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getQualifier(),
                  getParentForChildren(),
                  isClean());
          qualifier_ = null;
        }
        return qualifierBuilder_;
      }

      private int inlineStrategy_ = 2;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return Whether the inlineStrategy field is set.
       */
      @java.lang.Override public boolean hasInlineStrategy() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return The inlineStrategy.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
        return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @param value The inlineStrategy to set.
       * @return This builder for chaining.
       */
      public Builder setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        inlineStrategy_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineStrategy() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inlineStrategy_ = 2;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NameReference)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NameReference)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<NameReference>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<NameReference>() {
      @java.lang.Override
      public NameReference parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<NameReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<NameReference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PropertyReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return Whether the stringId field is set.
     */
    boolean hasStringId();
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return The stringId.
     */
    int getStringId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    boolean hasInlineStrategy();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.PropertyReference}
   */
  public static final class PropertyReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
      PropertyReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        PropertyReference.class.getName());
    }
    // Use PropertyReference.newBuilder() to construct.
    private PropertyReference(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private PropertyReference() {
      inlineStrategy_ = 2;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder.class);
    }

    private int bitField0_;
    public static final int STRING_ID_FIELD_NUMBER = 1;
    private int stringId_ = 0;
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return Whether the stringId field is set.
     */
    @java.lang.Override
    public boolean hasStringId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 string_id = 1 [features = { ... }</code>
     * @return The stringId.
     */
    @java.lang.Override
    public int getStringId() {
      return stringId_;
    }

    public static final int QUALIFIER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return Whether the qualifier field is set.
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     * @return The qualifier.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }

    public static final int INLINE_STRATEGY_FIELD_NUMBER = 3;
    private int inlineStrategy_ = 2;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    @java.lang.Override public boolean hasInlineStrategy() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    @java.lang.Override public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStringId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasQualifier()) {
        if (!getQualifier().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, stringId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getQualifier());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(3, inlineStrategy_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, stringId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getQualifier());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, inlineStrategy_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) obj;

      if (hasStringId() != other.hasStringId()) return false;
      if (hasStringId()) {
        if (getStringId()
            != other.getStringId()) return false;
      }
      if (hasQualifier() != other.hasQualifier()) return false;
      if (hasQualifier()) {
        if (!getQualifier()
            .equals(other.getQualifier())) return false;
      }
      if (hasInlineStrategy() != other.hasInlineStrategy()) return false;
      if (hasInlineStrategy()) {
        if (inlineStrategy_ != other.inlineStrategy_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStringId()) {
        hash = (37 * hash) + STRING_ID_FIELD_NUMBER;
        hash = (53 * hash) + getStringId();
      }
      if (hasQualifier()) {
        hash = (37 * hash) + QUALIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getQualifier().hashCode();
      }
      if (hasInlineStrategy()) {
        hash = (37 * hash) + INLINE_STRATEGY_FIELD_NUMBER;
        hash = (53 * hash) + inlineStrategy_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.PropertyReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReferenceOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getQualifierFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stringId_ = 0;
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        inlineStrategy_ = 2;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stringId_ = stringId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.qualifier_ = qualifierBuilder_ == null
              ? qualifier_
              : qualifierBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.inlineStrategy_ = inlineStrategy_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference.getDefaultInstance()) return this;
        if (other.hasStringId()) {
          setStringId(other.getStringId());
        }
        if (other.hasQualifier()) {
          mergeQualifier(other.getQualifier());
        }
        if (other.hasInlineStrategy()) {
          setInlineStrategy(other.getInlineStrategy());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasStringId()) {
          return false;
        }
        if (hasQualifier()) {
          if (!getQualifier().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                stringId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getQualifierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  inlineStrategy_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int stringId_ ;
      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @return Whether the stringId field is set.
       */
      @java.lang.Override
      public boolean hasStringId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @return The stringId.
       */
      @java.lang.Override
      public int getStringId() {
        return stringId_;
      }
      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @param value The stringId to set.
       * @return This builder for chaining.
       */
      public Builder setStringId(int value) {

        stringId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 string_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearStringId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stringId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> qualifierBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       * @return Whether the qualifier field is set.
       */
      public boolean hasQualifier() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       * @return The qualifier.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        if (qualifierBuilder_ == null) {
          return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        } else {
          return qualifierBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualifier_ = value;
        } else {
          qualifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (qualifierBuilder_ == null) {
          qualifier_ = builderForValue.build();
        } else {
          qualifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            qualifier_ != null &&
            qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getQualifierBuilder().mergeFrom(value);
          } else {
            qualifier_ = value;
          }
        } else {
          qualifierBuilder_.mergeFrom(value);
        }
        if (qualifier_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public Builder clearQualifier() {
        bitField0_ = (bitField0_ & ~0x00000002);
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getQualifierBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getQualifierFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
        if (qualifierBuilder_ != null) {
          return qualifierBuilder_.getMessageOrBuilder();
        } else {
          return qualifier_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getQualifierFieldBuilder() {
        if (qualifierBuilder_ == null) {
          qualifierBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getQualifier(),
                  getParentForChildren(),
                  isClean());
          qualifier_ = null;
        }
        return qualifierBuilder_;
      }

      private int inlineStrategy_ = 2;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return Whether the inlineStrategy field is set.
       */
      @java.lang.Override public boolean hasInlineStrategy() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return The inlineStrategy.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
        return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @param value The inlineStrategy to set.
       * @return This builder for chaining.
       */
      public Builder setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        inlineStrategy_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineStrategy() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inlineStrategy_ = 2;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.PropertyReference)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<PropertyReference>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<PropertyReference>() {
      @java.lang.Override
      public PropertyReference parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<PropertyReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<PropertyReference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.PropertyReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InvocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Invocation)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    boolean hasInlineStrategy();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Invocation}
   */
  public static final class Invocation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Invocation)
      InvocationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Invocation.class.getName());
    }
    // Use Invocation.newBuilder() to construct.
    private Invocation(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Invocation() {
      argument_ = java.util.Collections.emptyList();
      inlineStrategy_ = 2;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder.class);
    }

    private int bitField0_;
    public static final int QUALIFIER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return Whether the qualifier field is set.
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return The qualifier.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    public static final int INLINE_STRATEGY_FIELD_NUMBER = 3;
    private int inlineStrategy_ = 2;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return Whether the inlineStrategy field is set.
     */
    @java.lang.Override public boolean hasInlineStrategy() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
     * @return The inlineStrategy.
     */
    @java.lang.Override public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasQualifier()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getQualifier().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getQualifier());
      }
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(2, argument_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(3, inlineStrategy_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getQualifier());
      }
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, argument_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(3, inlineStrategy_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) obj;

      if (hasQualifier() != other.hasQualifier()) return false;
      if (hasQualifier()) {
        if (!getQualifier()
            .equals(other.getQualifier())) return false;
      }
      if (!getArgumentList()
          .equals(other.getArgumentList())) return false;
      if (hasInlineStrategy() != other.hasInlineStrategy()) return false;
      if (hasInlineStrategy()) {
        if (inlineStrategy_ != other.inlineStrategy_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasQualifier()) {
        hash = (37 * hash) + QUALIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getQualifier().hashCode();
      }
      if (getArgumentCount() > 0) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentList().hashCode();
      }
      if (hasInlineStrategy()) {
        hash = (37 * hash) + INLINE_STRATEGY_FIELD_NUMBER;
        hash = (53 * hash) + inlineStrategy_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Invocation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Invocation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InvocationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getQualifierFieldBuilder();
          getArgumentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
        } else {
          argument_ = null;
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        inlineStrategy_ = 2;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation result) {
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.qualifier_ = qualifierBuilder_ == null
              ? qualifier_
              : qualifierBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.inlineStrategy_ = inlineStrategy_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation.getDefaultInstance()) return this;
        if (other.hasQualifier()) {
          mergeQualifier(other.getQualifier());
        }
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        if (other.hasInlineStrategy()) {
          setInlineStrategy(other.getInlineStrategy());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasQualifier()) {
          return false;
        }
        if (!getQualifier().isInitialized()) {
          return false;
        }
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getQualifierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.parser(),
                        extensionRegistry);
                if (argumentBuilder_ == null) {
                  ensureArgumentIsMutable();
                  argument_.add(m);
                } else {
                  argumentBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(3, tmpRaw);
                } else {
                  inlineStrategy_ = tmpRaw;
                  bitField0_ |= 0x00000004;
                }
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> qualifierBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       * @return Whether the qualifier field is set.
       */
      public boolean hasQualifier() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       * @return The qualifier.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        if (qualifierBuilder_ == null) {
          return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        } else {
          return qualifierBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualifier_ = value;
        } else {
          qualifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (qualifierBuilder_ == null) {
          qualifier_ = builderForValue.build();
        } else {
          qualifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            qualifier_ != null &&
            qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getQualifierBuilder().mergeFrom(value);
          } else {
            qualifier_ = value;
          }
        } else {
          qualifierBuilder_.mergeFrom(value);
        }
        if (qualifier_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder clearQualifier() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getQualifierBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getQualifierFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
        if (qualifierBuilder_ != null) {
          return qualifierBuilder_.getMessageOrBuilder();
        } else {
          return qualifier_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getQualifierFieldBuilder() {
        if (qualifierBuilder_ == null) {
          qualifierBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getQualifier(),
                  getParentForChildren(),
                  isClean());
          qualifier_ = null;
        }
        return qualifierBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression>(argument_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      private int inlineStrategy_ = 2;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return Whether the inlineStrategy field is set.
       */
      @java.lang.Override public boolean hasInlineStrategy() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return The inlineStrategy.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy getInlineStrategy() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.forNumber(inlineStrategy_);
        return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy.NOT_INLINE : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @param value The inlineStrategy to set.
       * @return This builder for chaining.
       */
      public Builder setInlineStrategy(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineStrategy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        inlineStrategy_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.InlineStrategy inline_strategy = 3 [default = NOT_INLINE];</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineStrategy() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inlineStrategy_ = 2;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Invocation)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Invocation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Invocation>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Invocation>() {
      @java.lang.Override
      public Invocation parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Invocation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Invocation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Invocation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstantiationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return Whether the qualifier field is set.
     */
    boolean hasQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return The qualifier.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getArgumentList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    int getArgumentCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getArgumentOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Instantiation}
   */
  public static final class Instantiation extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
      InstantiationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Instantiation.class.getName());
    }
    // Use Instantiation.newBuilder() to construct.
    private Instantiation(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Instantiation() {
      argument_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder.class);
    }

    private int bitField0_;
    public static final int QUALIFIER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return Whether the qualifier field is set.
     */
    @java.lang.Override
    public boolean hasQualifier() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     * @return The qualifier.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
      return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
    }

    public static final int ARGUMENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> argument_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getArgumentOrBuilderList() {
      return argument_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public int getArgumentCount() {
      return argument_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
      return argument_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
        int index) {
      return argument_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasQualifier()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getQualifier().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getArgumentCount(); i++) {
        if (!getArgument(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getQualifier());
      }
      for (int i = 0; i < argument_.size(); i++) {
        output.writeMessage(2, argument_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getQualifier());
      }
      for (int i = 0; i < argument_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, argument_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) obj;

      if (hasQualifier() != other.hasQualifier()) return false;
      if (hasQualifier()) {
        if (!getQualifier()
            .equals(other.getQualifier())) return false;
      }
      if (!getArgumentList()
          .equals(other.getArgumentList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasQualifier()) {
        hash = (37 * hash) + QUALIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getQualifier().hashCode();
      }
      if (getArgumentCount() > 0) {
        hash = (37 * hash) + ARGUMENT_FIELD_NUMBER;
        hash = (53 * hash) + getArgumentList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Instantiation}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InstantiationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getQualifierFieldBuilder();
          getArgumentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
        } else {
          argument_ = null;
          argumentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation result) {
        if (argumentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            argument_ = java.util.Collections.unmodifiableList(argument_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.argument_ = argument_;
        } else {
          result.argument_ = argumentBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.qualifier_ = qualifierBuilder_ == null
              ? qualifier_
              : qualifierBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation.getDefaultInstance()) return this;
        if (other.hasQualifier()) {
          mergeQualifier(other.getQualifier());
        }
        if (argumentBuilder_ == null) {
          if (!other.argument_.isEmpty()) {
            if (argument_.isEmpty()) {
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureArgumentIsMutable();
              argument_.addAll(other.argument_);
            }
            onChanged();
          }
        } else {
          if (!other.argument_.isEmpty()) {
            if (argumentBuilder_.isEmpty()) {
              argumentBuilder_.dispose();
              argumentBuilder_ = null;
              argument_ = other.argument_;
              bitField0_ = (bitField0_ & ~0x00000002);
              argumentBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgumentFieldBuilder() : null;
            } else {
              argumentBuilder_.addAllMessages(other.argument_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasQualifier()) {
          return false;
        }
        if (!getQualifier().isInitialized()) {
          return false;
        }
        for (int i = 0; i < getArgumentCount(); i++) {
          if (!getArgument(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getQualifierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.parser(),
                        extensionRegistry);
                if (argumentBuilder_ == null) {
                  ensureArgumentIsMutable();
                  argument_.add(m);
                } else {
                  argumentBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression qualifier_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> qualifierBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       * @return Whether the qualifier field is set.
       */
      public boolean hasQualifier() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       * @return The qualifier.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getQualifier() {
        if (qualifierBuilder_ == null) {
          return qualifier_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        } else {
          return qualifierBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualifier_ = value;
        } else {
          qualifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder setQualifier(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (qualifierBuilder_ == null) {
          qualifier_ = builderForValue.build();
        } else {
          qualifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder mergeQualifier(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (qualifierBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            qualifier_ != null &&
            qualifier_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getQualifierBuilder().mergeFrom(value);
          } else {
            qualifier_ = value;
          }
        } else {
          qualifierBuilder_.mergeFrom(value);
        }
        if (qualifier_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public Builder clearQualifier() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qualifier_ = null;
        if (qualifierBuilder_ != null) {
          qualifierBuilder_.dispose();
          qualifierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getQualifierBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getQualifierFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getQualifierOrBuilder() {
        if (qualifierBuilder_ != null) {
          return qualifierBuilder_.getMessageOrBuilder();
        } else {
          return qualifier_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : qualifier_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression qualifier = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getQualifierFieldBuilder() {
        if (qualifierBuilder_ == null) {
          qualifierBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getQualifier(),
                  getParentForChildren(),
                  isClean());
          qualifier_ = null;
        }
        return qualifierBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> argument_ =
        java.util.Collections.emptyList();
      private void ensureArgumentIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          argument_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression>(argument_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> argumentBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getArgumentList() {
        if (argumentBuilder_ == null) {
          return java.util.Collections.unmodifiableList(argument_);
        } else {
          return argumentBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public int getArgumentCount() {
        if (argumentBuilder_ == null) {
          return argument_.size();
        } else {
          return argumentBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getArgument(int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);
        } else {
          return argumentBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.set(index, value);
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder setArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.set(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (argumentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgumentIsMutable();
          argument_.add(index, value);
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addArgument(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.add(index, builderForValue.build());
          onChanged();
        } else {
          argumentBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder addAllArgument(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, argument_);
          onChanged();
        } else {
          argumentBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder clearArgument() {
        if (argumentBuilder_ == null) {
          argument_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          argumentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public Builder removeArgument(int index) {
        if (argumentBuilder_ == null) {
          ensureArgumentIsMutable();
          argument_.remove(index);
          onChanged();
        } else {
          argumentBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getArgumentOrBuilder(
          int index) {
        if (argumentBuilder_ == null) {
          return argument_.get(index);  } else {
          return argumentBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
           getArgumentOrBuilderList() {
        if (argumentBuilder_ != null) {
          return argumentBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(argument_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addArgumentBuilder() {
        return getArgumentFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addArgumentBuilder(
          int index) {
        return getArgumentFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression argument = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder> 
           getArgumentBuilderList() {
        return getArgumentFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getArgumentFieldBuilder() {
        if (argumentBuilder_ == null) {
          argumentBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  argument_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          argument_ = null;
        }
        return argumentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Instantiation)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Instantiation>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Instantiation>() {
      @java.lang.Override
      public Instantiation parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Instantiation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Instantiation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Instantiation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StatementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Statement)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder();

    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    boolean hasSynthetic();
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    boolean getSynthetic();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getBeforeCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    int getBeforeCommentsCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getBeforeCommentsOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> 
        getAfterCommentsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    int getAfterCommentsCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getAfterCommentsOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     * @return Whether the returnStatement field is set.
     */
    boolean hasReturnStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     * @return The returnStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getReturnStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder getReturnStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     * @return Whether the throwStatement field is set.
     */
    boolean hasThrowStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     * @return The throwStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getThrowStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder getThrowStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     * @return Whether the breakStatement field is set.
     */
    boolean hasBreakStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     * @return The breakStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getBreakStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder getBreakStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     * @return Whether the continueStatement field is set.
     */
    boolean hasContinueStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     * @return The continueStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getContinueStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder getContinueStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     * @return Whether the debugger field is set.
     */
    boolean hasDebugger();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     * @return The debugger.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDebugger();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder getDebuggerOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder getExpressionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     * @return Whether the vars field is set.
     */
    boolean hasVars();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     * @return The vars.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getVars();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder getVarsOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     * @return Whether the block field is set.
     */
    boolean hasBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     * @return The block.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder getBlockOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     * @return Whether the compositeBlock field is set.
     */
    boolean hasCompositeBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     * @return The compositeBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getCompositeBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getCompositeBlockOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     * @return Whether the label field is set.
     */
    boolean hasLabel();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     * @return The label.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getLabel();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder getLabelOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     * @return Whether the ifStatement field is set.
     */
    boolean hasIfStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     * @return The ifStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getIfStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder getIfStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     * @return Whether the switchStatement field is set.
     */
    boolean hasSwitchStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     * @return The switchStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getSwitchStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder getSwitchStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     * @return Whether the whileStatement field is set.
     */
    boolean hasWhileStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     * @return The whileStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getWhileStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder getWhileStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     * @return Whether the doWhileStatement field is set.
     */
    boolean hasDoWhileStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     * @return The doWhileStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDoWhileStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder getDoWhileStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     * @return Whether the forStatement field is set.
     */
    boolean hasForStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     * @return The forStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getForStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder getForStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     * @return Whether the forInStatement field is set.
     */
    boolean hasForInStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     * @return The forInStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getForInStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder getForInStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     * @return Whether the tryStatement field is set.
     */
    boolean hasTryStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     * @return The tryStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getTryStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder getTryStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     * @return Whether the empty field is set.
     */
    boolean hasEmpty();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     * @return The empty.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getEmpty();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder getEmptyOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     * @return Whether the singleLineComment field is set.
     */
    boolean hasSingleLineComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     * @return The singleLineComment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getSingleLineComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder getSingleLineCommentOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     * @return Whether the multiLineComment field is set.
     */
    boolean hasMultiLineComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     * @return The multiLineComment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getMultiLineComment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder getMultiLineCommentOrBuilder();

    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.StatementCase getStatementCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Statement}
   */
  public static final class Statement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Statement)
      StatementOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Statement.class.getName());
    }
    // Use Statement.newBuilder() to construct.
    private Statement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Statement() {
      beforeComments_ = java.util.Collections.emptyList();
      afterComments_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder.class);
    }

    private int bitField0_;
    private int statementCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object statement_;
    public enum StatementCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
            org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
      RETURN_STATEMENT(21),
      THROW_STATEMENT(22),
      BREAK_STATEMENT(23),
      CONTINUE_STATEMENT(24),
      DEBUGGER(25),
      EXPRESSION(26),
      VARS(27),
      BLOCK(28),
      COMPOSITE_BLOCK(29),
      LABEL(30),
      IF_STATEMENT(31),
      SWITCH_STATEMENT(32),
      WHILE_STATEMENT(33),
      DO_WHILE_STATEMENT(34),
      FOR_STATEMENT(35),
      FOR_IN_STATEMENT(36),
      TRY_STATEMENT(37),
      EMPTY(38),
      SINGLE_LINE_COMMENT(39),
      MULTI_LINE_COMMENT(40),
      STATEMENT_NOT_SET(0);
      private final int value;
      private StatementCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static StatementCase valueOf(int value) {
        return forNumber(value);
      }

      public static StatementCase forNumber(int value) {
        switch (value) {
          case 21: return RETURN_STATEMENT;
          case 22: return THROW_STATEMENT;
          case 23: return BREAK_STATEMENT;
          case 24: return CONTINUE_STATEMENT;
          case 25: return DEBUGGER;
          case 26: return EXPRESSION;
          case 27: return VARS;
          case 28: return BLOCK;
          case 29: return COMPOSITE_BLOCK;
          case 30: return LABEL;
          case 31: return IF_STATEMENT;
          case 32: return SWITCH_STATEMENT;
          case 33: return WHILE_STATEMENT;
          case 34: return DO_WHILE_STATEMENT;
          case 35: return FOR_STATEMENT;
          case 36: return FOR_IN_STATEMENT;
          case 37: return TRY_STATEMENT;
          case 38: return EMPTY;
          case 39: return SINGLE_LINE_COMMENT;
          case 40: return MULTI_LINE_COMMENT;
          case 0: return STATEMENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public StatementCase
    getStatementCase() {
      return StatementCase.forNumber(
          statementCase_);
    }

    public static final int FILEID_FIELD_NUMBER = 1;
    private int fileId_ = 0;
    /**
     * <code>int32 fileId = 1;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 fileId = 1;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }

    public static final int LOCATION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return Whether the location field is set.
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     * @return The location.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }

    public static final int SYNTHETIC_FIELD_NUMBER = 3;
    private boolean synthetic_ = false;
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return Whether the synthetic field is set.
     */
    @java.lang.Override
    public boolean hasSynthetic() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>bool synthetic = 3 [default = false];</code>
     * @return The synthetic.
     */
    @java.lang.Override
    public boolean getSynthetic() {
      return synthetic_;
    }

    public static final int BEFORE_COMMENTS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> beforeComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getBeforeCommentsOrBuilderList() {
      return beforeComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public int getBeforeCommentsCount() {
      return beforeComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
      return beforeComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
        int index) {
      return beforeComments_.get(index);
    }

    public static final int AFTER_COMMENTS_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> afterComments_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
        getAfterCommentsOrBuilderList() {
      return afterComments_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public int getAfterCommentsCount() {
      return afterComments_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
      return afterComments_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
        int index) {
      return afterComments_.get(index);
    }

    public static final int RETURN_STATEMENT_FIELD_NUMBER = 21;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     * @return Whether the returnStatement field is set.
     */
    @java.lang.Override
    public boolean hasReturnStatement() {
      return statementCase_ == 21;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     * @return The returnStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getReturnStatement() {
      if (statementCase_ == 21) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder getReturnStatementOrBuilder() {
      if (statementCase_ == 21) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
    }

    public static final int THROW_STATEMENT_FIELD_NUMBER = 22;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     * @return Whether the throwStatement field is set.
     */
    @java.lang.Override
    public boolean hasThrowStatement() {
      return statementCase_ == 22;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     * @return The throwStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getThrowStatement() {
      if (statementCase_ == 22) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder getThrowStatementOrBuilder() {
      if (statementCase_ == 22) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
    }

    public static final int BREAK_STATEMENT_FIELD_NUMBER = 23;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     * @return Whether the breakStatement field is set.
     */
    @java.lang.Override
    public boolean hasBreakStatement() {
      return statementCase_ == 23;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     * @return The breakStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getBreakStatement() {
      if (statementCase_ == 23) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder getBreakStatementOrBuilder() {
      if (statementCase_ == 23) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
    }

    public static final int CONTINUE_STATEMENT_FIELD_NUMBER = 24;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     * @return Whether the continueStatement field is set.
     */
    @java.lang.Override
    public boolean hasContinueStatement() {
      return statementCase_ == 24;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     * @return The continueStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getContinueStatement() {
      if (statementCase_ == 24) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder getContinueStatementOrBuilder() {
      if (statementCase_ == 24) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
    }

    public static final int DEBUGGER_FIELD_NUMBER = 25;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     * @return Whether the debugger field is set.
     */
    @java.lang.Override
    public boolean hasDebugger() {
      return statementCase_ == 25;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     * @return The debugger.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDebugger() {
      if (statementCase_ == 25) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder getDebuggerOrBuilder() {
      if (statementCase_ == 25) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
    }

    public static final int EXPRESSION_FIELD_NUMBER = 26;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return statementCase_ == 26;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getExpression() {
      if (statementCase_ == 26) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder getExpressionOrBuilder() {
      if (statementCase_ == 26) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
    }

    public static final int VARS_FIELD_NUMBER = 27;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     * @return Whether the vars field is set.
     */
    @java.lang.Override
    public boolean hasVars() {
      return statementCase_ == 27;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     * @return The vars.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getVars() {
      if (statementCase_ == 27) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder getVarsOrBuilder() {
      if (statementCase_ == 27) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
    }

    public static final int BLOCK_FIELD_NUMBER = 28;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     * @return Whether the block field is set.
     */
    @java.lang.Override
    public boolean hasBlock() {
      return statementCase_ == 28;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     * @return The block.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getBlock() {
      if (statementCase_ == 28) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder getBlockOrBuilder() {
      if (statementCase_ == 28) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
    }

    public static final int COMPOSITE_BLOCK_FIELD_NUMBER = 29;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     * @return Whether the compositeBlock field is set.
     */
    @java.lang.Override
    public boolean hasCompositeBlock() {
      return statementCase_ == 29;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     * @return The compositeBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getCompositeBlock() {
      if (statementCase_ == 29) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getCompositeBlockOrBuilder() {
      if (statementCase_ == 29) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
    }

    public static final int LABEL_FIELD_NUMBER = 30;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     * @return Whether the label field is set.
     */
    @java.lang.Override
    public boolean hasLabel() {
      return statementCase_ == 30;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     * @return The label.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getLabel() {
      if (statementCase_ == 30) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder getLabelOrBuilder() {
      if (statementCase_ == 30) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
    }

    public static final int IF_STATEMENT_FIELD_NUMBER = 31;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     * @return Whether the ifStatement field is set.
     */
    @java.lang.Override
    public boolean hasIfStatement() {
      return statementCase_ == 31;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     * @return The ifStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getIfStatement() {
      if (statementCase_ == 31) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder getIfStatementOrBuilder() {
      if (statementCase_ == 31) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
    }

    public static final int SWITCH_STATEMENT_FIELD_NUMBER = 32;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     * @return Whether the switchStatement field is set.
     */
    @java.lang.Override
    public boolean hasSwitchStatement() {
      return statementCase_ == 32;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     * @return The switchStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getSwitchStatement() {
      if (statementCase_ == 32) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder getSwitchStatementOrBuilder() {
      if (statementCase_ == 32) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
    }

    public static final int WHILE_STATEMENT_FIELD_NUMBER = 33;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     * @return Whether the whileStatement field is set.
     */
    @java.lang.Override
    public boolean hasWhileStatement() {
      return statementCase_ == 33;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     * @return The whileStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getWhileStatement() {
      if (statementCase_ == 33) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder getWhileStatementOrBuilder() {
      if (statementCase_ == 33) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
    }

    public static final int DO_WHILE_STATEMENT_FIELD_NUMBER = 34;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     * @return Whether the doWhileStatement field is set.
     */
    @java.lang.Override
    public boolean hasDoWhileStatement() {
      return statementCase_ == 34;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     * @return The doWhileStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDoWhileStatement() {
      if (statementCase_ == 34) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder getDoWhileStatementOrBuilder() {
      if (statementCase_ == 34) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
    }

    public static final int FOR_STATEMENT_FIELD_NUMBER = 35;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     * @return Whether the forStatement field is set.
     */
    @java.lang.Override
    public boolean hasForStatement() {
      return statementCase_ == 35;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     * @return The forStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getForStatement() {
      if (statementCase_ == 35) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder getForStatementOrBuilder() {
      if (statementCase_ == 35) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
    }

    public static final int FOR_IN_STATEMENT_FIELD_NUMBER = 36;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     * @return Whether the forInStatement field is set.
     */
    @java.lang.Override
    public boolean hasForInStatement() {
      return statementCase_ == 36;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     * @return The forInStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getForInStatement() {
      if (statementCase_ == 36) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder getForInStatementOrBuilder() {
      if (statementCase_ == 36) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
    }

    public static final int TRY_STATEMENT_FIELD_NUMBER = 37;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     * @return Whether the tryStatement field is set.
     */
    @java.lang.Override
    public boolean hasTryStatement() {
      return statementCase_ == 37;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     * @return The tryStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getTryStatement() {
      if (statementCase_ == 37) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder getTryStatementOrBuilder() {
      if (statementCase_ == 37) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
    }

    public static final int EMPTY_FIELD_NUMBER = 38;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     * @return Whether the empty field is set.
     */
    @java.lang.Override
    public boolean hasEmpty() {
      return statementCase_ == 38;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     * @return The empty.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getEmpty() {
      if (statementCase_ == 38) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder getEmptyOrBuilder() {
      if (statementCase_ == 38) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
    }

    public static final int SINGLE_LINE_COMMENT_FIELD_NUMBER = 39;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     * @return Whether the singleLineComment field is set.
     */
    @java.lang.Override
    public boolean hasSingleLineComment() {
      return statementCase_ == 39;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     * @return The singleLineComment.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getSingleLineComment() {
      if (statementCase_ == 39) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder getSingleLineCommentOrBuilder() {
      if (statementCase_ == 39) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
    }

    public static final int MULTI_LINE_COMMENT_FIELD_NUMBER = 40;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     * @return Whether the multiLineComment field is set.
     */
    @java.lang.Override
    public boolean hasMultiLineComment() {
      return statementCase_ == 40;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     * @return The multiLineComment.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getMultiLineComment() {
      if (statementCase_ == 40) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder getMultiLineCommentOrBuilder() {
      if (statementCase_ == 40) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasLocation()) {
        if (!getLocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBeforeCommentsCount(); i++) {
        if (!getBeforeComments(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAfterCommentsCount(); i++) {
        if (!getAfterComments(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReturnStatement()) {
        if (!getReturnStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasThrowStatement()) {
        if (!getThrowStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasVars()) {
        if (!getVars().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasBlock()) {
        if (!getBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCompositeBlock()) {
        if (!getCompositeBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLabel()) {
        if (!getLabel().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIfStatement()) {
        if (!getIfStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSwitchStatement()) {
        if (!getSwitchStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasWhileStatement()) {
        if (!getWhileStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDoWhileStatement()) {
        if (!getDoWhileStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasForStatement()) {
        if (!getForStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasForInStatement()) {
        if (!getForInStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTryStatement()) {
        if (!getTryStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSingleLineComment()) {
        if (!getSingleLineComment().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMultiLineComment()) {
        if (!getMultiLineComment().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, fileId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getLocation());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, synthetic_);
      }
      for (int i = 0; i < beforeComments_.size(); i++) {
        output.writeMessage(4, beforeComments_.get(i));
      }
      for (int i = 0; i < afterComments_.size(); i++) {
        output.writeMessage(5, afterComments_.get(i));
      }
      if (statementCase_ == 21) {
        output.writeMessage(21, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_);
      }
      if (statementCase_ == 22) {
        output.writeMessage(22, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_);
      }
      if (statementCase_ == 23) {
        output.writeMessage(23, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_);
      }
      if (statementCase_ == 24) {
        output.writeMessage(24, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_);
      }
      if (statementCase_ == 25) {
        output.writeMessage(25, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_);
      }
      if (statementCase_ == 26) {
        output.writeMessage(26, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_);
      }
      if (statementCase_ == 27) {
        output.writeMessage(27, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_);
      }
      if (statementCase_ == 28) {
        output.writeMessage(28, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_);
      }
      if (statementCase_ == 29) {
        output.writeMessage(29, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_);
      }
      if (statementCase_ == 30) {
        output.writeMessage(30, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_);
      }
      if (statementCase_ == 31) {
        output.writeMessage(31, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_);
      }
      if (statementCase_ == 32) {
        output.writeMessage(32, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_);
      }
      if (statementCase_ == 33) {
        output.writeMessage(33, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_);
      }
      if (statementCase_ == 34) {
        output.writeMessage(34, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_);
      }
      if (statementCase_ == 35) {
        output.writeMessage(35, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_);
      }
      if (statementCase_ == 36) {
        output.writeMessage(36, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_);
      }
      if (statementCase_ == 37) {
        output.writeMessage(37, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_);
      }
      if (statementCase_ == 38) {
        output.writeMessage(38, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_);
      }
      if (statementCase_ == 39) {
        output.writeMessage(39, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_);
      }
      if (statementCase_ == 40) {
        output.writeMessage(40, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, fileId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getLocation());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(3, synthetic_);
      }
      for (int i = 0; i < beforeComments_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, beforeComments_.get(i));
      }
      for (int i = 0; i < afterComments_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, afterComments_.get(i));
      }
      if (statementCase_ == 21) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(21, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_);
      }
      if (statementCase_ == 22) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(22, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_);
      }
      if (statementCase_ == 23) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(23, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_);
      }
      if (statementCase_ == 24) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(24, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_);
      }
      if (statementCase_ == 25) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(25, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_);
      }
      if (statementCase_ == 26) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(26, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_);
      }
      if (statementCase_ == 27) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(27, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_);
      }
      if (statementCase_ == 28) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(28, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_);
      }
      if (statementCase_ == 29) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(29, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_);
      }
      if (statementCase_ == 30) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(30, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_);
      }
      if (statementCase_ == 31) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(31, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_);
      }
      if (statementCase_ == 32) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(32, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_);
      }
      if (statementCase_ == 33) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(33, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_);
      }
      if (statementCase_ == 34) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(34, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_);
      }
      if (statementCase_ == 35) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(35, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_);
      }
      if (statementCase_ == 36) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(36, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_);
      }
      if (statementCase_ == 37) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(37, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_);
      }
      if (statementCase_ == 38) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(38, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_);
      }
      if (statementCase_ == 39) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(39, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_);
      }
      if (statementCase_ == 40) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(40, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) obj;

      if (hasFileId() != other.hasFileId()) return false;
      if (hasFileId()) {
        if (getFileId()
            != other.getFileId()) return false;
      }
      if (hasLocation() != other.hasLocation()) return false;
      if (hasLocation()) {
        if (!getLocation()
            .equals(other.getLocation())) return false;
      }
      if (hasSynthetic() != other.hasSynthetic()) return false;
      if (hasSynthetic()) {
        if (getSynthetic()
            != other.getSynthetic()) return false;
      }
      if (!getBeforeCommentsList()
          .equals(other.getBeforeCommentsList())) return false;
      if (!getAfterCommentsList()
          .equals(other.getAfterCommentsList())) return false;
      if (!getStatementCase().equals(other.getStatementCase())) return false;
      switch (statementCase_) {
        case 21:
          if (!getReturnStatement()
              .equals(other.getReturnStatement())) return false;
          break;
        case 22:
          if (!getThrowStatement()
              .equals(other.getThrowStatement())) return false;
          break;
        case 23:
          if (!getBreakStatement()
              .equals(other.getBreakStatement())) return false;
          break;
        case 24:
          if (!getContinueStatement()
              .equals(other.getContinueStatement())) return false;
          break;
        case 25:
          if (!getDebugger()
              .equals(other.getDebugger())) return false;
          break;
        case 26:
          if (!getExpression()
              .equals(other.getExpression())) return false;
          break;
        case 27:
          if (!getVars()
              .equals(other.getVars())) return false;
          break;
        case 28:
          if (!getBlock()
              .equals(other.getBlock())) return false;
          break;
        case 29:
          if (!getCompositeBlock()
              .equals(other.getCompositeBlock())) return false;
          break;
        case 30:
          if (!getLabel()
              .equals(other.getLabel())) return false;
          break;
        case 31:
          if (!getIfStatement()
              .equals(other.getIfStatement())) return false;
          break;
        case 32:
          if (!getSwitchStatement()
              .equals(other.getSwitchStatement())) return false;
          break;
        case 33:
          if (!getWhileStatement()
              .equals(other.getWhileStatement())) return false;
          break;
        case 34:
          if (!getDoWhileStatement()
              .equals(other.getDoWhileStatement())) return false;
          break;
        case 35:
          if (!getForStatement()
              .equals(other.getForStatement())) return false;
          break;
        case 36:
          if (!getForInStatement()
              .equals(other.getForInStatement())) return false;
          break;
        case 37:
          if (!getTryStatement()
              .equals(other.getTryStatement())) return false;
          break;
        case 38:
          if (!getEmpty()
              .equals(other.getEmpty())) return false;
          break;
        case 39:
          if (!getSingleLineComment()
              .equals(other.getSingleLineComment())) return false;
          break;
        case 40:
          if (!getMultiLineComment()
              .equals(other.getMultiLineComment())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFileId()) {
        hash = (37 * hash) + FILEID_FIELD_NUMBER;
        hash = (53 * hash) + getFileId();
      }
      if (hasLocation()) {
        hash = (37 * hash) + LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getLocation().hashCode();
      }
      if (hasSynthetic()) {
        hash = (37 * hash) + SYNTHETIC_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getSynthetic());
      }
      if (getBeforeCommentsCount() > 0) {
        hash = (37 * hash) + BEFORE_COMMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getBeforeCommentsList().hashCode();
      }
      if (getAfterCommentsCount() > 0) {
        hash = (37 * hash) + AFTER_COMMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getAfterCommentsList().hashCode();
      }
      switch (statementCase_) {
        case 21:
          hash = (37 * hash) + RETURN_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getReturnStatement().hashCode();
          break;
        case 22:
          hash = (37 * hash) + THROW_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getThrowStatement().hashCode();
          break;
        case 23:
          hash = (37 * hash) + BREAK_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getBreakStatement().hashCode();
          break;
        case 24:
          hash = (37 * hash) + CONTINUE_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getContinueStatement().hashCode();
          break;
        case 25:
          hash = (37 * hash) + DEBUGGER_FIELD_NUMBER;
          hash = (53 * hash) + getDebugger().hashCode();
          break;
        case 26:
          hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
          hash = (53 * hash) + getExpression().hashCode();
          break;
        case 27:
          hash = (37 * hash) + VARS_FIELD_NUMBER;
          hash = (53 * hash) + getVars().hashCode();
          break;
        case 28:
          hash = (37 * hash) + BLOCK_FIELD_NUMBER;
          hash = (53 * hash) + getBlock().hashCode();
          break;
        case 29:
          hash = (37 * hash) + COMPOSITE_BLOCK_FIELD_NUMBER;
          hash = (53 * hash) + getCompositeBlock().hashCode();
          break;
        case 30:
          hash = (37 * hash) + LABEL_FIELD_NUMBER;
          hash = (53 * hash) + getLabel().hashCode();
          break;
        case 31:
          hash = (37 * hash) + IF_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getIfStatement().hashCode();
          break;
        case 32:
          hash = (37 * hash) + SWITCH_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getSwitchStatement().hashCode();
          break;
        case 33:
          hash = (37 * hash) + WHILE_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getWhileStatement().hashCode();
          break;
        case 34:
          hash = (37 * hash) + DO_WHILE_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getDoWhileStatement().hashCode();
          break;
        case 35:
          hash = (37 * hash) + FOR_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getForStatement().hashCode();
          break;
        case 36:
          hash = (37 * hash) + FOR_IN_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getForInStatement().hashCode();
          break;
        case 37:
          hash = (37 * hash) + TRY_STATEMENT_FIELD_NUMBER;
          hash = (53 * hash) + getTryStatement().hashCode();
          break;
        case 38:
          hash = (37 * hash) + EMPTY_FIELD_NUMBER;
          hash = (53 * hash) + getEmpty().hashCode();
          break;
        case 39:
          hash = (37 * hash) + SINGLE_LINE_COMMENT_FIELD_NUMBER;
          hash = (53 * hash) + getSingleLineComment().hashCode();
          break;
        case 40:
          hash = (37 * hash) + MULTI_LINE_COMMENT_FIELD_NUMBER;
          hash = (53 * hash) + getMultiLineComment().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Statement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Statement)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getLocationFieldBuilder();
          getBeforeCommentsFieldBuilder();
          getAfterCommentsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        fileId_ = 0;
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        synthetic_ = false;
        if (beforeCommentsBuilder_ == null) {
          beforeComments_ = java.util.Collections.emptyList();
        } else {
          beforeComments_ = null;
          beforeCommentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (afterCommentsBuilder_ == null) {
          afterComments_ = java.util.Collections.emptyList();
        } else {
          afterComments_ = null;
          afterCommentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (returnStatementBuilder_ != null) {
          returnStatementBuilder_.clear();
        }
        if (throwStatementBuilder_ != null) {
          throwStatementBuilder_.clear();
        }
        if (breakStatementBuilder_ != null) {
          breakStatementBuilder_.clear();
        }
        if (continueStatementBuilder_ != null) {
          continueStatementBuilder_.clear();
        }
        if (debuggerBuilder_ != null) {
          debuggerBuilder_.clear();
        }
        if (expressionBuilder_ != null) {
          expressionBuilder_.clear();
        }
        if (varsBuilder_ != null) {
          varsBuilder_.clear();
        }
        if (blockBuilder_ != null) {
          blockBuilder_.clear();
        }
        if (compositeBlockBuilder_ != null) {
          compositeBlockBuilder_.clear();
        }
        if (labelBuilder_ != null) {
          labelBuilder_.clear();
        }
        if (ifStatementBuilder_ != null) {
          ifStatementBuilder_.clear();
        }
        if (switchStatementBuilder_ != null) {
          switchStatementBuilder_.clear();
        }
        if (whileStatementBuilder_ != null) {
          whileStatementBuilder_.clear();
        }
        if (doWhileStatementBuilder_ != null) {
          doWhileStatementBuilder_.clear();
        }
        if (forStatementBuilder_ != null) {
          forStatementBuilder_.clear();
        }
        if (forInStatementBuilder_ != null) {
          forInStatementBuilder_.clear();
        }
        if (tryStatementBuilder_ != null) {
          tryStatementBuilder_.clear();
        }
        if (emptyBuilder_ != null) {
          emptyBuilder_.clear();
        }
        if (singleLineCommentBuilder_ != null) {
          singleLineCommentBuilder_.clear();
        }
        if (multiLineCommentBuilder_ != null) {
          multiLineCommentBuilder_.clear();
        }
        statementCase_ = 0;
        statement_ = null;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement result) {
        if (beforeCommentsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            beforeComments_ = java.util.Collections.unmodifiableList(beforeComments_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.beforeComments_ = beforeComments_;
        } else {
          result.beforeComments_ = beforeCommentsBuilder_.build();
        }
        if (afterCommentsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            afterComments_ = java.util.Collections.unmodifiableList(afterComments_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.afterComments_ = afterComments_;
        } else {
          result.afterComments_ = afterCommentsBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.fileId_ = fileId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.location_ = locationBuilder_ == null
              ? location_
              : locationBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.synthetic_ = synthetic_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement result) {
        result.statementCase_ = statementCase_;
        result.statement_ = this.statement_;
        if (statementCase_ == 21 &&
            returnStatementBuilder_ != null) {
          result.statement_ = returnStatementBuilder_.build();
        }
        if (statementCase_ == 22 &&
            throwStatementBuilder_ != null) {
          result.statement_ = throwStatementBuilder_.build();
        }
        if (statementCase_ == 23 &&
            breakStatementBuilder_ != null) {
          result.statement_ = breakStatementBuilder_.build();
        }
        if (statementCase_ == 24 &&
            continueStatementBuilder_ != null) {
          result.statement_ = continueStatementBuilder_.build();
        }
        if (statementCase_ == 25 &&
            debuggerBuilder_ != null) {
          result.statement_ = debuggerBuilder_.build();
        }
        if (statementCase_ == 26 &&
            expressionBuilder_ != null) {
          result.statement_ = expressionBuilder_.build();
        }
        if (statementCase_ == 27 &&
            varsBuilder_ != null) {
          result.statement_ = varsBuilder_.build();
        }
        if (statementCase_ == 28 &&
            blockBuilder_ != null) {
          result.statement_ = blockBuilder_.build();
        }
        if (statementCase_ == 29 &&
            compositeBlockBuilder_ != null) {
          result.statement_ = compositeBlockBuilder_.build();
        }
        if (statementCase_ == 30 &&
            labelBuilder_ != null) {
          result.statement_ = labelBuilder_.build();
        }
        if (statementCase_ == 31 &&
            ifStatementBuilder_ != null) {
          result.statement_ = ifStatementBuilder_.build();
        }
        if (statementCase_ == 32 &&
            switchStatementBuilder_ != null) {
          result.statement_ = switchStatementBuilder_.build();
        }
        if (statementCase_ == 33 &&
            whileStatementBuilder_ != null) {
          result.statement_ = whileStatementBuilder_.build();
        }
        if (statementCase_ == 34 &&
            doWhileStatementBuilder_ != null) {
          result.statement_ = doWhileStatementBuilder_.build();
        }
        if (statementCase_ == 35 &&
            forStatementBuilder_ != null) {
          result.statement_ = forStatementBuilder_.build();
        }
        if (statementCase_ == 36 &&
            forInStatementBuilder_ != null) {
          result.statement_ = forInStatementBuilder_.build();
        }
        if (statementCase_ == 37 &&
            tryStatementBuilder_ != null) {
          result.statement_ = tryStatementBuilder_.build();
        }
        if (statementCase_ == 38 &&
            emptyBuilder_ != null) {
          result.statement_ = emptyBuilder_.build();
        }
        if (statementCase_ == 39 &&
            singleLineCommentBuilder_ != null) {
          result.statement_ = singleLineCommentBuilder_.build();
        }
        if (statementCase_ == 40 &&
            multiLineCommentBuilder_ != null) {
          result.statement_ = multiLineCommentBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) return this;
        if (other.hasFileId()) {
          setFileId(other.getFileId());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasSynthetic()) {
          setSynthetic(other.getSynthetic());
        }
        if (beforeCommentsBuilder_ == null) {
          if (!other.beforeComments_.isEmpty()) {
            if (beforeComments_.isEmpty()) {
              beforeComments_ = other.beforeComments_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureBeforeCommentsIsMutable();
              beforeComments_.addAll(other.beforeComments_);
            }
            onChanged();
          }
        } else {
          if (!other.beforeComments_.isEmpty()) {
            if (beforeCommentsBuilder_.isEmpty()) {
              beforeCommentsBuilder_.dispose();
              beforeCommentsBuilder_ = null;
              beforeComments_ = other.beforeComments_;
              bitField0_ = (bitField0_ & ~0x00000008);
              beforeCommentsBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBeforeCommentsFieldBuilder() : null;
            } else {
              beforeCommentsBuilder_.addAllMessages(other.beforeComments_);
            }
          }
        }
        if (afterCommentsBuilder_ == null) {
          if (!other.afterComments_.isEmpty()) {
            if (afterComments_.isEmpty()) {
              afterComments_ = other.afterComments_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureAfterCommentsIsMutable();
              afterComments_.addAll(other.afterComments_);
            }
            onChanged();
          }
        } else {
          if (!other.afterComments_.isEmpty()) {
            if (afterCommentsBuilder_.isEmpty()) {
              afterCommentsBuilder_.dispose();
              afterCommentsBuilder_ = null;
              afterComments_ = other.afterComments_;
              bitField0_ = (bitField0_ & ~0x00000010);
              afterCommentsBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAfterCommentsFieldBuilder() : null;
            } else {
              afterCommentsBuilder_.addAllMessages(other.afterComments_);
            }
          }
        }
        switch (other.getStatementCase()) {
          case RETURN_STATEMENT: {
            mergeReturnStatement(other.getReturnStatement());
            break;
          }
          case THROW_STATEMENT: {
            mergeThrowStatement(other.getThrowStatement());
            break;
          }
          case BREAK_STATEMENT: {
            mergeBreakStatement(other.getBreakStatement());
            break;
          }
          case CONTINUE_STATEMENT: {
            mergeContinueStatement(other.getContinueStatement());
            break;
          }
          case DEBUGGER: {
            mergeDebugger(other.getDebugger());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case VARS: {
            mergeVars(other.getVars());
            break;
          }
          case BLOCK: {
            mergeBlock(other.getBlock());
            break;
          }
          case COMPOSITE_BLOCK: {
            mergeCompositeBlock(other.getCompositeBlock());
            break;
          }
          case LABEL: {
            mergeLabel(other.getLabel());
            break;
          }
          case IF_STATEMENT: {
            mergeIfStatement(other.getIfStatement());
            break;
          }
          case SWITCH_STATEMENT: {
            mergeSwitchStatement(other.getSwitchStatement());
            break;
          }
          case WHILE_STATEMENT: {
            mergeWhileStatement(other.getWhileStatement());
            break;
          }
          case DO_WHILE_STATEMENT: {
            mergeDoWhileStatement(other.getDoWhileStatement());
            break;
          }
          case FOR_STATEMENT: {
            mergeForStatement(other.getForStatement());
            break;
          }
          case FOR_IN_STATEMENT: {
            mergeForInStatement(other.getForInStatement());
            break;
          }
          case TRY_STATEMENT: {
            mergeTryStatement(other.getTryStatement());
            break;
          }
          case EMPTY: {
            mergeEmpty(other.getEmpty());
            break;
          }
          case SINGLE_LINE_COMMENT: {
            mergeSingleLineComment(other.getSingleLineComment());
            break;
          }
          case MULTI_LINE_COMMENT: {
            mergeMultiLineComment(other.getMultiLineComment());
            break;
          }
          case STATEMENT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasLocation()) {
          if (!getLocation().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getBeforeCommentsCount(); i++) {
          if (!getBeforeComments(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getAfterCommentsCount(); i++) {
          if (!getAfterComments(i).isInitialized()) {
            return false;
          }
        }
        if (hasReturnStatement()) {
          if (!getReturnStatement().isInitialized()) {
            return false;
          }
        }
        if (hasThrowStatement()) {
          if (!getThrowStatement().isInitialized()) {
            return false;
          }
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            return false;
          }
        }
        if (hasVars()) {
          if (!getVars().isInitialized()) {
            return false;
          }
        }
        if (hasBlock()) {
          if (!getBlock().isInitialized()) {
            return false;
          }
        }
        if (hasCompositeBlock()) {
          if (!getCompositeBlock().isInitialized()) {
            return false;
          }
        }
        if (hasLabel()) {
          if (!getLabel().isInitialized()) {
            return false;
          }
        }
        if (hasIfStatement()) {
          if (!getIfStatement().isInitialized()) {
            return false;
          }
        }
        if (hasSwitchStatement()) {
          if (!getSwitchStatement().isInitialized()) {
            return false;
          }
        }
        if (hasWhileStatement()) {
          if (!getWhileStatement().isInitialized()) {
            return false;
          }
        }
        if (hasDoWhileStatement()) {
          if (!getDoWhileStatement().isInitialized()) {
            return false;
          }
        }
        if (hasForStatement()) {
          if (!getForStatement().isInitialized()) {
            return false;
          }
        }
        if (hasForInStatement()) {
          if (!getForInStatement().isInitialized()) {
            return false;
          }
        }
        if (hasTryStatement()) {
          if (!getTryStatement().isInitialized()) {
            return false;
          }
        }
        if (hasSingleLineComment()) {
          if (!getSingleLineComment().isInitialized()) {
            return false;
          }
        }
        if (hasMultiLineComment()) {
          if (!getMultiLineComment().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                fileId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getLocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                synthetic_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.parser(),
                        extensionRegistry);
                if (beforeCommentsBuilder_ == null) {
                  ensureBeforeCommentsIsMutable();
                  beforeComments_.add(m);
                } else {
                  beforeCommentsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.parser(),
                        extensionRegistry);
                if (afterCommentsBuilder_ == null) {
                  ensureAfterCommentsIsMutable();
                  afterComments_.add(m);
                } else {
                  afterCommentsBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 170: {
                input.readMessage(
                    getReturnStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 21;
                break;
              } // case 170
              case 178: {
                input.readMessage(
                    getThrowStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 22;
                break;
              } // case 178
              case 186: {
                input.readMessage(
                    getBreakStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 23;
                break;
              } // case 186
              case 194: {
                input.readMessage(
                    getContinueStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 24;
                break;
              } // case 194
              case 202: {
                input.readMessage(
                    getDebuggerFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 25;
                break;
              } // case 202
              case 210: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 26;
                break;
              } // case 210
              case 218: {
                input.readMessage(
                    getVarsFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 27;
                break;
              } // case 218
              case 226: {
                input.readMessage(
                    getBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 28;
                break;
              } // case 226
              case 234: {
                input.readMessage(
                    getCompositeBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 29;
                break;
              } // case 234
              case 242: {
                input.readMessage(
                    getLabelFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 30;
                break;
              } // case 242
              case 250: {
                input.readMessage(
                    getIfStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 31;
                break;
              } // case 250
              case 258: {
                input.readMessage(
                    getSwitchStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 32;
                break;
              } // case 258
              case 266: {
                input.readMessage(
                    getWhileStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 33;
                break;
              } // case 266
              case 274: {
                input.readMessage(
                    getDoWhileStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 34;
                break;
              } // case 274
              case 282: {
                input.readMessage(
                    getForStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 35;
                break;
              } // case 282
              case 290: {
                input.readMessage(
                    getForInStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 36;
                break;
              } // case 290
              case 298: {
                input.readMessage(
                    getTryStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 37;
                break;
              } // case 298
              case 306: {
                input.readMessage(
                    getEmptyFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 38;
                break;
              } // case 306
              case 314: {
                input.readMessage(
                    getSingleLineCommentFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 39;
                break;
              } // case 314
              case 322: {
                input.readMessage(
                    getMultiLineCommentFieldBuilder().getBuilder(),
                    extensionRegistry);
                statementCase_ = 40;
                break;
              } // case 322
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int statementCase_ = 0;
      private java.lang.Object statement_;
      public StatementCase
          getStatementCase() {
        return StatementCase.forNumber(
            statementCase_);
      }

      public Builder clearStatement() {
        statementCase_ = 0;
        statement_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int fileId_ ;
      /**
       * <code>int32 fileId = 1;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return fileId_;
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {

        fileId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 fileId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fileId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> locationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       * @return Whether the location field is set.
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       * @return The location.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        if (locationBuilder_ == null) {
          return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            location_ != null &&
            location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
            getLocationBuilder().mergeFrom(value);
          } else {
            location_ = value;
          }
        } else {
          locationBuilder_.mergeFrom(value);
        }
        if (location_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public Builder clearLocation() {
        bitField0_ = (bitField0_ & ~0x00000002);
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder getLocationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      private boolean synthetic_ ;
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return Whether the synthetic field is set.
       */
      @java.lang.Override
      public boolean hasSynthetic() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return The synthetic.
       */
      @java.lang.Override
      public boolean getSynthetic() {
        return synthetic_;
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @param value The synthetic to set.
       * @return This builder for chaining.
       */
      public Builder setSynthetic(boolean value) {

        synthetic_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bool synthetic = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearSynthetic() {
        bitField0_ = (bitField0_ & ~0x00000004);
        synthetic_ = false;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> beforeComments_ =
        java.util.Collections.emptyList();
      private void ensureBeforeCommentsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          beforeComments_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment>(beforeComments_);
          bitField0_ |= 0x00000008;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> beforeCommentsBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getBeforeCommentsList() {
        if (beforeCommentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(beforeComments_);
        } else {
          return beforeCommentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public int getBeforeCommentsCount() {
        if (beforeCommentsBuilder_ == null) {
          return beforeComments_.size();
        } else {
          return beforeCommentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getBeforeComments(int index) {
        if (beforeCommentsBuilder_ == null) {
          return beforeComments_.get(index);
        } else {
          return beforeCommentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (beforeCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeforeCommentsIsMutable();
          beforeComments_.set(index, value);
          onChanged();
        } else {
          beforeCommentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder setBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.set(index, builderForValue.build());
          onChanged();
        } else {
          beforeCommentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (beforeCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(value);
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (beforeCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(index, value);
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(builderForValue.build());
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addBeforeComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.add(index, builderForValue.build());
          onChanged();
        } else {
          beforeCommentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder addAllBeforeComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, beforeComments_);
          onChanged();
        } else {
          beforeCommentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder clearBeforeComments() {
        if (beforeCommentsBuilder_ == null) {
          beforeComments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          beforeCommentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public Builder removeBeforeComments(int index) {
        if (beforeCommentsBuilder_ == null) {
          ensureBeforeCommentsIsMutable();
          beforeComments_.remove(index);
          onChanged();
        } else {
          beforeCommentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder getBeforeCommentsBuilder(
          int index) {
        return getBeforeCommentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getBeforeCommentsOrBuilder(
          int index) {
        if (beforeCommentsBuilder_ == null) {
          return beforeComments_.get(index);  } else {
          return beforeCommentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
           getBeforeCommentsOrBuilderList() {
        if (beforeCommentsBuilder_ != null) {
          return beforeCommentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(beforeComments_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addBeforeCommentsBuilder() {
        return getBeforeCommentsFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addBeforeCommentsBuilder(
          int index) {
        return getBeforeCommentsFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment before_comments = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder> 
           getBeforeCommentsBuilderList() {
        return getBeforeCommentsFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
          getBeforeCommentsFieldBuilder() {
        if (beforeCommentsBuilder_ == null) {
          beforeCommentsBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder>(
                  beforeComments_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          beforeComments_ = null;
        }
        return beforeCommentsBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> afterComments_ =
        java.util.Collections.emptyList();
      private void ensureAfterCommentsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          afterComments_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment>(afterComments_);
          bitField0_ |= 0x00000010;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> afterCommentsBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> getAfterCommentsList() {
        if (afterCommentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(afterComments_);
        } else {
          return afterCommentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public int getAfterCommentsCount() {
        if (afterCommentsBuilder_ == null) {
          return afterComments_.size();
        } else {
          return afterCommentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment getAfterComments(int index) {
        if (afterCommentsBuilder_ == null) {
          return afterComments_.get(index);
        } else {
          return afterCommentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (afterCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAfterCommentsIsMutable();
          afterComments_.set(index, value);
          onChanged();
        } else {
          afterCommentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder setAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.set(index, builderForValue.build());
          onChanged();
        } else {
          afterCommentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (afterCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAfterCommentsIsMutable();
          afterComments_.add(value);
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment value) {
        if (afterCommentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAfterCommentsIsMutable();
          afterComments_.add(index, value);
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.add(builderForValue.build());
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAfterComments(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder builderForValue) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.add(index, builderForValue.build());
          onChanged();
        } else {
          afterCommentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder addAllAfterComments(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment> values) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, afterComments_);
          onChanged();
        } else {
          afterCommentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder clearAfterComments() {
        if (afterCommentsBuilder_ == null) {
          afterComments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          afterCommentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public Builder removeAfterComments(int index) {
        if (afterCommentsBuilder_ == null) {
          ensureAfterCommentsIsMutable();
          afterComments_.remove(index);
          onChanged();
        } else {
          afterCommentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder getAfterCommentsBuilder(
          int index) {
        return getAfterCommentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder getAfterCommentsOrBuilder(
          int index) {
        if (afterCommentsBuilder_ == null) {
          return afterComments_.get(index);  } else {
          return afterCommentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
           getAfterCommentsOrBuilderList() {
        if (afterCommentsBuilder_ != null) {
          return afterCommentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(afterComments_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addAfterCommentsBuilder() {
        return getAfterCommentsFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder addAfterCommentsBuilder(
          int index) {
        return getAfterCommentsFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Comment after_comments = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder> 
           getAfterCommentsBuilderList() {
        return getAfterCommentsFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder> 
          getAfterCommentsFieldBuilder() {
        if (afterCommentsBuilder_ == null) {
          afterCommentsBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Comment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CommentOrBuilder>(
                  afterComments_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          afterComments_ = null;
        }
        return afterCommentsBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder> returnStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       * @return Whether the returnStatement field is set.
       */
      @java.lang.Override
      public boolean hasReturnStatement() {
        return statementCase_ == 21;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       * @return The returnStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getReturnStatement() {
        if (returnStatementBuilder_ == null) {
          if (statementCase_ == 21) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
        } else {
          if (statementCase_ == 21) {
            return returnStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder setReturnStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return value) {
        if (returnStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          returnStatementBuilder_.setMessage(value);
        }
        statementCase_ = 21;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder setReturnStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder builderForValue) {
        if (returnStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          returnStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 21;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder mergeReturnStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return value) {
        if (returnStatementBuilder_ == null) {
          if (statementCase_ == 21 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 21) {
            returnStatementBuilder_.mergeFrom(value);
          } else {
            returnStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 21;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public Builder clearReturnStatement() {
        if (returnStatementBuilder_ == null) {
          if (statementCase_ == 21) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 21) {
            statementCase_ = 0;
            statement_ = null;
          }
          returnStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder getReturnStatementBuilder() {
        return getReturnStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder getReturnStatementOrBuilder() {
        if ((statementCase_ == 21) && (returnStatementBuilder_ != null)) {
          return returnStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 21) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Return return_statement = 21;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder> 
          getReturnStatementFieldBuilder() {
        if (returnStatementBuilder_ == null) {
          if (!(statementCase_ == 21)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
          }
          returnStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 21;
        onChanged();
        return returnStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder> throwStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       * @return Whether the throwStatement field is set.
       */
      @java.lang.Override
      public boolean hasThrowStatement() {
        return statementCase_ == 22;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       * @return The throwStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getThrowStatement() {
        if (throwStatementBuilder_ == null) {
          if (statementCase_ == 22) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
        } else {
          if (statementCase_ == 22) {
            return throwStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder setThrowStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw value) {
        if (throwStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          throwStatementBuilder_.setMessage(value);
        }
        statementCase_ = 22;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder setThrowStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder builderForValue) {
        if (throwStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          throwStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 22;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder mergeThrowStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw value) {
        if (throwStatementBuilder_ == null) {
          if (statementCase_ == 22 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 22) {
            throwStatementBuilder_.mergeFrom(value);
          } else {
            throwStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 22;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public Builder clearThrowStatement() {
        if (throwStatementBuilder_ == null) {
          if (statementCase_ == 22) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 22) {
            statementCase_ = 0;
            statement_ = null;
          }
          throwStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder getThrowStatementBuilder() {
        return getThrowStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder getThrowStatementOrBuilder() {
        if ((statementCase_ == 22) && (throwStatementBuilder_ != null)) {
          return throwStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 22) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Throw throw_statement = 22;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder> 
          getThrowStatementFieldBuilder() {
        if (throwStatementBuilder_ == null) {
          if (!(statementCase_ == 22)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
          }
          throwStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 22;
        onChanged();
        return throwStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder> breakStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       * @return Whether the breakStatement field is set.
       */
      @java.lang.Override
      public boolean hasBreakStatement() {
        return statementCase_ == 23;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       * @return The breakStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getBreakStatement() {
        if (breakStatementBuilder_ == null) {
          if (statementCase_ == 23) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
        } else {
          if (statementCase_ == 23) {
            return breakStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder setBreakStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break value) {
        if (breakStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          breakStatementBuilder_.setMessage(value);
        }
        statementCase_ = 23;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder setBreakStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder builderForValue) {
        if (breakStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          breakStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 23;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder mergeBreakStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break value) {
        if (breakStatementBuilder_ == null) {
          if (statementCase_ == 23 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 23) {
            breakStatementBuilder_.mergeFrom(value);
          } else {
            breakStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 23;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public Builder clearBreakStatement() {
        if (breakStatementBuilder_ == null) {
          if (statementCase_ == 23) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 23) {
            statementCase_ = 0;
            statement_ = null;
          }
          breakStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder getBreakStatementBuilder() {
        return getBreakStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder getBreakStatementOrBuilder() {
        if ((statementCase_ == 23) && (breakStatementBuilder_ != null)) {
          return breakStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 23) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Break break_statement = 23;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder> 
          getBreakStatementFieldBuilder() {
        if (breakStatementBuilder_ == null) {
          if (!(statementCase_ == 23)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
          }
          breakStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 23;
        onChanged();
        return breakStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder> continueStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       * @return Whether the continueStatement field is set.
       */
      @java.lang.Override
      public boolean hasContinueStatement() {
        return statementCase_ == 24;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       * @return The continueStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getContinueStatement() {
        if (continueStatementBuilder_ == null) {
          if (statementCase_ == 24) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
        } else {
          if (statementCase_ == 24) {
            return continueStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder setContinueStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue value) {
        if (continueStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          continueStatementBuilder_.setMessage(value);
        }
        statementCase_ = 24;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder setContinueStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder builderForValue) {
        if (continueStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          continueStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 24;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder mergeContinueStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue value) {
        if (continueStatementBuilder_ == null) {
          if (statementCase_ == 24 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 24) {
            continueStatementBuilder_.mergeFrom(value);
          } else {
            continueStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 24;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public Builder clearContinueStatement() {
        if (continueStatementBuilder_ == null) {
          if (statementCase_ == 24) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 24) {
            statementCase_ = 0;
            statement_ = null;
          }
          continueStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder getContinueStatementBuilder() {
        return getContinueStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder getContinueStatementOrBuilder() {
        if ((statementCase_ == 24) && (continueStatementBuilder_ != null)) {
          return continueStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 24) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Continue continue_statement = 24;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder> 
          getContinueStatementFieldBuilder() {
        if (continueStatementBuilder_ == null) {
          if (!(statementCase_ == 24)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
          }
          continueStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 24;
        onChanged();
        return continueStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder> debuggerBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       * @return Whether the debugger field is set.
       */
      @java.lang.Override
      public boolean hasDebugger() {
        return statementCase_ == 25;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       * @return The debugger.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDebugger() {
        if (debuggerBuilder_ == null) {
          if (statementCase_ == 25) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
        } else {
          if (statementCase_ == 25) {
            return debuggerBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder setDebugger(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger value) {
        if (debuggerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          debuggerBuilder_.setMessage(value);
        }
        statementCase_ = 25;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder setDebugger(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder builderForValue) {
        if (debuggerBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          debuggerBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 25;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder mergeDebugger(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger value) {
        if (debuggerBuilder_ == null) {
          if (statementCase_ == 25 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 25) {
            debuggerBuilder_.mergeFrom(value);
          } else {
            debuggerBuilder_.setMessage(value);
          }
        }
        statementCase_ = 25;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public Builder clearDebugger() {
        if (debuggerBuilder_ == null) {
          if (statementCase_ == 25) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 25) {
            statementCase_ = 0;
            statement_ = null;
          }
          debuggerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder getDebuggerBuilder() {
        return getDebuggerFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder getDebuggerOrBuilder() {
        if ((statementCase_ == 25) && (debuggerBuilder_ != null)) {
          return debuggerBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 25) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Debugger debugger = 25;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder> 
          getDebuggerFieldBuilder() {
        if (debuggerBuilder_ == null) {
          if (!(statementCase_ == 25)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
          }
          debuggerBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 25;
        onChanged();
        return debuggerBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       * @return Whether the expression field is set.
       */
      @java.lang.Override
      public boolean hasExpression() {
        return statementCase_ == 26;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       * @return The expression.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getExpression() {
        if (expressionBuilder_ == null) {
          if (statementCase_ == 26) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
        } else {
          if (statementCase_ == 26) {
            return expressionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        statementCase_ = 26;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 26;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement value) {
        if (expressionBuilder_ == null) {
          if (statementCase_ == 26 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 26) {
            expressionBuilder_.mergeFrom(value);
          } else {
            expressionBuilder_.setMessage(value);
          }
        }
        statementCase_ = 26;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          if (statementCase_ == 26) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 26) {
            statementCase_ = 0;
            statement_ = null;
          }
          expressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder getExpressionBuilder() {
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder getExpressionOrBuilder() {
        if ((statementCase_ == 26) && (expressionBuilder_ != null)) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 26) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement expression = 26;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          if (!(statementCase_ == 26)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
          }
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 26;
        onChanged();
        return expressionBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder> varsBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       * @return Whether the vars field is set.
       */
      @java.lang.Override
      public boolean hasVars() {
        return statementCase_ == 27;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       * @return The vars.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getVars() {
        if (varsBuilder_ == null) {
          if (statementCase_ == 27) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
        } else {
          if (statementCase_ == 27) {
            return varsBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder setVars(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars value) {
        if (varsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          varsBuilder_.setMessage(value);
        }
        statementCase_ = 27;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder setVars(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder builderForValue) {
        if (varsBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          varsBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 27;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder mergeVars(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars value) {
        if (varsBuilder_ == null) {
          if (statementCase_ == 27 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 27) {
            varsBuilder_.mergeFrom(value);
          } else {
            varsBuilder_.setMessage(value);
          }
        }
        statementCase_ = 27;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public Builder clearVars() {
        if (varsBuilder_ == null) {
          if (statementCase_ == 27) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 27) {
            statementCase_ = 0;
            statement_ = null;
          }
          varsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder getVarsBuilder() {
        return getVarsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder getVarsOrBuilder() {
        if ((statementCase_ == 27) && (varsBuilder_ != null)) {
          return varsBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 27) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Vars vars = 27;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder> 
          getVarsFieldBuilder() {
        if (varsBuilder_ == null) {
          if (!(statementCase_ == 27)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
          }
          varsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 27;
        onChanged();
        return varsBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder> blockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       * @return Whether the block field is set.
       */
      @java.lang.Override
      public boolean hasBlock() {
        return statementCase_ == 28;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       * @return The block.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getBlock() {
        if (blockBuilder_ == null) {
          if (statementCase_ == 28) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
        } else {
          if (statementCase_ == 28) {
            return blockBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder setBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block value) {
        if (blockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          blockBuilder_.setMessage(value);
        }
        statementCase_ = 28;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder setBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder builderForValue) {
        if (blockBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          blockBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 28;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder mergeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block value) {
        if (blockBuilder_ == null) {
          if (statementCase_ == 28 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 28) {
            blockBuilder_.mergeFrom(value);
          } else {
            blockBuilder_.setMessage(value);
          }
        }
        statementCase_ = 28;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public Builder clearBlock() {
        if (blockBuilder_ == null) {
          if (statementCase_ == 28) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 28) {
            statementCase_ = 0;
            statement_ = null;
          }
          blockBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder getBlockBuilder() {
        return getBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder getBlockOrBuilder() {
        if ((statementCase_ == 28) && (blockBuilder_ != null)) {
          return blockBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 28) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Block block = 28;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder> 
          getBlockFieldBuilder() {
        if (blockBuilder_ == null) {
          if (!(statementCase_ == 28)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
          }
          blockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 28;
        onChanged();
        return blockBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> compositeBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       * @return Whether the compositeBlock field is set.
       */
      @java.lang.Override
      public boolean hasCompositeBlock() {
        return statementCase_ == 29;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       * @return The compositeBlock.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getCompositeBlock() {
        if (compositeBlockBuilder_ == null) {
          if (statementCase_ == 29) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
        } else {
          if (statementCase_ == 29) {
            return compositeBlockBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder setCompositeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (compositeBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          compositeBlockBuilder_.setMessage(value);
        }
        statementCase_ = 29;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder setCompositeBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (compositeBlockBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          compositeBlockBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 29;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder mergeCompositeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (compositeBlockBuilder_ == null) {
          if (statementCase_ == 29 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 29) {
            compositeBlockBuilder_.mergeFrom(value);
          } else {
            compositeBlockBuilder_.setMessage(value);
          }
        }
        statementCase_ = 29;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public Builder clearCompositeBlock() {
        if (compositeBlockBuilder_ == null) {
          if (statementCase_ == 29) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 29) {
            statementCase_ = 0;
            statement_ = null;
          }
          compositeBlockBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getCompositeBlockBuilder() {
        return getCompositeBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getCompositeBlockOrBuilder() {
        if ((statementCase_ == 29) && (compositeBlockBuilder_ != null)) {
          return compositeBlockBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 29) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock composite_block = 29;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getCompositeBlockFieldBuilder() {
        if (compositeBlockBuilder_ == null) {
          if (!(statementCase_ == 29)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
          }
          compositeBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 29;
        onChanged();
        return compositeBlockBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder> labelBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       * @return Whether the label field is set.
       */
      @java.lang.Override
      public boolean hasLabel() {
        return statementCase_ == 30;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       * @return The label.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getLabel() {
        if (labelBuilder_ == null) {
          if (statementCase_ == 30) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
        } else {
          if (statementCase_ == 30) {
            return labelBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder setLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          labelBuilder_.setMessage(value);
        }
        statementCase_ = 30;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder setLabel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder builderForValue) {
        if (labelBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          labelBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 30;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder mergeLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label value) {
        if (labelBuilder_ == null) {
          if (statementCase_ == 30 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 30) {
            labelBuilder_.mergeFrom(value);
          } else {
            labelBuilder_.setMessage(value);
          }
        }
        statementCase_ = 30;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public Builder clearLabel() {
        if (labelBuilder_ == null) {
          if (statementCase_ == 30) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 30) {
            statementCase_ = 0;
            statement_ = null;
          }
          labelBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder getLabelBuilder() {
        return getLabelFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder getLabelOrBuilder() {
        if ((statementCase_ == 30) && (labelBuilder_ != null)) {
          return labelBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 30) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Label label = 30;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder> 
          getLabelFieldBuilder() {
        if (labelBuilder_ == null) {
          if (!(statementCase_ == 30)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
          }
          labelBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 30;
        onChanged();
        return labelBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder> ifStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       * @return Whether the ifStatement field is set.
       */
      @java.lang.Override
      public boolean hasIfStatement() {
        return statementCase_ == 31;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       * @return The ifStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getIfStatement() {
        if (ifStatementBuilder_ == null) {
          if (statementCase_ == 31) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
        } else {
          if (statementCase_ == 31) {
            return ifStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder setIfStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If value) {
        if (ifStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          ifStatementBuilder_.setMessage(value);
        }
        statementCase_ = 31;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder setIfStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder builderForValue) {
        if (ifStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          ifStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 31;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder mergeIfStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If value) {
        if (ifStatementBuilder_ == null) {
          if (statementCase_ == 31 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 31) {
            ifStatementBuilder_.mergeFrom(value);
          } else {
            ifStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 31;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public Builder clearIfStatement() {
        if (ifStatementBuilder_ == null) {
          if (statementCase_ == 31) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 31) {
            statementCase_ = 0;
            statement_ = null;
          }
          ifStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder getIfStatementBuilder() {
        return getIfStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder getIfStatementOrBuilder() {
        if ((statementCase_ == 31) && (ifStatementBuilder_ != null)) {
          return ifStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 31) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.If if_statement = 31;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder> 
          getIfStatementFieldBuilder() {
        if (ifStatementBuilder_ == null) {
          if (!(statementCase_ == 31)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
          }
          ifStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 31;
        onChanged();
        return ifStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder> switchStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       * @return Whether the switchStatement field is set.
       */
      @java.lang.Override
      public boolean hasSwitchStatement() {
        return statementCase_ == 32;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       * @return The switchStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getSwitchStatement() {
        if (switchStatementBuilder_ == null) {
          if (statementCase_ == 32) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
        } else {
          if (statementCase_ == 32) {
            return switchStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder setSwitchStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch value) {
        if (switchStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          switchStatementBuilder_.setMessage(value);
        }
        statementCase_ = 32;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder setSwitchStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder builderForValue) {
        if (switchStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          switchStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 32;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder mergeSwitchStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch value) {
        if (switchStatementBuilder_ == null) {
          if (statementCase_ == 32 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 32) {
            switchStatementBuilder_.mergeFrom(value);
          } else {
            switchStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 32;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public Builder clearSwitchStatement() {
        if (switchStatementBuilder_ == null) {
          if (statementCase_ == 32) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 32) {
            statementCase_ = 0;
            statement_ = null;
          }
          switchStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder getSwitchStatementBuilder() {
        return getSwitchStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder getSwitchStatementOrBuilder() {
        if ((statementCase_ == 32) && (switchStatementBuilder_ != null)) {
          return switchStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 32) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Switch switch_statement = 32;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder> 
          getSwitchStatementFieldBuilder() {
        if (switchStatementBuilder_ == null) {
          if (!(statementCase_ == 32)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
          }
          switchStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 32;
        onChanged();
        return switchStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder> whileStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       * @return Whether the whileStatement field is set.
       */
      @java.lang.Override
      public boolean hasWhileStatement() {
        return statementCase_ == 33;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       * @return The whileStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getWhileStatement() {
        if (whileStatementBuilder_ == null) {
          if (statementCase_ == 33) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
        } else {
          if (statementCase_ == 33) {
            return whileStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder setWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While value) {
        if (whileStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          whileStatementBuilder_.setMessage(value);
        }
        statementCase_ = 33;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder setWhileStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder builderForValue) {
        if (whileStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          whileStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 33;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder mergeWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While value) {
        if (whileStatementBuilder_ == null) {
          if (statementCase_ == 33 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 33) {
            whileStatementBuilder_.mergeFrom(value);
          } else {
            whileStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 33;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public Builder clearWhileStatement() {
        if (whileStatementBuilder_ == null) {
          if (statementCase_ == 33) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 33) {
            statementCase_ = 0;
            statement_ = null;
          }
          whileStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder getWhileStatementBuilder() {
        return getWhileStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder getWhileStatementOrBuilder() {
        if ((statementCase_ == 33) && (whileStatementBuilder_ != null)) {
          return whileStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 33) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.While while_statement = 33;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder> 
          getWhileStatementFieldBuilder() {
        if (whileStatementBuilder_ == null) {
          if (!(statementCase_ == 33)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
          }
          whileStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 33;
        onChanged();
        return whileStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder> doWhileStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       * @return Whether the doWhileStatement field is set.
       */
      @java.lang.Override
      public boolean hasDoWhileStatement() {
        return statementCase_ == 34;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       * @return The doWhileStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDoWhileStatement() {
        if (doWhileStatementBuilder_ == null) {
          if (statementCase_ == 34) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
        } else {
          if (statementCase_ == 34) {
            return doWhileStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder setDoWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile value) {
        if (doWhileStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          doWhileStatementBuilder_.setMessage(value);
        }
        statementCase_ = 34;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder setDoWhileStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder builderForValue) {
        if (doWhileStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          doWhileStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 34;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder mergeDoWhileStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile value) {
        if (doWhileStatementBuilder_ == null) {
          if (statementCase_ == 34 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 34) {
            doWhileStatementBuilder_.mergeFrom(value);
          } else {
            doWhileStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 34;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public Builder clearDoWhileStatement() {
        if (doWhileStatementBuilder_ == null) {
          if (statementCase_ == 34) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 34) {
            statementCase_ = 0;
            statement_ = null;
          }
          doWhileStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder getDoWhileStatementBuilder() {
        return getDoWhileStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder getDoWhileStatementOrBuilder() {
        if ((statementCase_ == 34) && (doWhileStatementBuilder_ != null)) {
          return doWhileStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 34) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.DoWhile do_while_statement = 34;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder> 
          getDoWhileStatementFieldBuilder() {
        if (doWhileStatementBuilder_ == null) {
          if (!(statementCase_ == 34)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
          }
          doWhileStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 34;
        onChanged();
        return doWhileStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder> forStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       * @return Whether the forStatement field is set.
       */
      @java.lang.Override
      public boolean hasForStatement() {
        return statementCase_ == 35;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       * @return The forStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getForStatement() {
        if (forStatementBuilder_ == null) {
          if (statementCase_ == 35) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
        } else {
          if (statementCase_ == 35) {
            return forStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder setForStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For value) {
        if (forStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          forStatementBuilder_.setMessage(value);
        }
        statementCase_ = 35;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder setForStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder builderForValue) {
        if (forStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          forStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 35;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder mergeForStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For value) {
        if (forStatementBuilder_ == null) {
          if (statementCase_ == 35 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 35) {
            forStatementBuilder_.mergeFrom(value);
          } else {
            forStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 35;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public Builder clearForStatement() {
        if (forStatementBuilder_ == null) {
          if (statementCase_ == 35) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 35) {
            statementCase_ = 0;
            statement_ = null;
          }
          forStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder getForStatementBuilder() {
        return getForStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder getForStatementOrBuilder() {
        if ((statementCase_ == 35) && (forStatementBuilder_ != null)) {
          return forStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 35) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.For for_statement = 35;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder> 
          getForStatementFieldBuilder() {
        if (forStatementBuilder_ == null) {
          if (!(statementCase_ == 35)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
          }
          forStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 35;
        onChanged();
        return forStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder> forInStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       * @return Whether the forInStatement field is set.
       */
      @java.lang.Override
      public boolean hasForInStatement() {
        return statementCase_ == 36;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       * @return The forInStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getForInStatement() {
        if (forInStatementBuilder_ == null) {
          if (statementCase_ == 36) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
        } else {
          if (statementCase_ == 36) {
            return forInStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder setForInStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn value) {
        if (forInStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          forInStatementBuilder_.setMessage(value);
        }
        statementCase_ = 36;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder setForInStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder builderForValue) {
        if (forInStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          forInStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 36;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder mergeForInStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn value) {
        if (forInStatementBuilder_ == null) {
          if (statementCase_ == 36 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 36) {
            forInStatementBuilder_.mergeFrom(value);
          } else {
            forInStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 36;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public Builder clearForInStatement() {
        if (forInStatementBuilder_ == null) {
          if (statementCase_ == 36) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 36) {
            statementCase_ = 0;
            statement_ = null;
          }
          forInStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder getForInStatementBuilder() {
        return getForInStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder getForInStatementOrBuilder() {
        if ((statementCase_ == 36) && (forInStatementBuilder_ != null)) {
          return forInStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 36) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.ForIn for_in_statement = 36;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder> 
          getForInStatementFieldBuilder() {
        if (forInStatementBuilder_ == null) {
          if (!(statementCase_ == 36)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
          }
          forInStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 36;
        onChanged();
        return forInStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder> tryStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       * @return Whether the tryStatement field is set.
       */
      @java.lang.Override
      public boolean hasTryStatement() {
        return statementCase_ == 37;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       * @return The tryStatement.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getTryStatement() {
        if (tryStatementBuilder_ == null) {
          if (statementCase_ == 37) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
        } else {
          if (statementCase_ == 37) {
            return tryStatementBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder setTryStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try value) {
        if (tryStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          tryStatementBuilder_.setMessage(value);
        }
        statementCase_ = 37;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder setTryStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder builderForValue) {
        if (tryStatementBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          tryStatementBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 37;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder mergeTryStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try value) {
        if (tryStatementBuilder_ == null) {
          if (statementCase_ == 37 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 37) {
            tryStatementBuilder_.mergeFrom(value);
          } else {
            tryStatementBuilder_.setMessage(value);
          }
        }
        statementCase_ = 37;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public Builder clearTryStatement() {
        if (tryStatementBuilder_ == null) {
          if (statementCase_ == 37) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 37) {
            statementCase_ = 0;
            statement_ = null;
          }
          tryStatementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder getTryStatementBuilder() {
        return getTryStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder getTryStatementOrBuilder() {
        if ((statementCase_ == 37) && (tryStatementBuilder_ != null)) {
          return tryStatementBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 37) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Try try_statement = 37;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder> 
          getTryStatementFieldBuilder() {
        if (tryStatementBuilder_ == null) {
          if (!(statementCase_ == 37)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
          }
          tryStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 37;
        onChanged();
        return tryStatementBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder> emptyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       * @return Whether the empty field is set.
       */
      @java.lang.Override
      public boolean hasEmpty() {
        return statementCase_ == 38;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       * @return The empty.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getEmpty() {
        if (emptyBuilder_ == null) {
          if (statementCase_ == 38) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
        } else {
          if (statementCase_ == 38) {
            return emptyBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder setEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty value) {
        if (emptyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          emptyBuilder_.setMessage(value);
        }
        statementCase_ = 38;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder setEmpty(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder builderForValue) {
        if (emptyBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          emptyBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 38;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder mergeEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty value) {
        if (emptyBuilder_ == null) {
          if (statementCase_ == 38 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 38) {
            emptyBuilder_.mergeFrom(value);
          } else {
            emptyBuilder_.setMessage(value);
          }
        }
        statementCase_ = 38;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public Builder clearEmpty() {
        if (emptyBuilder_ == null) {
          if (statementCase_ == 38) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 38) {
            statementCase_ = 0;
            statement_ = null;
          }
          emptyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder getEmptyBuilder() {
        return getEmptyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder getEmptyOrBuilder() {
        if ((statementCase_ == 38) && (emptyBuilder_ != null)) {
          return emptyBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 38) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Empty empty = 38;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder> 
          getEmptyFieldBuilder() {
        if (emptyBuilder_ == null) {
          if (!(statementCase_ == 38)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
          }
          emptyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 38;
        onChanged();
        return emptyBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder> singleLineCommentBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       * @return Whether the singleLineComment field is set.
       */
      @java.lang.Override
      public boolean hasSingleLineComment() {
        return statementCase_ == 39;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       * @return The singleLineComment.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getSingleLineComment() {
        if (singleLineCommentBuilder_ == null) {
          if (statementCase_ == 39) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
        } else {
          if (statementCase_ == 39) {
            return singleLineCommentBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder setSingleLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment value) {
        if (singleLineCommentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          singleLineCommentBuilder_.setMessage(value);
        }
        statementCase_ = 39;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder setSingleLineComment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder builderForValue) {
        if (singleLineCommentBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          singleLineCommentBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 39;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder mergeSingleLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment value) {
        if (singleLineCommentBuilder_ == null) {
          if (statementCase_ == 39 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 39) {
            singleLineCommentBuilder_.mergeFrom(value);
          } else {
            singleLineCommentBuilder_.setMessage(value);
          }
        }
        statementCase_ = 39;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public Builder clearSingleLineComment() {
        if (singleLineCommentBuilder_ == null) {
          if (statementCase_ == 39) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 39) {
            statementCase_ = 0;
            statement_ = null;
          }
          singleLineCommentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder getSingleLineCommentBuilder() {
        return getSingleLineCommentFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder getSingleLineCommentOrBuilder() {
        if ((statementCase_ == 39) && (singleLineCommentBuilder_ != null)) {
          return singleLineCommentBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 39) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SingleLineComment single_line_comment = 39;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder> 
          getSingleLineCommentFieldBuilder() {
        if (singleLineCommentBuilder_ == null) {
          if (!(statementCase_ == 39)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
          }
          singleLineCommentBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 39;
        onChanged();
        return singleLineCommentBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder> multiLineCommentBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       * @return Whether the multiLineComment field is set.
       */
      @java.lang.Override
      public boolean hasMultiLineComment() {
        return statementCase_ == 40;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       * @return The multiLineComment.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getMultiLineComment() {
        if (multiLineCommentBuilder_ == null) {
          if (statementCase_ == 40) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
        } else {
          if (statementCase_ == 40) {
            return multiLineCommentBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder setMultiLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment value) {
        if (multiLineCommentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          statement_ = value;
          onChanged();
        } else {
          multiLineCommentBuilder_.setMessage(value);
        }
        statementCase_ = 40;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder setMultiLineComment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder builderForValue) {
        if (multiLineCommentBuilder_ == null) {
          statement_ = builderForValue.build();
          onChanged();
        } else {
          multiLineCommentBuilder_.setMessage(builderForValue.build());
        }
        statementCase_ = 40;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder mergeMultiLineComment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment value) {
        if (multiLineCommentBuilder_ == null) {
          if (statementCase_ == 40 &&
              statement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance()) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_)
                .mergeFrom(value).buildPartial();
          } else {
            statement_ = value;
          }
          onChanged();
        } else {
          if (statementCase_ == 40) {
            multiLineCommentBuilder_.mergeFrom(value);
          } else {
            multiLineCommentBuilder_.setMessage(value);
          }
        }
        statementCase_ = 40;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public Builder clearMultiLineComment() {
        if (multiLineCommentBuilder_ == null) {
          if (statementCase_ == 40) {
            statementCase_ = 0;
            statement_ = null;
            onChanged();
          }
        } else {
          if (statementCase_ == 40) {
            statementCase_ = 0;
            statement_ = null;
          }
          multiLineCommentBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder getMultiLineCommentBuilder() {
        return getMultiLineCommentFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder getMultiLineCommentOrBuilder() {
        if ((statementCase_ == 40) && (multiLineCommentBuilder_ != null)) {
          return multiLineCommentBuilder_.getMessageOrBuilder();
        } else {
          if (statementCase_ == 40) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.MultiLineComment multi_line_comment = 40;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder> 
          getMultiLineCommentFieldBuilder() {
        if (multiLineCommentBuilder_ == null) {
          if (!(statementCase_ == 40)) {
            statement_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
          }
          multiLineCommentBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) statement_,
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        statementCase_ = 40;
        onChanged();
        return multiLineCommentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Statement)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Statement)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Statement>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Statement>() {
      @java.lang.Override
      public Statement parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Statement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Statement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReturnOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Return)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     * @return The value.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Return}
   */
  public static final class Return extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Return)
      ReturnOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Return.class.getName());
    }
    // Use Return.newBuilder() to construct.
    private Return(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Return() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder.class);
    }

    private int bitField0_;
    public static final int VALUE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
      return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getValueOrBuilder() {
      return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasValue()) {
        if (!getValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getValue());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getValue());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) obj;

      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue()
            .equals(other.getValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Return}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Return)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ReturnOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getValueFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.value_ = valueBuilder_ == null
              ? value_
              : valueBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return.getDefaultInstance()) return this;
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasValue()) {
          if (!getValue().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> valueBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       * @return The value.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getValue() {
        if (valueBuilder_ == null) {
          return value_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder setValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder setValue(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder mergeValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            value_ != null &&
            value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getValueBuilder().mergeFrom(value);
          } else {
            value_ = value;
          }
        } else {
          valueBuilder_.mergeFrom(value);
        }
        if (value_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getValueBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : value_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression value = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Return)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Return)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Return>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Return>() {
      @java.lang.Override
      public Return parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Return> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Return> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Return getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ThrowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Throw)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     * @return Whether the exception field is set.
     */
    boolean hasException();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     * @return The exception.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getException();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExceptionOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Throw}
   */
  public static final class Throw extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Throw)
      ThrowOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Throw.class.getName());
    }
    // Use Throw.newBuilder() to construct.
    private Throw(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Throw() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder.class);
    }

    private int bitField0_;
    public static final int EXCEPTION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression exception_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     * @return Whether the exception field is set.
     */
    @java.lang.Override
    public boolean hasException() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     * @return The exception.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getException() {
      return exception_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : exception_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExceptionOrBuilder() {
      return exception_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : exception_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasException()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getException().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getException());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getException());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) obj;

      if (hasException() != other.hasException()) return false;
      if (hasException()) {
        if (!getException()
            .equals(other.getException())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasException()) {
        hash = (37 * hash) + EXCEPTION_FIELD_NUMBER;
        hash = (53 * hash) + getException().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Throw}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Throw)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ThrowOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getExceptionFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        exception_ = null;
        if (exceptionBuilder_ != null) {
          exceptionBuilder_.dispose();
          exceptionBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.exception_ = exceptionBuilder_ == null
              ? exception_
              : exceptionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw.getDefaultInstance()) return this;
        if (other.hasException()) {
          mergeException(other.getException());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasException()) {
          return false;
        }
        if (!getException().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExceptionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression exception_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> exceptionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       * @return Whether the exception field is set.
       */
      public boolean hasException() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       * @return The exception.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getException() {
        if (exceptionBuilder_ == null) {
          return exception_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : exception_;
        } else {
          return exceptionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder setException(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (exceptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          exception_ = value;
        } else {
          exceptionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder setException(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (exceptionBuilder_ == null) {
          exception_ = builderForValue.build();
        } else {
          exceptionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder mergeException(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (exceptionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            exception_ != null &&
            exception_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getExceptionBuilder().mergeFrom(value);
          } else {
            exception_ = value;
          }
        } else {
          exceptionBuilder_.mergeFrom(value);
        }
        if (exception_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public Builder clearException() {
        bitField0_ = (bitField0_ & ~0x00000001);
        exception_ = null;
        if (exceptionBuilder_ != null) {
          exceptionBuilder_.dispose();
          exceptionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getExceptionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getExceptionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExceptionOrBuilder() {
        if (exceptionBuilder_ != null) {
          return exceptionBuilder_.getMessageOrBuilder();
        } else {
          return exception_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : exception_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression exception = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getExceptionFieldBuilder() {
        if (exceptionBuilder_ == null) {
          exceptionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getException(),
                  getParentForChildren(),
                  isClean());
          exception_ = null;
        }
        return exceptionBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Throw)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Throw)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Throw>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Throw>() {
      @java.lang.Override
      public Throw parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Throw> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Throw> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Throw getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BreakOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Break)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    boolean hasLabelId();
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    int getLabelId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Break}
   */
  public static final class Break extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Break)
      BreakOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Break.class.getName());
    }
    // Use Break.newBuilder() to construct.
    private Break(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Break() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder.class);
    }

    private int bitField0_;
    public static final int LABEL_ID_FIELD_NUMBER = 1;
    private int labelId_ = 0;
    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    @java.lang.Override
    public boolean hasLabelId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    @java.lang.Override
    public int getLabelId() {
      return labelId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, labelId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, labelId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) obj;

      if (hasLabelId() != other.hasLabelId()) return false;
      if (hasLabelId()) {
        if (getLabelId()
            != other.getLabelId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLabelId()) {
        hash = (37 * hash) + LABEL_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLabelId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Break}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Break)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BreakOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        labelId_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.labelId_ = labelId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break.getDefaultInstance()) return this;
        if (other.hasLabelId()) {
          setLabelId(other.getLabelId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                labelId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int labelId_ ;
      /**
       * <code>int32 label_id = 1;</code>
       * @return Whether the labelId field is set.
       */
      @java.lang.Override
      public boolean hasLabelId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return The labelId.
       */
      @java.lang.Override
      public int getLabelId() {
        return labelId_;
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @param value The labelId to set.
       * @return This builder for chaining.
       */
      public Builder setLabelId(int value) {

        labelId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLabelId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        labelId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Break)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Break)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Break>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Break>() {
      @java.lang.Override
      public Break parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Break> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Break> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Break getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ContinueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Continue)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    boolean hasLabelId();
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    int getLabelId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Continue}
   */
  public static final class Continue extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Continue)
      ContinueOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Continue.class.getName());
    }
    // Use Continue.newBuilder() to construct.
    private Continue(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Continue() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder.class);
    }

    private int bitField0_;
    public static final int LABEL_ID_FIELD_NUMBER = 1;
    private int labelId_ = 0;
    /**
     * <code>int32 label_id = 1;</code>
     * @return Whether the labelId field is set.
     */
    @java.lang.Override
    public boolean hasLabelId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 label_id = 1;</code>
     * @return The labelId.
     */
    @java.lang.Override
    public int getLabelId() {
      return labelId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, labelId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, labelId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) obj;

      if (hasLabelId() != other.hasLabelId()) return false;
      if (hasLabelId()) {
        if (getLabelId()
            != other.getLabelId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLabelId()) {
        hash = (37 * hash) + LABEL_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLabelId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Continue}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Continue)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ContinueOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        labelId_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.labelId_ = labelId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue.getDefaultInstance()) return this;
        if (other.hasLabelId()) {
          setLabelId(other.getLabelId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                labelId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int labelId_ ;
      /**
       * <code>int32 label_id = 1;</code>
       * @return Whether the labelId field is set.
       */
      @java.lang.Override
      public boolean hasLabelId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return The labelId.
       */
      @java.lang.Override
      public int getLabelId() {
        return labelId_;
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @param value The labelId to set.
       * @return This builder for chaining.
       */
      public Builder setLabelId(int value) {

        labelId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 label_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLabelId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        labelId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Continue)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Continue)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Continue>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Continue>() {
      @java.lang.Override
      public Continue parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Continue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Continue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Continue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DebuggerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Debugger)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Debugger}
   */
  public static final class Debugger extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Debugger)
      DebuggerOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Debugger.class.getName());
    }
    // Use Debugger.newBuilder() to construct.
    private Debugger(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Debugger() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Debugger}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Debugger)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DebuggerOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Debugger)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Debugger)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Debugger>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Debugger>() {
      @java.lang.Override
      public Debugger parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Debugger> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Debugger> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Debugger getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpressionStatementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder();

    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return Whether the exportedTagId field is set.
     */
    boolean hasExportedTagId();
    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return The exportedTagId.
     */
    int getExportedTagId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement}
   */
  public static final class ExpressionStatement extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
      ExpressionStatementOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ExpressionStatement.class.getName());
    }
    // Use ExpressionStatement.newBuilder() to construct.
    private ExpressionStatement(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ExpressionStatement() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder.class);
    }

    private int bitField0_;
    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }

    public static final int EXPORTED_TAG_ID_FIELD_NUMBER = 2;
    private int exportedTagId_ = 0;
    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return Whether the exportedTagId field is set.
     */
    @java.lang.Override
    public boolean hasExportedTagId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 exported_tag_id = 2;</code>
     * @return The exportedTagId.
     */
    @java.lang.Override
    public int getExportedTagId() {
      return exportedTagId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getExpression());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, exportedTagId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getExpression());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, exportedTagId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) obj;

      if (hasExpression() != other.hasExpression()) return false;
      if (hasExpression()) {
        if (!getExpression()
            .equals(other.getExpression())) return false;
      }
      if (hasExportedTagId() != other.hasExportedTagId()) return false;
      if (hasExportedTagId()) {
        if (getExportedTagId()
            != other.getExportedTagId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExpression()) {
        hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getExpression().hashCode();
      }
      if (hasExportedTagId()) {
        hash = (37 * hash) + EXPORTED_TAG_ID_FIELD_NUMBER;
        hash = (53 * hash) + getExportedTagId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatementOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getExpressionFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        expression_ = null;
        if (expressionBuilder_ != null) {
          expressionBuilder_.dispose();
          expressionBuilder_ = null;
        }
        exportedTagId_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.expression_ = expressionBuilder_ == null
              ? expression_
              : expressionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.exportedTagId_ = exportedTagId_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement.getDefaultInstance()) return this;
        if (other.hasExpression()) {
          mergeExpression(other.getExpression());
        }
        if (other.hasExportedTagId()) {
          setExportedTagId(other.getExportedTagId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasExpression()) {
          return false;
        }
        if (!getExpression().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                exportedTagId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       * @return Whether the expression field is set.
       */
      public boolean hasExpression() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       * @return The expression.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        if (expressionBuilder_ == null) {
          return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
        } else {
          return expressionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
        } else {
          expressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          expression_ = builderForValue.build();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            expression_ != null &&
            expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getExpressionBuilder().mergeFrom(value);
          } else {
            expression_ = value;
          }
        } else {
          expressionBuilder_.mergeFrom(value);
        }
        if (expression_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder clearExpression() {
        bitField0_ = (bitField0_ & ~0x00000001);
        expression_ = null;
        if (expressionBuilder_ != null) {
          expressionBuilder_.dispose();
          expressionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getExpressionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
        if (expressionBuilder_ != null) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          return expression_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getExpression(),
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        return expressionBuilder_;
      }

      private int exportedTagId_ ;
      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @return Whether the exportedTagId field is set.
       */
      @java.lang.Override
      public boolean hasExportedTagId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @return The exportedTagId.
       */
      @java.lang.Override
      public int getExportedTagId() {
        return exportedTagId_;
      }
      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @param value The exportedTagId to set.
       * @return This builder for chaining.
       */
      public Builder setExportedTagId(int value) {

        exportedTagId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 exported_tag_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearExportedTagId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        exportedTagId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ExpressionStatement)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ExpressionStatement>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ExpressionStatement>() {
      @java.lang.Override
      public ExpressionStatement parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ExpressionStatement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ExpressionStatement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionStatement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VarsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Vars)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> 
        getDeclarationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDeclaration(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    int getDeclarationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder> 
        getDeclarationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder getDeclarationOrBuilder(
        int index);

    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return Whether the multiline field is set.
     */
    boolean hasMultiline();
    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return The multiline.
     */
    boolean getMultiline();

    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return Whether the exportedPackageId field is set.
     */
    boolean hasExportedPackageId();
    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return The exportedPackageId.
     */
    int getExportedPackageId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Vars}
   */
  public static final class Vars extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Vars)
      VarsOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Vars.class.getName());
    }
    // Use Vars.newBuilder() to construct.
    private Vars(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Vars() {
      declaration_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder.class);
    }

    private int bitField0_;
    public static final int DECLARATION_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> declaration_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> getDeclarationList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder> 
        getDeclarationOrBuilderList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public int getDeclarationCount() {
      return declaration_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDeclaration(int index) {
      return declaration_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder getDeclarationOrBuilder(
        int index) {
      return declaration_.get(index);
    }

    public static final int MULTILINE_FIELD_NUMBER = 2;
    private boolean multiline_ = false;
    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return Whether the multiline field is set.
     */
    @java.lang.Override
    public boolean hasMultiline() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool multiline = 2 [default = false];</code>
     * @return The multiline.
     */
    @java.lang.Override
    public boolean getMultiline() {
      return multiline_;
    }

    public static final int EXPORTED_PACKAGE_ID_FIELD_NUMBER = 3;
    private int exportedPackageId_ = 0;
    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return Whether the exportedPackageId field is set.
     */
    @java.lang.Override
    public boolean hasExportedPackageId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 exported_package_id = 3;</code>
     * @return The exportedPackageId.
     */
    @java.lang.Override
    public int getExportedPackageId() {
      return exportedPackageId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getDeclarationCount(); i++) {
        if (!getDeclaration(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < declaration_.size(); i++) {
        output.writeMessage(1, declaration_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(2, multiline_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(3, exportedPackageId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < declaration_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, declaration_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(2, multiline_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(3, exportedPackageId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) obj;

      if (!getDeclarationList()
          .equals(other.getDeclarationList())) return false;
      if (hasMultiline() != other.hasMultiline()) return false;
      if (hasMultiline()) {
        if (getMultiline()
            != other.getMultiline()) return false;
      }
      if (hasExportedPackageId() != other.hasExportedPackageId()) return false;
      if (hasExportedPackageId()) {
        if (getExportedPackageId()
            != other.getExportedPackageId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDeclarationCount() > 0) {
        hash = (37 * hash) + DECLARATION_FIELD_NUMBER;
        hash = (53 * hash) + getDeclarationList().hashCode();
      }
      if (hasMultiline()) {
        hash = (37 * hash) + MULTILINE_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getMultiline());
      }
      if (hasExportedPackageId()) {
        hash = (37 * hash) + EXPORTED_PACKAGE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getExportedPackageId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Vars}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Vars)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarsOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (declarationBuilder_ == null) {
          declaration_ = java.util.Collections.emptyList();
        } else {
          declaration_ = null;
          declarationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        multiline_ = false;
        exportedPackageId_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars result) {
        if (declarationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            declaration_ = java.util.Collections.unmodifiableList(declaration_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.declaration_ = declaration_;
        } else {
          result.declaration_ = declarationBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.multiline_ = multiline_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.exportedPackageId_ = exportedPackageId_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars.getDefaultInstance()) return this;
        if (declarationBuilder_ == null) {
          if (!other.declaration_.isEmpty()) {
            if (declaration_.isEmpty()) {
              declaration_ = other.declaration_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDeclarationIsMutable();
              declaration_.addAll(other.declaration_);
            }
            onChanged();
          }
        } else {
          if (!other.declaration_.isEmpty()) {
            if (declarationBuilder_.isEmpty()) {
              declarationBuilder_.dispose();
              declarationBuilder_ = null;
              declaration_ = other.declaration_;
              bitField0_ = (bitField0_ & ~0x00000001);
              declarationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDeclarationFieldBuilder() : null;
            } else {
              declarationBuilder_.addAllMessages(other.declaration_);
            }
          }
        }
        if (other.hasMultiline()) {
          setMultiline(other.getMultiline());
        }
        if (other.hasExportedPackageId()) {
          setExportedPackageId(other.getExportedPackageId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getDeclarationCount(); i++) {
          if (!getDeclaration(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.parser(),
                        extensionRegistry);
                if (declarationBuilder_ == null) {
                  ensureDeclarationIsMutable();
                  declaration_.add(m);
                } else {
                  declarationBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                multiline_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                exportedPackageId_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> declaration_ =
        java.util.Collections.emptyList();
      private void ensureDeclarationIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          declaration_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration>(declaration_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder> declarationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> getDeclarationList() {
        if (declarationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(declaration_);
        } else {
          return declarationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public int getDeclarationCount() {
        if (declarationBuilder_ == null) {
          return declaration_.size();
        } else {
          return declarationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDeclaration(int index) {
        if (declarationBuilder_ == null) {
          return declaration_.get(index);
        } else {
          return declarationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.set(index, value);
          onChanged();
        } else {
          declarationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.set(index, builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.add(value);
          onChanged();
        } else {
          declarationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration value) {
        if (declarationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeclarationIsMutable();
          declaration_.add(index, value);
          onChanged();
        } else {
          declarationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.add(builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder builderForValue) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.add(index, builderForValue.build());
          onChanged();
        } else {
          declarationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder addAllDeclaration(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration> values) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, declaration_);
          onChanged();
        } else {
          declarationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder clearDeclaration() {
        if (declarationBuilder_ == null) {
          declaration_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          declarationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public Builder removeDeclaration(int index) {
        if (declarationBuilder_ == null) {
          ensureDeclarationIsMutable();
          declaration_.remove(index);
          onChanged();
        } else {
          declarationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder getDeclarationBuilder(
          int index) {
        return getDeclarationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder getDeclarationOrBuilder(
          int index) {
        if (declarationBuilder_ == null) {
          return declaration_.get(index);  } else {
          return declarationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder> 
           getDeclarationOrBuilderList() {
        if (declarationBuilder_ != null) {
          return declarationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(declaration_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder addDeclarationBuilder() {
        return getDeclarationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder addDeclarationBuilder(
          int index) {
        return getDeclarationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.VarDeclaration declaration = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder> 
           getDeclarationBuilderList() {
        return getDeclarationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder> 
          getDeclarationFieldBuilder() {
        if (declarationBuilder_ == null) {
          declarationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder>(
                  declaration_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          declaration_ = null;
        }
        return declarationBuilder_;
      }

      private boolean multiline_ ;
      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @return Whether the multiline field is set.
       */
      @java.lang.Override
      public boolean hasMultiline() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @return The multiline.
       */
      @java.lang.Override
      public boolean getMultiline() {
        return multiline_;
      }
      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @param value The multiline to set.
       * @return This builder for chaining.
       */
      public Builder setMultiline(boolean value) {

        multiline_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bool multiline = 2 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearMultiline() {
        bitField0_ = (bitField0_ & ~0x00000002);
        multiline_ = false;
        onChanged();
        return this;
      }

      private int exportedPackageId_ ;
      /**
       * <code>int32 exported_package_id = 3;</code>
       * @return Whether the exportedPackageId field is set.
       */
      @java.lang.Override
      public boolean hasExportedPackageId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 exported_package_id = 3;</code>
       * @return The exportedPackageId.
       */
      @java.lang.Override
      public int getExportedPackageId() {
        return exportedPackageId_;
      }
      /**
       * <code>int32 exported_package_id = 3;</code>
       * @param value The exportedPackageId to set.
       * @return This builder for chaining.
       */
      public Builder setExportedPackageId(int value) {

        exportedPackageId_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 exported_package_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearExportedPackageId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        exportedPackageId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Vars)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Vars)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Vars>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Vars>() {
      @java.lang.Override
      public Vars parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Vars> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Vars> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Vars getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VarDeclarationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     * @return Whether the initialValue field is set.
     */
    boolean hasInitialValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     * @return The initialValue.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getInitialValue();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getInitialValueOrBuilder();

    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.VarDeclaration}
   */
  public static final class VarDeclaration extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
      VarDeclarationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        VarDeclaration.class.getName());
    }
    // Use VarDeclaration.newBuilder() to construct.
    private VarDeclaration(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private VarDeclaration() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int INITIAL_VALUE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression initialValue_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     * @return Whether the initialValue field is set.
     */
    @java.lang.Override
    public boolean hasInitialValue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     * @return The initialValue.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getInitialValue() {
      return initialValue_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : initialValue_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getInitialValueOrBuilder() {
      return initialValue_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : initialValue_;
    }

    public static final int FILEID_FIELD_NUMBER = 3;
    private int fileId_ = 0;
    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }

    public static final int LOCATION_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return Whether the location field is set.
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return The location.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasInitialValue()) {
        if (!getInitialValue().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLocation()) {
        if (!getLocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getInitialValue());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, fileId_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getLocation());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getInitialValue());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(3, fileId_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getLocation());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (hasInitialValue() != other.hasInitialValue()) return false;
      if (hasInitialValue()) {
        if (!getInitialValue()
            .equals(other.getInitialValue())) return false;
      }
      if (hasFileId() != other.hasFileId()) return false;
      if (hasFileId()) {
        if (getFileId()
            != other.getFileId()) return false;
      }
      if (hasLocation() != other.hasLocation()) return false;
      if (hasLocation()) {
        if (!getLocation()
            .equals(other.getLocation())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (hasInitialValue()) {
        hash = (37 * hash) + INITIAL_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getInitialValue().hashCode();
      }
      if (hasFileId()) {
        hash = (37 * hash) + FILEID_FIELD_NUMBER;
        hash = (53 * hash) + getFileId();
      }
      if (hasLocation()) {
        hash = (37 * hash) + LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getLocation().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.VarDeclaration}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclarationOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getInitialValueFieldBuilder();
          getLocationFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        initialValue_ = null;
        if (initialValueBuilder_ != null) {
          initialValueBuilder_.dispose();
          initialValueBuilder_ = null;
        }
        fileId_ = 0;
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.initialValue_ = initialValueBuilder_ == null
              ? initialValue_
              : initialValueBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fileId_ = fileId_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.location_ = locationBuilder_ == null
              ? location_
              : locationBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (other.hasInitialValue()) {
          mergeInitialValue(other.getInitialValue());
        }
        if (other.hasFileId()) {
          setFileId(other.getFileId());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNameId()) {
          return false;
        }
        if (hasInitialValue()) {
          if (!getInitialValue().isInitialized()) {
            return false;
          }
        }
        if (hasLocation()) {
          if (!getLocation().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getInitialValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                fileId_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getLocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression initialValue_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> initialValueBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       * @return Whether the initialValue field is set.
       */
      public boolean hasInitialValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       * @return The initialValue.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getInitialValue() {
        if (initialValueBuilder_ == null) {
          return initialValue_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : initialValue_;
        } else {
          return initialValueBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder setInitialValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (initialValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          initialValue_ = value;
        } else {
          initialValueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder setInitialValue(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (initialValueBuilder_ == null) {
          initialValue_ = builderForValue.build();
        } else {
          initialValueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder mergeInitialValue(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (initialValueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            initialValue_ != null &&
            initialValue_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getInitialValueBuilder().mergeFrom(value);
          } else {
            initialValue_ = value;
          }
        } else {
          initialValueBuilder_.mergeFrom(value);
        }
        if (initialValue_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public Builder clearInitialValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        initialValue_ = null;
        if (initialValueBuilder_ != null) {
          initialValueBuilder_.dispose();
          initialValueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getInitialValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInitialValueFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getInitialValueOrBuilder() {
        if (initialValueBuilder_ != null) {
          return initialValueBuilder_.getMessageOrBuilder();
        } else {
          return initialValue_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : initialValue_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression initial_value = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getInitialValueFieldBuilder() {
        if (initialValueBuilder_ == null) {
          initialValueBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getInitialValue(),
                  getParentForChildren(),
                  isClean());
          initialValue_ = null;
        }
        return initialValueBuilder_;
      }

      private int fileId_ ;
      /**
       * <code>int32 fileId = 3;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return fileId_;
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {

        fileId_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fileId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> locationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       * @return Whether the location field is set.
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       * @return The location.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        if (locationBuilder_ == null) {
          return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            location_ != null &&
            location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
            getLocationBuilder().mergeFrom(value);
          } else {
            location_ = value;
          }
        } else {
          locationBuilder_.mergeFrom(value);
        }
        if (location_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder clearLocation() {
        bitField0_ = (bitField0_ & ~0x00000008);
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder getLocationBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.VarDeclaration)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<VarDeclaration>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<VarDeclaration>() {
      @java.lang.Override
      public VarDeclaration parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<VarDeclaration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<VarDeclaration> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.VarDeclaration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Block)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    int getStatementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Block}
   */
  public static final class Block extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Block)
      BlockOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Block.class.getName());
    }
    // Use Block.newBuilder() to construct.
    private Block(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Block() {
      statement_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder.class);
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getStatementCount(); i++) {
        if (!getStatement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < statement_.size(); i++) {
        output.writeMessage(1, statement_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < statement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, statement_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) obj;

      if (!getStatementList()
          .equals(other.getStatementList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getStatementCount() > 0) {
        hash = (37 * hash) + STATEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getStatementList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Block}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Block)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.BlockOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
        } else {
          statement_ = null;
          statementBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block result) {
        if (statementBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            statement_ = java.util.Collections.unmodifiableList(statement_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.statement_ = statement_;
        } else {
          result.statement_ = statementBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block.getDefaultInstance()) return this;
        if (statementBuilder_ == null) {
          if (!other.statement_.isEmpty()) {
            if (statement_.isEmpty()) {
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatementIsMutable();
              statement_.addAll(other.statement_);
            }
            onChanged();
          }
        } else {
          if (!other.statement_.isEmpty()) {
            if (statementBuilder_.isEmpty()) {
              statementBuilder_.dispose();
              statementBuilder_ = null;
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStatementFieldBuilder() : null;
            } else {
              statementBuilder_.addAllMessages(other.statement_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getStatementCount(); i++) {
          if (!getStatement(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.parser(),
                        extensionRegistry);
                if (statementBuilder_ == null) {
                  ensureStatementIsMutable();
                  statement_.add(m);
                } else {
                  statementBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_ =
        java.util.Collections.emptyList();
      private void ensureStatementIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          statement_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement>(statement_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> statementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
        if (statementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(statement_);
        } else {
          return statementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public int getStatementCount() {
        if (statementBuilder_ == null) {
          return statement_.size();
        } else {
          return statementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);
        } else {
          return statementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.set(index, value);
          onChanged();
        } else {
          statementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.set(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(value);
          onChanged();
        } else {
          statementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(index, value);
          onChanged();
        } else {
          statementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, statement_);
          onChanged();
        } else {
          statementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder clearStatement() {
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder removeStatement(int index) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.remove(index);
          onChanged();
        } else {
          statementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getStatementBuilder(
          int index) {
        return getStatementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
          int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);  } else {
          return statementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
           getStatementOrBuilderList() {
        if (statementBuilder_ != null) {
          return statementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(statement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder addStatementBuilder() {
        return getStatementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder addStatementBuilder(
          int index) {
        return getStatementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder> 
           getStatementBuilderList() {
        return getStatementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getStatementFieldBuilder() {
        if (statementBuilder_ == null) {
          statementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  statement_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        return statementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Block)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Block)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Block>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Block>() {
      @java.lang.Override
      public Block parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Block> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Block> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Block getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompositeBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    int getStatementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.CompositeBlock}
   */
  public static final class CompositeBlock extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
      CompositeBlockOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        CompositeBlock.class.getName());
    }
    // Use CompositeBlock.newBuilder() to construct.
    private CompositeBlock(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CompositeBlock() {
      statement_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder.class);
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getStatementCount(); i++) {
        if (!getStatement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < statement_.size(); i++) {
        output.writeMessage(1, statement_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < statement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, statement_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) obj;

      if (!getStatementList()
          .equals(other.getStatementList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getStatementCount() > 0) {
        hash = (37 * hash) + STATEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getStatementList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.CompositeBlock}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
        } else {
          statement_ = null;
          statementBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock result) {
        if (statementBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            statement_ = java.util.Collections.unmodifiableList(statement_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.statement_ = statement_;
        } else {
          result.statement_ = statementBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) return this;
        if (statementBuilder_ == null) {
          if (!other.statement_.isEmpty()) {
            if (statement_.isEmpty()) {
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatementIsMutable();
              statement_.addAll(other.statement_);
            }
            onChanged();
          }
        } else {
          if (!other.statement_.isEmpty()) {
            if (statementBuilder_.isEmpty()) {
              statementBuilder_.dispose();
              statementBuilder_ = null;
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStatementFieldBuilder() : null;
            } else {
              statementBuilder_.addAllMessages(other.statement_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getStatementCount(); i++) {
          if (!getStatement(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.parser(),
                        extensionRegistry);
                if (statementBuilder_ == null) {
                  ensureStatementIsMutable();
                  statement_.add(m);
                } else {
                  statementBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_ =
        java.util.Collections.emptyList();
      private void ensureStatementIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          statement_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement>(statement_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> statementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
        if (statementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(statement_);
        } else {
          return statementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public int getStatementCount() {
        if (statementBuilder_ == null) {
          return statement_.size();
        } else {
          return statementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);
        } else {
          return statementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.set(index, value);
          onChanged();
        } else {
          statementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.set(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(value);
          onChanged();
        } else {
          statementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(index, value);
          onChanged();
        } else {
          statementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, statement_);
          onChanged();
        } else {
          statementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder clearStatement() {
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public Builder removeStatement(int index) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.remove(index);
          onChanged();
        } else {
          statementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getStatementBuilder(
          int index) {
        return getStatementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
          int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);  } else {
          return statementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
           getStatementOrBuilderList() {
        if (statementBuilder_ != null) {
          return statementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(statement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder addStatementBuilder() {
        return getStatementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder addStatementBuilder(
          int index) {
        return getStatementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder> 
           getStatementBuilderList() {
        return getStatementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getStatementFieldBuilder() {
        if (statementBuilder_ == null) {
          statementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  statement_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        return statementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.CompositeBlock)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<CompositeBlock>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<CompositeBlock>() {
      @java.lang.Override
      public CompositeBlock parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<CompositeBlock> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<CompositeBlock> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LabelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Label)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     * @return Whether the innerStatement field is set.
     */
    boolean hasInnerStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     * @return The innerStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getInnerStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getInnerStatementOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Label}
   */
  public static final class Label extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Label)
      LabelOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Label.class.getName());
    }
    // Use Label.newBuilder() to construct.
    private Label(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Label() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder.class);
    }

    private int bitField0_;
    public static final int NAMEID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 nameId = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int INNER_STATEMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement innerStatement_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     * @return Whether the innerStatement field is set.
     */
    @java.lang.Override
    public boolean hasInnerStatement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     * @return The innerStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getInnerStatement() {
      return innerStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : innerStatement_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getInnerStatementOrBuilder() {
      return innerStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : innerStatement_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInnerStatement()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getInnerStatement().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getInnerStatement());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getInnerStatement());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (hasInnerStatement() != other.hasInnerStatement()) return false;
      if (hasInnerStatement()) {
        if (!getInnerStatement()
            .equals(other.getInnerStatement())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAMEID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (hasInnerStatement()) {
        hash = (37 * hash) + INNER_STATEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getInnerStatement().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Label}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Label)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LabelOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getInnerStatementFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        innerStatement_ = null;
        if (innerStatementBuilder_ != null) {
          innerStatementBuilder_.dispose();
          innerStatementBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.innerStatement_ = innerStatementBuilder_ == null
              ? innerStatement_
              : innerStatementBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (other.hasInnerStatement()) {
          mergeInnerStatement(other.getInnerStatement());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNameId()) {
          return false;
        }
        if (!hasInnerStatement()) {
          return false;
        }
        if (!getInnerStatement().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getInnerStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 nameId = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement innerStatement_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> innerStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       * @return Whether the innerStatement field is set.
       */
      public boolean hasInnerStatement() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       * @return The innerStatement.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getInnerStatement() {
        if (innerStatementBuilder_ == null) {
          return innerStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : innerStatement_;
        } else {
          return innerStatementBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder setInnerStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (innerStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innerStatement_ = value;
        } else {
          innerStatementBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder setInnerStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (innerStatementBuilder_ == null) {
          innerStatement_ = builderForValue.build();
        } else {
          innerStatementBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder mergeInnerStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (innerStatementBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            innerStatement_ != null &&
            innerStatement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getInnerStatementBuilder().mergeFrom(value);
          } else {
            innerStatement_ = value;
          }
        } else {
          innerStatementBuilder_.mergeFrom(value);
        }
        if (innerStatement_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public Builder clearInnerStatement() {
        bitField0_ = (bitField0_ & ~0x00000002);
        innerStatement_ = null;
        if (innerStatementBuilder_ != null) {
          innerStatementBuilder_.dispose();
          innerStatementBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getInnerStatementBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInnerStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getInnerStatementOrBuilder() {
        if (innerStatementBuilder_ != null) {
          return innerStatementBuilder_.getMessageOrBuilder();
        } else {
          return innerStatement_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : innerStatement_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement inner_statement = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getInnerStatementFieldBuilder() {
        if (innerStatementBuilder_ == null) {
          innerStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getInnerStatement(),
                  getParentForChildren(),
                  isClean());
          innerStatement_ = null;
        }
        return innerStatementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Label)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Label)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Label>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Label>() {
      @java.lang.Override
      public Label parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Label> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Label> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Label getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IfOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.If)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     * @return Whether the thenStatement field is set.
     */
    boolean hasThenStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     * @return The thenStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getThenStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getThenStatementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     * @return Whether the elseStatement field is set.
     */
    boolean hasElseStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     * @return The elseStatement.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getElseStatement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getElseStatementOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.If}
   */
  public static final class If extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.If)
      IfOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        If.class.getName());
    }
    // Use If.newBuilder() to construct.
    private If(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private If() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_If_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_If_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder.class);
    }

    private int bitField0_;
    public static final int CONDITION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }

    public static final int THEN_STATEMENT_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement thenStatement_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     * @return Whether the thenStatement field is set.
     */
    @java.lang.Override
    public boolean hasThenStatement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     * @return The thenStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getThenStatement() {
      return thenStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : thenStatement_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getThenStatementOrBuilder() {
      return thenStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : thenStatement_;
    }

    public static final int ELSE_STATEMENT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement elseStatement_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     * @return Whether the elseStatement field is set.
     */
    @java.lang.Override
    public boolean hasElseStatement() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     * @return The elseStatement.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getElseStatement() {
      return elseStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : elseStatement_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getElseStatementOrBuilder() {
      return elseStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : elseStatement_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCondition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasThenStatement()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCondition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getThenStatement().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasElseStatement()) {
        if (!getElseStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getThenStatement());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getElseStatement());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getThenStatement());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getElseStatement());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) obj;

      if (hasCondition() != other.hasCondition()) return false;
      if (hasCondition()) {
        if (!getCondition()
            .equals(other.getCondition())) return false;
      }
      if (hasThenStatement() != other.hasThenStatement()) return false;
      if (hasThenStatement()) {
        if (!getThenStatement()
            .equals(other.getThenStatement())) return false;
      }
      if (hasElseStatement() != other.hasElseStatement()) return false;
      if (hasElseStatement()) {
        if (!getElseStatement()
            .equals(other.getElseStatement())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCondition()) {
        hash = (37 * hash) + CONDITION_FIELD_NUMBER;
        hash = (53 * hash) + getCondition().hashCode();
      }
      if (hasThenStatement()) {
        hash = (37 * hash) + THEN_STATEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getThenStatement().hashCode();
      }
      if (hasElseStatement()) {
        hash = (37 * hash) + ELSE_STATEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getElseStatement().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.If}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.If)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IfOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_If_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_If_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getConditionFieldBuilder();
          getThenStatementFieldBuilder();
          getElseStatementFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        thenStatement_ = null;
        if (thenStatementBuilder_ != null) {
          thenStatementBuilder_.dispose();
          thenStatementBuilder_ = null;
        }
        elseStatement_ = null;
        if (elseStatementBuilder_ != null) {
          elseStatementBuilder_.dispose();
          elseStatementBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_If_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.condition_ = conditionBuilder_ == null
              ? condition_
              : conditionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.thenStatement_ = thenStatementBuilder_ == null
              ? thenStatement_
              : thenStatementBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.elseStatement_ = elseStatementBuilder_ == null
              ? elseStatement_
              : elseStatementBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If.getDefaultInstance()) return this;
        if (other.hasCondition()) {
          mergeCondition(other.getCondition());
        }
        if (other.hasThenStatement()) {
          mergeThenStatement(other.getThenStatement());
        }
        if (other.hasElseStatement()) {
          mergeElseStatement(other.getElseStatement());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasCondition()) {
          return false;
        }
        if (!hasThenStatement()) {
          return false;
        }
        if (!getCondition().isInitialized()) {
          return false;
        }
        if (!getThenStatement().isInitialized()) {
          return false;
        }
        if (hasElseStatement()) {
          if (!getElseStatement().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getConditionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getThenStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getElseStatementFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> conditionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       * @return Whether the condition field is set.
       */
      public boolean hasCondition() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       * @return The condition.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        if (conditionBuilder_ == null) {
          return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        } else {
          return conditionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
        } else {
          conditionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (conditionBuilder_ == null) {
          condition_ = builderForValue.build();
        } else {
          conditionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            condition_ != null &&
            condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getConditionBuilder().mergeFrom(value);
          } else {
            condition_ = value;
          }
        } else {
          conditionBuilder_.mergeFrom(value);
        }
        if (condition_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder clearCondition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getConditionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getConditionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
        if (conditionBuilder_ != null) {
          return conditionBuilder_.getMessageOrBuilder();
        } else {
          return condition_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getConditionFieldBuilder() {
        if (conditionBuilder_ == null) {
          conditionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getCondition(),
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        return conditionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement thenStatement_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> thenStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       * @return Whether the thenStatement field is set.
       */
      public boolean hasThenStatement() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       * @return The thenStatement.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getThenStatement() {
        if (thenStatementBuilder_ == null) {
          return thenStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : thenStatement_;
        } else {
          return thenStatementBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder setThenStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (thenStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          thenStatement_ = value;
        } else {
          thenStatementBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder setThenStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (thenStatementBuilder_ == null) {
          thenStatement_ = builderForValue.build();
        } else {
          thenStatementBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder mergeThenStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (thenStatementBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            thenStatement_ != null &&
            thenStatement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getThenStatementBuilder().mergeFrom(value);
          } else {
            thenStatement_ = value;
          }
        } else {
          thenStatementBuilder_.mergeFrom(value);
        }
        if (thenStatement_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public Builder clearThenStatement() {
        bitField0_ = (bitField0_ & ~0x00000002);
        thenStatement_ = null;
        if (thenStatementBuilder_ != null) {
          thenStatementBuilder_.dispose();
          thenStatementBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getThenStatementBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getThenStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getThenStatementOrBuilder() {
        if (thenStatementBuilder_ != null) {
          return thenStatementBuilder_.getMessageOrBuilder();
        } else {
          return thenStatement_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : thenStatement_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement then_statement = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getThenStatementFieldBuilder() {
        if (thenStatementBuilder_ == null) {
          thenStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getThenStatement(),
                  getParentForChildren(),
                  isClean());
          thenStatement_ = null;
        }
        return thenStatementBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement elseStatement_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> elseStatementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       * @return Whether the elseStatement field is set.
       */
      public boolean hasElseStatement() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       * @return The elseStatement.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getElseStatement() {
        if (elseStatementBuilder_ == null) {
          return elseStatement_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : elseStatement_;
        } else {
          return elseStatementBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder setElseStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (elseStatementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          elseStatement_ = value;
        } else {
          elseStatementBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder setElseStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (elseStatementBuilder_ == null) {
          elseStatement_ = builderForValue.build();
        } else {
          elseStatementBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder mergeElseStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (elseStatementBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            elseStatement_ != null &&
            elseStatement_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getElseStatementBuilder().mergeFrom(value);
          } else {
            elseStatement_ = value;
          }
        } else {
          elseStatementBuilder_.mergeFrom(value);
        }
        if (elseStatement_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public Builder clearElseStatement() {
        bitField0_ = (bitField0_ & ~0x00000004);
        elseStatement_ = null;
        if (elseStatementBuilder_ != null) {
          elseStatementBuilder_.dispose();
          elseStatementBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getElseStatementBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getElseStatementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getElseStatementOrBuilder() {
        if (elseStatementBuilder_ != null) {
          return elseStatementBuilder_.getMessageOrBuilder();
        } else {
          return elseStatement_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : elseStatement_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement else_statement = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getElseStatementFieldBuilder() {
        if (elseStatementBuilder_ == null) {
          elseStatementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getElseStatement(),
                  getParentForChildren(),
                  isClean());
          elseStatement_ = null;
        }
        return elseStatementBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.If)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.If)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<If>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<If>() {
      @java.lang.Override
      public If parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<If> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<If> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.If getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SwitchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Switch)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> 
        getEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    int getEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder> 
        getEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder getEntryOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Switch}
   */
  public static final class Switch extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Switch)
      SwitchOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Switch.class.getName());
    }
    // Use Switch.newBuilder() to construct.
    private Switch(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Switch() {
      entry_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder.class);
    }

    private int bitField0_;
    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }

    public static final int ENTRY_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> entry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder> 
        getEntryOrBuilderList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder getEntryOrBuilder(
        int index) {
      return entry_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getEntryCount(); i++) {
        if (!getEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getExpression());
      }
      for (int i = 0; i < entry_.size(); i++) {
        output.writeMessage(2, entry_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getExpression());
      }
      for (int i = 0; i < entry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, entry_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) obj;

      if (hasExpression() != other.hasExpression()) return false;
      if (hasExpression()) {
        if (!getExpression()
            .equals(other.getExpression())) return false;
      }
      if (!getEntryList()
          .equals(other.getEntryList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExpression()) {
        hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getExpression().hashCode();
      }
      if (getEntryCount() > 0) {
        hash = (37 * hash) + ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + getEntryList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Switch}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Switch)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getExpressionFieldBuilder();
          getEntryFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        expression_ = null;
        if (expressionBuilder_ != null) {
          expressionBuilder_.dispose();
          expressionBuilder_ = null;
        }
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
        } else {
          entry_ = null;
          entryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch result) {
        if (entryBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            entry_ = java.util.Collections.unmodifiableList(entry_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.entry_ = entry_;
        } else {
          result.entry_ = entryBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.expression_ = expressionBuilder_ == null
              ? expression_
              : expressionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch.getDefaultInstance()) return this;
        if (other.hasExpression()) {
          mergeExpression(other.getExpression());
        }
        if (entryBuilder_ == null) {
          if (!other.entry_.isEmpty()) {
            if (entry_.isEmpty()) {
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEntryIsMutable();
              entry_.addAll(other.entry_);
            }
            onChanged();
          }
        } else {
          if (!other.entry_.isEmpty()) {
            if (entryBuilder_.isEmpty()) {
              entryBuilder_.dispose();
              entryBuilder_ = null;
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000002);
              entryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEntryFieldBuilder() : null;
            } else {
              entryBuilder_.addAllMessages(other.entry_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasExpression()) {
          return false;
        }
        if (!getExpression().isInitialized()) {
          return false;
        }
        for (int i = 0; i < getEntryCount(); i++) {
          if (!getEntry(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.parser(),
                        extensionRegistry);
                if (entryBuilder_ == null) {
                  ensureEntryIsMutable();
                  entry_.add(m);
                } else {
                  entryBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       * @return Whether the expression field is set.
       */
      public boolean hasExpression() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       * @return The expression.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        if (expressionBuilder_ == null) {
          return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
        } else {
          return expressionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
        } else {
          expressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          expression_ = builderForValue.build();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            expression_ != null &&
            expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getExpressionBuilder().mergeFrom(value);
          } else {
            expression_ = value;
          }
        } else {
          expressionBuilder_.mergeFrom(value);
        }
        if (expression_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public Builder clearExpression() {
        bitField0_ = (bitField0_ & ~0x00000001);
        expression_ = null;
        if (expressionBuilder_ != null) {
          expressionBuilder_.dispose();
          expressionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getExpressionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
        if (expressionBuilder_ != null) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          return expression_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getExpression(),
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        return expressionBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> entry_ =
        java.util.Collections.emptyList();
      private void ensureEntryIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          entry_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry>(entry_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder> entryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> getEntryList() {
        if (entryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entry_);
        } else {
          return entryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public int getEntryCount() {
        if (entryBuilder_ == null) {
          return entry_.size();
        } else {
          return entryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getEntry(int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);
        } else {
          return entryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.set(index, value);
          onChanged();
        } else {
          entryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.set(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(value);
          onChanged();
        } else {
          entryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(index, value);
          onChanged();
        } else {
          entryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder addAllEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry> values) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, entry_);
          onChanged();
        } else {
          entryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder clearEntry() {
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          entryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public Builder removeEntry(int index) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.remove(index);
          onChanged();
        } else {
          entryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder getEntryBuilder(
          int index) {
        return getEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder getEntryOrBuilder(
          int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);  } else {
          return entryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder> 
           getEntryOrBuilderList() {
        if (entryBuilder_ != null) {
          return entryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder addEntryBuilder() {
        return getEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder addEntryBuilder(
          int index) {
        return getEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.SwitchEntry entry = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder> 
           getEntryBuilderList() {
        return getEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder> 
          getEntryFieldBuilder() {
        if (entryBuilder_ == null) {
          entryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder>(
                  entry_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          entry_ = null;
        }
        return entryBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Switch)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Switch)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Switch>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Switch>() {
      @java.lang.Override
      public Switch parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Switch> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Switch> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Switch getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SwitchEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     * @return Whether the label field is set.
     */
    boolean hasLabel();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     * @return The label.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLabel();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getLabelOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> 
        getStatementList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    int getStatementCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index);

    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    boolean hasFileId();
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    int getFileId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return The location.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SwitchEntry}
   */
  public static final class SwitchEntry extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
      SwitchEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        SwitchEntry.class.getName());
    }
    // Use SwitchEntry.newBuilder() to construct.
    private SwitchEntry(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private SwitchEntry() {
      statement_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder.class);
    }

    private int bitField0_;
    public static final int LABEL_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression label_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     * @return Whether the label field is set.
     */
    @java.lang.Override
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     * @return The label.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLabel() {
      return label_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : label_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getLabelOrBuilder() {
      return label_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : label_;
    }

    public static final int STATEMENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
        getStatementOrBuilderList() {
      return statement_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public int getStatementCount() {
      return statement_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
      return statement_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
        int index) {
      return statement_.get(index);
    }

    public static final int FILEID_FIELD_NUMBER = 3;
    private int fileId_ = 0;
    /**
     * <code>int32 fileId = 3;</code>
     * @return Whether the fileId field is set.
     */
    @java.lang.Override
    public boolean hasFileId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 fileId = 3;</code>
     * @return The fileId.
     */
    @java.lang.Override
    public int getFileId() {
      return fileId_;
    }

    public static final int LOCATION_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return Whether the location field is set.
     */
    @java.lang.Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     * @return The location.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
      return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasLabel()) {
        if (!getLabel().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getStatementCount(); i++) {
        if (!getStatement(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLocation()) {
        if (!getLocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getLabel());
      }
      for (int i = 0; i < statement_.size(); i++) {
        output.writeMessage(2, statement_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(3, fileId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getLocation());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getLabel());
      }
      for (int i = 0; i < statement_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, statement_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(3, fileId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getLocation());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry) obj;

      if (hasLabel() != other.hasLabel()) return false;
      if (hasLabel()) {
        if (!getLabel()
            .equals(other.getLabel())) return false;
      }
      if (!getStatementList()
          .equals(other.getStatementList())) return false;
      if (hasFileId() != other.hasFileId()) return false;
      if (hasFileId()) {
        if (getFileId()
            != other.getFileId()) return false;
      }
      if (hasLocation() != other.hasLocation()) return false;
      if (hasLocation()) {
        if (!getLocation()
            .equals(other.getLocation())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLabel()) {
        hash = (37 * hash) + LABEL_FIELD_NUMBER;
        hash = (53 * hash) + getLabel().hashCode();
      }
      if (getStatementCount() > 0) {
        hash = (37 * hash) + STATEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getStatementList().hashCode();
      }
      if (hasFileId()) {
        hash = (37 * hash) + FILEID_FIELD_NUMBER;
        hash = (53 * hash) + getFileId();
      }
      if (hasLocation()) {
        hash = (37 * hash) + LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getLocation().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SwitchEntry}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getLabelFieldBuilder();
          getStatementFieldBuilder();
          getLocationFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        label_ = null;
        if (labelBuilder_ != null) {
          labelBuilder_.dispose();
          labelBuilder_ = null;
        }
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
        } else {
          statement_ = null;
          statementBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        fileId_ = 0;
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry result) {
        if (statementBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            statement_ = java.util.Collections.unmodifiableList(statement_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.statement_ = statement_;
        } else {
          result.statement_ = statementBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.label_ = labelBuilder_ == null
              ? label_
              : labelBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fileId_ = fileId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.location_ = locationBuilder_ == null
              ? location_
              : locationBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry.getDefaultInstance()) return this;
        if (other.hasLabel()) {
          mergeLabel(other.getLabel());
        }
        if (statementBuilder_ == null) {
          if (!other.statement_.isEmpty()) {
            if (statement_.isEmpty()) {
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureStatementIsMutable();
              statement_.addAll(other.statement_);
            }
            onChanged();
          }
        } else {
          if (!other.statement_.isEmpty()) {
            if (statementBuilder_.isEmpty()) {
              statementBuilder_.dispose();
              statementBuilder_ = null;
              statement_ = other.statement_;
              bitField0_ = (bitField0_ & ~0x00000002);
              statementBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStatementFieldBuilder() : null;
            } else {
              statementBuilder_.addAllMessages(other.statement_);
            }
          }
        }
        if (other.hasFileId()) {
          setFileId(other.getFileId());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasLabel()) {
          if (!getLabel().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getStatementCount(); i++) {
          if (!getStatement(i).isInitialized()) {
            return false;
          }
        }
        if (hasLocation()) {
          if (!getLocation().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getLabelFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.parser(),
                        extensionRegistry);
                if (statementBuilder_ == null) {
                  ensureStatementIsMutable();
                  statement_.add(m);
                } else {
                  statementBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 24: {
                fileId_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getLocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression label_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> labelBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       * @return Whether the label field is set.
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       * @return The label.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getLabel() {
        if (labelBuilder_ == null) {
          return label_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : label_;
        } else {
          return labelBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder setLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          label_ = value;
        } else {
          labelBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder setLabel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (labelBuilder_ == null) {
          label_ = builderForValue.build();
        } else {
          labelBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder mergeLabel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (labelBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            label_ != null &&
            label_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getLabelBuilder().mergeFrom(value);
          } else {
            label_ = value;
          }
        } else {
          labelBuilder_.mergeFrom(value);
        }
        if (label_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        label_ = null;
        if (labelBuilder_ != null) {
          labelBuilder_.dispose();
          labelBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getLabelBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLabelFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getLabelOrBuilder() {
        if (labelBuilder_ != null) {
          return labelBuilder_.getMessageOrBuilder();
        } else {
          return label_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : label_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression label = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getLabelFieldBuilder() {
        if (labelBuilder_ == null) {
          labelBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getLabel(),
                  getParentForChildren(),
                  isClean());
          label_ = null;
        }
        return labelBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> statement_ =
        java.util.Collections.emptyList();
      private void ensureStatementIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          statement_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement>(statement_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> statementBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> getStatementList() {
        if (statementBuilder_ == null) {
          return java.util.Collections.unmodifiableList(statement_);
        } else {
          return statementBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public int getStatementCount() {
        if (statementBuilder_ == null) {
          return statement_.size();
        } else {
          return statementBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getStatement(int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);
        } else {
          return statementBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.set(index, value);
          onChanged();
        } else {
          statementBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder setStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.set(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(value);
          onChanged();
        } else {
          statementBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (statementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementIsMutable();
          statement_.add(index, value);
          onChanged();
        } else {
          statementBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addStatement(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.add(index, builderForValue.build());
          onChanged();
        } else {
          statementBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder addAllStatement(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement> values) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, statement_);
          onChanged();
        } else {
          statementBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder clearStatement() {
        if (statementBuilder_ == null) {
          statement_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          statementBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public Builder removeStatement(int index) {
        if (statementBuilder_ == null) {
          ensureStatementIsMutable();
          statement_.remove(index);
          onChanged();
        } else {
          statementBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getStatementBuilder(
          int index) {
        return getStatementFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getStatementOrBuilder(
          int index) {
        if (statementBuilder_ == null) {
          return statement_.get(index);  } else {
          return statementBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
           getStatementOrBuilderList() {
        if (statementBuilder_ != null) {
          return statementBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(statement_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder addStatementBuilder() {
        return getStatementFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder addStatementBuilder(
          int index) {
        return getStatementFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Statement statement = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder> 
           getStatementBuilderList() {
        return getStatementFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getStatementFieldBuilder() {
        if (statementBuilder_ == null) {
          statementBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  statement_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          statement_ = null;
        }
        return statementBuilder_;
      }

      private int fileId_ ;
      /**
       * <code>int32 fileId = 3;</code>
       * @return Whether the fileId field is set.
       */
      @java.lang.Override
      public boolean hasFileId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return The fileId.
       */
      @java.lang.Override
      public int getFileId() {
        return fileId_;
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @param value The fileId to set.
       * @return This builder for chaining.
       */
      public Builder setFileId(int value) {

        fileId_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 fileId = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fileId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location location_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> locationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       * @return Whether the location field is set.
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       * @return The location.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location getLocation() {
        if (locationBuilder_ == null) {
          return location_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder setLocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder mergeLocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            location_ != null &&
            location_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance()) {
            getLocationBuilder().mergeFrom(value);
          } else {
            location_ = value;
          }
        } else {
          locationBuilder_.mergeFrom(value);
        }
        if (location_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public Builder clearLocation() {
        bitField0_ = (bitField0_ & ~0x00000008);
        location_ = null;
        if (locationBuilder_ != null) {
          locationBuilder_.dispose();
          locationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder getLocationBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.getDefaultInstance() : location_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Location location = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Location.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocationOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.SwitchEntry)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<SwitchEntry>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<SwitchEntry>() {
      @java.lang.Override
      public SwitchEntry parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<SwitchEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<SwitchEntry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SwitchEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WhileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.While)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.While}
   */
  public static final class While extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.While)
      WhileOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        While.class.getName());
    }
    // Use While.newBuilder() to construct.
    private While(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private While() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_While_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_While_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder.class);
    }

    private int bitField0_;
    public static final int CONDITION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCondition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCondition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getBody());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getBody());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) obj;

      if (hasCondition() != other.hasCondition()) return false;
      if (hasCondition()) {
        if (!getCondition()
            .equals(other.getCondition())) return false;
      }
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCondition()) {
        hash = (37 * hash) + CONDITION_FIELD_NUMBER;
        hash = (53 * hash) + getCondition().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.While}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.While)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.WhileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_While_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_While_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getConditionFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_While_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.condition_ = conditionBuilder_ == null
              ? condition_
              : conditionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.body_ = bodyBuilder_ == null
              ? body_
              : bodyBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While.getDefaultInstance()) return this;
        if (other.hasCondition()) {
          mergeCondition(other.getCondition());
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasCondition()) {
          return false;
        }
        if (!hasBody()) {
          return false;
        }
        if (!getCondition().isInitialized()) {
          return false;
        }
        if (!getBody().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getConditionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getBodyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> conditionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       * @return Whether the condition field is set.
       */
      public boolean hasCondition() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       * @return The condition.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        if (conditionBuilder_ == null) {
          return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        } else {
          return conditionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
        } else {
          conditionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (conditionBuilder_ == null) {
          condition_ = builderForValue.build();
        } else {
          conditionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            condition_ != null &&
            condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getConditionBuilder().mergeFrom(value);
          } else {
            condition_ = value;
          }
        } else {
          conditionBuilder_.mergeFrom(value);
        }
        if (condition_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder clearCondition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getConditionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getConditionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
        if (conditionBuilder_ != null) {
          return conditionBuilder_.getMessageOrBuilder();
        } else {
          return condition_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getConditionFieldBuilder() {
        if (conditionBuilder_ == null) {
          conditionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getCondition(),
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        return conditionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> bodyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       * @return The body.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            body_ != null &&
            body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getBodyBuilder().mergeFrom(value);
          } else {
            body_ = value;
          }
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        if (body_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder clearBody() {
        bitField0_ = (bitField0_ & ~0x00000002);
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.While)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.While)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<While>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<While>() {
      @java.lang.Override
      public While parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<While> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<While> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.While getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DoWhileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DoWhile}
   */
  public static final class DoWhile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
      DoWhileOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        DoWhile.class.getName());
    }
    // Use DoWhile.newBuilder() to construct.
    private DoWhile(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private DoWhile() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder.class);
    }

    private int bitField0_;
    public static final int CONDITION_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return Whether the condition field is set.
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     * @return The condition.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCondition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCondition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getBody());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getBody());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) obj;

      if (hasCondition() != other.hasCondition()) return false;
      if (hasCondition()) {
        if (!getCondition()
            .equals(other.getCondition())) return false;
      }
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCondition()) {
        hash = (37 * hash) + CONDITION_FIELD_NUMBER;
        hash = (53 * hash) + getCondition().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.DoWhile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getConditionFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.condition_ = conditionBuilder_ == null
              ? condition_
              : conditionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.body_ = bodyBuilder_ == null
              ? body_
              : bodyBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile.getDefaultInstance()) return this;
        if (other.hasCondition()) {
          mergeCondition(other.getCondition());
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasCondition()) {
          return false;
        }
        if (!hasBody()) {
          return false;
        }
        if (!getCondition().isInitialized()) {
          return false;
        }
        if (!getBody().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getConditionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getBodyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> conditionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       * @return Whether the condition field is set.
       */
      public boolean hasCondition() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       * @return The condition.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        if (conditionBuilder_ == null) {
          return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        } else {
          return conditionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
        } else {
          conditionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (conditionBuilder_ == null) {
          condition_ = builderForValue.build();
        } else {
          conditionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            condition_ != null &&
            condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getConditionBuilder().mergeFrom(value);
          } else {
            condition_ = value;
          }
        } else {
          conditionBuilder_.mergeFrom(value);
        }
        if (condition_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public Builder clearCondition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getConditionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getConditionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
        if (conditionBuilder_ != null) {
          return conditionBuilder_.getMessageOrBuilder();
        } else {
          return condition_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getConditionFieldBuilder() {
        if (conditionBuilder_ == null) {
          conditionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getCondition(),
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        return conditionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> bodyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       * @return The body.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            body_ != null &&
            body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getBodyBuilder().mergeFrom(value);
          } else {
            body_ = value;
          }
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        if (body_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder clearBody() {
        bitField0_ = (bitField0_ & ~0x00000002);
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.DoWhile)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<DoWhile>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<DoWhile>() {
      @java.lang.Override
      public DoWhile parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<DoWhile> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<DoWhile> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.DoWhile getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ForOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.For)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     * @return Whether the variables field is set.
     */
    boolean hasVariables();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     * @return The variables.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getVariables();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getVariablesOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     * @return Whether the empty field is set.
     */
    boolean hasEmpty();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     * @return The empty.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getEmpty();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder getEmptyOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     * @return Whether the condition field is set.
     */
    boolean hasCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     * @return The condition.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     * @return Whether the increment field is set.
     */
    boolean hasIncrement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     * @return The increment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIncrement();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIncrementOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder();

    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.InitCase getInitCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.For}
   */
  public static final class For extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.For)
      ForOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        For.class.getName());
    }
    // Use For.newBuilder() to construct.
    private For(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private For() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_For_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_For_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder.class);
    }

    private int bitField0_;
    private int initCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object init_;
    public enum InitCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
            org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
      VARIABLES(1),
      EXPRESSION(2),
      EMPTY(3),
      INIT_NOT_SET(0);
      private final int value;
      private InitCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InitCase valueOf(int value) {
        return forNumber(value);
      }

      public static InitCase forNumber(int value) {
        switch (value) {
          case 1: return VARIABLES;
          case 2: return EXPRESSION;
          case 3: return EMPTY;
          case 0: return INIT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public InitCase
    getInitCase() {
      return InitCase.forNumber(
          initCase_);
    }

    public static final int VARIABLES_FIELD_NUMBER = 1;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     * @return Whether the variables field is set.
     */
    @java.lang.Override
    public boolean hasVariables() {
      return initCase_ == 1;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     * @return The variables.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getVariables() {
      if (initCase_ == 1) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getVariablesOrBuilder() {
      if (initCase_ == 1) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return initCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      if (initCase_ == 2) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
      if (initCase_ == 2) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }

    public static final int EMPTY_FIELD_NUMBER = 3;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     * @return Whether the empty field is set.
     */
    @java.lang.Override
    public boolean hasEmpty() {
      return initCase_ == 3;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     * @return The empty.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getEmpty() {
      if (initCase_ == 3) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder getEmptyOrBuilder() {
      if (initCase_ == 3) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
    }

    public static final int CONDITION_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     * @return Whether the condition field is set.
     */
    @java.lang.Override
    public boolean hasCondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     * @return The condition.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
      return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
    }

    public static final int INCREMENT_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression increment_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     * @return Whether the increment field is set.
     */
    @java.lang.Override
    public boolean hasIncrement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     * @return The increment.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIncrement() {
      return increment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : increment_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIncrementOrBuilder() {
      return increment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : increment_;
    }

    public static final int BODY_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     * @return The body.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasVariables()) {
        if (!getVariables().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCondition()) {
        if (!getCondition().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIncrement()) {
        if (!getIncrement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (initCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_);
      }
      if (initCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_);
      }
      if (initCase_ == 3) {
        output.writeMessage(3, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(4, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(5, getIncrement());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(6, getBody());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (initCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_);
      }
      if (initCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_);
      }
      if (initCase_ == 3) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getCondition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, getIncrement());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, getBody());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) obj;

      if (hasCondition() != other.hasCondition()) return false;
      if (hasCondition()) {
        if (!getCondition()
            .equals(other.getCondition())) return false;
      }
      if (hasIncrement() != other.hasIncrement()) return false;
      if (hasIncrement()) {
        if (!getIncrement()
            .equals(other.getIncrement())) return false;
      }
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getInitCase().equals(other.getInitCase())) return false;
      switch (initCase_) {
        case 1:
          if (!getVariables()
              .equals(other.getVariables())) return false;
          break;
        case 2:
          if (!getExpression()
              .equals(other.getExpression())) return false;
          break;
        case 3:
          if (!getEmpty()
              .equals(other.getEmpty())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCondition()) {
        hash = (37 * hash) + CONDITION_FIELD_NUMBER;
        hash = (53 * hash) + getCondition().hashCode();
      }
      if (hasIncrement()) {
        hash = (37 * hash) + INCREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getIncrement().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      switch (initCase_) {
        case 1:
          hash = (37 * hash) + VARIABLES_FIELD_NUMBER;
          hash = (53 * hash) + getVariables().hashCode();
          break;
        case 2:
          hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
          hash = (53 * hash) + getExpression().hashCode();
          break;
        case 3:
          hash = (37 * hash) + EMPTY_FIELD_NUMBER;
          hash = (53 * hash) + getEmpty().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.For}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.For)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_For_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_For_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getConditionFieldBuilder();
          getIncrementFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (variablesBuilder_ != null) {
          variablesBuilder_.clear();
        }
        if (expressionBuilder_ != null) {
          expressionBuilder_.clear();
        }
        if (emptyBuilder_ != null) {
          emptyBuilder_.clear();
        }
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        increment_ = null;
        if (incrementBuilder_ != null) {
          incrementBuilder_.dispose();
          incrementBuilder_ = null;
        }
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        initCase_ = 0;
        init_ = null;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_For_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.condition_ = conditionBuilder_ == null
              ? condition_
              : conditionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.increment_ = incrementBuilder_ == null
              ? increment_
              : incrementBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.body_ = bodyBuilder_ == null
              ? body_
              : bodyBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For result) {
        result.initCase_ = initCase_;
        result.init_ = this.init_;
        if (initCase_ == 1 &&
            variablesBuilder_ != null) {
          result.init_ = variablesBuilder_.build();
        }
        if (initCase_ == 2 &&
            expressionBuilder_ != null) {
          result.init_ = expressionBuilder_.build();
        }
        if (initCase_ == 3 &&
            emptyBuilder_ != null) {
          result.init_ = emptyBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For.getDefaultInstance()) return this;
        if (other.hasCondition()) {
          mergeCondition(other.getCondition());
        }
        if (other.hasIncrement()) {
          mergeIncrement(other.getIncrement());
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        switch (other.getInitCase()) {
          case VARIABLES: {
            mergeVariables(other.getVariables());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case EMPTY: {
            mergeEmpty(other.getEmpty());
            break;
          }
          case INIT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasBody()) {
          return false;
        }
        if (hasVariables()) {
          if (!getVariables().isInitialized()) {
            return false;
          }
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            return false;
          }
        }
        if (hasCondition()) {
          if (!getCondition().isInitialized()) {
            return false;
          }
        }
        if (hasIncrement()) {
          if (!getIncrement().isInitialized()) {
            return false;
          }
        }
        if (!getBody().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getVariablesFieldBuilder().getBuilder(),
                    extensionRegistry);
                initCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                initCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getEmptyFieldBuilder().getBuilder(),
                    extensionRegistry);
                initCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getConditionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getIncrementFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getBodyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int initCase_ = 0;
      private java.lang.Object init_;
      public InitCase
          getInitCase() {
        return InitCase.forNumber(
            initCase_);
      }

      public Builder clearInit() {
        initCase_ = 0;
        init_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> variablesBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       * @return Whether the variables field is set.
       */
      @java.lang.Override
      public boolean hasVariables() {
        return initCase_ == 1;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       * @return The variables.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getVariables() {
        if (variablesBuilder_ == null) {
          if (initCase_ == 1) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
        } else {
          if (initCase_ == 1) {
            return variablesBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder setVariables(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (variablesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          init_ = value;
          onChanged();
        } else {
          variablesBuilder_.setMessage(value);
        }
        initCase_ = 1;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder setVariables(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (variablesBuilder_ == null) {
          init_ = builderForValue.build();
          onChanged();
        } else {
          variablesBuilder_.setMessage(builderForValue.build());
        }
        initCase_ = 1;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder mergeVariables(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (variablesBuilder_ == null) {
          if (initCase_ == 1 &&
              init_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_)
                .mergeFrom(value).buildPartial();
          } else {
            init_ = value;
          }
          onChanged();
        } else {
          if (initCase_ == 1) {
            variablesBuilder_.mergeFrom(value);
          } else {
            variablesBuilder_.setMessage(value);
          }
        }
        initCase_ = 1;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public Builder clearVariables() {
        if (variablesBuilder_ == null) {
          if (initCase_ == 1) {
            initCase_ = 0;
            init_ = null;
            onChanged();
          }
        } else {
          if (initCase_ == 1) {
            initCase_ = 0;
            init_ = null;
          }
          variablesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getVariablesBuilder() {
        return getVariablesFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getVariablesOrBuilder() {
        if ((initCase_ == 1) && (variablesBuilder_ != null)) {
          return variablesBuilder_.getMessageOrBuilder();
        } else {
          if (initCase_ == 1) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement variables = 1;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getVariablesFieldBuilder() {
        if (variablesBuilder_ == null) {
          if (!(initCase_ == 1)) {
            init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance();
          }
          variablesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement) init_,
                  getParentForChildren(),
                  isClean());
          init_ = null;
        }
        initCase_ = 1;
        onChanged();
        return variablesBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       * @return Whether the expression field is set.
       */
      @java.lang.Override
      public boolean hasExpression() {
        return initCase_ == 2;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       * @return The expression.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        if (expressionBuilder_ == null) {
          if (initCase_ == 2) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        } else {
          if (initCase_ == 2) {
            return expressionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          init_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        initCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          init_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        initCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (initCase_ == 2 &&
              init_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_)
                .mergeFrom(value).buildPartial();
          } else {
            init_ = value;
          }
          onChanged();
        } else {
          if (initCase_ == 2) {
            expressionBuilder_.mergeFrom(value);
          } else {
            expressionBuilder_.setMessage(value);
          }
        }
        initCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          if (initCase_ == 2) {
            initCase_ = 0;
            init_ = null;
            onChanged();
          }
        } else {
          if (initCase_ == 2) {
            initCase_ = 0;
            init_ = null;
          }
          expressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getExpressionBuilder() {
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
        if ((initCase_ == 2) && (expressionBuilder_ != null)) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          if (initCase_ == 2) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          if (!(initCase_ == 2)) {
            init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
          }
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) init_,
                  getParentForChildren(),
                  isClean());
          init_ = null;
        }
        initCase_ = 2;
        onChanged();
        return expressionBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder> emptyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       * @return Whether the empty field is set.
       */
      @java.lang.Override
      public boolean hasEmpty() {
        return initCase_ == 3;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       * @return The empty.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getEmpty() {
        if (emptyBuilder_ == null) {
          if (initCase_ == 3) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
        } else {
          if (initCase_ == 3) {
            return emptyBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder setEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit value) {
        if (emptyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          init_ = value;
          onChanged();
        } else {
          emptyBuilder_.setMessage(value);
        }
        initCase_ = 3;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder setEmpty(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder builderForValue) {
        if (emptyBuilder_ == null) {
          init_ = builderForValue.build();
          onChanged();
        } else {
          emptyBuilder_.setMessage(builderForValue.build());
        }
        initCase_ = 3;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder mergeEmpty(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit value) {
        if (emptyBuilder_ == null) {
          if (initCase_ == 3 &&
              init_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance()) {
            init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_)
                .mergeFrom(value).buildPartial();
          } else {
            init_ = value;
          }
          onChanged();
        } else {
          if (initCase_ == 3) {
            emptyBuilder_.mergeFrom(value);
          } else {
            emptyBuilder_.setMessage(value);
          }
        }
        initCase_ = 3;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public Builder clearEmpty() {
        if (emptyBuilder_ == null) {
          if (initCase_ == 3) {
            initCase_ = 0;
            init_ = null;
            onChanged();
          }
        } else {
          if (initCase_ == 3) {
            initCase_ = 0;
            init_ = null;
          }
          emptyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder getEmptyBuilder() {
        return getEmptyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder getEmptyOrBuilder() {
        if ((initCase_ == 3) && (emptyBuilder_ != null)) {
          return emptyBuilder_.getMessageOrBuilder();
        } else {
          if (initCase_ == 3) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.EmptyInit empty = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder> 
          getEmptyFieldBuilder() {
        if (emptyBuilder_ == null) {
          if (!(initCase_ == 3)) {
            init_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
          }
          emptyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) init_,
                  getParentForChildren(),
                  isClean());
          init_ = null;
        }
        initCase_ = 3;
        onChanged();
        return emptyBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression condition_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> conditionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       * @return Whether the condition field is set.
       */
      public boolean hasCondition() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       * @return The condition.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getCondition() {
        if (conditionBuilder_ == null) {
          return condition_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        } else {
          return conditionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder setCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
        } else {
          conditionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder setCondition(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (conditionBuilder_ == null) {
          condition_ = builderForValue.build();
        } else {
          conditionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder mergeCondition(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (conditionBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            condition_ != null &&
            condition_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getConditionBuilder().mergeFrom(value);
          } else {
            condition_ = value;
          }
        } else {
          conditionBuilder_.mergeFrom(value);
        }
        if (condition_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public Builder clearCondition() {
        bitField0_ = (bitField0_ & ~0x00000008);
        condition_ = null;
        if (conditionBuilder_ != null) {
          conditionBuilder_.dispose();
          conditionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getConditionBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getConditionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getConditionOrBuilder() {
        if (conditionBuilder_ != null) {
          return conditionBuilder_.getMessageOrBuilder();
        } else {
          return condition_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : condition_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression condition = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getConditionFieldBuilder() {
        if (conditionBuilder_ == null) {
          conditionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getCondition(),
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        return conditionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression increment_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> incrementBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       * @return Whether the increment field is set.
       */
      public boolean hasIncrement() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       * @return The increment.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIncrement() {
        if (incrementBuilder_ == null) {
          return increment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : increment_;
        } else {
          return incrementBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder setIncrement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (incrementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          increment_ = value;
        } else {
          incrementBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder setIncrement(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (incrementBuilder_ == null) {
          increment_ = builderForValue.build();
        } else {
          incrementBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder mergeIncrement(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (incrementBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            increment_ != null &&
            increment_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getIncrementBuilder().mergeFrom(value);
          } else {
            increment_ = value;
          }
        } else {
          incrementBuilder_.mergeFrom(value);
        }
        if (increment_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public Builder clearIncrement() {
        bitField0_ = (bitField0_ & ~0x00000010);
        increment_ = null;
        if (incrementBuilder_ != null) {
          incrementBuilder_.dispose();
          incrementBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getIncrementBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getIncrementFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIncrementOrBuilder() {
        if (incrementBuilder_ != null) {
          return incrementBuilder_.getMessageOrBuilder();
        } else {
          return increment_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : increment_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression increment = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getIncrementFieldBuilder() {
        if (incrementBuilder_ == null) {
          incrementBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getIncrement(),
                  getParentForChildren(),
                  isClean());
          increment_ = null;
        }
        return incrementBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> bodyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       * @return The body.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            body_ != null &&
            body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getBodyBuilder().mergeFrom(value);
          } else {
            body_ = value;
          }
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        if (body_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public Builder clearBody() {
        bitField0_ = (bitField0_ & ~0x00000020);
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 6 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.For)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.For)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<For>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<For>() {
      @java.lang.Override
      public For parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<For> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<For> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.For getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EmptyInitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.EmptyInit}
   */
  public static final class EmptyInit extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
      EmptyInitOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        EmptyInit.class.getName());
    }
    // Use EmptyInit.newBuilder() to construct.
    private EmptyInit(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private EmptyInit() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.EmptyInit}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInitOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.EmptyInit)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<EmptyInit>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<EmptyInit>() {
      @java.lang.Override
      public EmptyInit parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<EmptyInit> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<EmptyInit> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyInit getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ForInOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ForIn)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 nameId = 1;</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 nameId = 1;</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     * @return Whether the iterable field is set.
     */
    boolean hasIterable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     * @return The iterable.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIterable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIterableOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder();

    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.ValueCase getValueCase();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ForIn}
   */
  public static final class ForIn extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ForIn)
      ForInOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ForIn.class.getName());
    }
    // Use ForIn.newBuilder() to construct.
    private ForIn(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ForIn() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder.class);
    }

    private int bitField0_;
    private int valueCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object value_;
    public enum ValueCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite,
            org.jetbrains.kotlin.protobuf.AbstractMessage.InternalOneOfEnum {
      NAMEID(1),
      EXPRESSION(2),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 1: return NAMEID;
          case 2: return EXPRESSION;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int NAMEID_FIELD_NUMBER = 1;
    /**
     * <code>int32 nameId = 1;</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return valueCase_ == 1;
    }
    /**
     * <code>int32 nameId = 1;</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      if (valueCase_ == 1) {
        return (java.lang.Integer) value_;
      }
      return 0;
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return valueCase_ == 2;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      if (valueCase_ == 2) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
      if (valueCase_ == 2) {
         return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
      }
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
    }

    public static final int ITERABLE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression iterable_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     * @return Whether the iterable field is set.
     */
    @java.lang.Override
    public boolean hasIterable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     * @return The iterable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIterable() {
      return iterable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : iterable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIterableOrBuilder() {
      return iterable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : iterable_;
    }

    public static final int BODY_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     * @return The body.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIterable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getIterable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (valueCase_ == 1) {
        output.writeInt32(
            1, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getIterable());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(4, getBody());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (valueCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(
              1, (int)((java.lang.Integer) value_));
      }
      if (valueCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getIterable());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getBody());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) obj;

      if (hasIterable() != other.hasIterable()) return false;
      if (hasIterable()) {
        if (!getIterable()
            .equals(other.getIterable())) return false;
      }
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getValueCase().equals(other.getValueCase())) return false;
      switch (valueCase_) {
        case 1:
          if (getNameId()
              != other.getNameId()) return false;
          break;
        case 2:
          if (!getExpression()
              .equals(other.getExpression())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIterable()) {
        hash = (37 * hash) + ITERABLE_FIELD_NUMBER;
        hash = (53 * hash) + getIterable().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      switch (valueCase_) {
        case 1:
          hash = (37 * hash) + NAMEID_FIELD_NUMBER;
          hash = (53 * hash) + getNameId();
          break;
        case 2:
          hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
          hash = (53 * hash) + getExpression().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ForIn}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ForIn)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForInOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getIterableFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (expressionBuilder_ != null) {
          expressionBuilder_.clear();
        }
        iterable_ = null;
        if (iterableBuilder_ != null) {
          iterableBuilder_.dispose();
          iterableBuilder_ = null;
        }
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        valueCase_ = 0;
        value_ = null;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.iterable_ = iterableBuilder_ == null
              ? iterable_
              : iterableBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.body_ = bodyBuilder_ == null
              ? body_
              : bodyBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn result) {
        result.valueCase_ = valueCase_;
        result.value_ = this.value_;
        if (valueCase_ == 2 &&
            expressionBuilder_ != null) {
          result.value_ = expressionBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn.getDefaultInstance()) return this;
        if (other.hasIterable()) {
          mergeIterable(other.getIterable());
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        switch (other.getValueCase()) {
          case NAMEID: {
            setNameId(other.getNameId());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasIterable()) {
          return false;
        }
        if (!hasBody()) {
          return false;
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            return false;
          }
        }
        if (!getIterable().isInitialized()) {
          return false;
        }
        if (!getBody().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                value_ = input.readInt32();
                valueCase_ = 1;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                valueCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getIterableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getBodyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <code>int32 nameId = 1;</code>
       * @return Whether the nameId field is set.
       */
      public boolean hasNameId() {
        return valueCase_ == 1;
      }
      /**
       * <code>int32 nameId = 1;</code>
       * @return The nameId.
       */
      public int getNameId() {
        if (valueCase_ == 1) {
          return (java.lang.Integer) value_;
        }
        return 0;
      }
      /**
       * <code>int32 nameId = 1;</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        valueCase_ = 1;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 nameId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       * @return Whether the expression field is set.
       */
      @java.lang.Override
      public boolean hasExpression() {
        return valueCase_ == 2;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       * @return The expression.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        if (expressionBuilder_ == null) {
          if (valueCase_ == 2) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        } else {
          if (valueCase_ == 2) {
            return expressionBuilder_.getMessage();
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          expressionBuilder_.setMessage(value);
        }
        valueCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        valueCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (valueCase_ == 2 &&
              value_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            value_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.newBuilder((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_)
                .mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          if (valueCase_ == 2) {
            expressionBuilder_.mergeFrom(value);
          } else {
            expressionBuilder_.setMessage(value);
          }
        }
        valueCase_ = 2;
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public Builder clearExpression() {
        if (expressionBuilder_ == null) {
          if (valueCase_ == 2) {
            valueCase_ = 0;
            value_ = null;
            onChanged();
          }
        } else {
          if (valueCase_ == 2) {
            valueCase_ = 0;
            value_ = null;
          }
          expressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getExpressionBuilder() {
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
        if ((valueCase_ == 2) && (expressionBuilder_ != null)) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          if (valueCase_ == 2) {
            return (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_;
          }
          return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          if (!(valueCase_ == 2)) {
            value_ = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance();
          }
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression) value_,
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        valueCase_ = 2;
        onChanged();
        return expressionBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression iterable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> iterableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       * @return Whether the iterable field is set.
       */
      public boolean hasIterable() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       * @return The iterable.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getIterable() {
        if (iterableBuilder_ == null) {
          return iterable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : iterable_;
        } else {
          return iterableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder setIterable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (iterableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          iterable_ = value;
        } else {
          iterableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder setIterable(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (iterableBuilder_ == null) {
          iterable_ = builderForValue.build();
        } else {
          iterableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder mergeIterable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (iterableBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            iterable_ != null &&
            iterable_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getIterableBuilder().mergeFrom(value);
          } else {
            iterable_ = value;
          }
        } else {
          iterableBuilder_.mergeFrom(value);
        }
        if (iterable_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public Builder clearIterable() {
        bitField0_ = (bitField0_ & ~0x00000004);
        iterable_ = null;
        if (iterableBuilder_ != null) {
          iterableBuilder_.dispose();
          iterableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getIterableBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getIterableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getIterableOrBuilder() {
        if (iterableBuilder_ != null) {
          return iterableBuilder_.getMessageOrBuilder();
        } else {
          return iterable_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : iterable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression iterable = 3 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getIterableFieldBuilder() {
        if (iterableBuilder_ == null) {
          iterableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getIterable(),
                  getParentForChildren(),
                  isClean());
          iterable_ = null;
        }
        return iterableBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> bodyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       * @return The body.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            body_ != null &&
            body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getBodyBuilder().mergeFrom(value);
          } else {
            body_ = value;
          }
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        if (body_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public Builder clearBody() {
        bitField0_ = (bitField0_ & ~0x00000008);
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 4 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ForIn)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ForIn)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ForIn>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ForIn>() {
      @java.lang.Override
      public ForIn parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ForIn> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ForIn> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ForIn getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Try)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     * @return Whether the tryBlock field is set.
     */
    boolean hasTryBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     * @return The tryBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTryBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getTryBlockOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     * @return Whether the catchBlock field is set.
     */
    boolean hasCatchBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     * @return The catchBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getCatchBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder getCatchBlockOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     * @return Whether the finallyBlock field is set.
     */
    boolean hasFinallyBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     * @return The finallyBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getFinallyBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getFinallyBlockOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Try}
   */
  public static final class Try extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Try)
      TryOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Try.class.getName());
    }
    // Use Try.newBuilder() to construct.
    private Try(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Try() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder.class);
    }

    private int bitField0_;
    public static final int TRYBLOCK_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement tryBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     * @return Whether the tryBlock field is set.
     */
    @java.lang.Override
    public boolean hasTryBlock() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     * @return The tryBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTryBlock() {
      return tryBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : tryBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getTryBlockOrBuilder() {
      return tryBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : tryBlock_;
    }

    public static final int CATCHBLOCK_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch catchBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     * @return Whether the catchBlock field is set.
     */
    @java.lang.Override
    public boolean hasCatchBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     * @return The catchBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getCatchBlock() {
      return catchBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance() : catchBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder getCatchBlockOrBuilder() {
      return catchBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance() : catchBlock_;
    }

    public static final int FINALLYBLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement finallyBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     * @return Whether the finallyBlock field is set.
     */
    @java.lang.Override
    public boolean hasFinallyBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     * @return The finallyBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getFinallyBlock() {
      return finallyBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : finallyBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getFinallyBlockOrBuilder() {
      return finallyBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : finallyBlock_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTryBlock()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTryBlock().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasCatchBlock()) {
        if (!getCatchBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFinallyBlock()) {
        if (!getFinallyBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTryBlock());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getCatchBlock());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getFinallyBlock());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getTryBlock());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getCatchBlock());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getFinallyBlock());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) obj;

      if (hasTryBlock() != other.hasTryBlock()) return false;
      if (hasTryBlock()) {
        if (!getTryBlock()
            .equals(other.getTryBlock())) return false;
      }
      if (hasCatchBlock() != other.hasCatchBlock()) return false;
      if (hasCatchBlock()) {
        if (!getCatchBlock()
            .equals(other.getCatchBlock())) return false;
      }
      if (hasFinallyBlock() != other.hasFinallyBlock()) return false;
      if (hasFinallyBlock()) {
        if (!getFinallyBlock()
            .equals(other.getFinallyBlock())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTryBlock()) {
        hash = (37 * hash) + TRYBLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getTryBlock().hashCode();
      }
      if (hasCatchBlock()) {
        hash = (37 * hash) + CATCHBLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getCatchBlock().hashCode();
      }
      if (hasFinallyBlock()) {
        hash = (37 * hash) + FINALLYBLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getFinallyBlock().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Try}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Try)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.TryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTryBlockFieldBuilder();
          getCatchBlockFieldBuilder();
          getFinallyBlockFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tryBlock_ = null;
        if (tryBlockBuilder_ != null) {
          tryBlockBuilder_.dispose();
          tryBlockBuilder_ = null;
        }
        catchBlock_ = null;
        if (catchBlockBuilder_ != null) {
          catchBlockBuilder_.dispose();
          catchBlockBuilder_ = null;
        }
        finallyBlock_ = null;
        if (finallyBlockBuilder_ != null) {
          finallyBlockBuilder_.dispose();
          finallyBlockBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tryBlock_ = tryBlockBuilder_ == null
              ? tryBlock_
              : tryBlockBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.catchBlock_ = catchBlockBuilder_ == null
              ? catchBlock_
              : catchBlockBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.finallyBlock_ = finallyBlockBuilder_ == null
              ? finallyBlock_
              : finallyBlockBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try.getDefaultInstance()) return this;
        if (other.hasTryBlock()) {
          mergeTryBlock(other.getTryBlock());
        }
        if (other.hasCatchBlock()) {
          mergeCatchBlock(other.getCatchBlock());
        }
        if (other.hasFinallyBlock()) {
          mergeFinallyBlock(other.getFinallyBlock());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTryBlock()) {
          return false;
        }
        if (!getTryBlock().isInitialized()) {
          return false;
        }
        if (hasCatchBlock()) {
          if (!getCatchBlock().isInitialized()) {
            return false;
          }
        }
        if (hasFinallyBlock()) {
          if (!getFinallyBlock().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTryBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getCatchBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getFinallyBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement tryBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> tryBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       * @return Whether the tryBlock field is set.
       */
      public boolean hasTryBlock() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       * @return The tryBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTryBlock() {
        if (tryBlockBuilder_ == null) {
          return tryBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : tryBlock_;
        } else {
          return tryBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder setTryBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (tryBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tryBlock_ = value;
        } else {
          tryBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder setTryBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (tryBlockBuilder_ == null) {
          tryBlock_ = builderForValue.build();
        } else {
          tryBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder mergeTryBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (tryBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            tryBlock_ != null &&
            tryBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getTryBlockBuilder().mergeFrom(value);
          } else {
            tryBlock_ = value;
          }
        } else {
          tryBlockBuilder_.mergeFrom(value);
        }
        if (tryBlock_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public Builder clearTryBlock() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tryBlock_ = null;
        if (tryBlockBuilder_ != null) {
          tryBlockBuilder_.dispose();
          tryBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getTryBlockBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTryBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getTryBlockOrBuilder() {
        if (tryBlockBuilder_ != null) {
          return tryBlockBuilder_.getMessageOrBuilder();
        } else {
          return tryBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : tryBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tryBlock = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getTryBlockFieldBuilder() {
        if (tryBlockBuilder_ == null) {
          tryBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getTryBlock(),
                  getParentForChildren(),
                  isClean());
          tryBlock_ = null;
        }
        return tryBlockBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch catchBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder> catchBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       * @return Whether the catchBlock field is set.
       */
      public boolean hasCatchBlock() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       * @return The catchBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getCatchBlock() {
        if (catchBlockBuilder_ == null) {
          return catchBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance() : catchBlock_;
        } else {
          return catchBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder setCatchBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch value) {
        if (catchBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          catchBlock_ = value;
        } else {
          catchBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder setCatchBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder builderForValue) {
        if (catchBlockBuilder_ == null) {
          catchBlock_ = builderForValue.build();
        } else {
          catchBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder mergeCatchBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch value) {
        if (catchBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            catchBlock_ != null &&
            catchBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance()) {
            getCatchBlockBuilder().mergeFrom(value);
          } else {
            catchBlock_ = value;
          }
        } else {
          catchBlockBuilder_.mergeFrom(value);
        }
        if (catchBlock_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public Builder clearCatchBlock() {
        bitField0_ = (bitField0_ & ~0x00000002);
        catchBlock_ = null;
        if (catchBlockBuilder_ != null) {
          catchBlockBuilder_.dispose();
          catchBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder getCatchBlockBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCatchBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder getCatchBlockOrBuilder() {
        if (catchBlockBuilder_ != null) {
          return catchBlockBuilder_.getMessageOrBuilder();
        } else {
          return catchBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance() : catchBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Catch catchBlock = 2;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder> 
          getCatchBlockFieldBuilder() {
        if (catchBlockBuilder_ == null) {
          catchBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder>(
                  getCatchBlock(),
                  getParentForChildren(),
                  isClean());
          catchBlock_ = null;
        }
        return catchBlockBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement finallyBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> finallyBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       * @return Whether the finallyBlock field is set.
       */
      public boolean hasFinallyBlock() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       * @return The finallyBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getFinallyBlock() {
        if (finallyBlockBuilder_ == null) {
          return finallyBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : finallyBlock_;
        } else {
          return finallyBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder setFinallyBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (finallyBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          finallyBlock_ = value;
        } else {
          finallyBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder setFinallyBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (finallyBlockBuilder_ == null) {
          finallyBlock_ = builderForValue.build();
        } else {
          finallyBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder mergeFinallyBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (finallyBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            finallyBlock_ != null &&
            finallyBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getFinallyBlockBuilder().mergeFrom(value);
          } else {
            finallyBlock_ = value;
          }
        } else {
          finallyBlockBuilder_.mergeFrom(value);
        }
        if (finallyBlock_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public Builder clearFinallyBlock() {
        bitField0_ = (bitField0_ & ~0x00000004);
        finallyBlock_ = null;
        if (finallyBlockBuilder_ != null) {
          finallyBlockBuilder_.dispose();
          finallyBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getFinallyBlockBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFinallyBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getFinallyBlockOrBuilder() {
        if (finallyBlockBuilder_ != null) {
          return finallyBlockBuilder_.getMessageOrBuilder();
        } else {
          return finallyBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : finallyBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement finallyBlock = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getFinallyBlockFieldBuilder() {
        if (finallyBlockBuilder_ == null) {
          finallyBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getFinallyBlock(),
                  getParentForChildren(),
                  isClean());
          finallyBlock_ = null;
        }
        return finallyBlockBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Try)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Try)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Try>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Try>() {
      @java.lang.Override
      public Try parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Try> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Try> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Try getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CatchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Catch)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     * @return Whether the parameter field is set.
     */
    boolean hasParameter();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     * @return The parameter.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder getParameterOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Catch}
   */
  public static final class Catch extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Catch)
      CatchOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Catch.class.getName());
    }
    // Use Catch.newBuilder() to construct.
    private Catch(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Catch() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder.class);
    }

    private int bitField0_;
    public static final int PARAMETER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parameter_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     * @return Whether the parameter field is set.
     */
    @java.lang.Override
    public boolean hasParameter() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     * @return The parameter.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter() {
      return parameter_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance() : parameter_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder getParameterOrBuilder() {
      return parameter_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance() : parameter_;
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     * @return The body.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
      return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasParameter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBody()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getParameter().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBody().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getParameter());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getBody());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getParameter());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getBody());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch) obj;

      if (hasParameter() != other.hasParameter()) return false;
      if (hasParameter()) {
        if (!getParameter()
            .equals(other.getParameter())) return false;
      }
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasParameter()) {
        hash = (37 * hash) + PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getParameter().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Catch}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Catch)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CatchOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getParameterFieldBuilder();
          getBodyFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        parameter_ = null;
        if (parameterBuilder_ != null) {
          parameterBuilder_.dispose();
          parameterBuilder_ = null;
        }
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.parameter_ = parameterBuilder_ == null
              ? parameter_
              : parameterBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.body_ = bodyBuilder_ == null
              ? body_
              : bodyBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch.getDefaultInstance()) return this;
        if (other.hasParameter()) {
          mergeParameter(other.getParameter());
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasParameter()) {
          return false;
        }
        if (!hasBody()) {
          return false;
        }
        if (!getParameter().isInitialized()) {
          return false;
        }
        if (!getBody().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getParameterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getBodyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter parameter_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> parameterBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       * @return Whether the parameter field is set.
       */
      public boolean hasParameter() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       * @return The parameter.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter getParameter() {
        if (parameterBuilder_ == null) {
          return parameter_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance() : parameter_;
        } else {
          return parameterBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder setParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          parameter_ = value;
        } else {
          parameterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder setParameter(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          parameter_ = builderForValue.build();
        } else {
          parameterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder mergeParameter(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter value) {
        if (parameterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            parameter_ != null &&
            parameter_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance()) {
            getParameterBuilder().mergeFrom(value);
          } else {
            parameter_ = value;
          }
        } else {
          parameterBuilder_.mergeFrom(value);
        }
        if (parameter_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public Builder clearParameter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        parameter_ = null;
        if (parameterBuilder_ != null) {
          parameterBuilder_.dispose();
          parameterBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder getParameterBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getParameterFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder getParameterOrBuilder() {
        if (parameterBuilder_ != null) {
          return parameterBuilder_.getMessageOrBuilder();
        } else {
          return parameter_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.getDefaultInstance() : parameter_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Parameter parameter = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder> 
          getParameterFieldBuilder() {
        if (parameterBuilder_ == null) {
          parameterBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Parameter.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ParameterOrBuilder>(
                  getParameter(),
                  getParentForChildren(),
                  isClean());
          parameter_ = null;
        }
        return parameterBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement body_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> bodyBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       * @return The body.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
        } else {
          bodyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder setBody(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder mergeBody(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (bodyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            body_ != null &&
            body_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getBodyBuilder().mergeFrom(value);
          } else {
            body_ = value;
          }
        } else {
          bodyBuilder_.mergeFrom(value);
        }
        if (body_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public Builder clearBody() {
        bitField0_ = (bitField0_ & ~0x00000002);
        body_ = null;
        if (bodyBuilder_ != null) {
          bodyBuilder_.dispose();
          bodyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getBodyBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : body_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement body = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Catch)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Catch)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Catch>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Catch>() {
      @java.lang.Override
      public Catch parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Catch> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Catch> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Catch getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EmptyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Empty)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Empty}
   */
  public static final class Empty extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Empty)
      EmptyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Empty.class.getName());
    }
    // Use Empty.newBuilder() to construct.
    private Empty(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Empty() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Empty}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Empty)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.EmptyOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Empty)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Empty)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Empty>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Empty>() {
      @java.lang.Override
      public Empty parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Empty> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Empty> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Empty getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SingleLineCommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SingleLineComment}
   */
  public static final class SingleLineComment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
      SingleLineCommentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        SingleLineComment.class.getName());
    }
    // Use SingleLineComment.newBuilder() to construct.
    private SingleLineComment(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private SingleLineComment() {
      message_ = "";
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder.class);
    }

    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object message_ = "";
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 1, message_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(1, message_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) obj;

      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.SingleLineComment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineCommentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        message_ = "";
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          message_ = other.message_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object message_ = "";
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return Whether the message field is set.
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The message.
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            message_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The bytes for message.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        message_ = getDefaultInstance().getMessage();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.SingleLineComment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<SingleLineComment>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<SingleLineComment>() {
      @java.lang.Override
      public SingleLineComment parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<SingleLineComment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<SingleLineComment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SingleLineComment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MultiLineCommentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.MultiLineComment}
   */
  public static final class MultiLineComment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
      MultiLineCommentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        MultiLineComment.class.getName());
    }
    // Use MultiLineComment.newBuilder() to construct.
    private MultiLineComment(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private MultiLineComment() {
      message_ = "";
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder.class);
    }

    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object message_ = "";
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string message = 1 [features = { ... }</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 1, message_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(1, message_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) obj;

      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.MultiLineComment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineCommentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        message_ = "";
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          message_ = other.message_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                message_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object message_ = "";
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return Whether the message field is set.
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The message.
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            message_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return The bytes for message.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        message_ = getDefaultInstance().getMessage();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>string message = 1 [features = { ... }</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.MultiLineComment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<MultiLineComment>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<MultiLineComment>() {
      @java.lang.Override
      public MultiLineComment parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<MultiLineComment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<MultiLineComment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.MultiLineComment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FragmentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Fragment)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> 
        getImportedModuleList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getImportedModule(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    int getImportedModuleCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder> 
        getImportedModuleOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder getImportedModuleOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> 
        getImportEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getImportEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    int getImportEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder> 
        getImportEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder getImportEntryOrBuilder(
        int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     * @return Whether the declarationBlock field is set.
     */
    boolean hasDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     * @return The declarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getDeclarationBlockOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     * @return Whether the exportBlock field is set.
     */
    boolean hasExportBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     * @return The exportBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getExportBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getExportBlockOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     * @return Whether the initializerBlock field is set.
     */
    boolean hasInitializerBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     * @return The initializerBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getInitializerBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getInitializerBlockOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> 
        getNameBindingList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getNameBinding(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    int getNameBindingCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder> 
        getNameBindingOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder getNameBindingOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> 
        getClassModelList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getClassModel(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    int getClassModelCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder> 
        getClassModelOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder getClassModelOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> 
        getModuleExpressionList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getModuleExpression(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    int getModuleExpressionCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getModuleExpressionOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getModuleExpressionOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> 
        getInlineModuleList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getInlineModule(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    int getInlineModuleCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder> 
        getInlineModuleOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder getInlineModuleOrBuilder(
        int index);

    /**
     * <code>string package_fqn = 10;</code>
     * @return Whether the packageFqn field is set.
     */
    boolean hasPackageFqn();
    /**
     * <code>string package_fqn = 10;</code>
     * @return The packageFqn.
     */
    java.lang.String getPackageFqn();
    /**
     * <code>string package_fqn = 10;</code>
     * @return The bytes for packageFqn.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqnBytes();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     * @return Whether the testsInvocation field is set.
     */
    boolean hasTestsInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     * @return The testsInvocation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTestsInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getTestsInvocationOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     * @return Whether the mainInvocation field is set.
     */
    boolean hasMainInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     * @return The mainInvocation.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getMainInvocation();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getMainInvocationOrBuilder();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> 
        getInlinedLocalDeclarationsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getInlinedLocalDeclarations(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    int getInlinedLocalDeclarationsCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder> 
        getInlinedLocalDeclarationsOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder getInlinedLocalDeclarationsOrBuilder(
        int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> 
        getIrClassModelList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getIrClassModel(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    int getIrClassModelCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder> 
        getIrClassModelOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder getIrClassModelOrBuilder(
        int index);

    /**
     * <code>string dts = 15;</code>
     * @return Whether the dts field is set.
     */
    boolean hasDts();
    /**
     * <code>string dts = 15;</code>
     * @return The dts.
     */
    java.lang.String getDts();
    /**
     * <code>string dts = 15;</code>
     * @return The bytes for dts.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getDtsBytes();

    /**
     * <code>int32 suite_function = 16;</code>
     * @return Whether the suiteFunction field is set.
     */
    boolean hasSuiteFunction();
    /**
     * <code>int32 suite_function = 16;</code>
     * @return The suiteFunction.
     */
    int getSuiteFunction();

    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return A list containing the definitions.
     */
    java.util.List<java.lang.Integer> getDefinitionsList();
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return The count of definitions.
     */
    int getDefinitionsCount();
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The definitions at the given index.
     */
    int getDefinitions(int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     * @return Whether the polyfills field is set.
     */
    boolean hasPolyfills();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     * @return The polyfills.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPolyfills();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPolyfillsOrBuilder();

    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return A list containing the optionalCrossModuleImports.
     */
    java.util.List<java.lang.Integer> getOptionalCrossModuleImportsList();
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return The count of optionalCrossModuleImports.
     */
    int getOptionalCrossModuleImportsCount();
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The optionalCrossModuleImports at the given index.
     */
    int getOptionalCrossModuleImports(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Fragment}
   */
  public static final class Fragment extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Fragment)
      FragmentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Fragment.class.getName());
    }
    // Use Fragment.newBuilder() to construct.
    private Fragment(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Fragment() {
      importedModule_ = java.util.Collections.emptyList();
      importEntry_ = java.util.Collections.emptyList();
      nameBinding_ = java.util.Collections.emptyList();
      classModel_ = java.util.Collections.emptyList();
      moduleExpression_ = java.util.Collections.emptyList();
      inlineModule_ = java.util.Collections.emptyList();
      packageFqn_ = "";
      inlinedLocalDeclarations_ = java.util.Collections.emptyList();
      irClassModel_ = java.util.Collections.emptyList();
      dts_ = "";
      definitions_ = emptyIntList();
      optionalCrossModuleImports_ = emptyIntList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder.class);
    }

    private int bitField0_;
    public static final int IMPORTED_MODULE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> importedModule_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> getImportedModuleList() {
      return importedModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder> 
        getImportedModuleOrBuilderList() {
      return importedModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public int getImportedModuleCount() {
      return importedModule_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getImportedModule(int index) {
      return importedModule_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder getImportedModuleOrBuilder(
        int index) {
      return importedModule_.get(index);
    }

    public static final int IMPORT_ENTRY_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> importEntry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> getImportEntryList() {
      return importEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder> 
        getImportEntryOrBuilderList() {
      return importEntry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public int getImportEntryCount() {
      return importEntry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getImportEntry(int index) {
      return importEntry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder getImportEntryOrBuilder(
        int index) {
      return importEntry_.get(index);
    }

    public static final int DECLARATION_BLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock declarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     * @return Whether the declarationBlock field is set.
     */
    @java.lang.Override
    public boolean hasDeclarationBlock() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     * @return The declarationBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDeclarationBlock() {
      return declarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : declarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getDeclarationBlockOrBuilder() {
      return declarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : declarationBlock_;
    }

    public static final int EXPORT_BLOCK_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock exportBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     * @return Whether the exportBlock field is set.
     */
    @java.lang.Override
    public boolean hasExportBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     * @return The exportBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getExportBlock() {
      return exportBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : exportBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getExportBlockOrBuilder() {
      return exportBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : exportBlock_;
    }

    public static final int INITIALIZER_BLOCK_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock initializerBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     * @return Whether the initializerBlock field is set.
     */
    @java.lang.Override
    public boolean hasInitializerBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     * @return The initializerBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getInitializerBlock() {
      return initializerBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : initializerBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getInitializerBlockOrBuilder() {
      return initializerBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : initializerBlock_;
    }

    public static final int NAME_BINDING_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> nameBinding_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> getNameBindingList() {
      return nameBinding_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder> 
        getNameBindingOrBuilderList() {
      return nameBinding_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public int getNameBindingCount() {
      return nameBinding_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getNameBinding(int index) {
      return nameBinding_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder getNameBindingOrBuilder(
        int index) {
      return nameBinding_.get(index);
    }

    public static final int CLASS_MODEL_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> classModel_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> getClassModelList() {
      return classModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder> 
        getClassModelOrBuilderList() {
      return classModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public int getClassModelCount() {
      return classModel_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getClassModel(int index) {
      return classModel_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder getClassModelOrBuilder(
        int index) {
      return classModel_.get(index);
    }

    public static final int MODULE_EXPRESSION_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> moduleExpression_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getModuleExpressionList() {
      return moduleExpression_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
        getModuleExpressionOrBuilderList() {
      return moduleExpression_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public int getModuleExpressionCount() {
      return moduleExpression_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getModuleExpression(int index) {
      return moduleExpression_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getModuleExpressionOrBuilder(
        int index) {
      return moduleExpression_.get(index);
    }

    public static final int INLINE_MODULE_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> inlineModule_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> getInlineModuleList() {
      return inlineModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder> 
        getInlineModuleOrBuilderList() {
      return inlineModule_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public int getInlineModuleCount() {
      return inlineModule_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getInlineModule(int index) {
      return inlineModule_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder getInlineModuleOrBuilder(
        int index) {
      return inlineModule_.get(index);
    }

    public static final int PACKAGE_FQN_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private volatile java.lang.Object packageFqn_ = "";
    /**
     * <code>string package_fqn = 10;</code>
     * @return Whether the packageFqn field is set.
     */
    @java.lang.Override
    public boolean hasPackageFqn() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>string package_fqn = 10;</code>
     * @return The packageFqn.
     */
    @java.lang.Override
    public java.lang.String getPackageFqn() {
      java.lang.Object ref = packageFqn_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          packageFqn_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string package_fqn = 10;</code>
     * @return The bytes for packageFqn.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqnBytes() {
      java.lang.Object ref = packageFqn_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        packageFqn_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int TESTS_INVOCATION_FIELD_NUMBER = 11;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement testsInvocation_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     * @return Whether the testsInvocation field is set.
     */
    @java.lang.Override
    public boolean hasTestsInvocation() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     * @return The testsInvocation.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTestsInvocation() {
      return testsInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : testsInvocation_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getTestsInvocationOrBuilder() {
      return testsInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : testsInvocation_;
    }

    public static final int MAIN_INVOCATION_FIELD_NUMBER = 12;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement mainInvocation_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     * @return Whether the mainInvocation field is set.
     */
    @java.lang.Override
    public boolean hasMainInvocation() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     * @return The mainInvocation.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getMainInvocation() {
      return mainInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : mainInvocation_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getMainInvocationOrBuilder() {
      return mainInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : mainInvocation_;
    }

    public static final int INLINED_LOCAL_DECLARATIONS_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> inlinedLocalDeclarations_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> getInlinedLocalDeclarationsList() {
      return inlinedLocalDeclarations_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder> 
        getInlinedLocalDeclarationsOrBuilderList() {
      return inlinedLocalDeclarations_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public int getInlinedLocalDeclarationsCount() {
      return inlinedLocalDeclarations_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getInlinedLocalDeclarations(int index) {
      return inlinedLocalDeclarations_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder getInlinedLocalDeclarationsOrBuilder(
        int index) {
      return inlinedLocalDeclarations_.get(index);
    }

    public static final int IR_CLASS_MODEL_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> irClassModel_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> getIrClassModelList() {
      return irClassModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder> 
        getIrClassModelOrBuilderList() {
      return irClassModel_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public int getIrClassModelCount() {
      return irClassModel_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getIrClassModel(int index) {
      return irClassModel_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder getIrClassModelOrBuilder(
        int index) {
      return irClassModel_.get(index);
    }

    public static final int DTS_FIELD_NUMBER = 15;
    @SuppressWarnings("serial")
    private volatile java.lang.Object dts_ = "";
    /**
     * <code>string dts = 15;</code>
     * @return Whether the dts field is set.
     */
    @java.lang.Override
    public boolean hasDts() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>string dts = 15;</code>
     * @return The dts.
     */
    @java.lang.Override
    public java.lang.String getDts() {
      java.lang.Object ref = dts_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          dts_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string dts = 15;</code>
     * @return The bytes for dts.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.ByteString
        getDtsBytes() {
      java.lang.Object ref = dts_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dts_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    public static final int SUITE_FUNCTION_FIELD_NUMBER = 16;
    private int suiteFunction_ = 0;
    /**
     * <code>int32 suite_function = 16;</code>
     * @return Whether the suiteFunction field is set.
     */
    @java.lang.Override
    public boolean hasSuiteFunction() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>int32 suite_function = 16;</code>
     * @return The suiteFunction.
     */
    @java.lang.Override
    public int getSuiteFunction() {
      return suiteFunction_;
    }

    public static final int DEFINITIONS_FIELD_NUMBER = 17;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList definitions_ =
        emptyIntList();
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return A list containing the definitions.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getDefinitionsList() {
      return definitions_;
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @return The count of definitions.
     */
    public int getDefinitionsCount() {
      return definitions_.size();
    }
    /**
     * <code>repeated int32 definitions = 17 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The definitions at the given index.
     */
    public int getDefinitions(int index) {
      return definitions_.getInt(index);
    }

    public static final int POLYFILLS_FIELD_NUMBER = 18;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock polyfills_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     * @return Whether the polyfills field is set.
     */
    @java.lang.Override
    public boolean hasPolyfills() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     * @return The polyfills.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPolyfills() {
      return polyfills_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : polyfills_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPolyfillsOrBuilder() {
      return polyfills_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : polyfills_;
    }

    public static final int OPTIONALCROSSMODULEIMPORTS_FIELD_NUMBER = 19;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList optionalCrossModuleImports_ =
        emptyIntList();
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return A list containing the optionalCrossModuleImports.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getOptionalCrossModuleImportsList() {
      return optionalCrossModuleImports_;
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @return The count of optionalCrossModuleImports.
     */
    public int getOptionalCrossModuleImportsCount() {
      return optionalCrossModuleImports_.size();
    }
    /**
     * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The optionalCrossModuleImports at the given index.
     */
    public int getOptionalCrossModuleImports(int index) {
      return optionalCrossModuleImports_.getInt(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getImportedModuleCount(); i++) {
        if (!getImportedModule(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getImportEntryCount(); i++) {
        if (!getImportEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDeclarationBlock()) {
        if (!getDeclarationBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExportBlock()) {
        if (!getExportBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasInitializerBlock()) {
        if (!getInitializerBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getNameBindingCount(); i++) {
        if (!getNameBinding(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getClassModelCount(); i++) {
        if (!getClassModel(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getModuleExpressionCount(); i++) {
        if (!getModuleExpression(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getInlineModuleCount(); i++) {
        if (!getInlineModule(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTestsInvocation()) {
        if (!getTestsInvocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMainInvocation()) {
        if (!getMainInvocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getInlinedLocalDeclarationsCount(); i++) {
        if (!getInlinedLocalDeclarations(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getIrClassModelCount(); i++) {
        if (!getIrClassModel(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPolyfills()) {
        if (!getPolyfills().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < importedModule_.size(); i++) {
        output.writeMessage(1, importedModule_.get(i));
      }
      for (int i = 0; i < importEntry_.size(); i++) {
        output.writeMessage(2, importEntry_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getDeclarationBlock());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(4, getExportBlock());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(5, getInitializerBlock());
      }
      for (int i = 0; i < nameBinding_.size(); i++) {
        output.writeMessage(6, nameBinding_.get(i));
      }
      for (int i = 0; i < classModel_.size(); i++) {
        output.writeMessage(7, classModel_.get(i));
      }
      for (int i = 0; i < moduleExpression_.size(); i++) {
        output.writeMessage(8, moduleExpression_.get(i));
      }
      for (int i = 0; i < inlineModule_.size(); i++) {
        output.writeMessage(9, inlineModule_.get(i));
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 10, packageFqn_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(11, getTestsInvocation());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(12, getMainInvocation());
      }
      for (int i = 0; i < inlinedLocalDeclarations_.size(); i++) {
        output.writeMessage(13, inlinedLocalDeclarations_.get(i));
      }
      for (int i = 0; i < irClassModel_.size(); i++) {
        output.writeMessage(14, irClassModel_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 15, dts_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeInt32(16, suiteFunction_);
      }
      for (int i = 0; i < definitions_.size(); i++) {
        output.writeInt32(17, definitions_.getInt(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(18, getPolyfills());
      }
      for (int i = 0; i < optionalCrossModuleImports_.size(); i++) {
        output.writeInt32(19, optionalCrossModuleImports_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < importedModule_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, importedModule_.get(i));
      }
      for (int i = 0; i < importEntry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, importEntry_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getDeclarationBlock());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getExportBlock());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, getInitializerBlock());
      }
      for (int i = 0; i < nameBinding_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, nameBinding_.get(i));
      }
      for (int i = 0; i < classModel_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(7, classModel_.get(i));
      }
      for (int i = 0; i < moduleExpression_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(8, moduleExpression_.get(i));
      }
      for (int i = 0; i < inlineModule_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(9, inlineModule_.get(i));
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(10, packageFqn_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(11, getTestsInvocation());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(12, getMainInvocation());
      }
      for (int i = 0; i < inlinedLocalDeclarations_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(13, inlinedLocalDeclarations_.get(i));
      }
      for (int i = 0; i < irClassModel_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(14, irClassModel_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += org.jetbrains.kotlin.protobuf.GeneratedMessage.computeStringSize(15, dts_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(16, suiteFunction_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < definitions_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(definitions_.getInt(i));
        }
        size += dataSize;
        size += 2 * getDefinitionsList().size();
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(18, getPolyfills());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < optionalCrossModuleImports_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(optionalCrossModuleImports_.getInt(i));
        }
        size += dataSize;
        size += 2 * getOptionalCrossModuleImportsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment) obj;

      if (!getImportedModuleList()
          .equals(other.getImportedModuleList())) return false;
      if (!getImportEntryList()
          .equals(other.getImportEntryList())) return false;
      if (hasDeclarationBlock() != other.hasDeclarationBlock()) return false;
      if (hasDeclarationBlock()) {
        if (!getDeclarationBlock()
            .equals(other.getDeclarationBlock())) return false;
      }
      if (hasExportBlock() != other.hasExportBlock()) return false;
      if (hasExportBlock()) {
        if (!getExportBlock()
            .equals(other.getExportBlock())) return false;
      }
      if (hasInitializerBlock() != other.hasInitializerBlock()) return false;
      if (hasInitializerBlock()) {
        if (!getInitializerBlock()
            .equals(other.getInitializerBlock())) return false;
      }
      if (!getNameBindingList()
          .equals(other.getNameBindingList())) return false;
      if (!getClassModelList()
          .equals(other.getClassModelList())) return false;
      if (!getModuleExpressionList()
          .equals(other.getModuleExpressionList())) return false;
      if (!getInlineModuleList()
          .equals(other.getInlineModuleList())) return false;
      if (hasPackageFqn() != other.hasPackageFqn()) return false;
      if (hasPackageFqn()) {
        if (!getPackageFqn()
            .equals(other.getPackageFqn())) return false;
      }
      if (hasTestsInvocation() != other.hasTestsInvocation()) return false;
      if (hasTestsInvocation()) {
        if (!getTestsInvocation()
            .equals(other.getTestsInvocation())) return false;
      }
      if (hasMainInvocation() != other.hasMainInvocation()) return false;
      if (hasMainInvocation()) {
        if (!getMainInvocation()
            .equals(other.getMainInvocation())) return false;
      }
      if (!getInlinedLocalDeclarationsList()
          .equals(other.getInlinedLocalDeclarationsList())) return false;
      if (!getIrClassModelList()
          .equals(other.getIrClassModelList())) return false;
      if (hasDts() != other.hasDts()) return false;
      if (hasDts()) {
        if (!getDts()
            .equals(other.getDts())) return false;
      }
      if (hasSuiteFunction() != other.hasSuiteFunction()) return false;
      if (hasSuiteFunction()) {
        if (getSuiteFunction()
            != other.getSuiteFunction()) return false;
      }
      if (!getDefinitionsList()
          .equals(other.getDefinitionsList())) return false;
      if (hasPolyfills() != other.hasPolyfills()) return false;
      if (hasPolyfills()) {
        if (!getPolyfills()
            .equals(other.getPolyfills())) return false;
      }
      if (!getOptionalCrossModuleImportsList()
          .equals(other.getOptionalCrossModuleImportsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getImportedModuleCount() > 0) {
        hash = (37 * hash) + IMPORTED_MODULE_FIELD_NUMBER;
        hash = (53 * hash) + getImportedModuleList().hashCode();
      }
      if (getImportEntryCount() > 0) {
        hash = (37 * hash) + IMPORT_ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + getImportEntryList().hashCode();
      }
      if (hasDeclarationBlock()) {
        hash = (37 * hash) + DECLARATION_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getDeclarationBlock().hashCode();
      }
      if (hasExportBlock()) {
        hash = (37 * hash) + EXPORT_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getExportBlock().hashCode();
      }
      if (hasInitializerBlock()) {
        hash = (37 * hash) + INITIALIZER_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getInitializerBlock().hashCode();
      }
      if (getNameBindingCount() > 0) {
        hash = (37 * hash) + NAME_BINDING_FIELD_NUMBER;
        hash = (53 * hash) + getNameBindingList().hashCode();
      }
      if (getClassModelCount() > 0) {
        hash = (37 * hash) + CLASS_MODEL_FIELD_NUMBER;
        hash = (53 * hash) + getClassModelList().hashCode();
      }
      if (getModuleExpressionCount() > 0) {
        hash = (37 * hash) + MODULE_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getModuleExpressionList().hashCode();
      }
      if (getInlineModuleCount() > 0) {
        hash = (37 * hash) + INLINE_MODULE_FIELD_NUMBER;
        hash = (53 * hash) + getInlineModuleList().hashCode();
      }
      if (hasPackageFqn()) {
        hash = (37 * hash) + PACKAGE_FQN_FIELD_NUMBER;
        hash = (53 * hash) + getPackageFqn().hashCode();
      }
      if (hasTestsInvocation()) {
        hash = (37 * hash) + TESTS_INVOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getTestsInvocation().hashCode();
      }
      if (hasMainInvocation()) {
        hash = (37 * hash) + MAIN_INVOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getMainInvocation().hashCode();
      }
      if (getInlinedLocalDeclarationsCount() > 0) {
        hash = (37 * hash) + INLINED_LOCAL_DECLARATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getInlinedLocalDeclarationsList().hashCode();
      }
      if (getIrClassModelCount() > 0) {
        hash = (37 * hash) + IR_CLASS_MODEL_FIELD_NUMBER;
        hash = (53 * hash) + getIrClassModelList().hashCode();
      }
      if (hasDts()) {
        hash = (37 * hash) + DTS_FIELD_NUMBER;
        hash = (53 * hash) + getDts().hashCode();
      }
      if (hasSuiteFunction()) {
        hash = (37 * hash) + SUITE_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getSuiteFunction();
      }
      if (getDefinitionsCount() > 0) {
        hash = (37 * hash) + DEFINITIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDefinitionsList().hashCode();
      }
      if (hasPolyfills()) {
        hash = (37 * hash) + POLYFILLS_FIELD_NUMBER;
        hash = (53 * hash) + getPolyfills().hashCode();
      }
      if (getOptionalCrossModuleImportsCount() > 0) {
        hash = (37 * hash) + OPTIONALCROSSMODULEIMPORTS_FIELD_NUMBER;
        hash = (53 * hash) + getOptionalCrossModuleImportsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Fragment}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Fragment)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getImportedModuleFieldBuilder();
          getImportEntryFieldBuilder();
          getDeclarationBlockFieldBuilder();
          getExportBlockFieldBuilder();
          getInitializerBlockFieldBuilder();
          getNameBindingFieldBuilder();
          getClassModelFieldBuilder();
          getModuleExpressionFieldBuilder();
          getInlineModuleFieldBuilder();
          getTestsInvocationFieldBuilder();
          getMainInvocationFieldBuilder();
          getInlinedLocalDeclarationsFieldBuilder();
          getIrClassModelFieldBuilder();
          getPolyfillsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (importedModuleBuilder_ == null) {
          importedModule_ = java.util.Collections.emptyList();
        } else {
          importedModule_ = null;
          importedModuleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (importEntryBuilder_ == null) {
          importEntry_ = java.util.Collections.emptyList();
        } else {
          importEntry_ = null;
          importEntryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        declarationBlock_ = null;
        if (declarationBlockBuilder_ != null) {
          declarationBlockBuilder_.dispose();
          declarationBlockBuilder_ = null;
        }
        exportBlock_ = null;
        if (exportBlockBuilder_ != null) {
          exportBlockBuilder_.dispose();
          exportBlockBuilder_ = null;
        }
        initializerBlock_ = null;
        if (initializerBlockBuilder_ != null) {
          initializerBlockBuilder_.dispose();
          initializerBlockBuilder_ = null;
        }
        if (nameBindingBuilder_ == null) {
          nameBinding_ = java.util.Collections.emptyList();
        } else {
          nameBinding_ = null;
          nameBindingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (classModelBuilder_ == null) {
          classModel_ = java.util.Collections.emptyList();
        } else {
          classModel_ = null;
          classModelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (moduleExpressionBuilder_ == null) {
          moduleExpression_ = java.util.Collections.emptyList();
        } else {
          moduleExpression_ = null;
          moduleExpressionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (inlineModuleBuilder_ == null) {
          inlineModule_ = java.util.Collections.emptyList();
        } else {
          inlineModule_ = null;
          inlineModuleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        packageFqn_ = "";
        testsInvocation_ = null;
        if (testsInvocationBuilder_ != null) {
          testsInvocationBuilder_.dispose();
          testsInvocationBuilder_ = null;
        }
        mainInvocation_ = null;
        if (mainInvocationBuilder_ != null) {
          mainInvocationBuilder_.dispose();
          mainInvocationBuilder_ = null;
        }
        if (inlinedLocalDeclarationsBuilder_ == null) {
          inlinedLocalDeclarations_ = java.util.Collections.emptyList();
        } else {
          inlinedLocalDeclarations_ = null;
          inlinedLocalDeclarationsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (irClassModelBuilder_ == null) {
          irClassModel_ = java.util.Collections.emptyList();
        } else {
          irClassModel_ = null;
          irClassModelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        dts_ = "";
        suiteFunction_ = 0;
        definitions_ = emptyIntList();
        polyfills_ = null;
        if (polyfillsBuilder_ != null) {
          polyfillsBuilder_.dispose();
          polyfillsBuilder_ = null;
        }
        optionalCrossModuleImports_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment result) {
        if (importedModuleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            importedModule_ = java.util.Collections.unmodifiableList(importedModule_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.importedModule_ = importedModule_;
        } else {
          result.importedModule_ = importedModuleBuilder_.build();
        }
        if (importEntryBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            importEntry_ = java.util.Collections.unmodifiableList(importEntry_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.importEntry_ = importEntry_;
        } else {
          result.importEntry_ = importEntryBuilder_.build();
        }
        if (nameBindingBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            nameBinding_ = java.util.Collections.unmodifiableList(nameBinding_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.nameBinding_ = nameBinding_;
        } else {
          result.nameBinding_ = nameBindingBuilder_.build();
        }
        if (classModelBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            classModel_ = java.util.Collections.unmodifiableList(classModel_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.classModel_ = classModel_;
        } else {
          result.classModel_ = classModelBuilder_.build();
        }
        if (moduleExpressionBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            moduleExpression_ = java.util.Collections.unmodifiableList(moduleExpression_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.moduleExpression_ = moduleExpression_;
        } else {
          result.moduleExpression_ = moduleExpressionBuilder_.build();
        }
        if (inlineModuleBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0)) {
            inlineModule_ = java.util.Collections.unmodifiableList(inlineModule_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.inlineModule_ = inlineModule_;
        } else {
          result.inlineModule_ = inlineModuleBuilder_.build();
        }
        if (inlinedLocalDeclarationsBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0)) {
            inlinedLocalDeclarations_ = java.util.Collections.unmodifiableList(inlinedLocalDeclarations_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.inlinedLocalDeclarations_ = inlinedLocalDeclarations_;
        } else {
          result.inlinedLocalDeclarations_ = inlinedLocalDeclarationsBuilder_.build();
        }
        if (irClassModelBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0)) {
            irClassModel_ = java.util.Collections.unmodifiableList(irClassModel_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.irClassModel_ = irClassModel_;
        } else {
          result.irClassModel_ = irClassModelBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.declarationBlock_ = declarationBlockBuilder_ == null
              ? declarationBlock_
              : declarationBlockBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.exportBlock_ = exportBlockBuilder_ == null
              ? exportBlock_
              : exportBlockBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.initializerBlock_ = initializerBlockBuilder_ == null
              ? initializerBlock_
              : initializerBlockBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.packageFqn_ = packageFqn_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.testsInvocation_ = testsInvocationBuilder_ == null
              ? testsInvocation_
              : testsInvocationBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.mainInvocation_ = mainInvocationBuilder_ == null
              ? mainInvocation_
              : mainInvocationBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.dts_ = dts_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.suiteFunction_ = suiteFunction_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          definitions_.makeImmutable();
          result.definitions_ = definitions_;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.polyfills_ = polyfillsBuilder_ == null
              ? polyfills_
              : polyfillsBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          optionalCrossModuleImports_.makeImmutable();
          result.optionalCrossModuleImports_ = optionalCrossModuleImports_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance()) return this;
        if (importedModuleBuilder_ == null) {
          if (!other.importedModule_.isEmpty()) {
            if (importedModule_.isEmpty()) {
              importedModule_ = other.importedModule_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureImportedModuleIsMutable();
              importedModule_.addAll(other.importedModule_);
            }
            onChanged();
          }
        } else {
          if (!other.importedModule_.isEmpty()) {
            if (importedModuleBuilder_.isEmpty()) {
              importedModuleBuilder_.dispose();
              importedModuleBuilder_ = null;
              importedModule_ = other.importedModule_;
              bitField0_ = (bitField0_ & ~0x00000001);
              importedModuleBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getImportedModuleFieldBuilder() : null;
            } else {
              importedModuleBuilder_.addAllMessages(other.importedModule_);
            }
          }
        }
        if (importEntryBuilder_ == null) {
          if (!other.importEntry_.isEmpty()) {
            if (importEntry_.isEmpty()) {
              importEntry_ = other.importEntry_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureImportEntryIsMutable();
              importEntry_.addAll(other.importEntry_);
            }
            onChanged();
          }
        } else {
          if (!other.importEntry_.isEmpty()) {
            if (importEntryBuilder_.isEmpty()) {
              importEntryBuilder_.dispose();
              importEntryBuilder_ = null;
              importEntry_ = other.importEntry_;
              bitField0_ = (bitField0_ & ~0x00000002);
              importEntryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getImportEntryFieldBuilder() : null;
            } else {
              importEntryBuilder_.addAllMessages(other.importEntry_);
            }
          }
        }
        if (other.hasDeclarationBlock()) {
          mergeDeclarationBlock(other.getDeclarationBlock());
        }
        if (other.hasExportBlock()) {
          mergeExportBlock(other.getExportBlock());
        }
        if (other.hasInitializerBlock()) {
          mergeInitializerBlock(other.getInitializerBlock());
        }
        if (nameBindingBuilder_ == null) {
          if (!other.nameBinding_.isEmpty()) {
            if (nameBinding_.isEmpty()) {
              nameBinding_ = other.nameBinding_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureNameBindingIsMutable();
              nameBinding_.addAll(other.nameBinding_);
            }
            onChanged();
          }
        } else {
          if (!other.nameBinding_.isEmpty()) {
            if (nameBindingBuilder_.isEmpty()) {
              nameBindingBuilder_.dispose();
              nameBindingBuilder_ = null;
              nameBinding_ = other.nameBinding_;
              bitField0_ = (bitField0_ & ~0x00000020);
              nameBindingBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getNameBindingFieldBuilder() : null;
            } else {
              nameBindingBuilder_.addAllMessages(other.nameBinding_);
            }
          }
        }
        if (classModelBuilder_ == null) {
          if (!other.classModel_.isEmpty()) {
            if (classModel_.isEmpty()) {
              classModel_ = other.classModel_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureClassModelIsMutable();
              classModel_.addAll(other.classModel_);
            }
            onChanged();
          }
        } else {
          if (!other.classModel_.isEmpty()) {
            if (classModelBuilder_.isEmpty()) {
              classModelBuilder_.dispose();
              classModelBuilder_ = null;
              classModel_ = other.classModel_;
              bitField0_ = (bitField0_ & ~0x00000040);
              classModelBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getClassModelFieldBuilder() : null;
            } else {
              classModelBuilder_.addAllMessages(other.classModel_);
            }
          }
        }
        if (moduleExpressionBuilder_ == null) {
          if (!other.moduleExpression_.isEmpty()) {
            if (moduleExpression_.isEmpty()) {
              moduleExpression_ = other.moduleExpression_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureModuleExpressionIsMutable();
              moduleExpression_.addAll(other.moduleExpression_);
            }
            onChanged();
          }
        } else {
          if (!other.moduleExpression_.isEmpty()) {
            if (moduleExpressionBuilder_.isEmpty()) {
              moduleExpressionBuilder_.dispose();
              moduleExpressionBuilder_ = null;
              moduleExpression_ = other.moduleExpression_;
              bitField0_ = (bitField0_ & ~0x00000080);
              moduleExpressionBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getModuleExpressionFieldBuilder() : null;
            } else {
              moduleExpressionBuilder_.addAllMessages(other.moduleExpression_);
            }
          }
        }
        if (inlineModuleBuilder_ == null) {
          if (!other.inlineModule_.isEmpty()) {
            if (inlineModule_.isEmpty()) {
              inlineModule_ = other.inlineModule_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureInlineModuleIsMutable();
              inlineModule_.addAll(other.inlineModule_);
            }
            onChanged();
          }
        } else {
          if (!other.inlineModule_.isEmpty()) {
            if (inlineModuleBuilder_.isEmpty()) {
              inlineModuleBuilder_.dispose();
              inlineModuleBuilder_ = null;
              inlineModule_ = other.inlineModule_;
              bitField0_ = (bitField0_ & ~0x00000100);
              inlineModuleBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInlineModuleFieldBuilder() : null;
            } else {
              inlineModuleBuilder_.addAllMessages(other.inlineModule_);
            }
          }
        }
        if (other.hasPackageFqn()) {
          packageFqn_ = other.packageFqn_;
          bitField0_ |= 0x00000200;
          onChanged();
        }
        if (other.hasTestsInvocation()) {
          mergeTestsInvocation(other.getTestsInvocation());
        }
        if (other.hasMainInvocation()) {
          mergeMainInvocation(other.getMainInvocation());
        }
        if (inlinedLocalDeclarationsBuilder_ == null) {
          if (!other.inlinedLocalDeclarations_.isEmpty()) {
            if (inlinedLocalDeclarations_.isEmpty()) {
              inlinedLocalDeclarations_ = other.inlinedLocalDeclarations_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureInlinedLocalDeclarationsIsMutable();
              inlinedLocalDeclarations_.addAll(other.inlinedLocalDeclarations_);
            }
            onChanged();
          }
        } else {
          if (!other.inlinedLocalDeclarations_.isEmpty()) {
            if (inlinedLocalDeclarationsBuilder_.isEmpty()) {
              inlinedLocalDeclarationsBuilder_.dispose();
              inlinedLocalDeclarationsBuilder_ = null;
              inlinedLocalDeclarations_ = other.inlinedLocalDeclarations_;
              bitField0_ = (bitField0_ & ~0x00001000);
              inlinedLocalDeclarationsBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInlinedLocalDeclarationsFieldBuilder() : null;
            } else {
              inlinedLocalDeclarationsBuilder_.addAllMessages(other.inlinedLocalDeclarations_);
            }
          }
        }
        if (irClassModelBuilder_ == null) {
          if (!other.irClassModel_.isEmpty()) {
            if (irClassModel_.isEmpty()) {
              irClassModel_ = other.irClassModel_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureIrClassModelIsMutable();
              irClassModel_.addAll(other.irClassModel_);
            }
            onChanged();
          }
        } else {
          if (!other.irClassModel_.isEmpty()) {
            if (irClassModelBuilder_.isEmpty()) {
              irClassModelBuilder_.dispose();
              irClassModelBuilder_ = null;
              irClassModel_ = other.irClassModel_;
              bitField0_ = (bitField0_ & ~0x00002000);
              irClassModelBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getIrClassModelFieldBuilder() : null;
            } else {
              irClassModelBuilder_.addAllMessages(other.irClassModel_);
            }
          }
        }
        if (other.hasDts()) {
          dts_ = other.dts_;
          bitField0_ |= 0x00004000;
          onChanged();
        }
        if (other.hasSuiteFunction()) {
          setSuiteFunction(other.getSuiteFunction());
        }
        if (!other.definitions_.isEmpty()) {
          if (definitions_.isEmpty()) {
            definitions_ = other.definitions_;
            definitions_.makeImmutable();
            bitField0_ |= 0x00010000;
          } else {
            ensureDefinitionsIsMutable();
            definitions_.addAll(other.definitions_);
          }
          onChanged();
        }
        if (other.hasPolyfills()) {
          mergePolyfills(other.getPolyfills());
        }
        if (!other.optionalCrossModuleImports_.isEmpty()) {
          if (optionalCrossModuleImports_.isEmpty()) {
            optionalCrossModuleImports_ = other.optionalCrossModuleImports_;
            optionalCrossModuleImports_.makeImmutable();
            bitField0_ |= 0x00040000;
          } else {
            ensureOptionalCrossModuleImportsIsMutable();
            optionalCrossModuleImports_.addAll(other.optionalCrossModuleImports_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getImportedModuleCount(); i++) {
          if (!getImportedModule(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getImportEntryCount(); i++) {
          if (!getImportEntry(i).isInitialized()) {
            return false;
          }
        }
        if (hasDeclarationBlock()) {
          if (!getDeclarationBlock().isInitialized()) {
            return false;
          }
        }
        if (hasExportBlock()) {
          if (!getExportBlock().isInitialized()) {
            return false;
          }
        }
        if (hasInitializerBlock()) {
          if (!getInitializerBlock().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getNameBindingCount(); i++) {
          if (!getNameBinding(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getClassModelCount(); i++) {
          if (!getClassModel(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getModuleExpressionCount(); i++) {
          if (!getModuleExpression(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getInlineModuleCount(); i++) {
          if (!getInlineModule(i).isInitialized()) {
            return false;
          }
        }
        if (hasTestsInvocation()) {
          if (!getTestsInvocation().isInitialized()) {
            return false;
          }
        }
        if (hasMainInvocation()) {
          if (!getMainInvocation().isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getInlinedLocalDeclarationsCount(); i++) {
          if (!getInlinedLocalDeclarations(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getIrClassModelCount(); i++) {
          if (!getIrClassModel(i).isInitialized()) {
            return false;
          }
        }
        if (hasPolyfills()) {
          if (!getPolyfills().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.parser(),
                        extensionRegistry);
                if (importedModuleBuilder_ == null) {
                  ensureImportedModuleIsMutable();
                  importedModule_.add(m);
                } else {
                  importedModuleBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.parser(),
                        extensionRegistry);
                if (importEntryBuilder_ == null) {
                  ensureImportEntryIsMutable();
                  importEntry_.add(m);
                } else {
                  importEntryBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getDeclarationBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getExportBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getInitializerBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.parser(),
                        extensionRegistry);
                if (nameBindingBuilder_ == null) {
                  ensureNameBindingIsMutable();
                  nameBinding_.add(m);
                } else {
                  nameBindingBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 58: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.parser(),
                        extensionRegistry);
                if (classModelBuilder_ == null) {
                  ensureClassModelIsMutable();
                  classModel_.add(m);
                } else {
                  classModelBuilder_.addMessage(m);
                }
                break;
              } // case 58
              case 66: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.parser(),
                        extensionRegistry);
                if (moduleExpressionBuilder_ == null) {
                  ensureModuleExpressionIsMutable();
                  moduleExpression_.add(m);
                } else {
                  moduleExpressionBuilder_.addMessage(m);
                }
                break;
              } // case 66
              case 74: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.parser(),
                        extensionRegistry);
                if (inlineModuleBuilder_ == null) {
                  ensureInlineModuleIsMutable();
                  inlineModule_.add(m);
                } else {
                  inlineModuleBuilder_.addMessage(m);
                }
                break;
              } // case 74
              case 82: {
                packageFqn_ = input.readBytes();
                bitField0_ |= 0x00000200;
                break;
              } // case 82
              case 90: {
                input.readMessage(
                    getTestsInvocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000400;
                break;
              } // case 90
              case 98: {
                input.readMessage(
                    getMainInvocationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000800;
                break;
              } // case 98
              case 106: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.parser(),
                        extensionRegistry);
                if (inlinedLocalDeclarationsBuilder_ == null) {
                  ensureInlinedLocalDeclarationsIsMutable();
                  inlinedLocalDeclarations_.add(m);
                } else {
                  inlinedLocalDeclarationsBuilder_.addMessage(m);
                }
                break;
              } // case 106
              case 114: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.parser(),
                        extensionRegistry);
                if (irClassModelBuilder_ == null) {
                  ensureIrClassModelIsMutable();
                  irClassModel_.add(m);
                } else {
                  irClassModelBuilder_.addMessage(m);
                }
                break;
              } // case 114
              case 122: {
                dts_ = input.readBytes();
                bitField0_ |= 0x00004000;
                break;
              } // case 122
              case 128: {
                suiteFunction_ = input.readInt32();
                bitField0_ |= 0x00008000;
                break;
              } // case 128
              case 136: {
                int v = input.readInt32();
                ensureDefinitionsIsMutable();
                definitions_.addInt(v);
                break;
              } // case 136
              case 138: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureDefinitionsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  definitions_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 138
              case 146: {
                input.readMessage(
                    getPolyfillsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00020000;
                break;
              } // case 146
              case 152: {
                int v = input.readInt32();
                ensureOptionalCrossModuleImportsIsMutable();
                optionalCrossModuleImports_.addInt(v);
                break;
              } // case 152
              case 154: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureOptionalCrossModuleImportsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  optionalCrossModuleImports_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 154
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> importedModule_ =
        java.util.Collections.emptyList();
      private void ensureImportedModuleIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          importedModule_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule>(importedModule_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder> importedModuleBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> getImportedModuleList() {
        if (importedModuleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(importedModule_);
        } else {
          return importedModuleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public int getImportedModuleCount() {
        if (importedModuleBuilder_ == null) {
          return importedModule_.size();
        } else {
          return importedModuleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getImportedModule(int index) {
        if (importedModuleBuilder_ == null) {
          return importedModule_.get(index);
        } else {
          return importedModuleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder setImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
        if (importedModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImportedModuleIsMutable();
          importedModule_.set(index, value);
          onChanged();
        } else {
          importedModuleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder setImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder builderForValue) {
        if (importedModuleBuilder_ == null) {
          ensureImportedModuleIsMutable();
          importedModule_.set(index, builderForValue.build());
          onChanged();
        } else {
          importedModuleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
        if (importedModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImportedModuleIsMutable();
          importedModule_.add(value);
          onChanged();
        } else {
          importedModuleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule value) {
        if (importedModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImportedModuleIsMutable();
          importedModule_.add(index, value);
          onChanged();
        } else {
          importedModuleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder builderForValue) {
        if (importedModuleBuilder_ == null) {
          ensureImportedModuleIsMutable();
          importedModule_.add(builderForValue.build());
          onChanged();
        } else {
          importedModuleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addImportedModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder builderForValue) {
        if (importedModuleBuilder_ == null) {
          ensureImportedModuleIsMutable();
          importedModule_.add(index, builderForValue.build());
          onChanged();
        } else {
          importedModuleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder addAllImportedModule(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule> values) {
        if (importedModuleBuilder_ == null) {
          ensureImportedModuleIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, importedModule_);
          onChanged();
        } else {
          importedModuleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder clearImportedModule() {
        if (importedModuleBuilder_ == null) {
          importedModule_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          importedModuleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public Builder removeImportedModule(int index) {
        if (importedModuleBuilder_ == null) {
          ensureImportedModuleIsMutable();
          importedModule_.remove(index);
          onChanged();
        } else {
          importedModuleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder getImportedModuleBuilder(
          int index) {
        return getImportedModuleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder getImportedModuleOrBuilder(
          int index) {
        if (importedModuleBuilder_ == null) {
          return importedModule_.get(index);  } else {
          return importedModuleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder> 
           getImportedModuleOrBuilderList() {
        if (importedModuleBuilder_ != null) {
          return importedModuleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(importedModule_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder addImportedModuleBuilder() {
        return getImportedModuleFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder addImportedModuleBuilder(
          int index) {
        return getImportedModuleFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ImportedModule imported_module = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder> 
           getImportedModuleBuilderList() {
        return getImportedModuleFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder> 
          getImportedModuleFieldBuilder() {
        if (importedModuleBuilder_ == null) {
          importedModuleBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder>(
                  importedModule_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          importedModule_ = null;
        }
        return importedModuleBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> importEntry_ =
        java.util.Collections.emptyList();
      private void ensureImportEntryIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          importEntry_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import>(importEntry_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder> importEntryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> getImportEntryList() {
        if (importEntryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(importEntry_);
        } else {
          return importEntryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public int getImportEntryCount() {
        if (importEntryBuilder_ == null) {
          return importEntry_.size();
        } else {
          return importEntryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getImportEntry(int index) {
        if (importEntryBuilder_ == null) {
          return importEntry_.get(index);
        } else {
          return importEntryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder setImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
        if (importEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImportEntryIsMutable();
          importEntry_.set(index, value);
          onChanged();
        } else {
          importEntryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder setImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder builderForValue) {
        if (importEntryBuilder_ == null) {
          ensureImportEntryIsMutable();
          importEntry_.set(index, builderForValue.build());
          onChanged();
        } else {
          importEntryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
        if (importEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImportEntryIsMutable();
          importEntry_.add(value);
          onChanged();
        } else {
          importEntryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import value) {
        if (importEntryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImportEntryIsMutable();
          importEntry_.add(index, value);
          onChanged();
        } else {
          importEntryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder builderForValue) {
        if (importEntryBuilder_ == null) {
          ensureImportEntryIsMutable();
          importEntry_.add(builderForValue.build());
          onChanged();
        } else {
          importEntryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addImportEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder builderForValue) {
        if (importEntryBuilder_ == null) {
          ensureImportEntryIsMutable();
          importEntry_.add(index, builderForValue.build());
          onChanged();
        } else {
          importEntryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder addAllImportEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import> values) {
        if (importEntryBuilder_ == null) {
          ensureImportEntryIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, importEntry_);
          onChanged();
        } else {
          importEntryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder clearImportEntry() {
        if (importEntryBuilder_ == null) {
          importEntry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          importEntryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public Builder removeImportEntry(int index) {
        if (importEntryBuilder_ == null) {
          ensureImportEntryIsMutable();
          importEntry_.remove(index);
          onChanged();
        } else {
          importEntryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder getImportEntryBuilder(
          int index) {
        return getImportEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder getImportEntryOrBuilder(
          int index) {
        if (importEntryBuilder_ == null) {
          return importEntry_.get(index);  } else {
          return importEntryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder> 
           getImportEntryOrBuilderList() {
        if (importEntryBuilder_ != null) {
          return importEntryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(importEntry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder addImportEntryBuilder() {
        return getImportEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder addImportEntryBuilder(
          int index) {
        return getImportEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Import import_entry = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder> 
           getImportEntryBuilderList() {
        return getImportEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder> 
          getImportEntryFieldBuilder() {
        if (importEntryBuilder_ == null) {
          importEntryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder>(
                  importEntry_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          importEntry_ = null;
        }
        return importEntryBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock declarationBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> declarationBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       * @return Whether the declarationBlock field is set.
       */
      public boolean hasDeclarationBlock() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       * @return The declarationBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getDeclarationBlock() {
        if (declarationBlockBuilder_ == null) {
          return declarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : declarationBlock_;
        } else {
          return declarationBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder setDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (declarationBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          declarationBlock_ = value;
        } else {
          declarationBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder setDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (declarationBlockBuilder_ == null) {
          declarationBlock_ = builderForValue.build();
        } else {
          declarationBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder mergeDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (declarationBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            declarationBlock_ != null &&
            declarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getDeclarationBlockBuilder().mergeFrom(value);
          } else {
            declarationBlock_ = value;
          }
        } else {
          declarationBlockBuilder_.mergeFrom(value);
        }
        if (declarationBlock_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public Builder clearDeclarationBlock() {
        bitField0_ = (bitField0_ & ~0x00000004);
        declarationBlock_ = null;
        if (declarationBlockBuilder_ != null) {
          declarationBlockBuilder_.dispose();
          declarationBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getDeclarationBlockBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getDeclarationBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getDeclarationBlockOrBuilder() {
        if (declarationBlockBuilder_ != null) {
          return declarationBlockBuilder_.getMessageOrBuilder();
        } else {
          return declarationBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : declarationBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock declaration_block = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getDeclarationBlockFieldBuilder() {
        if (declarationBlockBuilder_ == null) {
          declarationBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getDeclarationBlock(),
                  getParentForChildren(),
                  isClean());
          declarationBlock_ = null;
        }
        return declarationBlockBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock exportBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> exportBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       * @return Whether the exportBlock field is set.
       */
      public boolean hasExportBlock() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       * @return The exportBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getExportBlock() {
        if (exportBlockBuilder_ == null) {
          return exportBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : exportBlock_;
        } else {
          return exportBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder setExportBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (exportBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          exportBlock_ = value;
        } else {
          exportBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder setExportBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (exportBlockBuilder_ == null) {
          exportBlock_ = builderForValue.build();
        } else {
          exportBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder mergeExportBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (exportBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            exportBlock_ != null &&
            exportBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getExportBlockBuilder().mergeFrom(value);
          } else {
            exportBlock_ = value;
          }
        } else {
          exportBlockBuilder_.mergeFrom(value);
        }
        if (exportBlock_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public Builder clearExportBlock() {
        bitField0_ = (bitField0_ & ~0x00000008);
        exportBlock_ = null;
        if (exportBlockBuilder_ != null) {
          exportBlockBuilder_.dispose();
          exportBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getExportBlockBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getExportBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getExportBlockOrBuilder() {
        if (exportBlockBuilder_ != null) {
          return exportBlockBuilder_.getMessageOrBuilder();
        } else {
          return exportBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : exportBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock export_block = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getExportBlockFieldBuilder() {
        if (exportBlockBuilder_ == null) {
          exportBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getExportBlock(),
                  getParentForChildren(),
                  isClean());
          exportBlock_ = null;
        }
        return exportBlockBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock initializerBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> initializerBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       * @return Whether the initializerBlock field is set.
       */
      public boolean hasInitializerBlock() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       * @return The initializerBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getInitializerBlock() {
        if (initializerBlockBuilder_ == null) {
          return initializerBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : initializerBlock_;
        } else {
          return initializerBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder setInitializerBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (initializerBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          initializerBlock_ = value;
        } else {
          initializerBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder setInitializerBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (initializerBlockBuilder_ == null) {
          initializerBlock_ = builderForValue.build();
        } else {
          initializerBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder mergeInitializerBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (initializerBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            initializerBlock_ != null &&
            initializerBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getInitializerBlockBuilder().mergeFrom(value);
          } else {
            initializerBlock_ = value;
          }
        } else {
          initializerBlockBuilder_.mergeFrom(value);
        }
        if (initializerBlock_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public Builder clearInitializerBlock() {
        bitField0_ = (bitField0_ & ~0x00000010);
        initializerBlock_ = null;
        if (initializerBlockBuilder_ != null) {
          initializerBlockBuilder_.dispose();
          initializerBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getInitializerBlockBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getInitializerBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getInitializerBlockOrBuilder() {
        if (initializerBlockBuilder_ != null) {
          return initializerBlockBuilder_.getMessageOrBuilder();
        } else {
          return initializerBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : initializerBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock initializer_block = 5;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getInitializerBlockFieldBuilder() {
        if (initializerBlockBuilder_ == null) {
          initializerBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getInitializerBlock(),
                  getParentForChildren(),
                  isClean());
          initializerBlock_ = null;
        }
        return initializerBlockBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> nameBinding_ =
        java.util.Collections.emptyList();
      private void ensureNameBindingIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          nameBinding_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding>(nameBinding_);
          bitField0_ |= 0x00000020;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder> nameBindingBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> getNameBindingList() {
        if (nameBindingBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nameBinding_);
        } else {
          return nameBindingBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public int getNameBindingCount() {
        if (nameBindingBuilder_ == null) {
          return nameBinding_.size();
        } else {
          return nameBindingBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getNameBinding(int index) {
        if (nameBindingBuilder_ == null) {
          return nameBinding_.get(index);
        } else {
          return nameBindingBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder setNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
        if (nameBindingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNameBindingIsMutable();
          nameBinding_.set(index, value);
          onChanged();
        } else {
          nameBindingBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder setNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder builderForValue) {
        if (nameBindingBuilder_ == null) {
          ensureNameBindingIsMutable();
          nameBinding_.set(index, builderForValue.build());
          onChanged();
        } else {
          nameBindingBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
        if (nameBindingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNameBindingIsMutable();
          nameBinding_.add(value);
          onChanged();
        } else {
          nameBindingBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding value) {
        if (nameBindingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNameBindingIsMutable();
          nameBinding_.add(index, value);
          onChanged();
        } else {
          nameBindingBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder builderForValue) {
        if (nameBindingBuilder_ == null) {
          ensureNameBindingIsMutable();
          nameBinding_.add(builderForValue.build());
          onChanged();
        } else {
          nameBindingBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addNameBinding(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder builderForValue) {
        if (nameBindingBuilder_ == null) {
          ensureNameBindingIsMutable();
          nameBinding_.add(index, builderForValue.build());
          onChanged();
        } else {
          nameBindingBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder addAllNameBinding(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding> values) {
        if (nameBindingBuilder_ == null) {
          ensureNameBindingIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, nameBinding_);
          onChanged();
        } else {
          nameBindingBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder clearNameBinding() {
        if (nameBindingBuilder_ == null) {
          nameBinding_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          nameBindingBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public Builder removeNameBinding(int index) {
        if (nameBindingBuilder_ == null) {
          ensureNameBindingIsMutable();
          nameBinding_.remove(index);
          onChanged();
        } else {
          nameBindingBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder getNameBindingBuilder(
          int index) {
        return getNameBindingFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder getNameBindingOrBuilder(
          int index) {
        if (nameBindingBuilder_ == null) {
          return nameBinding_.get(index);  } else {
          return nameBindingBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder> 
           getNameBindingOrBuilderList() {
        if (nameBindingBuilder_ != null) {
          return nameBindingBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nameBinding_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder addNameBindingBuilder() {
        return getNameBindingFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder addNameBindingBuilder(
          int index) {
        return getNameBindingFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.NameBinding name_binding = 6;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder> 
           getNameBindingBuilderList() {
        return getNameBindingFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder> 
          getNameBindingFieldBuilder() {
        if (nameBindingBuilder_ == null) {
          nameBindingBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder>(
                  nameBinding_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          nameBinding_ = null;
        }
        return nameBindingBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> classModel_ =
        java.util.Collections.emptyList();
      private void ensureClassModelIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          classModel_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel>(classModel_);
          bitField0_ |= 0x00000040;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder> classModelBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> getClassModelList() {
        if (classModelBuilder_ == null) {
          return java.util.Collections.unmodifiableList(classModel_);
        } else {
          return classModelBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public int getClassModelCount() {
        if (classModelBuilder_ == null) {
          return classModel_.size();
        } else {
          return classModelBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getClassModel(int index) {
        if (classModelBuilder_ == null) {
          return classModel_.get(index);
        } else {
          return classModelBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder setClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
        if (classModelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClassModelIsMutable();
          classModel_.set(index, value);
          onChanged();
        } else {
          classModelBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder setClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder builderForValue) {
        if (classModelBuilder_ == null) {
          ensureClassModelIsMutable();
          classModel_.set(index, builderForValue.build());
          onChanged();
        } else {
          classModelBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
        if (classModelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClassModelIsMutable();
          classModel_.add(value);
          onChanged();
        } else {
          classModelBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel value) {
        if (classModelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClassModelIsMutable();
          classModel_.add(index, value);
          onChanged();
        } else {
          classModelBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder builderForValue) {
        if (classModelBuilder_ == null) {
          ensureClassModelIsMutable();
          classModel_.add(builderForValue.build());
          onChanged();
        } else {
          classModelBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder builderForValue) {
        if (classModelBuilder_ == null) {
          ensureClassModelIsMutable();
          classModel_.add(index, builderForValue.build());
          onChanged();
        } else {
          classModelBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder addAllClassModel(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel> values) {
        if (classModelBuilder_ == null) {
          ensureClassModelIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, classModel_);
          onChanged();
        } else {
          classModelBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder clearClassModel() {
        if (classModelBuilder_ == null) {
          classModel_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          classModelBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public Builder removeClassModel(int index) {
        if (classModelBuilder_ == null) {
          ensureClassModelIsMutable();
          classModel_.remove(index);
          onChanged();
        } else {
          classModelBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder getClassModelBuilder(
          int index) {
        return getClassModelFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder getClassModelOrBuilder(
          int index) {
        if (classModelBuilder_ == null) {
          return classModel_.get(index);  } else {
          return classModelBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder> 
           getClassModelOrBuilderList() {
        if (classModelBuilder_ != null) {
          return classModelBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(classModel_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder addClassModelBuilder() {
        return getClassModelFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder addClassModelBuilder(
          int index) {
        return getClassModelFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.ClassModel class_model = 7;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder> 
           getClassModelBuilderList() {
        return getClassModelFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder> 
          getClassModelFieldBuilder() {
        if (classModelBuilder_ == null) {
          classModelBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder>(
                  classModel_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          classModel_ = null;
        }
        return classModelBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> moduleExpression_ =
        java.util.Collections.emptyList();
      private void ensureModuleExpressionIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          moduleExpression_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression>(moduleExpression_);
          bitField0_ |= 0x00000080;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> moduleExpressionBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> getModuleExpressionList() {
        if (moduleExpressionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(moduleExpression_);
        } else {
          return moduleExpressionBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public int getModuleExpressionCount() {
        if (moduleExpressionBuilder_ == null) {
          return moduleExpression_.size();
        } else {
          return moduleExpressionBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getModuleExpression(int index) {
        if (moduleExpressionBuilder_ == null) {
          return moduleExpression_.get(index);
        } else {
          return moduleExpressionBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder setModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (moduleExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModuleExpressionIsMutable();
          moduleExpression_.set(index, value);
          onChanged();
        } else {
          moduleExpressionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder setModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (moduleExpressionBuilder_ == null) {
          ensureModuleExpressionIsMutable();
          moduleExpression_.set(index, builderForValue.build());
          onChanged();
        } else {
          moduleExpressionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (moduleExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModuleExpressionIsMutable();
          moduleExpression_.add(value);
          onChanged();
        } else {
          moduleExpressionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (moduleExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModuleExpressionIsMutable();
          moduleExpression_.add(index, value);
          onChanged();
        } else {
          moduleExpressionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (moduleExpressionBuilder_ == null) {
          ensureModuleExpressionIsMutable();
          moduleExpression_.add(builderForValue.build());
          onChanged();
        } else {
          moduleExpressionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addModuleExpression(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (moduleExpressionBuilder_ == null) {
          ensureModuleExpressionIsMutable();
          moduleExpression_.add(index, builderForValue.build());
          onChanged();
        } else {
          moduleExpressionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder addAllModuleExpression(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression> values) {
        if (moduleExpressionBuilder_ == null) {
          ensureModuleExpressionIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, moduleExpression_);
          onChanged();
        } else {
          moduleExpressionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder clearModuleExpression() {
        if (moduleExpressionBuilder_ == null) {
          moduleExpression_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          moduleExpressionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public Builder removeModuleExpression(int index) {
        if (moduleExpressionBuilder_ == null) {
          ensureModuleExpressionIsMutable();
          moduleExpression_.remove(index);
          onChanged();
        } else {
          moduleExpressionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getModuleExpressionBuilder(
          int index) {
        return getModuleExpressionFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getModuleExpressionOrBuilder(
          int index) {
        if (moduleExpressionBuilder_ == null) {
          return moduleExpression_.get(index);  } else {
          return moduleExpressionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
           getModuleExpressionOrBuilderList() {
        if (moduleExpressionBuilder_ != null) {
          return moduleExpressionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(moduleExpression_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addModuleExpressionBuilder() {
        return getModuleExpressionFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder addModuleExpressionBuilder(
          int index) {
        return getModuleExpressionFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Expression module_expression = 8;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder> 
           getModuleExpressionBuilderList() {
        return getModuleExpressionFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getModuleExpressionFieldBuilder() {
        if (moduleExpressionBuilder_ == null) {
          moduleExpressionBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  moduleExpression_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          moduleExpression_ = null;
        }
        return moduleExpressionBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> inlineModule_ =
        java.util.Collections.emptyList();
      private void ensureInlineModuleIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          inlineModule_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule>(inlineModule_);
          bitField0_ |= 0x00000100;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder> inlineModuleBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> getInlineModuleList() {
        if (inlineModuleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inlineModule_);
        } else {
          return inlineModuleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public int getInlineModuleCount() {
        if (inlineModuleBuilder_ == null) {
          return inlineModule_.size();
        } else {
          return inlineModuleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getInlineModule(int index) {
        if (inlineModuleBuilder_ == null) {
          return inlineModule_.get(index);
        } else {
          return inlineModuleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder setInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
        if (inlineModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineModuleIsMutable();
          inlineModule_.set(index, value);
          onChanged();
        } else {
          inlineModuleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder setInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder builderForValue) {
        if (inlineModuleBuilder_ == null) {
          ensureInlineModuleIsMutable();
          inlineModule_.set(index, builderForValue.build());
          onChanged();
        } else {
          inlineModuleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
        if (inlineModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineModuleIsMutable();
          inlineModule_.add(value);
          onChanged();
        } else {
          inlineModuleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule value) {
        if (inlineModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineModuleIsMutable();
          inlineModule_.add(index, value);
          onChanged();
        } else {
          inlineModuleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder builderForValue) {
        if (inlineModuleBuilder_ == null) {
          ensureInlineModuleIsMutable();
          inlineModule_.add(builderForValue.build());
          onChanged();
        } else {
          inlineModuleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addInlineModule(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder builderForValue) {
        if (inlineModuleBuilder_ == null) {
          ensureInlineModuleIsMutable();
          inlineModule_.add(index, builderForValue.build());
          onChanged();
        } else {
          inlineModuleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder addAllInlineModule(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule> values) {
        if (inlineModuleBuilder_ == null) {
          ensureInlineModuleIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, inlineModule_);
          onChanged();
        } else {
          inlineModuleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder clearInlineModule() {
        if (inlineModuleBuilder_ == null) {
          inlineModule_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          inlineModuleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public Builder removeInlineModule(int index) {
        if (inlineModuleBuilder_ == null) {
          ensureInlineModuleIsMutable();
          inlineModule_.remove(index);
          onChanged();
        } else {
          inlineModuleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder getInlineModuleBuilder(
          int index) {
        return getInlineModuleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder getInlineModuleOrBuilder(
          int index) {
        if (inlineModuleBuilder_ == null) {
          return inlineModule_.get(index);  } else {
          return inlineModuleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder> 
           getInlineModuleOrBuilderList() {
        if (inlineModuleBuilder_ != null) {
          return inlineModuleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inlineModule_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder addInlineModuleBuilder() {
        return getInlineModuleFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder addInlineModuleBuilder(
          int index) {
        return getInlineModuleFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlineModule inline_module = 9;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder> 
           getInlineModuleBuilderList() {
        return getInlineModuleFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder> 
          getInlineModuleFieldBuilder() {
        if (inlineModuleBuilder_ == null) {
          inlineModuleBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder>(
                  inlineModule_,
                  ((bitField0_ & 0x00000100) != 0),
                  getParentForChildren(),
                  isClean());
          inlineModule_ = null;
        }
        return inlineModuleBuilder_;
      }

      private java.lang.Object packageFqn_ = "";
      /**
       * <code>string package_fqn = 10;</code>
       * @return Whether the packageFqn field is set.
       */
      public boolean hasPackageFqn() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @return The packageFqn.
       */
      public java.lang.String getPackageFqn() {
        java.lang.Object ref = packageFqn_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            packageFqn_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @return The bytes for packageFqn.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getPackageFqnBytes() {
        java.lang.Object ref = packageFqn_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          packageFqn_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @param value The packageFqn to set.
       * @return This builder for chaining.
       */
      public Builder setPackageFqn(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        packageFqn_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearPackageFqn() {
        packageFqn_ = getDefaultInstance().getPackageFqn();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }
      /**
       * <code>string package_fqn = 10;</code>
       * @param value The bytes for packageFqn to set.
       * @return This builder for chaining.
       */
      public Builder setPackageFqnBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        packageFqn_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement testsInvocation_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> testsInvocationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       * @return Whether the testsInvocation field is set.
       */
      public boolean hasTestsInvocation() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       * @return The testsInvocation.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getTestsInvocation() {
        if (testsInvocationBuilder_ == null) {
          return testsInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : testsInvocation_;
        } else {
          return testsInvocationBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder setTestsInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (testsInvocationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          testsInvocation_ = value;
        } else {
          testsInvocationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder setTestsInvocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (testsInvocationBuilder_ == null) {
          testsInvocation_ = builderForValue.build();
        } else {
          testsInvocationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder mergeTestsInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (testsInvocationBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0) &&
            testsInvocation_ != null &&
            testsInvocation_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getTestsInvocationBuilder().mergeFrom(value);
          } else {
            testsInvocation_ = value;
          }
        } else {
          testsInvocationBuilder_.mergeFrom(value);
        }
        if (testsInvocation_ != null) {
          bitField0_ |= 0x00000400;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public Builder clearTestsInvocation() {
        bitField0_ = (bitField0_ & ~0x00000400);
        testsInvocation_ = null;
        if (testsInvocationBuilder_ != null) {
          testsInvocationBuilder_.dispose();
          testsInvocationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getTestsInvocationBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getTestsInvocationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getTestsInvocationOrBuilder() {
        if (testsInvocationBuilder_ != null) {
          return testsInvocationBuilder_.getMessageOrBuilder();
        } else {
          return testsInvocation_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : testsInvocation_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement tests_invocation = 11;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getTestsInvocationFieldBuilder() {
        if (testsInvocationBuilder_ == null) {
          testsInvocationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getTestsInvocation(),
                  getParentForChildren(),
                  isClean());
          testsInvocation_ = null;
        }
        return testsInvocationBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement mainInvocation_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> mainInvocationBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       * @return Whether the mainInvocation field is set.
       */
      public boolean hasMainInvocation() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       * @return The mainInvocation.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement getMainInvocation() {
        if (mainInvocationBuilder_ == null) {
          return mainInvocation_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : mainInvocation_;
        } else {
          return mainInvocationBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder setMainInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (mainInvocationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mainInvocation_ = value;
        } else {
          mainInvocationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder setMainInvocation(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder builderForValue) {
        if (mainInvocationBuilder_ == null) {
          mainInvocation_ = builderForValue.build();
        } else {
          mainInvocationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder mergeMainInvocation(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement value) {
        if (mainInvocationBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0) &&
            mainInvocation_ != null &&
            mainInvocation_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance()) {
            getMainInvocationBuilder().mergeFrom(value);
          } else {
            mainInvocation_ = value;
          }
        } else {
          mainInvocationBuilder_.mergeFrom(value);
        }
        if (mainInvocation_ != null) {
          bitField0_ |= 0x00000800;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public Builder clearMainInvocation() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mainInvocation_ = null;
        if (mainInvocationBuilder_ != null) {
          mainInvocationBuilder_.dispose();
          mainInvocationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder getMainInvocationBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getMainInvocationFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder getMainInvocationOrBuilder() {
        if (mainInvocationBuilder_ != null) {
          return mainInvocationBuilder_.getMessageOrBuilder();
        } else {
          return mainInvocation_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.getDefaultInstance() : mainInvocation_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Statement main_invocation = 12;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder> 
          getMainInvocationFieldBuilder() {
        if (mainInvocationBuilder_ == null) {
          mainInvocationBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Statement.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StatementOrBuilder>(
                  getMainInvocation(),
                  getParentForChildren(),
                  isClean());
          mainInvocation_ = null;
        }
        return mainInvocationBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> inlinedLocalDeclarations_ =
        java.util.Collections.emptyList();
      private void ensureInlinedLocalDeclarationsIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          inlinedLocalDeclarations_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations>(inlinedLocalDeclarations_);
          bitField0_ |= 0x00001000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder> inlinedLocalDeclarationsBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> getInlinedLocalDeclarationsList() {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inlinedLocalDeclarations_);
        } else {
          return inlinedLocalDeclarationsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public int getInlinedLocalDeclarationsCount() {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          return inlinedLocalDeclarations_.size();
        } else {
          return inlinedLocalDeclarationsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getInlinedLocalDeclarations(int index) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          return inlinedLocalDeclarations_.get(index);
        } else {
          return inlinedLocalDeclarationsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder setInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlinedLocalDeclarationsIsMutable();
          inlinedLocalDeclarations_.set(index, value);
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder setInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder builderForValue) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          ensureInlinedLocalDeclarationsIsMutable();
          inlinedLocalDeclarations_.set(index, builderForValue.build());
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlinedLocalDeclarationsIsMutable();
          inlinedLocalDeclarations_.add(value);
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations value) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlinedLocalDeclarationsIsMutable();
          inlinedLocalDeclarations_.add(index, value);
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder builderForValue) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          ensureInlinedLocalDeclarationsIsMutable();
          inlinedLocalDeclarations_.add(builderForValue.build());
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addInlinedLocalDeclarations(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder builderForValue) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          ensureInlinedLocalDeclarationsIsMutable();
          inlinedLocalDeclarations_.add(index, builderForValue.build());
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder addAllInlinedLocalDeclarations(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations> values) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          ensureInlinedLocalDeclarationsIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, inlinedLocalDeclarations_);
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder clearInlinedLocalDeclarations() {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          inlinedLocalDeclarations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public Builder removeInlinedLocalDeclarations(int index) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          ensureInlinedLocalDeclarationsIsMutable();
          inlinedLocalDeclarations_.remove(index);
          onChanged();
        } else {
          inlinedLocalDeclarationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder getInlinedLocalDeclarationsBuilder(
          int index) {
        return getInlinedLocalDeclarationsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder getInlinedLocalDeclarationsOrBuilder(
          int index) {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          return inlinedLocalDeclarations_.get(index);  } else {
          return inlinedLocalDeclarationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder> 
           getInlinedLocalDeclarationsOrBuilderList() {
        if (inlinedLocalDeclarationsBuilder_ != null) {
          return inlinedLocalDeclarationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inlinedLocalDeclarations_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder addInlinedLocalDeclarationsBuilder() {
        return getInlinedLocalDeclarationsFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder addInlinedLocalDeclarationsBuilder(
          int index) {
        return getInlinedLocalDeclarationsFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations inlined_local_declarations = 13;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder> 
           getInlinedLocalDeclarationsBuilderList() {
        return getInlinedLocalDeclarationsFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder> 
          getInlinedLocalDeclarationsFieldBuilder() {
        if (inlinedLocalDeclarationsBuilder_ == null) {
          inlinedLocalDeclarationsBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder>(
                  inlinedLocalDeclarations_,
                  ((bitField0_ & 0x00001000) != 0),
                  getParentForChildren(),
                  isClean());
          inlinedLocalDeclarations_ = null;
        }
        return inlinedLocalDeclarationsBuilder_;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> irClassModel_ =
        java.util.Collections.emptyList();
      private void ensureIrClassModelIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          irClassModel_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel>(irClassModel_);
          bitField0_ |= 0x00002000;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder> irClassModelBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> getIrClassModelList() {
        if (irClassModelBuilder_ == null) {
          return java.util.Collections.unmodifiableList(irClassModel_);
        } else {
          return irClassModelBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public int getIrClassModelCount() {
        if (irClassModelBuilder_ == null) {
          return irClassModel_.size();
        } else {
          return irClassModelBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getIrClassModel(int index) {
        if (irClassModelBuilder_ == null) {
          return irClassModel_.get(index);
        } else {
          return irClassModelBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder setIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
        if (irClassModelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIrClassModelIsMutable();
          irClassModel_.set(index, value);
          onChanged();
        } else {
          irClassModelBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder setIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder builderForValue) {
        if (irClassModelBuilder_ == null) {
          ensureIrClassModelIsMutable();
          irClassModel_.set(index, builderForValue.build());
          onChanged();
        } else {
          irClassModelBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
        if (irClassModelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIrClassModelIsMutable();
          irClassModel_.add(value);
          onChanged();
        } else {
          irClassModelBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel value) {
        if (irClassModelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIrClassModelIsMutable();
          irClassModel_.add(index, value);
          onChanged();
        } else {
          irClassModelBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder builderForValue) {
        if (irClassModelBuilder_ == null) {
          ensureIrClassModelIsMutable();
          irClassModel_.add(builderForValue.build());
          onChanged();
        } else {
          irClassModelBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addIrClassModel(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder builderForValue) {
        if (irClassModelBuilder_ == null) {
          ensureIrClassModelIsMutable();
          irClassModel_.add(index, builderForValue.build());
          onChanged();
        } else {
          irClassModelBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder addAllIrClassModel(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel> values) {
        if (irClassModelBuilder_ == null) {
          ensureIrClassModelIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, irClassModel_);
          onChanged();
        } else {
          irClassModelBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder clearIrClassModel() {
        if (irClassModelBuilder_ == null) {
          irClassModel_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          irClassModelBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public Builder removeIrClassModel(int index) {
        if (irClassModelBuilder_ == null) {
          ensureIrClassModelIsMutable();
          irClassModel_.remove(index);
          onChanged();
        } else {
          irClassModelBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder getIrClassModelBuilder(
          int index) {
        return getIrClassModelFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder getIrClassModelOrBuilder(
          int index) {
        if (irClassModelBuilder_ == null) {
          return irClassModel_.get(index);  } else {
          return irClassModelBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder> 
           getIrClassModelOrBuilderList() {
        if (irClassModelBuilder_ != null) {
          return irClassModelBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(irClassModel_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder addIrClassModelBuilder() {
        return getIrClassModelFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder addIrClassModelBuilder(
          int index) {
        return getIrClassModelFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.IrClassModel ir_class_model = 14;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder> 
           getIrClassModelBuilderList() {
        return getIrClassModelFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder> 
          getIrClassModelFieldBuilder() {
        if (irClassModelBuilder_ == null) {
          irClassModelBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder>(
                  irClassModel_,
                  ((bitField0_ & 0x00002000) != 0),
                  getParentForChildren(),
                  isClean());
          irClassModel_ = null;
        }
        return irClassModelBuilder_;
      }

      private java.lang.Object dts_ = "";
      /**
       * <code>string dts = 15;</code>
       * @return Whether the dts field is set.
       */
      public boolean hasDts() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <code>string dts = 15;</code>
       * @return The dts.
       */
      public java.lang.String getDts() {
        java.lang.Object ref = dts_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            dts_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string dts = 15;</code>
       * @return The bytes for dts.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getDtsBytes() {
        java.lang.Object ref = dts_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          dts_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string dts = 15;</code>
       * @param value The dts to set.
       * @return This builder for chaining.
       */
      public Builder setDts(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        dts_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>string dts = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearDts() {
        dts_ = getDefaultInstance().getDts();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }
      /**
       * <code>string dts = 15;</code>
       * @param value The bytes for dts to set.
       * @return This builder for chaining.
       */
      public Builder setDtsBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        dts_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }

      private int suiteFunction_ ;
      /**
       * <code>int32 suite_function = 16;</code>
       * @return Whether the suiteFunction field is set.
       */
      @java.lang.Override
      public boolean hasSuiteFunction() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>int32 suite_function = 16;</code>
       * @return The suiteFunction.
       */
      @java.lang.Override
      public int getSuiteFunction() {
        return suiteFunction_;
      }
      /**
       * <code>int32 suite_function = 16;</code>
       * @param value The suiteFunction to set.
       * @return This builder for chaining.
       */
      public Builder setSuiteFunction(int value) {

        suiteFunction_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>int32 suite_function = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearSuiteFunction() {
        bitField0_ = (bitField0_ & ~0x00008000);
        suiteFunction_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList definitions_ = emptyIntList();
      private void ensureDefinitionsIsMutable() {
        if (!definitions_.isModifiable()) {
          definitions_ = makeMutableCopy(definitions_);
        }
        bitField0_ |= 0x00010000;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @return A list containing the definitions.
       */
      public java.util.List<java.lang.Integer>
          getDefinitionsList() {
        definitions_.makeImmutable();
        return definitions_;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @return The count of definitions.
       */
      public int getDefinitionsCount() {
        return definitions_.size();
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The definitions at the given index.
       */
      public int getDefinitions(int index) {
        return definitions_.getInt(index);
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The definitions to set.
       * @return This builder for chaining.
       */
      public Builder setDefinitions(
          int index, int value) {

        ensureDefinitionsIsMutable();
        definitions_.setInt(index, value);
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param value The definitions to add.
       * @return This builder for chaining.
       */
      public Builder addDefinitions(int value) {

        ensureDefinitionsIsMutable();
        definitions_.addInt(value);
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @param values The definitions to add.
       * @return This builder for chaining.
       */
      public Builder addAllDefinitions(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDefinitionsIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, definitions_);
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 definitions = 17 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearDefinitions() {
        definitions_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock polyfills_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> polyfillsBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       * @return Whether the polyfills field is set.
       */
      public boolean hasPolyfills() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       * @return The polyfills.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPolyfills() {
        if (polyfillsBuilder_ == null) {
          return polyfills_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : polyfills_;
        } else {
          return polyfillsBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder setPolyfills(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (polyfillsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          polyfills_ = value;
        } else {
          polyfillsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder setPolyfills(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (polyfillsBuilder_ == null) {
          polyfills_ = builderForValue.build();
        } else {
          polyfillsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder mergePolyfills(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (polyfillsBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0) &&
            polyfills_ != null &&
            polyfills_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getPolyfillsBuilder().mergeFrom(value);
          } else {
            polyfills_ = value;
          }
        } else {
          polyfillsBuilder_.mergeFrom(value);
        }
        if (polyfills_ != null) {
          bitField0_ |= 0x00020000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public Builder clearPolyfills() {
        bitField0_ = (bitField0_ & ~0x00020000);
        polyfills_ = null;
        if (polyfillsBuilder_ != null) {
          polyfillsBuilder_.dispose();
          polyfillsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getPolyfillsBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getPolyfillsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPolyfillsOrBuilder() {
        if (polyfillsBuilder_ != null) {
          return polyfillsBuilder_.getMessageOrBuilder();
        } else {
          return polyfills_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : polyfills_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock polyfills = 18;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getPolyfillsFieldBuilder() {
        if (polyfillsBuilder_ == null) {
          polyfillsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getPolyfills(),
                  getParentForChildren(),
                  isClean());
          polyfills_ = null;
        }
        return polyfillsBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList optionalCrossModuleImports_ = emptyIntList();
      private void ensureOptionalCrossModuleImportsIsMutable() {
        if (!optionalCrossModuleImports_.isModifiable()) {
          optionalCrossModuleImports_ = makeMutableCopy(optionalCrossModuleImports_);
        }
        bitField0_ |= 0x00040000;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @return A list containing the optionalCrossModuleImports.
       */
      public java.util.List<java.lang.Integer>
          getOptionalCrossModuleImportsList() {
        optionalCrossModuleImports_.makeImmutable();
        return optionalCrossModuleImports_;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @return The count of optionalCrossModuleImports.
       */
      public int getOptionalCrossModuleImportsCount() {
        return optionalCrossModuleImports_.size();
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The optionalCrossModuleImports at the given index.
       */
      public int getOptionalCrossModuleImports(int index) {
        return optionalCrossModuleImports_.getInt(index);
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The optionalCrossModuleImports to set.
       * @return This builder for chaining.
       */
      public Builder setOptionalCrossModuleImports(
          int index, int value) {

        ensureOptionalCrossModuleImportsIsMutable();
        optionalCrossModuleImports_.setInt(index, value);
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param value The optionalCrossModuleImports to add.
       * @return This builder for chaining.
       */
      public Builder addOptionalCrossModuleImports(int value) {

        ensureOptionalCrossModuleImportsIsMutable();
        optionalCrossModuleImports_.addInt(value);
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @param values The optionalCrossModuleImports to add.
       * @return This builder for chaining.
       */
      public Builder addAllOptionalCrossModuleImports(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOptionalCrossModuleImportsIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, optionalCrossModuleImports_);
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 optionalCrossModuleImports = 19 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearOptionalCrossModuleImports() {
        optionalCrossModuleImports_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Fragment)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Fragment)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Fragment>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Fragment>() {
      @java.lang.Override
      public Fragment parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Fragment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Fragment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InlinedLocalDeclarationsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return Whether the tag field is set.
     */
    boolean hasTag();
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return The tag.
     */
    int getTag();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     * @return Whether the block field is set.
     */
    boolean hasBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     * @return The block.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getBlockOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations}
   */
  public static final class InlinedLocalDeclarations extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
      InlinedLocalDeclarationsOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        InlinedLocalDeclarations.class.getName());
    }
    // Use InlinedLocalDeclarations.newBuilder() to construct.
    private InlinedLocalDeclarations(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private InlinedLocalDeclarations() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder.class);
    }

    private int bitField0_;
    public static final int TAG_FIELD_NUMBER = 1;
    private int tag_ = 0;
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return Whether the tag field is set.
     */
    @java.lang.Override
    public boolean hasTag() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 tag = 1 [features = { ... }</code>
     * @return The tag.
     */
    @java.lang.Override
    public int getTag() {
      return tag_;
    }

    public static final int BLOCK_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock block_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     * @return Whether the block field is set.
     */
    @java.lang.Override
    public boolean hasBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     * @return The block.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getBlock() {
      return block_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : block_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getBlockOrBuilder() {
      return block_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : block_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTag()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBlock()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBlock().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, tag_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getBlock());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, tag_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getBlock());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations) obj;

      if (hasTag() != other.hasTag()) return false;
      if (hasTag()) {
        if (getTag()
            != other.getTag()) return false;
      }
      if (hasBlock() != other.hasBlock()) return false;
      if (hasBlock()) {
        if (!getBlock()
            .equals(other.getBlock())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTag()) {
        hash = (37 * hash) + TAG_FIELD_NUMBER;
        hash = (53 * hash) + getTag();
      }
      if (hasBlock()) {
        hash = (37 * hash) + BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getBlock().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarationsOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getBlockFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tag_ = 0;
        block_ = null;
        if (blockBuilder_ != null) {
          blockBuilder_.dispose();
          blockBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tag_ = tag_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.block_ = blockBuilder_ == null
              ? block_
              : blockBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations.getDefaultInstance()) return this;
        if (other.hasTag()) {
          setTag(other.getTag());
        }
        if (other.hasBlock()) {
          mergeBlock(other.getBlock());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTag()) {
          return false;
        }
        if (!hasBlock()) {
          return false;
        }
        if (!getBlock().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                tag_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int tag_ ;
      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @return Whether the tag field is set.
       */
      @java.lang.Override
      public boolean hasTag() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @return The tag.
       */
      @java.lang.Override
      public int getTag() {
        return tag_;
      }
      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @param value The tag to set.
       * @return This builder for chaining.
       */
      public Builder setTag(int value) {

        tag_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 tag = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTag() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tag_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock block_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> blockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       * @return Whether the block field is set.
       */
      public boolean hasBlock() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       * @return The block.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getBlock() {
        if (blockBuilder_ == null) {
          return block_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : block_;
        } else {
          return blockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder setBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (blockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          block_ = value;
        } else {
          blockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder setBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (blockBuilder_ == null) {
          block_ = builderForValue.build();
        } else {
          blockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder mergeBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (blockBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            block_ != null &&
            block_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getBlockBuilder().mergeFrom(value);
          } else {
            block_ = value;
          }
        } else {
          blockBuilder_.mergeFrom(value);
        }
        if (block_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public Builder clearBlock() {
        bitField0_ = (bitField0_ & ~0x00000002);
        block_ = null;
        if (blockBuilder_ != null) {
          blockBuilder_.dispose();
          blockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getBlockBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getBlockOrBuilder() {
        if (blockBuilder_ != null) {
          return blockBuilder_.getMessageOrBuilder();
        } else {
          return block_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : block_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock block = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getBlockFieldBuilder() {
        if (blockBuilder_ == null) {
          blockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getBlock(),
                  getParentForChildren(),
                  isClean());
          block_ = null;
        }
        return blockBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.InlinedLocalDeclarations)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<InlinedLocalDeclarations>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<InlinedLocalDeclarations>() {
      @java.lang.Override
      public InlinedLocalDeclarations parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<InlinedLocalDeclarations> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<InlinedLocalDeclarations> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlinedLocalDeclarations getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImportedModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return Whether the externalNameId field is set.
     */
    boolean hasExternalNameId();
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return The externalNameId.
     */
    int getExternalNameId();

    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return Whether the internalNameId field is set.
     */
    boolean hasInternalNameId();
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return The internalNameId.
     */
    int getInternalNameId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return Whether the plainReference field is set.
     */
    boolean hasPlainReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return The plainReference.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getPlainReferenceOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ImportedModule}
   */
  public static final class ImportedModule extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
      ImportedModuleOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ImportedModule.class.getName());
    }
    // Use ImportedModule.newBuilder() to construct.
    private ImportedModule(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ImportedModule() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder.class);
    }

    private int bitField0_;
    public static final int EXTERNAL_NAME_ID_FIELD_NUMBER = 1;
    private int externalNameId_ = 0;
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return Whether the externalNameId field is set.
     */
    @java.lang.Override
    public boolean hasExternalNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 external_name_id = 1 [features = { ... }</code>
     * @return The externalNameId.
     */
    @java.lang.Override
    public int getExternalNameId() {
      return externalNameId_;
    }

    public static final int INTERNAL_NAME_ID_FIELD_NUMBER = 2;
    private int internalNameId_ = 0;
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return Whether the internalNameId field is set.
     */
    @java.lang.Override
    public boolean hasInternalNameId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 internal_name_id = 2 [features = { ... }</code>
     * @return The internalNameId.
     */
    @java.lang.Override
    public int getInternalNameId() {
      return internalNameId_;
    }

    public static final int PLAIN_REFERENCE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression plainReference_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return Whether the plainReference field is set.
     */
    @java.lang.Override
    public boolean hasPlainReference() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     * @return The plainReference.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
      return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getPlainReferenceOrBuilder() {
      return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasExternalNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInternalNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasPlainReference()) {
        if (!getPlainReference().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, externalNameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, internalNameId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getPlainReference());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, externalNameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, internalNameId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getPlainReference());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule) obj;

      if (hasExternalNameId() != other.hasExternalNameId()) return false;
      if (hasExternalNameId()) {
        if (getExternalNameId()
            != other.getExternalNameId()) return false;
      }
      if (hasInternalNameId() != other.hasInternalNameId()) return false;
      if (hasInternalNameId()) {
        if (getInternalNameId()
            != other.getInternalNameId()) return false;
      }
      if (hasPlainReference() != other.hasPlainReference()) return false;
      if (hasPlainReference()) {
        if (!getPlainReference()
            .equals(other.getPlainReference())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExternalNameId()) {
        hash = (37 * hash) + EXTERNAL_NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getExternalNameId();
      }
      if (hasInternalNameId()) {
        hash = (37 * hash) + INTERNAL_NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getInternalNameId();
      }
      if (hasPlainReference()) {
        hash = (37 * hash) + PLAIN_REFERENCE_FIELD_NUMBER;
        hash = (53 * hash) + getPlainReference().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ImportedModule}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModuleOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getPlainReferenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        externalNameId_ = 0;
        internalNameId_ = 0;
        plainReference_ = null;
        if (plainReferenceBuilder_ != null) {
          plainReferenceBuilder_.dispose();
          plainReferenceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.externalNameId_ = externalNameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.internalNameId_ = internalNameId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.plainReference_ = plainReferenceBuilder_ == null
              ? plainReference_
              : plainReferenceBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule.getDefaultInstance()) return this;
        if (other.hasExternalNameId()) {
          setExternalNameId(other.getExternalNameId());
        }
        if (other.hasInternalNameId()) {
          setInternalNameId(other.getInternalNameId());
        }
        if (other.hasPlainReference()) {
          mergePlainReference(other.getPlainReference());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasExternalNameId()) {
          return false;
        }
        if (!hasInternalNameId()) {
          return false;
        }
        if (hasPlainReference()) {
          if (!getPlainReference().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                externalNameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                internalNameId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getPlainReferenceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int externalNameId_ ;
      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @return Whether the externalNameId field is set.
       */
      @java.lang.Override
      public boolean hasExternalNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @return The externalNameId.
       */
      @java.lang.Override
      public int getExternalNameId() {
        return externalNameId_;
      }
      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @param value The externalNameId to set.
       * @return This builder for chaining.
       */
      public Builder setExternalNameId(int value) {

        externalNameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 external_name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExternalNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        externalNameId_ = 0;
        onChanged();
        return this;
      }

      private int internalNameId_ ;
      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @return Whether the internalNameId field is set.
       */
      @java.lang.Override
      public boolean hasInternalNameId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @return The internalNameId.
       */
      @java.lang.Override
      public int getInternalNameId() {
        return internalNameId_;
      }
      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @param value The internalNameId to set.
       * @return This builder for chaining.
       */
      public Builder setInternalNameId(int value) {

        internalNameId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 internal_name_id = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearInternalNameId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        internalNameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression plainReference_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> plainReferenceBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       * @return Whether the plainReference field is set.
       */
      public boolean hasPlainReference() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       * @return The plainReference.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getPlainReference() {
        if (plainReferenceBuilder_ == null) {
          return plainReference_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
        } else {
          return plainReferenceBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (plainReferenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          plainReference_ = value;
        } else {
          plainReferenceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder setPlainReference(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (plainReferenceBuilder_ == null) {
          plainReference_ = builderForValue.build();
        } else {
          plainReferenceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder mergePlainReference(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (plainReferenceBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            plainReference_ != null &&
            plainReference_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getPlainReferenceBuilder().mergeFrom(value);
          } else {
            plainReference_ = value;
          }
        } else {
          plainReferenceBuilder_.mergeFrom(value);
        }
        if (plainReference_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public Builder clearPlainReference() {
        bitField0_ = (bitField0_ & ~0x00000004);
        plainReference_ = null;
        if (plainReferenceBuilder_ != null) {
          plainReferenceBuilder_.dispose();
          plainReferenceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getPlainReferenceBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPlainReferenceFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getPlainReferenceOrBuilder() {
        if (plainReferenceBuilder_ != null) {
          return plainReferenceBuilder_.getMessageOrBuilder();
        } else {
          return plainReference_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : plainReference_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression plain_reference = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getPlainReferenceFieldBuilder() {
        if (plainReferenceBuilder_ == null) {
          plainReferenceBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getPlainReference(),
                  getParentForChildren(),
                  isClean());
          plainReference_ = null;
        }
        return plainReferenceBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ImportedModule)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ImportedModule>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ImportedModule>() {
      @java.lang.Override
      public ImportedModule parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ImportedModule> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ImportedModule> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportedModule getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImportOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Import)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    boolean hasSignatureId();
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    int getSignatureId();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     * @return The expression.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Import}
   */
  public static final class Import extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Import)
      ImportOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Import.class.getName());
    }
    // Use Import.newBuilder() to construct.
    private Import(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Import() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder.class);
    }

    private int bitField0_;
    public static final int SIGNATURE_ID_FIELD_NUMBER = 1;
    private int signatureId_ = 0;
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    @java.lang.Override
    public boolean hasSignatureId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    @java.lang.Override
    public int getSignatureId() {
      return signatureId_;
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     * @return Whether the expression field is set.
     */
    @java.lang.Override
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     * @return The expression.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
      return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSignatureId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getExpression().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, signatureId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getExpression());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, signatureId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getExpression());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import) obj;

      if (hasSignatureId() != other.hasSignatureId()) return false;
      if (hasSignatureId()) {
        if (getSignatureId()
            != other.getSignatureId()) return false;
      }
      if (hasExpression() != other.hasExpression()) return false;
      if (hasExpression()) {
        if (!getExpression()
            .equals(other.getExpression())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSignatureId()) {
        hash = (37 * hash) + SIGNATURE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSignatureId();
      }
      if (hasExpression()) {
        hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getExpression().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Import}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Import)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ImportOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getExpressionFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        signatureId_ = 0;
        expression_ = null;
        if (expressionBuilder_ != null) {
          expressionBuilder_.dispose();
          expressionBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.signatureId_ = signatureId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.expression_ = expressionBuilder_ == null
              ? expression_
              : expressionBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import.getDefaultInstance()) return this;
        if (other.hasSignatureId()) {
          setSignatureId(other.getSignatureId());
        }
        if (other.hasExpression()) {
          mergeExpression(other.getExpression());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasSignatureId()) {
          return false;
        }
        if (!hasExpression()) {
          return false;
        }
        if (!getExpression().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                signatureId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getExpressionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int signatureId_ ;
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return Whether the signatureId field is set.
       */
      @java.lang.Override
      public boolean hasSignatureId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return The signatureId.
       */
      @java.lang.Override
      public int getSignatureId() {
        return signatureId_;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @param value The signatureId to set.
       * @return This builder for chaining.
       */
      public Builder setSignatureId(int value) {

        signatureId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatureId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signatureId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression expression_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> expressionBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       * @return Whether the expression field is set.
       */
      public boolean hasExpression() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       * @return The expression.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression getExpression() {
        if (expressionBuilder_ == null) {
          return expression_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
        } else {
          return expressionBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expression_ = value;
        } else {
          expressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder builderForValue) {
        if (expressionBuilder_ == null) {
          expression_ = builderForValue.build();
        } else {
          expressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression value) {
        if (expressionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            expression_ != null &&
            expression_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance()) {
            getExpressionBuilder().mergeFrom(value);
          } else {
            expression_ = value;
          }
        } else {
          expressionBuilder_.mergeFrom(value);
        }
        if (expression_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public Builder clearExpression() {
        bitField0_ = (bitField0_ & ~0x00000002);
        expression_ = null;
        if (expressionBuilder_ != null) {
          expressionBuilder_.dispose();
          expressionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder getExpressionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getExpressionFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder getExpressionOrBuilder() {
        if (expressionBuilder_ != null) {
          return expressionBuilder_.getMessageOrBuilder();
        } else {
          return expression_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.getDefaultInstance() : expression_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Expression expression = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder> 
          getExpressionFieldBuilder() {
        if (expressionBuilder_ == null) {
          expressionBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Expression.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ExpressionOrBuilder>(
                  getExpression(),
                  getParentForChildren(),
                  isClean());
          expression_ = null;
        }
        return expressionBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Import)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Import)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Import>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Import>() {
      @java.lang.Override
      public Import parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Import> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Import> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Import getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NameBindingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    boolean hasSignatureId();
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    int getSignatureId();

    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameBinding}
   */
  public static final class NameBinding extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
      NameBindingOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        NameBinding.class.getName());
    }
    // Use NameBinding.newBuilder() to construct.
    private NameBinding(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NameBinding() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder.class);
    }

    private int bitField0_;
    public static final int SIGNATURE_ID_FIELD_NUMBER = 1;
    private int signatureId_ = 0;
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    @java.lang.Override
    public boolean hasSignatureId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    @java.lang.Override
    public int getSignatureId() {
      return signatureId_;
    }

    public static final int NAMEID_FIELD_NUMBER = 2;
    private int nameId_ = 0;
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 nameId = 2 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSignatureId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, signatureId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, nameId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, signatureId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, nameId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding) obj;

      if (hasSignatureId() != other.hasSignatureId()) return false;
      if (hasSignatureId()) {
        if (getSignatureId()
            != other.getSignatureId()) return false;
      }
      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSignatureId()) {
        hash = (37 * hash) + SIGNATURE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSignatureId();
      }
      if (hasNameId()) {
        hash = (37 * hash) + NAMEID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameBinding}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBindingOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        signatureId_ = 0;
        nameId_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.signatureId_ = signatureId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding.getDefaultInstance()) return this;
        if (other.hasSignatureId()) {
          setSignatureId(other.getSignatureId());
        }
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasSignatureId()) {
          return false;
        }
        if (!hasNameId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                signatureId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int signatureId_ ;
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return Whether the signatureId field is set.
       */
      @java.lang.Override
      public boolean hasSignatureId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return The signatureId.
       */
      @java.lang.Override
      public int getSignatureId() {
        return signatureId_;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @param value The signatureId to set.
       * @return This builder for chaining.
       */
      public Builder setSignatureId(int value) {

        signatureId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatureId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signatureId_ = 0;
        onChanged();
        return this;
      }

      private int nameId_ ;
      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 nameId = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nameId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NameBinding)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<NameBinding>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<NameBinding>() {
      @java.lang.Override
      public NameBinding parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<NameBinding> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<NameBinding> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameBinding getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClassModelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>int32 super_name_id = 2;</code>
     * @return Whether the superNameId field is set.
     */
    boolean hasSuperNameId();
    /**
     * <code>int32 super_name_id = 2;</code>
     * @return The superNameId.
     */
    int getSuperNameId();

    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return A list containing the interfaceNameId.
     */
    java.util.List<java.lang.Integer> getInterfaceNameIdList();
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return The count of interfaceNameId.
     */
    int getInterfaceNameIdCount();
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The interfaceNameId at the given index.
     */
    int getInterfaceNameId(int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     * @return Whether the postDeclarationBlock field is set.
     */
    boolean hasPostDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     * @return The postDeclarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPostDeclarationBlockOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ClassModel}
   */
  public static final class ClassModel extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
      ClassModelOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        ClassModel.class.getName());
    }
    // Use ClassModel.newBuilder() to construct.
    private ClassModel(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ClassModel() {
      interfaceNameId_ = emptyIntList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int SUPER_NAME_ID_FIELD_NUMBER = 2;
    private int superNameId_ = 0;
    /**
     * <code>int32 super_name_id = 2;</code>
     * @return Whether the superNameId field is set.
     */
    @java.lang.Override
    public boolean hasSuperNameId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 super_name_id = 2;</code>
     * @return The superNameId.
     */
    @java.lang.Override
    public int getSuperNameId() {
      return superNameId_;
    }

    public static final int INTERFACE_NAME_ID_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList interfaceNameId_ =
        emptyIntList();
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return A list containing the interfaceNameId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getInterfaceNameIdList() {
      return interfaceNameId_;
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @return The count of interfaceNameId.
     */
    public int getInterfaceNameIdCount() {
      return interfaceNameId_.size();
    }
    /**
     * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The interfaceNameId at the given index.
     */
    public int getInterfaceNameId(int index) {
      return interfaceNameId_.getInt(index);
    }

    public static final int POST_DECLARATION_BLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock postDeclarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     * @return Whether the postDeclarationBlock field is set.
     */
    @java.lang.Override
    public boolean hasPostDeclarationBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     * @return The postDeclarationBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
      return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPostDeclarationBlockOrBuilder() {
      return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasPostDeclarationBlock()) {
        if (!getPostDeclarationBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, superNameId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getPostDeclarationBlock());
      }
      for (int i = 0; i < interfaceNameId_.size(); i++) {
        output.writeInt32(4, interfaceNameId_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, superNameId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getPostDeclarationBlock());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < interfaceNameId_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(interfaceNameId_.getInt(i));
        }
        size += dataSize;
        size += 1 * getInterfaceNameIdList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (hasSuperNameId() != other.hasSuperNameId()) return false;
      if (hasSuperNameId()) {
        if (getSuperNameId()
            != other.getSuperNameId()) return false;
      }
      if (!getInterfaceNameIdList()
          .equals(other.getInterfaceNameIdList())) return false;
      if (hasPostDeclarationBlock() != other.hasPostDeclarationBlock()) return false;
      if (hasPostDeclarationBlock()) {
        if (!getPostDeclarationBlock()
            .equals(other.getPostDeclarationBlock())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (hasSuperNameId()) {
        hash = (37 * hash) + SUPER_NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSuperNameId();
      }
      if (getInterfaceNameIdCount() > 0) {
        hash = (37 * hash) + INTERFACE_NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getInterfaceNameIdList().hashCode();
      }
      if (hasPostDeclarationBlock()) {
        hash = (37 * hash) + POST_DECLARATION_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getPostDeclarationBlock().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.ClassModel}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModelOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getPostDeclarationBlockFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        superNameId_ = 0;
        interfaceNameId_ = emptyIntList();
        postDeclarationBlock_ = null;
        if (postDeclarationBlockBuilder_ != null) {
          postDeclarationBlockBuilder_.dispose();
          postDeclarationBlockBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.superNameId_ = superNameId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          interfaceNameId_.makeImmutable();
          result.interfaceNameId_ = interfaceNameId_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.postDeclarationBlock_ = postDeclarationBlockBuilder_ == null
              ? postDeclarationBlock_
              : postDeclarationBlockBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (other.hasSuperNameId()) {
          setSuperNameId(other.getSuperNameId());
        }
        if (!other.interfaceNameId_.isEmpty()) {
          if (interfaceNameId_.isEmpty()) {
            interfaceNameId_ = other.interfaceNameId_;
            interfaceNameId_.makeImmutable();
            bitField0_ |= 0x00000004;
          } else {
            ensureInterfaceNameIdIsMutable();
            interfaceNameId_.addAll(other.interfaceNameId_);
          }
          onChanged();
        }
        if (other.hasPostDeclarationBlock()) {
          mergePostDeclarationBlock(other.getPostDeclarationBlock());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNameId()) {
          return false;
        }
        if (hasPostDeclarationBlock()) {
          if (!getPostDeclarationBlock().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                superNameId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getPostDeclarationBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 26
              case 32: {
                int v = input.readInt32();
                ensureInterfaceNameIdIsMutable();
                interfaceNameId_.addInt(v);
                break;
              } // case 32
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureInterfaceNameIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  interfaceNameId_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private int superNameId_ ;
      /**
       * <code>int32 super_name_id = 2;</code>
       * @return Whether the superNameId field is set.
       */
      @java.lang.Override
      public boolean hasSuperNameId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 super_name_id = 2;</code>
       * @return The superNameId.
       */
      @java.lang.Override
      public int getSuperNameId() {
        return superNameId_;
      }
      /**
       * <code>int32 super_name_id = 2;</code>
       * @param value The superNameId to set.
       * @return This builder for chaining.
       */
      public Builder setSuperNameId(int value) {

        superNameId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 super_name_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSuperNameId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        superNameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList interfaceNameId_ = emptyIntList();
      private void ensureInterfaceNameIdIsMutable() {
        if (!interfaceNameId_.isModifiable()) {
          interfaceNameId_ = makeMutableCopy(interfaceNameId_);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @return A list containing the interfaceNameId.
       */
      public java.util.List<java.lang.Integer>
          getInterfaceNameIdList() {
        interfaceNameId_.makeImmutable();
        return interfaceNameId_;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @return The count of interfaceNameId.
       */
      public int getInterfaceNameIdCount() {
        return interfaceNameId_.size();
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The interfaceNameId at the given index.
       */
      public int getInterfaceNameId(int index) {
        return interfaceNameId_.getInt(index);
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The interfaceNameId to set.
       * @return This builder for chaining.
       */
      public Builder setInterfaceNameId(
          int index, int value) {

        ensureInterfaceNameIdIsMutable();
        interfaceNameId_.setInt(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param value The interfaceNameId to add.
       * @return This builder for chaining.
       */
      public Builder addInterfaceNameId(int value) {

        ensureInterfaceNameIdIsMutable();
        interfaceNameId_.addInt(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @param values The interfaceNameId to add.
       * @return This builder for chaining.
       */
      public Builder addAllInterfaceNameId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInterfaceNameIdIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, interfaceNameId_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 interface_name_id = 4 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearInterfaceNameId() {
        interfaceNameId_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock postDeclarationBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> postDeclarationBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       * @return Whether the postDeclarationBlock field is set.
       */
      public boolean hasPostDeclarationBlock() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       * @return The postDeclarationBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
        if (postDeclarationBlockBuilder_ == null) {
          return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
        } else {
          return postDeclarationBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder setPostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (postDeclarationBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          postDeclarationBlock_ = value;
        } else {
          postDeclarationBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder setPostDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (postDeclarationBlockBuilder_ == null) {
          postDeclarationBlock_ = builderForValue.build();
        } else {
          postDeclarationBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder mergePostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (postDeclarationBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            postDeclarationBlock_ != null &&
            postDeclarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getPostDeclarationBlockBuilder().mergeFrom(value);
          } else {
            postDeclarationBlock_ = value;
          }
        } else {
          postDeclarationBlockBuilder_.mergeFrom(value);
        }
        if (postDeclarationBlock_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public Builder clearPostDeclarationBlock() {
        bitField0_ = (bitField0_ & ~0x00000008);
        postDeclarationBlock_ = null;
        if (postDeclarationBlockBuilder_ != null) {
          postDeclarationBlockBuilder_.dispose();
          postDeclarationBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getPostDeclarationBlockBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPostDeclarationBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPostDeclarationBlockOrBuilder() {
        if (postDeclarationBlockBuilder_ != null) {
          return postDeclarationBlockBuilder_.getMessageOrBuilder();
        } else {
          return postDeclarationBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getPostDeclarationBlockFieldBuilder() {
        if (postDeclarationBlockBuilder_ == null) {
          postDeclarationBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getPostDeclarationBlock(),
                  getParentForChildren(),
                  isClean());
          postDeclarationBlock_ = null;
        }
        return postDeclarationBlockBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.ClassModel)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<ClassModel>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<ClassModel>() {
      @java.lang.Override
      public ClassModel parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<ClassModel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ClassModel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ClassModel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IrClassModelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    boolean hasNameId();
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    int getNameId();

    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return A list containing the superClasses.
     */
    java.util.List<java.lang.Integer> getSuperClassesList();
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return The count of superClasses.
     */
    int getSuperClassesCount();
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The superClasses at the given index.
     */
    int getSuperClasses(int index);

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     * @return Whether the preDeclarationBlock field is set.
     */
    boolean hasPreDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     * @return The preDeclarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPreDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPreDeclarationBlockOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     * @return Whether the postDeclarationBlock field is set.
     */
    boolean hasPostDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     * @return The postDeclarationBlock.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPostDeclarationBlockOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.IrClassModel}
   */
  public static final class IrClassModel extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
      IrClassModelOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        IrClassModel.class.getName());
    }
    // Use IrClassModel.newBuilder() to construct.
    private IrClassModel(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private IrClassModel() {
      superClasses_ = emptyIntList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_ID_FIELD_NUMBER = 1;
    private int nameId_ = 0;
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return Whether the nameId field is set.
     */
    @java.lang.Override
    public boolean hasNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 name_id = 1 [features = { ... }</code>
     * @return The nameId.
     */
    @java.lang.Override
    public int getNameId() {
      return nameId_;
    }

    public static final int SUPER_CLASSES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.Internal.IntList superClasses_ =
        emptyIntList();
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return A list containing the superClasses.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getSuperClassesList() {
      return superClasses_;
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @return The count of superClasses.
     */
    public int getSuperClassesCount() {
      return superClasses_.size();
    }
    /**
     * <code>repeated int32 super_classes = 2 [features = { ... }</code>
     * @param index The index of the element to return.
     * @return The superClasses at the given index.
     */
    public int getSuperClasses(int index) {
      return superClasses_.getInt(index);
    }

    public static final int PRE_DECLARATION_BLOCK_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock preDeclarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     * @return Whether the preDeclarationBlock field is set.
     */
    @java.lang.Override
    public boolean hasPreDeclarationBlock() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     * @return The preDeclarationBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPreDeclarationBlock() {
      return preDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : preDeclarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPreDeclarationBlockOrBuilder() {
      return preDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : preDeclarationBlock_;
    }

    public static final int POST_DECLARATION_BLOCK_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock postDeclarationBlock_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     * @return Whether the postDeclarationBlock field is set.
     */
    @java.lang.Override
    public boolean hasPostDeclarationBlock() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     * @return The postDeclarationBlock.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
      return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPostDeclarationBlockOrBuilder() {
      return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasPreDeclarationBlock()) {
        if (!getPreDeclarationBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPostDeclarationBlock()) {
        if (!getPostDeclarationBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, nameId_);
      }
      for (int i = 0; i < superClasses_.size(); i++) {
        output.writeInt32(2, superClasses_.getInt(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getPreDeclarationBlock());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getPostDeclarationBlock());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, nameId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < superClasses_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(superClasses_.getInt(i));
        }
        size += dataSize;
        size += 1 * getSuperClassesList().size();
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getPreDeclarationBlock());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, getPostDeclarationBlock());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel) obj;

      if (hasNameId() != other.hasNameId()) return false;
      if (hasNameId()) {
        if (getNameId()
            != other.getNameId()) return false;
      }
      if (!getSuperClassesList()
          .equals(other.getSuperClassesList())) return false;
      if (hasPreDeclarationBlock() != other.hasPreDeclarationBlock()) return false;
      if (hasPreDeclarationBlock()) {
        if (!getPreDeclarationBlock()
            .equals(other.getPreDeclarationBlock())) return false;
      }
      if (hasPostDeclarationBlock() != other.hasPostDeclarationBlock()) return false;
      if (hasPostDeclarationBlock()) {
        if (!getPostDeclarationBlock()
            .equals(other.getPostDeclarationBlock())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNameId()) {
        hash = (37 * hash) + NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNameId();
      }
      if (getSuperClassesCount() > 0) {
        hash = (37 * hash) + SUPER_CLASSES_FIELD_NUMBER;
        hash = (53 * hash) + getSuperClassesList().hashCode();
      }
      if (hasPreDeclarationBlock()) {
        hash = (37 * hash) + PRE_DECLARATION_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getPreDeclarationBlock().hashCode();
      }
      if (hasPostDeclarationBlock()) {
        hash = (37 * hash) + POST_DECLARATION_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getPostDeclarationBlock().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.IrClassModel}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModelOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getPreDeclarationBlockFieldBuilder();
          getPostDeclarationBlockFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        nameId_ = 0;
        superClasses_ = emptyIntList();
        preDeclarationBlock_ = null;
        if (preDeclarationBlockBuilder_ != null) {
          preDeclarationBlockBuilder_.dispose();
          preDeclarationBlockBuilder_ = null;
        }
        postDeclarationBlock_ = null;
        if (postDeclarationBlockBuilder_ != null) {
          postDeclarationBlockBuilder_.dispose();
          postDeclarationBlockBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.nameId_ = nameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          superClasses_.makeImmutable();
          result.superClasses_ = superClasses_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.preDeclarationBlock_ = preDeclarationBlockBuilder_ == null
              ? preDeclarationBlock_
              : preDeclarationBlockBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.postDeclarationBlock_ = postDeclarationBlockBuilder_ == null
              ? postDeclarationBlock_
              : postDeclarationBlockBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel.getDefaultInstance()) return this;
        if (other.hasNameId()) {
          setNameId(other.getNameId());
        }
        if (!other.superClasses_.isEmpty()) {
          if (superClasses_.isEmpty()) {
            superClasses_ = other.superClasses_;
            superClasses_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureSuperClassesIsMutable();
            superClasses_.addAll(other.superClasses_);
          }
          onChanged();
        }
        if (other.hasPreDeclarationBlock()) {
          mergePreDeclarationBlock(other.getPreDeclarationBlock());
        }
        if (other.hasPostDeclarationBlock()) {
          mergePostDeclarationBlock(other.getPostDeclarationBlock());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasNameId()) {
          return false;
        }
        if (hasPreDeclarationBlock()) {
          if (!getPreDeclarationBlock().isInitialized()) {
            return false;
          }
        }
        if (hasPostDeclarationBlock()) {
          if (!getPostDeclarationBlock().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                nameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                int v = input.readInt32();
                ensureSuperClassesIsMutable();
                superClasses_.addInt(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureSuperClassesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  superClasses_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getPreDeclarationBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getPostDeclarationBlockFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int nameId_ ;
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return Whether the nameId field is set.
       */
      @java.lang.Override
      public boolean hasNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return The nameId.
       */
      @java.lang.Override
      public int getNameId() {
        return nameId_;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @param value The nameId to set.
       * @return This builder for chaining.
       */
      public Builder setNameId(int value) {

        nameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        nameId_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.protobuf.Internal.IntList superClasses_ = emptyIntList();
      private void ensureSuperClassesIsMutable() {
        if (!superClasses_.isModifiable()) {
          superClasses_ = makeMutableCopy(superClasses_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @return A list containing the superClasses.
       */
      public java.util.List<java.lang.Integer>
          getSuperClassesList() {
        superClasses_.makeImmutable();
        return superClasses_;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @return The count of superClasses.
       */
      public int getSuperClassesCount() {
        return superClasses_.size();
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param index The index of the element to return.
       * @return The superClasses at the given index.
       */
      public int getSuperClasses(int index) {
        return superClasses_.getInt(index);
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param index The index to set the value at.
       * @param value The superClasses to set.
       * @return This builder for chaining.
       */
      public Builder setSuperClasses(
          int index, int value) {

        ensureSuperClassesIsMutable();
        superClasses_.setInt(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param value The superClasses to add.
       * @return This builder for chaining.
       */
      public Builder addSuperClasses(int value) {

        ensureSuperClassesIsMutable();
        superClasses_.addInt(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @param values The superClasses to add.
       * @return This builder for chaining.
       */
      public Builder addAllSuperClasses(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSuperClassesIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, superClasses_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 super_classes = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSuperClasses() {
        superClasses_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock preDeclarationBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> preDeclarationBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       * @return Whether the preDeclarationBlock field is set.
       */
      public boolean hasPreDeclarationBlock() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       * @return The preDeclarationBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPreDeclarationBlock() {
        if (preDeclarationBlockBuilder_ == null) {
          return preDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : preDeclarationBlock_;
        } else {
          return preDeclarationBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder setPreDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (preDeclarationBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          preDeclarationBlock_ = value;
        } else {
          preDeclarationBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder setPreDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (preDeclarationBlockBuilder_ == null) {
          preDeclarationBlock_ = builderForValue.build();
        } else {
          preDeclarationBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder mergePreDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (preDeclarationBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            preDeclarationBlock_ != null &&
            preDeclarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getPreDeclarationBlockBuilder().mergeFrom(value);
          } else {
            preDeclarationBlock_ = value;
          }
        } else {
          preDeclarationBlockBuilder_.mergeFrom(value);
        }
        if (preDeclarationBlock_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public Builder clearPreDeclarationBlock() {
        bitField0_ = (bitField0_ & ~0x00000004);
        preDeclarationBlock_ = null;
        if (preDeclarationBlockBuilder_ != null) {
          preDeclarationBlockBuilder_.dispose();
          preDeclarationBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getPreDeclarationBlockBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPreDeclarationBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPreDeclarationBlockOrBuilder() {
        if (preDeclarationBlockBuilder_ != null) {
          return preDeclarationBlockBuilder_.getMessageOrBuilder();
        } else {
          return preDeclarationBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : preDeclarationBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock pre_declaration_block = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getPreDeclarationBlockFieldBuilder() {
        if (preDeclarationBlockBuilder_ == null) {
          preDeclarationBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getPreDeclarationBlock(),
                  getParentForChildren(),
                  isClean());
          preDeclarationBlock_ = null;
        }
        return preDeclarationBlockBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock postDeclarationBlock_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> postDeclarationBlockBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       * @return Whether the postDeclarationBlock field is set.
       */
      public boolean hasPostDeclarationBlock() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       * @return The postDeclarationBlock.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock getPostDeclarationBlock() {
        if (postDeclarationBlockBuilder_ == null) {
          return postDeclarationBlock_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
        } else {
          return postDeclarationBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder setPostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (postDeclarationBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          postDeclarationBlock_ = value;
        } else {
          postDeclarationBlockBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder setPostDeclarationBlock(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder builderForValue) {
        if (postDeclarationBlockBuilder_ == null) {
          postDeclarationBlock_ = builderForValue.build();
        } else {
          postDeclarationBlockBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder mergePostDeclarationBlock(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock value) {
        if (postDeclarationBlockBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            postDeclarationBlock_ != null &&
            postDeclarationBlock_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance()) {
            getPostDeclarationBlockBuilder().mergeFrom(value);
          } else {
            postDeclarationBlock_ = value;
          }
        } else {
          postDeclarationBlockBuilder_.mergeFrom(value);
        }
        if (postDeclarationBlock_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public Builder clearPostDeclarationBlock() {
        bitField0_ = (bitField0_ & ~0x00000008);
        postDeclarationBlock_ = null;
        if (postDeclarationBlockBuilder_ != null) {
          postDeclarationBlockBuilder_.dispose();
          postDeclarationBlockBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder getPostDeclarationBlockBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPostDeclarationBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder getPostDeclarationBlockOrBuilder() {
        if (postDeclarationBlockBuilder_ != null) {
          return postDeclarationBlockBuilder_.getMessageOrBuilder();
        } else {
          return postDeclarationBlock_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.getDefaultInstance() : postDeclarationBlock_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.CompositeBlock post_declaration_block = 4;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder> 
          getPostDeclarationBlockFieldBuilder() {
        if (postDeclarationBlockBuilder_ == null) {
          postDeclarationBlockBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlock.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.CompositeBlockOrBuilder>(
                  getPostDeclarationBlock(),
                  getParentForChildren(),
                  isClean());
          postDeclarationBlock_ = null;
        }
        return postDeclarationBlockBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.IrClassModel)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<IrClassModel>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<IrClassModel>() {
      @java.lang.Override
      public IrClassModel parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<IrClassModel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<IrClassModel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.IrClassModel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InlineModuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    boolean hasSignatureId();
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    int getSignatureId();

    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return Whether the expressionId field is set.
     */
    boolean hasExpressionId();
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return The expressionId.
     */
    int getExpressionId();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineModule}
   */
  public static final class InlineModule extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
      InlineModuleOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        InlineModule.class.getName());
    }
    // Use InlineModule.newBuilder() to construct.
    private InlineModule(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private InlineModule() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder.class);
    }

    private int bitField0_;
    public static final int SIGNATURE_ID_FIELD_NUMBER = 1;
    private int signatureId_ = 0;
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return Whether the signatureId field is set.
     */
    @java.lang.Override
    public boolean hasSignatureId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 signature_id = 1 [features = { ... }</code>
     * @return The signatureId.
     */
    @java.lang.Override
    public int getSignatureId() {
      return signatureId_;
    }

    public static final int EXPRESSION_ID_FIELD_NUMBER = 2;
    private int expressionId_ = 0;
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return Whether the expressionId field is set.
     */
    @java.lang.Override
    public boolean hasExpressionId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 expression_id = 2 [features = { ... }</code>
     * @return The expressionId.
     */
    @java.lang.Override
    public int getExpressionId() {
      return expressionId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSignatureId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasExpressionId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, signatureId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, expressionId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, signatureId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, expressionId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule) obj;

      if (hasSignatureId() != other.hasSignatureId()) return false;
      if (hasSignatureId()) {
        if (getSignatureId()
            != other.getSignatureId()) return false;
      }
      if (hasExpressionId() != other.hasExpressionId()) return false;
      if (hasExpressionId()) {
        if (getExpressionId()
            != other.getExpressionId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSignatureId()) {
        hash = (37 * hash) + SIGNATURE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSignatureId();
      }
      if (hasExpressionId()) {
        hash = (37 * hash) + EXPRESSION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getExpressionId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineModule}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModuleOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        signatureId_ = 0;
        expressionId_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.signatureId_ = signatureId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.expressionId_ = expressionId_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule.getDefaultInstance()) return this;
        if (other.hasSignatureId()) {
          setSignatureId(other.getSignatureId());
        }
        if (other.hasExpressionId()) {
          setExpressionId(other.getExpressionId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasSignatureId()) {
          return false;
        }
        if (!hasExpressionId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                signatureId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                expressionId_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int signatureId_ ;
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return Whether the signatureId field is set.
       */
      @java.lang.Override
      public boolean hasSignatureId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return The signatureId.
       */
      @java.lang.Override
      public int getSignatureId() {
        return signatureId_;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @param value The signatureId to set.
       * @return This builder for chaining.
       */
      public Builder setSignatureId(int value) {

        signatureId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 signature_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSignatureId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        signatureId_ = 0;
        onChanged();
        return this;
      }

      private int expressionId_ ;
      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @return Whether the expressionId field is set.
       */
      @java.lang.Override
      public boolean hasExpressionId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @return The expressionId.
       */
      @java.lang.Override
      public int getExpressionId() {
        return expressionId_;
      }
      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @param value The expressionId to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionId(int value) {

        expressionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 expression_id = 2 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearExpressionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        expressionId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.InlineModule)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<InlineModule>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<InlineModule>() {
      @java.lang.Override
      public InlineModule parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<InlineModule> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<InlineModule> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineModule getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StringTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.StringTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string entry = 1;</code>
     * @return A list containing the entry.
     */
    java.util.List<java.lang.String>
        getEntryList();
    /**
     * <code>repeated string entry = 1;</code>
     * @return The count of entry.
     */
    int getEntryCount();
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the element to return.
     * @return The entry at the given index.
     */
    java.lang.String getEntry(int index);
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the entry at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getEntryBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.StringTable}
   */
  public static final class StringTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.StringTable)
      StringTableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        StringTable.class.getName());
    }
    // Use StringTable.newBuilder() to construct.
    private StringTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private StringTable() {
      entry_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder.class);
    }

    public static final int ENTRY_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.LazyStringArrayList entry_ =
        org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string entry = 1;</code>
     * @return A list containing the entry.
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @return The count of entry.
     */
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the element to return.
     * @return The entry at the given index.
     */
    public java.lang.String getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated string entry = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the entry at the given index.
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getEntryBytes(int index) {
      return entry_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < entry_.size(); i++) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 1, entry_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < entry_.size(); i++) {
          dataSize += computeStringSizeNoTag(entry_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getEntryList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable) obj;

      if (!getEntryList()
          .equals(other.getEntryList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEntryCount() > 0) {
        hash = (37 * hash) + ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + getEntryList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.StringTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.StringTable)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        entry_ =
            org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          entry_.makeImmutable();
          result.entry_ = entry_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance()) return this;
        if (!other.entry_.isEmpty()) {
          if (entry_.isEmpty()) {
            entry_ = other.entry_;
            bitField0_ |= 0x00000001;
          } else {
            ensureEntryIsMutable();
            entry_.addAll(other.entry_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
                ensureEntryIsMutable();
                entry_.add(bs);
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.LazyStringArrayList entry_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
      private void ensureEntryIsMutable() {
        if (!entry_.isModifiable()) {
          entry_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(entry_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @return A list containing the entry.
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getEntryList() {
        entry_.makeImmutable();
        return entry_;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @return The count of entry.
       */
      public int getEntryCount() {
        return entry_.size();
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param index The index of the element to return.
       * @return The entry at the given index.
       */
      public java.lang.String getEntry(int index) {
        return entry_.get(index);
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the entry at the given index.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getEntryBytes(int index) {
        return entry_.getByteString(index);
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param index The index to set the value at.
       * @param value The entry to set.
       * @return This builder for chaining.
       */
      public Builder setEntry(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureEntryIsMutable();
        entry_.set(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param value The entry to add.
       * @return This builder for chaining.
       */
      public Builder addEntry(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureEntryIsMutable();
        entry_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param values The entry to add.
       * @return This builder for chaining.
       */
      public Builder addAllEntry(
          java.lang.Iterable<java.lang.String> values) {
        ensureEntryIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, entry_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEntry() {
        entry_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string entry = 1;</code>
       * @param value The bytes of the entry to add.
       * @return This builder for chaining.
       */
      public Builder addEntryBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureEntryIsMutable();
        entry_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.StringTable)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.StringTable)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<StringTable>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<StringTable>() {
      @java.lang.Override
      public StringTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<StringTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<StringTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NameTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.NameTable)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> 
        getEntryList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getEntry(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    int getEntryCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder> 
        getEntryOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder getEntryOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameTable}
   */
  public static final class NameTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.NameTable)
      NameTableOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        NameTable.class.getName());
    }
    // Use NameTable.newBuilder() to construct.
    private NameTable(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NameTable() {
      entry_ = java.util.Collections.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder.class);
    }

    public static final int ENTRY_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> entry_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> getEntryList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder> 
        getEntryOrBuilderList() {
      return entry_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public int getEntryCount() {
      return entry_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getEntry(int index) {
      return entry_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder getEntryOrBuilder(
        int index) {
      return entry_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getEntryCount(); i++) {
        if (!getEntry(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < entry_.size(); i++) {
        output.writeMessage(1, entry_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < entry_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, entry_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable) obj;

      if (!getEntryList()
          .equals(other.getEntryList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEntryCount() > 0) {
        hash = (37 * hash) + ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + getEntryList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.NameTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.NameTable)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
        } else {
          entry_ = null;
          entryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable result) {
        if (entryBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            entry_ = java.util.Collections.unmodifiableList(entry_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.entry_ = entry_;
        } else {
          result.entry_ = entryBuilder_.build();
        }
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance()) return this;
        if (entryBuilder_ == null) {
          if (!other.entry_.isEmpty()) {
            if (entry_.isEmpty()) {
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEntryIsMutable();
              entry_.addAll(other.entry_);
            }
            onChanged();
          }
        } else {
          if (!other.entry_.isEmpty()) {
            if (entryBuilder_.isEmpty()) {
              entryBuilder_.dispose();
              entryBuilder_ = null;
              entry_ = other.entry_;
              bitField0_ = (bitField0_ & ~0x00000001);
              entryBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEntryFieldBuilder() : null;
            } else {
              entryBuilder_.addAllMessages(other.entry_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getEntryCount(); i++) {
          if (!getEntry(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name m =
                    input.readMessage(
                        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.parser(),
                        extensionRegistry);
                if (entryBuilder_ == null) {
                  ensureEntryIsMutable();
                  entry_.add(m);
                } else {
                  entryBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> entry_ =
        java.util.Collections.emptyList();
      private void ensureEntryIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          entry_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name>(entry_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder> entryBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> getEntryList() {
        if (entryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entry_);
        } else {
          return entryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public int getEntryCount() {
        if (entryBuilder_ == null) {
          return entry_.size();
        } else {
          return entryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getEntry(int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);
        } else {
          return entryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.set(index, value);
          onChanged();
        } else {
          entryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder setEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.set(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(value);
          onChanged();
        } else {
          entryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name value) {
        if (entryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntryIsMutable();
          entry_.add(index, value);
          onChanged();
        } else {
          entryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addEntry(
          int index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder builderForValue) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.add(index, builderForValue.build());
          onChanged();
        } else {
          entryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder addAllEntry(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name> values) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, entry_);
          onChanged();
        } else {
          entryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder clearEntry() {
        if (entryBuilder_ == null) {
          entry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          entryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public Builder removeEntry(int index) {
        if (entryBuilder_ == null) {
          ensureEntryIsMutable();
          entry_.remove(index);
          onChanged();
        } else {
          entryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder getEntryBuilder(
          int index) {
        return getEntryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder getEntryOrBuilder(
          int index) {
        if (entryBuilder_ == null) {
          return entry_.get(index);  } else {
          return entryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder> 
           getEntryOrBuilderList() {
        if (entryBuilder_ != null) {
          return entryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entry_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder addEntryBuilder() {
        return getEntryFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder addEntryBuilder(
          int index) {
        return getEntryFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.ast.Name entry = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder> 
           getEntryBuilderList() {
        return getEntryFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder> 
          getEntryFieldBuilder() {
        if (entryBuilder_ == null) {
          entryBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder>(
                  entry_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          entry_ = null;
        }
        return entryBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.NameTable)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.NameTable)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<NameTable>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<NameTable>() {
      @java.lang.Override
      public NameTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<NameTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<NameTable> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Name)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return Whether the temporary field is set.
     */
    boolean hasTemporary();
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return The temporary.
     */
    boolean getTemporary();

    /**
     * <code>int32 identifier = 2;</code>
     * @return Whether the identifier field is set.
     */
    boolean hasIdentifier();
    /**
     * <code>int32 identifier = 2;</code>
     * @return The identifier.
     */
    int getIdentifier();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     * @return Whether the localNameId field is set.
     */
    boolean hasLocalNameId();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     * @return The localNameId.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getLocalNameId();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder getLocalNameIdOrBuilder();

    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return Whether the imported field is set.
     */
    boolean hasImported();
    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return The imported.
     */
    boolean getImported();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return Whether the specialFunction field is set.
     */
    boolean hasSpecialFunction();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return The specialFunction.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction getSpecialFunction();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Name}
   */
  public static final class Name extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Name)
      NameOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Name.class.getName());
    }
    // Use Name.newBuilder() to construct.
    private Name(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Name() {
      specialFunction_ = 1;
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder.class);
    }

    private int bitField0_;
    public static final int TEMPORARY_FIELD_NUMBER = 1;
    private boolean temporary_ = false;
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return Whether the temporary field is set.
     */
    @java.lang.Override
    public boolean hasTemporary() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>bool temporary = 1 [features = { ... }</code>
     * @return The temporary.
     */
    @java.lang.Override
    public boolean getTemporary() {
      return temporary_;
    }

    public static final int IDENTIFIER_FIELD_NUMBER = 2;
    private int identifier_ = 0;
    /**
     * <code>int32 identifier = 2;</code>
     * @return Whether the identifier field is set.
     */
    @java.lang.Override
    public boolean hasIdentifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 identifier = 2;</code>
     * @return The identifier.
     */
    @java.lang.Override
    public int getIdentifier() {
      return identifier_;
    }

    public static final int LOCAL_NAME_ID_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias localNameId_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     * @return Whether the localNameId field is set.
     */
    @java.lang.Override
    public boolean hasLocalNameId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     * @return The localNameId.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getLocalNameId() {
      return localNameId_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance() : localNameId_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder getLocalNameIdOrBuilder() {
      return localNameId_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance() : localNameId_;
    }

    public static final int IMPORTED_FIELD_NUMBER = 4;
    private boolean imported_ = false;
    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return Whether the imported field is set.
     */
    @java.lang.Override
    public boolean hasImported() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>bool imported = 4 [default = false];</code>
     * @return The imported.
     */
    @java.lang.Override
    public boolean getImported() {
      return imported_;
    }

    public static final int SPECIAL_FUNCTION_FIELD_NUMBER = 5;
    private int specialFunction_ = 1;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return Whether the specialFunction field is set.
     */
    @java.lang.Override public boolean hasSpecialFunction() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
     * @return The specialFunction.
     */
    @java.lang.Override public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction getSpecialFunction() {
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.forNumber(specialFunction_);
      return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.DEFINE_INLINE_FUNCTION : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTemporary()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasLocalNameId()) {
        if (!getLocalNameId().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, temporary_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, identifier_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getLocalNameId());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(4, imported_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeEnum(5, specialFunction_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(1, temporary_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, identifier_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getLocalNameId());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBoolSize(4, imported_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(5, specialFunction_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name) obj;

      if (hasTemporary() != other.hasTemporary()) return false;
      if (hasTemporary()) {
        if (getTemporary()
            != other.getTemporary()) return false;
      }
      if (hasIdentifier() != other.hasIdentifier()) return false;
      if (hasIdentifier()) {
        if (getIdentifier()
            != other.getIdentifier()) return false;
      }
      if (hasLocalNameId() != other.hasLocalNameId()) return false;
      if (hasLocalNameId()) {
        if (!getLocalNameId()
            .equals(other.getLocalNameId())) return false;
      }
      if (hasImported() != other.hasImported()) return false;
      if (hasImported()) {
        if (getImported()
            != other.getImported()) return false;
      }
      if (hasSpecialFunction() != other.hasSpecialFunction()) return false;
      if (hasSpecialFunction()) {
        if (specialFunction_ != other.specialFunction_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTemporary()) {
        hash = (37 * hash) + TEMPORARY_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getTemporary());
      }
      if (hasIdentifier()) {
        hash = (37 * hash) + IDENTIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getIdentifier();
      }
      if (hasLocalNameId()) {
        hash = (37 * hash) + LOCAL_NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLocalNameId().hashCode();
      }
      if (hasImported()) {
        hash = (37 * hash) + IMPORTED_FIELD_NUMBER;
        hash = (53 * hash) + org.jetbrains.kotlin.protobuf.Internal.hashBoolean(
            getImported());
      }
      if (hasSpecialFunction()) {
        hash = (37 * hash) + SPECIAL_FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + specialFunction_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Name}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Name)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getLocalNameIdFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        temporary_ = false;
        identifier_ = 0;
        localNameId_ = null;
        if (localNameIdBuilder_ != null) {
          localNameIdBuilder_.dispose();
          localNameIdBuilder_ = null;
        }
        imported_ = false;
        specialFunction_ = 1;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.temporary_ = temporary_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.identifier_ = identifier_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.localNameId_ = localNameIdBuilder_ == null
              ? localNameId_
              : localNameIdBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.imported_ = imported_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.specialFunction_ = specialFunction_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name.getDefaultInstance()) return this;
        if (other.hasTemporary()) {
          setTemporary(other.getTemporary());
        }
        if (other.hasIdentifier()) {
          setIdentifier(other.getIdentifier());
        }
        if (other.hasLocalNameId()) {
          mergeLocalNameId(other.getLocalNameId());
        }
        if (other.hasImported()) {
          setImported(other.getImported());
        }
        if (other.hasSpecialFunction()) {
          setSpecialFunction(other.getSpecialFunction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTemporary()) {
          return false;
        }
        if (hasLocalNameId()) {
          if (!getLocalNameId().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                temporary_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                identifier_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getLocalNameIdFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                imported_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                int tmpRaw = input.readEnum();
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction tmpValue =
                    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(5, tmpRaw);
                } else {
                  specialFunction_ = tmpRaw;
                  bitField0_ |= 0x00000010;
                }
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private boolean temporary_ ;
      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @return Whether the temporary field is set.
       */
      @java.lang.Override
      public boolean hasTemporary() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @return The temporary.
       */
      @java.lang.Override
      public boolean getTemporary() {
        return temporary_;
      }
      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @param value The temporary to set.
       * @return This builder for chaining.
       */
      public Builder setTemporary(boolean value) {

        temporary_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bool temporary = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearTemporary() {
        bitField0_ = (bitField0_ & ~0x00000001);
        temporary_ = false;
        onChanged();
        return this;
      }

      private int identifier_ ;
      /**
       * <code>int32 identifier = 2;</code>
       * @return Whether the identifier field is set.
       */
      @java.lang.Override
      public boolean hasIdentifier() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 identifier = 2;</code>
       * @return The identifier.
       */
      @java.lang.Override
      public int getIdentifier() {
        return identifier_;
      }
      /**
       * <code>int32 identifier = 2;</code>
       * @param value The identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifier(int value) {

        identifier_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 identifier = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIdentifier() {
        bitField0_ = (bitField0_ & ~0x00000002);
        identifier_ = 0;
        onChanged();
        return this;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias localNameId_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder> localNameIdBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       * @return Whether the localNameId field is set.
       */
      public boolean hasLocalNameId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       * @return The localNameId.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getLocalNameId() {
        if (localNameIdBuilder_ == null) {
          return localNameId_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance() : localNameId_;
        } else {
          return localNameIdBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder setLocalNameId(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias value) {
        if (localNameIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          localNameId_ = value;
        } else {
          localNameIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder setLocalNameId(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder builderForValue) {
        if (localNameIdBuilder_ == null) {
          localNameId_ = builderForValue.build();
        } else {
          localNameIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder mergeLocalNameId(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias value) {
        if (localNameIdBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            localNameId_ != null &&
            localNameId_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance()) {
            getLocalNameIdBuilder().mergeFrom(value);
          } else {
            localNameId_ = value;
          }
        } else {
          localNameIdBuilder_.mergeFrom(value);
        }
        if (localNameId_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public Builder clearLocalNameId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        localNameId_ = null;
        if (localNameIdBuilder_ != null) {
          localNameIdBuilder_.dispose();
          localNameIdBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder getLocalNameIdBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLocalNameIdFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder getLocalNameIdOrBuilder() {
        if (localNameIdBuilder_ != null) {
          return localNameIdBuilder_.getMessageOrBuilder();
        } else {
          return localNameId_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance() : localNameId_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.LocalAlias local_name_id = 3;</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder> 
          getLocalNameIdFieldBuilder() {
        if (localNameIdBuilder_ == null) {
          localNameIdBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder>(
                  getLocalNameId(),
                  getParentForChildren(),
                  isClean());
          localNameId_ = null;
        }
        return localNameIdBuilder_;
      }

      private boolean imported_ ;
      /**
       * <code>bool imported = 4 [default = false];</code>
       * @return Whether the imported field is set.
       */
      @java.lang.Override
      public boolean hasImported() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>bool imported = 4 [default = false];</code>
       * @return The imported.
       */
      @java.lang.Override
      public boolean getImported() {
        return imported_;
      }
      /**
       * <code>bool imported = 4 [default = false];</code>
       * @param value The imported to set.
       * @return This builder for chaining.
       */
      public Builder setImported(boolean value) {

        imported_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>bool imported = 4 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearImported() {
        bitField0_ = (bitField0_ & ~0x00000008);
        imported_ = false;
        onChanged();
        return this;
      }

      private int specialFunction_ = 1;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @return Whether the specialFunction field is set.
       */
      @java.lang.Override public boolean hasSpecialFunction() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @return The specialFunction.
       */
      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction getSpecialFunction() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction result = org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.forNumber(specialFunction_);
        return result == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction.DEFINE_INLINE_FUNCTION : result;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @param value The specialFunction to set.
       * @return This builder for chaining.
       */
      public Builder setSpecialFunction(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.SpecialFunction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        specialFunction_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.SpecialFunction special_function = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpecialFunction() {
        bitField0_ = (bitField0_ & ~0x00000010);
        specialFunction_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Name)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Name)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Name>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Name>() {
      @java.lang.Override
      public Name parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Name> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Name> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Name getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LocalAliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return Whether the localNameId field is set.
     */
    boolean hasLocalNameId();
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return The localNameId.
     */
    int getLocalNameId();

    /**
     * <code>int32 tag = 2;</code>
     * @return Whether the tag field is set.
     */
    boolean hasTag();
    /**
     * <code>int32 tag = 2;</code>
     * @return The tag.
     */
    int getTag();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.LocalAlias}
   */
  public static final class LocalAlias extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
      LocalAliasOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        LocalAlias.class.getName());
    }
    // Use LocalAlias.newBuilder() to construct.
    private LocalAlias(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LocalAlias() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder.class);
    }

    private int bitField0_;
    public static final int LOCAL_NAME_ID_FIELD_NUMBER = 1;
    private int localNameId_ = 0;
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return Whether the localNameId field is set.
     */
    @java.lang.Override
    public boolean hasLocalNameId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>int32 local_name_id = 1 [features = { ... }</code>
     * @return The localNameId.
     */
    @java.lang.Override
    public int getLocalNameId() {
      return localNameId_;
    }

    public static final int TAG_FIELD_NUMBER = 2;
    private int tag_ = 0;
    /**
     * <code>int32 tag = 2;</code>
     * @return Whether the tag field is set.
     */
    @java.lang.Override
    public boolean hasTag() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>int32 tag = 2;</code>
     * @return The tag.
     */
    @java.lang.Override
    public int getTag() {
      return tag_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasLocalNameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, localNameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, tag_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, localNameId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, tag_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias) obj;

      if (hasLocalNameId() != other.hasLocalNameId()) return false;
      if (hasLocalNameId()) {
        if (getLocalNameId()
            != other.getLocalNameId()) return false;
      }
      if (hasTag() != other.hasTag()) return false;
      if (hasTag()) {
        if (getTag()
            != other.getTag()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLocalNameId()) {
        hash = (37 * hash) + LOCAL_NAME_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLocalNameId();
      }
      if (hasTag()) {
        hash = (37 * hash) + TAG_FIELD_NUMBER;
        hash = (53 * hash) + getTag();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.LocalAlias}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAliasOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        localNameId_ = 0;
        tag_ = 0;
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.localNameId_ = localNameId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.tag_ = tag_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias.getDefaultInstance()) return this;
        if (other.hasLocalNameId()) {
          setLocalNameId(other.getLocalNameId());
        }
        if (other.hasTag()) {
          setTag(other.getTag());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasLocalNameId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                localNameId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                tag_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int localNameId_ ;
      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @return Whether the localNameId field is set.
       */
      @java.lang.Override
      public boolean hasLocalNameId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @return The localNameId.
       */
      @java.lang.Override
      public int getLocalNameId() {
        return localNameId_;
      }
      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @param value The localNameId to set.
       * @return This builder for chaining.
       */
      public Builder setLocalNameId(int value) {

        localNameId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 local_name_id = 1 [features = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearLocalNameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        localNameId_ = 0;
        onChanged();
        return this;
      }

      private int tag_ ;
      /**
       * <code>int32 tag = 2;</code>
       * @return Whether the tag field is set.
       */
      @java.lang.Override
      public boolean hasTag() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>int32 tag = 2;</code>
       * @return The tag.
       */
      @java.lang.Override
      public int getTag() {
        return tag_;
      }
      /**
       * <code>int32 tag = 2;</code>
       * @param value The tag to set.
       * @return This builder for chaining.
       */
      public Builder setTag(int value) {

        tag_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 tag = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTag() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tag_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.LocalAlias)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<LocalAlias>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<LocalAlias>() {
      @java.lang.Override
      public LocalAlias parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<LocalAlias> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<LocalAlias> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.LocalAlias getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChunkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.Chunk)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     * @return Whether the stringTable field is set.
     */
    boolean hasStringTable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     * @return The stringTable.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getStringTable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder getStringTableOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     * @return Whether the nameTable field is set.
     */
    boolean hasNameTable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     * @return The nameTable.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getNameTable();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder getNameTableOrBuilder();

    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     * @return Whether the fragment field is set.
     */
    boolean hasFragment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     * @return The fragment.
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getFragment();
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     */
    org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder getFragmentOrBuilder();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Chunk}
   */
  public static final class Chunk extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.Chunk)
      ChunkOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        Chunk.class.getName());
    }
    // Use Chunk.newBuilder() to construct.
    private Chunk(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Chunk() {
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.Builder.class);
    }

    private int bitField0_;
    public static final int STRING_TABLE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable stringTable_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     * @return Whether the stringTable field is set.
     */
    @java.lang.Override
    public boolean hasStringTable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     * @return The stringTable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getStringTable() {
      return stringTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance() : stringTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder getStringTableOrBuilder() {
      return stringTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance() : stringTable_;
    }

    public static final int NAME_TABLE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable nameTable_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     * @return Whether the nameTable field is set.
     */
    @java.lang.Override
    public boolean hasNameTable() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     * @return The nameTable.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getNameTable() {
      return nameTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance() : nameTable_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder getNameTableOrBuilder() {
      return nameTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance() : nameTable_;
    }

    public static final int FRAGMENT_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment fragment_;
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     * @return Whether the fragment field is set.
     */
    @java.lang.Override
    public boolean hasFragment() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     * @return The fragment.
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getFragment() {
      return fragment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance() : fragment_;
    }
    /**
     * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
     */
    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder getFragmentOrBuilder() {
      return fragment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance() : fragment_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStringTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNameTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFragment()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getNameTable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFragment().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getStringTable());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getNameTable());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getFragment());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, getStringTable());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, getNameTable());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, getFragment());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk) obj;

      if (hasStringTable() != other.hasStringTable()) return false;
      if (hasStringTable()) {
        if (!getStringTable()
            .equals(other.getStringTable())) return false;
      }
      if (hasNameTable() != other.hasNameTable()) return false;
      if (hasNameTable()) {
        if (!getNameTable()
            .equals(other.getNameTable())) return false;
      }
      if (hasFragment() != other.hasFragment()) return false;
      if (hasFragment()) {
        if (!getFragment()
            .equals(other.getFragment())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStringTable()) {
        hash = (37 * hash) + STRING_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getStringTable().hashCode();
      }
      if (hasNameTable()) {
        hash = (37 * hash) + NAME_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getNameTable().hashCode();
      }
      if (hasFragment()) {
        hash = (37 * hash) + FRAGMENT_FIELD_NUMBER;
        hash = (53 * hash) + getFragment().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.Chunk}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.Chunk)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.ChunkOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getStringTableFieldBuilder();
          getNameTableFieldBuilder();
          getFragmentFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stringTable_ = null;
        if (stringTableBuilder_ != null) {
          stringTableBuilder_.dispose();
          stringTableBuilder_ = null;
        }
        nameTable_ = null;
        if (nameTableBuilder_ != null) {
          nameTableBuilder_.dispose();
          nameTableBuilder_ = null;
        }
        fragment_ = null;
        if (fragmentBuilder_ != null) {
          fragmentBuilder_.dispose();
          fragmentBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stringTable_ = stringTableBuilder_ == null
              ? stringTable_
              : stringTableBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.nameTable_ = nameTableBuilder_ == null
              ? nameTable_
              : nameTableBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fragment_ = fragmentBuilder_ == null
              ? fragment_
              : fragmentBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk.getDefaultInstance()) return this;
        if (other.hasStringTable()) {
          mergeStringTable(other.getStringTable());
        }
        if (other.hasNameTable()) {
          mergeNameTable(other.getNameTable());
        }
        if (other.hasFragment()) {
          mergeFragment(other.getFragment());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasStringTable()) {
          return false;
        }
        if (!hasNameTable()) {
          return false;
        }
        if (!hasFragment()) {
          return false;
        }
        if (!getNameTable().isInitialized()) {
          return false;
        }
        if (!getFragment().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getStringTableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getNameTableFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getFragmentFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable stringTable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder> stringTableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       * @return Whether the stringTable field is set.
       */
      public boolean hasStringTable() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       * @return The stringTable.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable getStringTable() {
        if (stringTableBuilder_ == null) {
          return stringTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance() : stringTable_;
        } else {
          return stringTableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder setStringTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable value) {
        if (stringTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stringTable_ = value;
        } else {
          stringTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder setStringTable(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder builderForValue) {
        if (stringTableBuilder_ == null) {
          stringTable_ = builderForValue.build();
        } else {
          stringTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder mergeStringTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable value) {
        if (stringTableBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            stringTable_ != null &&
            stringTable_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance()) {
            getStringTableBuilder().mergeFrom(value);
          } else {
            stringTable_ = value;
          }
        } else {
          stringTableBuilder_.mergeFrom(value);
        }
        if (stringTable_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public Builder clearStringTable() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stringTable_ = null;
        if (stringTableBuilder_ != null) {
          stringTableBuilder_.dispose();
          stringTableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder getStringTableBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getStringTableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder getStringTableOrBuilder() {
        if (stringTableBuilder_ != null) {
          return stringTableBuilder_.getMessageOrBuilder();
        } else {
          return stringTable_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.getDefaultInstance() : stringTable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.StringTable string_table = 1 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder> 
          getStringTableFieldBuilder() {
        if (stringTableBuilder_ == null) {
          stringTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTable.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.StringTableOrBuilder>(
                  getStringTable(),
                  getParentForChildren(),
                  isClean());
          stringTable_ = null;
        }
        return stringTableBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable nameTable_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder> nameTableBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       * @return Whether the nameTable field is set.
       */
      public boolean hasNameTable() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       * @return The nameTable.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable getNameTable() {
        if (nameTableBuilder_ == null) {
          return nameTable_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance() : nameTable_;
        } else {
          return nameTableBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder setNameTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable value) {
        if (nameTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          nameTable_ = value;
        } else {
          nameTableBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder setNameTable(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder builderForValue) {
        if (nameTableBuilder_ == null) {
          nameTable_ = builderForValue.build();
        } else {
          nameTableBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder mergeNameTable(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable value) {
        if (nameTableBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            nameTable_ != null &&
            nameTable_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance()) {
            getNameTableBuilder().mergeFrom(value);
          } else {
            nameTable_ = value;
          }
        } else {
          nameTableBuilder_.mergeFrom(value);
        }
        if (nameTable_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public Builder clearNameTable() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nameTable_ = null;
        if (nameTableBuilder_ != null) {
          nameTableBuilder_.dispose();
          nameTableBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder getNameTableBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getNameTableFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder getNameTableOrBuilder() {
        if (nameTableBuilder_ != null) {
          return nameTableBuilder_.getMessageOrBuilder();
        } else {
          return nameTable_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.getDefaultInstance() : nameTable_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.NameTable name_table = 2 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder> 
          getNameTableFieldBuilder() {
        if (nameTableBuilder_ == null) {
          nameTableBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTable.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.NameTableOrBuilder>(
                  getNameTable(),
                  getParentForChildren(),
                  isClean());
          nameTable_ = null;
        }
        return nameTableBuilder_;
      }

      private org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment fragment_;
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder> fragmentBuilder_;
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       * @return Whether the fragment field is set.
       */
      public boolean hasFragment() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       * @return The fragment.
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment getFragment() {
        if (fragmentBuilder_ == null) {
          return fragment_ == null ? org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance() : fragment_;
        } else {
          return fragmentBuilder_.getMessage();
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder setFragment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment value) {
        if (fragmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fragment_ = value;
        } else {
          fragmentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder setFragment(
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder builderForValue) {
        if (fragmentBuilder_ == null) {
          fragment_ = builderForValue.build();
        } else {
          fragmentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder mergeFragment(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment value) {
        if (fragmentBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            fragment_ != null &&
            fragment_ != org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance()) {
            getFragmentBuilder().mergeFrom(value);
          } else {
            fragment_ = value;
          }
        } else {
          fragmentBuilder_.mergeFrom(value);
        }
        if (fragment_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public Builder clearFragment() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fragment_ = null;
        if (fragmentBuilder_ != null) {
          fragmentBuilder_.dispose();
          fragmentBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder getFragmentBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFragmentFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder getFragmentOrBuilder() {
        if (fragmentBuilder_ != null) {
          return fragmentBuilder_.getMessageOrBuilder();
        } else {
          return fragment_ == null ?
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.getDefaultInstance() : fragment_;
        }
      }
      /**
       * <code>.org.jetbrains.kotlin.serialization.js.ast.Fragment fragment = 3 [features = { ... }</code>
       */
      private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
          org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder> 
          getFragmentFieldBuilder() {
        if (fragmentBuilder_ == null) {
          fragmentBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Fragment.Builder, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.FragmentOrBuilder>(
                  getFragment(),
                  getParentForChildren(),
                  isClean());
          fragment_ = null;
        }
        return fragmentBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.Chunk)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.Chunk)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<Chunk>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<Chunk>() {
      @java.lang.Override
      public Chunk parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<Chunk> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Chunk> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.Chunk getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InlineDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.ast.InlineData)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return A list containing the inlineFunctionTags.
     */
    java.util.List<java.lang.String>
        getInlineFunctionTagsList();
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return The count of inlineFunctionTags.
     */
    int getInlineFunctionTagsCount();
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the element to return.
     * @return The inlineFunctionTags at the given index.
     */
    java.lang.String getInlineFunctionTags(int index);
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the inlineFunctionTags at the given index.
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getInlineFunctionTagsBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineData}
   */
  public static final class InlineData extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.ast.InlineData)
      InlineDataOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      org.jetbrains.kotlin.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        org.jetbrains.kotlin.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        InlineData.class.getName());
    }
    // Use InlineData.newBuilder() to construct.
    private InlineData(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private InlineData() {
      inlineFunctionTags_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    }

    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_descriptor;
    }

    @java.lang.Override
    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.Builder.class);
    }

    public static final int INLINE_FUNCTION_TAGS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private org.jetbrains.kotlin.protobuf.LazyStringArrayList inlineFunctionTags_ =
        org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return A list containing the inlineFunctionTags.
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getInlineFunctionTagsList() {
      return inlineFunctionTags_;
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @return The count of inlineFunctionTags.
     */
    public int getInlineFunctionTagsCount() {
      return inlineFunctionTags_.size();
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the element to return.
     * @return The inlineFunctionTags at the given index.
     */
    public java.lang.String getInlineFunctionTags(int index) {
      return inlineFunctionTags_.get(index);
    }
    /**
     * <code>repeated string inline_function_tags = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the inlineFunctionTags at the given index.
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getInlineFunctionTagsBytes(int index) {
      return inlineFunctionTags_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < inlineFunctionTags_.size(); i++) {
        org.jetbrains.kotlin.protobuf.GeneratedMessage.writeString(output, 1, inlineFunctionTags_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < inlineFunctionTags_.size(); i++) {
          dataSize += computeStringSizeNoTag(inlineFunctionTags_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getInlineFunctionTagsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData)) {
        return super.equals(obj);
      }
      org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData other = (org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData) obj;

      if (!getInlineFunctionTagsList()
          .equals(other.getInlineFunctionTagsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getInlineFunctionTagsCount() > 0) {
        hash = (37 * hash) + INLINE_FUNCTION_TAGS_FIELD_NUMBER;
        hash = (53 * hash) + getInlineFunctionTagsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        java.nio.ByteBuffer data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        java.nio.ByteBuffer data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return org.jetbrains.kotlin.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.ast.InlineData}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.ast.InlineData)
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineDataOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_descriptor;
      }

      @java.lang.Override
      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.class, org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.newBuilder()
      private Builder() {

      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        inlineFunctionTags_ =
            org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_descriptor;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.getDefaultInstance();
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData build() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData buildPartial() {
        org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData result = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          inlineFunctionTags_.makeImmutable();
          result.inlineFunctionTags_ = inlineFunctionTags_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData other) {
        if (other == org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData.getDefaultInstance()) return this;
        if (!other.inlineFunctionTags_.isEmpty()) {
          if (inlineFunctionTags_.isEmpty()) {
            inlineFunctionTags_ = other.inlineFunctionTags_;
            bitField0_ |= 0x00000001;
          } else {
            ensureInlineFunctionTagsIsMutable();
            inlineFunctionTags_.addAll(other.inlineFunctionTags_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
                ensureInlineFunctionTagsIsMutable();
                inlineFunctionTags_.add(bs);
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.protobuf.LazyStringArrayList inlineFunctionTags_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
      private void ensureInlineFunctionTagsIsMutable() {
        if (!inlineFunctionTags_.isModifiable()) {
          inlineFunctionTags_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(inlineFunctionTags_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @return A list containing the inlineFunctionTags.
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getInlineFunctionTagsList() {
        inlineFunctionTags_.makeImmutable();
        return inlineFunctionTags_;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @return The count of inlineFunctionTags.
       */
      public int getInlineFunctionTagsCount() {
        return inlineFunctionTags_.size();
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param index The index of the element to return.
       * @return The inlineFunctionTags at the given index.
       */
      public java.lang.String getInlineFunctionTags(int index) {
        return inlineFunctionTags_.get(index);
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the inlineFunctionTags at the given index.
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getInlineFunctionTagsBytes(int index) {
        return inlineFunctionTags_.getByteString(index);
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param index The index to set the value at.
       * @param value The inlineFunctionTags to set.
       * @return This builder for chaining.
       */
      public Builder setInlineFunctionTags(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureInlineFunctionTagsIsMutable();
        inlineFunctionTags_.set(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param value The inlineFunctionTags to add.
       * @return This builder for chaining.
       */
      public Builder addInlineFunctionTags(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureInlineFunctionTagsIsMutable();
        inlineFunctionTags_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param values The inlineFunctionTags to add.
       * @return This builder for chaining.
       */
      public Builder addAllInlineFunctionTags(
          java.lang.Iterable<java.lang.String> values) {
        ensureInlineFunctionTagsIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, inlineFunctionTags_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInlineFunctionTags() {
        inlineFunctionTags_ =
          org.jetbrains.kotlin.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string inline_function_tags = 1;</code>
       * @param value The bytes of the inlineFunctionTags to add.
       * @return This builder for chaining.
       */
      public Builder addInlineFunctionTagsBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureInlineFunctionTagsIsMutable();
        inlineFunctionTags_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.ast.InlineData)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.ast.InlineData)
    private static final org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData();
    }

    public static org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final org.jetbrains.kotlin.protobuf.Parser<InlineData>
        PARSER = new org.jetbrains.kotlin.protobuf.AbstractParser<InlineData>() {
      @java.lang.Override
      public InlineData parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (org.jetbrains.kotlin.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static org.jetbrains.kotlin.protobuf.Parser<InlineData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<InlineData> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.jetbrains.kotlin.serialization.js.ast.JsAstProtoBuf.InlineData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_If_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_If_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_While_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_While_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_For_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_For_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_descriptor;
  private static final 
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035js/js.config/src/js-ast.proto\022)org.jet" +
      "brains.kotlin.serialization.js.ast\">\n\010Lo" +
      "cation\022\030\n\tstartLine\030\001 \001(\005B\005\252\001\002\010\003\022\030\n\tstar" +
      "tChar\030\002 \001(\005B\005\252\001\002\010\003\"\236\001\n\020JsImportedModule\022" +
      "\034\n\rexternal_name\030\001 \001(\005B\005\252\001\002\010\003\022\034\n\rinterna" +
      "l_name\030\002 \001(\005B\005\252\001\002\010\003\022N\n\017plain_reference\030\003" +
      " \001(\01325.org.jetbrains.kotlin.serializatio" +
      "n.js.ast.Expression\"\261\020\n\nExpression\022\016\n\006fi" +
      "leId\030\001 \001(\005\022E\n\010location\030\002 \001(\01323.org.jetbr" +
      "ains.kotlin.serialization.js.ast.Locatio" +
      "n\022\030\n\tsynthetic\030\003 \001(\010:\005false\022[\n\014side_effe" +
      "cts\030\004 \001(\01626.org.jetbrains.kotlin.seriali" +
      "zation.js.ast.SideEffects:\rAFFECTS_STATE" +
      "\022P\n\013local_alias\030\005 \001(\0132;.org.jetbrains.ko" +
      "tlin.serialization.js.ast.JsImportedModu" +
      "le\022K\n\017before_comments\030\006 \003(\01322.org.jetbra" +
      "ins.kotlin.serialization.js.ast.Comment\022" +
      "J\n\016after_comments\030\007 \003(\01322.org.jetbrains." +
      "kotlin.serialization.js.ast.Comment\022\037\n\025s" +
      "imple_name_reference\030\026 \001(\005H\000\022N\n\014this_lit" +
      "eral\030\027 \001(\01326.org.jetbrains.kotlin.serial" +
      "ization.js.ast.ThisLiteralH\000\022N\n\014null_lit" +
      "eral\030\030 \001(\01326.org.jetbrains.kotlin.serial" +
      "ization.js.ast.NullLiteralH\000\022N\n\014true_lit" +
      "eral\030\031 \001(\01326.org.jetbrains.kotlin.serial" +
      "ization.js.ast.TrueLiteralH\000\022P\n\rfalse_li" +
      "teral\030\032 \001(\01327.org.jetbrains.kotlin.seria" +
      "lization.js.ast.FalseLiteralH\000\022\030\n\016string" +
      "_literal\030\033 \001(\005H\000\022S\n\017reg_exp_literal\030\034 \001(" +
      "\01328.org.jetbrains.kotlin.serialization.j" +
      "s.ast.RegExpLiteralH\000\022\025\n\013int_literal\030\035 \001" +
      "(\005H\000\022\030\n\016double_literal\030\036 \001(\001H\000\022P\n\rarray_" +
      "literal\030\037 \001(\01327.org.jetbrains.kotlin.ser" +
      "ialization.js.ast.ArrayLiteralH\000\022R\n\016obje" +
      "ct_literal\030  \001(\01328.org.jetbrains.kotlin." +
      "serialization.js.ast.ObjectLiteralH\000\022G\n\010" +
      "function\030! \001(\01323.org.jetbrains.kotlin.se" +
      "rialization.js.ast.FunctionH\000\022L\n\013doc_com" +
      "ment\030\" \001(\01325.org.jetbrains.kotlin.serial" +
      "ization.js.ast.DocCommentH\000\022L\n\006binary\030# " +
      "\001(\0132:.org.jetbrains.kotlin.serialization" +
      ".js.ast.BinaryOperationH\000\022J\n\005unary\030$ \001(\013" +
      "29.org.jetbrains.kotlin.serialization.js" +
      ".ast.UnaryOperationH\000\022M\n\013conditional\030% \001" +
      "(\01326.org.jetbrains.kotlin.serialization." +
      "js.ast.ConditionalH\000\022N\n\014array_access\030& \001" +
      "(\01326.org.jetbrains.kotlin.serialization." +
      "js.ast.ArrayAccessH\000\022R\n\016name_reference\030\'" +
      " \001(\01328.org.jetbrains.kotlin.serializatio" +
      "n.js.ast.NameReferenceH\000\022Z\n\022property_ref" +
      "erence\030( \001(\0132<.org.jetbrains.kotlin.seri" +
      "alization.js.ast.PropertyReferenceH\000\022K\n\n" +
      "invocation\030) \001(\01325.org.jetbrains.kotlin." +
      "serialization.js.ast.InvocationH\000\022Q\n\rins" +
      "tantiation\030* \001(\01328.org.jetbrains.kotlin." +
      "serialization.js.ast.InstantiationH\000\022P\n\r" +
      "super_literal\030+ \001(\01327.org.jetbrains.kotl" +
      "in.serialization.js.ast.SuperLiteralH\000\022A" +
      "\n\005class\030, \001(\01320.org.jetbrains.kotlin.ser" +
      "ialization.js.ast.ClassH\000B\014\n\nexpression\"" +
      "\r\n\013ThisLiteral\"\016\n\014SuperLiteral\"\r\n\013NullLi" +
      "teral\"\r\n\013TrueLiteral\"\016\n\014FalseLiteral\"J\n\r" +
      "RegExpLiteral\022 \n\021pattern_string_id\030\001 \001(\005" +
      "B\005\252\001\002\010\003\022\027\n\017flags_string_id\030\002 \001(\005\"V\n\014Arra" +
      "yLiteral\022F\n\007element\030\001 \003(\01325.org.jetbrain" +
      "s.kotlin.serialization.js.ast.Expression" +
      "\"v\n\rObjectLiteral\022L\n\005entry\030\001 \003(\0132=.org.j" +
      "etbrains.kotlin.serialization.js.ast.Obj" +
      "ectLiteralEntry\022\027\n\tmultiline\030\002 \001(\010:\004true" +
      "\"\254\001\n\022ObjectLiteralEntry\022I\n\003key\030\001 \001(\01325.o" +
      "rg.jetbrains.kotlin.serialization.js.ast" +
      ".ExpressionB\005\252\001\002\010\003\022K\n\005value\030\002 \001(\01325.org." +
      "jetbrains.kotlin.serialization.js.ast.Ex" +
      "pressionB\005\252\001\002\010\003\"\361\002\n\010Function\022G\n\tparamete" +
      "r\030\001 \003(\01324.org.jetbrains.kotlin.serializa" +
      "tion.js.ast.Parameter\022\017\n\007name_id\030\002 \001(\005\022I" +
      "\n\004body\030\003 \001(\01324.org.jetbrains.kotlin.seri" +
      "alization.js.ast.StatementB\005\252\001\002\010\003\022\024\n\005loc" +
      "al\030\004 \001(\010:\005false\022N\n\010modifier\030\005 \003(\0162<.org." +
      "jetbrains.kotlin.serialization.js.ast.Fu" +
      "nction.Modifier\022\033\n\014is_es6_arrow\030\006 \001(\010:\005f" +
      "alse\"=\n\010Modifier\022\n\n\006STATIC\020\001\022\007\n\003GET\020\002\022\007\n" +
      "\003SET\020\003\022\r\n\tGENERATOR\020\004\032\004:\002\020\002\"\370\001\n\005Class\022\017\n" +
      "\007name_id\030\001 \001(\005\022O\n\020super_expression\030\002 \001(\013" +
      "25.org.jetbrains.kotlin.serialization.js" +
      ".ast.Expression\022H\n\013constructor\030\003 \001(\01323.o" +
      "rg.jetbrains.kotlin.serialization.js.ast" +
      ".Function\022C\n\006member\030\004 \003(\01323.org.jetbrain" +
      "s.kotlin.serialization.js.ast.Function\"E" +
      "\n\tParameter\022\026\n\007name_id\030\001 \001(\005B\005\252\001\002\010\003\022 \n\021h" +
      "as_default_value\030\002 \001(\010:\005false\"S\n\nDocComm" +
      "ent\022E\n\003tag\030\001 \003(\01328.org.jetbrains.kotlin." +
      "serialization.js.ast.DocCommentTag\"\230\001\n\rD" +
      "ocCommentTag\022\026\n\007name_id\030\001 \001(\005B\005\252\001\002\010\003\022\031\n\017" +
      "value_string_id\030\002 \001(\005H\000\022K\n\nexpression\030\003 " +
      "\001(\01325.org.jetbrains.kotlin.serialization" +
      ".js.ast.ExpressionH\000B\007\n\005value\"8\n\007Comment" +
      "\022\023\n\004text\030\001 \001(\tB\005\252\001\002\010\003\022\030\n\tmultiline\030\002 \001(\010" +
      "B\005\252\001\002\010\003\"\242\005\n\017BinaryOperation\022J\n\004left\030\001 \001(" +
      "\01325.org.jetbrains.kotlin.serialization.j" +
      "s.ast.ExpressionB\005\252\001\002\010\003\022K\n\005right\030\002 \001(\01325" +
      ".org.jetbrains.kotlin.serialization.js.a" +
      "st.ExpressionB\005\252\001\002\010\003\022T\n\004type\030\003 \001(\0162?.org" +
      ".jetbrains.kotlin.serialization.js.ast.B" +
      "inaryOperation.TypeB\005\252\001\002\010\003\"\237\003\n\004Type\022\007\n\003M" +
      "UL\020\001\022\007\n\003DIV\020\002\022\007\n\003MOD\020\003\022\007\n\003ADD\020\004\022\007\n\003SUB\020\005" +
      "\022\007\n\003SHL\020\006\022\007\n\003SHR\020\007\022\010\n\004SHRU\020\010\022\006\n\002LT\020\t\022\007\n\003" +
      "LTE\020\n\022\006\n\002GT\020\013\022\007\n\003GTE\020\014\022\016\n\nINSTANCEOF\020\r\022\006" +
      "\n\002IN\020\016\022\006\n\002EQ\020\017\022\007\n\003NEQ\020\020\022\n\n\006REF_EQ\020\021\022\013\n\007R" +
      "EF_NEQ\020\022\022\013\n\007BIT_AND\020\023\022\013\n\007BIT_XOR\020\024\022\n\n\006BI" +
      "T_OR\020\025\022\007\n\003AND\020\026\022\006\n\002OR\020\027\022\007\n\003ASG\020\030\022\013\n\007ASG_" +
      "ADD\020\031\022\013\n\007ASG_SUB\020\032\022\013\n\007ASG_MUL\020\033\022\013\n\007ASG_D" +
      "IV\020\034\022\013\n\007ASG_MOD\020\035\022\013\n\007ASG_SHL\020\036\022\013\n\007ASG_SH" +
      "R\020\037\022\014\n\010ASG_SHRU\020 \022\017\n\013ASG_BIT_AND\020!\022\016\n\nAS" +
      "G_BIT_OR\020\"\022\017\n\013ASG_BIT_XOR\020#\022\t\n\005COMMA\020$\032\004" +
      ":\002\020\002\"\266\002\n\016UnaryOperation\022M\n\007operand\030\001 \001(\013" +
      "25.org.jetbrains.kotlin.serialization.js" +
      ".ast.ExpressionB\005\252\001\002\010\003\022S\n\004type\030\002 \001(\0162>.o" +
      "rg.jetbrains.kotlin.serialization.js.ast" +
      ".UnaryOperation.TypeB\005\252\001\002\010\003\022\026\n\007postfix\030\003" +
      " \001(\010B\005\252\001\002\010\003\"h\n\004Type\022\013\n\007BIT_NOT\020\001\022\007\n\003DEC\020" +
      "\002\022\n\n\006DELETE\020\003\022\007\n\003INC\020\004\022\007\n\003NEG\020\005\022\007\n\003POS\020\006" +
      "\022\007\n\003NOT\020\007\022\n\n\006TYPEOF\020\010\022\010\n\004VOID\020\t\032\004:\002\020\002\"\222\002" +
      "\n\013Conditional\022U\n\017test_expression\030\001 \001(\01325" +
      ".org.jetbrains.kotlin.serialization.js.a" +
      "st.ExpressionB\005\252\001\002\010\003\022U\n\017then_expression\030" +
      "\002 \001(\01325.org.jetbrains.kotlin.serializati" +
      "on.js.ast.ExpressionB\005\252\001\002\010\003\022U\n\017else_expr" +
      "ession\030\003 \001(\01325.org.jetbrains.kotlin.seri" +
      "alization.js.ast.ExpressionB\005\252\001\002\010\003\"\247\001\n\013A" +
      "rrayAccess\022K\n\005array\030\001 \001(\01325.org.jetbrain" +
      "s.kotlin.serialization.js.ast.Expression" +
      "B\005\252\001\002\010\003\022K\n\005index\030\002 \001(\01325.org.jetbrains.k" +
      "otlin.serialization.js.ast.ExpressionB\005\252" +
      "\001\002\010\003\"\321\001\n\rNameReference\022\026\n\007name_id\030\001 \001(\005B" +
      "\005\252\001\002\010\003\022H\n\tqualifier\030\002 \001(\01325.org.jetbrain" +
      "s.kotlin.serialization.js.ast.Expression" +
      "\022^\n\017inline_strategy\030\003 \001(\01629.org.jetbrain" +
      "s.kotlin.serialization.js.ast.InlineStra" +
      "tegy:\nNOT_INLINE\"\327\001\n\021PropertyReference\022\030" +
      "\n\tstring_id\030\001 \001(\005B\005\252\001\002\010\003\022H\n\tqualifier\030\002 " +
      "\001(\01325.org.jetbrains.kotlin.serialization" +
      ".js.ast.Expression\022^\n\017inline_strategy\030\003 " +
      "\001(\01629.org.jetbrains.kotlin.serialization" +
      ".js.ast.InlineStrategy:\nNOT_INLINE\"\206\002\n\nI" +
      "nvocation\022O\n\tqualifier\030\001 \001(\01325.org.jetbr" +
      "ains.kotlin.serialization.js.ast.Express" +
      "ionB\005\252\001\002\010\003\022G\n\010argument\030\002 \003(\01325.org.jetbr" +
      "ains.kotlin.serialization.js.ast.Express" +
      "ion\022^\n\017inline_strategy\030\003 \001(\01629.org.jetbr" +
      "ains.kotlin.serialization.js.ast.InlineS" +
      "trategy:\nNOT_INLINE\"\251\001\n\rInstantiation\022O\n" +
      "\tqualifier\030\001 \001(\01325.org.jetbrains.kotlin." +
      "serialization.js.ast.ExpressionB\005\252\001\002\010\003\022G" +
      "\n\010argument\030\002 \003(\01325.org.jetbrains.kotlin." +
      "serialization.js.ast.Expression\"\252\016\n\tStat" +
      "ement\022\016\n\006fileId\030\001 \001(\005\022E\n\010location\030\002 \001(\0132" +
      "3.org.jetbrains.kotlin.serialization.js." +
      "ast.Location\022\030\n\tsynthetic\030\003 \001(\010:\005false\022K" +
      "\n\017before_comments\030\004 \003(\01322.org.jetbrains." +
      "kotlin.serialization.js.ast.Comment\022J\n\016a" +
      "fter_comments\030\005 \003(\01322.org.jetbrains.kotl" +
      "in.serialization.js.ast.Comment\022M\n\020retur" +
      "n_statement\030\025 \001(\01321.org.jetbrains.kotlin" +
      ".serialization.js.ast.ReturnH\000\022K\n\017throw_" +
      "statement\030\026 \001(\01320.org.jetbrains.kotlin.s" +
      "erialization.js.ast.ThrowH\000\022K\n\017break_sta" +
      "tement\030\027 \001(\01320.org.jetbrains.kotlin.seri" +
      "alization.js.ast.BreakH\000\022Q\n\022continue_sta" +
      "tement\030\030 \001(\01323.org.jetbrains.kotlin.seri" +
      "alization.js.ast.ContinueH\000\022G\n\010debugger\030" +
      "\031 \001(\01323.org.jetbrains.kotlin.serializati" +
      "on.js.ast.DebuggerH\000\022T\n\nexpression\030\032 \001(\013" +
      "2>.org.jetbrains.kotlin.serialization.js" +
      ".ast.ExpressionStatementH\000\022?\n\004vars\030\033 \001(\013" +
      "2/.org.jetbrains.kotlin.serialization.js" +
      ".ast.VarsH\000\022A\n\005block\030\034 \001(\01320.org.jetbrai" +
      "ns.kotlin.serialization.js.ast.BlockH\000\022T" +
      "\n\017composite_block\030\035 \001(\01329.org.jetbrains." +
      "kotlin.serialization.js.ast.CompositeBlo" +
      "ckH\000\022A\n\005label\030\036 \001(\01320.org.jetbrains.kotl" +
      "in.serialization.js.ast.LabelH\000\022E\n\014if_st" +
      "atement\030\037 \001(\0132-.org.jetbrains.kotlin.ser" +
      "ialization.js.ast.IfH\000\022M\n\020switch_stateme" +
      "nt\030  \001(\01321.org.jetbrains.kotlin.serializ" +
      "ation.js.ast.SwitchH\000\022K\n\017while_statement" +
      "\030! \001(\01320.org.jetbrains.kotlin.serializat" +
      "ion.js.ast.WhileH\000\022P\n\022do_while_statement" +
      "\030\" \001(\01322.org.jetbrains.kotlin.serializat" +
      "ion.js.ast.DoWhileH\000\022G\n\rfor_statement\030# " +
      "\001(\0132..org.jetbrains.kotlin.serialization" +
      ".js.ast.ForH\000\022L\n\020for_in_statement\030$ \001(\0132" +
      "0.org.jetbrains.kotlin.serialization.js." +
      "ast.ForInH\000\022G\n\rtry_statement\030% \001(\0132..org" +
      ".jetbrains.kotlin.serialization.js.ast.T" +
      "ryH\000\022A\n\005empty\030& \001(\01320.org.jetbrains.kotl" +
      "in.serialization.js.ast.EmptyH\000\022[\n\023singl" +
      "e_line_comment\030\' \001(\0132<.org.jetbrains.kot" +
      "lin.serialization.js.ast.SingleLineComme" +
      "ntH\000\022Y\n\022multi_line_comment\030( \001(\0132;.org.j" +
      "etbrains.kotlin.serialization.js.ast.Mul" +
      "tiLineCommentH\000B\013\n\tstatement\"N\n\006Return\022D" +
      "\n\005value\030\001 \001(\01325.org.jetbrains.kotlin.ser" +
      "ialization.js.ast.Expression\"X\n\005Throw\022O\n" +
      "\texception\030\001 \001(\01325.org.jetbrains.kotlin." +
      "serialization.js.ast.ExpressionB\005\252\001\002\010\003\"\031" +
      "\n\005Break\022\020\n\010label_id\030\001 \001(\005\"\034\n\010Continue\022\020\n" +
      "\010label_id\030\001 \001(\005\"\n\n\010Debugger\"\200\001\n\023Expressi" +
      "onStatement\022P\n\nexpression\030\001 \001(\01325.org.je" +
      "tbrains.kotlin.serialization.js.ast.Expr" +
      "essionB\005\252\001\002\010\003\022\027\n\017exported_tag_id\030\002 \001(\005\"\215" +
      "\001\n\004Vars\022N\n\013declaration\030\001 \003(\01329.org.jetbr" +
      "ains.kotlin.serialization.js.ast.VarDecl" +
      "aration\022\030\n\tmultiline\030\002 \001(\010:\005false\022\033\n\023exp" +
      "orted_package_id\030\003 \001(\005\"\315\001\n\016VarDeclaratio" +
      "n\022\026\n\007name_id\030\001 \001(\005B\005\252\001\002\010\003\022L\n\rinitial_val" +
      "ue\030\002 \001(\01325.org.jetbrains.kotlin.serializ" +
      "ation.js.ast.Expression\022\016\n\006fileId\030\003 \001(\005\022" +
      "E\n\010location\030\004 \001(\01323.org.jetbrains.kotlin" +
      ".serialization.js.ast.Location\"P\n\005Block\022" +
      "G\n\tstatement\030\001 \003(\01324.org.jetbrains.kotli" +
      "n.serialization.js.ast.Statement\"Y\n\016Comp" +
      "ositeBlock\022G\n\tstatement\030\001 \003(\01324.org.jetb" +
      "rains.kotlin.serialization.js.ast.Statem" +
      "ent\"t\n\005Label\022\025\n\006nameId\030\001 \001(\005B\005\252\001\002\010\003\022T\n\017i" +
      "nner_statement\030\002 \001(\01324.org.jetbrains.kot" +
      "lin.serialization.js.ast.StatementB\005\252\001\002\010" +
      "\003\"\370\001\n\002If\022O\n\tcondition\030\001 \001(\01325.org.jetbra" +
      "ins.kotlin.serialization.js.ast.Expressi" +
      "onB\005\252\001\002\010\003\022S\n\016then_statement\030\002 \001(\01324.org." +
      "jetbrains.kotlin.serialization.js.ast.St" +
      "atementB\005\252\001\002\010\003\022L\n\016else_statement\030\003 \001(\01324" +
      ".org.jetbrains.kotlin.serialization.js.a" +
      "st.Statement\"\241\001\n\006Switch\022P\n\nexpression\030\001 " +
      "\001(\01325.org.jetbrains.kotlin.serialization" +
      ".js.ast.ExpressionB\005\252\001\002\010\003\022E\n\005entry\030\002 \003(\013" +
      "26.org.jetbrains.kotlin.serialization.js" +
      ".ast.SwitchEntry\"\363\001\n\013SwitchEntry\022D\n\005labe" +
      "l\030\001 \001(\01325.org.jetbrains.kotlin.serializa" +
      "tion.js.ast.Expression\022G\n\tstatement\030\002 \003(" +
      "\01324.org.jetbrains.kotlin.serialization.j" +
      "s.ast.Statement\022\016\n\006fileId\030\003 \001(\005\022E\n\010locat" +
      "ion\030\004 \001(\01323.org.jetbrains.kotlin.seriali" +
      "zation.js.ast.Location\"\243\001\n\005While\022O\n\tcond" +
      "ition\030\001 \001(\01325.org.jetbrains.kotlin.seria" +
      "lization.js.ast.ExpressionB\005\252\001\002\010\003\022I\n\004bod" +
      "y\030\002 \001(\01324.org.jetbrains.kotlin.serializa" +
      "tion.js.ast.StatementB\005\252\001\002\010\003\"\245\001\n\007DoWhile" +
      "\022O\n\tcondition\030\001 \001(\01325.org.jetbrains.kotl" +
      "in.serialization.js.ast.ExpressionB\005\252\001\002\010" +
      "\003\022I\n\004body\030\002 \001(\01324.org.jetbrains.kotlin.s" +
      "erialization.js.ast.StatementB\005\252\001\002\010\003\"\313\003\n" +
      "\003For\022I\n\tvariables\030\001 \001(\01324.org.jetbrains." +
      "kotlin.serialization.js.ast.StatementH\000\022" +
      "K\n\nexpression\030\002 \001(\01325.org.jetbrains.kotl" +
      "in.serialization.js.ast.ExpressionH\000\022E\n\005" +
      "empty\030\003 \001(\01324.org.jetbrains.kotlin.seria" +
      "lization.js.ast.EmptyInitH\000\022H\n\tcondition" +
      "\030\004 \001(\01325.org.jetbrains.kotlin.serializat" +
      "ion.js.ast.Expression\022H\n\tincrement\030\005 \001(\013" +
      "25.org.jetbrains.kotlin.serialization.js" +
      ".ast.Expression\022I\n\004body\030\006 \001(\01324.org.jetb" +
      "rains.kotlin.serialization.js.ast.Statem" +
      "entB\005\252\001\002\010\003B\006\n\004init\"\013\n\tEmptyInit\"\212\002\n\005ForI" +
      "n\022\020\n\006nameId\030\001 \001(\005H\000\022K\n\nexpression\030\002 \001(\0132" +
      "5.org.jetbrains.kotlin.serialization.js." +
      "ast.ExpressionH\000\022N\n\010iterable\030\003 \001(\01325.org" +
      ".jetbrains.kotlin.serialization.js.ast.E" +
      "xpressionB\005\252\001\002\010\003\022I\n\004body\030\004 \001(\01324.org.jet" +
      "brains.kotlin.serialization.js.ast.State" +
      "mentB\005\252\001\002\010\003B\007\n\005value\"\346\001\n\003Try\022M\n\010tryBlock" +
      "\030\001 \001(\01324.org.jetbrains.kotlin.serializat" +
      "ion.js.ast.StatementB\005\252\001\002\010\003\022D\n\ncatchBloc" +
      "k\030\002 \001(\01320.org.jetbrains.kotlin.serializa" +
      "tion.js.ast.Catch\022J\n\014finallyBlock\030\003 \001(\0132" +
      "4.org.jetbrains.kotlin.serialization.js." +
      "ast.Statement\"\242\001\n\005Catch\022N\n\tparameter\030\001 \001" +
      "(\01324.org.jetbrains.kotlin.serialization." +
      "js.ast.ParameterB\005\252\001\002\010\003\022I\n\004body\030\002 \001(\01324." +
      "org.jetbrains.kotlin.serialization.js.as" +
      "t.StatementB\005\252\001\002\010\003\"\007\n\005Empty\"+\n\021SingleLin" +
      "eComment\022\026\n\007message\030\001 \001(\tB\005\252\001\002\010\003\"*\n\020Mult" +
      "iLineComment\022\026\n\007message\030\001 \001(\tB\005\252\001\002\010\003\"\210\n\n" +
      "\010Fragment\022R\n\017imported_module\030\001 \003(\01329.org" +
      ".jetbrains.kotlin.serialization.js.ast.I" +
      "mportedModule\022G\n\014import_entry\030\002 \003(\01321.or" +
      "g.jetbrains.kotlin.serialization.js.ast." +
      "Import\022T\n\021declaration_block\030\003 \001(\01329.org." +
      "jetbrains.kotlin.serialization.js.ast.Co" +
      "mpositeBlock\022O\n\014export_block\030\004 \001(\01329.org" +
      ".jetbrains.kotlin.serialization.js.ast.C" +
      "ompositeBlock\022T\n\021initializer_block\030\005 \001(\013" +
      "29.org.jetbrains.kotlin.serialization.js" +
      ".ast.CompositeBlock\022L\n\014name_binding\030\006 \003(" +
      "\01326.org.jetbrains.kotlin.serialization.j" +
      "s.ast.NameBinding\022J\n\013class_model\030\007 \003(\01325" +
      ".org.jetbrains.kotlin.serialization.js.a" +
      "st.ClassModel\022P\n\021module_expression\030\010 \003(\013" +
      "25.org.jetbrains.kotlin.serialization.js" +
      ".ast.Expression\022N\n\rinline_module\030\t \003(\01327" +
      ".org.jetbrains.kotlin.serialization.js.a" +
      "st.InlineModule\022\023\n\013package_fqn\030\n \001(\t\022N\n\020" +
      "tests_invocation\030\013 \001(\01324.org.jetbrains.k" +
      "otlin.serialization.js.ast.Statement\022M\n\017" +
      "main_invocation\030\014 \001(\01324.org.jetbrains.ko" +
      "tlin.serialization.js.ast.Statement\022g\n\032i" +
      "nlined_local_declarations\030\r \003(\0132C.org.je" +
      "tbrains.kotlin.serialization.js.ast.Inli" +
      "nedLocalDeclarations\022O\n\016ir_class_model\030\016" +
      " \003(\01327.org.jetbrains.kotlin.serializatio" +
      "n.js.ast.IrClassModel\022\013\n\003dts\030\017 \001(\t\022\026\n\016su" +
      "ite_function\030\020 \001(\005\022\032\n\013definitions\030\021 \003(\005B" +
      "\005\252\001\002\030\002\022L\n\tpolyfills\030\022 \001(\01329.org.jetbrain" +
      "s.kotlin.serialization.js.ast.CompositeB" +
      "lock\022)\n\032optionalCrossModuleImports\030\023 \003(\005" +
      "B\005\252\001\002\030\002\"\177\n\030InlinedLocalDeclarations\022\022\n\003t" +
      "ag\030\001 \001(\005B\005\252\001\002\010\003\022O\n\005block\030\002 \001(\01329.org.jet" +
      "brains.kotlin.serialization.js.ast.Compo" +
      "siteBlockB\005\252\001\002\010\003\"\242\001\n\016ImportedModule\022\037\n\020e" +
      "xternal_name_id\030\001 \001(\005B\005\252\001\002\010\003\022\037\n\020internal" +
      "_name_id\030\002 \001(\005B\005\252\001\002\010\003\022N\n\017plain_reference" +
      "\030\003 \001(\01325.org.jetbrains.kotlin.serializat" +
      "ion.js.ast.Expression\"w\n\006Import\022\033\n\014signa" +
      "ture_id\030\001 \001(\005B\005\252\001\002\010\003\022P\n\nexpression\030\002 \001(\013" +
      "25.org.jetbrains.kotlin.serialization.js" +
      ".ast.ExpressionB\005\252\001\002\010\003\"A\n\013NameBinding\022\033\n" +
      "\014signature_id\030\001 \001(\005B\005\252\001\002\010\003\022\025\n\006nameId\030\002 \001" +
      "(\005B\005\252\001\002\010\003\"\270\001\n\nClassModel\022\026\n\007name_id\030\001 \001(" +
      "\005B\005\252\001\002\010\003\022\025\n\rsuper_name_id\030\002 \001(\005\022 \n\021inter" +
      "face_name_id\030\004 \003(\005B\005\252\001\002\030\002\022Y\n\026post_declar" +
      "ation_block\030\003 \001(\01329.org.jetbrains.kotlin" +
      ".serialization.js.ast.CompositeBlock\"\371\001\n" +
      "\014IrClassModel\022\026\n\007name_id\030\001 \001(\005B\005\252\001\002\010\003\022\034\n" +
      "\rsuper_classes\030\002 \003(\005B\005\252\001\002\030\002\022X\n\025pre_decla" +
      "ration_block\030\003 \001(\01329.org.jetbrains.kotli" +
      "n.serialization.js.ast.CompositeBlock\022Y\n" +
      "\026post_declaration_block\030\004 \001(\01329.org.jetb" +
      "rains.kotlin.serialization.js.ast.Compos" +
      "iteBlock\"I\n\014InlineModule\022\033\n\014signature_id" +
      "\030\001 \001(\005B\005\252\001\002\010\003\022\034\n\rexpression_id\030\002 \001(\005B\005\252\001" +
      "\002\010\003\"\034\n\013StringTable\022\r\n\005entry\030\001 \003(\t\"K\n\tNam" +
      "eTable\022>\n\005entry\030\001 \003(\0132/.org.jetbrains.ko" +
      "tlin.serialization.js.ast.Name\"\361\001\n\004Name\022" +
      "\030\n\ttemporary\030\001 \001(\010B\005\252\001\002\010\003\022\022\n\nidentifier\030" +
      "\002 \001(\005\022L\n\rlocal_name_id\030\003 \001(\01325.org.jetbr" +
      "ains.kotlin.serialization.js.ast.LocalAl" +
      "ias\022\027\n\010imported\030\004 \001(\010:\005false\022T\n\020special_" +
      "function\030\005 \001(\0162:.org.jetbrains.kotlin.se" +
      "rialization.js.ast.SpecialFunction\"7\n\nLo" +
      "calAlias\022\034\n\rlocal_name_id\030\001 \001(\005B\005\252\001\002\010\003\022\013" +
      "\n\003tag\030\002 \001(\005\"\373\001\n\005Chunk\022S\n\014string_table\030\001 " +
      "\001(\01326.org.jetbrains.kotlin.serialization" +
      ".js.ast.StringTableB\005\252\001\002\010\003\022O\n\nname_table" +
      "\030\002 \001(\01324.org.jetbrains.kotlin.serializat" +
      "ion.js.ast.NameTableB\005\252\001\002\010\003\022L\n\010fragment\030" +
      "\003 \001(\01323.org.jetbrains.kotlin.serializati" +
      "on.js.ast.FragmentB\005\252\001\002\010\003\"*\n\nInlineData\022" +
      "\034\n\024inline_function_tags\030\001 \003(\t*F\n\013SideEff" +
      "ects\022\021\n\rAFFECTS_STATE\020\001\022\024\n\020DEPENDS_ON_ST" +
      "ATE\020\002\022\010\n\004PURE\020\003\032\004:\002\020\002*E\n\016InlineStrategy\022" +
      "\017\n\013AS_FUNCTION\020\000\022\014\n\010IN_PLACE\020\001\022\016\n\nNOT_IN" +
      "LINE\020\002\032\004:\002\020\002*\223\002\n\017SpecialFunction\022\032\n\026DEFI" +
      "NE_INLINE_FUNCTION\020\001\022\021\n\rWRAP_FUNCTION\020\002\022" +
      "\021\n\rTO_BOXED_CHAR\020\003\022\016\n\nUNBOX_CHAR\020\004\022\020\n\014SU" +
      "SPEND_CALL\020\005\022\024\n\020COROUTINE_RESULT\020\006\022\030\n\024CO" +
      "ROUTINE_CONTROLLER\020\007\022\026\n\022COROUTINE_RECEIV" +
      "ER\020\010\022\030\n\024SET_COROUTINE_RESULT\020\t\022\016\n\nGET_KC" +
      "LASS\020\n\022$\n GET_REIFIED_TYPE_PARAMETER_KTY" +
      "PE\020\013\032\004:\002\020\002B\024B\rJsAstProtoBuf\222\003\002 \003b\010editio" +
      "nsp\350\007"
    };
    descriptor = org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Location_descriptor,
        new java.lang.String[] { "StartLine", "StartChar", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_JsImportedModule_descriptor,
        new java.lang.String[] { "ExternalName", "InternalName", "PlainReference", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Expression_descriptor,
        new java.lang.String[] { "FileId", "Location", "Synthetic", "SideEffects", "LocalAlias", "BeforeComments", "AfterComments", "SimpleNameReference", "ThisLiteral", "NullLiteral", "TrueLiteral", "FalseLiteral", "StringLiteral", "RegExpLiteral", "IntLiteral", "DoubleLiteral", "ArrayLiteral", "ObjectLiteral", "Function", "DocComment", "Binary", "Unary", "Conditional", "ArrayAccess", "NameReference", "PropertyReference", "Invocation", "Instantiation", "SuperLiteral", "Class_", "Expression", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ThisLiteral_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_SuperLiteral_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_NullLiteral_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_TrueLiteral_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_FalseLiteral_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_RegExpLiteral_descriptor,
        new java.lang.String[] { "PatternStringId", "FlagsStringId", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayLiteral_descriptor,
        new java.lang.String[] { "Element", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteral_descriptor,
        new java.lang.String[] { "Entry", "Multiline", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ObjectLiteralEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Function_descriptor,
        new java.lang.String[] { "Parameter", "NameId", "Body", "Local", "Modifier", "IsEs6Arrow", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Class_descriptor,
        new java.lang.String[] { "NameId", "SuperExpression", "Constructor", "Member", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Parameter_descriptor,
        new java.lang.String[] { "NameId", "HasDefaultValue", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_DocComment_descriptor,
        new java.lang.String[] { "Tag", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_DocCommentTag_descriptor,
        new java.lang.String[] { "NameId", "ValueStringId", "Expression", "Value", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Comment_descriptor,
        new java.lang.String[] { "Text", "Multiline", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_BinaryOperation_descriptor,
        new java.lang.String[] { "Left", "Right", "Type", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_UnaryOperation_descriptor,
        new java.lang.String[] { "Operand", "Type", "Postfix", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Conditional_descriptor,
        new java.lang.String[] { "TestExpression", "ThenExpression", "ElseExpression", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ArrayAccess_descriptor,
        new java.lang.String[] { "Array", "Index", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_NameReference_descriptor,
        new java.lang.String[] { "NameId", "Qualifier", "InlineStrategy", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_PropertyReference_descriptor,
        new java.lang.String[] { "StringId", "Qualifier", "InlineStrategy", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Invocation_descriptor,
        new java.lang.String[] { "Qualifier", "Argument", "InlineStrategy", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Instantiation_descriptor,
        new java.lang.String[] { "Qualifier", "Argument", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Statement_descriptor,
        new java.lang.String[] { "FileId", "Location", "Synthetic", "BeforeComments", "AfterComments", "ReturnStatement", "ThrowStatement", "BreakStatement", "ContinueStatement", "Debugger", "Expression", "Vars", "Block", "CompositeBlock", "Label", "IfStatement", "SwitchStatement", "WhileStatement", "DoWhileStatement", "ForStatement", "ForInStatement", "TryStatement", "Empty", "SingleLineComment", "MultiLineComment", "Statement", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Return_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_descriptor =
      getDescriptor().getMessageTypes().get(28);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Throw_descriptor,
        new java.lang.String[] { "Exception", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_descriptor =
      getDescriptor().getMessageTypes().get(29);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Break_descriptor,
        new java.lang.String[] { "LabelId", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_descriptor =
      getDescriptor().getMessageTypes().get(30);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Continue_descriptor,
        new java.lang.String[] { "LabelId", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_descriptor =
      getDescriptor().getMessageTypes().get(31);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Debugger_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_descriptor =
      getDescriptor().getMessageTypes().get(32);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ExpressionStatement_descriptor,
        new java.lang.String[] { "Expression", "ExportedTagId", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_descriptor =
      getDescriptor().getMessageTypes().get(33);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Vars_descriptor,
        new java.lang.String[] { "Declaration", "Multiline", "ExportedPackageId", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_descriptor =
      getDescriptor().getMessageTypes().get(34);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_VarDeclaration_descriptor,
        new java.lang.String[] { "NameId", "InitialValue", "FileId", "Location", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_descriptor =
      getDescriptor().getMessageTypes().get(35);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Block_descriptor,
        new java.lang.String[] { "Statement", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_descriptor =
      getDescriptor().getMessageTypes().get(36);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_CompositeBlock_descriptor,
        new java.lang.String[] { "Statement", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_descriptor =
      getDescriptor().getMessageTypes().get(37);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Label_descriptor,
        new java.lang.String[] { "NameId", "InnerStatement", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_If_descriptor =
      getDescriptor().getMessageTypes().get(38);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_If_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_If_descriptor,
        new java.lang.String[] { "Condition", "ThenStatement", "ElseStatement", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_descriptor =
      getDescriptor().getMessageTypes().get(39);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Switch_descriptor,
        new java.lang.String[] { "Expression", "Entry", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_descriptor =
      getDescriptor().getMessageTypes().get(40);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_SwitchEntry_descriptor,
        new java.lang.String[] { "Label", "Statement", "FileId", "Location", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_While_descriptor =
      getDescriptor().getMessageTypes().get(41);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_While_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_While_descriptor,
        new java.lang.String[] { "Condition", "Body", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_descriptor =
      getDescriptor().getMessageTypes().get(42);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_DoWhile_descriptor,
        new java.lang.String[] { "Condition", "Body", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_For_descriptor =
      getDescriptor().getMessageTypes().get(43);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_For_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_For_descriptor,
        new java.lang.String[] { "Variables", "Expression", "Empty", "Condition", "Increment", "Body", "Init", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_descriptor =
      getDescriptor().getMessageTypes().get(44);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_EmptyInit_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_descriptor =
      getDescriptor().getMessageTypes().get(45);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ForIn_descriptor,
        new java.lang.String[] { "NameId", "Expression", "Iterable", "Body", "Value", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_descriptor =
      getDescriptor().getMessageTypes().get(46);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Try_descriptor,
        new java.lang.String[] { "TryBlock", "CatchBlock", "FinallyBlock", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_descriptor =
      getDescriptor().getMessageTypes().get(47);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Catch_descriptor,
        new java.lang.String[] { "Parameter", "Body", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_descriptor =
      getDescriptor().getMessageTypes().get(48);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Empty_descriptor,
        new java.lang.String[] { });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_descriptor =
      getDescriptor().getMessageTypes().get(49);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_SingleLineComment_descriptor,
        new java.lang.String[] { "Message", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_descriptor =
      getDescriptor().getMessageTypes().get(50);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_MultiLineComment_descriptor,
        new java.lang.String[] { "Message", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_descriptor =
      getDescriptor().getMessageTypes().get(51);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Fragment_descriptor,
        new java.lang.String[] { "ImportedModule", "ImportEntry", "DeclarationBlock", "ExportBlock", "InitializerBlock", "NameBinding", "ClassModel", "ModuleExpression", "InlineModule", "PackageFqn", "TestsInvocation", "MainInvocation", "InlinedLocalDeclarations", "IrClassModel", "Dts", "SuiteFunction", "Definitions", "Polyfills", "OptionalCrossModuleImports", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_descriptor =
      getDescriptor().getMessageTypes().get(52);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_InlinedLocalDeclarations_descriptor,
        new java.lang.String[] { "Tag", "Block", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_descriptor =
      getDescriptor().getMessageTypes().get(53);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ImportedModule_descriptor,
        new java.lang.String[] { "ExternalNameId", "InternalNameId", "PlainReference", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_descriptor =
      getDescriptor().getMessageTypes().get(54);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Import_descriptor,
        new java.lang.String[] { "SignatureId", "Expression", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_descriptor =
      getDescriptor().getMessageTypes().get(55);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_NameBinding_descriptor,
        new java.lang.String[] { "SignatureId", "NameId", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_descriptor =
      getDescriptor().getMessageTypes().get(56);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_ClassModel_descriptor,
        new java.lang.String[] { "NameId", "SuperNameId", "InterfaceNameId", "PostDeclarationBlock", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_descriptor =
      getDescriptor().getMessageTypes().get(57);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_IrClassModel_descriptor,
        new java.lang.String[] { "NameId", "SuperClasses", "PreDeclarationBlock", "PostDeclarationBlock", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_descriptor =
      getDescriptor().getMessageTypes().get(58);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineModule_descriptor,
        new java.lang.String[] { "SignatureId", "ExpressionId", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_descriptor =
      getDescriptor().getMessageTypes().get(59);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_StringTable_descriptor,
        new java.lang.String[] { "Entry", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_descriptor =
      getDescriptor().getMessageTypes().get(60);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_NameTable_descriptor,
        new java.lang.String[] { "Entry", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_descriptor =
      getDescriptor().getMessageTypes().get(61);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Name_descriptor,
        new java.lang.String[] { "Temporary", "Identifier", "LocalNameId", "Imported", "SpecialFunction", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_descriptor =
      getDescriptor().getMessageTypes().get(62);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_LocalAlias_descriptor,
        new java.lang.String[] { "LocalNameId", "Tag", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_descriptor =
      getDescriptor().getMessageTypes().get(63);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_Chunk_descriptor,
        new java.lang.String[] { "StringTable", "NameTable", "Fragment", });
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_descriptor =
      getDescriptor().getMessageTypes().get(64);
    internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_ast_InlineData_descriptor,
        new java.lang.String[] { "InlineFunctionTags", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}